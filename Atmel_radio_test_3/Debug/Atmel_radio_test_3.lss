
Atmel_radio_test_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010cac  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  200000b0  00010cac  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000043a8  20000174  00010d70  00020174  2**2
                  ALLOC
  3 .heap         00001ae4  2000451c  00015118  00020174  2**0
                  ALLOC
  4 .stack        00002000  20006000  00016bfc  00020174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  6 .comment      000000cb  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00049bac  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007895  00000000  00000000  00069e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a031  00000000  00000000  000716a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c20  00000000  00000000  0007b6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  0007c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002488d  00000000  00000000  0007ce59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000213f6  00000000  00000000  000a16e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008893f  00000000  00000000  000c2adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003a28  00000000  00000000  0014b41c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0014ee44  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000076  00000000  00000000  0014ee80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	000046a5 	.word	0x000046a5
       8:	000046a1 	.word	0x000046a1
       c:	000046a1 	.word	0x000046a1
	...
      2c:	00002b79 	.word	0x00002b79
	...
      38:	00002be5 	.word	0x00002be5
      3c:	00002c29 	.word	0x00002c29
      40:	000046a1 	.word	0x000046a1
      44:	000046a1 	.word	0x000046a1
      48:	000046a1 	.word	0x000046a1
      4c:	00000a4d 	.word	0x00000a4d
      50:	00004765 	.word	0x00004765
      54:	000046a1 	.word	0x000046a1
      58:	000046a1 	.word	0x000046a1
      5c:	00000000 	.word	0x00000000
      60:	000046a1 	.word	0x000046a1
      64:	000046a1 	.word	0x000046a1
      68:	000046a1 	.word	0x000046a1
      6c:	000046a1 	.word	0x000046a1
      70:	000046a1 	.word	0x000046a1
	...
      7c:	000046a1 	.word	0x000046a1
      80:	000046a1 	.word	0x000046a1
      84:	000046a1 	.word	0x000046a1
      88:	00006ced 	.word	0x00006ced
      8c:	00006cf9 	.word	0x00006cf9
      90:	00006d05 	.word	0x00006d05
	...
      ac:	000046a1 	.word	0x000046a1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	00010cac 	.word	0x00010cac

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00010cac 	.word	0x00010cac
     108:	20000178 	.word	0x20000178
     10c:	00010cac 	.word	0x00010cac
     110:	00000000 	.word	0x00000000

00000114 <CLP_GenerateExtendedCommand>:
  pos += 3;
  memcpy(data.relay_hardware, buffer + pos, 3);
  pos += 3;
  memcpy(data.lcd_map, buffer + pos, 20);
  pos += 20;
  memcpy(data.output_state, buffer + pos, 16);
     114:	b510      	push	{r4, lr}
     116:	2800      	cmp	r0, #0
  pos += 16;
}
     118:	d103      	bne.n	122 <CLP_GenerateExtendedCommand+0xe>
     11a:	2201      	movs	r2, #1
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <CLP_GenerateExtendedCommand+0x34>)
     11e:	601a      	str	r2, [r3, #0]
     120:	e010      	b.n	144 <CLP_GenerateExtendedCommand+0x30>
     122:	1c04      	adds	r4, r0, #0
     124:	2345      	movs	r3, #69	; 0x45
     126:	7003      	strb	r3, [r0, #0]
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    return 0;
  }

  buffer[0] = CLP_COMMAND_EXTENDED;
  (*(uint32_t*)&buffer[1]) = _byteswap_ulong(ext.dest);
     128:	680b      	ldr	r3, [r1, #0]
     12a:	ba1b      	rev	r3, r3
     12c:	1c42      	adds	r2, r0, #1
     12e:	6013      	str	r3, [r2, #0]
  (*(uint32_t*)&buffer[5]) = _byteswap_ulong(ext.src);
     130:	684b      	ldr	r3, [r1, #4]
     132:	ba1b      	rev	r3, r3
     134:	1d42      	adds	r2, r0, #5
     136:	6013      	str	r3, [r2, #0]
  (*(uint16_t*)&buffer[9]) = _byteswap_ushort(ext.frame);
     138:	8908      	ldrh	r0, [r1, #8]
     13a:	4b04      	ldr	r3, [pc, #16]	; (14c <CLP_GenerateExtendedCommand+0x38>)
     13c:	4798      	blx	r3
     13e:	3409      	adds	r4, #9
     140:	8020      	strh	r0, [r4, #0]

  return 11;
     142:	200b      	movs	r0, #11
}
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	20000190 	.word	0x20000190
     14c:	000004c1 	.word	0x000004c1

00000150 <CLP_GenerateEscape>:

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	b0cd      	sub	sp, #308	; 0x134
  if(!buffer)
     154:	2800      	cmp	r0, #0
     156:	d004      	beq.n	162 <CLP_GenerateEscape+0x12>

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     158:	2300      	movs	r3, #0
     15a:	2200      	movs	r2, #0
     15c:	2900      	cmp	r1, #0
     15e:	d105      	bne.n	16c <CLP_GenerateEscape+0x1c>
     160:	e01b      	b.n	19a <CLP_GenerateEscape+0x4a>

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
  if(!buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     162:	2201      	movs	r2, #1
     164:	4b11      	ldr	r3, [pc, #68]	; (1ac <CLP_GenerateEscape+0x5c>)
     166:	601a      	str	r2, [r3, #0]
    return 0;
     168:	2400      	movs	r4, #0
     16a:	e01b      	b.n	1a4 <CLP_GenerateEscape+0x54>
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     16c:	4e10      	ldr	r6, [pc, #64]	; (1b0 <CLP_GenerateEscape+0x60>)
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     16e:	2710      	movs	r7, #16
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     170:	5cc4      	ldrb	r4, [r0, r3]
     172:	2c13      	cmp	r4, #19
     174:	d80b      	bhi.n	18e <CLP_GenerateEscape+0x3e>
     176:	00a5      	lsls	r5, r4, #2
     178:	5975      	ldr	r5, [r6, r5]
     17a:	46af      	mov	pc, r5
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     17c:	ad01      	add	r5, sp, #4
     17e:	18ad      	adds	r5, r5, r2
     180:	54ef      	strb	r7, [r5, r3]
        ++count;
     182:	3201      	adds	r2, #1
        temp[i + count] = buffer[i] + 0x40;
     184:	ad01      	add	r5, sp, #4
     186:	18ad      	adds	r5, r5, r2
     188:	3440      	adds	r4, #64	; 0x40
     18a:	54ec      	strb	r4, [r5, r3]
      }
      break;
     18c:	e002      	b.n	194 <CLP_GenerateEscape+0x44>
      default: temp[i + count] = buffer[i];
     18e:	ad01      	add	r5, sp, #4
     190:	18ad      	adds	r5, r5, r2
     192:	54ec      	strb	r4, [r5, r3]

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     194:	3301      	adds	r3, #1
     196:	428b      	cmp	r3, r1
     198:	d1ea      	bne.n	170 <CLP_GenerateEscape+0x20>
      break;
      default: temp[i + count] = buffer[i];
    }
  }

  memcpy(buffer, temp, length + count);
     19a:	1854      	adds	r4, r2, r1
     19c:	a901      	add	r1, sp, #4
     19e:	1c22      	adds	r2, r4, #0
     1a0:	4b04      	ldr	r3, [pc, #16]	; (1b4 <CLP_GenerateEscape+0x64>)
     1a2:	4798      	blx	r3
//  delete[] temp;

  return length + count;
}
     1a4:	1c20      	adds	r0, r4, #0
     1a6:	b04d      	add	sp, #308	; 0x134
     1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	20000190 	.word	0x20000190
     1b0:	0000f804 	.word	0x0000f804
     1b4:	0000a9df 	.word	0x0000a9df

000001b8 <CLP_ParsePacketEscape>:

  return count;
}

size_t CLP_ParsePacketEscape(const uint8_t* packet, uint8_t* buffer)
{
     1b8:	b510      	push	{r4, lr}
  if(!packet || !buffer)
     1ba:	2800      	cmp	r0, #0
     1bc:	d007      	beq.n	1ce <CLP_ParsePacketEscape+0x16>
     1be:	2900      	cmp	r1, #0
     1c0:	d005      	beq.n	1ce <CLP_ParsePacketEscape+0x16>
  }

  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
     1c2:	7802      	ldrb	r2, [r0, #0]
     1c4:	2300      	movs	r3, #0
     1c6:	2400      	movs	r4, #0
     1c8:	2a03      	cmp	r2, #3
     1ca:	d105      	bne.n	1d8 <CLP_ParsePacketEscape+0x20>
     1cc:	e011      	b.n	1f2 <CLP_ParsePacketEscape+0x3a>

size_t CLP_ParsePacketEscape(const uint8_t* packet, uint8_t* buffer)
{
  if(!packet || !buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     1ce:	2201      	movs	r2, #1
     1d0:	4b0a      	ldr	r3, [pc, #40]	; (1fc <CLP_ParsePacketEscape+0x44>)
     1d2:	601a      	str	r2, [r3, #0]
    return 0;
     1d4:	2000      	movs	r0, #0
     1d6:	e00f      	b.n	1f8 <CLP_ParsePacketEscape+0x40>
  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
  {
    if(packet[i] == CLP_ESCAPE_DLE)
     1d8:	2a10      	cmp	r2, #16
     1da:	d104      	bne.n	1e6 <CLP_ParsePacketEscape+0x2e>
    {
      buffer[count] = packet[++i] - 0x40;
     1dc:	3301      	adds	r3, #1
     1de:	5cc2      	ldrb	r2, [r0, r3]
     1e0:	3a40      	subs	r2, #64	; 0x40
     1e2:	550a      	strb	r2, [r1, r4]
     1e4:	e000      	b.n	1e8 <CLP_ParsePacketEscape+0x30>
    }
    else
    {
      buffer[count] = packet[i];
     1e6:	550a      	strb	r2, [r1, r4]
    }

    ++i;
     1e8:	3301      	adds	r3, #1
    ++count;
     1ea:	3401      	adds	r4, #1
  }

  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
     1ec:	5cc2      	ldrb	r2, [r0, r3]
     1ee:	2a03      	cmp	r2, #3
     1f0:	d1f2      	bne.n	1d8 <CLP_ParsePacketEscape+0x20>

    ++i;
    ++count;
  }

  buffer[count] = packet[i];
     1f2:	2303      	movs	r3, #3
     1f4:	550b      	strb	r3, [r1, r4]

  return count+1;
     1f6:	1c60      	adds	r0, r4, #1
}
     1f8:	bd10      	pop	{r4, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	20000190 	.word	0x20000190

00000200 <CLP_CheckPacketCRCFail>:

  return 9;
}

bool CLP_CheckPacketCRCFail(const uint8_t* packet, size_t length, bool escape)
{
     200:	b570      	push	{r4, r5, r6, lr}
     202:	b0cc      	sub	sp, #304	; 0x130
  if(!packet)
     204:	2800      	cmp	r0, #0
     206:	d103      	bne.n	210 <CLP_CheckPacketCRCFail+0x10>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     208:	2201      	movs	r2, #1
     20a:	4b15      	ldr	r3, [pc, #84]	; (260 <CLP_CheckPacketCRCFail+0x60>)
     20c:	601a      	str	r2, [r3, #0]
    return 0;
     20e:	e025      	b.n	25c <CLP_CheckPacketCRCFail+0x5c>
     210:	1c0d      	adds	r5, r1, #0
     212:	1c04      	adds	r4, r0, #0
  }
  
  bool crcfail = false;

  if(escape)
     214:	2a00      	cmp	r2, #0
     216:	d011      	beq.n	23c <CLP_CheckPacketCRCFail+0x3c>
  {
    uint8_t clpbuffer[CLP_UTILITY_MAX_PACKET_SIZE];
    size_t clplength = CLP_ParsePacketEscape(packet, clpbuffer);
     218:	ad01      	add	r5, sp, #4
     21a:	1c29      	adds	r1, r5, #0
     21c:	4b11      	ldr	r3, [pc, #68]	; (264 <CLP_CheckPacketCRCFail+0x64>)
     21e:	4798      	blx	r3

    uint16_t crc = CalculateBufferCRC16(clpbuffer, clplength - 3, 0x0000);
     220:	1ec4      	subs	r4, r0, #3
     222:	1c28      	adds	r0, r5, #0
     224:	1c21      	adds	r1, r4, #0
     226:	2200      	movs	r2, #0
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <CLP_CheckPacketCRCFail+0x68>)
     22a:	4798      	blx	r3

    crcfail = (*(uint16_t*)&clpbuffer[clplength - 3]) != _byteswap_ushort(crc);
     22c:	5b2c      	ldrh	r4, [r5, r4]
     22e:	4b0f      	ldr	r3, [pc, #60]	; (26c <CLP_CheckPacketCRCFail+0x6c>)
     230:	4798      	blx	r3
     232:	1a20      	subs	r0, r4, r0
     234:	1e44      	subs	r4, r0, #1
     236:	41a0      	sbcs	r0, r4
     238:	b2c0      	uxtb	r0, r0
     23a:	e00f      	b.n	25c <CLP_CheckPacketCRCFail+0x5c>
  }
  else
  {
    uint16_t crc = CalculateBufferCRC16(packet, length - 3, 0x0000);
     23c:	1ece      	subs	r6, r1, #3
     23e:	1c31      	adds	r1, r6, #0
     240:	2200      	movs	r2, #0
     242:	4b09      	ldr	r3, [pc, #36]	; (268 <CLP_CheckPacketCRCFail+0x68>)
     244:	4798      	blx	r3
	uint16_t packetcrc = (packet[length - 2] << 8) + packet[length - 3];
     246:	1961      	adds	r1, r4, r5
     248:	3902      	subs	r1, #2
     24a:	780b      	ldrb	r3, [r1, #0]
     24c:	021b      	lsls	r3, r3, #8
     24e:	5da2      	ldrb	r2, [r4, r6]
     250:	18d3      	adds	r3, r2, r3
	crcfail = crc != packetcrc;
     252:	b29b      	uxth	r3, r3
     254:	1ac0      	subs	r0, r0, r3
     256:	1e43      	subs	r3, r0, #1
     258:	4198      	sbcs	r0, r3
     25a:	b2c0      	uxtb	r0, r0
//    crcfail = (*(uint16_t*)&packet[length - 3]) != _byteswap_ushort(crc);
  }
  
  return crcfail;
}
     25c:	b04c      	add	sp, #304	; 0x130
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	20000190 	.word	0x20000190
     264:	000001b9 	.word	0x000001b9
     268:	000004a1 	.word	0x000004a1
     26c:	000004c1 	.word	0x000004c1

00000270 <CLP_IsPacket>:
  }
}

bool CLP_IsPacket(const uint8_t* packet)
{
  if(!packet)
     270:	2800      	cmp	r0, #0
     272:	d103      	bne.n	27c <CLP_IsPacket+0xc>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     274:	2201      	movs	r2, #1
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <CLP_IsPacket+0x18>)
     278:	601a      	str	r2, [r3, #0]
    return false;
     27a:	e004      	b.n	286 <CLP_IsPacket+0x16>
  }

  return (packet[0] == CLP_ESCAPE_STX);
     27c:	7800      	ldrb	r0, [r0, #0]
     27e:	3802      	subs	r0, #2
     280:	4243      	negs	r3, r0
     282:	4158      	adcs	r0, r3
     284:	b2c0      	uxtb	r0, r0
}
     286:	4770      	bx	lr
     288:	20000190 	.word	0x20000190

0000028c <CLP_IsExtendedPacket>:

bool CLP_IsExtendedPacket(const uint8_t* packet)
{
  if(!packet)
     28c:	2800      	cmp	r0, #0
     28e:	d103      	bne.n	298 <CLP_IsExtendedPacket+0xc>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     290:	2201      	movs	r2, #1
     292:	4b04      	ldr	r3, [pc, #16]	; (2a4 <CLP_IsExtendedPacket+0x18>)
     294:	601a      	str	r2, [r3, #0]
    return false;
     296:	e004      	b.n	2a2 <CLP_IsExtendedPacket+0x16>
  }

  return (packet[1] == CLP_COMMAND_EXTENDED);
     298:	7840      	ldrb	r0, [r0, #1]
     29a:	3845      	subs	r0, #69	; 0x45
     29c:	4243      	negs	r3, r0
     29e:	4158      	adcs	r0, r3
     2a0:	b2c0      	uxtb	r0, r0
}
     2a2:	4770      	bx	lr
     2a4:	20000190 	.word	0x20000190

000002a8 <CLP_IsPacketType>:

bool CLP_IsPacketType(const uint8_t* packet, uint8_t type)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	1c06      	adds	r6, r0, #0
     2ac:	1c0d      	adds	r5, r1, #0
  if(!CLP_IsPacket(packet)) return false;
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <CLP_IsPacketType+0x30>)
     2b0:	4798      	blx	r3
     2b2:	1e04      	subs	r4, r0, #0
     2b4:	d00e      	beq.n	2d4 <CLP_IsPacketType+0x2c>

  bool isext = CLP_IsExtendedPacket(packet);
     2b6:	1c30      	adds	r0, r6, #0
     2b8:	4b08      	ldr	r3, [pc, #32]	; (2dc <CLP_IsPacketType+0x34>)
     2ba:	4798      	blx	r3
  if(isext && (type == CLP_COMMAND_EXTENDED)) return true;
     2bc:	2800      	cmp	r0, #0
     2be:	d003      	beq.n	2c8 <CLP_IsPacketType+0x20>
     2c0:	2d45      	cmp	r5, #69	; 0x45
     2c2:	d007      	beq.n	2d4 <CLP_IsPacketType+0x2c>

  size_t start = isext ? 12 : 1;
     2c4:	230c      	movs	r3, #12
     2c6:	e000      	b.n	2ca <CLP_IsPacketType+0x22>
     2c8:	2301      	movs	r3, #1

  return (packet[start] == type);
     2ca:	5cf4      	ldrb	r4, [r6, r3]
     2cc:	1b64      	subs	r4, r4, r5
     2ce:	4260      	negs	r0, r4
     2d0:	4144      	adcs	r4, r0
     2d2:	b2e4      	uxtb	r4, r4
}
     2d4:	1c20      	adds	r0, r4, #0
     2d6:	bd70      	pop	{r4, r5, r6, pc}
     2d8:	00000271 	.word	0x00000271
     2dc:	0000028d 	.word	0x0000028d

000002e0 <CLP_ConvertPacketExtendedToValues>:

  return 0;
}

void CLP_ConvertPacketExtendedToValues(const uint8_t* packet, CLP_Extended* ext)
{
     2e0:	b538      	push	{r3, r4, r5, lr}
     2e2:	1c04      	adds	r4, r0, #0
     2e4:	1c0d      	adds	r5, r1, #0
  if(!CLP_IsPacket(packet)) return;
     2e6:	4b0c      	ldr	r3, [pc, #48]	; (318 <CLP_ConvertPacketExtendedToValues+0x38>)
     2e8:	4798      	blx	r3
     2ea:	2800      	cmp	r0, #0
     2ec:	d012      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>

  if((ext != 0) && CLP_IsExtendedPacket(packet))
     2ee:	2d00      	cmp	r5, #0
     2f0:	d010      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>
     2f2:	1c20      	adds	r0, r4, #0
     2f4:	4b09      	ldr	r3, [pc, #36]	; (31c <CLP_ConvertPacketExtendedToValues+0x3c>)
     2f6:	4798      	blx	r3
     2f8:	2800      	cmp	r0, #0
     2fa:	d00b      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>
  {
    ext->dest = _byteswap_ulong(*(uint32_t*)&packet[2]);
     2fc:	1ca3      	adds	r3, r4, #2
     2fe:	681b      	ldr	r3, [r3, #0]
     300:	ba1b      	rev	r3, r3
     302:	602b      	str	r3, [r5, #0]
    ext->src = _byteswap_ulong(*(uint32_t*)&packet[6]);
     304:	1da3      	adds	r3, r4, #6
     306:	681b      	ldr	r3, [r3, #0]
     308:	ba1b      	rev	r3, r3
     30a:	606b      	str	r3, [r5, #4]
    ext->frame = _byteswap_ushort(*(uint16_t*)&packet[10]);
     30c:	8960      	ldrh	r0, [r4, #10]
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <CLP_ConvertPacketExtendedToValues+0x40>)
     310:	4798      	blx	r3
     312:	8128      	strh	r0, [r5, #8]
  }
}
     314:	bd38      	pop	{r3, r4, r5, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000271 	.word	0x00000271
     31c:	0000028d 	.word	0x0000028d
     320:	000004c1 	.word	0x000004c1

00000324 <CLP_GetLastError>:
}


int CLP_GetLastError()
{
  return CLP_G_ERROR_VAL;
     324:	4b01      	ldr	r3, [pc, #4]	; (32c <CLP_GetLastError+0x8>)
     326:	6818      	ldr	r0, [r3, #0]
}
     328:	4770      	bx	lr
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000190 	.word	0x20000190

00000330 <CLP_EXTENSION_GenerateTimeSyncCommand>:
#include <string.h>

extern int CLP_G_ERROR_VAL;

size_t CLP_EXTENSION_GenerateTimeSyncCommand(uint8_t* buffer, const uint8_t* data, size_t datalength)
{
     330:	b510      	push	{r4, lr}
     332:	1c14      	adds	r4, r2, #0
  if(!buffer)
     334:	2800      	cmp	r0, #0
     336:	d103      	bne.n	340 <CLP_EXTENSION_GenerateTimeSyncCommand+0x10>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     338:	2201      	movs	r2, #1
     33a:	4b0a      	ldr	r3, [pc, #40]	; (364 <CLP_EXTENSION_GenerateTimeSyncCommand+0x34>)
     33c:	601a      	str	r2, [r3, #0]
    return 0;
     33e:	e00f      	b.n	360 <CLP_EXTENSION_GenerateTimeSyncCommand+0x30>
  }

  if(!data)
     340:	2900      	cmp	r1, #0
     342:	d107      	bne.n	354 <CLP_EXTENSION_GenerateTimeSyncCommand+0x24>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
     344:	2203      	movs	r2, #3
     346:	4b07      	ldr	r3, [pc, #28]	; (364 <CLP_EXTENSION_GenerateTimeSyncCommand+0x34>)
     348:	601a      	str	r2, [r3, #0]
    datalength = 0;
  }

  buffer[0] = CLP_EXTENSION_COMMAND_TIME_SYNC;
     34a:	2354      	movs	r3, #84	; 0x54
     34c:	7003      	strb	r3, [r0, #0]
  }

  if(!data)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
     34e:	2400      	movs	r4, #0
  if(data)
  {
    memcpy(buffer + 1, data, datalength);
  }

  return 1 + datalength;
     350:	1c60      	adds	r0, r4, #1
     352:	e005      	b.n	360 <CLP_EXTENSION_GenerateTimeSyncCommand+0x30>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
  }

  buffer[0] = CLP_EXTENSION_COMMAND_TIME_SYNC;
     354:	2354      	movs	r3, #84	; 0x54
     356:	7003      	strb	r3, [r0, #0]

  if(data)
  {
    memcpy(buffer + 1, data, datalength);
     358:	3001      	adds	r0, #1
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <CLP_EXTENSION_GenerateTimeSyncCommand+0x38>)
     35c:	4798      	blx	r3
     35e:	e7f7      	b.n	350 <CLP_EXTENSION_GenerateTimeSyncCommand+0x20>
  }

  return 1 + datalength;
}
     360:	bd10      	pop	{r4, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	20000190 	.word	0x20000190
     368:	0000a9df 	.word	0x0000a9df

0000036c <CLP_EXTENSION_GenerateTimeSyncPacket>:

#include "hmi.h"
size_t CLP_EXTENSION_GenerateTimeSyncPacket(uint8_t* buffer, CLP_Extended* ext, const uint8_t* data, size_t datalength)
{
     36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!buffer)
     36e:	2800      	cmp	r0, #0
     370:	d103      	bne.n	37a <CLP_EXTENSION_GenerateTimeSyncPacket+0xe>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     372:	2201      	movs	r2, #1
     374:	4b13      	ldr	r3, [pc, #76]	; (3c4 <CLP_EXTENSION_GenerateTimeSyncPacket+0x58>)
     376:	601a      	str	r2, [r3, #0]
    return 0;
     378:	e022      	b.n	3c0 <CLP_EXTENSION_GenerateTimeSyncPacket+0x54>
     37a:	1c1e      	adds	r6, r3, #0
     37c:	1c17      	adds	r7, r2, #0
     37e:	1c04      	adds	r4, r0, #0
  }

  buffer[0] = CLP_ESCAPE_STX;
     380:	2302      	movs	r3, #2
     382:	7003      	strb	r3, [r0, #0]
  size_t length = 1;
  if(ext != 0)
     384:	2900      	cmp	r1, #0
     386:	d004      	beq.n	392 <CLP_EXTENSION_GenerateTimeSyncPacket+0x26>
  {
    length += CLP_GenerateExtendedCommand(buffer + length, (*ext));
     388:	3001      	adds	r0, #1
     38a:	4b0f      	ldr	r3, [pc, #60]	; (3c8 <CLP_EXTENSION_GenerateTimeSyncPacket+0x5c>)
     38c:	4798      	blx	r3
     38e:	1c45      	adds	r5, r0, #1
     390:	e000      	b.n	394 <CLP_EXTENSION_GenerateTimeSyncPacket+0x28>
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    return 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
  size_t length = 1;
     392:	2501      	movs	r5, #1
  if(ext != 0)
  {
    length += CLP_GenerateExtendedCommand(buffer + length, (*ext));
  }
  length += CLP_EXTENSION_GenerateTimeSyncCommand(buffer + length, data, datalength);
     394:	1960      	adds	r0, r4, r5
     396:	1c39      	adds	r1, r7, #0
     398:	1c32      	adds	r2, r6, #0
     39a:	4b0c      	ldr	r3, [pc, #48]	; (3cc <CLP_EXTENSION_GenerateTimeSyncPacket+0x60>)
     39c:	4798      	blx	r3
     39e:	1945      	adds	r5, r0, r5
  uint16_t crc = CalculateBufferCRC16(buffer, length, 0x0000);
     3a0:	1c20      	adds	r0, r4, #0
     3a2:	1c29      	adds	r1, r5, #0
     3a4:	2200      	movs	r2, #0
     3a6:	4b0a      	ldr	r3, [pc, #40]	; (3d0 <CLP_EXTENSION_GenerateTimeSyncPacket+0x64>)
     3a8:	4798      	blx	r3
  
  //  (*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  buffer[length] = crc & 0xff;
     3aa:	5560      	strb	r0, [r4, r5]
  buffer[length + 1] = (crc >> 8) & 0xff;
     3ac:	1963      	adds	r3, r4, r5
     3ae:	0a00      	lsrs	r0, r0, #8
     3b0:	7058      	strb	r0, [r3, #1]
  length += 2;
     3b2:	1ca9      	adds	r1, r5, #2
  
  length = CLP_GenerateEscape(buffer + 1, length);
     3b4:	1c60      	adds	r0, r4, #1
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <CLP_EXTENSION_GenerateTimeSyncPacket+0x68>)
     3b8:	4798      	blx	r3

  buffer[length] = CLP_ESCAPE_ETX;
     3ba:	2303      	movs	r3, #3
     3bc:	5423      	strb	r3, [r4, r0]
  
  length += 1;
     3be:	3001      	adds	r0, #1

  return length;
}
     3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	20000190 	.word	0x20000190
     3c8:	00000115 	.word	0x00000115
     3cc:	00000331 	.word	0x00000331
     3d0:	000004a1 	.word	0x000004a1
     3d4:	00000151 	.word	0x00000151

000003d8 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw>:

size_t CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw(const uint8_t* packet, size_t packetlength, uint8_t* buffer, CLP_Extended* ext)
{
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	b083      	sub	sp, #12
     3dc:	1c04      	adds	r4, r0, #0
     3de:	9101      	str	r1, [sp, #4]
     3e0:	1c17      	adds	r7, r2, #0
     3e2:	1c1e      	adds	r6, r3, #0
  if(!CLP_IsPacket(packet)) return 0;
     3e4:	4b16      	ldr	r3, [pc, #88]	; (440 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x68>)
     3e6:	4798      	blx	r3
     3e8:	2500      	movs	r5, #0
     3ea:	2800      	cmp	r0, #0
     3ec:	d024      	beq.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>

  size_t start = CLP_IsExtendedPacket(packet) ? 12 : 1;
     3ee:	1c20      	adds	r0, r4, #0
     3f0:	4b14      	ldr	r3, [pc, #80]	; (444 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x6c>)
     3f2:	4798      	blx	r3
     3f4:	350c      	adds	r5, #12
     3f6:	2800      	cmp	r0, #0
     3f8:	d100      	bne.n	3fc <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x24>
     3fa:	3d0b      	subs	r5, #11

  if(ext != 0)
     3fc:	2e00      	cmp	r6, #0
     3fe:	d003      	beq.n	408 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x30>
  {
    CLP_ConvertPacketExtendedToValues(packet, ext);
     400:	1c20      	adds	r0, r4, #0
     402:	1c31      	adds	r1, r6, #0
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x70>)
     406:	4798      	blx	r3
  }

  if(packet[start] == CLP_EXTENSION_COMMAND_TIME_SYNC)
     408:	5d63      	ldrb	r3, [r4, r5]
     40a:	2b54      	cmp	r3, #84	; 0x54
     40c:	d110      	bne.n	430 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x58>
  {
    if(buffer)
     40e:	2f00      	cmp	r7, #0
     410:	d009      	beq.n	426 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x4e>
    {
      start += 1;
     412:	1c69      	adds	r1, r5, #1
     414:	9d01      	ldr	r5, [sp, #4]
     416:	3d03      	subs	r5, #3

      memcpy(buffer, packet + start, packetlength - start - 3);
     418:	1a6d      	subs	r5, r5, r1
     41a:	1861      	adds	r1, r4, r1
     41c:	1c38      	adds	r0, r7, #0
     41e:	1c2a      	adds	r2, r5, #0
     420:	4b0a      	ldr	r3, [pc, #40]	; (44c <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x74>)
     422:	4798      	blx	r3
	  
	  return packetlength - start - 3;
     424:	e008      	b.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>
    }
    else
    {
      CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     426:	2201      	movs	r2, #1
     428:	4b09      	ldr	r3, [pc, #36]	; (450 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x78>)
     42a:	601a      	str	r2, [r3, #0]
  else
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_INVALID_REG_TYPE;
  }
  
  return 0;
     42c:	2500      	movs	r5, #0
     42e:	e003      	b.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>
      CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    }
  }
  else
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_INVALID_REG_TYPE;
     430:	2204      	movs	r2, #4
     432:	4b07      	ldr	r3, [pc, #28]	; (450 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x78>)
     434:	601a      	str	r2, [r3, #0]
  }
  
  return 0;
     436:	2500      	movs	r5, #0
}
     438:	1c28      	adds	r0, r5, #0
     43a:	b003      	add	sp, #12
     43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	00000271 	.word	0x00000271
     444:	0000028d 	.word	0x0000028d
     448:	000002e1 	.word	0x000002e1
     44c:	0000a9df 	.word	0x0000a9df
     450:	20000190 	.word	0x20000190

00000454 <_Z9gencrc_16t>:
// Purpose: Functions to generate CRC16-CCITT parity values.

#include "crc.h"

uint16_t gencrc_16(uint16_t i)
{
     454:	b510      	push	{r4, lr}
  uint16_t j;
  uint16_t k;
  uint16_t crc;

  k = i<<8;
     456:	0200      	lsls	r0, r0, #8
     458:	b283      	uxth	r3, r0
     45a:	2208      	movs	r2, #8
  crc = 0;
     45c:	2000      	movs	r0, #0

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
    {
      crc = (crc<<1)^0x1021;
     45e:	4c09      	ldr	r4, [pc, #36]	; (484 <_Z9gencrc_16t+0x30>)
  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
     460:	1c01      	adds	r1, r0, #0
     462:	4059      	eors	r1, r3
     464:	b209      	sxth	r1, r1
     466:	2900      	cmp	r1, #0
     468:	da03      	bge.n	472 <_Z9gencrc_16t+0x1e>
    {
      crc = (crc<<1)^0x1021;
     46a:	0040      	lsls	r0, r0, #1
     46c:	4060      	eors	r0, r4
     46e:	b280      	uxth	r0, r0
     470:	e001      	b.n	476 <_Z9gencrc_16t+0x22>
    }
    else
    {
      crc <<= 1;
     472:	0040      	lsls	r0, r0, #1
     474:	b280      	uxth	r0, r0
    }
    k <<= 1;
     476:	005b      	lsls	r3, r3, #1
     478:	b29b      	uxth	r3, r3
     47a:	3a01      	subs	r2, #1
     47c:	b292      	uxth	r2, r2
  uint16_t crc;

  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
     47e:	2a00      	cmp	r2, #0
     480:	d1ee      	bne.n	460 <_Z9gencrc_16t+0xc>
    }
    k <<= 1;
  }

  return(crc);
}
     482:	bd10      	pop	{r4, pc}
     484:	00001021 	.word	0x00001021

00000488 <_Z23CalculateCharacterCRC16th>:

uint16_t CalculateCharacterCRC16(uint16_t crc, uint8_t c)
{
     488:	b510      	push	{r4, lr}
     48a:	1c04      	adds	r4, r0, #0
  return ((crc<<8)^gencrc_16((crc>>8)^c));
     48c:	1200      	asrs	r0, r0, #8
     48e:	4048      	eors	r0, r1
     490:	4b02      	ldr	r3, [pc, #8]	; (49c <_Z23CalculateCharacterCRC16th+0x14>)
     492:	4798      	blx	r3
     494:	0224      	lsls	r4, r4, #8
     496:	4060      	eors	r0, r4
     498:	b280      	uxth	r0, r0
}
     49a:	bd10      	pop	{r4, pc}
     49c:	00000455 	.word	0x00000455

000004a0 <_Z20CalculateBufferCRC16PKhjt>:

uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
     4a0:	b570      	push	{r4, r5, r6, lr}
     4a2:	1c05      	adds	r5, r0, #0
     4a4:	1c10      	adds	r0, r2, #0
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     4a6:	2900      	cmp	r1, #0
     4a8:	d007      	beq.n	4ba <_Z20CalculateBufferCRC16PKhjt+0x1a>
     4aa:	1c2c      	adds	r4, r5, #0
     4ac:	186d      	adds	r5, r5, r1
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
     4ae:	4e03      	ldr	r6, [pc, #12]	; (4bc <_Z20CalculateBufferCRC16PKhjt+0x1c>)
     4b0:	7821      	ldrb	r1, [r4, #0]
     4b2:	47b0      	blx	r6
     4b4:	3401      	adds	r4, #1
uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     4b6:	42ac      	cmp	r4, r5
     4b8:	d1fa      	bne.n	4b0 <_Z20CalculateBufferCRC16PKhjt+0x10>
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
  }
  return crc;
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	00000489 	.word	0x00000489

000004c0 <_Z16_byteswap_ushortt>:
  unsigned char c1, c2;

  c1 = i & 255;
  c2 = (i >> 8) & 255;

  return ((short)c1 << 8) + c2;
     4c0:	23ff      	movs	r3, #255	; 0xff
     4c2:	4003      	ands	r3, r0
     4c4:	021b      	lsls	r3, r3, #8
uint16_t _byteswap_ushort(uint16_t i)
{
  unsigned char c1, c2;

  c1 = i & 255;
  c2 = (i >> 8) & 255;
     4c6:	0a00      	lsrs	r0, r0, #8

  return ((short)c1 << 8) + c2;
     4c8:	1818      	adds	r0, r3, r0
     4ca:	b280      	uxth	r0, r0
}
     4cc:	4770      	bx	lr
     4ce:	46c0      	nop			; (mov r8, r8)

000004d0 <_ZN4mbed10SerialBaseD1Ev>:
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    }
     4d0:	4770      	bx	lr
     4d2:	46c0      	nop			; (mov r8, r8)

000004d4 <_ZN4mbed6SerialD1Ev>:
 * int main() {
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 */
class Serial : public SerialBase, public Stream {
     4d4:	b510      	push	{r4, lr}
     4d6:	1c04      	adds	r4, r0, #0
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <_ZN4mbed6SerialD1Ev+0x20>)
     4da:	6003      	str	r3, [r0, #0]
     4dc:	1c19      	adds	r1, r3, #0
     4de:	3118      	adds	r1, #24
     4e0:	22dc      	movs	r2, #220	; 0xdc
     4e2:	5081      	str	r1, [r0, r2]
     4e4:	334c      	adds	r3, #76	; 0x4c
     4e6:	3204      	adds	r2, #4
     4e8:	5083      	str	r3, [r0, r2]
     4ea:	30dc      	adds	r0, #220	; 0xdc
     4ec:	4b02      	ldr	r3, [pc, #8]	; (4f8 <_ZN4mbed6SerialD1Ev+0x24>)
     4ee:	4798      	blx	r3
     4f0:	1c20      	adds	r0, r4, #0
     4f2:	bd10      	pop	{r4, pc}
     4f4:	00010148 	.word	0x00010148
     4f8:	00005961 	.word	0x00005961

000004fc <_ZThn220_N4mbed6SerialD1Ev>:
     4fc:	b408      	push	{r3}
     4fe:	4b02      	ldr	r3, [pc, #8]	; (508 <_ZThn220_N4mbed6SerialD1Ev+0xc>)
     500:	469c      	mov	ip, r3
     502:	38dc      	subs	r0, #220	; 0xdc
     504:	bc08      	pop	{r3}
     506:	4760      	bx	ip
     508:	000004d5 	.word	0x000004d5

0000050c <_ZThn224_N4mbed6SerialD1Ev>:
     50c:	b408      	push	{r3}
     50e:	4b02      	ldr	r3, [pc, #8]	; (518 <_ZThn224_N4mbed6SerialD1Ev+0xc>)
     510:	469c      	mov	ip, r3
     512:	38e0      	subs	r0, #224	; 0xe0
     514:	bc08      	pop	{r3}
     516:	4760      	bx	ip
     518:	000004d5 	.word	0x000004d5

0000051c <_ZN4mbed10SerialBaseD0Ev>:
    void interrupt_handler_asynch(void);
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
     51c:	b510      	push	{r4, lr}
     51e:	1c04      	adds	r4, r0, #0
    }
     520:	4b01      	ldr	r3, [pc, #4]	; (528 <_ZN4mbed10SerialBaseD0Ev+0xc>)
     522:	4798      	blx	r3
     524:	1c20      	adds	r0, r4, #0
     526:	bd10      	pop	{r4, pc}
     528:	000070cb 	.word	0x000070cb

0000052c <_Z12configureHMIv>:
	Serial hmi(USBTX,USBRX);
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
     52c:	b508      	push	{r3, lr}
	hmi.printf("config HMI \r\n");
     52e:	4803      	ldr	r0, [pc, #12]	; (53c <_Z12configureHMIv+0x10>)
     530:	30dc      	adds	r0, #220	; 0xdc
     532:	4903      	ldr	r1, [pc, #12]	; (540 <_Z12configureHMIv+0x14>)
     534:	4b03      	ldr	r3, [pc, #12]	; (544 <_Z12configureHMIv+0x18>)
     536:	4798      	blx	r3
}
     538:	bd08      	pop	{r3, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000194 	.word	0x20000194
     540:	0000f854 	.word	0x0000f854
     544:	000059b1 	.word	0x000059b1

00000548 <_Z7HMITaskv>:
void HMITask(){
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	b083      	sub	sp, #12
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );
     54c:	2032      	movs	r0, #50	; 0x32
     54e:	2104      	movs	r1, #4
     550:	2200      	movs	r2, #0
     552:	4b10      	ldr	r3, [pc, #64]	; (594 <_Z7HMITaskv+0x4c>)
     554:	4798      	blx	r3
     556:	4b10      	ldr	r3, [pc, #64]	; (598 <_Z7HMITaskv+0x50>)
     558:	6018      	str	r0, [r3, #0]

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
     55a:	1c1f      	adds	r7, r3, #0
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
     55c:	4d0f      	ldr	r5, [pc, #60]	; (59c <_Z7HMITaskv+0x54>)
     55e:	35dc      	adds	r5, #220	; 0xdc
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
     560:	683b      	ldr	r3, [r7, #0]
     562:	2b00      	cmp	r3, #0
     564:	d108      	bne.n	578 <_Z7HMITaskv+0x30>
     566:	e010      	b.n	58a <_Z7HMITaskv+0x42>
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
     568:	1c28      	adds	r0, r5, #0
     56a:	9901      	ldr	r1, [sp, #4]
     56c:	4c0c      	ldr	r4, [pc, #48]	; (5a0 <_Z7HMITaskv+0x58>)
     56e:	47a0      	blx	r4
				 hmi.printf("\r\n");
     570:	1c28      	adds	r0, r5, #0
     572:	490c      	ldr	r1, [pc, #48]	; (5a4 <_Z7HMITaskv+0x5c>)
     574:	47a0      	blx	r4
     576:	e000      	b.n	57a <_Z7HMITaskv+0x32>
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
     578:	4e07      	ldr	r6, [pc, #28]	; (598 <_Z7HMITaskv+0x50>)
     57a:	6830      	ldr	r0, [r6, #0]
     57c:	a901      	add	r1, sp, #4
     57e:	2200      	movs	r2, #0
     580:	2300      	movs	r3, #0
     582:	4c09      	ldr	r4, [pc, #36]	; (5a8 <_Z7HMITaskv+0x60>)
     584:	47a0      	blx	r4
     586:	2800      	cmp	r0, #0
     588:	d1ee      	bne.n	568 <_Z7HMITaskv+0x20>
			//printf("						t: %lus,%u\r\n",timeCopy.second,(unsigned int)timeCopy.halfmillis/2);
			//printf("timecor : %d\r\n",ti);
			//printf("corhms : %d\r\n",to);
		 }
		 // pc.printf("test");
        vTaskDelay(500/portTICK_RATE_MS);
     58a:	20fa      	movs	r0, #250	; 0xfa
     58c:	0040      	lsls	r0, r0, #1
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_Z7HMITaskv+0x64>)
     590:	4798      	blx	r3
	}
     592:	e7e5      	b.n	560 <_Z7HMITaskv+0x18>
     594:	00001f45 	.word	0x00001f45
     598:	20000288 	.word	0x20000288
     59c:	20000194 	.word	0x20000194
     5a0:	000059b1 	.word	0x000059b1
     5a4:	0000fc68 	.word	0x0000fc68
     5a8:	00002125 	.word	0x00002125
     5ac:	0000281d 	.word	0x0000281d

000005b0 <_Z7sendHMIPKc>:
}
bool sendHMI(const char send[]){
     5b0:	b510      	push	{r4, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	9001      	str	r0, [sp, #4]
			if( uartQueue != 0 )
     5b6:	4b08      	ldr	r3, [pc, #32]	; (5d8 <_Z7sendHMIPKc+0x28>)
     5b8:	6818      	ldr	r0, [r3, #0]
     5ba:	2800      	cmp	r0, #0
     5bc:	d009      	beq.n	5d2 <_Z7sendHMIPKc+0x22>
			{
				if( xQueueSendToBack( uartQueue,( void * ) &send,(  portTickType ) 0 ) == pdPASS )
     5be:	a901      	add	r1, sp, #4
     5c0:	2200      	movs	r2, #0
     5c2:	2300      	movs	r3, #0
     5c4:	4c05      	ldr	r4, [pc, #20]	; (5dc <_Z7sendHMIPKc+0x2c>)
     5c6:	47a0      	blx	r4
     5c8:	3801      	subs	r0, #1
     5ca:	4243      	negs	r3, r0
     5cc:	4158      	adcs	r0, r3
     5ce:	b2c0      	uxtb	r0, r0
     5d0:	e000      	b.n	5d4 <_Z7sendHMIPKc+0x24>
				
				/* Failed to post the message. */
				
			}
			
				return false;
     5d2:	2000      	movs	r0, #0
			
     5d4:	b002      	add	sp, #8
     5d6:	bd10      	pop	{r4, pc}
     5d8:	20000288 	.word	0x20000288
     5dc:	00001f95 	.word	0x00001f95

000005e0 <_ZN4mbed6SerialD0Ev>:
     5e0:	b510      	push	{r4, lr}
     5e2:	1c04      	adds	r4, r0, #0
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <_ZN4mbed6SerialD0Ev+0x28>)
     5e6:	6003      	str	r3, [r0, #0]
     5e8:	1c19      	adds	r1, r3, #0
     5ea:	3118      	adds	r1, #24
     5ec:	22dc      	movs	r2, #220	; 0xdc
     5ee:	5081      	str	r1, [r0, r2]
     5f0:	334c      	adds	r3, #76	; 0x4c
     5f2:	3204      	adds	r2, #4
     5f4:	5083      	str	r3, [r0, r2]
     5f6:	30dc      	adds	r0, #220	; 0xdc
     5f8:	4b04      	ldr	r3, [pc, #16]	; (60c <_ZN4mbed6SerialD0Ev+0x2c>)
     5fa:	4798      	blx	r3
     5fc:	1c20      	adds	r0, r4, #0
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <_ZN4mbed6SerialD0Ev+0x30>)
     600:	4798      	blx	r3
     602:	1c20      	adds	r0, r4, #0
     604:	bd10      	pop	{r4, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00010148 	.word	0x00010148
     60c:	00005961 	.word	0x00005961
     610:	000070cb 	.word	0x000070cb

00000614 <_ZThn220_N4mbed6SerialD0Ev>:
     614:	b408      	push	{r3}
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <_ZThn220_N4mbed6SerialD0Ev+0xc>)
     618:	469c      	mov	ip, r3
     61a:	38dc      	subs	r0, #220	; 0xdc
     61c:	bc08      	pop	{r3}
     61e:	4760      	bx	ip
     620:	000005e1 	.word	0x000005e1

00000624 <_ZThn224_N4mbed6SerialD0Ev>:
     624:	b408      	push	{r3}
     626:	4b02      	ldr	r3, [pc, #8]	; (630 <_ZThn224_N4mbed6SerialD0Ev+0xc>)
     628:	469c      	mov	ip, r3
     62a:	38e0      	subs	r0, #224	; 0xe0
     62c:	bc08      	pop	{r3}
     62e:	4760      	bx	ip
     630:	000005e1 	.word	0x000005e1

00000634 <_GLOBAL__sub_I_uartQueue>:
     634:	b538      	push	{r3, r4, r5, lr}
/************************************************************************/
xQueueHandle uartQueue;
#ifdef MASTERMODE
	Serial hmi(PA22,PA23);
#else
	Serial hmi(USBTX,USBRX);
     636:	4c06      	ldr	r4, [pc, #24]	; (650 <_GLOBAL__sub_I_uartQueue+0x1c>)
     638:	1c20      	adds	r0, r4, #0
     63a:	2104      	movs	r1, #4
     63c:	2205      	movs	r2, #5
     63e:	2300      	movs	r3, #0
     640:	4d04      	ldr	r5, [pc, #16]	; (654 <_GLOBAL__sub_I_uartQueue+0x20>)
     642:	47a8      	blx	r5
     644:	1c20      	adds	r0, r4, #0
     646:	4904      	ldr	r1, [pc, #16]	; (658 <_GLOBAL__sub_I_uartQueue+0x24>)
     648:	4a04      	ldr	r2, [pc, #16]	; (65c <_GLOBAL__sub_I_uartQueue+0x28>)
     64a:	4b05      	ldr	r3, [pc, #20]	; (660 <_GLOBAL__sub_I_uartQueue+0x2c>)
     64c:	4798      	blx	r3
				
			}
			
				return false;
			
     64e:	bd38      	pop	{r3, r4, r5, pc}
     650:	20000194 	.word	0x20000194
     654:	00005755 	.word	0x00005755
     658:	000004d5 	.word	0x000004d5
     65c:	200000b0 	.word	0x200000b0
     660:	000070bd 	.word	0x000070bd

00000664 <_Z14smartMeterTaskv>:
	}
}

//extern xSemaphoreHandle timeProt.synchroTimeReceive;

void smartMeterTask(void){
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	465f      	mov	r7, fp
     668:	4656      	mov	r6, sl
     66a:	464d      	mov	r5, r9
     66c:	4644      	mov	r4, r8
     66e:	b4f0      	push	{r4, r5, r6, r7}
     670:	b083      	sub	sp, #12
	
	xSemaphoreHandle synchroSmartMeter;
	vSemaphoreCreateBinary(synchroSmartMeter);
     672:	2001      	movs	r0, #1
     674:	2100      	movs	r1, #0
     676:	2203      	movs	r2, #3
     678:	4b43      	ldr	r3, [pc, #268]	; (788 <_Z14smartMeterTaskv+0x124>)
     67a:	4798      	blx	r3
     67c:	1e04      	subs	r4, r0, #0
     67e:	d004      	beq.n	68a <_Z14smartMeterTaskv+0x26>
     680:	2100      	movs	r1, #0
     682:	2200      	movs	r2, #0
     684:	2300      	movs	r3, #0
     686:	4d41      	ldr	r5, [pc, #260]	; (78c <_Z14smartMeterTaskv+0x128>)
     688:	47a8      	blx	r5
	
	Channel* pc = new ChannelSerialDebug;
     68a:	2580      	movs	r5, #128	; 0x80
     68c:	006d      	lsls	r5, r5, #1
     68e:	1c28      	adds	r0, r5, #0
     690:	4f3f      	ldr	r7, [pc, #252]	; (790 <_Z14smartMeterTaskv+0x12c>)
     692:	47b8      	blx	r7
     694:	4681      	mov	r9, r0
     696:	2104      	movs	r1, #4
     698:	2205      	movs	r2, #5
     69a:	4e3e      	ldr	r6, [pc, #248]	; (794 <_Z14smartMeterTaskv+0x130>)
     69c:	47b0      	blx	r6
	Channel* s1 = new ChannelSerialSercom1;
     69e:	1c28      	adds	r0, r5, #0
     6a0:	47b8      	blx	r7
     6a2:	1c05      	adds	r5, r0, #0
     6a4:	2110      	movs	r1, #16
     6a6:	2211      	movs	r2, #17
     6a8:	47b0      	blx	r6
	ChannelCallback* relaytos1 = new Relay(s1);
     6aa:	2008      	movs	r0, #8
     6ac:	47b8      	blx	r7
     6ae:	1c29      	adds	r1, r5, #0
     6b0:	4e39      	ldr	r6, [pc, #228]	; (798 <_Z14smartMeterTaskv+0x134>)
     6b2:	47b0      	blx	r6
	ChannelCallback* relaytopc = new Relay(pc);
     6b4:	2008      	movs	r0, #8
     6b6:	47b8      	blx	r7
     6b8:	4649      	mov	r1, r9
     6ba:	47b0      	blx	r6
	RelayBuffered* relaybtopc = new RelayBufferedTaskCLP(pc,synchroSmartMeter,timeProt.synchroTimeReceive);
     6bc:	20a4      	movs	r0, #164	; 0xa4
     6be:	0040      	lsls	r0, r0, #1
     6c0:	47b8      	blx	r7
     6c2:	4680      	mov	r8, r0
     6c4:	4a35      	ldr	r2, [pc, #212]	; (79c <_Z14smartMeterTaskv+0x138>)
     6c6:	4693      	mov	fp, r2
     6c8:	464b      	mov	r3, r9
     6ca:	9301      	str	r3, [sp, #4]
     6cc:	4649      	mov	r1, r9
     6ce:	1c22      	adds	r2, r4, #0
     6d0:	465e      	mov	r6, fp
     6d2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
     6d4:	4e32      	ldr	r6, [pc, #200]	; (7a0 <_Z14smartMeterTaskv+0x13c>)
     6d6:	46b1      	mov	r9, r6
     6d8:	47b0      	blx	r6
	RelayBuffered* relaybtos1 = new RelayBufferedTaskCLP(s1,synchroSmartMeter,timeProt.synchroTimeReceive);
     6da:	20a4      	movs	r0, #164	; 0xa4
     6dc:	0040      	lsls	r0, r0, #1
     6de:	47b8      	blx	r7
     6e0:	1c06      	adds	r6, r0, #0
     6e2:	1c29      	adds	r1, r5, #0
     6e4:	1c22      	adds	r2, r4, #0
     6e6:	465b      	mov	r3, fp
     6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     6ea:	47c8      	blx	r9
	
	ChannelRadio* radio = ChannelRadio::GetChannel();
     6ec:	4b2d      	ldr	r3, [pc, #180]	; (7a4 <_Z14smartMeterTaskv+0x140>)
     6ee:	4798      	blx	r3
     6f0:	4682      	mov	sl, r0
	cMxRadio* r = radio->GetRadio();
     6f2:	4b2d      	ldr	r3, [pc, #180]	; (7a8 <_Z14smartMeterTaskv+0x144>)
     6f4:	4798      	blx	r3
	// Radio Config
	r->begin(CHANNEL_RADIO);
     6f6:	210c      	movs	r1, #12
     6f8:	4b2c      	ldr	r3, [pc, #176]	; (7ac <_Z14smartMeterTaskv+0x148>)
     6fa:	4798      	blx	r3
	
	RelayBuffered* relaybtoradio = new RelayBufferedTaskCLP(radio,synchroSmartMeter,timeProt.synchroTimeReceive);
     6fc:	20a4      	movs	r0, #164	; 0xa4
     6fe:	0040      	lsls	r0, r0, #1
     700:	47b8      	blx	r7
     702:	1c07      	adds	r7, r0, #0
     704:	465a      	mov	r2, fp
     706:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
     708:	4651      	mov	r1, sl
     70a:	1c22      	adds	r2, r4, #0
     70c:	47c8      	blx	r9
	
	pc->SetCallback(relaybtoradio);
     70e:	9801      	ldr	r0, [sp, #4]
     710:	6803      	ldr	r3, [r0, #0]
     712:	691b      	ldr	r3, [r3, #16]
     714:	1c39      	adds	r1, r7, #0
     716:	4798      	blx	r3
#ifdef MASTERMODE
	radio->SetCallback(relaybtopc);
#else
	radio->SetCallback(relaybtos1);
     718:	4653      	mov	r3, sl
     71a:	681b      	ldr	r3, [r3, #0]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	4650      	mov	r0, sl
     720:	1c31      	adds	r1, r6, #0
     722:	4798      	blx	r3
#endif
	s1->SetCallback(relaybtoradio);
     724:	682b      	ldr	r3, [r5, #0]
     726:	691b      	ldr	r3, [r3, #16]
     728:	1c28      	adds	r0, r5, #0
     72a:	1c39      	adds	r1, r7, #0
     72c:	4798      	blx	r3
	//PrintBuffer(pc,"RESET\r\n");
    while(1)
	{
		if(synchroSmartMeter!=NULL)
		{
			if( xSemaphoreTake(synchroSmartMeter,portMAX_DELAY) == pdTRUE )
     72e:	4d20      	ldr	r5, [pc, #128]	; (7b0 <_Z14smartMeterTaskv+0x14c>)
#endif
	s1->SetCallback(relaybtoradio);
	//PrintBuffer(pc,"RESET\r\n");
    while(1)
	{
		if(synchroSmartMeter!=NULL)
     730:	2c00      	cmp	r4, #0
     732:	d100      	bne.n	736 <_Z14smartMeterTaskv+0xd2>
     734:	e7fe      	b.n	734 <_Z14smartMeterTaskv+0xd0>
		{
			if( xSemaphoreTake(synchroSmartMeter,portMAX_DELAY) == pdTRUE )
     736:	1c20      	adds	r0, r4, #0
     738:	2100      	movs	r1, #0
     73a:	2201      	movs	r2, #1
     73c:	4252      	negs	r2, r2
     73e:	2300      	movs	r3, #0
     740:	47a8      	blx	r5
     742:	2801      	cmp	r0, #1
     744:	d1f4      	bne.n	730 <_Z14smartMeterTaskv+0xcc>
			{//stay here until sync request
				if(relaybtopc->HasNewData())
     746:	4643      	mov	r3, r8
     748:	681b      	ldr	r3, [r3, #0]
     74a:	69db      	ldr	r3, [r3, #28]
     74c:	4640      	mov	r0, r8
     74e:	4798      	blx	r3
     750:	2800      	cmp	r0, #0
     752:	d004      	beq.n	75e <_Z14smartMeterTaskv+0xfa>
				{
					relaybtopc->PushData();
     754:	4643      	mov	r3, r8
     756:	681b      	ldr	r3, [r3, #0]
     758:	699b      	ldr	r3, [r3, #24]
     75a:	4640      	mov	r0, r8
     75c:	4798      	blx	r3
				}
		
				if(relaybtos1->HasNewData())
     75e:	6833      	ldr	r3, [r6, #0]
     760:	69db      	ldr	r3, [r3, #28]
     762:	1c30      	adds	r0, r6, #0
     764:	4798      	blx	r3
     766:	2800      	cmp	r0, #0
     768:	d003      	beq.n	772 <_Z14smartMeterTaskv+0x10e>
				{
					relaybtos1->PushData();
     76a:	6833      	ldr	r3, [r6, #0]
     76c:	699b      	ldr	r3, [r3, #24]
     76e:	1c30      	adds	r0, r6, #0
     770:	4798      	blx	r3
				}
		
				if(relaybtoradio->HasNewData())
     772:	683b      	ldr	r3, [r7, #0]
     774:	69db      	ldr	r3, [r3, #28]
     776:	1c38      	adds	r0, r7, #0
     778:	4798      	blx	r3
     77a:	2800      	cmp	r0, #0
     77c:	d0d8      	beq.n	730 <_Z14smartMeterTaskv+0xcc>
				{
					relaybtoradio->PushData();
     77e:	683b      	ldr	r3, [r7, #0]
     780:	699b      	ldr	r3, [r3, #24]
     782:	1c38      	adds	r0, r7, #0
     784:	4798      	blx	r3
     786:	e7d3      	b.n	730 <_Z14smartMeterTaskv+0xcc>
     788:	00001f45 	.word	0x00001f45
     78c:	00001f95 	.word	0x00001f95
     790:	000070d3 	.word	0x000070d3
     794:	0000408d 	.word	0x0000408d
     798:	000042b5 	.word	0x000042b5
     79c:	2000049c 	.word	0x2000049c
     7a0:	00004301 	.word	0x00004301
     7a4:	00003f0d 	.word	0x00003f0d
     7a8:	00003e95 	.word	0x00003e95
     7ac:	00003181 	.word	0x00003181
     7b0:	00002125 	.word	0x00002125

000007b4 <_Z9readClockP11structClock>:
volatile int timeCorr;
volatile bool stateLed=false;
DigitalOut led(LED1);
//struct rtc_module rtc_instance;

uint32_t  readClock(Clock* timeClock){
     7b4:	b570      	push	{r4, r5, r6, lr}
     7b6:	1c04      	adds	r4, r0, #0
	//rtc_count_disable(&rtc_instance);
//	Disable_global_interrupt();
	uint32_t timeCounter=0;
	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//disable timer
     7b8:	4a13      	ldr	r2, [pc, #76]	; (808 <_Z9readClockP11structClock+0x54>)
     7ba:	8813      	ldrh	r3, [r2, #0]
     7bc:	2102      	movs	r1, #2
     7be:	438b      	bics	r3, r1
     7c0:	8013      	strh	r3, [r2, #0]
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
     7c2:	7a93      	ldrb	r3, [r2, #10]
     7c4:	09db      	lsrs	r3, r3, #7
     7c6:	d1fc      	bne.n	7c2 <_Z9readClockP11structClock+0xe>
	
	timeCounter=RTC->MODE0.COUNT.reg; 
     7c8:	4b0f      	ldr	r3, [pc, #60]	; (808 <_Z9readClockP11structClock+0x54>)
     7ca:	691e      	ldr	r6, [r3, #16]
	timeClock->second=timeManage.second;	
     7cc:	4a0f      	ldr	r2, [pc, #60]	; (80c <_Z9readClockP11structClock+0x58>)
     7ce:	6811      	ldr	r1, [r2, #0]
     7d0:	6021      	str	r1, [r4, #0]
	timeClock->halfmillis=timeManage.halfmillis;	
     7d2:	6852      	ldr	r2, [r2, #4]
     7d4:	6062      	str	r2, [r4, #4]
	//timeCounter=0;
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
     7d6:	8819      	ldrh	r1, [r3, #0]
     7d8:	2202      	movs	r2, #2
     7da:	430a      	orrs	r2, r1
     7dc:	801a      	strh	r2, [r3, #0]

	//Enable_global_interrupt();
	timeClock->sign=true;	
     7de:	2301      	movs	r3, #1
     7e0:	7223      	strb	r3, [r4, #8]

	timeClock->halfmillis+=timeCounter;
     7e2:	6863      	ldr	r3, [r4, #4]
     7e4:	199b      	adds	r3, r3, r6
     7e6:	6063      	str	r3, [r4, #4]
	timeClock->second+=timeClock->halfmillis/RTC_FREQ;
     7e8:	6860      	ldr	r0, [r4, #4]
     7ea:	6825      	ldr	r5, [r4, #0]
     7ec:	21fa      	movs	r1, #250	; 0xfa
     7ee:	01c9      	lsls	r1, r1, #7
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <_Z9readClockP11structClock+0x5c>)
     7f2:	4798      	blx	r3
     7f4:	1945      	adds	r5, r0, r5
     7f6:	6025      	str	r5, [r4, #0]
	timeClock->halfmillis=timeClock->halfmillis%RTC_FREQ;
     7f8:	6860      	ldr	r0, [r4, #4]
     7fa:	21fa      	movs	r1, #250	; 0xfa
     7fc:	01c9      	lsls	r1, r1, #7
     7fe:	4b05      	ldr	r3, [pc, #20]	; (814 <_Z9readClockP11structClock+0x60>)
     800:	4798      	blx	r3
     802:	6061      	str	r1, [r4, #4]
	return timeCounter;
}
     804:	1c30      	adds	r0, r6, #0
     806:	bd70      	pop	{r4, r5, r6, pc}
     808:	40001400 	.word	0x40001400
     80c:	200000b8 	.word	0x200000b8
     810:	00007105 	.word	0x00007105
     814:	00007211 	.word	0x00007211

00000818 <_Z10writeClock11structClock>:
void writeClock(Clock clk){
     818:	b5f0      	push	{r4, r5, r6, r7, lr}
     81a:	4647      	mov	r7, r8
     81c:	b480      	push	{r7}
     81e:	b084      	sub	sp, #16
     820:	9001      	str	r0, [sp, #4]
     822:	9102      	str	r1, [sp, #8]
     824:	9203      	str	r2, [sp, #12]
	//rtc_count_disable(&rtc_instance);
	//Disable_global_interrupt();

	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
     826:	4a18      	ldr	r2, [pc, #96]	; (888 <_Z10writeClock11structClock+0x70>)
     828:	8813      	ldrh	r3, [r2, #0]
     82a:	2102      	movs	r1, #2
     82c:	438b      	bics	r3, r1
     82e:	8013      	strh	r3, [r2, #0]
	
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
     830:	7a93      	ldrb	r3, [r2, #10]
     832:	09db      	lsrs	r3, r3, #7
     834:	d1fc      	bne.n	830 <_Z10writeClock11structClock+0x18>
	RTC->MODE0.COUNT.reg=clk.halfmillis%VALUE_TIMER;
     836:	9802      	ldr	r0, [sp, #8]
     838:	4f14      	ldr	r7, [pc, #80]	; (88c <_Z10writeClock11structClock+0x74>)
     83a:	21fa      	movs	r1, #250	; 0xfa
     83c:	0089      	lsls	r1, r1, #2
     83e:	47b8      	blx	r7
     840:	4d11      	ldr	r5, [pc, #68]	; (888 <_Z10writeClock11structClock+0x70>)
     842:	6129      	str	r1, [r5, #16]
	timeManage.second=clk.second;
     844:	9b01      	ldr	r3, [sp, #4]
     846:	4c12      	ldr	r4, [pc, #72]	; (890 <_Z10writeClock11structClock+0x78>)
     848:	6023      	str	r3, [r4, #0]
	timeManage.halfmillis=(int)(clk.halfmillis/VALUE_TIMER)*VALUE_TIMER;
     84a:	9802      	ldr	r0, [sp, #8]
     84c:	4b11      	ldr	r3, [pc, #68]	; (894 <_Z10writeClock11structClock+0x7c>)
     84e:	4698      	mov	r8, r3
     850:	21fa      	movs	r1, #250	; 0xfa
     852:	0089      	lsls	r1, r1, #2
     854:	4798      	blx	r3
     856:	23fa      	movs	r3, #250	; 0xfa
     858:	009b      	lsls	r3, r3, #2
     85a:	4358      	muls	r0, r3
     85c:	6060      	str	r0, [r4, #4]
	timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     85e:	6860      	ldr	r0, [r4, #4]
     860:	6826      	ldr	r6, [r4, #0]
     862:	21fa      	movs	r1, #250	; 0xfa
     864:	01c9      	lsls	r1, r1, #7
     866:	47c0      	blx	r8
     868:	1986      	adds	r6, r0, r6
     86a:	6026      	str	r6, [r4, #0]
	timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     86c:	6860      	ldr	r0, [r4, #4]
     86e:	21fa      	movs	r1, #250	; 0xfa
     870:	01c9      	lsls	r1, r1, #7
     872:	47b8      	blx	r7
     874:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
     876:	882a      	ldrh	r2, [r5, #0]
     878:	2302      	movs	r3, #2
     87a:	4313      	orrs	r3, r2
     87c:	802b      	strh	r3, [r5, #0]

	

	
	
}
     87e:	b004      	add	sp, #16
     880:	bc04      	pop	{r2}
     882:	4690      	mov	r8, r2
     884:	bdf0      	pop	{r4, r5, r6, r7, pc}
     886:	46c0      	nop			; (mov r8, r8)
     888:	40001400 	.word	0x40001400
     88c:	00007211 	.word	0x00007211
     890:	200000b8 	.word	0x200000b8
     894:	00007105 	.word	0x00007105

00000898 <_Z15isrInternalClokv>:
void isrInternalClok(void){
     898:	b5f0      	push	{r4, r5, r6, r7, lr}
     89a:	b08d      	sub	sp, #52	; 0x34
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     89c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     89e:	f3bf 8f5f 	dmb	sy
			Disable_global_interrupt();
     8a2:	2200      	movs	r2, #0
     8a4:	4b59      	ldr	r3, [pc, #356]	; (a0c <_Z15isrInternalClokv+0x174>)
     8a6:	701a      	strb	r2, [r3, #0]
			//printf("+");
			static bool state;
			
			

			timeManage.halfmillis+=VALUE_TIMER;
     8a8:	4b59      	ldr	r3, [pc, #356]	; (a10 <_Z15isrInternalClokv+0x178>)
     8aa:	685a      	ldr	r2, [r3, #4]
     8ac:	21fa      	movs	r1, #250	; 0xfa
     8ae:	0089      	lsls	r1, r1, #2
     8b0:	468c      	mov	ip, r1
     8b2:	4462      	add	r2, ip
     8b4:	605a      	str	r2, [r3, #4]

			state=stateLed;
     8b6:	4a57      	ldr	r2, [pc, #348]	; (a14 <_Z15isrInternalClokv+0x17c>)
     8b8:	7811      	ldrb	r1, [r2, #0]
     8ba:	4a57      	ldr	r2, [pc, #348]	; (a18 <_Z15isrInternalClokv+0x180>)
     8bc:	7011      	strb	r1, [r2, #0]
			if(timeManage.halfmillis<(RTC_FREQ/2)){//all 500ms
     8be:	685a      	ldr	r2, [r3, #4]
     8c0:	4b56      	ldr	r3, [pc, #344]	; (a1c <_Z15isrInternalClokv+0x184>)
     8c2:	429a      	cmp	r2, r3
     8c4:	d803      	bhi.n	8ce <_Z15isrInternalClokv+0x36>
				stateLed=LOW;
     8c6:	2200      	movs	r2, #0
     8c8:	4b52      	ldr	r3, [pc, #328]	; (a14 <_Z15isrInternalClokv+0x17c>)
     8ca:	701a      	strb	r2, [r3, #0]
     8cc:	e002      	b.n	8d4 <_Z15isrInternalClokv+0x3c>
			}
			else{
				stateLed=HIGH;
     8ce:	2201      	movs	r2, #1
     8d0:	4b50      	ldr	r3, [pc, #320]	; (a14 <_Z15isrInternalClokv+0x17c>)
     8d2:	701a      	strb	r2, [r3, #0]
			}
			if(state!=stateLed){
     8d4:	4b4f      	ldr	r3, [pc, #316]	; (a14 <_Z15isrInternalClokv+0x17c>)
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	b2db      	uxtb	r3, r3
     8da:	4a4f      	ldr	r2, [pc, #316]	; (a18 <_Z15isrInternalClokv+0x180>)
     8dc:	7812      	ldrb	r2, [r2, #0]
     8de:	429a      	cmp	r2, r3
     8e0:	d017      	beq.n	912 <_Z15isrInternalClokv+0x7a>
				led = stateLed;
     8e2:	4b4c      	ldr	r3, [pc, #304]	; (a14 <_Z15isrInternalClokv+0x17c>)
     8e4:	781c      	ldrb	r4, [r3, #0]
     8e6:	b2e4      	uxtb	r4, r4
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
     8e8:	4b4d      	ldr	r3, [pc, #308]	; (a20 <_Z15isrInternalClokv+0x188>)
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	b25b      	sxtb	r3, r3
     8ee:	3301      	adds	r3, #1
     8f0:	d104      	bne.n	8fc <_Z15isrInternalClokv+0x64>
     8f2:	484c      	ldr	r0, [pc, #304]	; (a24 <_Z15isrInternalClokv+0x18c>)
     8f4:	494c      	ldr	r1, [pc, #304]	; (a28 <_Z15isrInternalClokv+0x190>)
     8f6:	2228      	movs	r2, #40	; 0x28
     8f8:	4b4c      	ldr	r3, [pc, #304]	; (a2c <_Z15isrInternalClokv+0x194>)
     8fa:	4798      	blx	r3
    if (value)
     8fc:	2c00      	cmp	r4, #0
     8fe:	d004      	beq.n	90a <_Z15isrInternalClokv+0x72>
        *obj->OUTSET = obj->mask;
     900:	4b47      	ldr	r3, [pc, #284]	; (a20 <_Z15isrInternalClokv+0x188>)
     902:	691a      	ldr	r2, [r3, #16]
     904:	685b      	ldr	r3, [r3, #4]
     906:	6013      	str	r3, [r2, #0]
     908:	e003      	b.n	912 <_Z15isrInternalClokv+0x7a>
    else
        *obj->OUTCLR = obj->mask;
     90a:	4b45      	ldr	r3, [pc, #276]	; (a20 <_Z15isrInternalClokv+0x188>)
     90c:	68da      	ldr	r2, [r3, #12]
     90e:	685b      	ldr	r3, [r3, #4]
     910:	6013      	str	r3, [r2, #0]
				//		xSemaphoreGiveFromISR( synchroLed,NULL);
				//	}
			}

			
			timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     912:	4c3f      	ldr	r4, [pc, #252]	; (a10 <_Z15isrInternalClokv+0x178>)
     914:	6860      	ldr	r0, [r4, #4]
     916:	6825      	ldr	r5, [r4, #0]
     918:	21fa      	movs	r1, #250	; 0xfa
     91a:	01c9      	lsls	r1, r1, #7
     91c:	4b44      	ldr	r3, [pc, #272]	; (a30 <_Z15isrInternalClokv+0x198>)
     91e:	4798      	blx	r3
     920:	1945      	adds	r5, r0, r5
     922:	6025      	str	r5, [r4, #0]
			timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     924:	6860      	ldr	r0, [r4, #4]
     926:	21fa      	movs	r1, #250	; 0xfa
     928:	01c9      	lsls	r1, r1, #7
     92a:	4b42      	ldr	r3, [pc, #264]	; (a34 <_Z15isrInternalClokv+0x19c>)
     92c:	4798      	blx	r3
     92e:	6061      	str	r1, [r4, #4]
			if((valueCor!=0)){
     930:	4b41      	ldr	r3, [pc, #260]	; (a38 <_Z15isrInternalClokv+0x1a0>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	2b00      	cmp	r3, #0
     936:	d060      	beq.n	9fa <_Z15isrInternalClokv+0x162>
				if (timeCorr==0){
     938:	4b40      	ldr	r3, [pc, #256]	; (a3c <_Z15isrInternalClokv+0x1a4>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	2b00      	cmp	r3, #0
     93e:	d13c      	bne.n	9ba <_Z15isrInternalClokv+0x122>
					timeCorr=timeCorrection;
     940:	4b3f      	ldr	r3, [pc, #252]	; (a40 <_Z15isrInternalClokv+0x1a8>)
     942:	681a      	ldr	r2, [r3, #0]
     944:	4b3d      	ldr	r3, [pc, #244]	; (a3c <_Z15isrInternalClokv+0x1a4>)
     946:	601a      	str	r2, [r3, #0]
					Clock off;
					off.second=(unsigned int )abs(valueCor)/RTC_FREQ;
     948:	4c3b      	ldr	r4, [pc, #236]	; (a38 <_Z15isrInternalClokv+0x1a0>)
     94a:	6820      	ldr	r0, [r4, #0]
     94c:	17c3      	asrs	r3, r0, #31
     94e:	18c0      	adds	r0, r0, r3
     950:	4058      	eors	r0, r3
     952:	21fa      	movs	r1, #250	; 0xfa
     954:	01c9      	lsls	r1, r1, #7
     956:	4b36      	ldr	r3, [pc, #216]	; (a30 <_Z15isrInternalClokv+0x198>)
     958:	4798      	blx	r3
     95a:	9009      	str	r0, [sp, #36]	; 0x24
					off.halfmillis=(unsigned int)abs(valueCor)%RTC_FREQ;
     95c:	6820      	ldr	r0, [r4, #0]
     95e:	17c3      	asrs	r3, r0, #31
     960:	18c0      	adds	r0, r0, r3
     962:	4058      	eors	r0, r3
     964:	21fa      	movs	r1, #250	; 0xfa
     966:	01c9      	lsls	r1, r1, #7
     968:	4b32      	ldr	r3, [pc, #200]	; (a34 <_Z15isrInternalClokv+0x19c>)
     96a:	4798      	blx	r3
     96c:	910a      	str	r1, [sp, #40]	; 0x28
					if(valueCor<0){
     96e:	6823      	ldr	r3, [r4, #0]
     970:	2b00      	cmp	r3, #0
     972:	da03      	bge.n	97c <_Z15isrInternalClokv+0xe4>
						off.sign=false;
     974:	2200      	movs	r2, #0
     976:	ab09      	add	r3, sp, #36	; 0x24
     978:	721a      	strb	r2, [r3, #8]
     97a:	e002      	b.n	982 <_Z15isrInternalClokv+0xea>
					}
					else{
						off.sign=true;
     97c:	2201      	movs	r2, #1
     97e:	ab09      	add	r3, sp, #36	; 0x24
     980:	721a      	strb	r2, [r3, #8]
					}
					//change the time
					timeManage=sumClock(timeManage,off);
     982:	4e23      	ldr	r6, [pc, #140]	; (a10 <_Z15isrInternalClokv+0x178>)
     984:	ac04      	add	r4, sp, #16
     986:	ad09      	add	r5, sp, #36	; 0x24
     988:	466b      	mov	r3, sp
     98a:	1c2a      	adds	r2, r5, #0
     98c:	ca83      	ldmia	r2!, {r0, r1, r7}
     98e:	c383      	stmia	r3!, {r0, r1, r7}
     990:	1c20      	adds	r0, r4, #0
     992:	6831      	ldr	r1, [r6, #0]
     994:	6872      	ldr	r2, [r6, #4]
     996:	68b3      	ldr	r3, [r6, #8]
     998:	4f2a      	ldr	r7, [pc, #168]	; (a44 <_Z15isrInternalClokv+0x1ac>)
     99a:	47b8      	blx	r7
     99c:	1c23      	adds	r3, r4, #0
     99e:	cb07      	ldmia	r3!, {r0, r1, r2}
     9a0:	c607      	stmia	r6!, {r0, r1, r2}
					//change the correction offset
					sumOffset=sumClock(sumOffset,off);//ok
     9a2:	4e29      	ldr	r6, [pc, #164]	; (a48 <_Z15isrInternalClokv+0x1b0>)
     9a4:	466b      	mov	r3, sp
     9a6:	cd07      	ldmia	r5!, {r0, r1, r2}
     9a8:	c307      	stmia	r3!, {r0, r1, r2}
     9aa:	1c20      	adds	r0, r4, #0
     9ac:	6831      	ldr	r1, [r6, #0]
     9ae:	6872      	ldr	r2, [r6, #4]
     9b0:	68b3      	ldr	r3, [r6, #8]
     9b2:	47b8      	blx	r7
     9b4:	cc0e      	ldmia	r4!, {r1, r2, r3}
     9b6:	c60e      	stmia	r6!, {r1, r2, r3}
     9b8:	e003      	b.n	9c2 <_Z15isrInternalClokv+0x12a>
				}
				else{
					timeCorr--;
     9ba:	4a20      	ldr	r2, [pc, #128]	; (a3c <_Z15isrInternalClokv+0x1a4>)
     9bc:	6813      	ldr	r3, [r2, #0]
     9be:	3b01      	subs	r3, #1
     9c0:	6013      	str	r3, [r2, #0]
				}	
				sumOffset.second+=sumOffset.halfmillis/RTC_FREQ;
     9c2:	4c21      	ldr	r4, [pc, #132]	; (a48 <_Z15isrInternalClokv+0x1b0>)
     9c4:	6860      	ldr	r0, [r4, #4]
     9c6:	6825      	ldr	r5, [r4, #0]
     9c8:	4f19      	ldr	r7, [pc, #100]	; (a30 <_Z15isrInternalClokv+0x198>)
     9ca:	21fa      	movs	r1, #250	; 0xfa
     9cc:	01c9      	lsls	r1, r1, #7
     9ce:	47b8      	blx	r7
     9d0:	1945      	adds	r5, r0, r5
     9d2:	6025      	str	r5, [r4, #0]
				sumOffset.halfmillis=sumOffset.halfmillis%RTC_FREQ;
     9d4:	6860      	ldr	r0, [r4, #4]
     9d6:	4e17      	ldr	r6, [pc, #92]	; (a34 <_Z15isrInternalClokv+0x19c>)
     9d8:	21fa      	movs	r1, #250	; 0xfa
     9da:	01c9      	lsls	r1, r1, #7
     9dc:	47b0      	blx	r6
     9de:	6061      	str	r1, [r4, #4]
				timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     9e0:	4c0b      	ldr	r4, [pc, #44]	; (a10 <_Z15isrInternalClokv+0x178>)
     9e2:	6860      	ldr	r0, [r4, #4]
     9e4:	6825      	ldr	r5, [r4, #0]
     9e6:	21fa      	movs	r1, #250	; 0xfa
     9e8:	01c9      	lsls	r1, r1, #7
     9ea:	47b8      	blx	r7
     9ec:	1945      	adds	r5, r0, r5
     9ee:	6025      	str	r5, [r4, #0]
				timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     9f0:	6860      	ldr	r0, [r4, #4]
     9f2:	21fa      	movs	r1, #250	; 0xfa
     9f4:	01c9      	lsls	r1, r1, #7
     9f6:	47b0      	blx	r6
     9f8:	6061      	str	r1, [r4, #4]
			
			}
			

			
	Enable_global_interrupt();
     9fa:	2201      	movs	r2, #1
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <_Z15isrInternalClokv+0x174>)
     9fe:	701a      	strb	r2, [r3, #0]
     a00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a04:	b662      	cpsie	i
}
     a06:	b00d      	add	sp, #52	; 0x34
     a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	200000d0 	.word	0x200000d0
     a10:	200000b8 	.word	0x200000b8
     a14:	20000294 	.word	0x20000294
     a18:	2000028c 	.word	0x2000028c
     a1c:	00003e7f 	.word	0x00003e7f
     a20:	2000029c 	.word	0x2000029c
     a24:	0000f864 	.word	0x0000f864
     a28:	0000f87c 	.word	0x0000f87c
     a2c:	000059d9 	.word	0x000059d9
     a30:	00007105 	.word	0x00007105
     a34:	00007211 	.word	0x00007211
     a38:	200002b8 	.word	0x200002b8
     a3c:	20000298 	.word	0x20000298
     a40:	20000290 	.word	0x20000290
     a44:	00000dd5 	.word	0x00000dd5
     a48:	200003c8 	.word	0x200003c8

00000a4c <RTC_Handler>:
void RTC_Handler( void ){
     a4c:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     a4e:	4b06      	ldr	r3, [pc, #24]	; (a68 <RTC_Handler+0x1c>)
     a50:	7a19      	ldrb	r1, [r3, #8]
     a52:	2201      	movs	r2, #1
     a54:	430a      	orrs	r2, r1
     a56:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     a58:	7a1a      	ldrb	r2, [r3, #8]
     a5a:	2180      	movs	r1, #128	; 0x80
     a5c:	4249      	negs	r1, r1
     a5e:	430a      	orrs	r2, r1
     a60:	721a      	strb	r2, [r3, #8]
	isrInternalClok();
     a62:	4b02      	ldr	r3, [pc, #8]	; (a6c <RTC_Handler+0x20>)
     a64:	4798      	blx	r3
}
     a66:	bd08      	pop	{r3, pc}
     a68:	40001400 	.word	0x40001400
     a6c:	00000899 	.word	0x00000899

00000a70 <_Z22configureInternalClockv>:

void configureInternalClock(void){
     a70:	b508      	push	{r3, lr}
	hmi.printf("internal clock config\r\n");
     a72:	4821      	ldr	r0, [pc, #132]	; (af8 <_Z22configureInternalClockv+0x88>)
     a74:	4921      	ldr	r1, [pc, #132]	; (afc <_Z22configureInternalClockv+0x8c>)
     a76:	4b22      	ldr	r3, [pc, #136]	; (b00 <_Z22configureInternalClockv+0x90>)
     a78:	4798      	blx	r3
	//gENERIC CLOCK GENRERATOR
	GCLK->GENCTRL.reg=0b00000000000000010000010000000010;
     a7a:	4b22      	ldr	r3, [pc, #136]	; (b04 <_Z22configureInternalClockv+0x94>)
     a7c:	4a22      	ldr	r2, [pc, #136]	; (b08 <_Z22configureInternalClockv+0x98>)
     a7e:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg= 0b00000000000000000000000100000010;
     a80:	2281      	movs	r2, #129	; 0x81
     a82:	0052      	lsls	r2, r2, #1
     a84:	609a      	str	r2, [r3, #8]
	GCLK->CLKCTRL.reg=0x4204;
     a86:	4a21      	ldr	r2, [pc, #132]	; (b0c <_Z22configureInternalClockv+0x9c>)
     a88:	805a      	strh	r2, [r3, #2]
	//peripheral configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
     a8a:	4b21      	ldr	r3, [pc, #132]	; (b10 <_Z22configureInternalClockv+0xa0>)
     a8c:	8819      	ldrh	r1, [r3, #0]
     a8e:	4a21      	ldr	r2, [pc, #132]	; (b14 <_Z22configureInternalClockv+0xa4>)
     a90:	400a      	ands	r2, r1
     a92:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
     a94:	881a      	ldrh	r2, [r3, #0]
     a96:	210c      	movs	r1, #12
     a98:	438a      	bics	r2, r1
     a9a:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
     a9c:	881a      	ldrh	r2, [r3, #0]
     a9e:	390b      	subs	r1, #11
     aa0:	438a      	bics	r2, r1
     aa2:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
     aa4:	8819      	ldrh	r1, [r3, #0]
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	430a      	orrs	r2, r1
     aaa:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
     aac:	79d9      	ldrb	r1, [r3, #7]
     aae:	2080      	movs	r0, #128	; 0x80
     ab0:	4240      	negs	r0, r0
     ab2:	4301      	orrs	r1, r0
     ab4:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
     ab6:	79d9      	ldrb	r1, [r3, #7]
     ab8:	2201      	movs	r2, #1
     aba:	4311      	orrs	r1, r2
     abc:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     abe:	7a19      	ldrb	r1, [r3, #8]
     ac0:	430a      	orrs	r2, r1
     ac2:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     ac4:	7a1a      	ldrb	r2, [r3, #8]
     ac6:	4302      	orrs	r2, r0
     ac8:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;			//set the RTC value
     aca:	2200      	movs	r2, #0
     acc:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg = count_set_period;
     ace:	4a12      	ldr	r2, [pc, #72]	; (b18 <_Z22configureInternalClockv+0xa8>)
     ad0:	6812      	ldr	r2, [r2, #0]
     ad2:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     ad4:	8819      	ldrh	r1, [r3, #0]
     ad6:	2202      	movs	r2, #2
     ad8:	430a      	orrs	r2, r1
     ada:	801a      	strh	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     adc:	4a0f      	ldr	r2, [pc, #60]	; (b1c <_Z22configureInternalClockv+0xac>)
     ade:	21c0      	movs	r1, #192	; 0xc0
     ae0:	0089      	lsls	r1, r1, #2
     ae2:	5853      	ldr	r3, [r2, r1]
     ae4:	021b      	lsls	r3, r3, #8
     ae6:	0a1b      	lsrs	r3, r3, #8
     ae8:	20c0      	movs	r0, #192	; 0xc0
     aea:	0600      	lsls	r0, r0, #24
     aec:	4303      	orrs	r3, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     aee:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     af0:	2308      	movs	r3, #8
     af2:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
	NVIC_EnableIRQ(RTC_IRQn);
	
     af4:	bd08      	pop	{r3, pc}
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	20000270 	.word	0x20000270
     afc:	0000f8c8 	.word	0x0000f8c8
     b00:	000059b1 	.word	0x000059b1
     b04:	40000c00 	.word	0x40000c00
     b08:	00010402 	.word	0x00010402
     b0c:	00004204 	.word	0x00004204
     b10:	40001400 	.word	0x40001400
     b14:	fffff0ff 	.word	0xfffff0ff
     b18:	200000b4 	.word	0x200000b4
     b1c:	e000e100 	.word	0xe000e100

00000b20 <_GLOBAL__sub_I_count_set_period>:
     b20:	b508      	push	{r3, lr}
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
     b22:	4807      	ldr	r0, [pc, #28]	; (b40 <_GLOBAL__sub_I_count_set_period+0x20>)
     b24:	2300      	movs	r3, #0
     b26:	7003      	strb	r3, [r0, #0]
     b28:	6043      	str	r3, [r0, #4]
     b2a:	7203      	strb	r3, [r0, #8]
     b2c:	7243      	strb	r3, [r0, #9]
     b2e:	7283      	strb	r3, [r0, #10]
     b30:	60c3      	str	r3, [r0, #12]
     b32:	6103      	str	r3, [r0, #16]
     b34:	6143      	str	r3, [r0, #20]
     b36:	6183      	str	r3, [r0, #24]
        gpio_init_out(&gpio, pin);
     b38:	2113      	movs	r1, #19
     b3a:	4b02      	ldr	r3, [pc, #8]	; (b44 <_GLOBAL__sub_I_count_set_period+0x24>)
     b3c:	4798      	blx	r3
     b3e:	bd08      	pop	{r3, pc}
     b40:	2000029c 	.word	0x2000029c
     b44:	000059fd 	.word	0x000059fd

00000b48 <_Z6ppsISRv>:
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */

void ppsISR(void)
{	
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	b08e      	sub	sp, #56	; 0x38
	}	
	else{
		nPPS++;
	}*/
	//Disable_global_interrupt();
	Clock timeCopy={0,0,true};
     b4c:	ad08      	add	r5, sp, #32
     b4e:	2300      	movs	r3, #0
     b50:	9308      	str	r3, [sp, #32]
     b52:	9309      	str	r3, [sp, #36]	; 0x24
     b54:	2201      	movs	r2, #1
     b56:	722a      	strb	r2, [r5, #8]
	//Disable_global_interrupt();
	Clock timeMaster={0,0,true};
     b58:	ac0b      	add	r4, sp, #44	; 0x2c
     b5a:	930b      	str	r3, [sp, #44]	; 0x2c
     b5c:	930c      	str	r3, [sp, #48]	; 0x30
     b5e:	7222      	strb	r2, [r4, #8]
	readClock(&timeCopy);
     b60:	1c28      	adds	r0, r5, #0
     b62:	4b1e      	ldr	r3, [pc, #120]	; (bdc <_Z6ppsISRv+0x94>)
     b64:	4798      	blx	r3
	//Enable_global_interrupt();
	timeMaster.second=timeCopy.second;
     b66:	9b08      	ldr	r3, [sp, #32]
     b68:	930b      	str	r3, [sp, #44]	; 0x2c
	timeMaster.halfmillis=timeCopy.halfmillis;
     b6a:	686b      	ldr	r3, [r5, #4]
     b6c:	6063      	str	r3, [r4, #4]
	if(timeMaster.halfmillis>=RTC_FREQ/2){//for the accurate 500ms
     b6e:	6862      	ldr	r2, [r4, #4]
     b70:	4b1b      	ldr	r3, [pc, #108]	; (be0 <_Z6ppsISRv+0x98>)
     b72:	429a      	cmp	r2, r3
     b74:	d902      	bls.n	b7c <_Z6ppsISRv+0x34>
		timeMaster.second++;
     b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b78:	3301      	adds	r3, #1
     b7a:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	timeMaster.halfmillis=0;
     b7c:	2300      	movs	r3, #0
     b7e:	930c      	str	r3, [sp, #48]	; 0x30
	if((timeCopy.halfmillis>RTC_FREQ)||(timeCopy.halfmillis<0)){
		printf("timeCopypps:'");
		printfClock(timeCopy);
	}
	*/
	timeProt.offset=subClock(timeMaster,timeCopy);
     b80:	4d18      	ldr	r5, [pc, #96]	; (be4 <_Z6ppsISRv+0x9c>)
     b82:	ac04      	add	r4, sp, #16
     b84:	ab08      	add	r3, sp, #32
     b86:	466a      	mov	r2, sp
     b88:	cb43      	ldmia	r3!, {r0, r1, r6}
     b8a:	c243      	stmia	r2!, {r0, r1, r6}
     b8c:	1c20      	adds	r0, r4, #0
     b8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
     b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     b94:	4e14      	ldr	r6, [pc, #80]	; (be8 <_Z6ppsISRv+0xa0>)
     b96:	47b0      	blx	r6
     b98:	1c2b      	adds	r3, r5, #0
     b9a:	3350      	adds	r3, #80	; 0x50
     b9c:	cc07      	ldmia	r4!, {r0, r1, r2}
     b9e:	c307      	stmia	r3!, {r0, r1, r2}
	//timeProt.offset.second=0;
	#ifdef MASTERMODE
		updateClock();
	#else
		if(timeProt.offset.sign==true){
     ba0:	2358      	movs	r3, #88	; 0x58
     ba2:	5ceb      	ldrb	r3, [r5, r3]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d00a      	beq.n	bbe <_Z6ppsISRv+0x76>
			sprintf(messageHMIError,"		error pps: %lus %u	t:%lus",timeProt.offset.second,(unsigned int)(timeProt.offset.halfmillis/2),timeMaster.second);
     ba8:	4b0e      	ldr	r3, [pc, #56]	; (be4 <_Z6ppsISRv+0x9c>)
     baa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
     bb0:	085b      	lsrs	r3, r3, #1
     bb2:	9100      	str	r1, [sp, #0]
     bb4:	480d      	ldr	r0, [pc, #52]	; (bec <_Z6ppsISRv+0xa4>)
     bb6:	490e      	ldr	r1, [pc, #56]	; (bf0 <_Z6ppsISRv+0xa8>)
     bb8:	4c0e      	ldr	r4, [pc, #56]	; (bf4 <_Z6ppsISRv+0xac>)
     bba:	47a0      	blx	r4
     bbc:	e009      	b.n	bd2 <_Z6ppsISRv+0x8a>
		}
		else{
			sprintf(messageHMIError,"		error pps: -%lus %u	t:%lus",timeProt.offset.second,(unsigned int)(timeProt.offset.halfmillis/2),timeMaster.second);
     bbe:	4b09      	ldr	r3, [pc, #36]	; (be4 <_Z6ppsISRv+0x9c>)
     bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
     bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
     bc6:	085b      	lsrs	r3, r3, #1
     bc8:	9100      	str	r1, [sp, #0]
     bca:	4808      	ldr	r0, [pc, #32]	; (bec <_Z6ppsISRv+0xa4>)
     bcc:	490a      	ldr	r1, [pc, #40]	; (bf8 <_Z6ppsISRv+0xb0>)
     bce:	4c09      	ldr	r4, [pc, #36]	; (bf4 <_Z6ppsISRv+0xac>)
     bd0:	47a0      	blx	r4
		}
		sendHMI(messageHMIError);
     bd2:	4806      	ldr	r0, [pc, #24]	; (bec <_Z6ppsISRv+0xa4>)
     bd4:	4b09      	ldr	r3, [pc, #36]	; (bfc <_Z6ppsISRv+0xb4>)
     bd6:	4798      	blx	r3
	#endif
	
//	Enable_global_interrupt();
}
     bd8:	b00e      	add	sp, #56	; 0x38
     bda:	bd70      	pop	{r4, r5, r6, pc}
     bdc:	000007b5 	.word	0x000007b5
     be0:	00003e7f 	.word	0x00003e7f
     be4:	2000049c 	.word	0x2000049c
     be8:	00000cd1 	.word	0x00000cd1
     bec:	200002bc 	.word	0x200002bc
     bf0:	0000f8e0 	.word	0x0000f8e0
     bf4:	0000c1cd 	.word	0x0000c1cd
     bf8:	0000f8fc 	.word	0x0000f8fc
     bfc:	000005b1 	.word	0x000005b1

00000c00 <_Z16configurationPPSv>:

void configurationPPS(void){
     c00:	b510      	push	{r4, lr}
     c02:	b084      	sub	sp, #16
		hmi.printf("confif pps\r\n");
     c04:	480e      	ldr	r0, [pc, #56]	; (c40 <_Z16configurationPPSv+0x40>)
     c06:	490f      	ldr	r1, [pc, #60]	; (c44 <_Z16configurationPPSv+0x44>)
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <_Z16configurationPPSv+0x48>)
     c0a:	4798      	blx	r3
	//	pps.rise(ppsISR);
		struct extint_chan_conf eint_chan_conf;
		extint_chan_get_config_defaults(&eint_chan_conf);
     c0c:	ac01      	add	r4, sp, #4
     c0e:	1c20      	adds	r0, r4, #0
     c10:	4b0e      	ldr	r3, [pc, #56]	; (c4c <_Z16configurationPPSv+0x4c>)
     c12:	4798      	blx	r3
		// put the button as EXTINT
		eint_chan_conf.gpio_pin           = PIN_PA28A_EIC_EXTINT8;
     c14:	231c      	movs	r3, #28
     c16:	9301      	str	r3, [sp, #4]
		eint_chan_conf.gpio_pin_mux       = MUX_PA28A_EIC_EXTINT8;
     c18:	2300      	movs	r3, #0
     c1a:	6063      	str	r3, [r4, #4]
		eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
     c1c:	2201      	movs	r2, #1
     c1e:	72e2      	strb	r2, [r4, #11]
		eint_chan_conf.filter_input_signal = false;
     c20:	72a3      	strb	r3, [r4, #10]
		
		extint_chan_set_config(8, &eint_chan_conf);
     c22:	2008      	movs	r0, #8
     c24:	1c21      	adds	r1, r4, #0
     c26:	4b0a      	ldr	r3, [pc, #40]	; (c50 <_Z16configurationPPSv+0x50>)
     c28:	4798      	blx	r3
		//configuration callback
		extint_register_callback(&ppsISR,8,EXTINT_CALLBACK_TYPE_DETECT);
     c2a:	480a      	ldr	r0, [pc, #40]	; (c54 <_Z16configurationPPSv+0x54>)
     c2c:	2108      	movs	r1, #8
     c2e:	2200      	movs	r2, #0
     c30:	4b09      	ldr	r3, [pc, #36]	; (c58 <_Z16configurationPPSv+0x58>)
     c32:	4798      	blx	r3
		//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
		//ppsIsrr.attach(&ppsISR);
		//activation callback
		extint_chan_enable_callback(8,EXTINT_CALLBACK_TYPE_DETECT);		
     c34:	2008      	movs	r0, #8
     c36:	2100      	movs	r1, #0
     c38:	4b08      	ldr	r3, [pc, #32]	; (c5c <_Z16configurationPPSv+0x5c>)
     c3a:	4798      	blx	r3
		
		
     c3c:	b004      	add	sp, #16
     c3e:	bd10      	pop	{r4, pc}
     c40:	20000270 	.word	0x20000270
     c44:	0000f91c 	.word	0x0000f91c
     c48:	000059b1 	.word	0x000059b1
     c4c:	0000481d 	.word	0x0000481d
     c50:	00004831 	.word	0x00004831
     c54:	00000b49 	.word	0x00000b49
     c58:	0000471d 	.word	0x0000471d
     c5c:	00004745 	.word	0x00004745

00000c60 <_Z3sup11structClockS_>:



Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
     c60:	b082      	sub	sp, #8
     c62:	b084      	sub	sp, #16
     c64:	9001      	str	r0, [sp, #4]
     c66:	9102      	str	r1, [sp, #8]
     c68:	9203      	str	r2, [sp, #12]
     c6a:	9305      	str	r3, [sp, #20]
		if(clock1.second>clock2.second){//clock1>clock2
     c6c:	9a01      	ldr	r2, [sp, #4]
     c6e:	9b05      	ldr	r3, [sp, #20]
			return true;
     c70:	2001      	movs	r0, #1


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
     c72:	429a      	cmp	r2, r3
     c74:	d809      	bhi.n	c8a <_Z3sup11structClockS_+0x2a>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     c76:	9a01      	ldr	r2, [sp, #4]
     c78:	9b05      	ldr	r3, [sp, #20]
				return false;
     c7a:	2000      	movs	r0, #0
bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     c7c:	429a      	cmp	r2, r3
     c7e:	d304      	bcc.n	c8a <_Z3sup11structClockS_+0x2a>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
     c80:	9802      	ldr	r0, [sp, #8]
     c82:	9b06      	ldr	r3, [sp, #24]
     c84:	4283      	cmp	r3, r0
     c86:	4180      	sbcs	r0, r0
     c88:	4240      	negs	r0, r0
					return false;
				}
			}
		}

}
     c8a:	b004      	add	sp, #16
     c8c:	b002      	add	sp, #8
     c8e:	4770      	bx	lr

00000c90 <_Z11subClockPos11structClockS_>:
	}

	
	return ret;
}
Clock subClockPos(Clock clock1,Clock clock2 ){
     c90:	b084      	sub	sp, #16
     c92:	9101      	str	r1, [sp, #4]
     c94:	9202      	str	r2, [sp, #8]
     c96:	9303      	str	r3, [sp, #12]
	Clock ret={0,0,true};
     c98:	2300      	movs	r3, #0
     c9a:	6003      	str	r3, [r0, #0]
     c9c:	6043      	str	r3, [r0, #4]
     c9e:	3301      	adds	r3, #1
     ca0:	7203      	strb	r3, [r0, #8]
	//clock1.second+=clock1.halfmillis/RTC_FREQ;
	//clock1.halfmillis=clock1.halfmillis%RTC_FREQ;	
		
	//clock2.second+=clock2.halfmillis/RTC_FREQ;
	//clock2.halfmillis=clock2.halfmillis%RTC_FREQ;
	long int halfmillis=clock2.halfmillis;
     ca2:	9905      	ldr	r1, [sp, #20]
	ret.second=clock1.second-clock2.second;
     ca4:	9a01      	ldr	r2, [sp, #4]
     ca6:	9b04      	ldr	r3, [sp, #16]
     ca8:	1ad2      	subs	r2, r2, r3
     caa:	6002      	str	r2, [r0, #0]
	halfmillis=(long int)clock1.halfmillis-halfmillis;
     cac:	9b02      	ldr	r3, [sp, #8]
     cae:	1a5b      	subs	r3, r3, r1
	
	
	
	if(halfmillis<0){
     cb0:	d50b      	bpl.n	cca <_Z11subClockPos11structClockS_+0x3a>
		
		if(ret.second!=0){
     cb2:	6802      	ldr	r2, [r0, #0]
     cb4:	2a00      	cmp	r2, #0
     cb6:	d009      	beq.n	ccc <_Z11subClockPos11structClockS_+0x3c>
				pc.printf("c1:%ld,%ld",clock1.second,clock1.halfmillis);
				pc.printf("c2:%ld,%ld",clock2.second,clock2.halfmillis);*/
				//sendHMI("error clock");
			}
			
			ret.second--;
     cb8:	6802      	ldr	r2, [r0, #0]
     cba:	3a01      	subs	r2, #1
     cbc:	6002      	str	r2, [r0, #0]
			ret.halfmillis=(unsigned int)(halfmillis+RTC_FREQ);
     cbe:	22fa      	movs	r2, #250	; 0xfa
     cc0:	01d2      	lsls	r2, r2, #7
     cc2:	4694      	mov	ip, r2
     cc4:	4463      	add	r3, ip
     cc6:	6043      	str	r3, [r0, #4]
     cc8:	e000      	b.n	ccc <_Z11subClockPos11structClockS_+0x3c>
		}
	}
	else{
		ret.halfmillis=halfmillis;
     cca:	6043      	str	r3, [r0, #4]
	}
			
	return ret;
     ccc:	b004      	add	sp, #16
     cce:	4770      	bx	lr

00000cd0 <_Z8subClock11structClockS_>:
	if(clk.sign==false){
		clk.sign=true;
	}
	return clk;
}
Clock subClock(Clock clock1,Clock clock2 ){
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	b08e      	sub	sp, #56	; 0x38
     cd4:	1c04      	adds	r4, r0, #0
     cd6:	a805      	add	r0, sp, #20
     cd8:	9105      	str	r1, [sp, #20]
     cda:	9206      	str	r2, [sp, #24]
     cdc:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
     cde:	2300      	movs	r3, #0
     ce0:	6023      	str	r3, [r4, #0]
     ce2:	6063      	str	r3, [r4, #4]
     ce4:	3301      	adds	r3, #1
     ce6:	7223      	strb	r3, [r4, #8]
	if(clock1.sign!=clock2.sign){
     ce8:	7a03      	ldrb	r3, [r0, #8]
     cea:	aa12      	add	r2, sp, #72	; 0x48
     cec:	7a12      	ldrb	r2, [r2, #8]
     cee:	b2db      	uxtb	r3, r3
     cf0:	4293      	cmp	r3, r2
     cf2:	d020      	beq.n	d36 <_Z8subClock11structClockS_+0x66>
		if(clock1.sign==true){// + - -
     cf4:	7a03      	ldrb	r3, [r0, #8]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d00d      	beq.n	d16 <_Z8subClock11structClockS_+0x46>
			clock2.sign=true;
     cfa:	2201      	movs	r2, #1
     cfc:	ab12      	add	r3, sp, #72	; 0x48
     cfe:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
     d00:	466b      	mov	r3, sp
     d02:	aa12      	add	r2, sp, #72	; 0x48
     d04:	ca23      	ldmia	r2!, {r0, r1, r5}
     d06:	c323      	stmia	r3!, {r0, r1, r5}
     d08:	1c20      	adds	r0, r4, #0
     d0a:	9905      	ldr	r1, [sp, #20]
     d0c:	9a06      	ldr	r2, [sp, #24]
     d0e:	9b07      	ldr	r3, [sp, #28]
     d10:	4d2e      	ldr	r5, [pc, #184]	; (dcc <_Z8subClock11structClockS_+0xfc>)
     d12:	47a8      	blx	r5
     d14:	e056      	b.n	dc4 <_Z8subClock11structClockS_+0xf4>
		}
		else{// - - +
			clock1.sign=true;
     d16:	ab05      	add	r3, sp, #20
     d18:	2201      	movs	r2, #1
     d1a:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
     d1c:	466a      	mov	r2, sp
     d1e:	a912      	add	r1, sp, #72	; 0x48
     d20:	c961      	ldmia	r1!, {r0, r5, r6}
     d22:	c261      	stmia	r2!, {r0, r5, r6}
     d24:	1c20      	adds	r0, r4, #0
     d26:	9905      	ldr	r1, [sp, #20]
     d28:	9a06      	ldr	r2, [sp, #24]
     d2a:	9b07      	ldr	r3, [sp, #28]
     d2c:	4d27      	ldr	r5, [pc, #156]	; (dcc <_Z8subClock11structClockS_+0xfc>)
     d2e:	47a8      	blx	r5
			ret.sign=false;
     d30:	2300      	movs	r3, #0
     d32:	7223      	strb	r3, [r4, #8]
     d34:	e046      	b.n	dc4 <_Z8subClock11structClockS_+0xf4>
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
     d36:	ab05      	add	r3, sp, #20
     d38:	7a1b      	ldrb	r3, [r3, #8]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d02b      	beq.n	d96 <_Z8subClock11structClockS_+0xc6>
     d3e:	aa08      	add	r2, sp, #32
     d40:	ab05      	add	r3, sp, #20
     d42:	cb23      	ldmia	r3!, {r0, r1, r5}
     d44:	c223      	stmia	r2!, {r0, r1, r5}
     d46:	ab0b      	add	r3, sp, #44	; 0x2c
     d48:	aa12      	add	r2, sp, #72	; 0x48
     d4a:	ca23      	ldmia	r2!, {r0, r1, r5}
     d4c:	c323      	stmia	r3!, {r0, r1, r5}


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
     d4e:	9a08      	ldr	r2, [sp, #32]
     d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d52:	429a      	cmp	r2, r3
     d54:	d807      	bhi.n	d66 <_Z8subClock11structClockS_+0x96>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     d56:	9a08      	ldr	r2, [sp, #32]
     d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d5a:	429a      	cmp	r2, r3
     d5c:	d30e      	bcc.n	d7c <_Z8subClock11structClockS_+0xac>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
     d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ret.sign=false;
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
			if(sup(clock1,clock2)){//clock1>Clock2
     d62:	429a      	cmp	r2, r3
     d64:	d90a      	bls.n	d7c <_Z8subClock11structClockS_+0xac>
				
				ret=subClockPos(clock1,clock2);
     d66:	466b      	mov	r3, sp
     d68:	aa12      	add	r2, sp, #72	; 0x48
     d6a:	ca23      	ldmia	r2!, {r0, r1, r5}
     d6c:	c323      	stmia	r3!, {r0, r1, r5}
     d6e:	1c20      	adds	r0, r4, #0
     d70:	9905      	ldr	r1, [sp, #20]
     d72:	9a06      	ldr	r2, [sp, #24]
     d74:	9b07      	ldr	r3, [sp, #28]
     d76:	4d16      	ldr	r5, [pc, #88]	; (dd0 <_Z8subClock11structClockS_+0x100>)
     d78:	47a8      	blx	r5
     d7a:	e023      	b.n	dc4 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret=subClockPos(clock2,clock1);
     d7c:	ab05      	add	r3, sp, #20
     d7e:	466a      	mov	r2, sp
     d80:	cb23      	ldmia	r3!, {r0, r1, r5}
     d82:	c223      	stmia	r2!, {r0, r1, r5}
     d84:	1c20      	adds	r0, r4, #0
     d86:	9912      	ldr	r1, [sp, #72]	; 0x48
     d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     d8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
     d8c:	4d10      	ldr	r5, [pc, #64]	; (dd0 <_Z8subClock11structClockS_+0x100>)
     d8e:	47a8      	blx	r5
				ret.sign=false;
     d90:	2300      	movs	r3, #0
     d92:	7223      	strb	r3, [r4, #8]
     d94:	e016      	b.n	dc4 <_Z8subClock11structClockS_+0xf4>
			}
		}
		else{// - - - 
			clock2.sign=true;
     d96:	2201      	movs	r2, #1
     d98:	ab12      	add	r3, sp, #72	; 0x48
     d9a:	721a      	strb	r2, [r3, #8]
			clock1.sign=true;	
     d9c:	ab05      	add	r3, sp, #20
     d9e:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
     da0:	466a      	mov	r2, sp
     da2:	a912      	add	r1, sp, #72	; 0x48
     da4:	c961      	ldmia	r1!, {r0, r5, r6}
     da6:	c261      	stmia	r2!, {r0, r5, r6}
     da8:	1c20      	adds	r0, r4, #0
     daa:	9905      	ldr	r1, [sp, #20]
     dac:	9a06      	ldr	r2, [sp, #24]
     dae:	9b07      	ldr	r3, [sp, #28]
     db0:	f7ff ff8e 	bl	cd0 <_Z8subClock11structClockS_>
			if(ret.sign==true){
     db4:	7a23      	ldrb	r3, [r4, #8]
     db6:	2b00      	cmp	r3, #0
     db8:	d002      	beq.n	dc0 <_Z8subClock11structClockS_+0xf0>
				ret.sign=false;
     dba:	2300      	movs	r3, #0
     dbc:	7223      	strb	r3, [r4, #8]
     dbe:	e001      	b.n	dc4 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret.sign=true;
     dc0:	2301      	movs	r3, #1
     dc2:	7223      	strb	r3, [r4, #8]
		}
	}

	
	return ret;
}
     dc4:	1c20      	adds	r0, r4, #0
     dc6:	b00e      	add	sp, #56	; 0x38
     dc8:	bd70      	pop	{r4, r5, r6, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00000dd5 	.word	0x00000dd5
     dd0:	00000c91 	.word	0x00000c91

00000dd4 <_Z8sumClock11structClockS_>:
	ret.second=ret.second+(halfmillis/RTC_FREQ);
	ret.halfmillis=halfmillis%RTC_FREQ;
	return ret;
	
}
Clock sumClock(Clock clock1,Clock clock2 ){
     dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dd6:	4647      	mov	r7, r8
     dd8:	b480      	push	{r7}
     dda:	b09a      	sub	sp, #104	; 0x68
     ddc:	1c04      	adds	r4, r0, #0
     dde:	a805      	add	r0, sp, #20
     de0:	9105      	str	r1, [sp, #20]
     de2:	9206      	str	r2, [sp, #24]
     de4:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
     de6:	2300      	movs	r3, #0
     de8:	6023      	str	r3, [r4, #0]
     dea:	6063      	str	r3, [r4, #4]
     dec:	3301      	adds	r3, #1
     dee:	7223      	strb	r3, [r4, #8]
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
     df0:	7a03      	ldrb	r3, [r0, #8]
     df2:	2b00      	cmp	r3, #0
     df4:	d013      	beq.n	e1e <_Z8sumClock11structClockS_+0x4a>
     df6:	ab20      	add	r3, sp, #128	; 0x80
     df8:	7a1b      	ldrb	r3, [r3, #8]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d114      	bne.n	e28 <_Z8sumClock11structClockS_+0x54>
     dfe:	e00e      	b.n	e1e <_Z8sumClock11structClockS_+0x4a>
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
     e00:	ab20      	add	r3, sp, #128	; 0x80
     e02:	7a1b      	ldrb	r3, [r3, #8]
     e04:	2b00      	cmp	r3, #0
     e06:	d146      	bne.n	e96 <_Z8sumClock11structClockS_+0xc2>
     e08:	e037      	b.n	e7a <_Z8sumClock11structClockS_+0xa6>
			clock2.sign=true;
			ret=subClock(clock1,clock2);
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
     e0a:	ab20      	add	r3, sp, #128	; 0x80
     e0c:	7a1b      	ldrb	r3, [r3, #8]
     e0e:	2b00      	cmp	r3, #0
     e10:	d146      	bne.n	ea0 <_Z8sumClock11structClockS_+0xcc>
     e12:	e052      	b.n	eba <_Z8sumClock11structClockS_+0xe6>
						clock1.sign=true;
						ret=subClock(clock2,clock1);
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
     e14:	ab20      	add	r3, sp, #128	; 0x80
     e16:	7a1b      	ldrb	r3, [r3, #8]
     e18:	2b00      	cmp	r3, #0
     e1a:	d053      	beq.n	ec4 <_Z8sumClock11structClockS_+0xf0>
     e1c:	e081      	b.n	f22 <_Z8sumClock11structClockS_+0x14e>
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
     e1e:	ab05      	add	r3, sp, #20
     e20:	7a1b      	ldrb	r3, [r3, #8]
     e22:	2b00      	cmp	r3, #0
     e24:	d1ec      	bne.n	e00 <_Z8sumClock11structClockS_+0x2c>
     e26:	e036      	b.n	e96 <_Z8sumClock11structClockS_+0xc2>
     e28:	aa08      	add	r2, sp, #32
     e2a:	ab05      	add	r3, sp, #20
     e2c:	1c11      	adds	r1, r2, #0
     e2e:	cb61      	ldmia	r3!, {r0, r5, r6}
     e30:	c161      	stmia	r1!, {r0, r5, r6}
     e32:	ab0b      	add	r3, sp, #44	; 0x2c
     e34:	1c19      	adds	r1, r3, #0
     e36:	a820      	add	r0, sp, #128	; 0x80
     e38:	c8e0      	ldmia	r0!, {r5, r6, r7}
     e3a:	c1e0      	stmia	r1!, {r5, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
     e3c:	ad14      	add	r5, sp, #80	; 0x50
     e3e:	2100      	movs	r1, #0
     e40:	9114      	str	r1, [sp, #80]	; 0x50
     e42:	9115      	str	r1, [sp, #84]	; 0x54
     e44:	3101      	adds	r1, #1
     e46:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
     e48:	9909      	ldr	r1, [sp, #36]	; 0x24
	ret.second=clock1.second+clock2.second;
     e4a:	9a08      	ldr	r2, [sp, #32]
     e4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
     e4e:	1882      	adds	r2, r0, r2
     e50:	9214      	str	r2, [sp, #80]	; 0x50
	halfmillis=halfmillis+clock2.halfmillis;
     e52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     e54:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
     e56:	9f14      	ldr	r7, [sp, #80]	; 0x50
     e58:	1c30      	adds	r0, r6, #0
     e5a:	21fa      	movs	r1, #250	; 0xfa
     e5c:	01c9      	lsls	r1, r1, #7
     e5e:	4b3a      	ldr	r3, [pc, #232]	; (f48 <_Z8sumClock11structClockS_+0x174>)
     e60:	4798      	blx	r3
     e62:	19c7      	adds	r7, r0, r7
     e64:	9714      	str	r7, [sp, #80]	; 0x50
	ret.halfmillis=halfmillis%RTC_FREQ;
     e66:	1c30      	adds	r0, r6, #0
     e68:	21fa      	movs	r1, #250	; 0xfa
     e6a:	01c9      	lsls	r1, r1, #7
     e6c:	4b37      	ldr	r3, [pc, #220]	; (f4c <_Z8sumClock11structClockS_+0x178>)
     e6e:	4798      	blx	r3
     e70:	6069      	str	r1, [r5, #4]
}
Clock sumClock(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
     e72:	1c23      	adds	r3, r4, #0
     e74:	cd07      	ldmia	r5!, {r0, r1, r2}
     e76:	c307      	stmia	r3!, {r0, r1, r2}
     e78:	e053      	b.n	f22 <_Z8sumClock11structClockS_+0x14e>
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
			clock2.sign=true;
     e7a:	2201      	movs	r2, #1
     e7c:	ab20      	add	r3, sp, #128	; 0x80
     e7e:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
     e80:	466b      	mov	r3, sp
     e82:	aa20      	add	r2, sp, #128	; 0x80
     e84:	ca23      	ldmia	r2!, {r0, r1, r5}
     e86:	c323      	stmia	r3!, {r0, r1, r5}
     e88:	1c20      	adds	r0, r4, #0
     e8a:	9905      	ldr	r1, [sp, #20]
     e8c:	9a06      	ldr	r2, [sp, #24]
     e8e:	9b07      	ldr	r3, [sp, #28]
     e90:	4d2f      	ldr	r5, [pc, #188]	; (f50 <_Z8sumClock11structClockS_+0x17c>)
     e92:	47a8      	blx	r5
     e94:	e045      	b.n	f22 <_Z8sumClock11structClockS_+0x14e>
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
     e96:	ab05      	add	r3, sp, #20
     e98:	7a1b      	ldrb	r3, [r3, #8]
     e9a:	2b00      	cmp	r3, #0
     e9c:	d10d      	bne.n	eba <_Z8sumClock11structClockS_+0xe6>
     e9e:	e7b4      	b.n	e0a <_Z8sumClock11structClockS_+0x36>
						clock1.sign=true;
     ea0:	ab05      	add	r3, sp, #20
     ea2:	2201      	movs	r2, #1
     ea4:	721a      	strb	r2, [r3, #8]
						ret=subClock(clock2,clock1);
     ea6:	466a      	mov	r2, sp
     ea8:	cb23      	ldmia	r3!, {r0, r1, r5}
     eaa:	c223      	stmia	r2!, {r0, r1, r5}
     eac:	1c20      	adds	r0, r4, #0
     eae:	9920      	ldr	r1, [sp, #128]	; 0x80
     eb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
     eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
     eb4:	4d26      	ldr	r5, [pc, #152]	; (f50 <_Z8sumClock11structClockS_+0x17c>)
     eb6:	47a8      	blx	r5
     eb8:	e033      	b.n	f22 <_Z8sumClock11structClockS_+0x14e>
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
     eba:	ab05      	add	r3, sp, #20
     ebc:	7a1b      	ldrb	r3, [r3, #8]
     ebe:	2b00      	cmp	r3, #0
     ec0:	d12f      	bne.n	f22 <_Z8sumClock11structClockS_+0x14e>
     ec2:	e7a7      	b.n	e14 <_Z8sumClock11structClockS_+0x40>
							clock1.sign=true;
     ec4:	ab05      	add	r3, sp, #20
     ec6:	2101      	movs	r1, #1
     ec8:	7219      	strb	r1, [r3, #8]
							clock2.sign=true;
     eca:	aa20      	add	r2, sp, #128	; 0x80
     ecc:	7211      	strb	r1, [r2, #8]
     ece:	aa0e      	add	r2, sp, #56	; 0x38
     ed0:	1c10      	adds	r0, r2, #0
     ed2:	cbe0      	ldmia	r3!, {r5, r6, r7}
     ed4:	c0e0      	stmia	r0!, {r5, r6, r7}
     ed6:	ab11      	add	r3, sp, #68	; 0x44
     ed8:	469c      	mov	ip, r3
     eda:	1c18      	adds	r0, r3, #0
     edc:	ad20      	add	r5, sp, #128	; 0x80
     ede:	cdc8      	ldmia	r5!, {r3, r6, r7}
     ee0:	c0c8      	stmia	r0!, {r3, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
     ee2:	ad17      	add	r5, sp, #92	; 0x5c
     ee4:	2700      	movs	r7, #0
     ee6:	9717      	str	r7, [sp, #92]	; 0x5c
     ee8:	9718      	str	r7, [sp, #96]	; 0x60
     eea:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
     eec:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ret.second=clock1.second+clock2.second;
     eee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     ef0:	9811      	ldr	r0, [sp, #68]	; 0x44
     ef2:	1882      	adds	r2, r0, r2
     ef4:	9217      	str	r2, [sp, #92]	; 0x5c
	halfmillis=halfmillis+clock2.halfmillis;
     ef6:	4663      	mov	r3, ip
     ef8:	685e      	ldr	r6, [r3, #4]
     efa:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
     efc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     efe:	4698      	mov	r8, r3
     f00:	1c30      	adds	r0, r6, #0
     f02:	21fa      	movs	r1, #250	; 0xfa
     f04:	01c9      	lsls	r1, r1, #7
     f06:	4b10      	ldr	r3, [pc, #64]	; (f48 <_Z8sumClock11structClockS_+0x174>)
     f08:	4798      	blx	r3
     f0a:	4440      	add	r0, r8
     f0c:	9017      	str	r0, [sp, #92]	; 0x5c
	ret.halfmillis=halfmillis%RTC_FREQ;
     f0e:	1c30      	adds	r0, r6, #0
     f10:	21fa      	movs	r1, #250	; 0xfa
     f12:	01c9      	lsls	r1, r1, #7
     f14:	4b0d      	ldr	r3, [pc, #52]	; (f4c <_Z8sumClock11structClockS_+0x178>)
     f16:	4798      	blx	r3
     f18:	6069      	str	r1, [r5, #4]
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
							clock1.sign=true;
							clock2.sign=true;
							ret=sumClockPos(clock1,clock2);
     f1a:	1c23      	adds	r3, r4, #0
     f1c:	cd07      	ldmia	r5!, {r0, r1, r2}
     f1e:	c307      	stmia	r3!, {r0, r1, r2}
							ret.sign=false;
     f20:	7227      	strb	r7, [r4, #8]
						}
					}
		}
		
	}
	ret.second+=ret.halfmillis/RTC_FREQ;
     f22:	6860      	ldr	r0, [r4, #4]
     f24:	6825      	ldr	r5, [r4, #0]
     f26:	21fa      	movs	r1, #250	; 0xfa
     f28:	01c9      	lsls	r1, r1, #7
     f2a:	4b07      	ldr	r3, [pc, #28]	; (f48 <_Z8sumClock11structClockS_+0x174>)
     f2c:	4798      	blx	r3
     f2e:	1945      	adds	r5, r0, r5
     f30:	6025      	str	r5, [r4, #0]
	ret.halfmillis=ret.halfmillis%RTC_FREQ;
     f32:	6860      	ldr	r0, [r4, #4]
     f34:	21fa      	movs	r1, #250	; 0xfa
     f36:	01c9      	lsls	r1, r1, #7
     f38:	4b04      	ldr	r3, [pc, #16]	; (f4c <_Z8sumClock11structClockS_+0x178>)
     f3a:	4798      	blx	r3
     f3c:	6061      	str	r1, [r4, #4]
	return ret;
}
     f3e:	1c20      	adds	r0, r4, #0
     f40:	b01a      	add	sp, #104	; 0x68
     f42:	bc04      	pop	{r2}
     f44:	4690      	mov	r8, r2
     f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f48:	00007105 	.word	0x00007105
     f4c:	00007211 	.word	0x00007211
     f50:	00000cd1 	.word	0x00000cd1

00000f54 <_Z4pgcdii>:
	}
	
}


int pgcd( int a ,int b){
     f54:	b510      	push	{r4, lr}
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
     f56:	1c0b      	adds	r3, r1, #0
     f58:	4343      	muls	r3, r0
     f5a:	2b00      	cmp	r3, #0
     f5c:	d013      	beq.n	f86 <_Z4pgcdii+0x32>
     f5e:	2300      	movs	r3, #0
     f60:	24fa      	movs	r4, #250	; 0xfa
     f62:	00a4      	lsls	r4, r4, #2
		if (a>b) {
     f64:	4288      	cmp	r0, r1
     f66:	dd01      	ble.n	f6c <_Z4pgcdii+0x18>
			a = a - b ;
     f68:	1a40      	subs	r0, r0, r1
     f6a:	e000      	b.n	f6e <_Z4pgcdii+0x1a>
		}
		else{
			b = b - a ;
     f6c:	1a09      	subs	r1, r1, r0
		}
		i++;
     f6e:	3301      	adds	r3, #1
}


int pgcd( int a ,int b){
	int i=0;
	while ((!(a*b == 0))&&(i<1000)) {
     f70:	1c0a      	adds	r2, r1, #0
     f72:	4342      	muls	r2, r0
     f74:	2a00      	cmp	r2, #0
     f76:	d003      	beq.n	f80 <_Z4pgcdii+0x2c>
     f78:	42a3      	cmp	r3, r4
     f7a:	d1f3      	bne.n	f64 <_Z4pgcdii+0x10>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
     f7c:	2101      	movs	r1, #1
     f7e:	e007      	b.n	f90 <_Z4pgcdii+0x3c>
		else{
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
     f80:	4a04      	ldr	r2, [pc, #16]	; (f94 <_Z4pgcdii+0x40>)
     f82:	4293      	cmp	r3, r2
     f84:	dc03      	bgt.n	f8e <_Z4pgcdii+0x3a>
		return 1;
	}
	if(a==0){
     f86:	2800      	cmp	r0, #0
     f88:	d002      	beq.n	f90 <_Z4pgcdii+0x3c>
     f8a:	1c01      	adds	r1, r0, #0
     f8c:	e000      	b.n	f90 <_Z4pgcdii+0x3c>
			b = b - a ;
		}
		i++;
	}
	if(i>=1000){
		return 1;
     f8e:	2101      	movs	r1, #1
	}
	else{
		return a;
	}
	return a;
}
     f90:	1c08      	adds	r0, r1, #0
     f92:	bd10      	pop	{r4, pc}
     f94:	000003e7 	.word	0x000003e7

00000f98 <_Z24resetSofftwareCorrectionv>:

void resetSofftwareCorrection(void){

		sumOffset.second=0;
     f98:	4a05      	ldr	r2, [pc, #20]	; (fb0 <_Z24resetSofftwareCorrectionv+0x18>)
     f9a:	2300      	movs	r3, #0
     f9c:	6013      	str	r3, [r2, #0]
		sumOffset.halfmillis=0;
     f9e:	6053      	str	r3, [r2, #4]
		timeProt.correction.nbCorrection=0;
     fa0:	4a04      	ldr	r2, [pc, #16]	; (fb4 <_Z24resetSofftwareCorrectionv+0x1c>)
     fa2:	65d3      	str	r3, [r2, #92]	; 0x5c
		timeProt.correction.sumTime.second=0;
     fa4:	67d3      	str	r3, [r2, #124]	; 0x7c
		timeProt.correction.sumTime.halfmillis=0;
     fa6:	2180      	movs	r1, #128	; 0x80
     fa8:	5053      	str	r3, [r2, r1]
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
     faa:	6713      	str	r3, [r2, #112]	; 0x70
}
     fac:	4770      	bx	lr
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	200003c8 	.word	0x200003c8
     fb4:	2000049c 	.word	0x2000049c

00000fb8 <_Z17sofwareCorrectionv>:
		
	}
	
}

void sofwareCorrection(){
     fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fba:	465f      	mov	r7, fp
     fbc:	4656      	mov	r6, sl
     fbe:	464d      	mov	r5, r9
     fc0:	4644      	mov	r4, r8
     fc2:	b4f0      	push	{r4, r5, r6, r7}
     fc4:	b091      	sub	sp, #68	; 0x44
	if(timeProt.correction.nbCorrection!=0){
     fc6:	4bbe      	ldr	r3, [pc, #760]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
     fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     fca:	2b00      	cmp	r3, #0
     fcc:	d100      	bne.n	fd0 <_Z17sofwareCorrectionv+0x18>
     fce:	e170      	b.n	12b2 <_Z17sofwareCorrectionv+0x2fa>
	//	printf("nb corr : %d",timeProt.correction.nbCorrection);
		sendHMI("	Software Correction ");
     fd0:	48bc      	ldr	r0, [pc, #752]	; (12c4 <_Z17sofwareCorrectionv+0x30c>)
     fd2:	4bbd      	ldr	r3, [pc, #756]	; (12c8 <_Z17sofwareCorrectionv+0x310>)
     fd4:	4798      	blx	r3
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
     fd6:	49ba      	ldr	r1, [pc, #744]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
     fd8:	23d9      	movs	r3, #217	; 0xd9
     fda:	5cc8      	ldrb	r0, [r1, r3]
			

		sumOffsetl=sumOffset;
     fdc:	ab0d      	add	r3, sp, #52	; 0x34
     fde:	4abb      	ldr	r2, [pc, #748]	; (12cc <_Z17sofwareCorrectionv+0x314>)
     fe0:	1c1c      	adds	r4, r3, #0
     fe2:	cae0      	ldmia	r2!, {r5, r6, r7}
     fe4:	c4e0      	stmia	r4!, {r5, r6, r7}

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
     fe6:	2260      	movs	r2, #96	; 0x60
     fe8:	5c8a      	ldrb	r2, [r1, r2]
     fea:	7a19      	ldrb	r1, [r3, #8]
     fec:	b2d3      	uxtb	r3, r2
		//interval of time
		Clock averageTime;
		Clock averageOffset;
		Clock sumOffsetl;
		float fcorr=0;
		int indice=timeProt.correction.indiceFull;
     fee:	4680      	mov	r8, r0

		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
     ff0:	428b      	cmp	r3, r1
     ff2:	d005      	beq.n	1000 <_Z17sofwareCorrectionv+0x48>
			indice=0;
			timeProt.correction.indiceMoySoftCor=0;
     ff4:	2100      	movs	r1, #0
     ff6:	23d8      	movs	r3, #216	; 0xd8
     ff8:	4ab1      	ldr	r2, [pc, #708]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
     ffa:	54d1      	strb	r1, [r2, r3]
		sumOffsetl=sumOffset;

		
		//sign change
		if(timeProt.correction.valueCor!=sumOffsetl.sign){//if the sum of the offset change of sign error ze reset the software corection 
			indice=0;
     ffc:	2300      	movs	r3, #0
     ffe:	4698      	mov	r8, r3
			timeProt.correction.indiceMoySoftCor=0;
		
		}
		
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    1000:	4faf      	ldr	r7, [pc, #700]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    1002:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
    1004:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1006:	4eb2      	ldr	r6, [pc, #712]	; (12d0 <_Z17sofwareCorrectionv+0x318>)
    1008:	47b0      	blx	r6
    100a:	1c05      	adds	r5, r0, #0
    100c:	1c20      	adds	r0, r4, #0
    100e:	47b0      	blx	r6
    1010:	1c01      	adds	r1, r0, #0
    1012:	1c28      	adds	r0, r5, #0
    1014:	4baf      	ldr	r3, [pc, #700]	; (12d4 <_Z17sofwareCorrectionv+0x31c>)
    1016:	4798      	blx	r3
    1018:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    101a:	4baf      	ldr	r3, [pc, #700]	; (12d8 <_Z17sofwareCorrectionv+0x320>)
    101c:	4798      	blx	r3
    101e:	1c06      	adds	r6, r0, #0
				//calcul average time
				//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
				
		averageTime.second=secondi;
    1020:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    1022:	2380      	movs	r3, #128	; 0x80
    1024:	58f8      	ldr	r0, [r7, r3]
    1026:	4fad      	ldr	r7, [pc, #692]	; (12dc <_Z17sofwareCorrectionv+0x324>)
    1028:	1c21      	adds	r1, r4, #0
    102a:	47b8      	blx	r7
    102c:	4bac      	ldr	r3, [pc, #688]	; (12e0 <_Z17sofwareCorrectionv+0x328>)
    102e:	4798      	blx	r3
    1030:	9002      	str	r0, [sp, #8]
    1032:	9103      	str	r1, [sp, #12]
    1034:	1c30      	adds	r0, r6, #0
    1036:	4bab      	ldr	r3, [pc, #684]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    1038:	4798      	blx	r3
    103a:	1c01      	adds	r1, r0, #0
    103c:	1c28      	adds	r0, r5, #0
    103e:	4baa      	ldr	r3, [pc, #680]	; (12e8 <_Z17sofwareCorrectionv+0x330>)
    1040:	4798      	blx	r3
    1042:	4baa      	ldr	r3, [pc, #680]	; (12ec <_Z17sofwareCorrectionv+0x334>)
    1044:	4798      	blx	r3
    1046:	2200      	movs	r2, #0
    1048:	4ba9      	ldr	r3, [pc, #676]	; (12f0 <_Z17sofwareCorrectionv+0x338>)
    104a:	4daa      	ldr	r5, [pc, #680]	; (12f4 <_Z17sofwareCorrectionv+0x33c>)
    104c:	47a8      	blx	r5
    104e:	1c02      	adds	r2, r0, #0
    1050:	1c0b      	adds	r3, r1, #0
    1052:	9802      	ldr	r0, [sp, #8]
    1054:	9903      	ldr	r1, [sp, #12]
    1056:	4da8      	ldr	r5, [pc, #672]	; (12f8 <_Z17sofwareCorrectionv+0x340>)
    1058:	47a8      	blx	r5
    105a:	4ba8      	ldr	r3, [pc, #672]	; (12fc <_Z17sofwareCorrectionv+0x344>)
    105c:	4798      	blx	r3
    105e:	9008      	str	r0, [sp, #32]
		//unsigned long int averageTimeli=(averageTime.second*2000)+(averageTime.halfmillis);
		//calcul average offset
		averageOffset.second=sumOffset.second/timeProt.correction.nbCorrection;
    1060:	4e9a      	ldr	r6, [pc, #616]	; (12cc <_Z17sofwareCorrectionv+0x314>)
    1062:	6830      	ldr	r0, [r6, #0]
    1064:	1c21      	adds	r1, r4, #0
    1066:	47b8      	blx	r7
    1068:	ad0a      	add	r5, sp, #40	; 0x28
    106a:	900a      	str	r0, [sp, #40]	; 0x28
		averageOffset.halfmillis=sumOffset.halfmillis/timeProt.correction.nbCorrection;
    106c:	6870      	ldr	r0, [r6, #4]
    106e:	1c21      	adds	r1, r4, #0
    1070:	47b8      	blx	r7
    1072:	6068      	str	r0, [r5, #4]
		averageOffset.sign=sumOffset.sign;
    1074:	7a33      	ldrb	r3, [r6, #8]
    1076:	b2db      	uxtb	r3, r3
    1078:	722b      	strb	r3, [r5, #8]
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    107a:	9807      	ldr	r0, [sp, #28]
    107c:	9a08      	ldr	r2, [sp, #32]
		//offset in hms
		long int offset=averageOffset.second*RTC_FREQ+averageOffset.halfmillis;
    107e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1080:	6869      	ldr	r1, [r5, #4]
    1082:	23fa      	movs	r3, #250	; 0xfa
    1084:	01db      	lsls	r3, r3, #7
    1086:	4363      	muls	r3, r4
    1088:	185f      	adds	r7, r3, r1
		if (averageOffset.sign==false)
    108a:	7a2b      	ldrb	r3, [r5, #8]
    108c:	2b00      	cmp	r3, #0
    108e:	d100      	bne.n	1092 <_Z17sofwareCorrectionv+0xda>
		{
			offset=-offset;
    1090:	427f      	negs	r7, r7
		float correctionTime=0.0;
		int corr;
		int corrTime;
		int nbwait;
		
		corr=valueCor;
    1092:	4b9b      	ldr	r3, [pc, #620]	; (1300 <_Z17sofwareCorrectionv+0x348>)
    1094:	681b      	ldr	r3, [r3, #0]
		nbwait=timeCorrection;
    1096:	4b9b      	ldr	r3, [pc, #620]	; (1304 <_Z17sofwareCorrectionv+0x34c>)
    1098:	681c      	ldr	r4, [r3, #0]
		corrTime=nbwait;		

		if(offset!=0){
    109a:	2f00      	cmp	r7, #0
    109c:	d100      	bne.n	10a0 <_Z17sofwareCorrectionv+0xe8>
    109e:	e0f4      	b.n	128a <_Z17sofwareCorrectionv+0x2d2>
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    10a0:	4b99      	ldr	r3, [pc, #612]	; (1308 <_Z17sofwareCorrectionv+0x350>)
    10a2:	429c      	cmp	r4, r3
    10a4:	dc27      	bgt.n	10f6 <_Z17sofwareCorrectionv+0x13e>
		printfClock(averageTime);
		printf("averageOffseet: ");
		printfClock(averageOffset);*/
		
		//calcul of average time in hms
		unsigned long int diffhms=averageTime.second*RTC_FREQ+averageTime.halfmillis;
    10a6:	23fa      	movs	r3, #250	; 0xfa
    10a8:	01db      	lsls	r3, r3, #7
    10aa:	4358      	muls	r0, r3
    10ac:	1880      	adds	r0, r0, r2
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    10ae:	4b88      	ldr	r3, [pc, #544]	; (12d0 <_Z17sofwareCorrectionv+0x318>)
    10b0:	4798      	blx	r3
    10b2:	9002      	str	r0, [sp, #8]
    10b4:	4e8b      	ldr	r6, [pc, #556]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    10b6:	4d95      	ldr	r5, [pc, #596]	; (130c <_Z17sofwareCorrectionv+0x354>)
    10b8:	4b86      	ldr	r3, [pc, #536]	; (12d4 <_Z17sofwareCorrectionv+0x31c>)
    10ba:	469a      	mov	sl, r3
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    10bc:	23fa      	movs	r3, #250	; 0xfa
    10be:	009b      	lsls	r3, r3, #2
    10c0:	4699      	mov	r9, r3
    10c2:	4b93      	ldr	r3, [pc, #588]	; (1310 <_Z17sofwareCorrectionv+0x358>)
    10c4:	469b      	mov	fp, r3
    10c6:	9704      	str	r7, [sp, #16]
						fcorr=(float)((float)VALUE_TIMER*nbwait*offset*1.0)/(diffhms);
    10c8:	1c20      	adds	r0, r4, #0
    10ca:	47b0      	blx	r6
    10cc:	4991      	ldr	r1, [pc, #580]	; (1314 <_Z17sofwareCorrectionv+0x35c>)
    10ce:	47a8      	blx	r5
    10d0:	1c07      	adds	r7, r0, #0
    10d2:	9804      	ldr	r0, [sp, #16]
    10d4:	47b0      	blx	r6
    10d6:	1c01      	adds	r1, r0, #0
    10d8:	1c38      	adds	r0, r7, #0
    10da:	47a8      	blx	r5
    10dc:	9902      	ldr	r1, [sp, #8]
    10de:	47d0      	blx	sl
    10e0:	1c07      	adds	r7, r0, #0
						nbwait++;
    10e2:	3401      	adds	r4, #1
					//printf("correction need %d(%d)\r\n",(int)fcorr,nbwait);	
					if(fcorr<0){
						fcorr=-fcorr;
					}
					
					while((nbwait<1000)&&(fcorr<0.5)){
    10e4:	454c      	cmp	r4, r9
    10e6:	d009      	beq.n	10fc <_Z17sofwareCorrectionv+0x144>
    10e8:	21fc      	movs	r1, #252	; 0xfc
    10ea:	0589      	lsls	r1, r1, #22
    10ec:	47d8      	blx	fp
    10ee:	2800      	cmp	r0, #0
    10f0:	d1ea      	bne.n	10c8 <_Z17sofwareCorrectionv+0x110>
    10f2:	1c3a      	adds	r2, r7, #0
    10f4:	e003      	b.n	10fe <_Z17sofwareCorrectionv+0x146>
    10f6:	2300      	movs	r3, #0
    10f8:	1c1a      	adds	r2, r3, #0
    10fa:	e000      	b.n	10fe <_Z17sofwareCorrectionv+0x146>
    10fc:	1c02      	adds	r2, r0, #0
					//fcorr=fcorr*RTC_FREQ;	
					

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
    10fe:	4e70      	ldr	r6, [pc, #448]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    1100:	23d8      	movs	r3, #216	; 0xd8
    1102:	5cf5      	ldrb	r5, [r6, r3]
    1104:	1c2b      	adds	r3, r5, #0
    1106:	3310      	adds	r3, #16
    1108:	00db      	lsls	r3, r3, #3
    110a:	18f3      	adds	r3, r6, r3
    110c:	609a      	str	r2, [r3, #8]
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
    110e:	00eb      	lsls	r3, r5, #3
    1110:	18f6      	adds	r6, r6, r3
    1112:	3684      	adds	r6, #132	; 0x84
    1114:	1c20      	adds	r0, r4, #0
    1116:	4b73      	ldr	r3, [pc, #460]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    1118:	4798      	blx	r3
    111a:	60b0      	str	r0, [r6, #8]
					timeProt.correction.indiceMoySoftCor++;
    111c:	3501      	adds	r5, #1
    111e:	b2ed      	uxtb	r5, r5
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
    1120:	2209      	movs	r2, #9
    1122:	4643      	mov	r3, r8
    1124:	0fd9      	lsrs	r1, r3, #31
    1126:	17d3      	asrs	r3, r2, #31
    1128:	4640      	mov	r0, r8
    112a:	4282      	cmp	r2, r0
    112c:	414b      	adcs	r3, r1
    112e:	4498      	add	r8, r3
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
    1130:	45a8      	cmp	r8, r5
    1132:	db03      	blt.n	113c <_Z17sofwareCorrectionv+0x184>

				//	printf("correction need %d/10(%d)\r\n",(int)fcorr*10,nbwait);			
					int i;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][0]=fcorr;
					timeProt.correction.moySoftCor[timeProt.correction.indiceMoySoftCor][1]=nbwait;
					timeProt.correction.indiceMoySoftCor++;
    1134:	23d8      	movs	r3, #216	; 0xd8
    1136:	4a62      	ldr	r2, [pc, #392]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    1138:	54d5      	strb	r5, [r2, r3]
    113a:	e003      	b.n	1144 <_Z17sofwareCorrectionv+0x18c>
					if(indice<MOYCORLENGTH){//if ze have enougth space to sqve the value
						indice++;
					}
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
    113c:	2100      	movs	r1, #0
    113e:	23d8      	movs	r3, #216	; 0xd8
    1140:	4a5f      	ldr	r2, [pc, #380]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    1142:	54d1      	strb	r1, [r2, r3]
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    1144:	4643      	mov	r3, r8
    1146:	2b00      	cmp	r3, #0
    1148:	dd18      	ble.n	117c <_Z17sofwareCorrectionv+0x1c4>
    114a:	4a5d      	ldr	r2, [pc, #372]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    114c:	1c16      	adds	r6, r2, #0
    114e:	3688      	adds	r6, #136	; 0x88
    1150:	3311      	adds	r3, #17
    1152:	00db      	lsls	r3, r3, #3
    1154:	18d5      	adds	r5, r2, r3
    1156:	2400      	movs	r4, #0
    1158:	9402      	str	r4, [sp, #8]
						//	printf("i : %d, value : %d\r\n",i,(int)timeProt.correction.moySoftCor[i]);
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
    115a:	4f6f      	ldr	r7, [pc, #444]	; (1318 <_Z17sofwareCorrectionv+0x360>)
    115c:	1c2b      	adds	r3, r5, #0
    115e:	1c25      	adds	r5, r4, #0
    1160:	1c1c      	adds	r4, r3, #0
    1162:	9802      	ldr	r0, [sp, #8]
    1164:	6831      	ldr	r1, [r6, #0]
    1166:	47b8      	blx	r7
    1168:	9002      	str	r0, [sp, #8]
							correctionTime+=timeProt.correction.moySoftCor[i][1];
    116a:	1c28      	adds	r0, r5, #0
    116c:	6871      	ldr	r1, [r6, #4]
    116e:	47b8      	blx	r7
    1170:	1c05      	adds	r5, r0, #0
    1172:	3608      	adds	r6, #8
					if(timeProt.correction.indiceMoySoftCor>indice){
						timeProt.correction.indiceMoySoftCor=0;
					}
					
					
					for(i=0;i<indice;i++){//go to the maximum value save
    1174:	42a6      	cmp	r6, r4
    1176:	d1f4      	bne.n	1162 <_Z17sofwareCorrectionv+0x1aa>
    1178:	1c04      	adds	r4, r0, #0
    117a:	e001      	b.n	1180 <_Z17sofwareCorrectionv+0x1c8>
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
		float correctionTime=0.0;
    117c:	2400      	movs	r4, #0
		{
			offset=-offset;
		}
		//printf("offset : %lu\r\n",offset);
		//printf("diffhms : %lu\r\n",diffhms);
		float correctionSoft=0.0;
    117e:	9402      	str	r4, [sp, #8]
							correctionSoft+=timeProt.correction.moySoftCor[i][0];
							correctionTime+=timeProt.correction.moySoftCor[i][1];
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
    1180:	4640      	mov	r0, r8
    1182:	4b66      	ldr	r3, [pc, #408]	; (131c <_Z17sofwareCorrectionv+0x364>)
    1184:	4798      	blx	r3
    1186:	9004      	str	r0, [sp, #16]
    1188:	9105      	str	r1, [sp, #20]
    118a:	4f58      	ldr	r7, [pc, #352]	; (12ec <_Z17sofwareCorrectionv+0x334>)
    118c:	9802      	ldr	r0, [sp, #8]
    118e:	47b8      	blx	r7
    1190:	4e63      	ldr	r6, [pc, #396]	; (1320 <_Z17sofwareCorrectionv+0x368>)
    1192:	9a04      	ldr	r2, [sp, #16]
    1194:	9b05      	ldr	r3, [sp, #20]
    1196:	47b0      	blx	r6
    1198:	4d62      	ldr	r5, [pc, #392]	; (1324 <_Z17sofwareCorrectionv+0x36c>)
    119a:	47a8      	blx	r5
    119c:	9002      	str	r0, [sp, #8]
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
    119e:	1c20      	adds	r0, r4, #0
    11a0:	47b8      	blx	r7
    11a2:	9a04      	ldr	r2, [sp, #16]
    11a4:	9b05      	ldr	r3, [sp, #20]
    11a6:	47b0      	blx	r6
    11a8:	47a8      	blx	r5
    11aa:	9004      	str	r0, [sp, #16]
					corr=(int)correctionSoft;//cast to int
					corrTime=(int)correctionTime;//cast to int
    11ac:	4a4a      	ldr	r2, [pc, #296]	; (12d8 <_Z17sofwareCorrectionv+0x320>)
    11ae:	4693      	mov	fp, r2
    11b0:	4790      	blx	r2
    11b2:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    11b4:	b672      	cpsid	i
    11b6:	f3bf 8f5f 	dmb	sy
					Disable_global_interrupt();
    11ba:	4d5b      	ldr	r5, [pc, #364]	; (1328 <_Z17sofwareCorrectionv+0x370>)
    11bc:	2300      	movs	r3, #0
    11be:	702b      	strb	r3, [r5, #0]
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    11c0:	4f4f      	ldr	r7, [pc, #316]	; (1300 <_Z17sofwareCorrectionv+0x348>)
    11c2:	683e      	ldr	r6, [r7, #0]
					}
				//	printf("sumCorr : %d",(int)correctionSoft);
					
					correctionSoft=(float)(1.0*correctionSoft)/(indice*1.0);//calcul the average value of the software correction 
					correctionTime=(float)(1.0*correctionTime)/(indice*1.0);//calcul the average value of the software correction 
					corr=(int)correctionSoft;//cast to int
    11c4:	9802      	ldr	r0, [sp, #8]
    11c6:	47d8      	blx	fp
					corrTime=(int)correctionTime;//cast to int
					Disable_global_interrupt();
					corr=valueCor+Coef_Software_Correction*(corr-valueCor);
    11c8:	1b80      	subs	r0, r0, r6
    11ca:	683f      	ldr	r7, [r7, #0]
    11cc:	19c7      	adds	r7, r0, r7
					Enable_global_interrupt();
    11ce:	2301      	movs	r3, #1
    11d0:	702b      	strb	r3, [r5, #0]
    11d2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    11d6:	b662      	cpsie	i
					if(corr<0){
    11d8:	2f00      	cmp	r7, #0
    11da:	da0e      	bge.n	11fa <_Z17sofwareCorrectionv+0x242>
							if(correctionSoft-corr<-0.5){//calculate int the most close to the real value
    11dc:	1c38      	adds	r0, r7, #0
    11de:	4b41      	ldr	r3, [pc, #260]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    11e0:	4798      	blx	r3
    11e2:	1c01      	adds	r1, r0, #0
    11e4:	9802      	ldr	r0, [sp, #8]
    11e6:	4b40      	ldr	r3, [pc, #256]	; (12e8 <_Z17sofwareCorrectionv+0x330>)
    11e8:	4798      	blx	r3
    11ea:	21bf      	movs	r1, #191	; 0xbf
    11ec:	0609      	lsls	r1, r1, #24
    11ee:	4b48      	ldr	r3, [pc, #288]	; (1310 <_Z17sofwareCorrectionv+0x358>)
    11f0:	4798      	blx	r3
								corr--;
    11f2:	1e43      	subs	r3, r0, #1
    11f4:	4198      	sbcs	r0, r3
    11f6:	1a3f      	subs	r7, r7, r0
    11f8:	e00d      	b.n	1216 <_Z17sofwareCorrectionv+0x25e>
							}
					//		printf("corr<0");
					}
					else{
							if(correctionSoft-corr>0.5){//calculate int the most close to the real value
    11fa:	1c38      	adds	r0, r7, #0
    11fc:	4b39      	ldr	r3, [pc, #228]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    11fe:	4798      	blx	r3
    1200:	1c01      	adds	r1, r0, #0
    1202:	9802      	ldr	r0, [sp, #8]
    1204:	4b38      	ldr	r3, [pc, #224]	; (12e8 <_Z17sofwareCorrectionv+0x330>)
    1206:	4798      	blx	r3
    1208:	21fc      	movs	r1, #252	; 0xfc
    120a:	0589      	lsls	r1, r1, #22
    120c:	4b47      	ldr	r3, [pc, #284]	; (132c <_Z17sofwareCorrectionv+0x374>)
    120e:	4798      	blx	r3
								corr++;
    1210:	1e43      	subs	r3, r0, #1
    1212:	4198      	sbcs	r0, r3
    1214:	183f      	adds	r7, r7, r0
							}
					//		printf("corr>0");
					}
					
					if(correctionTime-corrTime>0.5){//calculate int the most close to the real value
    1216:	1c20      	adds	r0, r4, #0
    1218:	4b32      	ldr	r3, [pc, #200]	; (12e4 <_Z17sofwareCorrectionv+0x32c>)
    121a:	4798      	blx	r3
    121c:	1c01      	adds	r1, r0, #0
    121e:	9804      	ldr	r0, [sp, #16]
    1220:	4b31      	ldr	r3, [pc, #196]	; (12e8 <_Z17sofwareCorrectionv+0x330>)
    1222:	4798      	blx	r3
    1224:	21fc      	movs	r1, #252	; 0xfc
    1226:	0589      	lsls	r1, r1, #22
    1228:	4b40      	ldr	r3, [pc, #256]	; (132c <_Z17sofwareCorrectionv+0x374>)
    122a:	4798      	blx	r3
						corrTime++;
    122c:	1e43      	subs	r3, r0, #1
    122e:	4198      	sbcs	r0, r3
    1230:	1824      	adds	r4, r4, r0
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
    1232:	1c20      	adds	r0, r4, #0
    1234:	1c39      	adds	r1, r7, #0
    1236:	4b3e      	ldr	r3, [pc, #248]	; (1330 <_Z17sofwareCorrectionv+0x378>)
    1238:	4798      	blx	r3
    123a:	1c03      	adds	r3, r0, #0
					corrTime=corrTime/pgcdi;
    123c:	4a3d      	ldr	r2, [pc, #244]	; (1334 <_Z17sofwareCorrectionv+0x37c>)
    123e:	4692      	mov	sl, r2
    1240:	1c20      	adds	r0, r4, #0
    1242:	9302      	str	r3, [sp, #8]
    1244:	1c19      	adds	r1, r3, #0
    1246:	4790      	blx	r2
    1248:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    124a:	b672      	cpsid	i
    124c:	f3bf 8f5f 	dmb	sy
					corr=corr/pgcdi;
					Disable_global_interrupt();
    1250:	4a35      	ldr	r2, [pc, #212]	; (1328 <_Z17sofwareCorrectionv+0x370>)
    1252:	4691      	mov	r9, r2
    1254:	2300      	movs	r3, #0
    1256:	7013      	strb	r3, [r2, #0]
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    1258:	4d29      	ldr	r5, [pc, #164]	; (1300 <_Z17sofwareCorrectionv+0x348>)
    125a:	682a      	ldr	r2, [r5, #0]
    125c:	4693      	mov	fp, r2
    125e:	682e      	ldr	r6, [r5, #0]
					}
					//	printf("moy : %d",(int)correctionSoft*1000);
					//	printf("corr: %u",corr);
					int pgcdi =pgcd(corrTime,corr);
					corrTime=corrTime/pgcdi;
					corr=corr/pgcdi;
    1260:	1c38      	adds	r0, r7, #0
    1262:	9902      	ldr	r1, [sp, #8]
    1264:	47d0      	blx	sl
					Disable_global_interrupt();
					
					valueCor=valueCor+Coef_Software_Correction*(corr-valueCor);
    1266:	465b      	mov	r3, fp
    1268:	1ac0      	subs	r0, r0, r3
    126a:	1986      	adds	r6, r0, r6
    126c:	602e      	str	r6, [r5, #0]
					timeCorrection=corrTime;
    126e:	4b25      	ldr	r3, [pc, #148]	; (1304 <_Z17sofwareCorrectionv+0x34c>)
    1270:	601c      	str	r4, [r3, #0]
					timeCorr=corrTime;
    1272:	4b31      	ldr	r3, [pc, #196]	; (1338 <_Z17sofwareCorrectionv+0x380>)
    1274:	601c      	str	r4, [r3, #0]
					Enable_global_interrupt();
    1276:	2301      	movs	r3, #1
    1278:	464a      	mov	r2, r9
    127a:	7013      	strb	r3, [r2, #0]
    127c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1280:	b662      	cpsie	i
						
					
					timeProt.correction.indiceFull=indice;
    1282:	33d8      	adds	r3, #216	; 0xd8
    1284:	4a0e      	ldr	r2, [pc, #56]	; (12c0 <_Z17sofwareCorrectionv+0x308>)
    1286:	4641      	mov	r1, r8
    1288:	54d1      	strb	r1, [r2, r3]
		}
			
		resetSofftwareCorrection();
    128a:	4b2c      	ldr	r3, [pc, #176]	; (133c <_Z17sofwareCorrectionv+0x384>)
    128c:	4798      	blx	r3
		sprintf(messageHMICor,"		update time corr: %d(%d) sign : %d with %d sample",(int)valueCor,corrTime,averageOffset.sign,indice);
    128e:	4b1c      	ldr	r3, [pc, #112]	; (1300 <_Z17sofwareCorrectionv+0x348>)
    1290:	681a      	ldr	r2, [r3, #0]
    1292:	ab0a      	add	r3, sp, #40	; 0x28
    1294:	7a1b      	ldrb	r3, [r3, #8]
    1296:	4d2a      	ldr	r5, [pc, #168]	; (1340 <_Z17sofwareCorrectionv+0x388>)
    1298:	9300      	str	r3, [sp, #0]
    129a:	4643      	mov	r3, r8
    129c:	9301      	str	r3, [sp, #4]
    129e:	1c28      	adds	r0, r5, #0
    12a0:	4928      	ldr	r1, [pc, #160]	; (1344 <_Z17sofwareCorrectionv+0x38c>)
    12a2:	1c23      	adds	r3, r4, #0
    12a4:	4c28      	ldr	r4, [pc, #160]	; (1348 <_Z17sofwareCorrectionv+0x390>)
    12a6:	47a0      	blx	r4
		sendHMI(messageHMICor);
    12a8:	1c28      	adds	r0, r5, #0
    12aa:	4c07      	ldr	r4, [pc, #28]	; (12c8 <_Z17sofwareCorrectionv+0x310>)
    12ac:	47a0      	blx	r4
		sendHMI("	end Software correction");
    12ae:	4827      	ldr	r0, [pc, #156]	; (134c <_Z17sofwareCorrectionv+0x394>)
    12b0:	47a0      	blx	r4
	}
	
}
    12b2:	b011      	add	sp, #68	; 0x44
    12b4:	bc3c      	pop	{r2, r3, r4, r5}
    12b6:	4690      	mov	r8, r2
    12b8:	4699      	mov	r9, r3
    12ba:	46a2      	mov	sl, r4
    12bc:	46ab      	mov	fp, r5
    12be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c0:	2000049c 	.word	0x2000049c
    12c4:	0000f92c 	.word	0x0000f92c
    12c8:	000005b1 	.word	0x000005b1
    12cc:	200003c8 	.word	0x200003c8
    12d0:	00008295 	.word	0x00008295
    12d4:	00007881 	.word	0x00007881
    12d8:	000081c5 	.word	0x000081c5
    12dc:	00007105 	.word	0x00007105
    12e0:	00009efd 	.word	0x00009efd
    12e4:	00008205 	.word	0x00008205
    12e8:	00007ec9 	.word	0x00007ec9
    12ec:	00009f61 	.word	0x00009f61
    12f0:	40df4000 	.word	0x40df4000
    12f4:	000091f1 	.word	0x000091f1
    12f8:	00008325 	.word	0x00008325
    12fc:	0000754d 	.word	0x0000754d
    1300:	200002b8 	.word	0x200002b8
    1304:	20000290 	.word	0x20000290
    1308:	000003e7 	.word	0x000003e7
    130c:	00007c65 	.word	0x00007c65
    1310:	000074a9 	.word	0x000074a9
    1314:	447a0000 	.word	0x447a0000
    1318:	00007589 	.word	0x00007589
    131c:	00009e85 	.word	0x00009e85
    1320:	00008975 	.word	0x00008975
    1324:	0000a009 	.word	0x0000a009
    1328:	200000d0 	.word	0x200000d0
    132c:	000074d1 	.word	0x000074d1
    1330:	00000f55 	.word	0x00000f55
    1334:	00007225 	.word	0x00007225
    1338:	20000298 	.word	0x20000298
    133c:	00000f99 	.word	0x00000f99
    1340:	200003d4 	.word	0x200003d4
    1344:	0000f944 	.word	0x0000f944
    1348:	0000c1cd 	.word	0x0000c1cd
    134c:	0000f978 	.word	0x0000f978

00001350 <_Z18hardwareCorrectionv>:
		timeProt.correction.nbCorrection=0;
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
    1350:	b5f0      	push	{r4, r5, r6, r7, lr}
    1352:	b08b      	sub	sp, #44	; 0x2c
	if(timeProt.correction.nbCorrection!=0){
    1354:	4b71      	ldr	r3, [pc, #452]	; (151c <_Z18hardwareCorrectionv+0x1cc>)
    1356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
			sendHMI("	end correction");
			return false;
		}
		
	}
	return false;	
    1358:	2000      	movs	r0, #0
		timeProt.correction.sumTime.second=0;
		timeProt.correction.sumTime.halfmillis=0;
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
}
bool hardwareCorrection(void){
	if(timeProt.correction.nbCorrection!=0){
    135a:	2b00      	cmp	r3, #0
    135c:	d100      	bne.n	1360 <_Z18hardwareCorrectionv+0x10>
    135e:	e0da      	b.n	1516 <_Z18hardwareCorrectionv+0x1c6>
		sendHMI("	Hardware correction");
    1360:	486f      	ldr	r0, [pc, #444]	; (1520 <_Z18hardwareCorrectionv+0x1d0>)
    1362:	4b70      	ldr	r3, [pc, #448]	; (1524 <_Z18hardwareCorrectionv+0x1d4>)
    1364:	4798      	blx	r3
		long int sumOffsetl;
		Clock averageTime={0,0,true};
    1366:	af07      	add	r7, sp, #28
    1368:	2300      	movs	r3, #0
    136a:	9307      	str	r3, [sp, #28]
    136c:	9308      	str	r3, [sp, #32]
    136e:	3301      	adds	r3, #1
    1370:	723b      	strb	r3, [r7, #8]
		float second=(float)timeProt.correction.sumTime.second/timeProt.correction.nbCorrection;
    1372:	4c6a      	ldr	r4, [pc, #424]	; (151c <_Z18hardwareCorrectionv+0x1cc>)
    1374:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    1376:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    1378:	9303      	str	r3, [sp, #12]
    137a:	4e6b      	ldr	r6, [pc, #428]	; (1528 <_Z18hardwareCorrectionv+0x1d8>)
    137c:	47b0      	blx	r6
    137e:	1c05      	adds	r5, r0, #0
    1380:	9803      	ldr	r0, [sp, #12]
    1382:	47b0      	blx	r6
    1384:	1c01      	adds	r1, r0, #0
    1386:	1c28      	adds	r0, r5, #0
    1388:	4b68      	ldr	r3, [pc, #416]	; (152c <_Z18hardwareCorrectionv+0x1dc>)
    138a:	4798      	blx	r3
    138c:	1c05      	adds	r5, r0, #0
		int secondi=(int)second;
    138e:	4b68      	ldr	r3, [pc, #416]	; (1530 <_Z18hardwareCorrectionv+0x1e0>)
    1390:	4798      	blx	r3
    1392:	1c06      	adds	r6, r0, #0
		//calcul average time
		//printf("second : %d,%d",secondi,(int)((second-secondi)*1000.0));
		
		averageTime.second=secondi;
    1394:	9007      	str	r0, [sp, #28]
		averageTime.halfmillis=(timeProt.correction.sumTime.halfmillis/timeProt.correction.nbCorrection)+RTC_FREQ*1.0*((float)(second-secondi));
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	58e0      	ldr	r0, [r4, r3]
    139a:	9903      	ldr	r1, [sp, #12]
    139c:	4b65      	ldr	r3, [pc, #404]	; (1534 <_Z18hardwareCorrectionv+0x1e4>)
    139e:	4798      	blx	r3
    13a0:	4c65      	ldr	r4, [pc, #404]	; (1538 <_Z18hardwareCorrectionv+0x1e8>)
    13a2:	47a0      	blx	r4
    13a4:	9004      	str	r0, [sp, #16]
    13a6:	9105      	str	r1, [sp, #20]
    13a8:	1c30      	adds	r0, r6, #0
    13aa:	4b64      	ldr	r3, [pc, #400]	; (153c <_Z18hardwareCorrectionv+0x1ec>)
    13ac:	4798      	blx	r3
    13ae:	1c01      	adds	r1, r0, #0
    13b0:	1c28      	adds	r0, r5, #0
    13b2:	4b63      	ldr	r3, [pc, #396]	; (1540 <_Z18hardwareCorrectionv+0x1f0>)
    13b4:	4798      	blx	r3
    13b6:	4b63      	ldr	r3, [pc, #396]	; (1544 <_Z18hardwareCorrectionv+0x1f4>)
    13b8:	4798      	blx	r3
    13ba:	2200      	movs	r2, #0
    13bc:	4b62      	ldr	r3, [pc, #392]	; (1548 <_Z18hardwareCorrectionv+0x1f8>)
    13be:	4d63      	ldr	r5, [pc, #396]	; (154c <_Z18hardwareCorrectionv+0x1fc>)
    13c0:	47a8      	blx	r5
    13c2:	1c02      	adds	r2, r0, #0
    13c4:	1c0b      	adds	r3, r1, #0
    13c6:	9804      	ldr	r0, [sp, #16]
    13c8:	9905      	ldr	r1, [sp, #20]
    13ca:	4d61      	ldr	r5, [pc, #388]	; (1550 <_Z18hardwareCorrectionv+0x200>)
    13cc:	47a8      	blx	r5
    13ce:	4b61      	ldr	r3, [pc, #388]	; (1554 <_Z18hardwareCorrectionv+0x204>)
    13d0:	4798      	blx	r3
    13d2:	6078      	str	r0, [r7, #4]
		unsigned long int averageTimeli=(averageTime.second*RTC_FREQ)+(averageTime.halfmillis);
    13d4:	9b07      	ldr	r3, [sp, #28]
    13d6:	687a      	ldr	r2, [r7, #4]
    13d8:	26fa      	movs	r6, #250	; 0xfa
    13da:	01f6      	lsls	r6, r6, #7
    13dc:	4373      	muls	r3, r6
    13de:	189f      	adds	r7, r3, r2
	
		//printf("averageTime : %lu\r\n",averageTime);
		float Fnow=(float)RTC_FREQ*1.0/count_set_period;
    13e0:	4b5d      	ldr	r3, [pc, #372]	; (1558 <_Z18hardwareCorrectionv+0x208>)
    13e2:	6818      	ldr	r0, [r3, #0]
    13e4:	47a0      	blx	r4
    13e6:	1c02      	adds	r2, r0, #0
    13e8:	1c0b      	adds	r3, r1, #0
    13ea:	2000      	movs	r0, #0
    13ec:	4956      	ldr	r1, [pc, #344]	; (1548 <_Z18hardwareCorrectionv+0x1f8>)
    13ee:	4d5b      	ldr	r5, [pc, #364]	; (155c <_Z18hardwareCorrectionv+0x20c>)
    13f0:	47a8      	blx	r5
    13f2:	4b5b      	ldr	r3, [pc, #364]	; (1560 <_Z18hardwareCorrectionv+0x210>)
    13f4:	4798      	blx	r3
    13f6:	9004      	str	r0, [sp, #16]
		float Fafter=0;
		//calcul of the sumOffset in ms

		sumOffsetl=(sumOffset.second*RTC_FREQ)+(sumOffset.halfmillis);
    13f8:	4a5a      	ldr	r2, [pc, #360]	; (1564 <_Z18hardwareCorrectionv+0x214>)
    13fa:	6810      	ldr	r0, [r2, #0]
    13fc:	6853      	ldr	r3, [r2, #4]
    13fe:	4370      	muls	r0, r6
    1400:	18c0      	adds	r0, r0, r3
		if(sumOffset.sign!=true){
    1402:	7a13      	ldrb	r3, [r2, #8]
    1404:	2b00      	cmp	r3, #0
    1406:	d100      	bne.n	140a <_Z18hardwareCorrectionv+0xba>
			sumOffsetl=-sumOffsetl;
    1408:	4240      	negs	r0, r0
		

		//printf("correction nb : %d",timeProt.correction.nbCorrection);
		//average per period of sync
		int nbcor=timeProt.correction.nbCorrection;
		sumOffsetl=sumOffsetl/nbcor;
    140a:	9903      	ldr	r1, [sp, #12]
    140c:	4b56      	ldr	r3, [pc, #344]	; (1568 <_Z18hardwareCorrectionv+0x218>)
    140e:	4798      	blx	r3
		
		//printf("sumOffsetmoy :  %ld\r\n",sumOffset/2);
		sumOffsetl=sumOffsetl/(float)(averageTimeli/(RTC_FREQ*1.0));
    1410:	4d4a      	ldr	r5, [pc, #296]	; (153c <_Z18hardwareCorrectionv+0x1ec>)
    1412:	47a8      	blx	r5
    1414:	1c06      	adds	r6, r0, #0
    1416:	1c38      	adds	r0, r7, #0
    1418:	4b47      	ldr	r3, [pc, #284]	; (1538 <_Z18hardwareCorrectionv+0x1e8>)
    141a:	4798      	blx	r3
    141c:	2200      	movs	r2, #0
    141e:	4b4a      	ldr	r3, [pc, #296]	; (1548 <_Z18hardwareCorrectionv+0x1f8>)
    1420:	4c4e      	ldr	r4, [pc, #312]	; (155c <_Z18hardwareCorrectionv+0x20c>)
    1422:	47a0      	blx	r4
    1424:	4b4e      	ldr	r3, [pc, #312]	; (1560 <_Z18hardwareCorrectionv+0x210>)
    1426:	4798      	blx	r3
    1428:	1c01      	adds	r1, r0, #0
    142a:	4c40      	ldr	r4, [pc, #256]	; (152c <_Z18hardwareCorrectionv+0x1dc>)
    142c:	1c30      	adds	r0, r6, #0
    142e:	47a0      	blx	r4
    1430:	4b3f      	ldr	r3, [pc, #252]	; (1530 <_Z18hardwareCorrectionv+0x1e0>)
    1432:	4798      	blx	r3
		//printf("sumOffset/S :  %ld\r\n",sumOffset/2);
	

	
		//number of ms/tick
		float decPerPeriod=(float)sumOffsetl/(RTC_FREQ*1.0);
    1434:	47a8      	blx	r5
    1436:	494d      	ldr	r1, [pc, #308]	; (156c <_Z18hardwareCorrectionv+0x21c>)
    1438:	47a0      	blx	r4
    143a:	1c04      	adds	r4, r0, #0
		
		if(decPerPeriod<1.0){
    143c:	21fe      	movs	r1, #254	; 0xfe
    143e:	0589      	lsls	r1, r1, #22
    1440:	4b4b      	ldr	r3, [pc, #300]	; (1570 <_Z18hardwareCorrectionv+0x220>)
    1442:	4798      	blx	r3
    1444:	2800      	cmp	r0, #0
    1446:	d00a      	beq.n	145e <_Z18hardwareCorrectionv+0x10e>
			Fafter=Fnow/(double)(1-decPerPeriod);
    1448:	20fe      	movs	r0, #254	; 0xfe
    144a:	0580      	lsls	r0, r0, #22
    144c:	1c21      	adds	r1, r4, #0
    144e:	4b3c      	ldr	r3, [pc, #240]	; (1540 <_Z18hardwareCorrectionv+0x1f0>)
    1450:	4798      	blx	r3
    1452:	1c01      	adds	r1, r0, #0
    1454:	9804      	ldr	r0, [sp, #16]
    1456:	4b35      	ldr	r3, [pc, #212]	; (152c <_Z18hardwareCorrectionv+0x1dc>)
    1458:	4798      	blx	r3
    145a:	1c05      	adds	r5, r0, #0
    145c:	e009      	b.n	1472 <_Z18hardwareCorrectionv+0x122>
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
    145e:	1c20      	adds	r0, r4, #0
    1460:	21fe      	movs	r1, #254	; 0xfe
    1462:	0589      	lsls	r1, r1, #22
    1464:	4b43      	ldr	r3, [pc, #268]	; (1574 <_Z18hardwareCorrectionv+0x224>)
    1466:	4798      	blx	r3
    1468:	1c01      	adds	r1, r0, #0
    146a:	9804      	ldr	r0, [sp, #16]
    146c:	4b2f      	ldr	r3, [pc, #188]	; (152c <_Z18hardwareCorrectionv+0x1dc>)
    146e:	4798      	blx	r3
    1470:	1c05      	adds	r5, r0, #0
		}
		double dcount_set_period=32000/Fafter;
    1472:	483e      	ldr	r0, [pc, #248]	; (156c <_Z18hardwareCorrectionv+0x21c>)
    1474:	1c29      	adds	r1, r5, #0
    1476:	4b2d      	ldr	r3, [pc, #180]	; (152c <_Z18hardwareCorrectionv+0x1dc>)
    1478:	4798      	blx	r3
    147a:	1c06      	adds	r6, r0, #0
		unsigned int count;
		count=(int)dcount_set_period;
    147c:	4b2c      	ldr	r3, [pc, #176]	; (1530 <_Z18hardwareCorrectionv+0x1e0>)
    147e:	4798      	blx	r3
    1480:	1c04      	adds	r4, r0, #0
			Fafter=Fnow/(double)(1-decPerPeriod);
		}
		else{
			Fafter=Fnow/(double)(1+decPerPeriod);
		}
		double dcount_set_period=32000/Fafter;
    1482:	1c30      	adds	r0, r6, #0
    1484:	4b2f      	ldr	r3, [pc, #188]	; (1544 <_Z18hardwareCorrectionv+0x1f4>)
    1486:	4798      	blx	r3
    1488:	1c06      	adds	r6, r0, #0
    148a:	1c0f      	adds	r7, r1, #0
		unsigned int count;
		count=(int)dcount_set_period;
		if((dcount_set_period-count)>0.5){
    148c:	1c20      	adds	r0, r4, #0
    148e:	4b2a      	ldr	r3, [pc, #168]	; (1538 <_Z18hardwareCorrectionv+0x1e8>)
    1490:	4798      	blx	r3
    1492:	1c02      	adds	r2, r0, #0
    1494:	1c0b      	adds	r3, r1, #0
    1496:	1c30      	adds	r0, r6, #0
    1498:	1c39      	adds	r1, r7, #0
    149a:	4e37      	ldr	r6, [pc, #220]	; (1578 <_Z18hardwareCorrectionv+0x228>)
    149c:	47b0      	blx	r6
    149e:	2200      	movs	r2, #0
    14a0:	4b36      	ldr	r3, [pc, #216]	; (157c <_Z18hardwareCorrectionv+0x22c>)
    14a2:	4e37      	ldr	r6, [pc, #220]	; (1580 <_Z18hardwareCorrectionv+0x230>)
    14a4:	47b0      	blx	r6
			count++;
    14a6:	1e43      	subs	r3, r0, #1
    14a8:	4198      	sbcs	r0, r3
    14aa:	1824      	adds	r4, r4, r0
    14ac:	23fa      	movs	r3, #250	; 0xfa
    14ae:	01db      	lsls	r3, r3, #7
    14b0:	429c      	cmp	r4, r3
    14b2:	d900      	bls.n	14b6 <_Z18hardwareCorrectionv+0x166>
    14b4:	1c1c      	adds	r4, r3, #0
		}
		if(count>RTC_FREQ){//never <1Hz of frequency
			count=RTC_FREQ;
		
		}
		if(count_set_period!=count){
    14b6:	4b28      	ldr	r3, [pc, #160]	; (1558 <_Z18hardwareCorrectionv+0x208>)
    14b8:	681b      	ldr	r3, [r3, #0]
    14ba:	42a3      	cmp	r3, r4
    14bc:	d027      	beq.n	150e <_Z18hardwareCorrectionv+0x1be>
			count_set_period=count;
    14be:	4e26      	ldr	r6, [pc, #152]	; (1558 <_Z18hardwareCorrectionv+0x208>)
    14c0:	6034      	str	r4, [r6, #0]
			resetSofftwareCorrection();
    14c2:	4b30      	ldr	r3, [pc, #192]	; (1584 <_Z18hardwareCorrectionv+0x234>)
    14c4:	4798      	blx	r3
			valueCor=0;
    14c6:	2300      	movs	r3, #0
    14c8:	4a2f      	ldr	r2, [pc, #188]	; (1588 <_Z18hardwareCorrectionv+0x238>)
    14ca:	6013      	str	r3, [r2, #0]
			timeProt.correction.indiceFull=0;
    14cc:	4a13      	ldr	r2, [pc, #76]	; (151c <_Z18hardwareCorrectionv+0x1cc>)
    14ce:	21d9      	movs	r1, #217	; 0xd9
    14d0:	5453      	strb	r3, [r2, r1]
			timeProt.correction.indiceMoySoftCor=0;
    14d2:	3901      	subs	r1, #1
    14d4:	5453      	strb	r3, [r2, r1]
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
    14d6:	6832      	ldr	r2, [r6, #0]
    14d8:	4b2c      	ldr	r3, [pc, #176]	; (158c <_Z18hardwareCorrectionv+0x23c>)
    14da:	619a      	str	r2, [r3, #24]
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    14dc:	6837      	ldr	r7, [r6, #0]
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    14de:	4e2c      	ldr	r6, [pc, #176]	; (1590 <_Z18hardwareCorrectionv+0x240>)
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
			unsigned int Fbest=(int)Fafter;
    14e0:	1c28      	adds	r0, r5, #0
    14e2:	4b13      	ldr	r3, [pc, #76]	; (1530 <_Z18hardwareCorrectionv+0x1e0>)
    14e4:	4798      	blx	r3
    14e6:	1c05      	adds	r5, r0, #0
			timeProt.correction.indiceMoySoftCor=0;
			//printf("count : %u",(unsigned int)count);
			//rtc_count_set_compare(&rtc_instance,VALUE_TIMER,RTC_COUNT_COMPARE_0 );
		//	rtc_count_set_period(&rtc_instance,count_set_period); //MOMO
			RTC->MODE0.COMP[0].reg = count_set_period;
			unsigned int Fuse=(RTC_FREQ/count_set_period);
    14e8:	20fa      	movs	r0, #250	; 0xfa
    14ea:	01c0      	lsls	r0, r0, #7
    14ec:	1c39      	adds	r1, r7, #0
    14ee:	4b11      	ldr	r3, [pc, #68]	; (1534 <_Z18hardwareCorrectionv+0x1e4>)
    14f0:	4798      	blx	r3
    14f2:	1c03      	adds	r3, r0, #0
			unsigned int Fbest=(int)Fafter;
		
			sprintf(messageHMICor,"		Fbest: %u Hz, Fuse= %u Hz count=%d",(unsigned int)Fbest,(unsigned int)Fuse,count);
    14f4:	9400      	str	r4, [sp, #0]
    14f6:	1c30      	adds	r0, r6, #0
    14f8:	4926      	ldr	r1, [pc, #152]	; (1594 <_Z18hardwareCorrectionv+0x244>)
    14fa:	1c2a      	adds	r2, r5, #0
    14fc:	4c26      	ldr	r4, [pc, #152]	; (1598 <_Z18hardwareCorrectionv+0x248>)
    14fe:	47a0      	blx	r4
			sendHMI(messageHMICor);
    1500:	1c30      	adds	r0, r6, #0
    1502:	4c08      	ldr	r4, [pc, #32]	; (1524 <_Z18hardwareCorrectionv+0x1d4>)
    1504:	47a0      	blx	r4
			sendHMI("	end correction");
    1506:	4825      	ldr	r0, [pc, #148]	; (159c <_Z18hardwareCorrectionv+0x24c>)
    1508:	47a0      	blx	r4
			return true;
    150a:	2001      	movs	r0, #1
    150c:	e003      	b.n	1516 <_Z18hardwareCorrectionv+0x1c6>
			
		}
		else{
	

			sendHMI("	end correction");
    150e:	4823      	ldr	r0, [pc, #140]	; (159c <_Z18hardwareCorrectionv+0x24c>)
    1510:	4b04      	ldr	r3, [pc, #16]	; (1524 <_Z18hardwareCorrectionv+0x1d4>)
    1512:	4798      	blx	r3
			return false;
    1514:	2000      	movs	r0, #0
		}
		
	}
	return false;	
}
    1516:	b00b      	add	sp, #44	; 0x2c
    1518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	2000049c 	.word	0x2000049c
    1520:	0000f994 	.word	0x0000f994
    1524:	000005b1 	.word	0x000005b1
    1528:	00008295 	.word	0x00008295
    152c:	00007881 	.word	0x00007881
    1530:	000081c5 	.word	0x000081c5
    1534:	00007105 	.word	0x00007105
    1538:	00009efd 	.word	0x00009efd
    153c:	00008205 	.word	0x00008205
    1540:	00007ec9 	.word	0x00007ec9
    1544:	00009f61 	.word	0x00009f61
    1548:	40df4000 	.word	0x40df4000
    154c:	000091f1 	.word	0x000091f1
    1550:	00008325 	.word	0x00008325
    1554:	0000754d 	.word	0x0000754d
    1558:	200000b4 	.word	0x200000b4
    155c:	00008975 	.word	0x00008975
    1560:	0000a009 	.word	0x0000a009
    1564:	200003c8 	.word	0x200003c8
    1568:	00007225 	.word	0x00007225
    156c:	46fa0000 	.word	0x46fa0000
    1570:	000074a9 	.word	0x000074a9
    1574:	00007589 	.word	0x00007589
    1578:	00009725 	.word	0x00009725
    157c:	3fe00000 	.word	0x3fe00000
    1580:	0000745d 	.word	0x0000745d
    1584:	00000f99 	.word	0x00000f99
    1588:	200002b8 	.word	0x200002b8
    158c:	40001400 	.word	0x40001400
    1590:	200003d4 	.word	0x200003d4
    1594:	0000f9ac 	.word	0x0000f9ac
    1598:	0000c1cd 	.word	0x0000c1cd
    159c:	0000f9d4 	.word	0x0000f9d4

000015a0 <_Z10correctionv>:
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/

void correction(void){
    15a0:	b508      	push	{r3, lr}
	

	if(xTaskGetTickCount()-saveCorrection>(TIME_CORRECTION/portTICK_RATE_MS)){
    15a2:	4b0b      	ldr	r3, [pc, #44]	; (15d0 <_Z10correctionv+0x30>)
    15a4:	4798      	blx	r3
    15a6:	4b0b      	ldr	r3, [pc, #44]	; (15d4 <_Z10correctionv+0x34>)
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	1ac0      	subs	r0, r0, r3
    15ac:	4b0a      	ldr	r3, [pc, #40]	; (15d8 <_Z10correctionv+0x38>)
    15ae:	4298      	cmp	r0, r3
    15b0:	d90d      	bls.n	15ce <_Z10correctionv+0x2e>
			
			if(timeProt.correction.nbCorrection>2){
    15b2:	4b0a      	ldr	r3, [pc, #40]	; (15dc <_Z10correctionv+0x3c>)
    15b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    15b6:	2b02      	cmp	r3, #2
    15b8:	d909      	bls.n	15ce <_Z10correctionv+0x2e>
				saveCorrection=xTaskGetTickCount();
    15ba:	4b05      	ldr	r3, [pc, #20]	; (15d0 <_Z10correctionv+0x30>)
    15bc:	4798      	blx	r3
    15be:	4b05      	ldr	r3, [pc, #20]	; (15d4 <_Z10correctionv+0x34>)
    15c0:	6018      	str	r0, [r3, #0]
				if(!hardwareCorrection()){
    15c2:	4b07      	ldr	r3, [pc, #28]	; (15e0 <_Z10correctionv+0x40>)
    15c4:	4798      	blx	r3
    15c6:	2800      	cmp	r0, #0
    15c8:	d101      	bne.n	15ce <_Z10correctionv+0x2e>
					sofwareCorrection();
    15ca:	4b06      	ldr	r3, [pc, #24]	; (15e4 <_Z10correctionv+0x44>)
    15cc:	4798      	blx	r3
			}
			
		
	}
	
}
    15ce:	bd08      	pop	{r3, pc}
    15d0:	000025e9 	.word	0x000025e9
    15d4:	200002f8 	.word	0x200002f8
    15d8:	000186a0 	.word	0x000186a0
    15dc:	2000049c 	.word	0x2000049c
    15e0:	00001351 	.word	0x00001351
    15e4:	00000fb9 	.word	0x00000fb9

000015e8 <_Z11printfClock11structClock>:
		delayRequest();
	}
	#endif

}
void printfClock(Clock clock){
    15e8:	b510      	push	{r4, lr}
    15ea:	b084      	sub	sp, #16
    15ec:	ab01      	add	r3, sp, #4
    15ee:	9001      	str	r0, [sp, #4]
    15f0:	9102      	str	r1, [sp, #8]
    15f2:	9203      	str	r2, [sp, #12]
			if(clock.sign==true){
    15f4:	7a1b      	ldrb	r3, [r3, #8]
    15f6:	2b00      	cmp	r3, #0
    15f8:	d006      	beq.n	1608 <_Z11printfClock11structClock+0x20>
				hmi.printf("%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
    15fa:	9a01      	ldr	r2, [sp, #4]
    15fc:	9b02      	ldr	r3, [sp, #8]
    15fe:	4806      	ldr	r0, [pc, #24]	; (1618 <_Z11printfClock11structClock+0x30>)
    1600:	4906      	ldr	r1, [pc, #24]	; (161c <_Z11printfClock11structClock+0x34>)
    1602:	4c07      	ldr	r4, [pc, #28]	; (1620 <_Z11printfClock11structClock+0x38>)
    1604:	47a0      	blx	r4
    1606:	e005      	b.n	1614 <_Z11printfClock11structClock+0x2c>
			}
			else{
				hmi.printf("-%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
    1608:	9a01      	ldr	r2, [sp, #4]
    160a:	9b02      	ldr	r3, [sp, #8]
    160c:	4802      	ldr	r0, [pc, #8]	; (1618 <_Z11printfClock11structClock+0x30>)
    160e:	4905      	ldr	r1, [pc, #20]	; (1624 <_Z11printfClock11structClock+0x3c>)
    1610:	4c03      	ldr	r4, [pc, #12]	; (1620 <_Z11printfClock11structClock+0x38>)
    1612:	47a0      	blx	r4
			}
}
    1614:	b004      	add	sp, #16
    1616:	bd10      	pop	{r4, pc}
    1618:	20000270 	.word	0x20000270
    161c:	0000f9e4 	.word	0x0000f9e4
    1620:	000059b1 	.word	0x000059b1
    1624:	0000f9f0 	.word	0x0000f9f0

00001628 <_Z11updateClockv>:
void updateClock(void){
    1628:	b5f0      	push	{r4, r5, r6, r7, lr}
    162a:	4647      	mov	r7, r8
    162c:	b480      	push	{r7}
    162e:	b090      	sub	sp, #64	; 0x40
		Clock diff;
		if(timeProt.correction.previousSignOffset==timeProt.offset.sign){
    1630:	4a58      	ldr	r2, [pc, #352]	; (1794 <_Z11updateClockv+0x16c>)
    1632:	2358      	movs	r3, #88	; 0x58
    1634:	5cd3      	ldrb	r3, [r2, r3]
    1636:	b2db      	uxtb	r3, r3
    1638:	21da      	movs	r1, #218	; 0xda
    163a:	5c52      	ldrb	r2, [r2, r1]
    163c:	429a      	cmp	r2, r3
    163e:	d150      	bne.n	16e2 <_Z11updateClockv+0xba>
			timeProt.correction.previousSignOffset=timeProt.offset.sign;
    1640:	4c54      	ldr	r4, [pc, #336]	; (1794 <_Z11updateClockv+0x16c>)
    1642:	2358      	movs	r3, #88	; 0x58
    1644:	5ce2      	ldrb	r2, [r4, r3]
    1646:	3382      	adds	r3, #130	; 0x82
    1648:	54e2      	strb	r2, [r4, r3]
			timeProt.correction.previoustimeOffset.second=timeProt.correction.currentTimeOffsetSync.second;
    164a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    164c:	6663      	str	r3, [r4, #100]	; 0x64
			timeProt.correction.previoustimeOffset.halfmillis=timeProt.correction.currentTimeOffsetSync.halfmillis;
    164e:	6f63      	ldr	r3, [r4, #116]	; 0x74
    1650:	66a3      	str	r3, [r4, #104]	; 0x68
			readClock(&timeProt.correction.currentTimeOffsetSync);
    1652:	1c20      	adds	r0, r4, #0
    1654:	3070      	adds	r0, #112	; 0x70
    1656:	4b50      	ldr	r3, [pc, #320]	; (1798 <_Z11updateClockv+0x170>)
    1658:	4798      	blx	r3
			if(timeProt.correction.previoustimeOffset.second!=0){
    165a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    165c:	2b00      	cmp	r3, #0
    165e:	d042      	beq.n	16e6 <_Z11updateClockv+0xbe>
				if(sup(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset)){
    1660:	4a4c      	ldr	r2, [pc, #304]	; (1794 <_Z11updateClockv+0x16c>)
    1662:	1c13      	adds	r3, r2, #0
    1664:	3368      	adds	r3, #104	; 0x68
    1666:	4669      	mov	r1, sp
    1668:	cb11      	ldmia	r3!, {r0, r4}
    166a:	c111      	stmia	r1!, {r0, r4}
    166c:	6e53      	ldr	r3, [r2, #100]	; 0x64
    166e:	6f10      	ldr	r0, [r2, #112]	; 0x70
    1670:	6f51      	ldr	r1, [r2, #116]	; 0x74
    1672:	6f92      	ldr	r2, [r2, #120]	; 0x78
    1674:	4c49      	ldr	r4, [pc, #292]	; (179c <_Z11updateClockv+0x174>)
    1676:	47a0      	blx	r4
    1678:	2800      	cmp	r0, #0
    167a:	d02f      	beq.n	16dc <_Z11updateClockv+0xb4>
												
					diff=subClock(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset);
    167c:	ae0a      	add	r6, sp, #40	; 0x28
    167e:	4c45      	ldr	r4, [pc, #276]	; (1794 <_Z11updateClockv+0x16c>)
    1680:	1c23      	adds	r3, r4, #0
    1682:	3364      	adds	r3, #100	; 0x64
    1684:	466a      	mov	r2, sp
    1686:	cb23      	ldmia	r3!, {r0, r1, r5}
    1688:	c223      	stmia	r2!, {r0, r1, r5}
    168a:	1c30      	adds	r0, r6, #0
    168c:	6f21      	ldr	r1, [r4, #112]	; 0x70
    168e:	6f62      	ldr	r2, [r4, #116]	; 0x74
    1690:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    1692:	4d43      	ldr	r5, [pc, #268]	; (17a0 <_Z11updateClockv+0x178>)
    1694:	47a8      	blx	r5
					//printf("diff: ");
					//printfClock(diff);
					timeProt.correction.sumTime=sumClock(timeProt.correction.sumTime,diff);
    1696:	ad06      	add	r5, sp, #24
    1698:	466b      	mov	r3, sp
    169a:	ce07      	ldmia	r6!, {r0, r1, r2}
    169c:	c307      	stmia	r3!, {r0, r1, r2}
    169e:	1c28      	adds	r0, r5, #0
    16a0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    16a2:	2380      	movs	r3, #128	; 0x80
    16a4:	58e2      	ldr	r2, [r4, r3]
    16a6:	3304      	adds	r3, #4
    16a8:	58e3      	ldr	r3, [r4, r3]
    16aa:	4e3e      	ldr	r6, [pc, #248]	; (17a4 <_Z11updateClockv+0x17c>)
    16ac:	46b0      	mov	r8, r6
    16ae:	47b0      	blx	r6
    16b0:	1c23      	adds	r3, r4, #0
    16b2:	337c      	adds	r3, #124	; 0x7c
    16b4:	1c2a      	adds	r2, r5, #0
    16b6:	ca43      	ldmia	r2!, {r0, r1, r6}
    16b8:	c343      	stmia	r3!, {r0, r1, r6}
					sumOffset=sumClock(sumOffset,timeProt.offset);
    16ba:	4e3b      	ldr	r6, [pc, #236]	; (17a8 <_Z11updateClockv+0x180>)
    16bc:	1c23      	adds	r3, r4, #0
    16be:	3350      	adds	r3, #80	; 0x50
    16c0:	466a      	mov	r2, sp
    16c2:	cb83      	ldmia	r3!, {r0, r1, r7}
    16c4:	c283      	stmia	r2!, {r0, r1, r7}
    16c6:	1c28      	adds	r0, r5, #0
    16c8:	6831      	ldr	r1, [r6, #0]
    16ca:	6872      	ldr	r2, [r6, #4]
    16cc:	68b3      	ldr	r3, [r6, #8]
    16ce:	47c0      	blx	r8
    16d0:	cd0e      	ldmia	r5!, {r1, r2, r3}
    16d2:	c60e      	stmia	r6!, {r1, r2, r3}
					printf("sumClock: ");
					printfClock(timeProt.correction.sumTime);
					
					printf("nb corrr  : %d",timeProt.correction.nbCorrection);
					*/
					timeProt.correction.nbCorrection++;
    16d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    16d6:	3301      	adds	r3, #1
    16d8:	65e3      	str	r3, [r4, #92]	; 0x5c
    16da:	e004      	b.n	16e6 <_Z11updateClockv+0xbe>
				}
				else{
					resetSofftwareCorrection();
    16dc:	4b33      	ldr	r3, [pc, #204]	; (17ac <_Z11updateClockv+0x184>)
    16de:	4798      	blx	r3
    16e0:	e001      	b.n	16e6 <_Z11updateClockv+0xbe>
				}
			}
		}
		else{
			resetSofftwareCorrection();
    16e2:	4b32      	ldr	r3, [pc, #200]	; (17ac <_Z11updateClockv+0x184>)
    16e4:	4798      	blx	r3
		}
		timeProt.correction.previousSignOffset=timeProt.offset.sign;
    16e6:	4e2b      	ldr	r6, [pc, #172]	; (1794 <_Z11updateClockv+0x16c>)
    16e8:	2358      	movs	r3, #88	; 0x58
    16ea:	4698      	mov	r8, r3
    16ec:	5cf2      	ldrb	r2, [r6, r3]
    16ee:	3382      	adds	r3, #130	; 0x82
    16f0:	54f2      	strb	r2, [r6, r3]
		Clock timeCopy;
		readClock(&timeCopy);
    16f2:	ad0d      	add	r5, sp, #52	; 0x34
    16f4:	1c28      	adds	r0, r5, #0
    16f6:	4b28      	ldr	r3, [pc, #160]	; (1798 <_Z11updateClockv+0x170>)
    16f8:	4798      	blx	r3


		
		timeCopy=sumClock(timeCopy,timeProt.offset);//add offset
    16fa:	ac06      	add	r4, sp, #24
    16fc:	1c33      	adds	r3, r6, #0
    16fe:	3350      	adds	r3, #80	; 0x50
    1700:	466a      	mov	r2, sp
    1702:	cb83      	ldmia	r3!, {r0, r1, r7}
    1704:	c283      	stmia	r2!, {r0, r1, r7}
    1706:	1c20      	adds	r0, r4, #0
    1708:	990d      	ldr	r1, [sp, #52]	; 0x34
    170a:	686a      	ldr	r2, [r5, #4]
    170c:	68ab      	ldr	r3, [r5, #8]
    170e:	4f25      	ldr	r7, [pc, #148]	; (17a4 <_Z11updateClockv+0x17c>)
    1710:	47b8      	blx	r7
    1712:	1c23      	adds	r3, r4, #0
    1714:	cb07      	ldmia	r3!, {r0, r1, r2}
    1716:	c507      	stmia	r5!, {r0, r1, r2}
		writeClock(timeCopy);
    1718:	980d      	ldr	r0, [sp, #52]	; 0x34
    171a:	6861      	ldr	r1, [r4, #4]
    171c:	68a2      	ldr	r2, [r4, #8]
    171e:	4b24      	ldr	r3, [pc, #144]	; (17b0 <_Z11updateClockv+0x188>)
    1720:	4798      	blx	r3
		
		if(timeProt.offset.sign==true){
    1722:	4643      	mov	r3, r8
    1724:	5cf3      	ldrb	r3, [r6, r3]
    1726:	2b00      	cmp	r3, #0
    1728:	d016      	beq.n	1758 <_Z11updateClockv+0x130>
			sprintf(messageHMIOffset,"		update clock offset: +%lus,%ld[+%lus,%lu ms,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    172a:	491a      	ldr	r1, [pc, #104]	; (1794 <_Z11updateClockv+0x16c>)
    172c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
    172e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    1730:	6d0e      	ldr	r6, [r1, #80]	; 0x50
    1732:	6d48      	ldr	r0, [r1, #84]	; 0x54
    1734:	6d49      	ldr	r1, [r1, #84]	; 0x54
    1736:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1738:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    173a:	9600      	str	r6, [sp, #0]
    173c:	0940      	lsrs	r0, r0, #5
    173e:	9001      	str	r0, [sp, #4]
    1740:	201f      	movs	r0, #31
    1742:	4001      	ands	r1, r0
    1744:	0148      	lsls	r0, r1, #5
    1746:	1a41      	subs	r1, r0, r1
    1748:	9102      	str	r1, [sp, #8]
    174a:	9503      	str	r5, [sp, #12]
    174c:	9404      	str	r4, [sp, #16]
    174e:	4819      	ldr	r0, [pc, #100]	; (17b4 <_Z11updateClockv+0x18c>)
    1750:	4919      	ldr	r1, [pc, #100]	; (17b8 <_Z11updateClockv+0x190>)
    1752:	4c1a      	ldr	r4, [pc, #104]	; (17bc <_Z11updateClockv+0x194>)
    1754:	47a0      	blx	r4
    1756:	e015      	b.n	1784 <_Z11updateClockv+0x15c>
		}
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    1758:	490e      	ldr	r1, [pc, #56]	; (1794 <_Z11updateClockv+0x16c>)
    175a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
    175c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    175e:	6d0e      	ldr	r6, [r1, #80]	; 0x50
    1760:	6d48      	ldr	r0, [r1, #84]	; 0x54
    1762:	6d49      	ldr	r1, [r1, #84]	; 0x54
    1764:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1766:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1768:	9600      	str	r6, [sp, #0]
    176a:	0940      	lsrs	r0, r0, #5
    176c:	9001      	str	r0, [sp, #4]
    176e:	201f      	movs	r0, #31
    1770:	4001      	ands	r1, r0
    1772:	0148      	lsls	r0, r1, #5
    1774:	1a41      	subs	r1, r0, r1
    1776:	9102      	str	r1, [sp, #8]
    1778:	9503      	str	r5, [sp, #12]
    177a:	9404      	str	r4, [sp, #16]
    177c:	480d      	ldr	r0, [pc, #52]	; (17b4 <_Z11updateClockv+0x18c>)
    177e:	4910      	ldr	r1, [pc, #64]	; (17c0 <_Z11updateClockv+0x198>)
    1780:	4c0e      	ldr	r4, [pc, #56]	; (17bc <_Z11updateClockv+0x194>)
    1782:	47a0      	blx	r4
		}
		sendHMI(messageHMIOffset);
    1784:	480b      	ldr	r0, [pc, #44]	; (17b4 <_Z11updateClockv+0x18c>)
    1786:	4b0f      	ldr	r3, [pc, #60]	; (17c4 <_Z11updateClockv+0x19c>)
    1788:	4798      	blx	r3
}
    178a:	b010      	add	sp, #64	; 0x40
    178c:	bc04      	pop	{r2}
    178e:	4690      	mov	r8, r2
    1790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	2000049c 	.word	0x2000049c
    1798:	000007b5 	.word	0x000007b5
    179c:	00000c61 	.word	0x00000c61
    17a0:	00000cd1 	.word	0x00000cd1
    17a4:	00000dd5 	.word	0x00000dd5
    17a8:	200003c8 	.word	0x200003c8
    17ac:	00000f99 	.word	0x00000f99
    17b0:	00000819 	.word	0x00000819
    17b4:	200002fc 	.word	0x200002fc
    17b8:	0000f9fc 	.word	0x0000f9fc
    17bc:	0000c1cd 	.word	0x0000c1cd
    17c0:	0000fa40 	.word	0x0000fa40
    17c4:	000005b1 	.word	0x000005b1

000017c8 <_Z8receiverv>:
void receiver(){
    17c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ca:	b0b3      	sub	sp, #204	; 0xcc
	#ifdef SLAVEMODE
	Clock t2={0,0,true};
    17cc:	a908      	add	r1, sp, #32
    17ce:	2300      	movs	r3, #0
    17d0:	9308      	str	r3, [sp, #32]
    17d2:	9309      	str	r3, [sp, #36]	; 0x24
    17d4:	2201      	movs	r2, #1
    17d6:	720a      	strb	r2, [r1, #8]
	Clock t3={0,0,true};
    17d8:	a90b      	add	r1, sp, #44	; 0x2c
    17da:	930b      	str	r3, [sp, #44]	; 0x2c
    17dc:	930c      	str	r3, [sp, #48]	; 0x30
    17de:	720a      	strb	r2, [r1, #8]
	Clock t2subt1={0,0,true};
    17e0:	a90e      	add	r1, sp, #56	; 0x38
    17e2:	930e      	str	r3, [sp, #56]	; 0x38
    17e4:	930f      	str	r3, [sp, #60]	; 0x3c
    17e6:	720a      	strb	r2, [r1, #8]
	Clock t4subt3={0,0,true};
    17e8:	a911      	add	r1, sp, #68	; 0x44
    17ea:	9311      	str	r3, [sp, #68]	; 0x44
    17ec:	9312      	str	r3, [sp, #72]	; 0x48
    17ee:	720a      	strb	r2, [r1, #8]
	Clock delayL={0,0,true};
    17f0:	a914      	add	r1, sp, #80	; 0x50
    17f2:	9314      	str	r3, [sp, #80]	; 0x50
    17f4:	9315      	str	r3, [sp, #84]	; 0x54
    17f6:	720a      	strb	r2, [r1, #8]
	Clock timeMaster={0,0,true};	
    17f8:	a917      	add	r1, sp, #92	; 0x5c
    17fa:	9317      	str	r3, [sp, #92]	; 0x5c
    17fc:	9318      	str	r3, [sp, #96]	; 0x60
    17fe:	720a      	strb	r2, [r1, #8]
	Data data;
	//uint8_t count=0;
	
	

	hmi.printf("packetSize:%d\r\n",timeProt.length);
    1800:	4da2      	ldr	r5, [pc, #648]	; (1a8c <_Z8receiverv+0x2c4>)
    1802:	243c      	movs	r4, #60	; 0x3c
    1804:	5d2a      	ldrb	r2, [r5, r4]
    1806:	48a2      	ldr	r0, [pc, #648]	; (1a90 <_Z8receiverv+0x2c8>)
    1808:	49a2      	ldr	r1, [pc, #648]	; (1a94 <_Z8receiverv+0x2cc>)
    180a:	4ba3      	ldr	r3, [pc, #652]	; (1a98 <_Z8receiverv+0x2d0>)
    180c:	4798      	blx	r3
	for(int i=0;i<timeProt.length;i++){
    180e:	5d29      	ldrb	r1, [r5, r4]
    1810:	2900      	cmp	r1, #0
    1812:	dd0f      	ble.n	1834 <_Z8receiverv+0x6c>
    1814:	2400      	movs	r4, #0
		
		hmi.printf("t+ %d:%x\r\n",i,timeProt.receive[i]);
    1816:	4e9e      	ldr	r6, [pc, #632]	; (1a90 <_Z8receiverv+0x2c8>)
    1818:	4f9c      	ldr	r7, [pc, #624]	; (1a8c <_Z8receiverv+0x2c4>)
    181a:	1c23      	adds	r3, r4, #0
    181c:	33dc      	adds	r3, #220	; 0xdc
    181e:	5cfb      	ldrb	r3, [r7, r3]
    1820:	1c30      	adds	r0, r6, #0
    1822:	499e      	ldr	r1, [pc, #632]	; (1a9c <_Z8receiverv+0x2d4>)
    1824:	1c22      	adds	r2, r4, #0
    1826:	4d9c      	ldr	r5, [pc, #624]	; (1a98 <_Z8receiverv+0x2d0>)
    1828:	47a8      	blx	r5
	//uint8_t count=0;
	
	

	hmi.printf("packetSize:%d\r\n",timeProt.length);
	for(int i=0;i<timeProt.length;i++){
    182a:	3401      	adds	r4, #1
    182c:	233c      	movs	r3, #60	; 0x3c
    182e:	5cf9      	ldrb	r1, [r7, r3]
    1830:	42a1      	cmp	r1, r4
    1832:	dcf2      	bgt.n	181a <_Z8receiverv+0x52>
		
		hmi.printf("t+ %d:%x\r\n",i,timeProt.receive[i]);
	}
	//vTaskDelay(21/portTICK_RATE_MS);
	if(!CLP_CheckPacketCRCFail(timeProt.receive, timeProt.length, false))
    1834:	4895      	ldr	r0, [pc, #596]	; (1a8c <_Z8receiverv+0x2c4>)
    1836:	30dc      	adds	r0, #220	; 0xdc
    1838:	2200      	movs	r2, #0
    183a:	4b99      	ldr	r3, [pc, #612]	; (1aa0 <_Z8receiverv+0x2d8>)
    183c:	4798      	blx	r3
    183e:	2800      	cmp	r0, #0
    1840:	d000      	beq.n	1844 <_Z8receiverv+0x7c>
    1842:	e11d      	b.n	1a80 <_Z8receiverv+0x2b8>
	{
		size_t datalength = CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw(timeProt.receive, timeProt.length, data.noParse);
    1844:	4b91      	ldr	r3, [pc, #580]	; (1a8c <_Z8receiverv+0x2c4>)
    1846:	1c18      	adds	r0, r3, #0
    1848:	30dc      	adds	r0, #220	; 0xdc
    184a:	223c      	movs	r2, #60	; 0x3c
    184c:	5c99      	ldrb	r1, [r3, r2]
    184e:	324e      	adds	r2, #78	; 0x4e
    1850:	446a      	add	r2, sp
    1852:	2300      	movs	r3, #0
    1854:	4c93      	ldr	r4, [pc, #588]	; (1aa4 <_Z8receiverv+0x2dc>)
    1856:	47a0      	blx	r4
		if(CLP_GetLastError() == CLP_LIB_ERROR_NONE)
    1858:	4b93      	ldr	r3, [pc, #588]	; (1aa8 <_Z8receiverv+0x2e0>)
    185a:	4798      	blx	r3
    185c:	2800      	cmp	r0, #0
    185e:	d000      	beq.n	1862 <_Z8receiverv+0x9a>
    1860:	e109      	b.n	1a76 <_Z8receiverv+0x2ae>
	}*/

			
			uint8_t indice=1;
			
			data.id=data.noParse[indice++];
    1862:	ab1a      	add	r3, sp, #104	; 0x68
    1864:	2223      	movs	r2, #35	; 0x23
    1866:	5c9a      	ldrb	r2, [r3, r2]
    1868:	705a      	strb	r2, [r3, #1]
			data.type=(Type)data.noParse[indice++];
    186a:	2224      	movs	r2, #36	; 0x24
    186c:	5c9a      	ldrb	r2, [r3, r2]
    186e:	701a      	strb	r2, [r3, #0]
			switch (data.type){
    1870:	2a03      	cmp	r2, #3
    1872:	d057      	beq.n	1924 <_Z8receiverv+0x15c>
    1874:	d802      	bhi.n	187c <_Z8receiverv+0xb4>
    1876:	2a01      	cmp	r2, #1
    1878:	d004      	beq.n	1884 <_Z8receiverv+0xbc>
    187a:	e0f8      	b.n	1a6e <_Z8receiverv+0x2a6>
    187c:	2a05      	cmp	r2, #5
    187e:	d800      	bhi.n	1882 <_Z8receiverv+0xba>
    1880:	e102      	b.n	1a88 <_Z8receiverv+0x2c0>
    1882:	e0f4      	b.n	1a6e <_Z8receiverv+0x2a6>
				#ifdef SLAVEMODE
					case SYNC:
						sendHMI("	sync receive");
    1884:	4889      	ldr	r0, [pc, #548]	; (1aac <_Z8receiverv+0x2e4>)
    1886:	4b8a      	ldr	r3, [pc, #552]	; (1ab0 <_Z8receiverv+0x2e8>)
    1888:	4798      	blx	r3
						data.length=data.noParse[indice++];
    188a:	ab1a      	add	r3, sp, #104	; 0x68
    188c:	2225      	movs	r2, #37	; 0x25
    188e:	5c9c      	ldrb	r4, [r3, r2]
    1890:	709c      	strb	r4, [r3, #2]
						for(i=0;i<data.length;i++){
    1892:	2c00      	cmp	r4, #0
    1894:	d011      	beq.n	18ba <_Z8receiverv+0xf2>
    1896:	238e      	movs	r3, #142	; 0x8e
    1898:	446b      	add	r3, sp
    189a:	1e60      	subs	r0, r4, #1
    189c:	b2c0      	uxtb	r0, r0
    189e:	aa32      	add	r2, sp, #200	; 0xc8
    18a0:	4694      	mov	ip, r2
    18a2:	4460      	add	r0, ip
    18a4:	3839      	subs	r0, #57	; 0x39
							data.data[i]=data.noParse[indice++];
    18a6:	7819      	ldrb	r1, [r3, #0]
    18a8:	1c1a      	adds	r2, r3, #0
    18aa:	3a23      	subs	r2, #35	; 0x23
    18ac:	7011      	strb	r1, [r2, #0]
    18ae:	3301      	adds	r3, #1
			switch (data.type){
				#ifdef SLAVEMODE
					case SYNC:
						sendHMI("	sync receive");
						data.length=data.noParse[indice++];
						for(i=0;i<data.length;i++){
    18b0:	4283      	cmp	r3, r0
    18b2:	d1f8      	bne.n	18a6 <_Z8receiverv+0xde>
    18b4:	3404      	adds	r4, #4
    18b6:	b2e4      	uxtb	r4, r4
    18b8:	e000      	b.n	18bc <_Z8receiverv+0xf4>
			data.type=(Type)data.noParse[indice++];
			switch (data.type){
				#ifdef SLAVEMODE
					case SYNC:
						sendHMI("	sync receive");
						data.length=data.noParse[indice++];
    18ba:	2404      	movs	r4, #4
						for(i=0;i<data.length;i++){
							data.data[i]=data.noParse[indice++];
						}
						data.crc=data.noParse[indice++];
    18bc:	ab1a      	add	r3, sp, #104	; 0x68
    18be:	191c      	adds	r4, r3, r4
    18c0:	3420      	adds	r4, #32
    18c2:	78a1      	ldrb	r1, [r4, #2]
    18c4:	2221      	movs	r2, #33	; 0x21
    18c6:	5499      	strb	r1, [r3, r2]
						//networkFlush();

						timeMaster.second=data.data[0]|(data.data[1]<<8);
    18c8:	791a      	ldrb	r2, [r3, #4]
    18ca:	0211      	lsls	r1, r2, #8
    18cc:	78da      	ldrb	r2, [r3, #3]
    18ce:	430a      	orrs	r2, r1
    18d0:	ae17      	add	r6, sp, #92	; 0x5c
    18d2:	9217      	str	r2, [sp, #92]	; 0x5c
						timeMaster.halfmillis=data.data[2]|(data.data[3]<<8);
    18d4:	799a      	ldrb	r2, [r3, #6]
    18d6:	0212      	lsls	r2, r2, #8
    18d8:	795b      	ldrb	r3, [r3, #5]
    18da:	4313      	orrs	r3, r2
    18dc:	9318      	str	r3, [sp, #96]	; 0x60
						timeMaster=sumClock(timeMaster,timeProt.delay);
    18de:	ac04      	add	r4, sp, #16
    18e0:	4d6a      	ldr	r5, [pc, #424]	; (1a8c <_Z8receiverv+0x2c4>)
    18e2:	1c2b      	adds	r3, r5, #0
    18e4:	3340      	adds	r3, #64	; 0x40
    18e6:	466a      	mov	r2, sp
    18e8:	cb83      	ldmia	r3!, {r0, r1, r7}
    18ea:	c283      	stmia	r2!, {r0, r1, r7}
    18ec:	1c20      	adds	r0, r4, #0
    18ee:	9917      	ldr	r1, [sp, #92]	; 0x5c
    18f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    18f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    18f4:	4f6f      	ldr	r7, [pc, #444]	; (1ab4 <_Z8receiverv+0x2ec>)
    18f6:	47b8      	blx	r7
    18f8:	1c23      	adds	r3, r4, #0
    18fa:	cb07      	ldmia	r3!, {r0, r1, r2}
    18fc:	c607      	stmia	r6!, {r0, r1, r2}
						timeProt.offset=subClock(timeMaster,timeProt.saveTime[0]);//on calcul le temps de calcul
    18fe:	466b      	mov	r3, sp
    1900:	1c2a      	adds	r2, r5, #0
    1902:	ca43      	ldmia	r2!, {r0, r1, r6}
    1904:	c343      	stmia	r3!, {r0, r1, r6}
    1906:	1c20      	adds	r0, r4, #0
    1908:	9917      	ldr	r1, [sp, #92]	; 0x5c
    190a:	6862      	ldr	r2, [r4, #4]
    190c:	68a3      	ldr	r3, [r4, #8]
    190e:	4e6a      	ldr	r6, [pc, #424]	; (1ab8 <_Z8receiverv+0x2f0>)
    1910:	47b0      	blx	r6
    1912:	3550      	adds	r5, #80	; 0x50
    1914:	cc0e      	ldmia	r4!, {r1, r2, r3}
    1916:	c50e      	stmia	r5!, {r1, r2, r3}
						updateClock();
    1918:	4b68      	ldr	r3, [pc, #416]	; (1abc <_Z8receiverv+0x2f4>)
    191a:	4798      	blx	r3
						sendHMI("	sync completed");
    191c:	4868      	ldr	r0, [pc, #416]	; (1ac0 <_Z8receiverv+0x2f8>)
    191e:	4b64      	ldr	r3, [pc, #400]	; (1ab0 <_Z8receiverv+0x2e8>)
    1920:	4798      	blx	r3
				

						
					break;
    1922:	e0b1      	b.n	1a88 <_Z8receiverv+0x2c0>
					case DELAYRESPONSE:
						data.length=data.noParse[indice++];
    1924:	ab1a      	add	r3, sp, #104	; 0x68
    1926:	2225      	movs	r2, #37	; 0x25
    1928:	5c9c      	ldrb	r4, [r3, r2]
    192a:	709c      	strb	r4, [r3, #2]
						for(i=0;i<data.length;i++){
    192c:	2c00      	cmp	r4, #0
    192e:	d011      	beq.n	1954 <_Z8receiverv+0x18c>
    1930:	238e      	movs	r3, #142	; 0x8e
    1932:	446b      	add	r3, sp
    1934:	1e60      	subs	r0, r4, #1
    1936:	b2c0      	uxtb	r0, r0
    1938:	aa32      	add	r2, sp, #200	; 0xc8
    193a:	4694      	mov	ip, r2
    193c:	4460      	add	r0, ip
    193e:	3839      	subs	r0, #57	; 0x39
							data.data[i]=data.noParse[indice++];
    1940:	7819      	ldrb	r1, [r3, #0]
    1942:	1c1a      	adds	r2, r3, #0
    1944:	3a23      	subs	r2, #35	; 0x23
    1946:	7011      	strb	r1, [r2, #0]
    1948:	3301      	adds	r3, #1

						
					break;
					case DELAYRESPONSE:
						data.length=data.noParse[indice++];
						for(i=0;i<data.length;i++){
    194a:	4283      	cmp	r3, r0
    194c:	d1f8      	bne.n	1940 <_Z8receiverv+0x178>
    194e:	3404      	adds	r4, #4
    1950:	b2e4      	uxtb	r4, r4
    1952:	e000      	b.n	1956 <_Z8receiverv+0x18e>
				

						
					break;
					case DELAYRESPONSE:
						data.length=data.noParse[indice++];
    1954:	2404      	movs	r4, #4
						for(i=0;i<data.length;i++){
							data.data[i]=data.noParse[indice++];
						}
						data.crc=data.noParse[indice++];
    1956:	ad1a      	add	r5, sp, #104	; 0x68
    1958:	192c      	adds	r4, r5, r4
    195a:	3420      	adds	r4, #32
    195c:	78a2      	ldrb	r2, [r4, #2]
    195e:	2321      	movs	r3, #33	; 0x21
    1960:	54ea      	strb	r2, [r5, r3]
						//networkFlush();
						sendHMI("	delay response receive");
    1962:	4858      	ldr	r0, [pc, #352]	; (1ac4 <_Z8receiverv+0x2fc>)
    1964:	4b52      	ldr	r3, [pc, #328]	; (1ab0 <_Z8receiverv+0x2e8>)
    1966:	4798      	blx	r3

						if(data.data[0]==IDDEVICE){
    1968:	78eb      	ldrb	r3, [r5, #3]
    196a:	2b02      	cmp	r3, #2
    196c:	d17b      	bne.n	1a66 <_Z8receiverv+0x29e>

							//time receive master
							t2.second=data.data[1]|(data.data[2]<<8);
    196e:	ab1a      	add	r3, sp, #104	; 0x68
    1970:	795a      	ldrb	r2, [r3, #5]
    1972:	0211      	lsls	r1, r2, #8
    1974:	791a      	ldrb	r2, [r3, #4]
    1976:	430a      	orrs	r2, r1
    1978:	9208      	str	r2, [sp, #32]
							t2.halfmillis=data.data[3]|(data.data[4]<<8);
    197a:	79da      	ldrb	r2, [r3, #7]
    197c:	0211      	lsls	r1, r2, #8
    197e:	799a      	ldrb	r2, [r3, #6]
    1980:	430a      	orrs	r2, r1
    1982:	9209      	str	r2, [sp, #36]	; 0x24
							//time send master
							t3.second=data.data[5]|(data.data[6]<<8);
    1984:	7a5a      	ldrb	r2, [r3, #9]
    1986:	0211      	lsls	r1, r2, #8
    1988:	7a1a      	ldrb	r2, [r3, #8]
    198a:	430a      	orrs	r2, r1
    198c:	ae0b      	add	r6, sp, #44	; 0x2c
    198e:	920b      	str	r2, [sp, #44]	; 0x2c
							t3.halfmillis=data.data[7]|(data.data[8]<<8);
    1990:	7ada      	ldrb	r2, [r3, #11]
    1992:	0212      	lsls	r2, r2, #8
    1994:	7a9b      	ldrb	r3, [r3, #10]
    1996:	4313      	orrs	r3, r2
    1998:	930c      	str	r3, [sp, #48]	; 0x30
							t2subt1=subClock(t2,timeProt.tx);
    199a:	4c3c      	ldr	r4, [pc, #240]	; (1a8c <_Z8receiverv+0x2c4>)
    199c:	1c23      	adds	r3, r4, #0
    199e:	330c      	adds	r3, #12
    19a0:	466a      	mov	r2, sp
    19a2:	cb23      	ldmia	r3!, {r0, r1, r5}
    19a4:	c223      	stmia	r2!, {r0, r1, r5}
    19a6:	a80e      	add	r0, sp, #56	; 0x38
    19a8:	9908      	ldr	r1, [sp, #32]
    19aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    19ae:	4f42      	ldr	r7, [pc, #264]	; (1ab8 <_Z8receiverv+0x2f0>)
    19b0:	47b8      	blx	r7
							t4subt3=subClock(timeProt.saveTime[0],t3);
    19b2:	ad11      	add	r5, sp, #68	; 0x44
    19b4:	466b      	mov	r3, sp
    19b6:	ce07      	ldmia	r6!, {r0, r1, r2}
    19b8:	c307      	stmia	r3!, {r0, r1, r2}
    19ba:	1c28      	adds	r0, r5, #0
    19bc:	6821      	ldr	r1, [r4, #0]
    19be:	6862      	ldr	r2, [r4, #4]
    19c0:	68a3      	ldr	r3, [r4, #8]
    19c2:	47b8      	blx	r7
							hmi.printf("T2: ");
							printfClock(t2);
							hmi.printf("T3: ");
							printfClock(t3);
							hmi.printf("T4: ");*/
							printfClock(timeProt.saveTime[0]);	
    19c4:	6820      	ldr	r0, [r4, #0]
    19c6:	6861      	ldr	r1, [r4, #4]
    19c8:	68a2      	ldr	r2, [r4, #8]
    19ca:	4b3f      	ldr	r3, [pc, #252]	; (1ac8 <_Z8receiverv+0x300>)
    19cc:	4798      	blx	r3
							delayL=sumClock(t2subt1,t4subt3);									
    19ce:	466b      	mov	r3, sp
    19d0:	1c2a      	adds	r2, r5, #0
    19d2:	ca43      	ldmia	r2!, {r0, r1, r6}
    19d4:	c343      	stmia	r3!, {r0, r1, r6}
    19d6:	a814      	add	r0, sp, #80	; 0x50
    19d8:	990e      	ldr	r1, [sp, #56]	; 0x38
    19da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    19dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    19de:	4e35      	ldr	r6, [pc, #212]	; (1ab4 <_Z8receiverv+0x2ec>)
    19e0:	47b0      	blx	r6
							timeProt.delay.second=delayL.second/2;
    19e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    19e4:	085b      	lsrs	r3, r3, #1
    19e6:	6423      	str	r3, [r4, #64]	; 0x40
							timeProt.delay.halfmillis=delayL.halfmillis/2;
    19e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    19ea:	085b      	lsrs	r3, r3, #1
    19ec:	6463      	str	r3, [r4, #68]	; 0x44
							timeProt.offset=subClock(t2subt1,t4subt3);
    19ee:	ae04      	add	r6, sp, #16
    19f0:	466b      	mov	r3, sp
    19f2:	cd07      	ldmia	r5!, {r0, r1, r2}
    19f4:	c307      	stmia	r3!, {r0, r1, r2}
    19f6:	1c30      	adds	r0, r6, #0
    19f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    19fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    19fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    19fe:	47b8      	blx	r7
    1a00:	1c23      	adds	r3, r4, #0
    1a02:	3350      	adds	r3, #80	; 0x50
    1a04:	ce07      	ldmia	r6!, {r0, r1, r2}
    1a06:	c307      	stmia	r3!, {r0, r1, r2}
							timeProt.offset.second=timeProt.offset.second/2;
    1a08:	6d23      	ldr	r3, [r4, #80]	; 0x50
    1a0a:	085b      	lsrs	r3, r3, #1
    1a0c:	6523      	str	r3, [r4, #80]	; 0x50
							timeProt.offset.halfmillis=timeProt.offset.halfmillis/2;
    1a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1a10:	085b      	lsrs	r3, r3, #1
    1a12:	6563      	str	r3, [r4, #84]	; 0x54
							updateClock();
    1a14:	4b29      	ldr	r3, [pc, #164]	; (1abc <_Z8receiverv+0x2f4>)
    1a16:	4798      	blx	r3
											
							if(timeProt.delay.sign==true){
    1a18:	2348      	movs	r3, #72	; 0x48
    1a1a:	5ce3      	ldrb	r3, [r4, r3]
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d00e      	beq.n	1a3e <_Z8receiverv+0x276>
								sprintf(messageHMIDelay,"		update delay: +%lus,%u ms,~%lu us",timeProt.delay.second,timeProt.delay.halfmillis/32,(timeProt.delay.halfmillis%32)*31);
    1a20:	491a      	ldr	r1, [pc, #104]	; (1a8c <_Z8receiverv+0x2c4>)
    1a22:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1a24:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1a26:	6c49      	ldr	r1, [r1, #68]	; 0x44
    1a28:	095b      	lsrs	r3, r3, #5
    1a2a:	201f      	movs	r0, #31
    1a2c:	4001      	ands	r1, r0
    1a2e:	0148      	lsls	r0, r1, #5
    1a30:	1a41      	subs	r1, r0, r1
    1a32:	9100      	str	r1, [sp, #0]
    1a34:	4825      	ldr	r0, [pc, #148]	; (1acc <_Z8receiverv+0x304>)
    1a36:	4926      	ldr	r1, [pc, #152]	; (1ad0 <_Z8receiverv+0x308>)
    1a38:	4c26      	ldr	r4, [pc, #152]	; (1ad4 <_Z8receiverv+0x30c>)
    1a3a:	47a0      	blx	r4
    1a3c:	e00d      	b.n	1a5a <_Z8receiverv+0x292>
							}
							else{
								sprintf(messageHMIDelay,"		update delay: -%lus,%u ms,~%lu us",timeProt.delay.second,timeProt.delay.halfmillis/32,(timeProt.delay.halfmillis%32)*31);
    1a3e:	4913      	ldr	r1, [pc, #76]	; (1a8c <_Z8receiverv+0x2c4>)
    1a40:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    1a42:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    1a44:	6c49      	ldr	r1, [r1, #68]	; 0x44
    1a46:	095b      	lsrs	r3, r3, #5
    1a48:	201f      	movs	r0, #31
    1a4a:	4001      	ands	r1, r0
    1a4c:	0148      	lsls	r0, r1, #5
    1a4e:	1a41      	subs	r1, r0, r1
    1a50:	9100      	str	r1, [sp, #0]
    1a52:	481e      	ldr	r0, [pc, #120]	; (1acc <_Z8receiverv+0x304>)
    1a54:	4920      	ldr	r1, [pc, #128]	; (1ad8 <_Z8receiverv+0x310>)
    1a56:	4c1f      	ldr	r4, [pc, #124]	; (1ad4 <_Z8receiverv+0x30c>)
    1a58:	47a0      	blx	r4
							}
							sendHMI(messageHMIDelay);
    1a5a:	481c      	ldr	r0, [pc, #112]	; (1acc <_Z8receiverv+0x304>)
    1a5c:	4c14      	ldr	r4, [pc, #80]	; (1ab0 <_Z8receiverv+0x2e8>)
    1a5e:	47a0      	blx	r4
							sendHMI("	delay response completed");
    1a60:	481e      	ldr	r0, [pc, #120]	; (1adc <_Z8receiverv+0x314>)
    1a62:	47a0      	blx	r4
    1a64:	e010      	b.n	1a88 <_Z8receiverv+0x2c0>
						}
						else{
							sendHMI("	delay response not for me");	
    1a66:	481e      	ldr	r0, [pc, #120]	; (1ae0 <_Z8receiverv+0x318>)
    1a68:	4b11      	ldr	r3, [pc, #68]	; (1ab0 <_Z8receiverv+0x2e8>)
    1a6a:	4798      	blx	r3
    1a6c:	e00c      	b.n	1a88 <_Z8receiverv+0x2c0>
						sendHMI("	delay request receive");		
														
					break;
				#endif
				default:
					sendHMI("	Erreur type unknow");
    1a6e:	481d      	ldr	r0, [pc, #116]	; (1ae4 <_Z8receiverv+0x31c>)
    1a70:	4b0f      	ldr	r3, [pc, #60]	; (1ab0 <_Z8receiverv+0x2e8>)
    1a72:	4798      	blx	r3
    1a74:	e008      	b.n	1a88 <_Z8receiverv+0x2c0>
					
									
			}		
		}
		else{
			hmi.printf("wrong type");
    1a76:	4806      	ldr	r0, [pc, #24]	; (1a90 <_Z8receiverv+0x2c8>)
    1a78:	491b      	ldr	r1, [pc, #108]	; (1ae8 <_Z8receiverv+0x320>)
    1a7a:	4b07      	ldr	r3, [pc, #28]	; (1a98 <_Z8receiverv+0x2d0>)
    1a7c:	4798      	blx	r3
    1a7e:	e003      	b.n	1a88 <_Z8receiverv+0x2c0>
		}
			
	}
	else{
		hmi.printf("error CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");	
    1a80:	4803      	ldr	r0, [pc, #12]	; (1a90 <_Z8receiverv+0x2c8>)
    1a82:	491a      	ldr	r1, [pc, #104]	; (1aec <_Z8receiverv+0x324>)
    1a84:	4b04      	ldr	r3, [pc, #16]	; (1a98 <_Z8receiverv+0x2d0>)
    1a86:	4798      	blx	r3
	}
}
    1a88:	b033      	add	sp, #204	; 0xcc
    1a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a8c:	2000049c 	.word	0x2000049c
    1a90:	20000270 	.word	0x20000270
    1a94:	0000fa84 	.word	0x0000fa84
    1a98:	000059b1 	.word	0x000059b1
    1a9c:	0000fa94 	.word	0x0000fa94
    1aa0:	00000201 	.word	0x00000201
    1aa4:	000003d9 	.word	0x000003d9
    1aa8:	00000325 	.word	0x00000325
    1aac:	0000faa0 	.word	0x0000faa0
    1ab0:	000005b1 	.word	0x000005b1
    1ab4:	00000dd5 	.word	0x00000dd5
    1ab8:	00000cd1 	.word	0x00000cd1
    1abc:	00001629 	.word	0x00001629
    1ac0:	0000fab0 	.word	0x0000fab0
    1ac4:	0000fac0 	.word	0x0000fac0
    1ac8:	000015e9 	.word	0x000015e9
    1acc:	200006a4 	.word	0x200006a4
    1ad0:	0000fad8 	.word	0x0000fad8
    1ad4:	0000c1cd 	.word	0x0000c1cd
    1ad8:	0000fafc 	.word	0x0000fafc
    1adc:	0000fb20 	.word	0x0000fb20
    1ae0:	0000fb3c 	.word	0x0000fb3c
    1ae4:	0000fb58 	.word	0x0000fb58
    1ae8:	0000fb6c 	.word	0x0000fb6c
    1aec:	0000fb78 	.word	0x0000fb78

00001af0 <_Z11calculCRCID8enumTypehPKhh>:

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
	return calculCRCID(type,length,data,IDDEVICE);
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
    1af0:	18cb      	adds	r3, r1, r3
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
    1af2:	18c0      	adds	r0, r0, r3
    1af4:	b2c0      	uxtb	r0, r0
	for(i=0;i<length;i++){
    1af6:	2900      	cmp	r1, #0
    1af8:	d00a      	beq.n	1b10 <_Z11calculCRCID8enumTypehPKhh+0x20>
    1afa:	1c13      	adds	r3, r2, #0
    1afc:	3901      	subs	r1, #1
    1afe:	b2c9      	uxtb	r1, r1
    1b00:	3101      	adds	r1, #1
    1b02:	1852      	adds	r2, r2, r1
		crc=crc+data[i];
    1b04:	7819      	ldrb	r1, [r3, #0]
    1b06:	1840      	adds	r0, r0, r1
    1b08:	b2c0      	uxtb	r0, r0
    1b0a:	3301      	adds	r3, #1
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
	for(i=0;i<length;i++){
    1b0c:	4293      	cmp	r3, r2
    1b0e:	d1f9      	bne.n	1b04 <_Z11calculCRCID8enumTypehPKhh+0x14>
		crc=crc+data[i];
	}
	
	return crc;
    1b10:	4770      	bx	lr
    1b12:	46c0      	nop			; (mov r8, r8)

00001b14 <_Z9calculCRC8enumTypehPKh>:
		for(i=0;i<packetsize;i++){
			radio->putc(packet[i]);
		}

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
    1b14:	b510      	push	{r4, lr}
	return calculCRCID(type,length,data,IDDEVICE);
    1b16:	2302      	movs	r3, #2
    1b18:	4c01      	ldr	r4, [pc, #4]	; (1b20 <_Z9calculCRC8enumTypehPKh+0xc>)
    1b1a:	47a0      	blx	r4
}
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	00001af1 	.word	0x00001af1

00001b24 <_Z4send8enumTypehPKh>:

	
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
    1b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b26:	4657      	mov	r7, sl
    1b28:	4646      	mov	r6, r8
    1b2a:	b4c0      	push	{r6, r7}
    1b2c:	b0cd      	sub	sp, #308	; 0x134
    1b2e:	af00      	add	r7, sp, #0
    1b30:	1c0c      	adds	r4, r1, #0
		uint8_t i;
		uint8_t j=0;
		uint8_t send[length+4];//to complete
    1b32:	1c0b      	adds	r3, r1, #0
    1b34:	330b      	adds	r3, #11
    1b36:	08db      	lsrs	r3, r3, #3
    1b38:	00db      	lsls	r3, r3, #3
    1b3a:	4669      	mov	r1, sp
    1b3c:	1acb      	subs	r3, r1, r3
    1b3e:	469d      	mov	sp, r3
    1b40:	466d      	mov	r5, sp
		send[0]=HEADER;
    1b42:	2310      	movs	r3, #16
    1b44:	702b      	strb	r3, [r5, #0]
		send[1]=IDDEVICE;	
    1b46:	3b0e      	subs	r3, #14
    1b48:	706b      	strb	r3, [r5, #1]
		send[2]=type;
    1b4a:	70a8      	strb	r0, [r5, #2]
		if(length!=0){
    1b4c:	2c00      	cmp	r4, #0
    1b4e:	d00c      	beq.n	1b6a <_Z4send8enumTypehPKh+0x46>
			send[3]=length;//length data
    1b50:	70ec      	strb	r4, [r5, #3]
    1b52:	2100      	movs	r1, #0
    1b54:	186b      	adds	r3, r5, r1
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
    1b56:	5c56      	ldrb	r6, [r2, r1]
    1b58:	711e      	strb	r6, [r3, #4]
    1b5a:	3101      	adds	r1, #1
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    1b5c:	b2cb      	uxtb	r3, r1
    1b5e:	429c      	cmp	r4, r3
    1b60:	d8f8      	bhi.n	1b54 <_Z4send8enumTypehPKh+0x30>
    1b62:	1c23      	adds	r3, r4, #0
		send[0]=HEADER;
		send[1]=IDDEVICE;	
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
    1b64:	2101      	movs	r1, #1
    1b66:	4688      	mov	r8, r1
    1b68:	e001      	b.n	1b6e <_Z4send8enumTypehPKh+0x4a>
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
		uint8_t i;
		uint8_t j=0;
    1b6a:	2300      	movs	r3, #0
    1b6c:	4698      	mov	r8, r3
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
		}
		send[3+i+j]=calculCRC(type,length,data);
    1b6e:	3303      	adds	r3, #3
    1b70:	4443      	add	r3, r8
    1b72:	1c1e      	adds	r6, r3, #0
    1b74:	1c21      	adds	r1, r4, #0
    1b76:	4b1a      	ldr	r3, [pc, #104]	; (1be0 <_Z4send8enumTypehPKh+0xbc>)
    1b78:	4798      	blx	r3
    1b7a:	55a8      	strb	r0, [r5, r6]

		ChannelRadio* radio = ChannelRadio::GetChannel();
    1b7c:	4b19      	ldr	r3, [pc, #100]	; (1be4 <_Z4send8enumTypehPKh+0xc0>)
    1b7e:	4798      	blx	r3
    1b80:	1c06      	adds	r6, r0, #0
		/*hmi.printf("length %d\r\n",length+4+j );
		for(i=0;i<length+4+j;i++){	
			hmi.printf("send %d: %x\r\n",i,send[i]);
		}
		*/
		size_t packetsize = CLP_EXTENSION_GenerateTimeSyncPacket(packet, NULL, send, length+4+j);
    1b82:	3404      	adds	r4, #4
    1b84:	1c23      	adds	r3, r4, #0
    1b86:	4443      	add	r3, r8
    1b88:	1d38      	adds	r0, r7, #4
    1b8a:	2100      	movs	r1, #0
    1b8c:	1c2a      	adds	r2, r5, #0
    1b8e:	4c16      	ldr	r4, [pc, #88]	; (1be8 <_Z4send8enumTypehPKh+0xc4>)
    1b90:	47a0      	blx	r4
    1b92:	1c05      	adds	r5, r0, #0
		
		hmi.printf("length %d\r\n",packetsize );
    1b94:	4815      	ldr	r0, [pc, #84]	; (1bec <_Z4send8enumTypehPKh+0xc8>)
    1b96:	4916      	ldr	r1, [pc, #88]	; (1bf0 <_Z4send8enumTypehPKh+0xcc>)
    1b98:	1c2a      	adds	r2, r5, #0
    1b9a:	4b16      	ldr	r3, [pc, #88]	; (1bf4 <_Z4send8enumTypehPKh+0xd0>)
    1b9c:	4798      	blx	r3
		for(i=0;i<packetsize;i++){	
    1b9e:	2d00      	cmp	r5, #0
    1ba0:	d017      	beq.n	1bd2 <_Z4send8enumTypehPKh+0xae>
    1ba2:	2400      	movs	r4, #0
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
    1ba4:	4b13      	ldr	r3, [pc, #76]	; (1bf4 <_Z4send8enumTypehPKh+0xd0>)
    1ba6:	469a      	mov	sl, r3
    1ba8:	1d3b      	adds	r3, r7, #4
    1baa:	5d1b      	ldrb	r3, [r3, r4]
    1bac:	480f      	ldr	r0, [pc, #60]	; (1bec <_Z4send8enumTypehPKh+0xc8>)
    1bae:	4912      	ldr	r1, [pc, #72]	; (1bf8 <_Z4send8enumTypehPKh+0xd4>)
    1bb0:	1c22      	adds	r2, r4, #0
    1bb2:	47d0      	blx	sl
		}
		*/
		size_t packetsize = CLP_EXTENSION_GenerateTimeSyncPacket(packet, NULL, send, length+4+j);
		
		hmi.printf("length %d\r\n",packetsize );
		for(i=0;i<packetsize;i++){	
    1bb4:	3401      	adds	r4, #1
    1bb6:	b2e4      	uxtb	r4, r4
    1bb8:	42a5      	cmp	r5, r4
    1bba:	d8f5      	bhi.n	1ba8 <_Z4send8enumTypehPKh+0x84>
    1bbc:	2400      	movs	r4, #0
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
		}
		//vTaskDelay(100/portTICK_RATE_MS);
		for(i=0;i<packetsize;i++){
			radio->putc(packet[i]);
    1bbe:	6833      	ldr	r3, [r6, #0]
    1bc0:	1d3a      	adds	r2, r7, #4
    1bc2:	5d11      	ldrb	r1, [r2, r4]
    1bc4:	689b      	ldr	r3, [r3, #8]
    1bc6:	1c30      	adds	r0, r6, #0
    1bc8:	4798      	blx	r3
		hmi.printf("length %d\r\n",packetsize );
		for(i=0;i<packetsize;i++){	
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
		}
		//vTaskDelay(100/portTICK_RATE_MS);
		for(i=0;i<packetsize;i++){
    1bca:	3401      	adds	r4, #1
    1bcc:	b2e4      	uxtb	r4, r4
    1bce:	42a5      	cmp	r5, r4
    1bd0:	d8f5      	bhi.n	1bbe <_Z4send8enumTypehPKh+0x9a>
			radio->putc(packet[i]);
		}

}
    1bd2:	46bd      	mov	sp, r7
    1bd4:	b04d      	add	sp, #308	; 0x134
    1bd6:	bc0c      	pop	{r2, r3}
    1bd8:	4690      	mov	r8, r2
    1bda:	469a      	mov	sl, r3
    1bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	00001b15 	.word	0x00001b15
    1be4:	00003f0d 	.word	0x00003f0d
    1be8:	0000036d 	.word	0x0000036d
    1bec:	20000270 	.word	0x20000270
    1bf0:	0000fba0 	.word	0x0000fba0
    1bf4:	000059b1 	.word	0x000059b1
    1bf8:	0000fbac 	.word	0x0000fbac

00001bfc <_Z12delayRequestv>:
	sprintf(messageHMI,"	delay response send (id: %d)",id);
	sendHMI(messageHMI);
}
#endif
#ifdef SLAVEMODE
void delayRequest(void){
    1bfc:	b508      	push	{r3, lr}
	Type type=DELAYREQUEST;

	readClock(&timeProt.tx);
    1bfe:	4806      	ldr	r0, [pc, #24]	; (1c18 <_Z12delayRequestv+0x1c>)
    1c00:	300c      	adds	r0, #12
    1c02:	4b06      	ldr	r3, [pc, #24]	; (1c1c <_Z12delayRequestv+0x20>)
    1c04:	4798      	blx	r3
	//pc.printf("timeCounter:%ld\r\n",RTC->MODE0.COUNT.bit.COUNT);
	send(type,0,NULL);
    1c06:	2002      	movs	r0, #2
    1c08:	2100      	movs	r1, #0
    1c0a:	2200      	movs	r2, #0
    1c0c:	4b04      	ldr	r3, [pc, #16]	; (1c20 <_Z12delayRequestv+0x24>)
    1c0e:	4798      	blx	r3

	
	sendHMI("	delay request send");
    1c10:	4804      	ldr	r0, [pc, #16]	; (1c24 <_Z12delayRequestv+0x28>)
    1c12:	4b05      	ldr	r3, [pc, #20]	; (1c28 <_Z12delayRequestv+0x2c>)
    1c14:	4798      	blx	r3
}
    1c16:	bd08      	pop	{r3, pc}
    1c18:	2000049c 	.word	0x2000049c
    1c1c:	000007b5 	.word	0x000007b5
    1c20:	00001b25 	.word	0x00001b25
    1c24:	0000fbbc 	.word	0x0000fbbc
    1c28:	000005b1 	.word	0x000005b1

00001c2c <_Z6senderv>:
	}
}



void sender(void){
    1c2c:	b508      	push	{r3, lr}
	if(xTaskGetTickCount()-saveSync>(TIMESYNC/portTICK_RATE_MS)){
		saveSync=xTaskGetTickCount();
		sync();
	}
	#else
	if(xTaskGetTickCount()-saveDRequest>(TIMEDELAYREQUEST/portTICK_RATE_MS)){
    1c2e:	4b07      	ldr	r3, [pc, #28]	; (1c4c <_Z6senderv+0x20>)
    1c30:	4798      	blx	r3
    1c32:	4b07      	ldr	r3, [pc, #28]	; (1c50 <_Z6senderv+0x24>)
    1c34:	681b      	ldr	r3, [r3, #0]
    1c36:	1ac0      	subs	r0, r0, r3
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <_Z6senderv+0x28>)
    1c3a:	4298      	cmp	r0, r3
    1c3c:	d905      	bls.n	1c4a <_Z6senderv+0x1e>
		saveDRequest=xTaskGetTickCount();
    1c3e:	4b03      	ldr	r3, [pc, #12]	; (1c4c <_Z6senderv+0x20>)
    1c40:	4798      	blx	r3
    1c42:	4b03      	ldr	r3, [pc, #12]	; (1c50 <_Z6senderv+0x24>)
    1c44:	6018      	str	r0, [r3, #0]
		delayRequest();
    1c46:	4b04      	ldr	r3, [pc, #16]	; (1c58 <_Z6senderv+0x2c>)
    1c48:	4798      	blx	r3
	}
	#endif

}
    1c4a:	bd08      	pop	{r3, pc}
    1c4c:	000025e9 	.word	0x000025e9
    1c50:	200003c4 	.word	0x200003c4
    1c54:	0000ea60 	.word	0x0000ea60
    1c58:	00001bfd 	.word	0x00001bfd

00001c5c <_Z16timeProtocolTaskv>:
		
	}
	return false;	
}

void timeProtocolTask(void){
    1c5c:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c5e:	b672      	cpsid	i
    1c60:	f3bf 8f5f 	dmb	sy
			}
			correction();	
	}	 
	vTaskDelay(500/portTICK_RATE_MS);
	*/
Disable_global_interrupt();
    1c64:	4d20      	ldr	r5, [pc, #128]	; (1ce8 <_Z16timeProtocolTaskv+0x8c>)
    1c66:	2200      	movs	r2, #0
    1c68:	702a      	strb	r2, [r5, #0]
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
			timeProt.saveTime[i].second=0;
		}
	#else
	
	timeProt.rx.sign=true;
    1c6a:	4b20      	ldr	r3, [pc, #128]	; (1cec <_Z16timeProtocolTaskv+0x90>)
    1c6c:	2401      	movs	r4, #1
    1c6e:	2138      	movs	r1, #56	; 0x38
    1c70:	545c      	strb	r4, [r3, r1]
	timeProt.rxDelay.sign=true;
    1c72:	390c      	subs	r1, #12
    1c74:	545c      	strb	r4, [r3, r1]
	timeProt.rxSync.sign=true;
    1c76:	390c      	subs	r1, #12
    1c78:	545c      	strb	r4, [r3, r1]
	timeProt.tx.sign=true;
    1c7a:	751c      	strb	r4, [r3, #20]
	#endif
	timeProt.correction.nbCorrection=0;
    1c7c:	65da      	str	r2, [r3, #92]	; 0x5c

	
	sumOffset.second=0;
    1c7e:	491c      	ldr	r1, [pc, #112]	; (1cf0 <_Z16timeProtocolTaskv+0x94>)
    1c80:	600a      	str	r2, [r1, #0]
	sumOffset.halfmillis=0;
    1c82:	604a      	str	r2, [r1, #4]
	sumOffset.sign=true;
    1c84:	720c      	strb	r4, [r1, #8]
	
	
	timeProt.correction.currentTimeOffsetSync.second=0;
    1c86:	671a      	str	r2, [r3, #112]	; 0x70
	timeProt.correction.currentTimeOffsetSync.halfmillis=0;
    1c88:	675a      	str	r2, [r3, #116]	; 0x74
	timeProt.correction.currentTimeOffsetSync.sign=true;
    1c8a:	2178      	movs	r1, #120	; 0x78
    1c8c:	545c      	strb	r4, [r3, r1]
	
	
	timeProt.correction.previoustimeOffset.second=0;
    1c8e:	665a      	str	r2, [r3, #100]	; 0x64
	timeProt.correction.previoustimeOffset.halfmillis=0;
    1c90:	669a      	str	r2, [r3, #104]	; 0x68
	timeProt.correction.previoustimeOffset.sign=true;
    1c92:	390c      	subs	r1, #12
    1c94:	545c      	strb	r4, [r3, r1]
	
	
	//timeProt.correction.timeSoftCor=0;
	timeProt.correction.indiceMoySoftCor=0;
    1c96:	316c      	adds	r1, #108	; 0x6c
    1c98:	545a      	strb	r2, [r3, r1]
	timeProt.correction.indiceFull=0;
    1c9a:	3101      	adds	r1, #1
    1c9c:	545a      	strb	r2, [r3, r1]


	timeProt.delay.second=0;
    1c9e:	641a      	str	r2, [r3, #64]	; 0x40
	timeProt.delay.halfmillis=0;
    1ca0:	645a      	str	r2, [r3, #68]	; 0x44
	timeProt.delay.sign=true;
    1ca2:	3991      	subs	r1, #145	; 0x91
    1ca4:	545c      	strb	r4, [r3, r1]
	timeProt.waitIdentifier=false;
    1ca6:	390b      	subs	r1, #11
    1ca8:	545a      	strb	r2, [r3, r1]
	xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS);
    1caa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    1cac:	2100      	movs	r1, #0
    1cae:	32f5      	adds	r2, #245	; 0xf5
    1cb0:	32ff      	adds	r2, #255	; 0xff
    1cb2:	2300      	movs	r3, #0
    1cb4:	4e0f      	ldr	r6, [pc, #60]	; (1cf4 <_Z16timeProtocolTaskv+0x98>)
    1cb6:	47b0      	blx	r6
	Enable_global_interrupt();
    1cb8:	702c      	strb	r4, [r5, #0]
    1cba:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1cbe:	b662      	cpsie	i
	while(1){
		sender();
    1cc0:	4d0d      	ldr	r5, [pc, #52]	; (1cf8 <_Z16timeProtocolTaskv+0x9c>)
		if(timeProt.synchroTimeReceive!=NULL){
    1cc2:	4c0a      	ldr	r4, [pc, #40]	; (1cec <_Z16timeProtocolTaskv+0x90>)
				if( xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS) == pdTRUE ){
    1cc4:	4e0b      	ldr	r6, [pc, #44]	; (1cf4 <_Z16timeProtocolTaskv+0x98>)
	timeProt.delay.sign=true;
	timeProt.waitIdentifier=false;
	xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS);
	Enable_global_interrupt();
	while(1){
		sender();
    1cc6:	47a8      	blx	r5
		if(timeProt.synchroTimeReceive!=NULL){
    1cc8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1cca:	2800      	cmp	r0, #0
    1ccc:	d008      	beq.n	1ce0 <_Z16timeProtocolTaskv+0x84>
				if( xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS) == pdTRUE ){
    1cce:	2100      	movs	r1, #0
    1cd0:	22fa      	movs	r2, #250	; 0xfa
    1cd2:	0052      	lsls	r2, r2, #1
    1cd4:	2300      	movs	r3, #0
    1cd6:	47b0      	blx	r6
    1cd8:	2801      	cmp	r0, #1
    1cda:	d101      	bne.n	1ce0 <_Z16timeProtocolTaskv+0x84>
					receiver();
    1cdc:	4b07      	ldr	r3, [pc, #28]	; (1cfc <_Z16timeProtocolTaskv+0xa0>)
    1cde:	4798      	blx	r3
				}		
		}
		correction();
    1ce0:	4b07      	ldr	r3, [pc, #28]	; (1d00 <_Z16timeProtocolTaskv+0xa4>)
    1ce2:	4798      	blx	r3
		
	}
	return false;	
}

void timeProtocolTask(void){
    1ce4:	e7ef      	b.n	1cc6 <_Z16timeProtocolTaskv+0x6a>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	200000d0 	.word	0x200000d0
    1cec:	2000049c 	.word	0x2000049c
    1cf0:	200003c8 	.word	0x200003c8
    1cf4:	00002125 	.word	0x00002125
    1cf8:	00001c2d 	.word	0x00001c2d
    1cfc:	000017c9 	.word	0x000017c9
    1d00:	000015a1 	.word	0x000015a1

00001d04 <_Z12kernelConfigv>:
 * Created: 13/05/2016 16:34:52
 *  Author: MORAND Baptiste
 */ 
#include "utask.h"

void kernelConfig(void){	
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	b085      	sub	sp, #20
	// tasks creations
	timeProt.synchroTimeReceive=NULL;
    1d08:	4c19      	ldr	r4, [pc, #100]	; (1d70 <_Z12kernelConfigv+0x6c>)
    1d0a:	2300      	movs	r3, #0
    1d0c:	64e3      	str	r3, [r4, #76]	; 0x4c
	vSemaphoreCreateBinary(timeProt.synchroTimeReceive);
    1d0e:	2001      	movs	r0, #1
    1d10:	2100      	movs	r1, #0
    1d12:	2203      	movs	r2, #3
    1d14:	4b17      	ldr	r3, [pc, #92]	; (1d74 <_Z12kernelConfigv+0x70>)
    1d16:	4798      	blx	r3
    1d18:	64e0      	str	r0, [r4, #76]	; 0x4c
    1d1a:	2800      	cmp	r0, #0
    1d1c:	d004      	beq.n	1d28 <_Z12kernelConfigv+0x24>
    1d1e:	2100      	movs	r1, #0
    1d20:	2200      	movs	r2, #0
    1d22:	2300      	movs	r3, #0
    1d24:	4c14      	ldr	r4, [pc, #80]	; (1d78 <_Z12kernelConfigv+0x74>)
    1d26:	47a0      	blx	r4
	xTaskCreate((pdTASK_CODE)HMITask,(const signed char*)"HMITask",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    1d28:	2696      	movs	r6, #150	; 0x96
    1d2a:	0076      	lsls	r6, r6, #1
    1d2c:	2701      	movs	r7, #1
    1d2e:	9700      	str	r7, [sp, #0]
    1d30:	2400      	movs	r4, #0
    1d32:	9401      	str	r4, [sp, #4]
    1d34:	9402      	str	r4, [sp, #8]
    1d36:	9403      	str	r4, [sp, #12]
    1d38:	4810      	ldr	r0, [pc, #64]	; (1d7c <_Z12kernelConfigv+0x78>)
    1d3a:	4911      	ldr	r1, [pc, #68]	; (1d80 <_Z12kernelConfigv+0x7c>)
    1d3c:	1c32      	adds	r2, r6, #0
    1d3e:	2300      	movs	r3, #0
    1d40:	4d10      	ldr	r5, [pc, #64]	; (1d84 <_Z12kernelConfigv+0x80>)
    1d42:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)smartMeterTask,(const signed char*)"SmartMeterTask",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    1d44:	9700      	str	r7, [sp, #0]
    1d46:	9401      	str	r4, [sp, #4]
    1d48:	9402      	str	r4, [sp, #8]
    1d4a:	9403      	str	r4, [sp, #12]
    1d4c:	480e      	ldr	r0, [pc, #56]	; (1d88 <_Z12kernelConfigv+0x84>)
    1d4e:	490f      	ldr	r1, [pc, #60]	; (1d8c <_Z12kernelConfigv+0x88>)
    1d50:	1c32      	adds	r2, r6, #0
    1d52:	2300      	movs	r3, #0
    1d54:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)timeProtocolTask,(const signed char*)"time",configMINIMAL_STACK_SIZE+600,NULL, tskIDLE_PRIORITY +3, NULL);
    1d56:	2303      	movs	r3, #3
    1d58:	9300      	str	r3, [sp, #0]
    1d5a:	9401      	str	r4, [sp, #4]
    1d5c:	9402      	str	r4, [sp, #8]
    1d5e:	9403      	str	r4, [sp, #12]
    1d60:	480b      	ldr	r0, [pc, #44]	; (1d90 <_Z12kernelConfigv+0x8c>)
    1d62:	490c      	ldr	r1, [pc, #48]	; (1d94 <_Z12kernelConfigv+0x90>)
    1d64:	22e1      	movs	r2, #225	; 0xe1
    1d66:	0092      	lsls	r2, r2, #2
    1d68:	2300      	movs	r3, #0
    1d6a:	47a8      	blx	r5
}
    1d6c:	b005      	add	sp, #20
    1d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d70:	2000049c 	.word	0x2000049c
    1d74:	00001f45 	.word	0x00001f45
    1d78:	00001f95 	.word	0x00001f95
    1d7c:	00000549 	.word	0x00000549
    1d80:	0000fbd0 	.word	0x0000fbd0
    1d84:	00002395 	.word	0x00002395
    1d88:	00000665 	.word	0x00000665
    1d8c:	0000fbd8 	.word	0x0000fbd8
    1d90:	00001c5d 	.word	0x00001c5d
    1d94:	0000fbe8 	.word	0x0000fbe8

00001d98 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1d98:	b510      	push	{r4, lr}
    1d9a:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1d9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d108      	bne.n	1db4 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1da2:	6803      	ldr	r3, [r0, #0]
    1da4:	2b00      	cmp	r3, #0
    1da6:	d126      	bne.n	1df6 <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1da8:	6840      	ldr	r0, [r0, #4]
    1daa:	4b15      	ldr	r3, [pc, #84]	; (1e00 <prvCopyDataToQueue+0x68>)
    1dac:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1dae:	2300      	movs	r3, #0
    1db0:	6063      	str	r3, [r4, #4]
    1db2:	e020      	b.n	1df6 <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    1db4:	2a00      	cmp	r2, #0
    1db6:	d10e      	bne.n	1dd6 <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1db8:	6880      	ldr	r0, [r0, #8]
    1dba:	1c1a      	adds	r2, r3, #0
    1dbc:	4b11      	ldr	r3, [pc, #68]	; (1e04 <prvCopyDataToQueue+0x6c>)
    1dbe:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1dc0:	68a3      	ldr	r3, [r4, #8]
    1dc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1dc4:	4694      	mov	ip, r2
    1dc6:	4463      	add	r3, ip
    1dc8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1dca:	6862      	ldr	r2, [r4, #4]
    1dcc:	4293      	cmp	r3, r2
    1dce:	d312      	bcc.n	1df6 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1dd0:	6823      	ldr	r3, [r4, #0]
    1dd2:	60a3      	str	r3, [r4, #8]
    1dd4:	e00f      	b.n	1df6 <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1dd6:	68c0      	ldr	r0, [r0, #12]
    1dd8:	1c1a      	adds	r2, r3, #0
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <prvCopyDataToQueue+0x6c>)
    1ddc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1de0:	425b      	negs	r3, r3
    1de2:	68e2      	ldr	r2, [r4, #12]
    1de4:	18d2      	adds	r2, r2, r3
    1de6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1de8:	6821      	ldr	r1, [r4, #0]
    1dea:	428a      	cmp	r2, r1
    1dec:	d203      	bcs.n	1df6 <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1dee:	6862      	ldr	r2, [r4, #4]
    1df0:	4694      	mov	ip, r2
    1df2:	4463      	add	r3, ip
    1df4:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    1df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1df8:	3301      	adds	r3, #1
    1dfa:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1dfc:	bd10      	pop	{r4, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	00002af1 	.word	0x00002af1
    1e04:	0000a9df 	.word	0x0000a9df

00001e08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1e08:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1e0a:	6804      	ldr	r4, [r0, #0]
    1e0c:	2c00      	cmp	r4, #0
    1e0e:	d00c      	beq.n	1e2a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1e10:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1e12:	68c3      	ldr	r3, [r0, #12]
    1e14:	189b      	adds	r3, r3, r2
    1e16:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1e18:	6845      	ldr	r5, [r0, #4]
    1e1a:	42ab      	cmp	r3, r5
    1e1c:	d300      	bcc.n	1e20 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1e1e:	60c4      	str	r4, [r0, #12]
    1e20:	1c0b      	adds	r3, r1, #0
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    1e22:	68c1      	ldr	r1, [r0, #12]
    1e24:	1c18      	adds	r0, r3, #0
    1e26:	4b01      	ldr	r3, [pc, #4]	; (1e2c <prvCopyDataFromQueue+0x24>)
    1e28:	4798      	blx	r3
	}
}
    1e2a:	bd38      	pop	{r3, r4, r5, pc}
    1e2c:	0000a9df 	.word	0x0000a9df

00001e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
    1e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e32:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1e34:	4b21      	ldr	r3, [pc, #132]	; (1ebc <prvUnlockQueue+0x8c>)
    1e36:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	dd16      	ble.n	1e6c <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e40:	2b00      	cmp	r3, #0
    1e42:	d104      	bne.n	1e4e <prvUnlockQueue+0x1e>
    1e44:	e012      	b.n	1e6c <prvUnlockQueue+0x3c>
    1e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d104      	bne.n	1e56 <prvUnlockQueue+0x26>
    1e4c:	e00e      	b.n	1e6c <prvUnlockQueue+0x3c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e4e:	1c25      	adds	r5, r4, #0
    1e50:	3524      	adds	r5, #36	; 0x24
    1e52:	4f1b      	ldr	r7, [pc, #108]	; (1ec0 <prvUnlockQueue+0x90>)
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    1e54:	4e1b      	ldr	r6, [pc, #108]	; (1ec4 <prvUnlockQueue+0x94>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1e56:	1c28      	adds	r0, r5, #0
    1e58:	47b8      	blx	r7
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d000      	beq.n	1e60 <prvUnlockQueue+0x30>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    1e5e:	47b0      	blx	r6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    1e60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e62:	3b01      	subs	r3, #1
    1e64:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    1e66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1e68:	2b00      	cmp	r3, #0
    1e6a:	dcec      	bgt.n	1e46 <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    1e6c:	2301      	movs	r3, #1
    1e6e:	425b      	negs	r3, r3
    1e70:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    1e72:	4b15      	ldr	r3, [pc, #84]	; (1ec8 <prvUnlockQueue+0x98>)
    1e74:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1e76:	4b11      	ldr	r3, [pc, #68]	; (1ebc <prvUnlockQueue+0x8c>)
    1e78:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1e7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	dd16      	ble.n	1eae <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1e80:	6923      	ldr	r3, [r4, #16]
    1e82:	2b00      	cmp	r3, #0
    1e84:	d104      	bne.n	1e90 <prvUnlockQueue+0x60>
    1e86:	e012      	b.n	1eae <prvUnlockQueue+0x7e>
    1e88:	6923      	ldr	r3, [r4, #16]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	d104      	bne.n	1e98 <prvUnlockQueue+0x68>
    1e8e:	e00e      	b.n	1eae <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e90:	1c25      	adds	r5, r4, #0
    1e92:	3510      	adds	r5, #16
    1e94:	4f0a      	ldr	r7, [pc, #40]	; (1ec0 <prvUnlockQueue+0x90>)
				{
					vTaskMissedYield();
    1e96:	4e0b      	ldr	r6, [pc, #44]	; (1ec4 <prvUnlockQueue+0x94>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1e98:	1c28      	adds	r0, r5, #0
    1e9a:	47b8      	blx	r7
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d000      	beq.n	1ea2 <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
    1ea0:	47b0      	blx	r6
				}

				--( pxQueue->xRxLock );
    1ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ea4:	3b01      	subs	r3, #1
    1ea6:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1ea8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1eaa:	2b00      	cmp	r3, #0
    1eac:	dcec      	bgt.n	1e88 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1eae:	2301      	movs	r3, #1
    1eb0:	425b      	negs	r3, r3
    1eb2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    1eb4:	4b04      	ldr	r3, [pc, #16]	; (1ec8 <prvUnlockQueue+0x98>)
    1eb6:	4798      	blx	r3
}
    1eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	00002bb9 	.word	0x00002bb9
    1ec0:	00002951 	.word	0x00002951
    1ec4:	00002a5d 	.word	0x00002a5d
    1ec8:	00002bd1 	.word	0x00002bd1

00001ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
    1ecc:	b538      	push	{r3, r4, r5, lr}
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1ece:	2800      	cmp	r0, #0
    1ed0:	d101      	bne.n	1ed6 <xQueueGenericReset+0xa>
    1ed2:	b672      	cpsid	i
    1ed4:	e7fe      	b.n	1ed4 <xQueueGenericReset+0x8>
    1ed6:	1c0d      	adds	r5, r1, #0
    1ed8:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    1eda:	4b15      	ldr	r3, [pc, #84]	; (1f30 <xQueueGenericReset+0x64>)
    1edc:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ede:	6822      	ldr	r2, [r4, #0]
    1ee0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1ee2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1ee4:	434b      	muls	r3, r1
    1ee6:	18d0      	adds	r0, r2, r3
    1ee8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1eea:	2000      	movs	r0, #0
    1eec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1eee:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    1ef0:	1a5b      	subs	r3, r3, r1
    1ef2:	18d3      	adds	r3, r2, r3
    1ef4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    1ef6:	2301      	movs	r3, #1
    1ef8:	425b      	negs	r3, r3
    1efa:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1efc:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1efe:	2d00      	cmp	r5, #0
    1f00:	d10b      	bne.n	1f1a <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1f02:	6923      	ldr	r3, [r4, #16]
    1f04:	2b00      	cmp	r3, #0
    1f06:	d00f      	beq.n	1f28 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1f08:	1c20      	adds	r0, r4, #0
    1f0a:	3010      	adds	r0, #16
    1f0c:	4b09      	ldr	r3, [pc, #36]	; (1f34 <xQueueGenericReset+0x68>)
    1f0e:	4798      	blx	r3
    1f10:	2801      	cmp	r0, #1
    1f12:	d109      	bne.n	1f28 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
    1f14:	4b08      	ldr	r3, [pc, #32]	; (1f38 <xQueueGenericReset+0x6c>)
    1f16:	4798      	blx	r3
    1f18:	e006      	b.n	1f28 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1f1a:	1c20      	adds	r0, r4, #0
    1f1c:	3010      	adds	r0, #16
    1f1e:	4d07      	ldr	r5, [pc, #28]	; (1f3c <xQueueGenericReset+0x70>)
    1f20:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1f22:	1c20      	adds	r0, r4, #0
    1f24:	3024      	adds	r0, #36	; 0x24
    1f26:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    1f28:	4b05      	ldr	r3, [pc, #20]	; (1f40 <xQueueGenericReset+0x74>)
    1f2a:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1f2c:	2001      	movs	r0, #1
    1f2e:	bd38      	pop	{r3, r4, r5, pc}
    1f30:	00002bb9 	.word	0x00002bb9
    1f34:	00002951 	.word	0x00002951
    1f38:	00002ba1 	.word	0x00002ba1
    1f3c:	00002295 	.word	0x00002295
    1f40:	00002bd1 	.word	0x00002bd1

00001f44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    1f44:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1f46:	2800      	cmp	r0, #0
    1f48:	d013      	beq.n	1f72 <xQueueGenericCreate+0x2e>
    1f4a:	1c0e      	adds	r6, r1, #0
    1f4c:	1c05      	adds	r5, r0, #0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1f4e:	204c      	movs	r0, #76	; 0x4c
    1f50:	4b0d      	ldr	r3, [pc, #52]	; (1f88 <xQueueGenericCreate+0x44>)
    1f52:	4798      	blx	r3
    1f54:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    1f56:	d00c      	beq.n	1f72 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1f58:	1c30      	adds	r0, r6, #0
    1f5a:	4368      	muls	r0, r5
    1f5c:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1f5e:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <xQueueGenericCreate+0x44>)
    1f60:	4798      	blx	r3
    1f62:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    1f64:	2800      	cmp	r0, #0
    1f66:	d106      	bne.n	1f76 <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    1f68:	1c20      	adds	r0, r4, #0
    1f6a:	4b08      	ldr	r3, [pc, #32]	; (1f8c <xQueueGenericCreate+0x48>)
    1f6c:	4798      	blx	r3
    1f6e:	e000      	b.n	1f72 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
    1f70:	e7fe      	b.n	1f70 <xQueueGenericCreate+0x2c>
    1f72:	b672      	cpsid	i
    1f74:	e7fc      	b.n	1f70 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    1f76:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    1f78:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    1f7a:	1c20      	adds	r0, r4, #0
    1f7c:	2101      	movs	r1, #1
    1f7e:	4b04      	ldr	r3, [pc, #16]	; (1f90 <xQueueGenericCreate+0x4c>)
    1f80:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    1f82:	1c20      	adds	r0, r4, #0
    1f84:	bd70      	pop	{r4, r5, r6, pc}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	00002cad 	.word	0x00002cad
    1f8c:	00002d15 	.word	0x00002d15
    1f90:	00001ecd 	.word	0x00001ecd

00001f94 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f96:	4657      	mov	r7, sl
    1f98:	b480      	push	{r7}
    1f9a:	b086      	sub	sp, #24
    1f9c:	9203      	str	r2, [sp, #12]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1f9e:	2800      	cmp	r0, #0
    1fa0:	d101      	bne.n	1fa6 <xQueueGenericSend+0x12>
    1fa2:	b672      	cpsid	i
    1fa4:	e7fe      	b.n	1fa4 <xQueueGenericSend+0x10>
    1fa6:	2700      	movs	r7, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    1fa8:	2900      	cmp	r1, #0
    1faa:	d105      	bne.n	1fb8 <xQueueGenericSend+0x24>
    1fac:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1fae:	2a00      	cmp	r2, #0
    1fb0:	d001      	beq.n	1fb6 <xQueueGenericSend+0x22>
    1fb2:	b672      	cpsid	i
    1fb4:	e7fe      	b.n	1fb4 <xQueueGenericSend+0x20>
    1fb6:	2700      	movs	r7, #0
    1fb8:	9302      	str	r3, [sp, #8]
    1fba:	9101      	str	r1, [sp, #4]
    1fbc:	1c04      	adds	r4, r0, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1fbe:	4d33      	ldr	r5, [pc, #204]	; (208c <STACK_SIZE+0x8c>)
    1fc0:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1fc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1fc4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    1fc6:	4293      	cmp	r3, r2
    1fc8:	d213      	bcs.n	1ff2 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1fca:	1c20      	adds	r0, r4, #0
    1fcc:	9901      	ldr	r1, [sp, #4]
    1fce:	9a02      	ldr	r2, [sp, #8]
    1fd0:	4b2f      	ldr	r3, [pc, #188]	; (2090 <STACK_SIZE+0x90>)
    1fd2:	4798      	blx	r3
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d007      	beq.n	1fea <xQueueGenericSend+0x56>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1fda:	1c20      	adds	r0, r4, #0
    1fdc:	3024      	adds	r0, #36	; 0x24
    1fde:	4b2d      	ldr	r3, [pc, #180]	; (2094 <STACK_SIZE+0x94>)
    1fe0:	4798      	blx	r3
    1fe2:	2801      	cmp	r0, #1
    1fe4:	d101      	bne.n	1fea <xQueueGenericSend+0x56>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
    1fe6:	4b2c      	ldr	r3, [pc, #176]	; (2098 <STACK_SIZE+0x98>)
    1fe8:	4798      	blx	r3
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1fea:	4b2c      	ldr	r3, [pc, #176]	; (209c <STACK_SIZE+0x9c>)
    1fec:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1fee:	2001      	movs	r0, #1
    1ff0:	e048      	b.n	2084 <STACK_SIZE+0x84>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1ff2:	9b03      	ldr	r3, [sp, #12]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d103      	bne.n	2000 <STACK_SIZE>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1ff8:	4b28      	ldr	r3, [pc, #160]	; (209c <STACK_SIZE+0x9c>)
    1ffa:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1ffc:	2000      	movs	r0, #0
    1ffe:	e041      	b.n	2084 <STACK_SIZE+0x84>
				}
				else if( xEntryTimeSet == pdFALSE )
    2000:	2f00      	cmp	r7, #0
    2002:	d103      	bne.n	200c <STACK_SIZE+0xc>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2004:	a804      	add	r0, sp, #16
    2006:	4b26      	ldr	r3, [pc, #152]	; (20a0 <STACK_SIZE+0xa0>)
    2008:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    200a:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
    200c:	4b23      	ldr	r3, [pc, #140]	; (209c <STACK_SIZE+0x9c>)
    200e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2010:	4b24      	ldr	r3, [pc, #144]	; (20a4 <STACK_SIZE+0xa4>)
    2012:	4798      	blx	r3
		prvLockQueue( pxQueue );
    2014:	4b1d      	ldr	r3, [pc, #116]	; (208c <STACK_SIZE+0x8c>)
    2016:	4798      	blx	r3
    2018:	6c63      	ldr	r3, [r4, #68]	; 0x44
    201a:	3301      	adds	r3, #1
    201c:	d101      	bne.n	2022 <STACK_SIZE+0x22>
    201e:	2300      	movs	r3, #0
    2020:	6463      	str	r3, [r4, #68]	; 0x44
    2022:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    2024:	3301      	adds	r3, #1
    2026:	d101      	bne.n	202c <STACK_SIZE+0x2c>
    2028:	2300      	movs	r3, #0
    202a:	64a3      	str	r3, [r4, #72]	; 0x48
    202c:	4b1b      	ldr	r3, [pc, #108]	; (209c <STACK_SIZE+0x9c>)
    202e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2030:	a804      	add	r0, sp, #16
    2032:	a903      	add	r1, sp, #12
    2034:	4b1c      	ldr	r3, [pc, #112]	; (20a8 <STACK_SIZE+0xa8>)
    2036:	4798      	blx	r3
    2038:	2800      	cmp	r0, #0
    203a:	d11d      	bne.n	2078 <STACK_SIZE+0x78>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    203c:	4b13      	ldr	r3, [pc, #76]	; (208c <STACK_SIZE+0x8c>)
    203e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2042:	469a      	mov	sl, r3
    2044:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2046:	4b15      	ldr	r3, [pc, #84]	; (209c <STACK_SIZE+0x9c>)
    2048:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    204a:	45b2      	cmp	sl, r6
    204c:	d10e      	bne.n	206c <STACK_SIZE+0x6c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    204e:	1c20      	adds	r0, r4, #0
    2050:	3010      	adds	r0, #16
    2052:	9903      	ldr	r1, [sp, #12]
    2054:	4b15      	ldr	r3, [pc, #84]	; (20ac <STACK_SIZE+0xac>)
    2056:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2058:	1c20      	adds	r0, r4, #0
    205a:	4b15      	ldr	r3, [pc, #84]	; (20b0 <STACK_SIZE+0xb0>)
    205c:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    205e:	4b15      	ldr	r3, [pc, #84]	; (20b4 <STACK_SIZE+0xb4>)
    2060:	4798      	blx	r3
    2062:	2800      	cmp	r0, #0
    2064:	d1ac      	bne.n	1fc0 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2066:	4b0c      	ldr	r3, [pc, #48]	; (2098 <STACK_SIZE+0x98>)
    2068:	4798      	blx	r3
    206a:	e7a9      	b.n	1fc0 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    206c:	1c20      	adds	r0, r4, #0
    206e:	4b10      	ldr	r3, [pc, #64]	; (20b0 <STACK_SIZE+0xb0>)
    2070:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2072:	4b10      	ldr	r3, [pc, #64]	; (20b4 <STACK_SIZE+0xb4>)
    2074:	4798      	blx	r3
    2076:	e7a3      	b.n	1fc0 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2078:	1c20      	adds	r0, r4, #0
    207a:	4b0d      	ldr	r3, [pc, #52]	; (20b0 <STACK_SIZE+0xb0>)
    207c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    207e:	4b0d      	ldr	r3, [pc, #52]	; (20b4 <STACK_SIZE+0xb4>)
    2080:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2082:	2000      	movs	r0, #0
		}
	}
}
    2084:	b006      	add	sp, #24
    2086:	bc04      	pop	{r2}
    2088:	4692      	mov	sl, r2
    208a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    208c:	00002bb9 	.word	0x00002bb9
    2090:	00001d99 	.word	0x00001d99
    2094:	00002951 	.word	0x00002951
    2098:	00002ba1 	.word	0x00002ba1
    209c:	00002bd1 	.word	0x00002bd1
    20a0:	000029cd 	.word	0x000029cd
    20a4:	000025d9 	.word	0x000025d9
    20a8:	000029ed 	.word	0x000029ed
    20ac:	00002911 	.word	0x00002911
    20b0:	00001e31 	.word	0x00001e31
    20b4:	00002725 	.word	0x00002725

000020b8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    20b8:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    20ba:	2800      	cmp	r0, #0
    20bc:	d101      	bne.n	20c2 <xQueueGenericSendFromISR+0xa>
    20be:	b672      	cpsid	i
    20c0:	e7fe      	b.n	20c0 <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    20c2:	2900      	cmp	r1, #0
    20c4:	d104      	bne.n	20d0 <xQueueGenericSendFromISR+0x18>
    20c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
    20c8:	2c00      	cmp	r4, #0
    20ca:	d001      	beq.n	20d0 <xQueueGenericSendFromISR+0x18>
    20cc:	b672      	cpsid	i
    20ce:	e7fe      	b.n	20ce <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20d0:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    20d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    20d4:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    20d6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    20d8:	42b4      	cmp	r4, r6
    20da:	d21c      	bcs.n	2116 <xQueueGenericSendFromISR+0x5e>
    20dc:	1c16      	adds	r6, r2, #0
    20de:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    20e0:	1c1a      	adds	r2, r3, #0
    20e2:	4b0e      	ldr	r3, [pc, #56]	; (211c <xQueueGenericSendFromISR+0x64>)
    20e4:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    20e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    20e8:	3301      	adds	r3, #1
    20ea:	d10e      	bne.n	210a <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    20ee:	3501      	adds	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20f0:	2b00      	cmp	r3, #0
    20f2:	d010      	beq.n	2116 <xQueueGenericSendFromISR+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20f4:	1c20      	adds	r0, r4, #0
    20f6:	3024      	adds	r0, #36	; 0x24
    20f8:	4b09      	ldr	r3, [pc, #36]	; (2120 <xQueueGenericSendFromISR+0x68>)
    20fa:	4798      	blx	r3
    20fc:	2800      	cmp	r0, #0
    20fe:	d00a      	beq.n	2116 <xQueueGenericSendFromISR+0x5e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2100:	2e00      	cmp	r6, #0
    2102:	d007      	beq.n	2114 <xQueueGenericSendFromISR+0x5c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    2104:	2301      	movs	r3, #1
    2106:	6033      	str	r3, [r6, #0]
    2108:	e005      	b.n	2116 <xQueueGenericSendFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    210a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    210c:	3301      	adds	r3, #1
    210e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    2110:	2501      	movs	r5, #1
    2112:	e000      	b.n	2116 <xQueueGenericSendFromISR+0x5e>
    2114:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    2116:	b662      	cpsie	i

	return xReturn;
}
    2118:	1c28      	adds	r0, r5, #0
    211a:	bd70      	pop	{r4, r5, r6, pc}
    211c:	00001d99 	.word	0x00001d99
    2120:	00002951 	.word	0x00002951

00002124 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2124:	b5f0      	push	{r4, r5, r6, r7, lr}
    2126:	464f      	mov	r7, r9
    2128:	b480      	push	{r7}
    212a:	b084      	sub	sp, #16
    212c:	9201      	str	r2, [sp, #4]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    212e:	2800      	cmp	r0, #0
    2130:	d101      	bne.n	2136 <xQueueGenericReceive+0x12>
    2132:	b672      	cpsid	i
    2134:	e7fe      	b.n	2134 <xQueueGenericReceive+0x10>
    2136:	2700      	movs	r7, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    2138:	2900      	cmp	r1, #0
    213a:	d105      	bne.n	2148 <xQueueGenericReceive+0x24>
    213c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    213e:	2a00      	cmp	r2, #0
    2140:	d001      	beq.n	2146 <xQueueGenericReceive+0x22>
    2142:	b672      	cpsid	i
    2144:	e7fe      	b.n	2144 <xQueueGenericReceive+0x20>
    2146:	2700      	movs	r7, #0
    2148:	1c1d      	adds	r5, r3, #0
    214a:	9100      	str	r1, [sp, #0]
    214c:	1c04      	adds	r4, r0, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    214e:	4e44      	ldr	r6, [pc, #272]	; (2260 <xQueueGenericReceive+0x13c>)
    2150:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2154:	2b00      	cmp	r3, #0
    2156:	d02b      	beq.n	21b0 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2158:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    215a:	1c20      	adds	r0, r4, #0
    215c:	9900      	ldr	r1, [sp, #0]
    215e:	4b41      	ldr	r3, [pc, #260]	; (2264 <xQueueGenericReceive+0x140>)
    2160:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    2162:	2d00      	cmp	r5, #0
    2164:	d114      	bne.n	2190 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2166:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2168:	3b01      	subs	r3, #1
    216a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    216c:	6823      	ldr	r3, [r4, #0]
    216e:	2b00      	cmp	r3, #0
    2170:	d102      	bne.n	2178 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    2172:	4b3d      	ldr	r3, [pc, #244]	; (2268 <xQueueGenericReceive+0x144>)
    2174:	4798      	blx	r3
    2176:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2178:	6923      	ldr	r3, [r4, #16]
    217a:	2b00      	cmp	r3, #0
    217c:	d014      	beq.n	21a8 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    217e:	1c20      	adds	r0, r4, #0
    2180:	3010      	adds	r0, #16
    2182:	4b3a      	ldr	r3, [pc, #232]	; (226c <xQueueGenericReceive+0x148>)
    2184:	4798      	blx	r3
    2186:	2801      	cmp	r0, #1
    2188:	d10e      	bne.n	21a8 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
    218a:	4b39      	ldr	r3, [pc, #228]	; (2270 <xQueueGenericReceive+0x14c>)
    218c:	4798      	blx	r3
    218e:	e00b      	b.n	21a8 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    2190:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2192:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2194:	2b00      	cmp	r3, #0
    2196:	d007      	beq.n	21a8 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2198:	1c20      	adds	r0, r4, #0
    219a:	3024      	adds	r0, #36	; 0x24
    219c:	4b33      	ldr	r3, [pc, #204]	; (226c <xQueueGenericReceive+0x148>)
    219e:	4798      	blx	r3
    21a0:	2800      	cmp	r0, #0
    21a2:	d001      	beq.n	21a8 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    21a4:	4b32      	ldr	r3, [pc, #200]	; (2270 <xQueueGenericReceive+0x14c>)
    21a6:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
    21a8:	4b32      	ldr	r3, [pc, #200]	; (2274 <xQueueGenericReceive+0x150>)
    21aa:	4798      	blx	r3
				return pdPASS;
    21ac:	2001      	movs	r0, #1
    21ae:	e052      	b.n	2256 <xQueueGenericReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    21b0:	9b01      	ldr	r3, [sp, #4]
    21b2:	2b00      	cmp	r3, #0
    21b4:	d103      	bne.n	21be <xQueueGenericReceive+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    21b6:	4b2f      	ldr	r3, [pc, #188]	; (2274 <xQueueGenericReceive+0x150>)
    21b8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    21ba:	2000      	movs	r0, #0
    21bc:	e04b      	b.n	2256 <xQueueGenericReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
    21be:	2f00      	cmp	r7, #0
    21c0:	d103      	bne.n	21ca <xQueueGenericReceive+0xa6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    21c2:	a802      	add	r0, sp, #8
    21c4:	4b2c      	ldr	r3, [pc, #176]	; (2278 <xQueueGenericReceive+0x154>)
    21c6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    21c8:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
    21ca:	4b2a      	ldr	r3, [pc, #168]	; (2274 <xQueueGenericReceive+0x150>)
    21cc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    21ce:	4b2b      	ldr	r3, [pc, #172]	; (227c <xQueueGenericReceive+0x158>)
    21d0:	4798      	blx	r3
		prvLockQueue( pxQueue );
    21d2:	4b23      	ldr	r3, [pc, #140]	; (2260 <xQueueGenericReceive+0x13c>)
    21d4:	4798      	blx	r3
    21d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    21d8:	3301      	adds	r3, #1
    21da:	d101      	bne.n	21e0 <xQueueGenericReceive+0xbc>
    21dc:	2300      	movs	r3, #0
    21de:	6463      	str	r3, [r4, #68]	; 0x44
    21e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    21e2:	3301      	adds	r3, #1
    21e4:	d101      	bne.n	21ea <xQueueGenericReceive+0xc6>
    21e6:	2300      	movs	r3, #0
    21e8:	64a3      	str	r3, [r4, #72]	; 0x48
    21ea:	4b22      	ldr	r3, [pc, #136]	; (2274 <xQueueGenericReceive+0x150>)
    21ec:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    21ee:	a802      	add	r0, sp, #8
    21f0:	a901      	add	r1, sp, #4
    21f2:	4b23      	ldr	r3, [pc, #140]	; (2280 <xQueueGenericReceive+0x15c>)
    21f4:	4798      	blx	r3
    21f6:	2800      	cmp	r0, #0
    21f8:	d127      	bne.n	224a <xQueueGenericReceive+0x126>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    21fa:	4b19      	ldr	r3, [pc, #100]	; (2260 <xQueueGenericReceive+0x13c>)
    21fc:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == 0 )
    21fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2200:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2202:	4b1c      	ldr	r3, [pc, #112]	; (2274 <xQueueGenericReceive+0x150>)
    2204:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2206:	464b      	mov	r3, r9
    2208:	2b00      	cmp	r3, #0
    220a:	d118      	bne.n	223e <xQueueGenericReceive+0x11a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    220c:	6823      	ldr	r3, [r4, #0]
    220e:	2b00      	cmp	r3, #0
    2210:	d106      	bne.n	2220 <xQueueGenericReceive+0xfc>
					{
						portENTER_CRITICAL();
    2212:	4b13      	ldr	r3, [pc, #76]	; (2260 <xQueueGenericReceive+0x13c>)
    2214:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    2216:	6860      	ldr	r0, [r4, #4]
    2218:	4b1a      	ldr	r3, [pc, #104]	; (2284 <xQueueGenericReceive+0x160>)
    221a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
    221c:	4b15      	ldr	r3, [pc, #84]	; (2274 <xQueueGenericReceive+0x150>)
    221e:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2220:	1c20      	adds	r0, r4, #0
    2222:	3024      	adds	r0, #36	; 0x24
    2224:	9901      	ldr	r1, [sp, #4]
    2226:	4b18      	ldr	r3, [pc, #96]	; (2288 <xQueueGenericReceive+0x164>)
    2228:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    222a:	1c20      	adds	r0, r4, #0
    222c:	4b17      	ldr	r3, [pc, #92]	; (228c <xQueueGenericReceive+0x168>)
    222e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    2230:	4b17      	ldr	r3, [pc, #92]	; (2290 <xQueueGenericReceive+0x16c>)
    2232:	4798      	blx	r3
    2234:	2800      	cmp	r0, #0
    2236:	d18b      	bne.n	2150 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    2238:	4b0d      	ldr	r3, [pc, #52]	; (2270 <xQueueGenericReceive+0x14c>)
    223a:	4798      	blx	r3
    223c:	e788      	b.n	2150 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    223e:	1c20      	adds	r0, r4, #0
    2240:	4b12      	ldr	r3, [pc, #72]	; (228c <xQueueGenericReceive+0x168>)
    2242:	4798      	blx	r3
				( void ) xTaskResumeAll();
    2244:	4b12      	ldr	r3, [pc, #72]	; (2290 <xQueueGenericReceive+0x16c>)
    2246:	4798      	blx	r3
    2248:	e782      	b.n	2150 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    224a:	1c20      	adds	r0, r4, #0
    224c:	4b0f      	ldr	r3, [pc, #60]	; (228c <xQueueGenericReceive+0x168>)
    224e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    2250:	4b0f      	ldr	r3, [pc, #60]	; (2290 <xQueueGenericReceive+0x16c>)
    2252:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    2254:	2000      	movs	r0, #0
		}
	}
}
    2256:	b004      	add	sp, #16
    2258:	bc04      	pop	{r2}
    225a:	4691      	mov	r9, r2
    225c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	00002bb9 	.word	0x00002bb9
    2264:	00001e09 	.word	0x00001e09
    2268:	00002a69 	.word	0x00002a69
    226c:	00002951 	.word	0x00002951
    2270:	00002ba1 	.word	0x00002ba1
    2274:	00002bd1 	.word	0x00002bd1
    2278:	000029cd 	.word	0x000029cd
    227c:	000025d9 	.word	0x000025d9
    2280:	000029ed 	.word	0x000029ed
    2284:	00002a75 	.word	0x00002a75
    2288:	00002911 	.word	0x00002911
    228c:	00001e31 	.word	0x00001e31
    2290:	00002725 	.word	0x00002725

00002294 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2294:	1c03      	adds	r3, r0, #0
    2296:	3308      	adds	r3, #8
    2298:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    229a:	2201      	movs	r2, #1
    229c:	4252      	negs	r2, r2
    229e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    22a0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    22a2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    22a4:	2300      	movs	r3, #0
    22a6:	6003      	str	r3, [r0, #0]
}
    22a8:	4770      	bx	lr
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    22ac:	2300      	movs	r3, #0
    22ae:	6103      	str	r3, [r0, #16]
}
    22b0:	4770      	bx	lr
    22b2:	46c0      	nop			; (mov r8, r8)

000022b4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    22b4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    22b6:	685a      	ldr	r2, [r3, #4]
    22b8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    22ba:	6842      	ldr	r2, [r0, #4]
    22bc:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    22be:	685a      	ldr	r2, [r3, #4]
    22c0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    22c2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    22c4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    22c6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    22c8:	6803      	ldr	r3, [r0, #0]
    22ca:	3301      	adds	r3, #1
    22cc:	6003      	str	r3, [r0, #0]
}
    22ce:	4770      	bx	lr

000022d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    22d0:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    22d2:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    22d4:	1c63      	adds	r3, r4, #1
    22d6:	d101      	bne.n	22dc <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    22d8:	6903      	ldr	r3, [r0, #16]
    22da:	e00a      	b.n	22f2 <vListInsert+0x22>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    22dc:	1c03      	adds	r3, r0, #0
    22de:	3308      	adds	r3, #8
    22e0:	68c2      	ldr	r2, [r0, #12]
    22e2:	6812      	ldr	r2, [r2, #0]
    22e4:	4294      	cmp	r4, r2
    22e6:	d304      	bcc.n	22f2 <vListInsert+0x22>
    22e8:	685b      	ldr	r3, [r3, #4]
    22ea:	685a      	ldr	r2, [r3, #4]
    22ec:	6812      	ldr	r2, [r2, #0]
    22ee:	4294      	cmp	r4, r2
    22f0:	d2fa      	bcs.n	22e8 <vListInsert+0x18>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    22f2:	685a      	ldr	r2, [r3, #4]
    22f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    22f6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
    22f8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    22fa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    22fc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    22fe:	6803      	ldr	r3, [r0, #0]
    2300:	3301      	adds	r3, #1
    2302:	6003      	str	r3, [r0, #0]
}
    2304:	bd10      	pop	{r4, pc}
    2306:	46c0      	nop			; (mov r8, r8)

00002308 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2308:	6843      	ldr	r3, [r0, #4]
    230a:	6882      	ldr	r2, [r0, #8]
    230c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    230e:	6883      	ldr	r3, [r0, #8]
    2310:	6842      	ldr	r2, [r0, #4]
    2312:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2314:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2316:	685a      	ldr	r2, [r3, #4]
    2318:	4282      	cmp	r2, r0
    231a:	d101      	bne.n	2320 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    231c:	6882      	ldr	r2, [r0, #8]
    231e:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    2320:	2200      	movs	r2, #0
    2322:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2324:	681a      	ldr	r2, [r3, #0]
    2326:	3a01      	subs	r2, #1
    2328:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    232a:	6818      	ldr	r0, [r3, #0]
}
    232c:	4770      	bx	lr
    232e:	46c0      	nop			; (mov r8, r8)

00002330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2330:	b510      	push	{r4, lr}
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    2332:	4c01      	ldr	r4, [pc, #4]	; (2338 <prvIdleTask+0x8>)
    2334:	47a0      	blx	r4
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    2336:	e7fd      	b.n	2334 <prvIdleTask+0x4>
    2338:	00002ba1 	.word	0x00002ba1

0000233c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    233c:	b510      	push	{r4, lr}
    233e:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    2340:	4b0e      	ldr	r3, [pc, #56]	; (237c <prvAddCurrentTaskToDelayedList+0x40>)
    2342:	681b      	ldr	r3, [r3, #0]
    2344:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    2346:	4b0e      	ldr	r3, [pc, #56]	; (2380 <prvAddCurrentTaskToDelayedList+0x44>)
    2348:	681b      	ldr	r3, [r3, #0]
    234a:	429c      	cmp	r4, r3
    234c:	d207      	bcs.n	235e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    234e:	4b0d      	ldr	r3, [pc, #52]	; (2384 <prvAddCurrentTaskToDelayedList+0x48>)
    2350:	6818      	ldr	r0, [r3, #0]
    2352:	4b0a      	ldr	r3, [pc, #40]	; (237c <prvAddCurrentTaskToDelayedList+0x40>)
    2354:	6819      	ldr	r1, [r3, #0]
    2356:	3104      	adds	r1, #4
    2358:	4b0b      	ldr	r3, [pc, #44]	; (2388 <prvAddCurrentTaskToDelayedList+0x4c>)
    235a:	4798      	blx	r3
    235c:	e00c      	b.n	2378 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    235e:	4b0b      	ldr	r3, [pc, #44]	; (238c <prvAddCurrentTaskToDelayedList+0x50>)
    2360:	6818      	ldr	r0, [r3, #0]
    2362:	4b06      	ldr	r3, [pc, #24]	; (237c <prvAddCurrentTaskToDelayedList+0x40>)
    2364:	6819      	ldr	r1, [r3, #0]
    2366:	3104      	adds	r1, #4
    2368:	4b07      	ldr	r3, [pc, #28]	; (2388 <prvAddCurrentTaskToDelayedList+0x4c>)
    236a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    236c:	4b08      	ldr	r3, [pc, #32]	; (2390 <prvAddCurrentTaskToDelayedList+0x54>)
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	429c      	cmp	r4, r3
    2372:	d201      	bcs.n	2378 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    2374:	4b06      	ldr	r3, [pc, #24]	; (2390 <prvAddCurrentTaskToDelayedList+0x54>)
    2376:	601c      	str	r4, [r3, #0]
		}
	}
}
    2378:	bd10      	pop	{r4, pc}
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	2000080c 	.word	0x2000080c
    2380:	20000824 	.word	0x20000824
    2384:	20000828 	.word	0x20000828
    2388:	000022d1 	.word	0x000022d1
    238c:	20000770 	.word	0x20000770
    2390:	200000c4 	.word	0x200000c4

00002394 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2394:	b5f0      	push	{r4, r5, r6, r7, lr}
    2396:	464f      	mov	r7, r9
    2398:	4646      	mov	r6, r8
    239a:	b4c0      	push	{r6, r7}
    239c:	b085      	sub	sp, #20
    239e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
    23a0:	2800      	cmp	r0, #0
    23a2:	d101      	bne.n	23a8 <xTaskGenericCreate+0x14>
    23a4:	b672      	cpsid	i
    23a6:	e7fe      	b.n	23a6 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    23a8:	2c05      	cmp	r4, #5
    23aa:	d901      	bls.n	23b0 <xTaskGenericCreate+0x1c>
    23ac:	b672      	cpsid	i
    23ae:	e7fe      	b.n	23ae <xTaskGenericCreate+0x1a>
    23b0:	9303      	str	r3, [sp, #12]
    23b2:	1c16      	adds	r6, r2, #0
    23b4:	1c0f      	adds	r7, r1, #0
    23b6:	9002      	str	r0, [sp, #8]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    23b8:	2040      	movs	r0, #64	; 0x40
    23ba:	4b59      	ldr	r3, [pc, #356]	; (2520 <xTaskGenericCreate+0x18c>)
    23bc:	4798      	blx	r3
    23be:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
    23c0:	d100      	bne.n	23c4 <xTaskGenericCreate+0x30>
    23c2:	e0a5      	b.n	2510 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    23c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    23c6:	2b00      	cmp	r3, #0
    23c8:	d000      	beq.n	23cc <xTaskGenericCreate+0x38>
    23ca:	e09d      	b.n	2508 <xTaskGenericCreate+0x174>
    23cc:	00b0      	lsls	r0, r6, #2
    23ce:	4b54      	ldr	r3, [pc, #336]	; (2520 <xTaskGenericCreate+0x18c>)
    23d0:	4798      	blx	r3
    23d2:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    23d4:	2800      	cmp	r0, #0
    23d6:	d103      	bne.n	23e0 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    23d8:	1c28      	adds	r0, r5, #0
    23da:	4b52      	ldr	r3, [pc, #328]	; (2524 <xTaskGenericCreate+0x190>)
    23dc:	4798      	blx	r3
    23de:	e097      	b.n	2510 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    23e0:	00b2      	lsls	r2, r6, #2
    23e2:	21a5      	movs	r1, #165	; 0xa5
    23e4:	4b50      	ldr	r3, [pc, #320]	; (2528 <xTaskGenericCreate+0x194>)
    23e6:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    23e8:	4b50      	ldr	r3, [pc, #320]	; (252c <xTaskGenericCreate+0x198>)
    23ea:	18f3      	adds	r3, r6, r3
    23ec:	009b      	lsls	r3, r3, #2
    23ee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    23f0:	4694      	mov	ip, r2
    23f2:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    23f4:	2207      	movs	r2, #7
    23f6:	4393      	bics	r3, r2
    23f8:	4698      	mov	r8, r3
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    23fa:	1c28      	adds	r0, r5, #0
    23fc:	3034      	adds	r0, #52	; 0x34
    23fe:	1c39      	adds	r1, r7, #0
    2400:	3201      	adds	r2, #1
    2402:	4b4b      	ldr	r3, [pc, #300]	; (2530 <xTaskGenericCreate+0x19c>)
    2404:	4798      	blx	r3
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    2406:	2200      	movs	r2, #0
    2408:	233b      	movs	r3, #59	; 0x3b
    240a:	54ea      	strb	r2, [r5, r3]
    240c:	1e27      	subs	r7, r4, #0
    240e:	2f05      	cmp	r7, #5
    2410:	d900      	bls.n	2414 <xTaskGenericCreate+0x80>
    2412:	2705      	movs	r7, #5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    2414:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    2416:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    2418:	1d2b      	adds	r3, r5, #4
    241a:	9301      	str	r3, [sp, #4]
    241c:	1c18      	adds	r0, r3, #0
    241e:	4e45      	ldr	r6, [pc, #276]	; (2534 <xTaskGenericCreate+0x1a0>)
    2420:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    2422:	1c28      	adds	r0, r5, #0
    2424:	3018      	adds	r0, #24
    2426:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    2428:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    242a:	2306      	movs	r3, #6
    242c:	1bdb      	subs	r3, r3, r7
    242e:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    2430:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2432:	4640      	mov	r0, r8
    2434:	9902      	ldr	r1, [sp, #8]
    2436:	9a03      	ldr	r2, [sp, #12]
    2438:	4b3f      	ldr	r3, [pc, #252]	; (2538 <xTaskGenericCreate+0x1a4>)
    243a:	4798      	blx	r3
    243c:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    243e:	0743      	lsls	r3, r0, #29
    2440:	d001      	beq.n	2446 <xTaskGenericCreate+0xb2>
    2442:	b672      	cpsid	i
    2444:	e7fe      	b.n	2444 <xTaskGenericCreate+0xb0>

		if( ( void * ) pxCreatedTask != NULL )
    2446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2448:	2b00      	cmp	r3, #0
    244a:	d000      	beq.n	244e <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    244c:	601d      	str	r5, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    244e:	4b3b      	ldr	r3, [pc, #236]	; (253c <xTaskGenericCreate+0x1a8>)
    2450:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    2452:	4a3b      	ldr	r2, [pc, #236]	; (2540 <xTaskGenericCreate+0x1ac>)
    2454:	6813      	ldr	r3, [r2, #0]
    2456:	3301      	adds	r3, #1
    2458:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    245a:	4b3a      	ldr	r3, [pc, #232]	; (2544 <xTaskGenericCreate+0x1b0>)
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d11e      	bne.n	24a0 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2462:	4b38      	ldr	r3, [pc, #224]	; (2544 <xTaskGenericCreate+0x1b0>)
    2464:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    2466:	6813      	ldr	r3, [r2, #0]
    2468:	2b01      	cmp	r3, #1
    246a:	d124      	bne.n	24b6 <xTaskGenericCreate+0x122>
    246c:	4e36      	ldr	r6, [pc, #216]	; (2548 <xTaskGenericCreate+0x1b4>)
    246e:	3377      	adds	r3, #119	; 0x77
    2470:	4699      	mov	r9, r3
    2472:	44b1      	add	r9, r6
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    2474:	4f35      	ldr	r7, [pc, #212]	; (254c <xTaskGenericCreate+0x1b8>)
    2476:	1c30      	adds	r0, r6, #0
    2478:	47b8      	blx	r7
    247a:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    247c:	454e      	cmp	r6, r9
    247e:	d1fa      	bne.n	2476 <xTaskGenericCreate+0xe2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    2480:	4b33      	ldr	r3, [pc, #204]	; (2550 <xTaskGenericCreate+0x1bc>)
    2482:	4699      	mov	r9, r3
    2484:	1c18      	adds	r0, r3, #0
    2486:	4e31      	ldr	r6, [pc, #196]	; (254c <xTaskGenericCreate+0x1b8>)
    2488:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    248a:	4f32      	ldr	r7, [pc, #200]	; (2554 <xTaskGenericCreate+0x1c0>)
    248c:	1c38      	adds	r0, r7, #0
    248e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
    2490:	4831      	ldr	r0, [pc, #196]	; (2558 <xTaskGenericCreate+0x1c4>)
    2492:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2494:	4b31      	ldr	r3, [pc, #196]	; (255c <xTaskGenericCreate+0x1c8>)
    2496:	464a      	mov	r2, r9
    2498:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    249a:	4b31      	ldr	r3, [pc, #196]	; (2560 <xTaskGenericCreate+0x1cc>)
    249c:	601f      	str	r7, [r3, #0]
    249e:	e00a      	b.n	24b6 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    24a0:	4b30      	ldr	r3, [pc, #192]	; (2564 <xTaskGenericCreate+0x1d0>)
    24a2:	681b      	ldr	r3, [r3, #0]
    24a4:	2b00      	cmp	r3, #0
    24a6:	d106      	bne.n	24b6 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    24a8:	4b26      	ldr	r3, [pc, #152]	; (2544 <xTaskGenericCreate+0x1b0>)
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24ae:	429c      	cmp	r4, r3
    24b0:	d301      	bcc.n	24b6 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
    24b2:	4b24      	ldr	r3, [pc, #144]	; (2544 <xTaskGenericCreate+0x1b0>)
    24b4:	601d      	str	r5, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    24b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    24b8:	4a2b      	ldr	r2, [pc, #172]	; (2568 <xTaskGenericCreate+0x1d4>)
    24ba:	6812      	ldr	r2, [r2, #0]
    24bc:	4293      	cmp	r3, r2
    24be:	d901      	bls.n	24c4 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    24c0:	4a29      	ldr	r2, [pc, #164]	; (2568 <xTaskGenericCreate+0x1d4>)
    24c2:	6013      	str	r3, [r2, #0]
			}

			uxTaskNumber++;
    24c4:	4929      	ldr	r1, [pc, #164]	; (256c <xTaskGenericCreate+0x1d8>)
    24c6:	680a      	ldr	r2, [r1, #0]
    24c8:	3201      	adds	r2, #1
    24ca:	600a      	str	r2, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
    24cc:	4a28      	ldr	r2, [pc, #160]	; (2570 <xTaskGenericCreate+0x1dc>)
    24ce:	6812      	ldr	r2, [r2, #0]
    24d0:	4293      	cmp	r3, r2
    24d2:	d901      	bls.n	24d8 <xTaskGenericCreate+0x144>
    24d4:	4a26      	ldr	r2, [pc, #152]	; (2570 <xTaskGenericCreate+0x1dc>)
    24d6:	6013      	str	r3, [r2, #0]
    24d8:	0098      	lsls	r0, r3, #2
    24da:	18c3      	adds	r3, r0, r3
    24dc:	009b      	lsls	r3, r3, #2
    24de:	481a      	ldr	r0, [pc, #104]	; (2548 <xTaskGenericCreate+0x1b4>)
    24e0:	18c0      	adds	r0, r0, r3
    24e2:	9901      	ldr	r1, [sp, #4]
    24e4:	4b23      	ldr	r3, [pc, #140]	; (2574 <xTaskGenericCreate+0x1e0>)
    24e6:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    24e8:	4b23      	ldr	r3, [pc, #140]	; (2578 <xTaskGenericCreate+0x1e4>)
    24ea:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    24ec:	4b1d      	ldr	r3, [pc, #116]	; (2564 <xTaskGenericCreate+0x1d0>)
    24ee:	681b      	ldr	r3, [r3, #0]
    24f0:	2001      	movs	r0, #1
    24f2:	2b00      	cmp	r3, #0
    24f4:	d00e      	beq.n	2514 <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    24f6:	4b13      	ldr	r3, [pc, #76]	; (2544 <xTaskGenericCreate+0x1b0>)
    24f8:	681b      	ldr	r3, [r3, #0]
    24fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    24fc:	429c      	cmp	r4, r3
    24fe:	d909      	bls.n	2514 <xTaskGenericCreate+0x180>
			{
				portYIELD_WITHIN_API();
    2500:	4b1e      	ldr	r3, [pc, #120]	; (257c <xTaskGenericCreate+0x1e8>)
    2502:	4798      	blx	r3
    2504:	2001      	movs	r0, #1
    2506:	e005      	b.n	2514 <xTaskGenericCreate+0x180>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    2508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    250a:	6303      	str	r3, [r0, #48]	; 0x30
    250c:	1c18      	adds	r0, r3, #0
    250e:	e767      	b.n	23e0 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2510:	2001      	movs	r0, #1
    2512:	4240      	negs	r0, r0
			}
		}
	}

	return xReturn;
}
    2514:	b005      	add	sp, #20
    2516:	bc0c      	pop	{r2, r3}
    2518:	4690      	mov	r8, r2
    251a:	4699      	mov	r9, r3
    251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	00002cad 	.word	0x00002cad
    2524:	00002d15 	.word	0x00002d15
    2528:	0000a9f1 	.word	0x0000a9f1
    252c:	3fffffff 	.word	0x3fffffff
    2530:	0000c347 	.word	0x0000c347
    2534:	000022ad 	.word	0x000022ad
    2538:	00002b61 	.word	0x00002b61
    253c:	00002bb9 	.word	0x00002bb9
    2540:	2000084c 	.word	0x2000084c
    2544:	2000080c 	.word	0x2000080c
    2548:	20000790 	.word	0x20000790
    254c:	00002295 	.word	0x00002295
    2550:	20000834 	.word	0x20000834
    2554:	2000077c 	.word	0x2000077c
    2558:	20000810 	.word	0x20000810
    255c:	20000770 	.word	0x20000770
    2560:	20000828 	.word	0x20000828
    2564:	20000774 	.word	0x20000774
    2568:	20000850 	.word	0x20000850
    256c:	20000830 	.word	0x20000830
    2570:	2000082c 	.word	0x2000082c
    2574:	000022b5 	.word	0x000022b5
    2578:	00002bd1 	.word	0x00002bd1
    257c:	00002ba1 	.word	0x00002ba1

00002580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    2580:	b510      	push	{r4, lr}
    2582:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    2584:	2300      	movs	r3, #0
    2586:	9300      	str	r3, [sp, #0]
    2588:	9301      	str	r3, [sp, #4]
    258a:	9302      	str	r3, [sp, #8]
    258c:	9303      	str	r3, [sp, #12]
    258e:	480c      	ldr	r0, [pc, #48]	; (25c0 <vTaskStartScheduler+0x40>)
    2590:	490c      	ldr	r1, [pc, #48]	; (25c4 <vTaskStartScheduler+0x44>)
    2592:	2296      	movs	r2, #150	; 0x96
    2594:	0052      	lsls	r2, r2, #1
    2596:	4c0c      	ldr	r4, [pc, #48]	; (25c8 <vTaskStartScheduler+0x48>)
    2598:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    259a:	2801      	cmp	r0, #1
    259c:	d109      	bne.n	25b2 <vTaskStartScheduler+0x32>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    259e:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
    25a0:	2201      	movs	r2, #1
    25a2:	4b0a      	ldr	r3, [pc, #40]	; (25cc <vTaskStartScheduler+0x4c>)
    25a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    25a6:	2200      	movs	r2, #0
    25a8:	4b09      	ldr	r3, [pc, #36]	; (25d0 <vTaskStartScheduler+0x50>)
    25aa:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    25ac:	4b09      	ldr	r3, [pc, #36]	; (25d4 <vTaskStartScheduler+0x54>)
    25ae:	4798      	blx	r3
    25b0:	e003      	b.n	25ba <vTaskStartScheduler+0x3a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    25b2:	2800      	cmp	r0, #0
    25b4:	d101      	bne.n	25ba <vTaskStartScheduler+0x3a>
    25b6:	b672      	cpsid	i
    25b8:	e7fe      	b.n	25b8 <vTaskStartScheduler+0x38>
	}
}
    25ba:	b004      	add	sp, #16
    25bc:	bd10      	pop	{r4, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	00002331 	.word	0x00002331
    25c4:	0000fbf0 	.word	0x0000fbf0
    25c8:	00002395 	.word	0x00002395
    25cc:	20000774 	.word	0x20000774
    25d0:	20000824 	.word	0x20000824
    25d4:	00002c71 	.word	0x00002c71

000025d8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    25d8:	4a02      	ldr	r2, [pc, #8]	; (25e4 <vTaskSuspendAll+0xc>)
    25da:	6813      	ldr	r3, [r2, #0]
    25dc:	3301      	adds	r3, #1
    25de:	6013      	str	r3, [r2, #0]
}
    25e0:	4770      	bx	lr
    25e2:	46c0      	nop			; (mov r8, r8)
    25e4:	20000808 	.word	0x20000808

000025e8 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
    25e8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    25ea:	4b04      	ldr	r3, [pc, #16]	; (25fc <xTaskGetTickCount+0x14>)
    25ec:	4798      	blx	r3
	{
		xTicks = xTickCount;
    25ee:	4b04      	ldr	r3, [pc, #16]	; (2600 <xTaskGetTickCount+0x18>)
    25f0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <xTaskGetTickCount+0x1c>)
    25f4:	4798      	blx	r3

	return xTicks;
}
    25f6:	1c20      	adds	r0, r4, #0
    25f8:	bd10      	pop	{r4, pc}
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	00002bb9 	.word	0x00002bb9
    2600:	20000824 	.word	0x20000824
    2604:	00002bd1 	.word	0x00002bd1

00002608 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    260a:	4b3b      	ldr	r3, [pc, #236]	; (26f8 <vTaskIncrementTick+0xf0>)
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d16d      	bne.n	26ee <vTaskIncrementTick+0xe6>
	{
		++xTickCount;
    2612:	4b3a      	ldr	r3, [pc, #232]	; (26fc <vTaskIncrementTick+0xf4>)
    2614:	681a      	ldr	r2, [r3, #0]
    2616:	3201      	adds	r2, #1
    2618:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    261a:	681b      	ldr	r3, [r3, #0]
    261c:	2b00      	cmp	r3, #0
    261e:	d120      	bne.n	2662 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    2620:	4b37      	ldr	r3, [pc, #220]	; (2700 <vTaskIncrementTick+0xf8>)
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	2b00      	cmp	r3, #0
    2628:	d001      	beq.n	262e <vTaskIncrementTick+0x26>
    262a:	b672      	cpsid	i
    262c:	e7fe      	b.n	262c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
    262e:	4b34      	ldr	r3, [pc, #208]	; (2700 <vTaskIncrementTick+0xf8>)
    2630:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2632:	4a34      	ldr	r2, [pc, #208]	; (2704 <vTaskIncrementTick+0xfc>)
    2634:	6810      	ldr	r0, [r2, #0]
    2636:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    2638:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
    263a:	4933      	ldr	r1, [pc, #204]	; (2708 <vTaskIncrementTick+0x100>)
    263c:	680a      	ldr	r2, [r1, #0]
    263e:	3201      	adds	r2, #1
    2640:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2642:	681b      	ldr	r3, [r3, #0]
    2644:	681b      	ldr	r3, [r3, #0]
    2646:	2b00      	cmp	r3, #0
    2648:	d104      	bne.n	2654 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    264a:	2201      	movs	r2, #1
    264c:	4252      	negs	r2, r2
    264e:	4b2f      	ldr	r3, [pc, #188]	; (270c <vTaskIncrementTick+0x104>)
    2650:	601a      	str	r2, [r3, #0]
    2652:	e006      	b.n	2662 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2654:	4b2a      	ldr	r3, [pc, #168]	; (2700 <vTaskIncrementTick+0xf8>)
    2656:	681b      	ldr	r3, [r3, #0]
    2658:	68db      	ldr	r3, [r3, #12]
    265a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    265c:	685a      	ldr	r2, [r3, #4]
    265e:	4b2b      	ldr	r3, [pc, #172]	; (270c <vTaskIncrementTick+0x104>)
    2660:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2662:	4b26      	ldr	r3, [pc, #152]	; (26fc <vTaskIncrementTick+0xf4>)
    2664:	681a      	ldr	r2, [r3, #0]
    2666:	4b29      	ldr	r3, [pc, #164]	; (270c <vTaskIncrementTick+0x104>)
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	429a      	cmp	r2, r3
    266c:	d343      	bcc.n	26f6 <vTaskIncrementTick+0xee>
    266e:	4b24      	ldr	r3, [pc, #144]	; (2700 <vTaskIncrementTick+0xf8>)
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	681b      	ldr	r3, [r3, #0]
    2674:	2b00      	cmp	r3, #0
    2676:	d00b      	beq.n	2690 <vTaskIncrementTick+0x88>
    2678:	4b21      	ldr	r3, [pc, #132]	; (2700 <vTaskIncrementTick+0xf8>)
    267a:	681b      	ldr	r3, [r3, #0]
    267c:	68db      	ldr	r3, [r3, #12]
    267e:	68dd      	ldr	r5, [r3, #12]
    2680:	686b      	ldr	r3, [r5, #4]
    2682:	4a1e      	ldr	r2, [pc, #120]	; (26fc <vTaskIncrementTick+0xf4>)
    2684:	6812      	ldr	r2, [r2, #0]
    2686:	4293      	cmp	r3, r2
    2688:	d810      	bhi.n	26ac <vTaskIncrementTick+0xa4>
    268a:	4f21      	ldr	r7, [pc, #132]	; (2710 <vTaskIncrementTick+0x108>)
    268c:	4e21      	ldr	r6, [pc, #132]	; (2714 <vTaskIncrementTick+0x10c>)
    268e:	e010      	b.n	26b2 <vTaskIncrementTick+0xaa>
    2690:	2201      	movs	r2, #1
    2692:	4252      	negs	r2, r2
    2694:	4b1d      	ldr	r3, [pc, #116]	; (270c <vTaskIncrementTick+0x104>)
    2696:	601a      	str	r2, [r3, #0]
    2698:	e02d      	b.n	26f6 <vTaskIncrementTick+0xee>
    269a:	4b19      	ldr	r3, [pc, #100]	; (2700 <vTaskIncrementTick+0xf8>)
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	68db      	ldr	r3, [r3, #12]
    26a0:	68dd      	ldr	r5, [r3, #12]
    26a2:	686b      	ldr	r3, [r5, #4]
    26a4:	4a15      	ldr	r2, [pc, #84]	; (26fc <vTaskIncrementTick+0xf4>)
    26a6:	6812      	ldr	r2, [r2, #0]
    26a8:	4293      	cmp	r3, r2
    26aa:	d902      	bls.n	26b2 <vTaskIncrementTick+0xaa>
    26ac:	4a17      	ldr	r2, [pc, #92]	; (270c <vTaskIncrementTick+0x104>)
    26ae:	6013      	str	r3, [r2, #0]
    26b0:	e021      	b.n	26f6 <vTaskIncrementTick+0xee>
    26b2:	1d2c      	adds	r4, r5, #4
    26b4:	1c20      	adds	r0, r4, #0
    26b6:	47b8      	blx	r7
    26b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    26ba:	2b00      	cmp	r3, #0
    26bc:	d003      	beq.n	26c6 <vTaskIncrementTick+0xbe>
    26be:	1c28      	adds	r0, r5, #0
    26c0:	3018      	adds	r0, #24
    26c2:	4b13      	ldr	r3, [pc, #76]	; (2710 <vTaskIncrementTick+0x108>)
    26c4:	4798      	blx	r3
    26c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    26c8:	6832      	ldr	r2, [r6, #0]
    26ca:	4293      	cmp	r3, r2
    26cc:	d901      	bls.n	26d2 <vTaskIncrementTick+0xca>
    26ce:	4a11      	ldr	r2, [pc, #68]	; (2714 <vTaskIncrementTick+0x10c>)
    26d0:	6013      	str	r3, [r2, #0]
    26d2:	0098      	lsls	r0, r3, #2
    26d4:	18c3      	adds	r3, r0, r3
    26d6:	009b      	lsls	r3, r3, #2
    26d8:	480f      	ldr	r0, [pc, #60]	; (2718 <vTaskIncrementTick+0x110>)
    26da:	18c0      	adds	r0, r0, r3
    26dc:	1c21      	adds	r1, r4, #0
    26de:	4b0f      	ldr	r3, [pc, #60]	; (271c <vTaskIncrementTick+0x114>)
    26e0:	4798      	blx	r3
    26e2:	4b07      	ldr	r3, [pc, #28]	; (2700 <vTaskIncrementTick+0xf8>)
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	681b      	ldr	r3, [r3, #0]
    26e8:	2b00      	cmp	r3, #0
    26ea:	d1d6      	bne.n	269a <vTaskIncrementTick+0x92>
    26ec:	e7d0      	b.n	2690 <vTaskIncrementTick+0x88>
	}
	else
	{
		++uxMissedTicks;
    26ee:	4a0c      	ldr	r2, [pc, #48]	; (2720 <vTaskIncrementTick+0x118>)
    26f0:	6813      	ldr	r3, [r2, #0]
    26f2:	3301      	adds	r3, #1
    26f4:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
    26f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26f8:	20000808 	.word	0x20000808
    26fc:	20000824 	.word	0x20000824
    2700:	20000770 	.word	0x20000770
    2704:	20000828 	.word	0x20000828
    2708:	20000778 	.word	0x20000778
    270c:	200000c4 	.word	0x200000c4
    2710:	00002309 	.word	0x00002309
    2714:	2000082c 	.word	0x2000082c
    2718:	20000790 	.word	0x20000790
    271c:	000022b5 	.word	0x000022b5
    2720:	2000076c 	.word	0x2000076c

00002724 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    2724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    2726:	4b2f      	ldr	r3, [pc, #188]	; (27e4 <xTaskResumeAll+0xc0>)
    2728:	681b      	ldr	r3, [r3, #0]
    272a:	2b00      	cmp	r3, #0
    272c:	d101      	bne.n	2732 <xTaskResumeAll+0xe>
    272e:	b672      	cpsid	i
    2730:	e7fe      	b.n	2730 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    2732:	4b2d      	ldr	r3, [pc, #180]	; (27e8 <xTaskResumeAll+0xc4>)
    2734:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    2736:	4b2b      	ldr	r3, [pc, #172]	; (27e4 <xTaskResumeAll+0xc0>)
    2738:	681a      	ldr	r2, [r3, #0]
    273a:	3a01      	subs	r2, #1
    273c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    273e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2740:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2742:	2b00      	cmp	r3, #0
    2744:	d149      	bne.n	27da <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    2746:	4b29      	ldr	r3, [pc, #164]	; (27ec <xTaskResumeAll+0xc8>)
    2748:	681b      	ldr	r3, [r3, #0]
    274a:	2600      	movs	r6, #0
    274c:	2b00      	cmp	r3, #0
    274e:	d122      	bne.n	2796 <xTaskResumeAll+0x72>
    2750:	e043      	b.n	27da <xTaskResumeAll+0xb6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    2752:	4b27      	ldr	r3, [pc, #156]	; (27f0 <xTaskResumeAll+0xcc>)
    2754:	68db      	ldr	r3, [r3, #12]
    2756:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
    2758:	1c38      	adds	r0, r7, #0
    275a:	3018      	adds	r0, #24
    275c:	4b25      	ldr	r3, [pc, #148]	; (27f4 <xTaskResumeAll+0xd0>)
    275e:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
    2760:	1d3d      	adds	r5, r7, #4
    2762:	1c28      	adds	r0, r5, #0
    2764:	4b23      	ldr	r3, [pc, #140]	; (27f4 <xTaskResumeAll+0xd0>)
    2766:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
    2768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    276a:	4a23      	ldr	r2, [pc, #140]	; (27f8 <xTaskResumeAll+0xd4>)
    276c:	6812      	ldr	r2, [r2, #0]
    276e:	4293      	cmp	r3, r2
    2770:	d901      	bls.n	2776 <xTaskResumeAll+0x52>
    2772:	4a21      	ldr	r2, [pc, #132]	; (27f8 <xTaskResumeAll+0xd4>)
    2774:	6013      	str	r3, [r2, #0]
    2776:	0098      	lsls	r0, r3, #2
    2778:	18c3      	adds	r3, r0, r3
    277a:	009b      	lsls	r3, r3, #2
    277c:	481f      	ldr	r0, [pc, #124]	; (27fc <xTaskResumeAll+0xd8>)
    277e:	18c0      	adds	r0, r0, r3
    2780:	1c29      	adds	r1, r5, #0
    2782:	4b1f      	ldr	r3, [pc, #124]	; (2800 <xTaskResumeAll+0xdc>)
    2784:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2786:	4b1f      	ldr	r3, [pc, #124]	; (2804 <xTaskResumeAll+0xe0>)
    2788:	681b      	ldr	r3, [r3, #0]
    278a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    278e:	429a      	cmp	r2, r3
    2790:	d302      	bcc.n	2798 <xTaskResumeAll+0x74>
					{
						xYieldRequired = pdTRUE;
    2792:	2601      	movs	r6, #1
    2794:	e000      	b.n	2798 <xTaskResumeAll+0x74>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2796:	4c16      	ldr	r4, [pc, #88]	; (27f0 <xTaskResumeAll+0xcc>)
    2798:	6823      	ldr	r3, [r4, #0]
    279a:	2b00      	cmp	r3, #0
    279c:	d1d9      	bne.n	2752 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    279e:	4b1a      	ldr	r3, [pc, #104]	; (2808 <xTaskResumeAll+0xe4>)
    27a0:	681b      	ldr	r3, [r3, #0]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d00c      	beq.n	27c0 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    27a6:	4b18      	ldr	r3, [pc, #96]	; (2808 <xTaskResumeAll+0xe4>)
    27a8:	681b      	ldr	r3, [r3, #0]
    27aa:	2b00      	cmp	r3, #0
    27ac:	d008      	beq.n	27c0 <xTaskResumeAll+0x9c>
					{
						vTaskIncrementTick();
    27ae:	4d17      	ldr	r5, [pc, #92]	; (280c <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
    27b0:	4c15      	ldr	r4, [pc, #84]	; (2808 <xTaskResumeAll+0xe4>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    27b2:	47a8      	blx	r5
						--uxMissedTicks;
    27b4:	6823      	ldr	r3, [r4, #0]
    27b6:	3b01      	subs	r3, #1
    27b8:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    27ba:	6823      	ldr	r3, [r4, #0]
    27bc:	2b00      	cmp	r3, #0
    27be:	d1f8      	bne.n	27b2 <xTaskResumeAll+0x8e>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    27c0:	2e01      	cmp	r6, #1
    27c2:	d004      	beq.n	27ce <xTaskResumeAll+0xaa>
    27c4:	4b12      	ldr	r3, [pc, #72]	; (2810 <xTaskResumeAll+0xec>)
    27c6:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    27c8:	2400      	movs	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    27ca:	2b01      	cmp	r3, #1
    27cc:	d105      	bne.n	27da <xTaskResumeAll+0xb6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    27ce:	2200      	movs	r2, #0
    27d0:	4b0f      	ldr	r3, [pc, #60]	; (2810 <xTaskResumeAll+0xec>)
    27d2:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    27d4:	4b0f      	ldr	r3, [pc, #60]	; (2814 <xTaskResumeAll+0xf0>)
    27d6:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    27d8:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    27da:	4b0f      	ldr	r3, [pc, #60]	; (2818 <xTaskResumeAll+0xf4>)
    27dc:	4798      	blx	r3

	return xAlreadyYielded;
}
    27de:	1c20      	adds	r0, r4, #0
    27e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	20000808 	.word	0x20000808
    27e8:	00002bb9 	.word	0x00002bb9
    27ec:	2000084c 	.word	0x2000084c
    27f0:	20000810 	.word	0x20000810
    27f4:	00002309 	.word	0x00002309
    27f8:	2000082c 	.word	0x2000082c
    27fc:	20000790 	.word	0x20000790
    2800:	000022b5 	.word	0x000022b5
    2804:	2000080c 	.word	0x2000080c
    2808:	2000076c 	.word	0x2000076c
    280c:	00002609 	.word	0x00002609
    2810:	20000848 	.word	0x20000848
    2814:	00002ba1 	.word	0x00002ba1
    2818:	00002bd1 	.word	0x00002bd1

0000281c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    281c:	b510      	push	{r4, lr}
    281e:	1e04      	subs	r4, r0, #0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    2820:	d010      	beq.n	2844 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
    2822:	4b0a      	ldr	r3, [pc, #40]	; (284c <vTaskDelay+0x30>)
    2824:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    2826:	4b0a      	ldr	r3, [pc, #40]	; (2850 <vTaskDelay+0x34>)
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    282c:	4b09      	ldr	r3, [pc, #36]	; (2854 <vTaskDelay+0x38>)
    282e:	6818      	ldr	r0, [r3, #0]
    2830:	3004      	adds	r0, #4
    2832:	4b09      	ldr	r3, [pc, #36]	; (2858 <vTaskDelay+0x3c>)
    2834:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2836:	1c20      	adds	r0, r4, #0
    2838:	4b08      	ldr	r3, [pc, #32]	; (285c <vTaskDelay+0x40>)
    283a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    283c:	4b08      	ldr	r3, [pc, #32]	; (2860 <vTaskDelay+0x44>)
    283e:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    2840:	2800      	cmp	r0, #0
    2842:	d101      	bne.n	2848 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
    2844:	4b07      	ldr	r3, [pc, #28]	; (2864 <vTaskDelay+0x48>)
    2846:	4798      	blx	r3
		}
	}
    2848:	bd10      	pop	{r4, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	000025d9 	.word	0x000025d9
    2850:	20000824 	.word	0x20000824
    2854:	2000080c 	.word	0x2000080c
    2858:	00002309 	.word	0x00002309
    285c:	0000233d 	.word	0x0000233d
    2860:	00002725 	.word	0x00002725
    2864:	00002ba1 	.word	0x00002ba1

00002868 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2868:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    286a:	4b24      	ldr	r3, [pc, #144]	; (28fc <vTaskSwitchContext+0x94>)
    286c:	681b      	ldr	r3, [r3, #0]
    286e:	2b00      	cmp	r3, #0
    2870:	d110      	bne.n	2894 <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    2872:	4b23      	ldr	r3, [pc, #140]	; (2900 <vTaskSwitchContext+0x98>)
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	009a      	lsls	r2, r3, #2
    2878:	18d3      	adds	r3, r2, r3
    287a:	009b      	lsls	r3, r3, #2
    287c:	4a21      	ldr	r2, [pc, #132]	; (2904 <vTaskSwitchContext+0x9c>)
    287e:	589b      	ldr	r3, [r3, r2]
    2880:	2b00      	cmp	r3, #0
    2882:	d11a      	bne.n	28ba <vTaskSwitchContext+0x52>
    2884:	4b1e      	ldr	r3, [pc, #120]	; (2900 <vTaskSwitchContext+0x98>)
    2886:	681b      	ldr	r3, [r3, #0]
    2888:	2b00      	cmp	r3, #0
    288a:	d00a      	beq.n	28a2 <vTaskSwitchContext+0x3a>
    288c:	4a1c      	ldr	r2, [pc, #112]	; (2900 <vTaskSwitchContext+0x98>)
    288e:	4c1d      	ldr	r4, [pc, #116]	; (2904 <vTaskSwitchContext+0x9c>)
    2890:	1c10      	adds	r0, r2, #0
    2892:	e008      	b.n	28a6 <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2894:	2201      	movs	r2, #1
    2896:	4b1c      	ldr	r3, [pc, #112]	; (2908 <vTaskSwitchContext+0xa0>)
    2898:	601a      	str	r2, [r3, #0]
    289a:	e02d      	b.n	28f8 <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    289c:	6803      	ldr	r3, [r0, #0]
    289e:	2b00      	cmp	r3, #0
    28a0:	d101      	bne.n	28a6 <vTaskSwitchContext+0x3e>
    28a2:	b672      	cpsid	i
    28a4:	e7fe      	b.n	28a4 <vTaskSwitchContext+0x3c>
    28a6:	6813      	ldr	r3, [r2, #0]
    28a8:	3b01      	subs	r3, #1
    28aa:	6013      	str	r3, [r2, #0]
    28ac:	6813      	ldr	r3, [r2, #0]
    28ae:	0099      	lsls	r1, r3, #2
    28b0:	18cb      	adds	r3, r1, r3
    28b2:	009b      	lsls	r3, r3, #2
    28b4:	591b      	ldr	r3, [r3, r4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d0f0      	beq.n	289c <vTaskSwitchContext+0x34>
    28ba:	4b11      	ldr	r3, [pc, #68]	; (2900 <vTaskSwitchContext+0x98>)
    28bc:	681b      	ldr	r3, [r3, #0]
    28be:	4c11      	ldr	r4, [pc, #68]	; (2904 <vTaskSwitchContext+0x9c>)
    28c0:	009a      	lsls	r2, r3, #2
    28c2:	18d1      	adds	r1, r2, r3
    28c4:	0089      	lsls	r1, r1, #2
    28c6:	1861      	adds	r1, r4, r1
    28c8:	6848      	ldr	r0, [r1, #4]
    28ca:	6840      	ldr	r0, [r0, #4]
    28cc:	6048      	str	r0, [r1, #4]
    28ce:	18d2      	adds	r2, r2, r3
    28d0:	0092      	lsls	r2, r2, #2
    28d2:	3208      	adds	r2, #8
    28d4:	18a2      	adds	r2, r4, r2
    28d6:	4290      	cmp	r0, r2
    28d8:	d105      	bne.n	28e6 <vTaskSwitchContext+0x7e>
    28da:	6841      	ldr	r1, [r0, #4]
    28dc:	009a      	lsls	r2, r3, #2
    28de:	18d2      	adds	r2, r2, r3
    28e0:	0092      	lsls	r2, r2, #2
    28e2:	18a2      	adds	r2, r4, r2
    28e4:	6051      	str	r1, [r2, #4]
    28e6:	009a      	lsls	r2, r3, #2
    28e8:	18d3      	adds	r3, r2, r3
    28ea:	009b      	lsls	r3, r3, #2
    28ec:	4a05      	ldr	r2, [pc, #20]	; (2904 <vTaskSwitchContext+0x9c>)
    28ee:	18d3      	adds	r3, r2, r3
    28f0:	685b      	ldr	r3, [r3, #4]
    28f2:	68da      	ldr	r2, [r3, #12]
    28f4:	4b05      	ldr	r3, [pc, #20]	; (290c <vTaskSwitchContext+0xa4>)
    28f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
    28f8:	bd10      	pop	{r4, pc}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	20000808 	.word	0x20000808
    2900:	2000082c 	.word	0x2000082c
    2904:	20000790 	.word	0x20000790
    2908:	20000848 	.word	0x20000848
    290c:	2000080c 	.word	0x2000080c

00002910 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2910:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
    2912:	2800      	cmp	r0, #0
    2914:	d101      	bne.n	291a <vTaskPlaceOnEventList+0xa>
    2916:	b672      	cpsid	i
    2918:	e7fe      	b.n	2918 <vTaskPlaceOnEventList+0x8>
    291a:	1c0c      	adds	r4, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    291c:	4d07      	ldr	r5, [pc, #28]	; (293c <vTaskPlaceOnEventList+0x2c>)
    291e:	6829      	ldr	r1, [r5, #0]
    2920:	3118      	adds	r1, #24
    2922:	4b07      	ldr	r3, [pc, #28]	; (2940 <vTaskPlaceOnEventList+0x30>)
    2924:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    2926:	6828      	ldr	r0, [r5, #0]
    2928:	3004      	adds	r0, #4
    292a:	4b06      	ldr	r3, [pc, #24]	; (2944 <vTaskPlaceOnEventList+0x34>)
    292c:	4798      	blx	r3
	}
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    292e:	4b06      	ldr	r3, [pc, #24]	; (2948 <vTaskPlaceOnEventList+0x38>)
    2930:	6818      	ldr	r0, [r3, #0]
    2932:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2934:	4b05      	ldr	r3, [pc, #20]	; (294c <vTaskPlaceOnEventList+0x3c>)
    2936:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2938:	bd38      	pop	{r3, r4, r5, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	2000080c 	.word	0x2000080c
    2940:	000022d1 	.word	0x000022d1
    2944:	00002309 	.word	0x00002309
    2948:	20000824 	.word	0x20000824
    294c:	0000233d 	.word	0x0000233d

00002950 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2950:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2952:	68c3      	ldr	r3, [r0, #12]
    2954:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    2956:	2d00      	cmp	r5, #0
    2958:	d101      	bne.n	295e <xTaskRemoveFromEventList+0xe>
    295a:	b672      	cpsid	i
    295c:	e7fe      	b.n	295c <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    295e:	1c2c      	adds	r4, r5, #0
    2960:	3418      	adds	r4, #24
    2962:	1c20      	adds	r0, r4, #0
    2964:	4b12      	ldr	r3, [pc, #72]	; (29b0 <xTaskRemoveFromEventList+0x60>)
    2966:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2968:	4b12      	ldr	r3, [pc, #72]	; (29b4 <xTaskRemoveFromEventList+0x64>)
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	2b00      	cmp	r3, #0
    296e:	d113      	bne.n	2998 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2970:	1d2c      	adds	r4, r5, #4
    2972:	1c20      	adds	r0, r4, #0
    2974:	4b0e      	ldr	r3, [pc, #56]	; (29b0 <xTaskRemoveFromEventList+0x60>)
    2976:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2978:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    297a:	4a0f      	ldr	r2, [pc, #60]	; (29b8 <xTaskRemoveFromEventList+0x68>)
    297c:	6812      	ldr	r2, [r2, #0]
    297e:	4293      	cmp	r3, r2
    2980:	d901      	bls.n	2986 <xTaskRemoveFromEventList+0x36>
    2982:	4a0d      	ldr	r2, [pc, #52]	; (29b8 <xTaskRemoveFromEventList+0x68>)
    2984:	6013      	str	r3, [r2, #0]
    2986:	0098      	lsls	r0, r3, #2
    2988:	18c3      	adds	r3, r0, r3
    298a:	009b      	lsls	r3, r3, #2
    298c:	480b      	ldr	r0, [pc, #44]	; (29bc <xTaskRemoveFromEventList+0x6c>)
    298e:	18c0      	adds	r0, r0, r3
    2990:	1c21      	adds	r1, r4, #0
    2992:	4b0b      	ldr	r3, [pc, #44]	; (29c0 <xTaskRemoveFromEventList+0x70>)
    2994:	4798      	blx	r3
    2996:	e003      	b.n	29a0 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2998:	480a      	ldr	r0, [pc, #40]	; (29c4 <xTaskRemoveFromEventList+0x74>)
    299a:	1c21      	adds	r1, r4, #0
    299c:	4b08      	ldr	r3, [pc, #32]	; (29c0 <xTaskRemoveFromEventList+0x70>)
    299e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    29a0:	4b09      	ldr	r3, [pc, #36]	; (29c8 <xTaskRemoveFromEventList+0x78>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    29a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    29a8:	2000      	movs	r0, #0
    29aa:	429a      	cmp	r2, r3
    29ac:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    29ae:	bd38      	pop	{r3, r4, r5, pc}
    29b0:	00002309 	.word	0x00002309
    29b4:	20000808 	.word	0x20000808
    29b8:	2000082c 	.word	0x2000082c
    29bc:	20000790 	.word	0x20000790
    29c0:	000022b5 	.word	0x000022b5
    29c4:	20000810 	.word	0x20000810
    29c8:	2000080c 	.word	0x2000080c

000029cc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    29cc:	2800      	cmp	r0, #0
    29ce:	d101      	bne.n	29d4 <vTaskSetTimeOutState+0x8>
    29d0:	b672      	cpsid	i
    29d2:	e7fe      	b.n	29d2 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    29d4:	4b03      	ldr	r3, [pc, #12]	; (29e4 <vTaskSetTimeOutState+0x18>)
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    29da:	4b03      	ldr	r3, [pc, #12]	; (29e8 <vTaskSetTimeOutState+0x1c>)
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	6043      	str	r3, [r0, #4]
}
    29e0:	4770      	bx	lr
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	20000778 	.word	0x20000778
    29e8:	20000824 	.word	0x20000824

000029ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    29ec:	b570      	push	{r4, r5, r6, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
    29ee:	2800      	cmp	r0, #0
    29f0:	d101      	bne.n	29f6 <xTaskCheckForTimeOut+0xa>
    29f2:	b672      	cpsid	i
    29f4:	e7fe      	b.n	29f4 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
    29f6:	2900      	cmp	r1, #0
    29f8:	d101      	bne.n	29fe <xTaskCheckForTimeOut+0x12>
    29fa:	b672      	cpsid	i
    29fc:	e7fe      	b.n	29fc <xTaskCheckForTimeOut+0x10>
    29fe:	1c0d      	adds	r5, r1, #0
    2a00:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    2a02:	4b11      	ldr	r3, [pc, #68]	; (2a48 <xTaskCheckForTimeOut+0x5c>)
    2a04:	4798      	blx	r3
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2a06:	4b11      	ldr	r3, [pc, #68]	; (2a4c <xTaskCheckForTimeOut+0x60>)
    2a08:	681b      	ldr	r3, [r3, #0]
    2a0a:	6822      	ldr	r2, [r4, #0]
    2a0c:	429a      	cmp	r2, r3
    2a0e:	d005      	beq.n	2a1c <xTaskCheckForTimeOut+0x30>
    2a10:	4b0f      	ldr	r3, [pc, #60]	; (2a50 <xTaskCheckForTimeOut+0x64>)
    2a12:	681b      	ldr	r3, [r3, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2a14:	2601      	movs	r6, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2a16:	6862      	ldr	r2, [r4, #4]
    2a18:	429a      	cmp	r2, r3
    2a1a:	d910      	bls.n	2a3e <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2a1c:	4b0c      	ldr	r3, [pc, #48]	; (2a50 <xTaskCheckForTimeOut+0x64>)
    2a1e:	6819      	ldr	r1, [r3, #0]
    2a20:	6860      	ldr	r0, [r4, #4]
    2a22:	682b      	ldr	r3, [r5, #0]
    2a24:	1a09      	subs	r1, r1, r0
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    2a26:	2601      	movs	r6, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2a28:	4299      	cmp	r1, r3
    2a2a:	d208      	bcs.n	2a3e <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2a2c:	4a08      	ldr	r2, [pc, #32]	; (2a50 <xTaskCheckForTimeOut+0x64>)
    2a2e:	6812      	ldr	r2, [r2, #0]
    2a30:	1a12      	subs	r2, r2, r0
    2a32:	1a9b      	subs	r3, r3, r2
    2a34:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
    2a36:	1c20      	adds	r0, r4, #0
    2a38:	4b06      	ldr	r3, [pc, #24]	; (2a54 <xTaskCheckForTimeOut+0x68>)
    2a3a:	4798      	blx	r3
			xReturn = pdFALSE;
    2a3c:	2600      	movs	r6, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    2a3e:	4b06      	ldr	r3, [pc, #24]	; (2a58 <xTaskCheckForTimeOut+0x6c>)
    2a40:	4798      	blx	r3

	return xReturn;
}
    2a42:	1c30      	adds	r0, r6, #0
    2a44:	bd70      	pop	{r4, r5, r6, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	00002bb9 	.word	0x00002bb9
    2a4c:	20000778 	.word	0x20000778
    2a50:	20000824 	.word	0x20000824
    2a54:	000029cd 	.word	0x000029cd
    2a58:	00002bd1 	.word	0x00002bd1

00002a5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    2a5c:	2201      	movs	r2, #1
    2a5e:	4b01      	ldr	r3, [pc, #4]	; (2a64 <vTaskMissedYield+0x8>)
    2a60:	601a      	str	r2, [r3, #0]
}
    2a62:	4770      	bx	lr
    2a64:	20000848 	.word	0x20000848

00002a68 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    2a68:	4b01      	ldr	r3, [pc, #4]	; (2a70 <xTaskGetCurrentTaskHandle+0x8>)
    2a6a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    2a6c:	4770      	bx	lr
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	2000080c 	.word	0x2000080c

00002a74 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    2a74:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    2a76:	2800      	cmp	r0, #0
    2a78:	d02f      	beq.n	2ada <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    2a7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2a7c:	4a17      	ldr	r2, [pc, #92]	; (2adc <vTaskPriorityInherit+0x68>)
    2a7e:	6812      	ldr	r2, [r2, #0]
    2a80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2a82:	4293      	cmp	r3, r2
    2a84:	d229      	bcs.n	2ada <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    2a86:	4a15      	ldr	r2, [pc, #84]	; (2adc <vTaskPriorityInherit+0x68>)
    2a88:	6812      	ldr	r2, [r2, #0]
    2a8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    2a8c:	2206      	movs	r2, #6
    2a8e:	1a52      	subs	r2, r2, r1
    2a90:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2a92:	009a      	lsls	r2, r3, #2
    2a94:	18d3      	adds	r3, r2, r3
    2a96:	009b      	lsls	r3, r3, #2
    2a98:	4a11      	ldr	r2, [pc, #68]	; (2ae0 <vTaskPriorityInherit+0x6c>)
    2a9a:	18d3      	adds	r3, r2, r3
    2a9c:	6942      	ldr	r2, [r0, #20]
    2a9e:	429a      	cmp	r2, r3
    2aa0:	d117      	bne.n	2ad2 <vTaskPriorityInherit+0x5e>
    2aa2:	1c05      	adds	r5, r0, #0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    2aa4:	1d04      	adds	r4, r0, #4
    2aa6:	1c20      	adds	r0, r4, #0
    2aa8:	4b0e      	ldr	r3, [pc, #56]	; (2ae4 <vTaskPriorityInherit+0x70>)
    2aaa:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <vTaskPriorityInherit+0x68>)
    2aae:	681b      	ldr	r3, [r3, #0]
    2ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ab2:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
    2ab4:	4a0c      	ldr	r2, [pc, #48]	; (2ae8 <vTaskPriorityInherit+0x74>)
    2ab6:	6812      	ldr	r2, [r2, #0]
    2ab8:	4293      	cmp	r3, r2
    2aba:	d901      	bls.n	2ac0 <vTaskPriorityInherit+0x4c>
    2abc:	4a0a      	ldr	r2, [pc, #40]	; (2ae8 <vTaskPriorityInherit+0x74>)
    2abe:	6013      	str	r3, [r2, #0]
    2ac0:	0098      	lsls	r0, r3, #2
    2ac2:	18c0      	adds	r0, r0, r3
    2ac4:	0083      	lsls	r3, r0, #2
    2ac6:	4806      	ldr	r0, [pc, #24]	; (2ae0 <vTaskPriorityInherit+0x6c>)
    2ac8:	18c0      	adds	r0, r0, r3
    2aca:	1c21      	adds	r1, r4, #0
    2acc:	4b07      	ldr	r3, [pc, #28]	; (2aec <vTaskPriorityInherit+0x78>)
    2ace:	4798      	blx	r3
    2ad0:	e003      	b.n	2ada <vTaskPriorityInherit+0x66>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2ad2:	4b02      	ldr	r3, [pc, #8]	; (2adc <vTaskPriorityInherit+0x68>)
    2ad4:	681b      	ldr	r3, [r3, #0]
    2ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2ad8:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    2ada:	bd38      	pop	{r3, r4, r5, pc}
    2adc:	2000080c 	.word	0x2000080c
    2ae0:	20000790 	.word	0x20000790
    2ae4:	00002309 	.word	0x00002309
    2ae8:	2000082c 	.word	0x2000082c
    2aec:	000022b5 	.word	0x000022b5

00002af0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    2af0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2af2:	2800      	cmp	r0, #0
    2af4:	d01b      	beq.n	2b2e <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2af6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2af8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    2afa:	4293      	cmp	r3, r2
    2afc:	d017      	beq.n	2b2e <vTaskPriorityDisinherit+0x3e>
    2afe:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    2b00:	1d05      	adds	r5, r0, #4
    2b02:	1c28      	adds	r0, r5, #0
    2b04:	4b0a      	ldr	r3, [pc, #40]	; (2b30 <vTaskPriorityDisinherit+0x40>)
    2b06:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2b0a:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2b0c:	2206      	movs	r2, #6
    2b0e:	1ad2      	subs	r2, r2, r3
    2b10:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    2b12:	4a08      	ldr	r2, [pc, #32]	; (2b34 <vTaskPriorityDisinherit+0x44>)
    2b14:	6812      	ldr	r2, [r2, #0]
    2b16:	4293      	cmp	r3, r2
    2b18:	d901      	bls.n	2b1e <vTaskPriorityDisinherit+0x2e>
    2b1a:	4a06      	ldr	r2, [pc, #24]	; (2b34 <vTaskPriorityDisinherit+0x44>)
    2b1c:	6013      	str	r3, [r2, #0]
    2b1e:	0098      	lsls	r0, r3, #2
    2b20:	18c0      	adds	r0, r0, r3
    2b22:	0083      	lsls	r3, r0, #2
    2b24:	4804      	ldr	r0, [pc, #16]	; (2b38 <vTaskPriorityDisinherit+0x48>)
    2b26:	18c0      	adds	r0, r0, r3
    2b28:	1c29      	adds	r1, r5, #0
    2b2a:	4b04      	ldr	r3, [pc, #16]	; (2b3c <vTaskPriorityDisinherit+0x4c>)
    2b2c:	4798      	blx	r3
			}
		}
	}
    2b2e:	bd38      	pop	{r3, r4, r5, pc}
    2b30:	00002309 	.word	0x00002309
    2b34:	2000082c 	.word	0x2000082c
    2b38:	20000790 	.word	0x20000790
    2b3c:	000022b5 	.word	0x000022b5

00002b40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    2b40:	4a06      	ldr	r2, [pc, #24]	; (2b5c <pxCurrentTCBConst3>)
    2b42:	6813      	ldr	r3, [r2, #0]
    2b44:	6818      	ldr	r0, [r3, #0]
    2b46:	3020      	adds	r0, #32
    2b48:	f380 8809 	msr	PSP, r0
    2b4c:	2002      	movs	r0, #2
    2b4e:	f380 8814 	msr	CONTROL, r0
    2b52:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    2b54:	46ae      	mov	lr, r5
    2b56:	b662      	cpsie	i
    2b58:	bd00      	pop	{pc}
    2b5a:	46c0      	nop			; (mov r8, r8)

00002b5c <pxCurrentTCBConst3>:
    2b5c:	2000080c 	.word	0x2000080c

00002b60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2b60:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    2b62:	1f03      	subs	r3, r0, #4
    2b64:	2480      	movs	r4, #128	; 0x80
    2b66:	0464      	lsls	r4, r4, #17
    2b68:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    2b6a:	3b04      	subs	r3, #4
    2b6c:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    2b6e:	3b18      	subs	r3, #24
    2b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    2b72:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    2b74:	bd10      	pop	{r4, pc}
    2b76:	46c0      	nop			; (mov r8, r8)

00002b78 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    2b78:	4b08      	ldr	r3, [pc, #32]	; (2b9c <pxCurrentTCBConst2>)
    2b7a:	6819      	ldr	r1, [r3, #0]
    2b7c:	6808      	ldr	r0, [r1, #0]
    2b7e:	3010      	adds	r0, #16
    2b80:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2b82:	46a0      	mov	r8, r4
    2b84:	46a9      	mov	r9, r5
    2b86:	46b2      	mov	sl, r6
    2b88:	46bb      	mov	fp, r7
    2b8a:	f380 8809 	msr	PSP, r0
    2b8e:	3820      	subs	r0, #32
    2b90:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2b92:	4671      	mov	r1, lr
    2b94:	200d      	movs	r0, #13
    2b96:	4301      	orrs	r1, r0
    2b98:	4708      	bx	r1
    2b9a:	46c0      	nop			; (mov r8, r8)

00002b9c <pxCurrentTCBConst2>:
    2b9c:	2000080c 	.word	0x2000080c

00002ba0 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2ba0:	2280      	movs	r2, #128	; 0x80
    2ba2:	0552      	lsls	r2, r2, #21
    2ba4:	4b03      	ldr	r3, [pc, #12]	; (2bb4 <vPortYield+0x14>)
    2ba6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    2ba8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2bac:	f3bf 8f6f 	isb	sy
}
    2bb0:	4770      	bx	lr
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	e000ed04 	.word	0xe000ed04

00002bb8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    2bb8:	b672      	cpsid	i
    uxCriticalNesting++;
    2bba:	4a04      	ldr	r2, [pc, #16]	; (2bcc <vPortEnterCritical+0x14>)
    2bbc:	6813      	ldr	r3, [r2, #0]
    2bbe:	3301      	adds	r3, #1
    2bc0:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    2bc2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2bc6:	f3bf 8f6f 	isb	sy
}
    2bca:	4770      	bx	lr
    2bcc:	200000c8 	.word	0x200000c8

00002bd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    2bd0:	4a03      	ldr	r2, [pc, #12]	; (2be0 <vPortExitCritical+0x10>)
    2bd2:	6813      	ldr	r3, [r2, #0]
    2bd4:	3b01      	subs	r3, #1
    2bd6:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d100      	bne.n	2bde <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    2bdc:	b662      	cpsie	i
    }
}
    2bde:	4770      	bx	lr
    2be0:	200000c8 	.word	0x200000c8

00002be4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2be4:	f3ef 8009 	mrs	r0, PSP
    2be8:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <pxCurrentTCBConst>)
    2bea:	681a      	ldr	r2, [r3, #0]
    2bec:	3820      	subs	r0, #32
    2bee:	6010      	str	r0, [r2, #0]
    2bf0:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2bf2:	4644      	mov	r4, r8
    2bf4:	464d      	mov	r5, r9
    2bf6:	4656      	mov	r6, sl
    2bf8:	465f      	mov	r7, fp
    2bfa:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2bfc:	b508      	push	{r3, lr}
    2bfe:	b672      	cpsid	i
    2c00:	f7ff fe32 	bl	2868 <vTaskSwitchContext>
    2c04:	b662      	cpsie	i
    2c06:	bc0c      	pop	{r2, r3}
    2c08:	6811      	ldr	r1, [r2, #0]
    2c0a:	6808      	ldr	r0, [r1, #0]
    2c0c:	3010      	adds	r0, #16
    2c0e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c10:	46a0      	mov	r8, r4
    2c12:	46a9      	mov	r9, r5
    2c14:	46b2      	mov	sl, r6
    2c16:	46bb      	mov	fp, r7
    2c18:	f380 8809 	msr	PSP, r0
    2c1c:	3820      	subs	r0, #32
    2c1e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2c20:	4718      	bx	r3
    2c22:	46c0      	nop			; (mov r8, r8)

00002c24 <pxCurrentTCBConst>:
    2c24:	2000080c 	.word	0x2000080c

00002c28 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    2c28:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    2c2a:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    2c2c:	4b01      	ldr	r3, [pc, #4]	; (2c34 <SysTick_Handler+0xc>)
    2c2e:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    2c30:	b662      	cpsie	i
}
    2c32:	bd08      	pop	{r3, pc}
    2c34:	00002609 	.word	0x00002609

00002c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    2c38:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    2c3a:	2200      	movs	r2, #0
    2c3c:	4b07      	ldr	r3, [pc, #28]	; (2c5c <vPortSetupTimerInterrupt+0x24>)
    2c3e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2c40:	2000      	movs	r0, #0
    2c42:	4b07      	ldr	r3, [pc, #28]	; (2c60 <vPortSetupTimerInterrupt+0x28>)
    2c44:	4798      	blx	r3
    2c46:	21fa      	movs	r1, #250	; 0xfa
    2c48:	0089      	lsls	r1, r1, #2
    2c4a:	4b06      	ldr	r3, [pc, #24]	; (2c64 <vPortSetupTimerInterrupt+0x2c>)
    2c4c:	4798      	blx	r3
    2c4e:	3801      	subs	r0, #1
    2c50:	4b05      	ldr	r3, [pc, #20]	; (2c68 <vPortSetupTimerInterrupt+0x30>)
    2c52:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    2c54:	2207      	movs	r2, #7
    2c56:	4b05      	ldr	r3, [pc, #20]	; (2c6c <vPortSetupTimerInterrupt+0x34>)
    2c58:	601a      	str	r2, [r3, #0]
}
    2c5a:	bd08      	pop	{r3, pc}
    2c5c:	e000e018 	.word	0xe000e018
    2c60:	00004a75 	.word	0x00004a75
    2c64:	00007105 	.word	0x00007105
    2c68:	e000e014 	.word	0xe000e014
    2c6c:	e000e010 	.word	0xe000e010

00002c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    2c70:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    2c72:	4b0a      	ldr	r3, [pc, #40]	; (2c9c <xPortStartScheduler+0x2c>)
    2c74:	681a      	ldr	r2, [r3, #0]
    2c76:	21ff      	movs	r1, #255	; 0xff
    2c78:	0409      	lsls	r1, r1, #16
    2c7a:	430a      	orrs	r2, r1
    2c7c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    2c7e:	681a      	ldr	r2, [r3, #0]
    2c80:	21ff      	movs	r1, #255	; 0xff
    2c82:	0609      	lsls	r1, r1, #24
    2c84:	430a      	orrs	r2, r1
    2c86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    2c88:	4b05      	ldr	r3, [pc, #20]	; (2ca0 <xPortStartScheduler+0x30>)
    2c8a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    2c8c:	2200      	movs	r2, #0
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <xPortStartScheduler+0x34>)
    2c90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <xPortStartScheduler+0x38>)
    2c94:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
    2c96:	2000      	movs	r0, #0
    2c98:	bd08      	pop	{r3, pc}
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	e000ed20 	.word	0xe000ed20
    2ca0:	00002c39 	.word	0x00002c39
    2ca4:	200000c8 	.word	0x200000c8
    2ca8:	00002b41 	.word	0x00002b41

00002cac <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2cac:	b538      	push	{r3, r4, r5, lr}
    2cae:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2cb0:	0743      	lsls	r3, r0, #29
    2cb2:	d002      	beq.n	2cba <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2cb4:	2307      	movs	r3, #7
    2cb6:	439c      	bics	r4, r3
    2cb8:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    2cba:	4b10      	ldr	r3, [pc, #64]	; (2cfc <pvPortMalloc+0x50>)
    2cbc:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    2cbe:	4b10      	ldr	r3, [pc, #64]	; (2d00 <pvPortMalloc+0x54>)
    2cc0:	681b      	ldr	r3, [r3, #0]
    2cc2:	2b00      	cmp	r3, #0
    2cc4:	d105      	bne.n	2cd2 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    2cc6:	2207      	movs	r2, #7
    2cc8:	4b0e      	ldr	r3, [pc, #56]	; (2d04 <pvPortMalloc+0x58>)
    2cca:	3308      	adds	r3, #8
    2ccc:	4393      	bics	r3, r2
    2cce:	4a0c      	ldr	r2, [pc, #48]	; (2d00 <pvPortMalloc+0x54>)
    2cd0:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2cd2:	4b0d      	ldr	r3, [pc, #52]	; (2d08 <pvPortMalloc+0x5c>)
    2cd4:	681b      	ldr	r3, [r3, #0]
    2cd6:	18e4      	adds	r4, r4, r3
    2cd8:	4a0c      	ldr	r2, [pc, #48]	; (2d0c <pvPortMalloc+0x60>)
    2cda:	4294      	cmp	r4, r2
    2cdc:	d807      	bhi.n	2cee <pvPortMalloc+0x42>
    2cde:	42a3      	cmp	r3, r4
    2ce0:	d207      	bcs.n	2cf2 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2ce2:	4a07      	ldr	r2, [pc, #28]	; (2d00 <pvPortMalloc+0x54>)
    2ce4:	6815      	ldr	r5, [r2, #0]
    2ce6:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    2ce8:	4b07      	ldr	r3, [pc, #28]	; (2d08 <pvPortMalloc+0x5c>)
    2cea:	601c      	str	r4, [r3, #0]
    2cec:	e002      	b.n	2cf4 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    2cee:	2500      	movs	r5, #0
    2cf0:	e000      	b.n	2cf4 <pvPortMalloc+0x48>
    2cf2:	2500      	movs	r5, #0
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
    2cf4:	4b06      	ldr	r3, [pc, #24]	; (2d10 <pvPortMalloc+0x64>)
    2cf6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2cf8:	1c28      	adds	r0, r5, #0
    2cfa:	bd38      	pop	{r3, r4, r5, pc}
    2cfc:	000025d9 	.word	0x000025d9
    2d00:	200042f0 	.word	0x200042f0
    2d04:	20000858 	.word	0x20000858
    2d08:	20000854 	.word	0x20000854
    2d0c:	00003a8f 	.word	0x00003a8f
    2d10:	00002725 	.word	0x00002725

00002d14 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    2d14:	2800      	cmp	r0, #0
    2d16:	d001      	beq.n	2d1c <vPortFree+0x8>
    2d18:	b672      	cpsid	i
    2d1a:	e7fe      	b.n	2d1a <vPortFree+0x6>
}
    2d1c:	4770      	bx	lr
    2d1e:	46c0      	nop			; (mov r8, r8)

00002d20 <main>:




int main()
{
    2d20:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2d22:	b672      	cpsid	i
    2d24:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    cpu_irq_disable();
    2d28:	4c15      	ldr	r4, [pc, #84]	; (2d80 <main+0x60>)
    2d2a:	2300      	movs	r3, #0
    2d2c:	7023      	strb	r3, [r4, #0]
	system_interrupt_disable_global();

	//configureHMI 
	configureHMI();
    2d2e:	4b15      	ldr	r3, [pc, #84]	; (2d84 <main+0x64>)
    2d30:	4798      	blx	r3
    //RTC configure
   configureInternalClock();
    2d32:	4b15      	ldr	r3, [pc, #84]	; (2d88 <main+0x68>)
    2d34:	4798      	blx	r3
    //configure external intrerrupt for pps
    configurationPPS();
    2d36:	4b15      	ldr	r3, [pc, #84]	; (2d8c <main+0x6c>)
    2d38:	4798      	blx	r3
    //create your task
    kernelConfig();
    2d3a:	4b15      	ldr	r3, [pc, #84]	; (2d90 <main+0x70>)
    2d3c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    cpu_irq_enable();
    2d3e:	2301      	movs	r3, #1
    2d40:	7023      	strb	r3, [r4, #0]
    2d42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2d46:	b662      	cpsie	i
    //demask global interrupt
    system_interrupt_enable_global();
    hmi.printf("\r\n\r\n**********************************************************************\r\n");
    2d48:	4d12      	ldr	r5, [pc, #72]	; (2d94 <main+0x74>)
    2d4a:	1c28      	adds	r0, r5, #0
    2d4c:	4912      	ldr	r1, [pc, #72]	; (2d98 <main+0x78>)
    2d4e:	4c13      	ldr	r4, [pc, #76]	; (2d9c <main+0x7c>)
    2d50:	47a0      	blx	r4
    hmi.printf("tick time: %lu ms\r\n",portTICK_RATE_MS);   
    2d52:	1c28      	adds	r0, r5, #0
    2d54:	4912      	ldr	r1, [pc, #72]	; (2da0 <main+0x80>)
    2d56:	2201      	movs	r2, #1
    2d58:	47a0      	blx	r4
    #ifdef MASTERMODE
        hmi.printf("Master clock\r\n");
    #else
        hmi.printf("Slave Clock \r\n");
    2d5a:	1c28      	adds	r0, r5, #0
    2d5c:	4911      	ldr	r1, [pc, #68]	; (2da4 <main+0x84>)
    2d5e:	47a0      	blx	r4
    #endif
    hmi.printf("end config application begin\r\n");
    2d60:	1c28      	adds	r0, r5, #0
    2d62:	4911      	ldr	r1, [pc, #68]	; (2da8 <main+0x88>)
    2d64:	47a0      	blx	r4
    hmi.printf("\r\n**********************************************************************\r\n\r\n");
    2d66:	1c28      	adds	r0, r5, #0
    2d68:	4910      	ldr	r1, [pc, #64]	; (2dac <main+0x8c>)
    2d6a:	47a0      	blx	r4
    //start the scheduler
    vTaskStartScheduler();
    2d6c:	4b10      	ldr	r3, [pc, #64]	; (2db0 <main+0x90>)
    2d6e:	4798      	blx	r3
    while(1){//trap
		hmi.printf("trap!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    2d70:	4e08      	ldr	r6, [pc, #32]	; (2d94 <main+0x74>)
    2d72:	4d10      	ldr	r5, [pc, #64]	; (2db4 <main+0x94>)
    2d74:	4c09      	ldr	r4, [pc, #36]	; (2d9c <main+0x7c>)
    2d76:	1c30      	adds	r0, r6, #0
    2d78:	1c29      	adds	r1, r5, #0
    2d7a:	47a0      	blx	r4





int main()
    2d7c:	e7fb      	b.n	2d76 <main+0x56>
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	200000d0 	.word	0x200000d0
    2d84:	0000052d 	.word	0x0000052d
    2d88:	00000a71 	.word	0x00000a71
    2d8c:	00000c01 	.word	0x00000c01
    2d90:	00001d05 	.word	0x00001d05
    2d94:	20000270 	.word	0x20000270
    2d98:	0000fbf8 	.word	0x0000fbf8
    2d9c:	000059b1 	.word	0x000059b1
    2da0:	0000fc48 	.word	0x0000fc48
    2da4:	0000fc5c 	.word	0x0000fc5c
    2da8:	0000fc6c 	.word	0x0000fc6c
    2dac:	0000fc8c 	.word	0x0000fc8c
    2db0:	00002581 	.word	0x00002581
    2db4:	0000fcdc 	.word	0x0000fcdc

00002db8 <_ZN8cMxRadio23zr_attach_receive_frameEMS_FPhhS0_hahE>:
{
	user_radio_irq = funct;
}

void cMxRadio::zr_attach_receive_frame(uint8_t* (cMxRadio::*funct)(uint8_t, uint8_t*, uint8_t, int8_t, uint8_t))
{
    2db8:	b082      	sub	sp, #8
    2dba:	466b      	mov	r3, sp
    2dbc:	9100      	str	r1, [sp, #0]
    2dbe:	9201      	str	r2, [sp, #4]
	user_radio_receive_frame = funct;
    2dc0:	22a6      	movs	r2, #166	; 0xa6
    2dc2:	0092      	lsls	r2, r2, #2
    2dc4:	4694      	mov	ip, r2
    2dc6:	4460      	add	r0, ip
    2dc8:	cb06      	ldmia	r3!, {r1, r2}
    2dca:	c006      	stmia	r0!, {r1, r2}
}
    2dcc:	b002      	add	sp, #8
    2dce:	4770      	bx	lr

00002dd0 <_ZN8cMxRadio17zr_attach_tx_doneEMS_Fv15radio_tx_done_tE>:

void cMxRadio::zr_attach_tx_done(void (cMxRadio::*funct)(radio_tx_done_t))
{
    2dd0:	b082      	sub	sp, #8
    2dd2:	466b      	mov	r3, sp
    2dd4:	9100      	str	r1, [sp, #0]
    2dd6:	9201      	str	r2, [sp, #4]
	user_radio_tx_done = funct;
    2dd8:	22a8      	movs	r2, #168	; 0xa8
    2dda:	0092      	lsls	r2, r2, #2
    2ddc:	4694      	mov	ip, r2
    2dde:	4460      	add	r0, ip
    2de0:	cb06      	ldmia	r3!, {r1, r2}
    2de2:	c006      	stmia	r0!, {r1, r2}
}
    2de4:	b002      	add	sp, #8
    2de6:	4770      	bx	lr

00002de8 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t>:
void cMxRadio::usr_radio_error(radio_error_t err)
{
    2de8:	b508      	push	{r3, lr}
	if (user_radio_error) user_radio_error(err);
    2dea:	23a4      	movs	r3, #164	; 0xa4
    2dec:	009b      	lsls	r3, r3, #2
    2dee:	58c3      	ldr	r3, [r0, r3]
    2df0:	2b00      	cmp	r3, #0
    2df2:	d001      	beq.n	2df8 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t+0x10>
    2df4:	1c08      	adds	r0, r1, #0
    2df6:	4798      	blx	r3
}
    2df8:	bd08      	pop	{r3, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)

00002dfc <_ZN8cMxRadio13usr_radio_irqEh>:

void cMxRadio::usr_radio_irq(uint8_t cause)
{
    2dfc:	b508      	push	{r3, lr}
	if (user_radio_irq) user_radio_irq(cause);
    2dfe:	23a5      	movs	r3, #165	; 0xa5
    2e00:	009b      	lsls	r3, r3, #2
    2e02:	58c3      	ldr	r3, [r0, r3]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d001      	beq.n	2e0c <_ZN8cMxRadio13usr_radio_irqEh+0x10>
    2e08:	1c08      	adds	r0, r1, #0
    2e0a:	4798      	blx	r3
}
    2e0c:	bd08      	pop	{r3, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)

00002e10 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah>:

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    2e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e12:	b085      	sub	sp, #20
    2e14:	9303      	str	r3, [sp, #12]
    2e16:	ac0a      	add	r4, sp, #40	; 0x28
    2e18:	2700      	movs	r7, #0
    2e1a:	57e7      	ldrsb	r7, [r4, r7]
    2e1c:	ac0b      	add	r4, sp, #44	; 0x2c
    2e1e:	7826      	ldrb	r6, [r4, #0]
	if (user_radio_receive_frame)
    2e20:	24a6      	movs	r4, #166	; 0xa6
    2e22:	00a4      	lsls	r4, r4, #2
    2e24:	5905      	ldr	r5, [r0, r4]
    2e26:	2d00      	cmp	r5, #0
    2e28:	d105      	bne.n	2e36 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x26>
    2e2a:	3404      	adds	r4, #4
    2e2c:	5904      	ldr	r4, [r0, r4]
    2e2e:	07e3      	lsls	r3, r4, #31
    2e30:	d406      	bmi.n	2e40 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x30>
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
	else return frm;
    2e32:	1c10      	adds	r0, r2, #0
    2e34:	e00d      	b.n	2e52 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x42>
}

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
	if (user_radio_receive_frame)
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
    2e36:	24a7      	movs	r4, #167	; 0xa7
    2e38:	00a4      	lsls	r4, r4, #2
    2e3a:	5904      	ldr	r4, [r0, r4]
    2e3c:	07e3      	lsls	r3, r4, #31
    2e3e:	d502      	bpl.n	2e46 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x36>
    2e40:	1063      	asrs	r3, r4, #1
    2e42:	58c3      	ldr	r3, [r0, r3]
    2e44:	595d      	ldr	r5, [r3, r5]
    2e46:	9b03      	ldr	r3, [sp, #12]
    2e48:	1064      	asrs	r4, r4, #1
    2e4a:	1900      	adds	r0, r0, r4
    2e4c:	9700      	str	r7, [sp, #0]
    2e4e:	9601      	str	r6, [sp, #4]
    2e50:	47a8      	blx	r5
	else return frm;
}
    2e52:	b005      	add	sp, #20
    2e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e56:	46c0      	nop			; (mov r8, r8)

00002e58 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t>:

void cMxRadio::usr_radio_tx_done(radio_tx_done_t status)
{
    2e58:	b510      	push	{r4, lr}
	if (user_radio_tx_done) (this->*user_radio_tx_done)(status);
    2e5a:	23a8      	movs	r3, #168	; 0xa8
    2e5c:	009b      	lsls	r3, r3, #2
    2e5e:	58c2      	ldr	r2, [r0, r3]
    2e60:	2a00      	cmp	r2, #0
    2e62:	d104      	bne.n	2e6e <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x16>
    2e64:	3304      	adds	r3, #4
    2e66:	58c3      	ldr	r3, [r0, r3]
    2e68:	07dc      	lsls	r4, r3, #31
    2e6a:	d405      	bmi.n	2e78 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x20>
    2e6c:	e00a      	b.n	2e84 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x2c>
    2e6e:	23a9      	movs	r3, #169	; 0xa9
    2e70:	009b      	lsls	r3, r3, #2
    2e72:	58c3      	ldr	r3, [r0, r3]
    2e74:	07dc      	lsls	r4, r3, #31
    2e76:	d502      	bpl.n	2e7e <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x26>
    2e78:	105c      	asrs	r4, r3, #1
    2e7a:	5904      	ldr	r4, [r0, r4]
    2e7c:	58a2      	ldr	r2, [r4, r2]
    2e7e:	105b      	asrs	r3, r3, #1
    2e80:	18c0      	adds	r0, r0, r3
    2e82:	4790      	blx	r2
}
    2e84:	bd10      	pop	{r4, pc}
    2e86:	46c0      	nop			; (mov r8, r8)

00002e88 <_ZN8cMxRadio14onReceiveFrameEhPhhah>:
 * @param frm array containing frame data
 * @param lqi link quality indicator
 * @param crc_fail boolean indicating whether the received frame failed FCS verification, not used
 */
uint8_t* cMxRadio::onReceiveFrame(uint8_t len, uint8_t* frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    2e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e8a:	4657      	mov	r7, sl
    2e8c:	464e      	mov	r6, r9
    2e8e:	4645      	mov	r5, r8
    2e90:	b4e0      	push	{r5, r6, r7}
    2e92:	b082      	sub	sp, #8
    2e94:	ac0a      	add	r4, sp, #40	; 0x28
    2e96:	2500      	movs	r5, #0
    2e98:	5765      	ldrsb	r5, [r4, r5]
    2e9a:	ac0b      	add	r4, sp, #44	; 0x2c
    2e9c:	7824      	ldrb	r4, [r4, #0]
	if (crc_fail)
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d002      	beq.n	2ea8 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x20>
		return rxRingBuffer;
    2ea2:	307c      	adds	r0, #124	; 0x7c
    2ea4:	30ff      	adds	r0, #255	; 0xff
    2ea6:	e06b      	b.n	2f80 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	lastLqi = lqi;
    2ea8:	4c38      	ldr	r4, [pc, #224]	; (2f8c <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x104>)
    2eaa:	5503      	strb	r3, [r0, r4]
	//lastRssi=ed;
	if (hasAttachedRxEvent == 0)
    2eac:	4c38      	ldr	r4, [pc, #224]	; (2f90 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x108>)
    2eae:	5d04      	ldrb	r4, [r0, r4]
    2eb0:	2c00      	cmp	r4, #0
    2eb2:	d15b      	bne.n	2f6c <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xe4>
	{
		// no event handler, so write it into the FIFO

		if (len >= HeadSize-1)
    2eb4:	2907      	cmp	r1, #7
    2eb6:	d817      	bhi.n	2ee8 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x60>
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    2eb8:	2900      	cmp	r1, #0
    2eba:	d054      	beq.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2ebc:	23fc      	movs	r3, #252	; 0xfc
    2ebe:	33ff      	adds	r3, #255	; 0xff
    2ec0:	5cc3      	ldrb	r3, [r0, r3]
    2ec2:	1c5c      	adds	r4, r3, #1
    2ec4:	257f      	movs	r5, #127	; 0x7f
    2ec6:	402c      	ands	r4, r5
				if (j != rxRingBufferTail)
    2ec8:	357e      	adds	r5, #126	; 0x7e
    2eca:	35ff      	adds	r5, #255	; 0xff
    2ecc:	5d45      	ldrb	r5, [r0, r5]
    2ece:	42a5      	cmp	r5, r4
    2ed0:	d049      	beq.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
    2ed2:	1c17      	adds	r7, r2, #0
    2ed4:	3901      	subs	r1, #1
    2ed6:	b2c9      	uxtb	r1, r1
    2ed8:	1852      	adds	r2, r2, r1
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    2eda:	21fc      	movs	r1, #252	; 0xfc
    2edc:	31ff      	adds	r1, #255	; 0xff
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2ede:	257f      	movs	r5, #127	; 0x7f
    2ee0:	46ac      	mov	ip, r5
				if (j != rxRingBufferTail)
    2ee2:	26fe      	movs	r6, #254	; 0xfe
    2ee4:	0076      	lsls	r6, r6, #1
    2ee6:	e035      	b.n	2f54 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xcc>
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    2ee8:	1e8e      	subs	r6, r1, #2
    2eea:	2e09      	cmp	r6, #9
    2eec:	dd3b      	ble.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2eee:	23fc      	movs	r3, #252	; 0xfc
    2ef0:	33ff      	adds	r3, #255	; 0xff
    2ef2:	5cc4      	ldrb	r4, [r0, r3]
    2ef4:	1c63      	adds	r3, r4, #1
    2ef6:	217f      	movs	r1, #127	; 0x7f
    2ef8:	400b      	ands	r3, r1
				if (j != rxRingBufferTail)
    2efa:	317e      	adds	r1, #126	; 0x7e
    2efc:	31ff      	adds	r1, #255	; 0xff
    2efe:	5c41      	ldrb	r1, [r0, r1]
    2f00:	2509      	movs	r5, #9
    2f02:	4299      	cmp	r1, r3
    2f04:	d10a      	bne.n	2f1c <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x94>
    2f06:	e02e      	b.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2f08:	4647      	mov	r7, r8
    2f0a:	403b      	ands	r3, r7
    2f0c:	3301      	adds	r3, #1
    2f0e:	4667      	mov	r7, ip
    2f10:	403b      	ands	r3, r7
				if (j != rxRingBufferTail)
    2f12:	4657      	mov	r7, sl
    2f14:	5dc7      	ldrb	r7, [r0, r7]
    2f16:	429f      	cmp	r7, r3
    2f18:	d109      	bne.n	2f2e <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xa6>
    2f1a:	e024      	b.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    2f1c:	21fc      	movs	r1, #252	; 0xfc
    2f1e:	31ff      	adds	r1, #255	; 0xff
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2f20:	27ff      	movs	r7, #255	; 0xff
    2f22:	46b8      	mov	r8, r7
    2f24:	3f80      	subs	r7, #128	; 0x80
    2f26:	46bc      	mov	ip, r7
				if (j != rxRingBufferTail)
    2f28:	377e      	adds	r7, #126	; 0x7e
    2f2a:	37ff      	adds	r7, #255	; 0xff
    2f2c:	46ba      	mov	sl, r7
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    2f2e:	5d57      	ldrb	r7, [r2, r5]
    2f30:	1904      	adds	r4, r0, r4
    2f32:	3479      	adds	r4, #121	; 0x79
    2f34:	34ff      	adds	r4, #255	; 0xff
    2f36:	70e7      	strb	r7, [r4, #3]
					rxRingBufferHead = j;
    2f38:	b2dc      	uxtb	r4, r3
    2f3a:	5444      	strb	r4, [r0, r1]
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    2f3c:	3501      	adds	r5, #1
    2f3e:	b2ed      	uxtb	r5, r5
    2f40:	42b5      	cmp	r5, r6
    2f42:	dbe1      	blt.n	2f08 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x80>
    2f44:	e00f      	b.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2f46:	3401      	adds	r4, #1
    2f48:	4665      	mov	r5, ip
    2f4a:	402c      	ands	r4, r5
    2f4c:	3701      	adds	r7, #1
				if (j != rxRingBufferTail)
    2f4e:	5d85      	ldrb	r5, [r0, r6]
    2f50:	42a5      	cmp	r5, r4
    2f52:	d008      	beq.n	2f66 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    2f54:	783d      	ldrb	r5, [r7, #0]
    2f56:	18c3      	adds	r3, r0, r3
    2f58:	3379      	adds	r3, #121	; 0x79
    2f5a:	33ff      	adds	r3, #255	; 0xff
    2f5c:	70dd      	strb	r5, [r3, #3]
					rxRingBufferHead = j;
    2f5e:	b2e3      	uxtb	r3, r4
    2f60:	5443      	strb	r3, [r0, r1]
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    2f62:	4297      	cmp	r7, r2
    2f64:	d1ef      	bne.n	2f46 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xbe>
					break;
				}
			}
		}

		return rxRingBuffer;
    2f66:	307c      	adds	r0, #124	; 0x7c
    2f68:	30ff      	adds	r0, #255	; 0xff
    2f6a:	e009      	b.n	2f80 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	}
	else
	{
		// user event is attached so call it
		return zrEventReceiveFrame(len, frm, lqi, ed,crc_fail);
    2f6c:	2400      	movs	r4, #0
    2f6e:	9400      	str	r4, [sp, #0]
    2f70:	24a1      	movs	r4, #161	; 0xa1
    2f72:	00a4      	lsls	r4, r4, #2
    2f74:	5904      	ldr	r4, [r0, r4]
    2f76:	1c08      	adds	r0, r1, #0
    2f78:	1c11      	adds	r1, r2, #0
    2f7a:	1c1a      	adds	r2, r3, #0
    2f7c:	1c2b      	adds	r3, r5, #0
    2f7e:	47a0      	blx	r4
	}
}
    2f80:	b002      	add	sp, #8
    2f82:	bc1c      	pop	{r2, r3, r4}
    2f84:	4690      	mov	r8, r2
    2f86:	4699      	mov	r9, r3
    2f88:	46a2      	mov	sl, r4
    2f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f8c:	0000027d 	.word	0x0000027d
    2f90:	0000027f 	.word	0x0000027f

00002f94 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t>:
 * this should not be called by the user
 *
 * @param x one of the radio_tx_done_t enumerations indicating transmission success
 */
void cMxRadio::onTxDone(radio_tx_done_t x)
{
    2f94:	b510      	push	{r4, lr}
    2f96:	1c04      	adds	r4, r0, #0
	if (hasAttachedTxEvent)
    2f98:	23a0      	movs	r3, #160	; 0xa0
    2f9a:	009b      	lsls	r3, r3, #2
    2f9c:	5cc3      	ldrb	r3, [r0, r3]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d004      	beq.n	2fac <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x18>
	{
		zrEventTxDone(x);
    2fa2:	23a2      	movs	r3, #162	; 0xa2
    2fa4:	009b      	lsls	r3, r3, #2
    2fa6:	58c3      	ldr	r3, [r0, r3]
    2fa8:	1c08      	adds	r0, r1, #0
    2faa:	4798      	blx	r3
	}

	txIsBusy = 0;
    2fac:	2200      	movs	r2, #0
    2fae:	4b01      	ldr	r3, [pc, #4]	; (2fb4 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x20>)
    2fb0:	54e2      	strb	r2, [r4, r3]
}
    2fb2:	bd10      	pop	{r4, pc}
    2fb4:	00000282 	.word	0x00000282

00002fb8 <_ZN8cMxRadioD1Ev>:
volatile uint8_t txIsBusy = 0;


cMxRadio::~cMxRadio()
{
}
    2fb8:	4770      	bx	lr
    2fba:	46c0      	nop			; (mov r8, r8)

00002fbc <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_>:
// empty constructor, should not be called by user
cMxRadio::cMxRadio(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName rst, PinName slp, PinName irq)
    2fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fbe:	4647      	mov	r7, r8
    2fc0:	b480      	push	{r7}
    2fc2:	b086      	sub	sp, #24
    2fc4:	1c05      	adds	r5, r0, #0
    2fc6:	a80c      	add	r0, sp, #48	; 0x30
    2fc8:	2600      	movs	r6, #0
    2fca:	5786      	ldrsb	r6, [r0, r6]
    2fcc:	a80d      	add	r0, sp, #52	; 0x34
    2fce:	2700      	movs	r7, #0
    2fd0:	57c7      	ldrsb	r7, [r0, r7]
    2fd2:	a80e      	add	r0, sp, #56	; 0x38
    2fd4:	7800      	ldrb	r0, [r0, #0]
    2fd6:	b240      	sxtb	r0, r0
    2fd8:	4680      	mov	r8, r0
:m_spi(mosi, miso, sclk), m_cs(cs), reset_pin(rst), sleep_pin(slp)//,irq_pin(irq)
    2fda:	1c28      	adds	r0, r5, #0
    2fdc:	3014      	adds	r0, #20
    2fde:	2401      	movs	r4, #1
    2fe0:	4264      	negs	r4, r4
    2fe2:	9400      	str	r4, [sp, #0]
    2fe4:	4c2c      	ldr	r4, [pc, #176]	; (3098 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xdc>)
    2fe6:	47a0      	blx	r4
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    2fe8:	2400      	movs	r4, #0
    2fea:	23a8      	movs	r3, #168	; 0xa8
    2fec:	54ec      	strb	r4, [r5, r3]
    2fee:	1c28      	adds	r0, r5, #0
    2ff0:	30a8      	adds	r0, #168	; 0xa8
    2ff2:	6044      	str	r4, [r0, #4]
    2ff4:	7204      	strb	r4, [r0, #8]
    2ff6:	7244      	strb	r4, [r0, #9]
    2ff8:	7284      	strb	r4, [r0, #10]
    2ffa:	60c4      	str	r4, [r0, #12]
    2ffc:	6104      	str	r4, [r0, #16]
    2ffe:	6144      	str	r4, [r0, #20]
    3000:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    3002:	1c31      	adds	r1, r6, #0
    3004:	4e25      	ldr	r6, [pc, #148]	; (309c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe0>)
    3006:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    3008:	23c4      	movs	r3, #196	; 0xc4
    300a:	54ec      	strb	r4, [r5, r3]
    300c:	1c28      	adds	r0, r5, #0
    300e:	30c4      	adds	r0, #196	; 0xc4
    3010:	6044      	str	r4, [r0, #4]
    3012:	7204      	strb	r4, [r0, #8]
    3014:	7244      	strb	r4, [r0, #9]
    3016:	7284      	strb	r4, [r0, #10]
    3018:	60c4      	str	r4, [r0, #12]
    301a:	6104      	str	r4, [r0, #16]
    301c:	6144      	str	r4, [r0, #20]
    301e:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    3020:	1c39      	adds	r1, r7, #0
    3022:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    3024:	23e0      	movs	r3, #224	; 0xe0
    3026:	54ec      	strb	r4, [r5, r3]
    3028:	1c28      	adds	r0, r5, #0
    302a:	30e0      	adds	r0, #224	; 0xe0
    302c:	6044      	str	r4, [r0, #4]
    302e:	7204      	strb	r4, [r0, #8]
    3030:	7244      	strb	r4, [r0, #9]
    3032:	7284      	strb	r4, [r0, #10]
    3034:	60c4      	str	r4, [r0, #12]
    3036:	6104      	str	r4, [r0, #16]
    3038:	6144      	str	r4, [r0, #20]
    303a:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    303c:	4641      	mov	r1, r8
    303e:	47b0      	blx	r6
{
	// default event handlers
	
	zrEventTxDone=0;
    3040:	23a2      	movs	r3, #162	; 0xa2
    3042:	009b      	lsls	r3, r3, #2
    3044:	50ec      	str	r4, [r5, r3]
	zrEventReceiveFrame=0;
    3046:	3b04      	subs	r3, #4
    3048:	50ec      	str	r4, [r5, r3]
	temprssi=0;
    304a:	702c      	strb	r4, [r5, #0]
	setautotx=false;
    304c:	3308      	adds	r3, #8
    304e:	54ec      	strb	r4, [r5, r3]
	setautorx=false;
    3050:	4b13      	ldr	r3, [pc, #76]	; (30a0 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe4>)
    3052:	54ec      	strb	r4, [r5, r3]
	needack=false;
    3054:	4b13      	ldr	r3, [pc, #76]	; (30a4 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe8>)
    3056:	54ec      	strb	r4, [r5, r3]
	usedBeginTransmission = 0;
    3058:	4b13      	ldr	r3, [pc, #76]	; (30a8 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xec>)
    305a:	54ec      	strb	r4, [r5, r3]
	hasAttachedTxEvent = 0;
    305c:	3b01      	subs	r3, #1
    305e:	54ec      	strb	r4, [r5, r3]
	hasAttachedRxEvent = 0;
    3060:	4b12      	ldr	r3, [pc, #72]	; (30ac <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf0>)
    3062:	54ec      	strb	r4, [r5, r3]
	lastLqi = 0;
    3064:	4b12      	ldr	r3, [pc, #72]	; (30b0 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf4>)
    3066:	54ec      	strb	r4, [r5, r3]
	lastRssi = 0;
    3068:	4b12      	ldr	r3, [pc, #72]	; (30b4 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf8>)
    306a:	54ec      	strb	r4, [r5, r3]
	txTmpBufferLength = 0;
    306c:	3b02      	subs	r3, #2
    306e:	54ec      	strb	r4, [r5, r3]
	rxRingBufferHead = 0;
    3070:	23fc      	movs	r3, #252	; 0xfc
    3072:	33ff      	adds	r3, #255	; 0xff
    3074:	54ec      	strb	r4, [r5, r3]
	rxRingBufferTail = 0;
    3076:	3301      	adds	r3, #1
    3078:	54ec      	strb	r4, [r5, r3]
	user_radio_tx_done=0;
	user_radio_receive_frame=0;
	user_radio_irq=0;
	user_radio_error=0;
	*/
	zr_attach_receive_frame(&cMxRadio::onReceiveFrame);
    307a:	1c28      	adds	r0, r5, #0
    307c:	490e      	ldr	r1, [pc, #56]	; (30b8 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xfc>)
    307e:	2200      	movs	r2, #0
    3080:	4b0e      	ldr	r3, [pc, #56]	; (30bc <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x100>)
    3082:	4798      	blx	r3
	zr_attach_tx_done(&cMxRadio::onTxDone);
    3084:	1c28      	adds	r0, r5, #0
    3086:	490e      	ldr	r1, [pc, #56]	; (30c0 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x104>)
    3088:	2200      	movs	r2, #0
    308a:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x108>)
    308c:	4798      	blx	r3

}
    308e:	1c28      	adds	r0, r5, #0
    3090:	b006      	add	sp, #24
    3092:	bc04      	pop	{r2}
    3094:	4690      	mov	r8, r2
    3096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3098:	000055dd 	.word	0x000055dd
    309c:	000059fd 	.word	0x000059fd
    30a0:	0000028d 	.word	0x0000028d
    30a4:	0000028e 	.word	0x0000028e
    30a8:	00000281 	.word	0x00000281
    30ac:	0000027f 	.word	0x0000027f
    30b0:	0000027d 	.word	0x0000027d
    30b4:	0000027e 	.word	0x0000027e
    30b8:	00002e89 	.word	0x00002e89
    30bc:	00002db9 	.word	0x00002db9
    30c0:	00002f95 	.word	0x00002f95
    30c4:	00002dd1 	.word	0x00002dd1

000030c8 <_ZN8cMxRadio5beginEaPh>:
 *
 * @param chan channel number for the radio to use, 11 to 26
 * @param frameHeader HeadSize byte custom frame header
 */
void cMxRadio::begin(channel_t chan, uint8_t* frameHeader)
{
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	1c06      	adds	r6, r0, #0
    30cc:	1c0d      	adds	r5, r1, #0
    30ce:	1c14      	adds	r4, r2, #0
	radio_init(rxFrameBuffer, MAX_FRAME_SIZE);
    30d0:	1c01      	adds	r1, r0, #0
    30d2:	31fc      	adds	r1, #252	; 0xfc
    30d4:	227f      	movs	r2, #127	; 0x7f
    30d6:	4b20      	ldr	r3, [pc, #128]	; (3158 <_ZN8cMxRadio5beginEaPh+0x90>)
    30d8:	4798      	blx	r3

	if (frameHeader)
    30da:	2c00      	cmp	r4, #0
    30dc:	d00c      	beq.n	30f8 <_ZN8cMxRadio5beginEaPh+0x30>
    30de:	1c22      	adds	r2, r4, #0
    30e0:	1c33      	adds	r3, r6, #0
    30e2:	33fe      	adds	r3, #254	; 0xfe
    30e4:	33ff      	adds	r3, #255	; 0xff
    30e6:	491d      	ldr	r1, [pc, #116]	; (315c <_ZN8cMxRadio5beginEaPh+0x94>)
    30e8:	1870      	adds	r0, r6, r1
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
			txTmpBuffer[i] = frameHeader[i];
    30ea:	7811      	ldrb	r1, [r2, #0]
    30ec:	7019      	strb	r1, [r3, #0]
    30ee:	3201      	adds	r2, #1
    30f0:	3301      	adds	r3, #1

	if (frameHeader)
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
    30f2:	4283      	cmp	r3, r0
    30f4:	d1f9      	bne.n	30ea <_ZN8cMxRadio5beginEaPh+0x22>
    30f6:	e01b      	b.n	3130 <_ZN8cMxRadio5beginEaPh+0x68>
			txTmpBuffer[i] = frameHeader[i];
	}
	else
	{
		txTmpBuffer[0] = 0x41;
    30f8:	2241      	movs	r2, #65	; 0x41
    30fa:	23fe      	movs	r3, #254	; 0xfe
    30fc:	33ff      	adds	r3, #255	; 0xff
    30fe:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[1] = 0x88;
    3100:	3247      	adds	r2, #71	; 0x47
    3102:	3301      	adds	r3, #1
    3104:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[2] =  0;
    3106:	2300      	movs	r3, #0
    3108:	4a15      	ldr	r2, [pc, #84]	; (3160 <_ZN8cMxRadio5beginEaPh+0x98>)
    310a:	54b3      	strb	r3, [r6, r2]
		txTmpBuffer[3]=0xCD;
    310c:	21cd      	movs	r1, #205	; 0xcd
    310e:	3201      	adds	r2, #1
    3110:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[4]=0xAB;
    3112:	3922      	subs	r1, #34	; 0x22
    3114:	4a13      	ldr	r2, [pc, #76]	; (3164 <_ZN8cMxRadio5beginEaPh+0x9c>)
    3116:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[5] = 0xFF; //dest address low byte
    3118:	3a03      	subs	r2, #3
    311a:	3aff      	subs	r2, #255	; 0xff
    311c:	4912      	ldr	r1, [pc, #72]	; (3168 <_ZN8cMxRadio5beginEaPh+0xa0>)
    311e:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[6] = 0xFF; //dest address hight byte
    3120:	4912      	ldr	r1, [pc, #72]	; (316c <_ZN8cMxRadio5beginEaPh+0xa4>)
    3122:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[7] = 0x01;;
    3124:	2101      	movs	r1, #1
    3126:	3206      	adds	r2, #6
    3128:	32ff      	adds	r2, #255	; 0xff
    312a:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[8] = 0x00;;
    312c:	4a10      	ldr	r2, [pc, #64]	; (3170 <_ZN8cMxRadio5beginEaPh+0xa8>)
    312e:	54b3      	strb	r3, [r6, r2]
 */
typedef union radio_param_t
{
#if defined __cplusplus
public:
    radio_param_t(int8_t c) { channel = c; } /* also used for txpwr_t */
    3130:	b2ea      	uxtb	r2, r5
	}

	// set the channel
	radio_set_param(RP_CHANNEL(chan));
    3132:	1c30      	adds	r0, r6, #0
    3134:	2100      	movs	r1, #0
    3136:	4b0f      	ldr	r3, [pc, #60]	; (3174 <_ZN8cMxRadio5beginEaPh+0xac>)
    3138:	4798      	blx	r3

	// default to receiver
	if (setautorx)
    313a:	4b0f      	ldr	r3, [pc, #60]	; (3178 <_ZN8cMxRadio5beginEaPh+0xb0>)
    313c:	5cf3      	ldrb	r3, [r6, r3]
    313e:	2b00      	cmp	r3, #0
    3140:	d004      	beq.n	314c <_ZN8cMxRadio5beginEaPh+0x84>
		radio_set_state(STATE_RXAUTO);
    3142:	1c30      	adds	r0, r6, #0
    3144:	2104      	movs	r1, #4
    3146:	4b0d      	ldr	r3, [pc, #52]	; (317c <_ZN8cMxRadio5beginEaPh+0xb4>)
    3148:	4798      	blx	r3
    314a:	e003      	b.n	3154 <_ZN8cMxRadio5beginEaPh+0x8c>
	else
		radio_set_state(STATE_RX);
    314c:	1c30      	adds	r0, r6, #0
    314e:	2102      	movs	r1, #2
    3150:	4b0a      	ldr	r3, [pc, #40]	; (317c <_ZN8cMxRadio5beginEaPh+0xb4>)
    3152:	4798      	blx	r3

#ifdef ENABLE_DIG3_DIG4
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif

}
    3154:	bd70      	pop	{r4, r5, r6, pc}
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	00003629 	.word	0x00003629
    315c:	00000206 	.word	0x00000206
    3160:	000001ff 	.word	0x000001ff
    3164:	00000201 	.word	0x00000201
    3168:	00000202 	.word	0x00000202
    316c:	00000203 	.word	0x00000203
    3170:	00000205 	.word	0x00000205
    3174:	00003969 	.word	0x00003969
    3178:	0000028d 	.word	0x0000028d
    317c:	00003719 	.word	0x00003719

00003180 <_ZN8cMxRadio5beginEa>:
 * Then it sets the channel number and defaults to RX state.
 *
 * @param chan the channel number for the radio to use, 11 to 26
 */
void cMxRadio::begin(channel_t chan)
{
    3180:	b508      	push	{r3, lr}
	begin(chan, 0);
    3182:	2200      	movs	r2, #0
    3184:	4b01      	ldr	r3, [pc, #4]	; (318c <_ZN8cMxRadio5beginEa+0xc>)
    3186:	4798      	blx	r3
}
    3188:	bd08      	pop	{r3, pc}
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	000030c9 	.word	0x000030c9

00003190 <_ZN8cMxRadio11attachErrorEPFv13radio_error_tE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachError(void (*funct)(radio_error_t))
{
	user_radio_error = funct;
    3190:	23a4      	movs	r3, #164	; 0xa4
    3192:	009b      	lsls	r3, r3, #2
    3194:	50c1      	str	r1, [r0, r3]
}
    3196:	4770      	bx	lr

00003198 <_ZN8cMxRadio9attachIrqEPFvhE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachIrq(void (*funct)(uint8_t))
{
	user_radio_irq = funct;
    3198:	23a5      	movs	r3, #165	; 0xa5
    319a:	009b      	lsls	r3, r3, #2
    319c:	50c1      	str	r1, [r0, r3]
}
    319e:	4770      	bx	lr

000031a0 <_ZN8cMxRadio5flushEv>:
 *
 * Flush the RX FIFO ring buffer
 */
void cMxRadio::flush()
{
	rxRingBufferHead = rxRingBufferTail;
    31a0:	23fe      	movs	r3, #254	; 0xfe
    31a2:	005b      	lsls	r3, r3, #1
    31a4:	5cc2      	ldrb	r2, [r0, r3]
    31a6:	23fc      	movs	r3, #252	; 0xfc
    31a8:	33ff      	adds	r3, #255	; 0xff
    31aa:	54c2      	strb	r2, [r0, r3]
}
    31ac:	4770      	bx	lr
    31ae:	46c0      	nop			; (mov r8, r8)

000031b0 <_ZN8cMxRadio4readEv>:
 * @return the next byte, or -1 if buffer is empty
 */
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
    31b0:	23fe      	movs	r3, #254	; 0xfe
    31b2:	005b      	lsls	r3, r3, #1
    31b4:	5cc3      	ldrb	r3, [r0, r3]
    31b6:	22fc      	movs	r2, #252	; 0xfc
    31b8:	32ff      	adds	r2, #255	; 0xff
    31ba:	5c82      	ldrb	r2, [r0, r2]
    31bc:	429a      	cmp	r2, r3
    31be:	d00b      	beq.n	31d8 <_ZN8cMxRadio4readEv+0x28>
	{
		return -1;
	}
	else
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
    31c0:	18c2      	adds	r2, r0, r3
    31c2:	3279      	adds	r2, #121	; 0x79
    31c4:	32ff      	adds	r2, #255	; 0xff
    31c6:	78d2      	ldrb	r2, [r2, #3]
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
    31c8:	3301      	adds	r3, #1
    31ca:	217f      	movs	r1, #127	; 0x7f
    31cc:	400b      	ands	r3, r1
    31ce:	317e      	adds	r1, #126	; 0x7e
    31d0:	31ff      	adds	r1, #255	; 0xff
    31d2:	5443      	strb	r3, [r0, r1]
		return c;
    31d4:	b290      	uxth	r0, r2
    31d6:	e000      	b.n	31da <_ZN8cMxRadio4readEv+0x2a>
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
	{
		return -1;
    31d8:	4801      	ldr	r0, [pc, #4]	; (31e0 <_ZN8cMxRadio4readEv+0x30>)
    31da:	b200      	sxth	r0, r0
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
		return c;
	}
}
    31dc:	4770      	bx	lr
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	0000ffff 	.word	0x0000ffff

000031e4 <_ZN8cMxRadio9availableEv>:
 *
 * @return how many bytes are in the RX FIFO ring buffer
 */
int8_t cMxRadio::available()
{
	return ((int16_t)((int16_t)ZR_FIFO_SIZE + (int16_t)rxRingBufferHead - (int16_t)rxRingBufferTail)) % ZR_FIFO_SIZE;
    31e4:	23fc      	movs	r3, #252	; 0xfc
    31e6:	33ff      	adds	r3, #255	; 0xff
    31e8:	5cc3      	ldrb	r3, [r0, r3]
    31ea:	3380      	adds	r3, #128	; 0x80
    31ec:	22fe      	movs	r2, #254	; 0xfe
    31ee:	0052      	lsls	r2, r2, #1
    31f0:	5c80      	ldrb	r0, [r0, r2]
    31f2:	1a1b      	subs	r3, r3, r0
    31f4:	17d8      	asrs	r0, r3, #31
    31f6:	0e42      	lsrs	r2, r0, #25
    31f8:	189b      	adds	r3, r3, r2
    31fa:	207f      	movs	r0, #127	; 0x7f
    31fc:	4003      	ands	r3, r0
    31fe:	1a98      	subs	r0, r3, r2
    3200:	b240      	sxtb	r0, r0
}
    3202:	4770      	bx	lr

00003204 <_ZN8cMxRadio17beginTransmissionEv>:
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    3204:	2201      	movs	r2, #1
    3206:	4b07      	ldr	r3, [pc, #28]	; (3224 <_ZN8cMxRadio17beginTransmissionEv+0x20>)
    3208:	54c2      	strb	r2, [r0, r3]
	txTmpBuffer[5]= 0xFF;
    320a:	3b83      	subs	r3, #131	; 0x83
    320c:	3bff      	subs	r3, #255	; 0xff
    320e:	4a06      	ldr	r2, [pc, #24]	; (3228 <_ZN8cMxRadio17beginTransmissionEv+0x24>)
    3210:	5483      	strb	r3, [r0, r2]
	txTmpBuffer[6]= 0XFF;
    3212:	4a06      	ldr	r2, [pc, #24]	; (322c <_ZN8cMxRadio17beginTransmissionEv+0x28>)
    3214:	5483      	strb	r3, [r0, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    3216:	3afb      	subs	r2, #251	; 0xfb
    3218:	3aff      	subs	r2, #255	; 0xff
    321a:	337e      	adds	r3, #126	; 0x7e
    321c:	33ff      	adds	r3, #255	; 0xff
    321e:	54c2      	strb	r2, [r0, r3]
}
    3220:	4770      	bx	lr
    3222:	46c0      	nop			; (mov r8, r8)
    3224:	00000281 	.word	0x00000281
    3228:	00000202 	.word	0x00000202
    322c:	00000203 	.word	0x00000203

00003230 <_ZN8cMxRadio10waitTxDoneEt>:
 * waits until the last transmission is complete, or timed out
 *
 * @param timeout iterations to countdown before timeout
 */
void cMxRadio::waitTxDone(uint16_t timeout)
{
    3230:	b510      	push	{r4, lr}
    3232:	b082      	sub	sp, #8
	volatile uint16_t cnt = timeout;
    3234:	466b      	mov	r3, sp
    3236:	80d9      	strh	r1, [r3, #6]
	while (txIsBusy && cnt--);
    3238:	4c07      	ldr	r4, [pc, #28]	; (3258 <_ZN8cMxRadio10waitTxDoneEt+0x28>)
    323a:	466b      	mov	r3, sp
    323c:	1d99      	adds	r1, r3, #6
    323e:	5d03      	ldrb	r3, [r0, r4]
    3240:	2b00      	cmp	r3, #0
    3242:	d006      	beq.n	3252 <_ZN8cMxRadio10waitTxDoneEt+0x22>
    3244:	880b      	ldrh	r3, [r1, #0]
    3246:	b29b      	uxth	r3, r3
    3248:	1e5a      	subs	r2, r3, #1
    324a:	b292      	uxth	r2, r2
    324c:	800a      	strh	r2, [r1, #0]
    324e:	2b00      	cmp	r3, #0
    3250:	d1f5      	bne.n	323e <_ZN8cMxRadio10waitTxDoneEt+0xe>
}
    3252:	b002      	add	sp, #8
    3254:	bd10      	pop	{r4, pc}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	00000282 	.word	0x00000282

0000325c <_ZN8cMxRadio15endTransmissionEv>:
 *
 * Finalize the payload and transmits it when ready
 *
 */
void cMxRadio::endTransmission()
{
    325c:	b538      	push	{r3, r4, r5, lr}
    325e:	1c04      	adds	r4, r0, #0
	usedBeginTransmission = 0;
    3260:	2200      	movs	r2, #0
    3262:	4b28      	ldr	r3, [pc, #160]	; (3304 <_ZN8cMxRadio15endTransmissionEv+0xa8>)
    3264:	54c2      	strb	r2, [r0, r3]

	// empty FCS field
	txTmpBufferLength += 2;
    3266:	229f      	movs	r2, #159	; 0x9f
    3268:	0092      	lsls	r2, r2, #2
    326a:	5c83      	ldrb	r3, [r0, r2]
    326c:	3302      	adds	r3, #2
    326e:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
	waitTxDone(0xFFFF);
    3270:	4925      	ldr	r1, [pc, #148]	; (3308 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    3272:	4b26      	ldr	r3, [pc, #152]	; (330c <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    3274:	4798      	blx	r3
#endif
	txIsBusy = 1;
    3276:	2201      	movs	r2, #1
    3278:	4b25      	ldr	r3, [pc, #148]	; (3310 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    327a:	54e2      	strb	r2, [r4, r3]
	if (setautotx)
    327c:	330a      	adds	r3, #10
    327e:	5ce3      	ldrb	r3, [r4, r3]
    3280:	2b00      	cmp	r3, #0
    3282:	d004      	beq.n	328e <_ZN8cMxRadio15endTransmissionEv+0x32>
		radio_set_state(STATE_TXAUTO);
    3284:	1c20      	adds	r0, r4, #0
    3286:	2103      	movs	r1, #3
    3288:	4b22      	ldr	r3, [pc, #136]	; (3314 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    328a:	4798      	blx	r3
    328c:	e003      	b.n	3296 <_ZN8cMxRadio15endTransmissionEv+0x3a>
	else
		radio_set_state(STATE_TX);
    328e:	1c20      	adds	r0, r4, #0
    3290:	2101      	movs	r1, #1
    3292:	4b20      	ldr	r3, [pc, #128]	; (3314 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    3294:	4798      	blx	r3
	ZR_RFTX_LED_ON();
	//if broadcase ,cant need ack
	if(txTmpBuffer[5]==0xff && txTmpBuffer[5]==0xff)
    3296:	4b20      	ldr	r3, [pc, #128]	; (3318 <_ZN8cMxRadio15endTransmissionEv+0xbc>)
    3298:	5ce3      	ldrb	r3, [r4, r3]
    329a:	2bff      	cmp	r3, #255	; 0xff
    329c:	d106      	bne.n	32ac <_ZN8cMxRadio15endTransmissionEv+0x50>
		txTmpBuffer[0]=txTmpBuffer[0]&0xdf;
    329e:	22fe      	movs	r2, #254	; 0xfe
    32a0:	32ff      	adds	r2, #255	; 0xff
    32a2:	5ca3      	ldrb	r3, [r4, r2]
    32a4:	2120      	movs	r1, #32
    32a6:	438b      	bics	r3, r1
    32a8:	54a3      	strb	r3, [r4, r2]
    32aa:	e00c      	b.n	32c6 <_ZN8cMxRadio15endTransmissionEv+0x6a>
	else
	{
		if(!needack)
    32ac:	4b1b      	ldr	r3, [pc, #108]	; (331c <_ZN8cMxRadio15endTransmissionEv+0xc0>)
    32ae:	5ce3      	ldrb	r3, [r4, r3]
    32b0:	2b00      	cmp	r3, #0
    32b2:	d104      	bne.n	32be <_ZN8cMxRadio15endTransmissionEv+0x62>
			txTmpBuffer[0] = 0x41;
    32b4:	2241      	movs	r2, #65	; 0x41
    32b6:	23fe      	movs	r3, #254	; 0xfe
    32b8:	33ff      	adds	r3, #255	; 0xff
    32ba:	54e2      	strb	r2, [r4, r3]
    32bc:	e003      	b.n	32c6 <_ZN8cMxRadio15endTransmissionEv+0x6a>
		else
			txTmpBuffer[0] = 0x61; //ack required
    32be:	2261      	movs	r2, #97	; 0x61
    32c0:	23fe      	movs	r3, #254	; 0xfe
    32c2:	33ff      	adds	r3, #255	; 0xff
    32c4:	54e2      	strb	r2, [r4, r3]
	}
	radio_send_frame(txTmpBufferLength, txTmpBuffer, 0);
    32c6:	239f      	movs	r3, #159	; 0x9f
    32c8:	009b      	lsls	r3, r3, #2
    32ca:	5ce1      	ldrb	r1, [r4, r3]
    32cc:	1c20      	adds	r0, r4, #0
    32ce:	1c22      	adds	r2, r4, #0
    32d0:	32fe      	adds	r2, #254	; 0xfe
    32d2:	32ff      	adds	r2, #255	; 0xff
    32d4:	2300      	movs	r3, #0
    32d6:	4d12      	ldr	r5, [pc, #72]	; (3320 <_ZN8cMxRadio15endTransmissionEv+0xc4>)
    32d8:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
	waitTxDone(0xFFFF);
    32da:	1c20      	adds	r0, r4, #0
    32dc:	490a      	ldr	r1, [pc, #40]	; (3308 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    32de:	4b0b      	ldr	r3, [pc, #44]	; (330c <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    32e0:	4798      	blx	r3
	if (setautorx)
    32e2:	4b10      	ldr	r3, [pc, #64]	; (3324 <_ZN8cMxRadio15endTransmissionEv+0xc8>)
    32e4:	5ce3      	ldrb	r3, [r4, r3]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d004      	beq.n	32f4 <_ZN8cMxRadio15endTransmissionEv+0x98>
		radio_set_state(STATE_RXAUTO);
    32ea:	1c20      	adds	r0, r4, #0
    32ec:	2104      	movs	r1, #4
    32ee:	4b09      	ldr	r3, [pc, #36]	; (3314 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    32f0:	4798      	blx	r3
    32f2:	e003      	b.n	32fc <_ZN8cMxRadio15endTransmissionEv+0xa0>
	else
		radio_set_state(STATE_RX);
    32f4:	1c20      	adds	r0, r4, #0
    32f6:	2102      	movs	r1, #2
    32f8:	4b06      	ldr	r3, [pc, #24]	; (3314 <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    32fa:	4798      	blx	r3
	txIsBusy = 0;
    32fc:	2200      	movs	r2, #0
    32fe:	4b04      	ldr	r3, [pc, #16]	; (3310 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    3300:	54e2      	strb	r2, [r4, r3]
#endif
}
    3302:	bd38      	pop	{r3, r4, r5, pc}
    3304:	00000281 	.word	0x00000281
    3308:	0000ffff 	.word	0x0000ffff
    330c:	00003231 	.word	0x00003231
    3310:	00000282 	.word	0x00000282
    3314:	00003719 	.word	0x00003719
    3318:	00000202 	.word	0x00000202
    331c:	0000028e 	.word	0x0000028e
    3320:	00003a6d 	.word	0x00003a6d
    3324:	0000028d 	.word	0x0000028d

00003328 <_ZN8cMxRadio5writeEh>:
 * If "beginTrasmission" was not used, then it transmits the single byte immediately (slower for multiple bytes)
 *
 * @param c character to be sent
 */
void cMxRadio::write(uint8_t c)
{
    3328:	b538      	push	{r3, r4, r5, lr}
    332a:	1c04      	adds	r4, r0, #0
	if (usedBeginTransmission)
    332c:	4b2d      	ldr	r3, [pc, #180]	; (33e4 <_ZN8cMxRadio5writeEh+0xbc>)
    332e:	5cc3      	ldrb	r3, [r0, r3]
    3330:	2b00      	cmp	r3, #0
    3332:	d020      	beq.n	3376 <_ZN8cMxRadio5writeEh+0x4e>
	{
		if (txTmpBufferLength < ZR_TXTMPBUFF_SIZE - 2)
    3334:	239f      	movs	r3, #159	; 0x9f
    3336:	009b      	lsls	r3, r3, #2
    3338:	5cc3      	ldrb	r3, [r0, r3]
    333a:	2b7c      	cmp	r3, #124	; 0x7c
    333c:	d851      	bhi.n	33e2 <_ZN8cMxRadio5writeEh+0xba>
		{
			txTmpBuffer[txTmpBufferLength] = c;
    333e:	18c2      	adds	r2, r0, r3
    3340:	32f9      	adds	r2, #249	; 0xf9
    3342:	32ff      	adds	r2, #255	; 0xff
    3344:	7151      	strb	r1, [r2, #5]
			txTmpBufferLength++;
    3346:	3301      	adds	r3, #1
    3348:	b2db      	uxtb	r3, r3
    334a:	229f      	movs	r2, #159	; 0x9f
    334c:	0092      	lsls	r2, r2, #2
    334e:	5483      	strb	r3, [r0, r2]

			if (txTmpBufferLength >= ZR_TXTMPBUFF_SIZE - 2)
    3350:	2b7c      	cmp	r3, #124	; 0x7c
    3352:	d946      	bls.n	33e2 <_ZN8cMxRadio5writeEh+0xba>
			{
				// buffer is now full
				// just send it all out so we have more room
				endTransmission();
    3354:	4b24      	ldr	r3, [pc, #144]	; (33e8 <_ZN8cMxRadio5writeEh+0xc0>)
    3356:	4798      	blx	r3
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    3358:	2201      	movs	r2, #1
    335a:	4b22      	ldr	r3, [pc, #136]	; (33e4 <_ZN8cMxRadio5writeEh+0xbc>)
    335c:	54e2      	strb	r2, [r4, r3]
	txTmpBuffer[5]= 0xFF;
    335e:	3b83      	subs	r3, #131	; 0x83
    3360:	3bff      	subs	r3, #255	; 0xff
    3362:	4a22      	ldr	r2, [pc, #136]	; (33ec <_ZN8cMxRadio5writeEh+0xc4>)
    3364:	54a3      	strb	r3, [r4, r2]
	txTmpBuffer[6]= 0XFF;
    3366:	4a22      	ldr	r2, [pc, #136]	; (33f0 <_ZN8cMxRadio5writeEh+0xc8>)
    3368:	54a3      	strb	r3, [r4, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    336a:	3afb      	subs	r2, #251	; 0xfb
    336c:	3aff      	subs	r2, #255	; 0xff
    336e:	337e      	adds	r3, #126	; 0x7e
    3370:	33ff      	adds	r3, #255	; 0xff
    3372:	54e2      	strb	r2, [r4, r3]
    3374:	e035      	b.n	33e2 <_ZN8cMxRadio5writeEh+0xba>
			}
		}
	}
	else
	{
		txTmpBuffer[HeadSize] = c; // set payload
    3376:	4b1f      	ldr	r3, [pc, #124]	; (33f4 <_ZN8cMxRadio5writeEh+0xcc>)
    3378:	54c1      	strb	r1, [r0, r3]
		txTmpBuffer[HeadSize+1] = 0; // empty FCS
    337a:	2300      	movs	r3, #0
    337c:	4a1e      	ldr	r2, [pc, #120]	; (33f8 <_ZN8cMxRadio5writeEh+0xd0>)
    337e:	5483      	strb	r3, [r0, r2]
		txTmpBuffer[HeadSize+2] = 0; // empty FCS
    3380:	3201      	adds	r2, #1
    3382:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
		waitTxDone(0xFFFF);
    3384:	491d      	ldr	r1, [pc, #116]	; (33fc <_ZN8cMxRadio5writeEh+0xd4>)
    3386:	4b1e      	ldr	r3, [pc, #120]	; (3400 <_ZN8cMxRadio5writeEh+0xd8>)
    3388:	4798      	blx	r3
#endif
		txIsBusy = 1;
    338a:	2201      	movs	r2, #1
    338c:	4b1d      	ldr	r3, [pc, #116]	; (3404 <_ZN8cMxRadio5writeEh+0xdc>)
    338e:	54e2      	strb	r2, [r4, r3]
		if (setautotx)
    3390:	330a      	adds	r3, #10
    3392:	5ce3      	ldrb	r3, [r4, r3]
    3394:	2b00      	cmp	r3, #0
    3396:	d004      	beq.n	33a2 <_ZN8cMxRadio5writeEh+0x7a>
			radio_set_state(STATE_TXAUTO);
    3398:	1c20      	adds	r0, r4, #0
    339a:	2103      	movs	r1, #3
    339c:	4b1a      	ldr	r3, [pc, #104]	; (3408 <_ZN8cMxRadio5writeEh+0xe0>)
    339e:	4798      	blx	r3
    33a0:	e003      	b.n	33aa <_ZN8cMxRadio5writeEh+0x82>
		else
			radio_set_state(STATE_TX);
    33a2:	1c20      	adds	r0, r4, #0
    33a4:	2101      	movs	r1, #1
    33a6:	4b18      	ldr	r3, [pc, #96]	; (3408 <_ZN8cMxRadio5writeEh+0xe0>)
    33a8:	4798      	blx	r3
		ZR_RFTX_LED_ON();
		radio_send_frame(10, txTmpBuffer, 0);
    33aa:	1c20      	adds	r0, r4, #0
    33ac:	210a      	movs	r1, #10
    33ae:	1c22      	adds	r2, r4, #0
    33b0:	32fe      	adds	r2, #254	; 0xfe
    33b2:	32ff      	adds	r2, #255	; 0xff
    33b4:	2300      	movs	r3, #0
    33b6:	4d15      	ldr	r5, [pc, #84]	; (340c <_ZN8cMxRadio5writeEh+0xe4>)
    33b8:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
		waitTxDone(0xFFFF);
    33ba:	1c20      	adds	r0, r4, #0
    33bc:	490f      	ldr	r1, [pc, #60]	; (33fc <_ZN8cMxRadio5writeEh+0xd4>)
    33be:	4b10      	ldr	r3, [pc, #64]	; (3400 <_ZN8cMxRadio5writeEh+0xd8>)
    33c0:	4798      	blx	r3
		if (setautorx)
    33c2:	4b13      	ldr	r3, [pc, #76]	; (3410 <_ZN8cMxRadio5writeEh+0xe8>)
    33c4:	5ce3      	ldrb	r3, [r4, r3]
    33c6:	2b00      	cmp	r3, #0
    33c8:	d004      	beq.n	33d4 <_ZN8cMxRadio5writeEh+0xac>
			radio_set_state(STATE_RXAUTO);
    33ca:	1c20      	adds	r0, r4, #0
    33cc:	2104      	movs	r1, #4
    33ce:	4b0e      	ldr	r3, [pc, #56]	; (3408 <_ZN8cMxRadio5writeEh+0xe0>)
    33d0:	4798      	blx	r3
    33d2:	e003      	b.n	33dc <_ZN8cMxRadio5writeEh+0xb4>
		else
			radio_set_state(STATE_RX);
    33d4:	1c20      	adds	r0, r4, #0
    33d6:	2102      	movs	r1, #2
    33d8:	4b0b      	ldr	r3, [pc, #44]	; (3408 <_ZN8cMxRadio5writeEh+0xe0>)
    33da:	4798      	blx	r3
		txIsBusy = 0;
    33dc:	2200      	movs	r2, #0
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <_ZN8cMxRadio5writeEh+0xdc>)
    33e0:	54e2      	strb	r2, [r4, r3]
#endif
	}
}
    33e2:	bd38      	pop	{r3, r4, r5, pc}
    33e4:	00000281 	.word	0x00000281
    33e8:	0000325d 	.word	0x0000325d
    33ec:	00000202 	.word	0x00000202
    33f0:	00000203 	.word	0x00000203
    33f4:	00000206 	.word	0x00000206
    33f8:	00000207 	.word	0x00000207
    33fc:	0000ffff 	.word	0x0000ffff
    3400:	00003231 	.word	0x00003231
    3404:	00000282 	.word	0x00000282
    3408:	00003719 	.word	0x00003719
    340c:	00003a6d 	.word	0x00003a6d
    3410:	0000028d 	.word	0x0000028d

00003414 <_ZN8cMxRadio5writeEPhh>:
 *
 * @param arr data array to be sent
 * @param len length of data array
 */
void cMxRadio::write(uint8_t* arr, uint8_t len)
{
    3414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;
	for (i = 0; i < len; i++)
    3416:	2a00      	cmp	r2, #0
    3418:	d00c      	beq.n	3434 <_ZN8cMxRadio5writeEPhh+0x20>
    341a:	1c06      	adds	r6, r0, #0
    341c:	1c0c      	adds	r4, r1, #0
    341e:	1e55      	subs	r5, r2, #1
    3420:	b2ed      	uxtb	r5, r5
    3422:	3501      	adds	r5, #1
    3424:	194d      	adds	r5, r1, r5
		write(arr[i]);
    3426:	4f04      	ldr	r7, [pc, #16]	; (3438 <_ZN8cMxRadio5writeEPhh+0x24>)
    3428:	7821      	ldrb	r1, [r4, #0]
    342a:	1c30      	adds	r0, r6, #0
    342c:	47b8      	blx	r7
    342e:	3401      	adds	r4, #1
 * @param len length of data array
 */
void cMxRadio::write(uint8_t* arr, uint8_t len)
{
	uint8_t i;
	for (i = 0; i < len; i++)
    3430:	42ac      	cmp	r4, r5
    3432:	d1f9      	bne.n	3428 <_ZN8cMxRadio5writeEPhh+0x14>
		write(arr[i]);
}
    3434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	00003329 	.word	0x00003329

0000343c <_Z8IRQradiov>:
/* === Includes ============================================================ */
#include <MxRadio.h>

cMxRadio* gRadio = NULL;

void IRQradio(void){
    343c:	b508      	push	{r3, lr}
	gRadio->rf_irq_callback();
    343e:	4b02      	ldr	r3, [pc, #8]	; (3448 <_Z8IRQradiov+0xc>)
    3440:	6818      	ldr	r0, [r3, #0]
    3442:	4b02      	ldr	r3, [pc, #8]	; (344c <_Z8IRQradiov+0x10>)
    3444:	4798      	blx	r3
}
    3446:	bd08      	pop	{r3, pc}
    3448:	200042f4 	.word	0x200042f4
    344c:	00003b45 	.word	0x00003b45

00003450 <_ZN8cMxRadio11trx_io_initEi>:
/* === external functions =================================================== */
void cMxRadio::trx_io_init (int spirate)
{
    3450:	b570      	push	{r4, r5, r6, lr}
    3452:	b084      	sub	sp, #16
    3454:	1c05      	adds	r5, r0, #0
    3456:	1c0e      	adds	r6, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3458:	23a8      	movs	r3, #168	; 0xa8
    345a:	56c3      	ldrsb	r3, [r0, r3]
    345c:	3301      	adds	r3, #1
    345e:	d104      	bne.n	346a <_ZN8cMxRadio11trx_io_initEi+0x1a>
    3460:	4818      	ldr	r0, [pc, #96]	; (34c4 <_ZN8cMxRadio11trx_io_initEi+0x74>)
    3462:	4919      	ldr	r1, [pc, #100]	; (34c8 <_ZN8cMxRadio11trx_io_initEi+0x78>)
    3464:	2228      	movs	r2, #40	; 0x28
    3466:	4b19      	ldr	r3, [pc, #100]	; (34cc <_ZN8cMxRadio11trx_io_initEi+0x7c>)
    3468:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    346a:	1c2b      	adds	r3, r5, #0
    346c:	33a8      	adds	r3, #168	; 0xa8
    346e:	691a      	ldr	r2, [r3, #16]
    3470:	685b      	ldr	r3, [r3, #4]
    3472:	6013      	str	r3, [r2, #0]

	m_cs = 1;
	m_spi.format(8, 0);
    3474:	1c2c      	adds	r4, r5, #0
    3476:	3414      	adds	r4, #20
    3478:	1c20      	adds	r0, r4, #0
    347a:	2108      	movs	r1, #8
    347c:	2200      	movs	r2, #0
    347e:	4b14      	ldr	r3, [pc, #80]	; (34d0 <_ZN8cMxRadio11trx_io_initEi+0x80>)
    3480:	4798      	blx	r3
	m_spi.frequency(spirate);
    3482:	1c20      	adds	r0, r4, #0
    3484:	1c31      	adds	r1, r6, #0
    3486:	4b13      	ldr	r3, [pc, #76]	; (34d4 <_ZN8cMxRadio11trx_io_initEi+0x84>)
    3488:	4798      	blx	r3
	/////////////////////////////////////////////////////////////////////
	/////modification BM irq_pin.rise(this,&cMxRadio::rf_irq_callback);
	//////////////////////////////////////////////////////////////////////
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    348a:	ac01      	add	r4, sp, #4
    348c:	1c20      	adds	r0, r4, #0
    348e:	4b12      	ldr	r3, [pc, #72]	; (34d8 <_ZN8cMxRadio11trx_io_initEi+0x88>)
    3490:	4798      	blx	r3
	// put the button as EXTINT
	eint_chan_conf.gpio_pin           = PIN_PB00A_EIC_EXTINT0;
    3492:	2320      	movs	r3, #32
    3494:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = MUX_PB00A_EIC_EXTINT0 ;
    3496:	2300      	movs	r3, #0
    3498:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    349a:	2201      	movs	r2, #1
    349c:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = false;
    349e:	72a3      	strb	r3, [r4, #10]
		
	extint_chan_set_config(0, &eint_chan_conf);
    34a0:	2000      	movs	r0, #0
    34a2:	1c21      	adds	r1, r4, #0
    34a4:	4b0d      	ldr	r3, [pc, #52]	; (34dc <_ZN8cMxRadio11trx_io_initEi+0x8c>)
    34a6:	4798      	blx	r3
	//configuration callback
	gRadio = this;
    34a8:	4b0d      	ldr	r3, [pc, #52]	; (34e0 <_ZN8cMxRadio11trx_io_initEi+0x90>)
    34aa:	601d      	str	r5, [r3, #0]
	extint_register_callback(&IRQradio,0,EXTINT_CALLBACK_TYPE_DETECT);
    34ac:	480d      	ldr	r0, [pc, #52]	; (34e4 <_ZN8cMxRadio11trx_io_initEi+0x94>)
    34ae:	2100      	movs	r1, #0
    34b0:	2200      	movs	r2, #0
    34b2:	4b0d      	ldr	r3, [pc, #52]	; (34e8 <_ZN8cMxRadio11trx_io_initEi+0x98>)
    34b4:	4798      	blx	r3
	//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
	//ppsIsrr.attach(&ppsISR);
	//activation callback
		extint_chan_enable_callback(0,EXTINT_CALLBACK_TYPE_DETECT);		
    34b6:	2000      	movs	r0, #0
    34b8:	2100      	movs	r1, #0
    34ba:	4b0c      	ldr	r3, [pc, #48]	; (34ec <_ZN8cMxRadio11trx_io_initEi+0x9c>)
    34bc:	4798      	blx	r3
	TRX_SLPTR_INIT();
	SPI_INIT(spirate);
	TRX_IRQ_INIT();
	EI_TRX_IRQ();
	*/
}
    34be:	b004      	add	sp, #16
    34c0:	bd70      	pop	{r4, r5, r6, pc}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	0000f864 	.word	0x0000f864
    34c8:	0000f87c 	.word	0x0000f87c
    34cc:	000059d9 	.word	0x000059d9
    34d0:	000056dd 	.word	0x000056dd
    34d4:	000056f9 	.word	0x000056f9
    34d8:	0000481d 	.word	0x0000481d
    34dc:	00004831 	.word	0x00004831
    34e0:	200042f4 	.word	0x200042f4
    34e4:	0000343d 	.word	0x0000343d
    34e8:	0000471d 	.word	0x0000471d
    34ec:	00004745 	.word	0x00004745

000034f0 <_ZN8cMxRadio13trx_reg_writeEhh>:

void cMxRadio::trx_reg_write(uint8_t addr, trx_regval_t val)
{
    34f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34f2:	1c04      	adds	r4, r0, #0
    34f4:	1c17      	adds	r7, r2, #0

	addr = TRX_CMD_RW | (TRX_CMD_RADDR_MASK & addr);
    34f6:	23c0      	movs	r3, #192	; 0xc0
    34f8:	4319      	orrs	r1, r3
    34fa:	1c0d      	adds	r5, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    34fc:	3b18      	subs	r3, #24
    34fe:	56c3      	ldrsb	r3, [r0, r3]
    3500:	3301      	adds	r3, #1
    3502:	d104      	bne.n	350e <_ZN8cMxRadio13trx_reg_writeEhh+0x1e>
    3504:	4810      	ldr	r0, [pc, #64]	; (3548 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    3506:	4911      	ldr	r1, [pc, #68]	; (354c <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    3508:	2228      	movs	r2, #40	; 0x28
    350a:	4b11      	ldr	r3, [pc, #68]	; (3550 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    350c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    350e:	1c23      	adds	r3, r4, #0
    3510:	33a8      	adds	r3, #168	; 0xa8
    3512:	68da      	ldr	r2, [r3, #12]
    3514:	685b      	ldr	r3, [r3, #4]
    3516:	6013      	str	r3, [r2, #0]

	m_cs = 0;//SPI_SELN_LOW();
	m_spi.write(addr);//SPI_DATA_REG = addr;
    3518:	1c26      	adds	r6, r4, #0
    351a:	3614      	adds	r6, #20
    351c:	1c30      	adds	r0, r6, #0
    351e:	1c29      	adds	r1, r5, #0
    3520:	4d0c      	ldr	r5, [pc, #48]	; (3554 <_ZN8cMxRadio13trx_reg_writeEhh+0x64>)
    3522:	47a8      	blx	r5
	//SPI_WAITFOR();
	m_spi.write(val);//SPI_DATA_REG = val;
    3524:	1c30      	adds	r0, r6, #0
    3526:	1c39      	adds	r1, r7, #0
    3528:	47a8      	blx	r5
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    352a:	23a8      	movs	r3, #168	; 0xa8
    352c:	56e3      	ldrsb	r3, [r4, r3]
    352e:	3301      	adds	r3, #1
    3530:	d104      	bne.n	353c <_ZN8cMxRadio13trx_reg_writeEhh+0x4c>
    3532:	4805      	ldr	r0, [pc, #20]	; (3548 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    3534:	4905      	ldr	r1, [pc, #20]	; (354c <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    3536:	2228      	movs	r2, #40	; 0x28
    3538:	4b05      	ldr	r3, [pc, #20]	; (3550 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    353a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    353c:	34a8      	adds	r4, #168	; 0xa8
    353e:	6923      	ldr	r3, [r4, #16]
    3540:	6862      	ldr	r2, [r4, #4]
    3542:	601a      	str	r2, [r3, #0]
	//SPI_WAITFOR();
	m_cs = 1;//SPI_SELN_HIGH();
}
    3544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	0000f864 	.word	0x0000f864
    354c:	0000f87c 	.word	0x0000f87c
    3550:	000059d9 	.word	0x000059d9
    3554:	00005711 	.word	0x00005711

00003558 <_ZN8cMxRadio12trx_reg_readEh>:

trx_regval_t cMxRadio::trx_reg_read(uint8_t addr)
{
    3558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    355a:	1c04      	adds	r4, r0, #0

	uint8_t val;

	addr=TRX_CMD_RR | (TRX_CMD_RADDR_MASK & addr);
    355c:	253f      	movs	r5, #63	; 0x3f
    355e:	4029      	ands	r1, r5
    3560:	3541      	adds	r5, #65	; 0x41
    3562:	430d      	orrs	r5, r1
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3564:	23a8      	movs	r3, #168	; 0xa8
    3566:	56c3      	ldrsb	r3, [r0, r3]
    3568:	3301      	adds	r3, #1
    356a:	d104      	bne.n	3576 <_ZN8cMxRadio12trx_reg_readEh+0x1e>
    356c:	4811      	ldr	r0, [pc, #68]	; (35b4 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    356e:	4912      	ldr	r1, [pc, #72]	; (35b8 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    3570:	2228      	movs	r2, #40	; 0x28
    3572:	4b12      	ldr	r3, [pc, #72]	; (35bc <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    3574:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3576:	1c23      	adds	r3, r4, #0
    3578:	33a8      	adds	r3, #168	; 0xa8
    357a:	68da      	ldr	r2, [r3, #12]
    357c:	685b      	ldr	r3, [r3, #4]
    357e:	6013      	str	r3, [r2, #0]

	// Select transceiver
	m_cs = 0;//SPI_SELN_LOW();

	m_spi.write(addr);//SPI_DATA_REG = addr;
    3580:	1c27      	adds	r7, r4, #0
    3582:	3714      	adds	r7, #20
    3584:	1c38      	adds	r0, r7, #0
    3586:	1c29      	adds	r1, r5, #0
    3588:	4e0d      	ldr	r6, [pc, #52]	; (35c0 <_ZN8cMxRadio12trx_reg_readEh+0x68>)
    358a:	47b0      	blx	r6
	//SPI_WAITFOR();
	val=m_spi.write(addr);//SPI_DATA_REG = addr;        /* dummy out */
    358c:	1c38      	adds	r0, r7, #0
    358e:	1c29      	adds	r1, r5, #0
    3590:	47b0      	blx	r6
    3592:	b2c5      	uxtb	r5, r0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3594:	23a8      	movs	r3, #168	; 0xa8
    3596:	56e3      	ldrsb	r3, [r4, r3]
    3598:	3301      	adds	r3, #1
    359a:	d104      	bne.n	35a6 <_ZN8cMxRadio12trx_reg_readEh+0x4e>
    359c:	4805      	ldr	r0, [pc, #20]	; (35b4 <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    359e:	4906      	ldr	r1, [pc, #24]	; (35b8 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    35a0:	2228      	movs	r2, #40	; 0x28
    35a2:	4b06      	ldr	r3, [pc, #24]	; (35bc <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    35a4:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    35a6:	34a8      	adds	r4, #168	; 0xa8
    35a8:	6923      	ldr	r3, [r4, #16]
    35aa:	6862      	ldr	r2, [r4, #4]
    35ac:	601a      	str	r2, [r3, #0]
	//val = SPI_DATA_REG;

	m_cs=1;//SPI_SELN_HIGH();

	return (trx_regval_t)val;
}
    35ae:	1c28      	adds	r0, r5, #0
    35b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35b2:	46c0      	nop			; (mov r8, r8)
    35b4:	0000f864 	.word	0x0000f864
    35b8:	0000f87c 	.word	0x0000f87c
    35bc:	000059d9 	.word	0x000059d9
    35c0:	00005711 	.word	0x00005711

000035c4 <_ZN8cMxRadio19radio_receive_frameEv>:
/**
 * @brief Frame reception
 *
 */
void cMxRadio::radio_receive_frame(void)
{
    35c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35c6:	b087      	sub	sp, #28
    35c8:	1c04      	adds	r4, r0, #0

	uint8_t len, lqi, crc_fail;
	int8_t ed;

	/* @todo add RSSI_BASE_VALUE to get a dBm value */
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
    35ca:	2107      	movs	r1, #7
    35cc:	4b12      	ldr	r3, [pc, #72]	; (3618 <_ZN8cMxRadio19radio_receive_frameEv+0x54>)
    35ce:	4798      	blx	r3
    35d0:	9003      	str	r0, [sp, #12]
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
    35d2:	7c22      	ldrb	r2, [r4, #16]
    35d4:	270f      	movs	r7, #15
    35d6:	ab02      	add	r3, sp, #8
    35d8:	469c      	mov	ip, r3
    35da:	4467      	add	r7, ip
    35dc:	1c20      	adds	r0, r4, #0
    35de:	68e1      	ldr	r1, [r4, #12]
    35e0:	1c3b      	adds	r3, r7, #0
    35e2:	4d0e      	ldr	r5, [pc, #56]	; (361c <_ZN8cMxRadio19radio_receive_frameEv+0x58>)
    35e4:	47a8      	blx	r5
    35e6:	1c05      	adds	r5, r0, #0
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    35e8:	1c20      	adds	r0, r4, #0
    35ea:	2106      	movs	r1, #6
    35ec:	2280      	movs	r2, #128	; 0x80
    35ee:	2307      	movs	r3, #7
    35f0:	4e0b      	ldr	r6, [pc, #44]	; (3620 <_ZN8cMxRadio19radio_receive_frameEv+0x5c>)
    35f2:	47b0      	blx	r6
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    35f4:	217f      	movs	r1, #127	; 0x7f
    35f6:	4029      	ands	r1, r5
    35f8:	783b      	ldrb	r3, [r7, #0]
    35fa:	466a      	mov	r2, sp
    35fc:	260c      	movs	r6, #12
    35fe:	5796      	ldrsb	r6, [r2, r6]
    3600:	9600      	str	r6, [sp, #0]
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    3602:	4242      	negs	r2, r0
    3604:	4142      	adcs	r2, r0
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    3606:	9201      	str	r2, [sp, #4]
    3608:	1c20      	adds	r0, r4, #0
    360a:	68e2      	ldr	r2, [r4, #12]
    360c:	4d05      	ldr	r5, [pc, #20]	; (3624 <_ZN8cMxRadio19radio_receive_frameEv+0x60>)
    360e:	47a8      	blx	r5
    3610:	60e0      	str	r0, [r4, #12]
}
    3612:	b007      	add	sp, #28
    3614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	00003559 	.word	0x00003559
    361c:	00003c41 	.word	0x00003c41
    3620:	00003ad1 	.word	0x00003ad1
    3624:	00002e11 	.word	0x00002e11

00003628 <_ZN8cMxRadio10radio_initEPhh>:


/* === external functions ====================================================*/

void cMxRadio::radio_init(uint8_t * rxbuf, uint8_t rxbufsz)
{
    3628:	b530      	push	{r4, r5, lr}
    362a:	b083      	sub	sp, #12
    362c:	1c04      	adds	r4, r0, #0
	trx_regval_t status;
	/* init cpu peripherals and global IRQ enable */
	radiostatus.rxframe = rxbuf;
    362e:	60c1      	str	r1, [r0, #12]
	radiostatus.rxframesz = rxbufsz;
    3630:	7402      	strb	r2, [r0, #16]
	trx_io_init(1000000);
    3632:	492f      	ldr	r1, [pc, #188]	; (36f0 <_ZN8cMxRadio10radio_initEPhh+0xc8>)
    3634:	4b2f      	ldr	r3, [pc, #188]	; (36f4 <_ZN8cMxRadio10radio_initEPhh+0xcc>)
    3636:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3638:	23c4      	movs	r3, #196	; 0xc4
    363a:	56e3      	ldrsb	r3, [r4, r3]
    363c:	3301      	adds	r3, #1
    363e:	d104      	bne.n	364a <_ZN8cMxRadio10radio_initEPhh+0x22>
    3640:	482d      	ldr	r0, [pc, #180]	; (36f8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    3642:	492e      	ldr	r1, [pc, #184]	; (36fc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    3644:	2228      	movs	r2, #40	; 0x28
    3646:	4b2e      	ldr	r3, [pc, #184]	; (3700 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    3648:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    364a:	1c23      	adds	r3, r4, #0
    364c:	33c4      	adds	r3, #196	; 0xc4
    364e:	68da      	ldr	r2, [r3, #12]
    3650:	685b      	ldr	r3, [r3, #4]
    3652:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3654:	23e0      	movs	r3, #224	; 0xe0
    3656:	56e3      	ldrsb	r3, [r4, r3]
    3658:	3301      	adds	r3, #1
    365a:	d104      	bne.n	3666 <_ZN8cMxRadio10radio_initEPhh+0x3e>
    365c:	4826      	ldr	r0, [pc, #152]	; (36f8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    365e:	4927      	ldr	r1, [pc, #156]	; (36fc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    3660:	2228      	movs	r2, #40	; 0x28
    3662:	4b27      	ldr	r3, [pc, #156]	; (3700 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    3664:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3666:	1c23      	adds	r3, r4, #0
    3668:	33e0      	adds	r3, #224	; 0xe0
    366a:	68da      	ldr	r2, [r3, #12]
    366c:	685b      	ldr	r3, [r3, #4]
    366e:	6013      	str	r3, [r2, #0]
	/* transceiver initialization */

	reset_pin=0;//TRX_RESET_LOW();
	sleep_pin=0;//TRX_SLPTR_LOW();
	DELAY_US(TRX_RESET_TIME_US);
    3670:	2006      	movs	r0, #6
    3672:	4b24      	ldr	r3, [pc, #144]	; (3704 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    3674:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3676:	23c4      	movs	r3, #196	; 0xc4
    3678:	56e3      	ldrsb	r3, [r4, r3]
    367a:	3301      	adds	r3, #1
    367c:	d104      	bne.n	3688 <_ZN8cMxRadio10radio_initEPhh+0x60>
    367e:	481e      	ldr	r0, [pc, #120]	; (36f8 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    3680:	491e      	ldr	r1, [pc, #120]	; (36fc <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    3682:	2228      	movs	r2, #40	; 0x28
    3684:	4b1e      	ldr	r3, [pc, #120]	; (3700 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    3686:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3688:	1c23      	adds	r3, r4, #0
    368a:	33c4      	adds	r3, #196	; 0xc4
    368c:	691a      	ldr	r2, [r3, #16]
    368e:	685b      	ldr	r3, [r3, #4]
    3690:	6013      	str	r3, [r2, #0]


//	if (trx_reg_read(RG_MAN_ID_0)==31) //atmel
//		m_myled=0;
	/* disable IRQ and clear any pending IRQs */
	trx_reg_write(RG_IRQ_MASK, 0);
    3692:	1c20      	adds	r0, r4, #0
    3694:	210e      	movs	r1, #14
    3696:	2200      	movs	r2, #0
    3698:	4b1b      	ldr	r3, [pc, #108]	; (3708 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    369a:	4798      	blx	r3

	trx_reg_read(RG_IRQ_STATUS);
    369c:	1c20      	adds	r0, r4, #0
    369e:	210f      	movs	r1, #15
    36a0:	4b1a      	ldr	r3, [pc, #104]	; (370c <_ZN8cMxRadio10radio_initEPhh+0xe4>)
    36a2:	4798      	blx	r3
	DELAY_US(510);
#endif
	trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
	DELAY_US(510);
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
    36a4:	2308      	movs	r3, #8
    36a6:	9300      	str	r3, [sp, #0]
    36a8:	1c20      	adds	r0, r4, #0
    36aa:	2102      	movs	r1, #2
    36ac:	221f      	movs	r2, #31
    36ae:	2300      	movs	r3, #0
    36b0:	4d17      	ldr	r5, [pc, #92]	; (3710 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    36b2:	47a8      	blx	r5
	DELAY_US(510);
    36b4:	20ff      	movs	r0, #255	; 0xff
    36b6:	0040      	lsls	r0, r0, #1
    36b8:	4b12      	ldr	r3, [pc, #72]	; (3704 <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    36ba:	4798      	blx	r3
#endif

	do
	{
		status = trx_bit_read(SR_TRX_STATUS);
    36bc:	4d15      	ldr	r5, [pc, #84]	; (3714 <_ZN8cMxRadio10radio_initEPhh+0xec>)
    36be:	1c20      	adds	r0, r4, #0
    36c0:	2101      	movs	r1, #1
    36c2:	221f      	movs	r2, #31
    36c4:	2300      	movs	r3, #0
    36c6:	47a8      	blx	r5
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
	DELAY_US(510);
#endif

	do
    36c8:	2808      	cmp	r0, #8
    36ca:	d1f8      	bne.n	36be <_ZN8cMxRadio10radio_initEPhh+0x96>
	{
		status = trx_bit_read(SR_TRX_STATUS);
	}
	while (status != TRX_OFF);
	trx_bit_write(SR_TX_AUTO_CRC_ON, 1);
    36cc:	2301      	movs	r3, #1
    36ce:	9300      	str	r3, [sp, #0]
    36d0:	1c20      	adds	r0, r4, #0
    36d2:	2104      	movs	r1, #4
    36d4:	2220      	movs	r2, #32
    36d6:	3304      	adds	r3, #4
    36d8:	4d0d      	ldr	r5, [pc, #52]	; (3710 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    36da:	47a8      	blx	r5
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_RX_START | TRX_IRQ_TRX_END);
    36dc:	1c20      	adds	r0, r4, #0
    36de:	210e      	movs	r1, #14
    36e0:	220c      	movs	r2, #12
    36e2:	4b09      	ldr	r3, [pc, #36]	; (3708 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    36e4:	4798      	blx	r3

	radiostatus.state = STATE_OFF;
    36e6:	2300      	movs	r3, #0
    36e8:	71e3      	strb	r3, [r4, #7]
	radiostatus.idle_state = STATE_OFF;
    36ea:	7223      	strb	r3, [r4, #8]
}
    36ec:	b003      	add	sp, #12
    36ee:	bd30      	pop	{r4, r5, pc}
    36f0:	000f4240 	.word	0x000f4240
    36f4:	00003451 	.word	0x00003451
    36f8:	0000f864 	.word	0x0000f864
    36fc:	0000f87c 	.word	0x0000f87c
    3700:	000059d9 	.word	0x000059d9
    3704:	00005ab9 	.word	0x00005ab9
    3708:	000034f1 	.word	0x000034f1
    370c:	00003559 	.word	0x00003559
    3710:	00003b85 	.word	0x00003b85
    3714:	00003ad1 	.word	0x00003ad1

00003718 <_ZN8cMxRadio15radio_set_stateEh>:
	trx_bit_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
	radio_set_state(state);
}

void cMxRadio::radio_set_state(volatile radio_state_t state)
{
    3718:	b5f0      	push	{r4, r5, r6, r7, lr}
    371a:	464f      	mov	r7, r9
    371c:	b480      	push	{r7}
    371e:	b086      	sub	sp, #24
    3720:	9002      	str	r0, [sp, #8]
    3722:	230f      	movs	r3, #15
    3724:	446b      	add	r3, sp
    3726:	7019      	strb	r1, [r3, #0]
	volatile trx_regval_t cmd, expstatus, currstatus;
	uint8_t retries;
	bool do_sleep = false;

	switch(state)
    3728:	781b      	ldrb	r3, [r3, #0]
    372a:	b2db      	uxtb	r3, r3
    372c:	2b05      	cmp	r3, #5
    372e:	d83b      	bhi.n	37a8 <_ZN8cMxRadio15radio_set_stateEh+0x90>
    3730:	009b      	lsls	r3, r3, #2
    3732:	4a65      	ldr	r2, [pc, #404]	; (38c8 <_ZN8cMxRadio15radio_set_stateEh+0x1b0>)
    3734:	58d3      	ldr	r3, [r2, r3]
    3736:	469f      	mov	pc, r3
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    3738:	2308      	movs	r3, #8
    373a:	2216      	movs	r2, #22
    373c:	446a      	add	r2, sp
    373e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    3740:	2215      	movs	r2, #21
    3742:	446a      	add	r2, sp
    3744:	7013      	strb	r3, [r2, #0]
		break;
    3746:	e0b4      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		if (radiostatus.rx_lna)
		{
			TRX_RX_LNA_EI();
		}
#endif
expstatus = RX_ON;
    3748:	2306      	movs	r3, #6
    374a:	2216      	movs	r2, #22
    374c:	446a      	add	r2, sp
    374e:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_ON;
    3750:	2215      	movs	r2, #21
    3752:	446a      	add	r2, sp
    3754:	7013      	strb	r3, [r2, #0]
break;
    3756:	e0ac      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TX:
		expstatus = PLL_ON;
    3758:	2309      	movs	r3, #9
    375a:	2216      	movs	r2, #22
    375c:	446a      	add	r2, sp
    375e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_PLL_ON;
    3760:	2215      	movs	r2, #21
    3762:	446a      	add	r2, sp
    3764:	7013      	strb	r3, [r2, #0]
		break;
    3766:	e0a4      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
if (radiostatus.rx_lna)
{
	TRX_RX_LNA_EI();
}
#endif
expstatus = RX_AACK_ON;
    3768:	2316      	movs	r3, #22
    376a:	2216      	movs	r2, #22
    376c:	446a      	add	r2, sp
    376e:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_AACK_ON;
    3770:	2215      	movs	r2, #21
    3772:	446a      	add	r2, sp
    3774:	7013      	strb	r3, [r2, #0]
break;
    3776:	e09c      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TXAUTO:
		expstatus = TX_ARET_ON;
    3778:	2319      	movs	r3, #25
    377a:	2216      	movs	r2, #22
    377c:	446a      	add	r2, sp
    377e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TX_ARET_ON;
    3780:	2215      	movs	r2, #21
    3782:	446a      	add	r2, sp
    3784:	7013      	strb	r3, [r2, #0]
		break;
    3786:	e094      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    3788:	2208      	movs	r2, #8
    378a:	2316      	movs	r3, #22
    378c:	446b      	add	r3, sp
    378e:	701a      	strb	r2, [r3, #0]
		cmd = CMD_FORCE_TRX_OFF;
    3790:	3a05      	subs	r2, #5
    3792:	2315      	movs	r3, #21
    3794:	446b      	add	r3, sp
    3796:	701a      	strb	r2, [r3, #0]
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    3798:	9b02      	ldr	r3, [sp, #8]
    379a:	79db      	ldrb	r3, [r3, #7]
    379c:	2b05      	cmp	r3, #5
    379e:	d100      	bne.n	37a2 <_ZN8cMxRadio15radio_set_stateEh+0x8a>
    37a0:	e08e      	b.n	38c0 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
		cmd = CMD_FORCE_TRX_OFF;
		do_sleep = true;
    37a2:	2301      	movs	r3, #1
    37a4:	4699      	mov	r9, r3
    37a6:	e03d      	b.n	3824 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    37a8:	9802      	ldr	r0, [sp, #8]
    37aa:	2104      	movs	r1, #4
    37ac:	4b47      	ldr	r3, [pc, #284]	; (38cc <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    37ae:	4798      	blx	r3
		do_sleep = true;
		break;

	default:
		radio_error(GENERAL_ERROR);
		expstatus = TRX_OFF;
    37b0:	2308      	movs	r3, #8
    37b2:	2216      	movs	r2, #22
    37b4:	446a      	add	r2, sp
    37b6:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    37b8:	2215      	movs	r2, #21
    37ba:	446a      	add	r2, sp
    37bc:	7013      	strb	r3, [r2, #0]
		break;
    37be:	e078      	b.n	38b2 <_ZN8cMxRadio15radio_set_stateEh+0x19a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    37c0:	23e0      	movs	r3, #224	; 0xe0
    37c2:	9a02      	ldr	r2, [sp, #8]
    37c4:	56d3      	ldrsb	r3, [r2, r3]
    37c6:	3301      	adds	r3, #1
    37c8:	d104      	bne.n	37d4 <_ZN8cMxRadio15radio_set_stateEh+0xbc>
    37ca:	4841      	ldr	r0, [pc, #260]	; (38d0 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    37cc:	4941      	ldr	r1, [pc, #260]	; (38d4 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    37ce:	2228      	movs	r2, #40	; 0x28
    37d0:	4b41      	ldr	r3, [pc, #260]	; (38d8 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    37d2:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    37d4:	9b02      	ldr	r3, [sp, #8]
    37d6:	33e0      	adds	r3, #224	; 0xe0
    37d8:	68da      	ldr	r2, [r3, #12]
    37da:	685b      	ldr	r3, [r3, #4]
    37dc:	6013      	str	r3, [r2, #0]
		 * be polled.  The state reads as 0b0011111 ("state transition
		 * in progress") while the transceiver is still in its startup
		 * phase, which does not match any of the "expstatus" values,
		 * so polling just continues.
		 */
		DELAY_US(500);
    37de:	20fa      	movs	r0, #250	; 0xfa
    37e0:	0040      	lsls	r0, r0, #1
    37e2:	4b3e      	ldr	r3, [pc, #248]	; (38dc <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
    37e4:	4798      	blx	r3
    37e6:	2464      	movs	r4, #100	; 0x64
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    37e8:	4f3d      	ldr	r7, [pc, #244]	; (38e0 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    37ea:	2517      	movs	r5, #23
    37ec:	446d      	add	r5, sp
			 */
			if (TRX_OFF == currstatus)
			{
				break;
			}
			DELAY_US(50);
    37ee:	4e3b      	ldr	r6, [pc, #236]	; (38dc <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    37f0:	9802      	ldr	r0, [sp, #8]
    37f2:	2101      	movs	r1, #1
    37f4:	221f      	movs	r2, #31
    37f6:	2300      	movs	r3, #0
    37f8:	47b8      	blx	r7
    37fa:	7028      	strb	r0, [r5, #0]
			/*
			 * Sleep could only be entered from TRX_OFF, so that's
			 * what is expected again.
			 */
			if (TRX_OFF == currstatus)
    37fc:	782b      	ldrb	r3, [r5, #0]
    37fe:	2b08      	cmp	r3, #8
    3800:	d005      	beq.n	380e <_ZN8cMxRadio15radio_set_stateEh+0xf6>
			{
				break;
			}
			DELAY_US(50);
    3802:	2032      	movs	r0, #50	; 0x32
    3804:	47b0      	blx	r6
    3806:	3c01      	subs	r4, #1
    3808:	b2e4      	uxtb	r4, r4
		 * to be charged by the voltage regulator.  Give the crystal
		 * oscillator some time to start up.  5 ms (100 * 50 us) ought
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
    380a:	2c00      	cmp	r4, #0
    380c:	d1f0      	bne.n	37f0 <_ZN8cMxRadio15radio_set_stateEh+0xd8>
			}
			DELAY_US(50);
		}
		while (--retries);

		if (currstatus != TRX_OFF)
    380e:	2317      	movs	r3, #23
    3810:	446b      	add	r3, sp
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	2200      	movs	r2, #0
    3816:	4691      	mov	r9, r2
    3818:	2b08      	cmp	r3, #8
    381a:	d003      	beq.n	3824 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    381c:	9802      	ldr	r0, [sp, #8]
    381e:	2101      	movs	r1, #1
    3820:	4b2a      	ldr	r3, [pc, #168]	; (38cc <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    3822:	4798      	blx	r3
		{
			/* radio didn't wake up */
			radio_error(STATE_SET_FAILED);
		}
	}
	trx_bit_write(SR_TRX_CMD, cmd);
    3824:	2315      	movs	r3, #21
    3826:	446b      	add	r3, sp
    3828:	781b      	ldrb	r3, [r3, #0]
    382a:	9300      	str	r3, [sp, #0]
    382c:	9802      	ldr	r0, [sp, #8]
    382e:	2102      	movs	r1, #2
    3830:	221f      	movs	r2, #31
    3832:	2300      	movs	r3, #0
    3834:	4c2b      	ldr	r4, [pc, #172]	; (38e4 <_ZN8cMxRadio15radio_set_stateEh+0x1cc>)
    3836:	47a0      	blx	r4
    3838:	248c      	movs	r4, #140	; 0x8c

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    383a:	4f29      	ldr	r7, [pc, #164]	; (38e0 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    383c:	2517      	movs	r5, #23
    383e:	446d      	add	r5, sp
		if (expstatus == currstatus)
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    3840:	4e26      	ldr	r6, [pc, #152]	; (38dc <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    3842:	9802      	ldr	r0, [sp, #8]
    3844:	2101      	movs	r1, #1
    3846:	221f      	movs	r2, #31
    3848:	2300      	movs	r3, #0
    384a:	47b8      	blx	r7
    384c:	7028      	strb	r0, [r5, #0]
		if (expstatus == currstatus)
    384e:	2316      	movs	r3, #22
    3850:	446b      	add	r3, sp
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	782a      	ldrb	r2, [r5, #0]
    3856:	b2db      	uxtb	r3, r3
    3858:	4293      	cmp	r3, r2
    385a:	d005      	beq.n	3868 <_ZN8cMxRadio15radio_set_stateEh+0x150>
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    385c:	2020      	movs	r0, #32
    385e:	47b0      	blx	r6
    3860:	3c01      	subs	r4, #1
    3862:	b2e4      	uxtb	r4, r4
	}
	trx_bit_write(SR_TRX_CMD, cmd);

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
    3864:	2c00      	cmp	r4, #0
    3866:	d1ec      	bne.n	3842 <_ZN8cMxRadio15radio_set_stateEh+0x12a>
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
	}
	while (--retries);

	if (expstatus != currstatus)
    3868:	2316      	movs	r3, #22
    386a:	446b      	add	r3, sp
    386c:	781b      	ldrb	r3, [r3, #0]
    386e:	2217      	movs	r2, #23
    3870:	446a      	add	r2, sp
    3872:	7812      	ldrb	r2, [r2, #0]
    3874:	b2db      	uxtb	r3, r3
    3876:	4293      	cmp	r3, r2
    3878:	d003      	beq.n	3882 <_ZN8cMxRadio15radio_set_stateEh+0x16a>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    387a:	9802      	ldr	r0, [sp, #8]
    387c:	2101      	movs	r1, #1
    387e:	4b13      	ldr	r3, [pc, #76]	; (38cc <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    3880:	4798      	blx	r3
	if (expstatus != currstatus)
	{
		radio_error(STATE_SET_FAILED);
	}

	if (do_sleep)
    3882:	464b      	mov	r3, r9
    3884:	2b00      	cmp	r3, #0
    3886:	d00e      	beq.n	38a6 <_ZN8cMxRadio15radio_set_stateEh+0x18e>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3888:	23e0      	movs	r3, #224	; 0xe0
    388a:	9a02      	ldr	r2, [sp, #8]
    388c:	56d3      	ldrsb	r3, [r2, r3]
    388e:	3301      	adds	r3, #1
    3890:	d104      	bne.n	389c <_ZN8cMxRadio15radio_set_stateEh+0x184>
    3892:	480f      	ldr	r0, [pc, #60]	; (38d0 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    3894:	490f      	ldr	r1, [pc, #60]	; (38d4 <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    3896:	2228      	movs	r2, #40	; 0x28
    3898:	4b0f      	ldr	r3, [pc, #60]	; (38d8 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    389a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    389c:	9b02      	ldr	r3, [sp, #8]
    389e:	33e0      	adds	r3, #224	; 0xe0
    38a0:	691a      	ldr	r2, [r3, #16]
    38a2:	685b      	ldr	r3, [r3, #4]
    38a4:	6013      	str	r3, [r2, #0]
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
    38a6:	230f      	movs	r3, #15
    38a8:	446b      	add	r3, sp
    38aa:	781b      	ldrb	r3, [r3, #0]
    38ac:	9a02      	ldr	r2, [sp, #8]
    38ae:	71d3      	strb	r3, [r2, #7]
    38b0:	e006      	b.n	38c0 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    38b2:	9b02      	ldr	r3, [sp, #8]
    38b4:	79db      	ldrb	r3, [r3, #7]
    38b6:	2b05      	cmp	r3, #5
    38b8:	d082      	beq.n	37c0 <_ZN8cMxRadio15radio_set_stateEh+0xa8>
    38ba:	2300      	movs	r3, #0
    38bc:	4699      	mov	r9, r3
    38be:	e7b1      	b.n	3824 <_ZN8cMxRadio15radio_set_stateEh+0x10c>
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
}
    38c0:	b006      	add	sp, #24
    38c2:	bc04      	pop	{r2}
    38c4:	4691      	mov	r9, r2
    38c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c8:	0000fd10 	.word	0x0000fd10
    38cc:	00002de9 	.word	0x00002de9
    38d0:	0000f864 	.word	0x0000f864
    38d4:	0000f87c 	.word	0x0000f87c
    38d8:	000059d9 	.word	0x000059d9
    38dc:	00005ab9 	.word	0x00005ab9
    38e0:	00003ad1 	.word	0x00003ad1
    38e4:	00003b85 	.word	0x00003b85

000038e8 <_ZN8cMxRadio17radio_irq_handlerEh>:
 *
 * @parm cause  value of the interrupt status register
 *
 */
void cMxRadio::radio_irq_handler(uint8_t cause)
{
    38e8:	b570      	push	{r4, r5, r6, lr}
    38ea:	1c04      	adds	r4, r0, #0
    38ec:	1c0d      	adds	r5, r1, #0
	if (cause & TRX_IRQ_TRX_END)
    38ee:	070b      	lsls	r3, r1, #28
    38f0:	d52b      	bpl.n	394a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
	{
		if (STATE_RX == radiostatus.state ||
    38f2:	79c3      	ldrb	r3, [r0, #7]
    38f4:	1e99      	subs	r1, r3, #2
    38f6:	22fd      	movs	r2, #253	; 0xfd
    38f8:	4211      	tst	r1, r2
    38fa:	d102      	bne.n	3902 <_ZN8cMxRadio17radio_irq_handlerEh+0x1a>
				STATE_RXAUTO == radiostatus.state)
		{
			radio_receive_frame();
    38fc:	4b15      	ldr	r3, [pc, #84]	; (3954 <_ZN8cMxRadio17radio_irq_handlerEh+0x6c>)
    38fe:	4798      	blx	r3
    3900:	e023      	b.n	394a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TX == radiostatus.state)
    3902:	2b01      	cmp	r3, #1
    3904:	d107      	bne.n	3916 <_ZN8cMxRadio17radio_irq_handlerEh+0x2e>
		{
#ifdef TRX_TX_PA_EI
TRX_TX_PA_DI();
#endif
usr_radio_tx_done(TX_OK);
    3906:	2100      	movs	r1, #0
    3908:	4b13      	ldr	r3, [pc, #76]	; (3958 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    390a:	4798      	blx	r3
radio_set_state(radiostatus.idle_state);
    390c:	7a21      	ldrb	r1, [r4, #8]
    390e:	1c20      	adds	r0, r4, #0
    3910:	4b12      	ldr	r3, [pc, #72]	; (395c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    3912:	4798      	blx	r3
    3914:	e019      	b.n	394a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TXAUTO == radiostatus.state)
    3916:	2b03      	cmp	r3, #3
    3918:	d117      	bne.n	394a <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		{
#ifdef TRX_TX_PA_EI
			TRX_TX_PA_DI();
#endif
			uint8_t trac_status = trx_bit_read(SR_TRAC_STATUS);
    391a:	2102      	movs	r1, #2
    391c:	22e0      	movs	r2, #224	; 0xe0
    391e:	3302      	adds	r3, #2
    3920:	4e0f      	ldr	r6, [pc, #60]	; (3960 <_ZN8cMxRadio17radio_irq_handlerEh+0x78>)
    3922:	47b0      	blx	r6
			radio_tx_done_t result;
			switch (trac_status)
    3924:	2803      	cmp	r0, #3
    3926:	d006      	beq.n	3936 <_ZN8cMxRadio17radio_irq_handlerEh+0x4e>
    3928:	d307      	bcc.n	393a <_ZN8cMxRadio17radio_irq_handlerEh+0x52>
			case TRAC_NO_ACK:
				result = TX_NO_ACK;
				break;

			default:
				result = TX_FAIL;
    392a:	3805      	subs	r0, #5
    392c:	4243      	negs	r3, r0
    392e:	4143      	adcs	r3, r0
    3930:	2103      	movs	r1, #3
    3932:	1ac9      	subs	r1, r1, r3
    3934:	e002      	b.n	393c <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
#endif
				result = TX_OK;
				break;

			case TRAC_CHANNEL_ACCESS_FAILURE:
				result = TX_CCA_FAIL;
    3936:	2101      	movs	r1, #1
    3938:	e000      	b.n	393c <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
			case TRAC_SUCCESS_DATA_PENDING:
#endif
#if defined TRAC_SUCCESS_WAIT_FOR_ACK
			case TRAC_SUCCESS_WAIT_FOR_ACK:
#endif
				result = TX_OK;
    393a:	2100      	movs	r1, #0
				break;

			default:
				result = TX_FAIL;
			}
			usr_radio_tx_done(result);
    393c:	1c20      	adds	r0, r4, #0
    393e:	4b06      	ldr	r3, [pc, #24]	; (3958 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    3940:	4798      	blx	r3
			radio_set_state(radiostatus.idle_state);
    3942:	7a21      	ldrb	r1, [r4, #8]
    3944:	1c20      	adds	r0, r4, #0
    3946:	4b05      	ldr	r3, [pc, #20]	; (395c <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    3948:	4798      	blx	r3
		}
	}
	usr_radio_irq(cause);
    394a:	1c20      	adds	r0, r4, #0
    394c:	1c29      	adds	r1, r5, #0
    394e:	4b05      	ldr	r3, [pc, #20]	; (3964 <_ZN8cMxRadio17radio_irq_handlerEh+0x7c>)
    3950:	4798      	blx	r3
}
    3952:	bd70      	pop	{r4, r5, r6, pc}
    3954:	000035c5 	.word	0x000035c5
    3958:	00002e59 	.word	0x00002e59
    395c:	00003719 	.word	0x00003719
    3960:	00003ad1 	.word	0x00003ad1
    3964:	00002dfd 	.word	0x00002dfd

00003968 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t>:

	radiostatus.state = state;
}

void cMxRadio::radio_set_param(radio_attribute_t attr, radio_param_t parm)
{
    3968:	b5f0      	push	{r4, r5, r6, r7, lr}
    396a:	4647      	mov	r7, r8
    396c:	b480      	push	{r7}
    396e:	b082      	sub	sp, #8
    3970:	1c05      	adds	r5, r0, #0
	switch (attr)
    3972:	2908      	cmp	r1, #8
    3974:	d864      	bhi.n	3a40 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xd8>
    3976:	0089      	lsls	r1, r1, #2
    3978:	4b35      	ldr	r3, [pc, #212]	; (3a50 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xe8>)
    397a:	585b      	ldr	r3, [r3, r1]
    397c:	469f      	mov	pc, r3
	{
	case phyCurrentChannel:
		if (((int)parm.channel >= TRX_MIN_CHANNEL) &&
    397e:	b2d4      	uxtb	r4, r2
    3980:	1c23      	adds	r3, r4, #0
    3982:	3b0b      	subs	r3, #11
    3984:	2b0f      	cmp	r3, #15
    3986:	d807      	bhi.n	3998 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x30>
		{
#ifdef CHINABAND
			trx_reg_write(RG_CC_CTRL_1, CCBAND);
			trx_reg_write(RG_CC_CTRL_0, parm.channel*2+CCNUMBER);
#else
			trx_bit_write(SR_CHANNEL, parm.channel);
    3988:	9400      	str	r4, [sp, #0]
    398a:	2108      	movs	r1, #8
    398c:	221f      	movs	r2, #31
    398e:	2300      	movs	r3, #0
    3990:	4e30      	ldr	r6, [pc, #192]	; (3a54 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    3992:	47b0      	blx	r6
#endif
			radiostatus.channel = parm.channel;
    3994:	712c      	strb	r4, [r5, #4]
    3996:	e056      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3998:	2102      	movs	r1, #2
    399a:	4b2f      	ldr	r3, [pc, #188]	; (3a58 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    399c:	4798      	blx	r3
    399e:	e052      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		{
			radio_error(SET_PARM_FAILED);
		}
#endif//chinaband
#else
		if (parm.tx_pwr >= -17 && parm.tx_pwr <= 3)
    39a0:	b2d2      	uxtb	r2, r2
    39a2:	1c13      	adds	r3, r2, #0
    39a4:	3311      	adds	r3, #17
    39a6:	b2db      	uxtb	r3, r3
    39a8:	2b14      	cmp	r3, #20
    39aa:	d809      	bhi.n	39c0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x58>
					0x06,                         /* 0 dBm */
					0x04,                         /* 1 dBm */
					0x02,                         /* 2 dBm */
					0x00                          /* 3 dBm */
			};
			radiostatus.tx_pwr = parm.tx_pwr;
    39ac:	7142      	strb	r2, [r0, #5]
			uint8_t idx = parm.tx_pwr + 17;
			uint8_t pwrval = pwrtable[idx];
    39ae:	4a2b      	ldr	r2, [pc, #172]	; (3a5c <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf4>)
			trx_bit_write(SR_TX_PWR, pwrval);
    39b0:	5cd3      	ldrb	r3, [r2, r3]
    39b2:	9300      	str	r3, [sp, #0]
    39b4:	2105      	movs	r1, #5
    39b6:	220f      	movs	r2, #15
    39b8:	2300      	movs	r3, #0
    39ba:	4c26      	ldr	r4, [pc, #152]	; (3a54 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    39bc:	47a0      	blx	r4
    39be:	e042      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    39c0:	2102      	movs	r1, #2
    39c2:	4b25      	ldr	r3, [pc, #148]	; (3a58 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    39c4:	4798      	blx	r3
    39c6:	e03e      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		}

#endif//rf212
		break;
	case phyCCAMode:
		if (parm.cca_mode <= 3)
    39c8:	b2d2      	uxtb	r2, r2
    39ca:	2a03      	cmp	r2, #3
    39cc:	d807      	bhi.n	39de <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x76>
		{
			radiostatus.cca_mode = parm.cca_mode;
    39ce:	7182      	strb	r2, [r0, #6]
			trx_bit_write(SR_CCA_MODE, radiostatus.cca_mode);
    39d0:	9200      	str	r2, [sp, #0]
    39d2:	2108      	movs	r1, #8
    39d4:	2260      	movs	r2, #96	; 0x60
    39d6:	2305      	movs	r3, #5
    39d8:	4c1e      	ldr	r4, [pc, #120]	; (3a54 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    39da:	47a0      	blx	r4
    39dc:	e033      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    39de:	2102      	movs	r1, #2
    39e0:	4b1d      	ldr	r3, [pc, #116]	; (3a58 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    39e2:	4798      	blx	r3
    39e4:	e02f      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			radio_error(SET_PARM_FAILED);
		}
		break;

	case phyIdleState:
		radiostatus.idle_state = parm.idle_state;
    39e6:	b2d1      	uxtb	r1, r2
    39e8:	7201      	strb	r1, [r0, #8]
		radio_set_state(parm.idle_state);
    39ea:	4b1d      	ldr	r3, [pc, #116]	; (3a60 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf8>)
    39ec:	4798      	blx	r3
		break;
    39ee:	e02a      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>

	case phyChannelsSupported:
		break;

	case phyPanId:
		trx_set_panid(parm.pan_id);
    39f0:	b294      	uxth	r4, r2
	/**
	 * @brief Write the PANID to the address filter registers
	 */
	 inline void trx_set_panid(uint16_t panid)
	{
	    trx_reg_write(RG_PAN_ID_0,(panid&0xff));
    39f2:	b2e2      	uxtb	r2, r4
    39f4:	2122      	movs	r1, #34	; 0x22
    39f6:	4e1b      	ldr	r6, [pc, #108]	; (3a64 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    39f8:	47b0      	blx	r6
	    trx_reg_write(RG_PAN_ID_1,(panid>>8));
    39fa:	0a22      	lsrs	r2, r4, #8
    39fc:	1c28      	adds	r0, r5, #0
    39fe:	2123      	movs	r1, #35	; 0x23
    3a00:	47b0      	blx	r6
    3a02:	e020      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyShortAddr:
		trx_set_shortaddr(parm.short_addr);
    3a04:	b294      	uxth	r4, r2
	 * @brief Write the 16 bit short address to the
	 * address filter registers
	 */
	 inline void trx_set_shortaddr(uint16_t shortaddr)
	{
	    trx_reg_write(RG_SHORT_ADDR_0,(shortaddr&0xff));
    3a06:	b2e2      	uxtb	r2, r4
    3a08:	2120      	movs	r1, #32
    3a0a:	4e16      	ldr	r6, [pc, #88]	; (3a64 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    3a0c:	47b0      	blx	r6
	    trx_reg_write(RG_SHORT_ADDR_1,(shortaddr>>8));
    3a0e:	0a22      	lsrs	r2, r4, #8
    3a10:	1c28      	adds	r0, r5, #0
    3a12:	2121      	movs	r1, #33	; 0x21
    3a14:	47b0      	blx	r6
    3a16:	e016      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    3a18:	1c17      	adds	r7, r2, #0
    3a1a:	3208      	adds	r2, #8
    3a1c:	1c14      	adds	r4, r2, #0
    3a1e:	2624      	movs	r6, #36	; 0x24
				regno <= RG_IEEE_ADDR_7;
				regno++, ap++)
			trx_reg_write(regno, *ap);
    3a20:	4b10      	ldr	r3, [pc, #64]	; (3a64 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    3a22:	4698      	mov	r8, r3
    3a24:	783a      	ldrb	r2, [r7, #0]
    3a26:	1c28      	adds	r0, r5, #0
    3a28:	1c31      	adds	r1, r6, #0
    3a2a:	47c0      	blx	r8
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    3a2c:	3601      	adds	r6, #1
    3a2e:	b2f6      	uxtb	r6, r6
    3a30:	3701      	adds	r7, #1
    3a32:	42a7      	cmp	r7, r4
    3a34:	d1f6      	bne.n	3a24 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xbc>
    3a36:	e006      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			trx_reg_write(regno, *ap);
		break;
	}

	case phyDataRate:
		trx_set_datarate(parm.data_rate);
    3a38:	b2d1      	uxtb	r1, r2
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x100>)
    3a3c:	4798      	blx	r3
		break;
    3a3e:	e002      	b.n	3a46 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3a40:	2102      	movs	r1, #2
    3a42:	4b05      	ldr	r3, [pc, #20]	; (3a58 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    3a44:	4798      	blx	r3

	default:
		radio_error(SET_PARM_FAILED);
		break;
	}
}
    3a46:	b002      	add	sp, #8
    3a48:	bc04      	pop	{r2}
    3a4a:	4690      	mov	r8, r2
    3a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	0000fd28 	.word	0x0000fd28
    3a54:	00003b85 	.word	0x00003b85
    3a58:	00002de9 	.word	0x00002de9
    3a5c:	0000fd4c 	.word	0x0000fd4c
    3a60:	00003719 	.word	0x00003719
    3a64:	000034f1 	.word	0x000034f1
    3a68:	00003ae9 	.word	0x00003ae9

00003a6c <_ZN8cMxRadio16radio_send_frameEhPhh>:


void cMxRadio::radio_send_frame(uint8_t len, uint8_t *frm, uint8_t compcrc)
{
    3a6c:	b570      	push	{r4, r5, r6, lr}
    3a6e:	1c04      	adds	r4, r0, #0
    3a70:	1c0e      	adds	r6, r1, #0
    3a72:	1c15      	adds	r5, r2, #0
	{
		TRX_TX_PA_EI();
	}
#endif
/* this block should be made atomic */
	frm[2]++;
    3a74:	7893      	ldrb	r3, [r2, #2]
    3a76:	3301      	adds	r3, #1
    3a78:	7093      	strb	r3, [r2, #2]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3a7a:	23e0      	movs	r3, #224	; 0xe0
    3a7c:	56c3      	ldrsb	r3, [r0, r3]
    3a7e:	3301      	adds	r3, #1
    3a80:	d104      	bne.n	3a8c <_ZN8cMxRadio16radio_send_frameEhPhh+0x20>
    3a82:	480f      	ldr	r0, [pc, #60]	; (3ac0 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    3a84:	490f      	ldr	r1, [pc, #60]	; (3ac4 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    3a86:	2228      	movs	r2, #40	; 0x28
    3a88:	4b0f      	ldr	r3, [pc, #60]	; (3ac8 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    3a8a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3a8c:	1c23      	adds	r3, r4, #0
    3a8e:	33e0      	adds	r3, #224	; 0xe0
    3a90:	691a      	ldr	r2, [r3, #16]
    3a92:	685b      	ldr	r3, [r3, #4]
    3a94:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3a96:	23e0      	movs	r3, #224	; 0xe0
    3a98:	56e3      	ldrsb	r3, [r4, r3]
    3a9a:	3301      	adds	r3, #1
    3a9c:	d104      	bne.n	3aa8 <_ZN8cMxRadio16radio_send_frameEhPhh+0x3c>
    3a9e:	4808      	ldr	r0, [pc, #32]	; (3ac0 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    3aa0:	4908      	ldr	r1, [pc, #32]	; (3ac4 <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    3aa2:	2228      	movs	r2, #40	; 0x28
    3aa4:	4b08      	ldr	r3, [pc, #32]	; (3ac8 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    3aa6:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3aa8:	1c23      	adds	r3, r4, #0
    3aaa:	33e0      	adds	r3, #224	; 0xe0
    3aac:	68da      	ldr	r2, [r3, #12]
    3aae:	685b      	ldr	r3, [r3, #4]
    3ab0:	6013      	str	r3, [r2, #0]
	sleep_pin=1;//TRX_SLPTR_HIGH();
	sleep_pin=0;//TRX_SLPTR_LOW();
	trx_frame_write(len, frm);
    3ab2:	1c20      	adds	r0, r4, #0
    3ab4:	1c31      	adds	r1, r6, #0
    3ab6:	1c2a      	adds	r2, r5, #0
    3ab8:	4b04      	ldr	r3, [pc, #16]	; (3acc <_ZN8cMxRadio16radio_send_frameEhPhh+0x60>)
    3aba:	4798      	blx	r3
	/***********************************/
}
    3abc:	bd70      	pop	{r4, r5, r6, pc}
    3abe:	46c0      	nop			; (mov r8, r8)
    3ac0:	0000f864 	.word	0x0000f864
    3ac4:	0000f87c 	.word	0x0000f87c
    3ac8:	000059d9 	.word	0x000059d9
    3acc:	00003bb9 	.word	0x00003bb9

00003ad0 <_ZN8cMxRadio12trx_bit_readEhhh>:
#include <MxRadio.h>


/* === functions ========================================= */
trx_regval_t cMxRadio::trx_bit_read(uint8_t addr, trx_regval_t mask, uint8_t pos)
{
    3ad0:	b538      	push	{r3, r4, r5, lr}
    3ad2:	1c15      	adds	r5, r2, #0
    3ad4:	1c1c      	adds	r4, r3, #0
trx_regval_t data;
    data = trx_reg_read(addr);
    3ad6:	4b03      	ldr	r3, [pc, #12]	; (3ae4 <_ZN8cMxRadio12trx_bit_readEhhh+0x14>)
    3ad8:	4798      	blx	r3
    data &= mask;
    data >>= pos;
    3ada:	4028      	ands	r0, r5
    3adc:	4120      	asrs	r0, r4
    return data;
    3ade:	b2c0      	uxtb	r0, r0
}
    3ae0:	bd38      	pop	{r3, r4, r5, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	00003559 	.word	0x00003559

00003ae8 <_ZN8cMxRadio16trx_set_datarateEh>:
}

#elif RADIO_TYPE == RADIO_AT86RF231

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
    3ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aea:	1c06      	adds	r6, r0, #0
    3aec:	1e0c      	subs	r4, r1, #0
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    3aee:	2c34      	cmp	r4, #52	; 0x34
    3af0:	d00f      	beq.n	3b12 <_ZN8cMxRadio16trx_set_datarateEh+0x2a>
    3af2:	2934      	cmp	r1, #52	; 0x34
    3af4:	d803      	bhi.n	3afe <_ZN8cMxRadio16trx_set_datarateEh+0x16>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
    3af6:	2500      	movs	r5, #0

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    3af8:	2933      	cmp	r1, #51	; 0x33
    3afa:	d00b      	beq.n	3b14 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    3afc:	e007      	b.n	3b0e <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    3afe:	2954      	cmp	r1, #84	; 0x54
    3b00:	d003      	beq.n	3b0a <_ZN8cMxRadio16trx_set_datarateEh+0x22>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
    3b02:	2501      	movs	r5, #1

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    3b04:	2994      	cmp	r1, #148	; 0x94
    3b06:	d005      	beq.n	3b14 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    3b08:	e001      	b.n	3b0e <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
        case OQPSK2000: regval = TRX_OQPSK2000; break;
    3b0a:	2503      	movs	r5, #3
    3b0c:	e002      	b.n	3b14 <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
        trx_reg_write(RG_TRX_CTRL_2, regval);
    }
    else
    {
        rate_type = TRX_NONE;
    3b0e:	24ff      	movs	r4, #255	; 0xff
    3b10:	e011      	b.n	3b36 <_ZN8cMxRadio16trx_set_datarateEh+0x4e>

    switch(rate_type)
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
    3b12:	2502      	movs	r5, #2
        case OQPSK2000: regval = TRX_OQPSK2000; break;
        default: break;
    }
    if (regval != TRX_NONE)
    {
        trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    3b14:	1c30      	adds	r0, r6, #0
    3b16:	2102      	movs	r1, #2
    3b18:	2203      	movs	r2, #3
    3b1a:	4f08      	ldr	r7, [pc, #32]	; (3b3c <_ZN8cMxRadio16trx_set_datarateEh+0x54>)
    3b1c:	47b8      	blx	r7
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
    3b1e:	1c30      	adds	r0, r6, #0
    3b20:	210c      	movs	r1, #12
    3b22:	4b07      	ldr	r3, [pc, #28]	; (3b40 <_ZN8cMxRadio16trx_set_datarateEh+0x58>)
    3b24:	4798      	blx	r3
    3b26:	2303      	movs	r3, #3
    3b28:	1c02      	adds	r2, r0, #0
    3b2a:	439a      	bics	r2, r3
    3b2c:	4315      	orrs	r5, r2
        trx_reg_write(RG_TRX_CTRL_2, regval);
    3b2e:	b2ea      	uxtb	r2, r5
    3b30:	1c30      	adds	r0, r6, #0
    3b32:	210c      	movs	r1, #12
    3b34:	47b8      	blx	r7
    else
    {
        rate_type = TRX_NONE;
    }
    return rate_type;
}
    3b36:	1c20      	adds	r0, r4, #0
    3b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	000034f1 	.word	0x000034f1
    3b40:	00003559 	.word	0x00003559

00003b44 <_ZN8cMxRadio15rf_irq_callbackEv>:


/* === globals ============================================================= */

void cMxRadio::rf_irq_callback()
{
    3b44:	b538      	push	{r3, r4, r5, lr}
    3b46:	1c04      	adds	r4, r0, #0

uint8_t cause;
    //DI_TRX_IRQ();
    //sei();
    cause = trx_reg_read(RG_IRQ_STATUS);
    3b48:	210f      	movs	r1, #15
    3b4a:	4b0c      	ldr	r3, [pc, #48]	; (3b7c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    3b4c:	4798      	blx	r3
    3b4e:	1c05      	adds	r5, r0, #0

    if (cause & TRX_IRQ_RX_START)
    3b50:	0743      	lsls	r3, r0, #29
    3b52:	d504      	bpl.n	3b5e <_ZN8cMxRadio15rf_irq_callbackEv+0x1a>
    {
    	temprssi = trx_reg_read(RG_PHY_RSSI);
    3b54:	1c20      	adds	r0, r4, #0
    3b56:	2106      	movs	r1, #6
    3b58:	4b08      	ldr	r3, [pc, #32]	; (3b7c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    3b5a:	4798      	blx	r3
    3b5c:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }

    if (cause & TRX_IRQ_TRX_END)
    3b5e:	072b      	lsls	r3, r5, #28
    3b60:	d507      	bpl.n	3b72 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    {
    	if (temprssi==0)
    3b62:	7823      	ldrb	r3, [r4, #0]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d104      	bne.n	3b72 <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    		temprssi = trx_reg_read(RG_PHY_RSSI);
    3b68:	1c20      	adds	r0, r4, #0
    3b6a:	2106      	movs	r1, #6
    3b6c:	4b03      	ldr	r3, [pc, #12]	; (3b7c <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    3b6e:	4798      	blx	r3
    3b70:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }
    radio_irq_handler(cause);
    3b72:	1c20      	adds	r0, r4, #0
    3b74:	1c29      	adds	r1, r5, #0
    3b76:	4b02      	ldr	r3, [pc, #8]	; (3b80 <_ZN8cMxRadio15rf_irq_callbackEv+0x3c>)
    3b78:	4798      	blx	r3
    //cli();
    //EI_TRX_IRQ();
}
    3b7a:	bd38      	pop	{r3, r4, r5, pc}
    3b7c:	00003559 	.word	0x00003559
    3b80:	000038e9 	.word	0x000038e9

00003b84 <_ZN8cMxRadio13trx_bit_writeEhhhh>:

#include <MxRadio.h>

/* === functions ========================================= */
void cMxRadio::trx_bit_write(uint8_t addr, trx_regval_t mask, uint8_t pos, trx_regval_t value)
{
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b86:	b083      	sub	sp, #12
    3b88:	1c05      	adds	r5, r0, #0
    3b8a:	1c16      	adds	r6, r2, #0
    3b8c:	1c1c      	adds	r4, r3, #0
    3b8e:	ab08      	add	r3, sp, #32
    3b90:	781f      	ldrb	r7, [r3, #0]

trx_regval_t tmp;
    tmp = trx_reg_read(addr);
    3b92:	9101      	str	r1, [sp, #4]
    3b94:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x2c>)
    3b96:	4798      	blx	r3
    tmp &= ~mask;
    3b98:	43b0      	bics	r0, r6
    3b9a:	b2c0      	uxtb	r0, r0
    value <<= pos;
    3b9c:	1c3a      	adds	r2, r7, #0
    3b9e:	40a2      	lsls	r2, r4
    value &=mask;
    3ba0:	4032      	ands	r2, r6
    value |= tmp;
    trx_reg_write(addr, value);
    3ba2:	4302      	orrs	r2, r0
    3ba4:	1c28      	adds	r0, r5, #0
    3ba6:	9901      	ldr	r1, [sp, #4]
    3ba8:	4b02      	ldr	r3, [pc, #8]	; (3bb4 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x30>)
    3baa:	4798      	blx	r3
    return;
}
    3bac:	b003      	add	sp, #12
    3bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bb0:	00003559 	.word	0x00003559
    3bb4:	000034f1 	.word	0x000034f1

00003bb8 <_ZN8cMxRadio15trx_frame_writeEhPh>:
#include <MxRadio.h>

/* === functions ========================================= */

void cMxRadio::trx_frame_write(uint8_t length, uint8_t *data)
{
    3bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bba:	b083      	sub	sp, #12
    3bbc:	1c06      	adds	r6, r0, #0
    3bbe:	1c0f      	adds	r7, r1, #0
    3bc0:	1c15      	adds	r5, r2, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3bc2:	23a8      	movs	r3, #168	; 0xa8
    3bc4:	56c3      	ldrsb	r3, [r0, r3]
    3bc6:	3301      	adds	r3, #1
    3bc8:	d104      	bne.n	3bd4 <_ZN8cMxRadio15trx_frame_writeEhPh+0x1c>
    3bca:	4819      	ldr	r0, [pc, #100]	; (3c30 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    3bcc:	4919      	ldr	r1, [pc, #100]	; (3c34 <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    3bce:	2228      	movs	r2, #40	; 0x28
    3bd0:	4b19      	ldr	r3, [pc, #100]	; (3c38 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    3bd2:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3bd4:	1c33      	adds	r3, r6, #0
    3bd6:	33a8      	adds	r3, #168	; 0xa8
    3bd8:	68da      	ldr	r2, [r3, #12]
    3bda:	685b      	ldr	r3, [r3, #4]
    3bdc:	6013      	str	r3, [r2, #0]

    // Select transceiver
    m_cs=0;//SPI_SELN_LOW();

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    3bde:	2314      	movs	r3, #20
    3be0:	469c      	mov	ip, r3
    3be2:	44b4      	add	ip, r6
    3be4:	4663      	mov	r3, ip
    3be6:	9301      	str	r3, [sp, #4]
    3be8:	4660      	mov	r0, ip
    3bea:	2160      	movs	r1, #96	; 0x60
    3bec:	4c13      	ldr	r4, [pc, #76]	; (3c3c <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    3bee:	47a0      	blx	r4
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;
    3bf0:	9801      	ldr	r0, [sp, #4]
    3bf2:	1c39      	adds	r1, r7, #0
    3bf4:	47a0      	blx	r4
    3bf6:	1c2c      	adds	r4, r5, #0
    3bf8:	3f01      	subs	r7, #1
    3bfa:	b2ff      	uxtb	r7, r7
    3bfc:	3701      	adds	r7, #1
    3bfe:	19ed      	adds	r5, r5, r7

    do
    {
        //SPI_WAITFOR();
    	m_spi.write(*data++);//SPI_DATA_REG = *data++;
    3c00:	4f0e      	ldr	r7, [pc, #56]	; (3c3c <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    3c02:	7821      	ldrb	r1, [r4, #0]
    3c04:	9801      	ldr	r0, [sp, #4]
    3c06:	47b8      	blx	r7
    3c08:	3401      	adds	r4, #1

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;

    do
    3c0a:	42ac      	cmp	r4, r5
    3c0c:	d1f9      	bne.n	3c02 <_ZN8cMxRadio15trx_frame_writeEhPh+0x4a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3c0e:	23a8      	movs	r3, #168	; 0xa8
    3c10:	56f3      	ldrsb	r3, [r6, r3]
    3c12:	3301      	adds	r3, #1
    3c14:	d104      	bne.n	3c20 <_ZN8cMxRadio15trx_frame_writeEhPh+0x68>
    3c16:	4806      	ldr	r0, [pc, #24]	; (3c30 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    3c18:	4906      	ldr	r1, [pc, #24]	; (3c34 <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    3c1a:	2228      	movs	r2, #40	; 0x28
    3c1c:	4b06      	ldr	r3, [pc, #24]	; (3c38 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    3c1e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3c20:	1c33      	adds	r3, r6, #0
    3c22:	33a8      	adds	r3, #168	; 0xa8
    3c24:	691a      	ldr	r2, [r3, #16]
    3c26:	685b      	ldr	r3, [r3, #4]
    3c28:	6013      	str	r3, [r2, #0]

    //SPI_WAITFOR(); /* wait here until last byte is out otherwise underrun irq */

    // Deselect Slave
    m_cs=1;//SPI_SELN_HIGH();
}
    3c2a:	b003      	add	sp, #12
    3c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	0000f864 	.word	0x0000f864
    3c34:	0000f87c 	.word	0x0000f87c
    3c38:	000059d9 	.word	0x000059d9
    3c3c:	00005711 	.word	0x00005711

00003c40 <_ZN8cMxRadio14trx_frame_readEPhhS0_>:

uint8_t cMxRadio::trx_frame_read(uint8_t *data, uint8_t datasz, uint8_t *lqi)
{
    3c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c42:	4657      	mov	r7, sl
    3c44:	464e      	mov	r6, r9
    3c46:	b4c0      	push	{r6, r7}
    3c48:	b083      	sub	sp, #12
    3c4a:	1c07      	adds	r7, r0, #0
    3c4c:	9101      	str	r1, [sp, #4]
    3c4e:	1c15      	adds	r5, r2, #0
    3c50:	4699      	mov	r9, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3c52:	23a8      	movs	r3, #168	; 0xa8
    3c54:	56c3      	ldrsb	r3, [r0, r3]
    3c56:	3301      	adds	r3, #1
    3c58:	d104      	bne.n	3c64 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x24>
    3c5a:	4824      	ldr	r0, [pc, #144]	; (3cec <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    3c5c:	4924      	ldr	r1, [pc, #144]	; (3cf0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    3c5e:	2228      	movs	r2, #40	; 0x28
    3c60:	4b24      	ldr	r3, [pc, #144]	; (3cf4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    3c62:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3c64:	1c3b      	adds	r3, r7, #0
    3c66:	33a8      	adds	r3, #168	; 0xa8
    3c68:	68da      	ldr	r2, [r3, #12]
    3c6a:	685b      	ldr	r3, [r3, #4]
    3c6c:	6013      	str	r3, [r2, #0]

    /* Select transceiver */
    m_cs=0;//SPI_SELN_LOW();

    /* start frame read */
    m_spi.write(TRX_CMD_FR);//SPI_DATA_REG = TRX_CMD_FR;
    3c6e:	2314      	movs	r3, #20
    3c70:	469c      	mov	ip, r3
    3c72:	44bc      	add	ip, r7
    3c74:	4663      	mov	r3, ip
    3c76:	4666      	mov	r6, ip
    3c78:	9300      	str	r3, [sp, #0]
    3c7a:	1c18      	adds	r0, r3, #0
    3c7c:	2120      	movs	r1, #32
    3c7e:	4c1e      	ldr	r4, [pc, #120]	; (3cf8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3c80:	47a0      	blx	r4
    //SPI_WAITFOR();

    /* read length */
    length= m_spi.write(0);//SPI_DATA_REG = 0;
    3c82:	1c30      	adds	r0, r6, #0
    3c84:	2100      	movs	r1, #0
    3c86:	47a0      	blx	r4
    3c88:	b2c6      	uxtb	r6, r0
    //SPI_WAITFOR();
    //length = SPI_DATA_REG;

    if (length <= datasz)
    3c8a:	42ae      	cmp	r6, r5
    3c8c:	d818      	bhi.n	3cc0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x80>
    3c8e:	9a01      	ldr	r2, [sp, #4]
    3c90:	1c14      	adds	r4, r2, #0
    3c92:	1e73      	subs	r3, r6, #1
    3c94:	b2db      	uxtb	r3, r3
    3c96:	3301      	adds	r3, #1
    3c98:	18d5      	adds	r5, r2, r3
        i = length;
        do
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
    3c9a:	4b17      	ldr	r3, [pc, #92]	; (3cf8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3c9c:	469a      	mov	sl, r3
    3c9e:	9800      	ldr	r0, [sp, #0]
    3ca0:	2100      	movs	r1, #0
    3ca2:	47d0      	blx	sl
    3ca4:	7020      	strb	r0, [r4, #0]
    3ca6:	3401      	adds	r4, #1
    //length = SPI_DATA_REG;

    if (length <= datasz)
    {
        i = length;
        do
    3ca8:	42ac      	cmp	r4, r5
    3caa:	d1f8      	bne.n	3c9e <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x5e>
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
        }
        while(--i);

        if (lqi!= NULL)
    3cac:	464b      	mov	r3, r9
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d008      	beq.n	3cc4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *lqi = m_spi.write(0);//SPI_DATA_REG;
    3cb2:	9800      	ldr	r0, [sp, #0]
    3cb4:	2100      	movs	r1, #0
    3cb6:	4b10      	ldr	r3, [pc, #64]	; (3cf8 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3cb8:	4798      	blx	r3
    3cba:	464b      	mov	r3, r9
    3cbc:	7018      	strb	r0, [r3, #0]
    3cbe:	e001      	b.n	3cc4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        }
    }
    else
    {
        /* we drop the frame */
        length = 0x80 | length;
    3cc0:	2380      	movs	r3, #128	; 0x80
    3cc2:	431e      	orrs	r6, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3cc4:	23a8      	movs	r3, #168	; 0xa8
    3cc6:	56fb      	ldrsb	r3, [r7, r3]
    3cc8:	3301      	adds	r3, #1
    3cca:	d104      	bne.n	3cd6 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x96>
    3ccc:	4807      	ldr	r0, [pc, #28]	; (3cec <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    3cce:	4908      	ldr	r1, [pc, #32]	; (3cf0 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    3cd0:	2228      	movs	r2, #40	; 0x28
    3cd2:	4b08      	ldr	r3, [pc, #32]	; (3cf4 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    3cd4:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3cd6:	37a8      	adds	r7, #168	; 0xa8
    3cd8:	693b      	ldr	r3, [r7, #16]
    3cda:	687a      	ldr	r2, [r7, #4]
    3cdc:	601a      	str	r2, [r3, #0]
    }
    m_cs=1;//SPI_SELN_HIGH();
    return length;
}
    3cde:	1c30      	adds	r0, r6, #0
    3ce0:	b003      	add	sp, #12
    3ce2:	bc0c      	pop	{r2, r3}
    3ce4:	4691      	mov	r9, r2
    3ce6:	469a      	mov	sl, r3
    3ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	0000f864 	.word	0x0000f864
    3cf0:	0000f87c 	.word	0x0000f87c
    3cf4:	000059d9 	.word	0x000059d9
    3cf8:	00005711 	.word	0x00005711

00003cfc <_ZN7Channel11SetCallbackEP15ChannelCallback>:
	virtual void putc(uint8_t)=0;
	virtual uint8_t getc()=0;
	
	virtual void SetCallback(ChannelCallback* c)
	{
		call = c;
    3cfc:	6041      	str	r1, [r0, #4]
	}
    3cfe:	4770      	bx	lr

00003d00 <_ZN12ChannelRadio4getcEv>:
	vTaskDelay(5/portTICK_RATE_MS);
//	while(transmit){}
}

uint8_t ChannelRadio::getc()
{	
    3d00:	1c02      	adds	r2, r0, #0
	uint8_t c = buffer[buffer_pos++];
    3d02:	20ba      	movs	r0, #186	; 0xba
    3d04:	0080      	lsls	r0, r0, #2
    3d06:	5813      	ldr	r3, [r2, r0]
    3d08:	1c59      	adds	r1, r3, #1
    3d0a:	5011      	str	r1, [r2, r0]
    3d0c:	18d3      	adds	r3, r2, r3
    3d0e:	3838      	subs	r0, #56	; 0x38
    3d10:	4684      	mov	ip, r0
    3d12:	4463      	add	r3, ip
    3d14:	7898      	ldrb	r0, [r3, #2]
	
	if(buffer_pos >= buffer_end)
    3d16:	23b9      	movs	r3, #185	; 0xb9
    3d18:	009b      	lsls	r3, r3, #2
    3d1a:	58d3      	ldr	r3, [r2, r3]
    3d1c:	4299      	cmp	r1, r3
    3d1e:	d303      	bcc.n	3d28 <_ZN12ChannelRadio4getcEv+0x28>
	{
		buffer_pos = buffer_end;
    3d20:	21ba      	movs	r1, #186	; 0xba
    3d22:	0089      	lsls	r1, r1, #2
    3d24:	5053      	str	r3, [r2, r1]
    3d26:	e005      	b.n	3d34 <_ZN12ChannelRadio4getcEv+0x34>
	}
	else if(buffer_pos >= 50)
    3d28:	2931      	cmp	r1, #49	; 0x31
    3d2a:	d903      	bls.n	3d34 <_ZN12ChannelRadio4getcEv+0x34>
	{
		buffer_pos = 0;
    3d2c:	2100      	movs	r1, #0
    3d2e:	23ba      	movs	r3, #186	; 0xba
    3d30:	009b      	lsls	r3, r3, #2
    3d32:	50d1      	str	r1, [r2, r3]
	}
	
	return c;
}
    3d34:	4770      	bx	lr
    3d36:	46c0      	nop			; (mov r8, r8)

00003d38 <_ZN12ChannelRadio10OnTransmitEv>:
		call->OnReceive(this);
	}
}

void ChannelRadio::OnTransmit()
{
    3d38:	b508      	push	{r3, lr}
	if(call)
    3d3a:	6843      	ldr	r3, [r0, #4]
    3d3c:	2b00      	cmp	r3, #0
    3d3e:	d004      	beq.n	3d4a <_ZN12ChannelRadio10OnTransmitEv+0x12>
    3d40:	1c01      	adds	r1, r0, #0
	{
		call->OnTransmit(this);
    3d42:	681a      	ldr	r2, [r3, #0]
    3d44:	68d2      	ldr	r2, [r2, #12]
    3d46:	1c18      	adds	r0, r3, #0
    3d48:	4790      	blx	r2
	}
}
    3d4a:	bd08      	pop	{r3, pc}

00003d4c <_ZN12ChannelRadio7OnErrorEi>:

void ChannelRadio::OnError(int e)
{
    3d4c:	b510      	push	{r4, lr}
	if(call)
    3d4e:	6843      	ldr	r3, [r0, #4]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d005      	beq.n	3d60 <_ZN12ChannelRadio7OnErrorEi+0x14>
    3d54:	1c0a      	adds	r2, r1, #0
    3d56:	1c01      	adds	r1, r0, #0
	{
		call->OnError(this,e);
    3d58:	6818      	ldr	r0, [r3, #0]
    3d5a:	6944      	ldr	r4, [r0, #20]
    3d5c:	1c18      	adds	r0, r3, #0
    3d5e:	47a0      	blx	r4
	}
}
    3d60:	bd10      	pop	{r4, pc}
    3d62:	46c0      	nop			; (mov r8, r8)

00003d64 <_ZN12ChannelRadio9OnSpecialEi>:

void ChannelRadio::OnSpecial(int e)
{
    3d64:	b510      	push	{r4, lr}
	if(call)
    3d66:	6843      	ldr	r3, [r0, #4]
    3d68:	2b00      	cmp	r3, #0
    3d6a:	d005      	beq.n	3d78 <_ZN12ChannelRadio9OnSpecialEi+0x14>
    3d6c:	1c0a      	adds	r2, r1, #0
    3d6e:	1c01      	adds	r1, r0, #0
	{
		call->OnSpecial(this,e);
    3d70:	6818      	ldr	r0, [r3, #0]
    3d72:	6904      	ldr	r4, [r0, #16]
    3d74:	1c18      	adds	r0, r3, #0
    3d76:	47a0      	blx	r4
	}
}
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)

00003d7c <_ZN12ChannelRadioD1Ev>:
{
	radio.attachIrq(&RadioOnEvent);
	radio.attachError(&RadioOnError);
}

ChannelRadio::~ChannelRadio()
    3d7c:	b510      	push	{r4, lr}
    3d7e:	1c04      	adds	r4, r0, #0
    3d80:	4b03      	ldr	r3, [pc, #12]	; (3d90 <_ZN12ChannelRadioD1Ev+0x14>)
    3d82:	3308      	adds	r3, #8
    3d84:	6003      	str	r3, [r0, #0]
    3d86:	3008      	adds	r0, #8
    3d88:	4b02      	ldr	r3, [pc, #8]	; (3d94 <_ZN12ChannelRadioD1Ev+0x18>)
    3d8a:	4798      	blx	r3
{
	
}
    3d8c:	1c20      	adds	r0, r4, #0
    3d8e:	bd10      	pop	{r4, pc}
    3d90:	0000fd68 	.word	0x0000fd68
    3d94:	00002fb9 	.word	0x00002fb9

00003d98 <_ZN12ChannelRadioD0Ev>:
{
	radio.attachIrq(&RadioOnEvent);
	radio.attachError(&RadioOnError);
}

ChannelRadio::~ChannelRadio()
    3d98:	b510      	push	{r4, lr}
    3d9a:	1c04      	adds	r4, r0, #0
{
	
}
    3d9c:	4b03      	ldr	r3, [pc, #12]	; (3dac <_ZN12ChannelRadioD0Ev+0x14>)
    3d9e:	4798      	blx	r3
    3da0:	1c20      	adds	r0, r4, #0
    3da2:	4b03      	ldr	r3, [pc, #12]	; (3db0 <_ZN12ChannelRadioD0Ev+0x18>)
    3da4:	4798      	blx	r3
    3da6:	1c20      	adds	r0, r4, #0
    3da8:	bd10      	pop	{r4, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003d7d 	.word	0x00003d7d
    3db0:	000070cb 	.word	0x000070cb

00003db4 <_ZN12ChannelRadio4putcEh>:

void ChannelRadio::putc(uint8_t c)
{
    3db4:	b538      	push	{r3, r4, r5, lr}
    3db6:	1c0d      	adds	r5, r1, #0
	transmit = true;
    3db8:	2201      	movs	r2, #1
    3dba:	4b08      	ldr	r3, [pc, #32]	; (3ddc <_ZN12ChannelRadio4putcEh+0x28>)
    3dbc:	54c2      	strb	r2, [r0, r3]
	
	radio.beginTransmission();
    3dbe:	3008      	adds	r0, #8
    3dc0:	1c04      	adds	r4, r0, #0
    3dc2:	4b07      	ldr	r3, [pc, #28]	; (3de0 <_ZN12ChannelRadio4putcEh+0x2c>)
    3dc4:	4798      	blx	r3
	radio.write(c);
    3dc6:	1c20      	adds	r0, r4, #0
    3dc8:	1c29      	adds	r1, r5, #0
    3dca:	4b06      	ldr	r3, [pc, #24]	; (3de4 <_ZN12ChannelRadio4putcEh+0x30>)
    3dcc:	4798      	blx	r3
	radio.endTransmission();
    3dce:	1c20      	adds	r0, r4, #0
    3dd0:	4b05      	ldr	r3, [pc, #20]	; (3de8 <_ZN12ChannelRadio4putcEh+0x34>)
    3dd2:	4798      	blx	r3
	
	vTaskDelay(5/portTICK_RATE_MS);
    3dd4:	2005      	movs	r0, #5
    3dd6:	4b05      	ldr	r3, [pc, #20]	; (3dec <_ZN12ChannelRadio4putcEh+0x38>)
    3dd8:	4798      	blx	r3
//	while(transmit){}
}
    3dda:	bd38      	pop	{r3, r4, r5, pc}
    3ddc:	000002b1 	.word	0x000002b1
    3de0:	00003205 	.word	0x00003205
    3de4:	00003329 	.word	0x00003329
    3de8:	0000325d 	.word	0x0000325d
    3dec:	0000281d 	.word	0x0000281d

00003df0 <_ZN12ChannelRadio9OnReceiveEv>:
	
	return c;
}

void ChannelRadio::OnReceive()
{
    3df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3df2:	4647      	mov	r7, r8
    3df4:	b480      	push	{r7}
    3df6:	b082      	sub	sp, #8
    3df8:	1c06      	adds	r6, r0, #0
	while(radio.available())
    3dfa:	2308      	movs	r3, #8
    3dfc:	469c      	mov	ip, r3
    3dfe:	4484      	add	ip, r0
    3e00:	4663      	mov	r3, ip
    3e02:	9301      	str	r3, [sp, #4]
    3e04:	4f14      	ldr	r7, [pc, #80]	; (3e58 <_ZN12ChannelRadio9OnReceiveEv+0x68>)
	{
		buffer[buffer_end++] = radio.read();
    3e06:	4b15      	ldr	r3, [pc, #84]	; (3e5c <_ZN12ChannelRadio9OnReceiveEv+0x6c>)
    3e08:	4698      	mov	r8, r3
	return c;
}

void ChannelRadio::OnReceive()
{
	while(radio.available())
    3e0a:	e011      	b.n	3e30 <_ZN12ChannelRadio9OnReceiveEv+0x40>
	{
		buffer[buffer_end++] = radio.read();
    3e0c:	25b9      	movs	r5, #185	; 0xb9
    3e0e:	00ad      	lsls	r5, r5, #2
    3e10:	5974      	ldr	r4, [r6, r5]
    3e12:	1c63      	adds	r3, r4, #1
    3e14:	5173      	str	r3, [r6, r5]
    3e16:	9801      	ldr	r0, [sp, #4]
    3e18:	47c0      	blx	r8
    3e1a:	1934      	adds	r4, r6, r4
    3e1c:	23ac      	movs	r3, #172	; 0xac
    3e1e:	009b      	lsls	r3, r3, #2
    3e20:	469c      	mov	ip, r3
    3e22:	4464      	add	r4, ip
    3e24:	70a0      	strb	r0, [r4, #2]
		
		if(buffer_end >= 50)
    3e26:	5973      	ldr	r3, [r6, r5]
    3e28:	2b31      	cmp	r3, #49	; 0x31
    3e2a:	d901      	bls.n	3e30 <_ZN12ChannelRadio9OnReceiveEv+0x40>
		{
			buffer_end = 0;
    3e2c:	2200      	movs	r2, #0
    3e2e:	5172      	str	r2, [r6, r5]
	return c;
}

void ChannelRadio::OnReceive()
{
	while(radio.available())
    3e30:	9801      	ldr	r0, [sp, #4]
    3e32:	1c04      	adds	r4, r0, #0
    3e34:	47b8      	blx	r7
    3e36:	2800      	cmp	r0, #0
    3e38:	d1e8      	bne.n	3e0c <_ZN12ChannelRadio9OnReceiveEv+0x1c>
		{
			buffer_end = 0;
		}
	}
	
	radio.flush();
    3e3a:	1c20      	adds	r0, r4, #0
    3e3c:	4b08      	ldr	r3, [pc, #32]	; (3e60 <_ZN12ChannelRadio9OnReceiveEv+0x70>)
    3e3e:	4798      	blx	r3
	
	if(call)
    3e40:	6870      	ldr	r0, [r6, #4]
    3e42:	2800      	cmp	r0, #0
    3e44:	d003      	beq.n	3e4e <_ZN12ChannelRadio9OnReceiveEv+0x5e>
	{
		call->OnReceive(this);
    3e46:	6803      	ldr	r3, [r0, #0]
    3e48:	689b      	ldr	r3, [r3, #8]
    3e4a:	1c31      	adds	r1, r6, #0
    3e4c:	4798      	blx	r3
	}
}
    3e4e:	b002      	add	sp, #8
    3e50:	bc04      	pop	{r2}
    3e52:	4690      	mov	r8, r2
    3e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	000031e5 	.word	0x000031e5
    3e5c:	000031b1 	.word	0x000031b1
    3e60:	000031a1 	.word	0x000031a1

00003e64 <_ZN12ChannelRadio5writeEPhh>:
{
	return transmit;
}

void ChannelRadio::write(uint8_t* buffer, uint8_t size)
{
    3e64:	b570      	push	{r4, r5, r6, lr}
	if(buffer && (size >= 0))
    3e66:	2900      	cmp	r1, #0
    3e68:	d00d      	beq.n	3e86 <_ZN12ChannelRadio5writeEPhh+0x22>
    3e6a:	1c16      	adds	r6, r2, #0
    3e6c:	1c0d      	adds	r5, r1, #0
	{
		radio.beginTransmission();
    3e6e:	3008      	adds	r0, #8
    3e70:	1c04      	adds	r4, r0, #0
    3e72:	4b05      	ldr	r3, [pc, #20]	; (3e88 <_ZN12ChannelRadio5writeEPhh+0x24>)
    3e74:	4798      	blx	r3
		radio.write(buffer, size);
    3e76:	1c20      	adds	r0, r4, #0
    3e78:	1c29      	adds	r1, r5, #0
    3e7a:	1c32      	adds	r2, r6, #0
    3e7c:	4b03      	ldr	r3, [pc, #12]	; (3e8c <_ZN12ChannelRadio5writeEPhh+0x28>)
    3e7e:	4798      	blx	r3
		radio.endTransmission();
    3e80:	1c20      	adds	r0, r4, #0
    3e82:	4b03      	ldr	r3, [pc, #12]	; (3e90 <_ZN12ChannelRadio5writeEPhh+0x2c>)
    3e84:	4798      	blx	r3
	}
    3e86:	bd70      	pop	{r4, r5, r6, pc}
    3e88:	00003205 	.word	0x00003205
    3e8c:	00003415 	.word	0x00003415
    3e90:	0000325d 	.word	0x0000325d

00003e94 <_ZN12ChannelRadio8GetRadioEv>:
	return inst;
}

cMxRadio* ChannelRadio::GetRadio()
{
	return &radio;
    3e94:	3008      	adds	r0, #8
}
    3e96:	4770      	bx	lr

00003e98 <_ZN12ChannelRadioC1Ev>:

ChannelRadio::ChannelRadio()
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	b085      	sub	sp, #20
    3e9c:	1c04      	adds	r4, r0, #0
{
protected:
	ChannelCallback* call;
	
public:
    Channel() : call(0) {}
    3e9e:	2500      	movs	r5, #0
    3ea0:	6045      	str	r5, [r0, #4]
  : radio(PB30,PC19,PC18,PB31,PB15,PA20,PB00), receiving(false), transmit(false), buffer_end(0), buffer_pos(0)
    3ea2:	4b13      	ldr	r3, [pc, #76]	; (3ef0 <_ZN12ChannelRadioC1Ev+0x58>)
    3ea4:	3308      	adds	r3, #8
    3ea6:	6003      	str	r3, [r0, #0]
    3ea8:	1c06      	adds	r6, r0, #0
    3eaa:	3608      	adds	r6, #8
    3eac:	233f      	movs	r3, #63	; 0x3f
    3eae:	9300      	str	r3, [sp, #0]
    3eb0:	3b10      	subs	r3, #16
    3eb2:	9301      	str	r3, [sp, #4]
    3eb4:	3b1b      	subs	r3, #27
    3eb6:	9302      	str	r3, [sp, #8]
    3eb8:	330c      	adds	r3, #12
    3eba:	9303      	str	r3, [sp, #12]
    3ebc:	1c30      	adds	r0, r6, #0
    3ebe:	213e      	movs	r1, #62	; 0x3e
    3ec0:	2253      	movs	r2, #83	; 0x53
    3ec2:	3332      	adds	r3, #50	; 0x32
    3ec4:	4f0b      	ldr	r7, [pc, #44]	; (3ef4 <_ZN12ChannelRadioC1Ev+0x5c>)
    3ec6:	47b8      	blx	r7
    3ec8:	23ac      	movs	r3, #172	; 0xac
    3eca:	009b      	lsls	r3, r3, #2
    3ecc:	54e5      	strb	r5, [r4, r3]
    3ece:	4b0a      	ldr	r3, [pc, #40]	; (3ef8 <_ZN12ChannelRadioC1Ev+0x60>)
    3ed0:	54e5      	strb	r5, [r4, r3]
    3ed2:	3333      	adds	r3, #51	; 0x33
    3ed4:	50e5      	str	r5, [r4, r3]
    3ed6:	3304      	adds	r3, #4
    3ed8:	50e5      	str	r5, [r4, r3]
{
	radio.attachIrq(&RadioOnEvent);
    3eda:	1c30      	adds	r0, r6, #0
    3edc:	4907      	ldr	r1, [pc, #28]	; (3efc <_ZN12ChannelRadioC1Ev+0x64>)
    3ede:	4b08      	ldr	r3, [pc, #32]	; (3f00 <_ZN12ChannelRadioC1Ev+0x68>)
    3ee0:	4798      	blx	r3
	radio.attachError(&RadioOnError);
    3ee2:	1c30      	adds	r0, r6, #0
    3ee4:	4907      	ldr	r1, [pc, #28]	; (3f04 <_ZN12ChannelRadioC1Ev+0x6c>)
    3ee6:	4b08      	ldr	r3, [pc, #32]	; (3f08 <_ZN12ChannelRadioC1Ev+0x70>)
    3ee8:	4798      	blx	r3
}
    3eea:	1c20      	adds	r0, r4, #0
    3eec:	b005      	add	sp, #20
    3eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef0:	0000fd68 	.word	0x0000fd68
    3ef4:	00002fbd 	.word	0x00002fbd
    3ef8:	000002b1 	.word	0x000002b1
    3efc:	00003f55 	.word	0x00003f55
    3f00:	00003199 	.word	0x00003199
    3f04:	00003f3d 	.word	0x00003f3d
    3f08:	00003191 	.word	0x00003191

00003f0c <_ZN12ChannelRadio10GetChannelEv>:
}

ChannelRadio* ChannelRadio::inst = 0;

ChannelRadio* ChannelRadio::GetChannel()
{
    3f0c:	b510      	push	{r4, lr}
	if(inst==0)
    3f0e:	4b08      	ldr	r3, [pc, #32]	; (3f30 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    3f10:	681b      	ldr	r3, [r3, #0]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d108      	bne.n	3f28 <_ZN12ChannelRadio10GetChannelEv+0x1c>
	{
		inst = new ChannelRadio;
    3f16:	20bb      	movs	r0, #187	; 0xbb
    3f18:	0080      	lsls	r0, r0, #2
    3f1a:	4b06      	ldr	r3, [pc, #24]	; (3f34 <_ZN12ChannelRadio10GetChannelEv+0x28>)
    3f1c:	4798      	blx	r3
    3f1e:	1c04      	adds	r4, r0, #0
    3f20:	4b05      	ldr	r3, [pc, #20]	; (3f38 <_ZN12ChannelRadio10GetChannelEv+0x2c>)
    3f22:	4798      	blx	r3
    3f24:	4b02      	ldr	r3, [pc, #8]	; (3f30 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    3f26:	601c      	str	r4, [r3, #0]
	}
	
	return inst;
    3f28:	4b01      	ldr	r3, [pc, #4]	; (3f30 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    3f2a:	6818      	ldr	r0, [r3, #0]
}
    3f2c:	bd10      	pop	{r4, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	200042f8 	.word	0x200042f8
    3f34:	000070d3 	.word	0x000070d3
    3f38:	00003e99 	.word	0x00003e99

00003f3c <_Z12RadioOnError13radio_error_t>:
		}
	}
}

void RadioOnError(radio_error_t e)
{
    3f3c:	b510      	push	{r4, lr}
    3f3e:	1c04      	adds	r4, r0, #0
	ChannelRadio::GetChannel()->OnError(e);
    3f40:	4b03      	ldr	r3, [pc, #12]	; (3f50 <_Z12RadioOnError13radio_error_t+0x14>)
    3f42:	4798      	blx	r3
    3f44:	6803      	ldr	r3, [r0, #0]
    3f46:	6a1b      	ldr	r3, [r3, #32]
    3f48:	1c21      	adds	r1, r4, #0
    3f4a:	4798      	blx	r3
}
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	00003f0d 	.word	0x00003f0d

00003f54 <_Z12RadioOnEventh>:

//extern Channel* pc;
//extern void PrintBuffer(Channel* c, char* buffer, size_t length);

void RadioOnEvent(uint8_t e)
{
    3f54:	b538      	push	{r3, r4, r5, lr}
    3f56:	1c04      	adds	r4, r0, #0
	ChannelRadio* r = ChannelRadio::GetChannel();
    3f58:	4b11      	ldr	r3, [pc, #68]	; (3fa0 <_Z12RadioOnEventh+0x4c>)
    3f5a:	4798      	blx	r3
    3f5c:	1c05      	adds	r5, r0, #0
//	memset(buffer,0,20);
//	sprintf(buffer,"RADIO EVENT: %d,%d\r\n",int(e),r->IsReceive());
//	PrintBuffer(pc,buffer,18);
//	wait_ms(1);
	
	if((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START)
    3f5e:	0763      	lsls	r3, r4, #29
    3f60:	d506      	bpl.n	3f70 <_Z12RadioOnEventh+0x1c>
	}
}

void ChannelRadio::SetReceive(bool set)
{
	receiving = set;
    3f62:	2201      	movs	r2, #1
    3f64:	23ac      	movs	r3, #172	; 0xac
    3f66:	009b      	lsls	r3, r3, #2
    3f68:	54c2      	strb	r2, [r0, r3]
	
	if((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START)
	{
		r->SetReceive(true);
	}
	if((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)
    3f6a:	0723      	lsls	r3, r4, #28
    3f6c:	d407      	bmi.n	3f7e <_Z12RadioOnEventh+0x2a>
    3f6e:	e015      	b.n	3f9c <_Z12RadioOnEventh+0x48>
    3f70:	0723      	lsls	r3, r4, #28
    3f72:	d513      	bpl.n	3f9c <_Z12RadioOnEventh+0x48>
	receiving = set;
}

bool ChannelRadio::IsReceive()
{
	return receiving;
    3f74:	23ac      	movs	r3, #172	; 0xac
    3f76:	009b      	lsls	r3, r3, #2
		r->SetReceive(true);
	}
	if((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)
	{
		// Received data for correct address
		if(r->IsReceive()) //&& ((e & TRX_IRQ_AMI) == TRX_IRQ_AMI))
    3f78:	5cc3      	ldrb	r3, [r0, r3]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d008      	beq.n	3f90 <_Z12RadioOnEventh+0x3c>
		{
			r->OnReceive();
    3f7e:	682b      	ldr	r3, [r5, #0]
    3f80:	699b      	ldr	r3, [r3, #24]
    3f82:	1c28      	adds	r0, r5, #0
    3f84:	4798      	blx	r3
	}
}

void ChannelRadio::SetReceive(bool set)
{
	receiving = set;
    3f86:	2200      	movs	r2, #0
    3f88:	23ac      	movs	r3, #172	; 0xac
    3f8a:	009b      	lsls	r3, r3, #2
    3f8c:	54ea      	strb	r2, [r5, r3]
    3f8e:	e005      	b.n	3f9c <_Z12RadioOnEventh+0x48>
			r->SetReceive(false);
		}
		// Transmitted data
		else if(!r->IsReceive())
		{
			r->OnTransmit();
    3f90:	6803      	ldr	r3, [r0, #0]
    3f92:	69db      	ldr	r3, [r3, #28]
    3f94:	4798      	blx	r3
	return receiving;
}

void ChannelRadio::SetTransmit(bool set)
{
	transmit = set;
    3f96:	2200      	movs	r2, #0
    3f98:	4b02      	ldr	r3, [pc, #8]	; (3fa4 <_Z12RadioOnEventh+0x50>)
    3f9a:	54ea      	strb	r2, [r5, r3]
		{
			r->OnTransmit();
			r->SetTransmit(false);
		}
	}
}
    3f9c:	bd38      	pop	{r3, r4, r5, pc}
    3f9e:	46c0      	nop			; (mov r8, r8)
    3fa0:	00003f0d 	.word	0x00003f0d
    3fa4:	000002b1 	.word	0x000002b1

00003fa8 <_ZN13ChannelSerial9OnReceiveEv>:
	s.attach(this,&ChannelSerial::OnReceive,Serial::RxIrq);
//	s.attach(this,&ChannelSerial::OnTransmit,Serial::TxIrq);
}

void ChannelSerial::OnReceive()
{
    3fa8:	b508      	push	{r3, lr}
	if(call)
    3faa:	6843      	ldr	r3, [r0, #4]
    3fac:	2b00      	cmp	r3, #0
    3fae:	d004      	beq.n	3fba <_ZN13ChannelSerial9OnReceiveEv+0x12>
    3fb0:	1c01      	adds	r1, r0, #0
	{
		call->OnReceive(this);
    3fb2:	681a      	ldr	r2, [r3, #0]
    3fb4:	6892      	ldr	r2, [r2, #8]
    3fb6:	1c18      	adds	r0, r3, #0
    3fb8:	4790      	blx	r2
	}
}
    3fba:	bd08      	pop	{r3, pc}

00003fbc <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
    3fbc:	b510      	push	{r4, lr}
        T* o = static_cast<T*>(object);
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
        return (o->**m)();
    3fbe:	684b      	ldr	r3, [r1, #4]
    3fc0:	07da      	lsls	r2, r3, #31
    3fc2:	d401      	bmi.n	3fc8 <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj+0xc>
    3fc4:	680a      	ldr	r2, [r1, #0]
    3fc6:	e003      	b.n	3fd0 <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj+0x14>
    3fc8:	105a      	asrs	r2, r3, #1
    3fca:	5884      	ldr	r4, [r0, r2]
    3fcc:	680a      	ldr	r2, [r1, #0]
    3fce:	58a2      	ldr	r2, [r4, r2]
    3fd0:	105b      	asrs	r3, r3, #1
    3fd2:	18c0      	adds	r0, r0, r3
    3fd4:	4790      	blx	r2
    }
    3fd6:	bd10      	pop	{r4, pc}

00003fd8 <_ZN13ChannelSerialD1Ev>:
  : s(tx, rx), n_rx_int(0)
{
	
}

ChannelSerial::~ChannelSerial()
    3fd8:	b510      	push	{r4, lr}
    3fda:	1c04      	adds	r4, r0, #0
    3fdc:	4b08      	ldr	r3, [pc, #32]	; (4000 <_ZN13ChannelSerialD1Ev+0x28>)
    3fde:	3308      	adds	r3, #8
    3fe0:	6003      	str	r3, [r0, #0]
    3fe2:	4b08      	ldr	r3, [pc, #32]	; (4004 <_ZN13ChannelSerialD1Ev+0x2c>)
    3fe4:	6083      	str	r3, [r0, #8]
    3fe6:	1c19      	adds	r1, r3, #0
    3fe8:	3118      	adds	r1, #24
    3fea:	22e4      	movs	r2, #228	; 0xe4
    3fec:	5081      	str	r1, [r0, r2]
    3fee:	334c      	adds	r3, #76	; 0x4c
    3ff0:	3204      	adds	r2, #4
    3ff2:	5083      	str	r3, [r0, r2]
    3ff4:	30e4      	adds	r0, #228	; 0xe4
    3ff6:	4b04      	ldr	r3, [pc, #16]	; (4008 <_ZN13ChannelSerialD1Ev+0x30>)
    3ff8:	4798      	blx	r3
{
	
}
    3ffa:	1c20      	adds	r0, r4, #0
    3ffc:	bd10      	pop	{r4, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	0000fd98 	.word	0x0000fd98
    4004:	00010148 	.word	0x00010148
    4008:	00005961 	.word	0x00005961

0000400c <_ZN13ChannelSerialD0Ev>:
  : s(tx, rx), n_rx_int(0)
{
	
}

ChannelSerial::~ChannelSerial()
    400c:	b510      	push	{r4, lr}
    400e:	1c04      	adds	r4, r0, #0
{
	
}
    4010:	4b03      	ldr	r3, [pc, #12]	; (4020 <_ZN13ChannelSerialD0Ev+0x14>)
    4012:	4798      	blx	r3
    4014:	1c20      	adds	r0, r4, #0
    4016:	4b03      	ldr	r3, [pc, #12]	; (4024 <_ZN13ChannelSerialD0Ev+0x18>)
    4018:	4798      	blx	r3
    401a:	1c20      	adds	r0, r4, #0
    401c:	bd10      	pop	{r4, pc}
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	00003fd9 	.word	0x00003fd9
    4024:	000070cb 	.word	0x000070cb

00004028 <_ZN13ChannelSerial4putcEh>:

extern Channel* pc;
extern void PrintBuffer(Channel* c, char* buffer, size_t length);

void ChannelSerial::putc(uint8_t c)
{
    4028:	b508      	push	{r3, lr}
		memset(buf,0,14);
		sprintf(buf,"Num Int: %d\r\n",n_rx_int);
		PrintBuffer(pc,buf,14);
		n_rx_int=0;
	}*/
	s.putc(c);
    402a:	30e4      	adds	r0, #228	; 0xe4
    402c:	4b01      	ldr	r3, [pc, #4]	; (4034 <_ZN13ChannelSerial4putcEh+0xc>)
    402e:	4798      	blx	r3
}
    4030:	bd08      	pop	{r3, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	00005985 	.word	0x00005985

00004038 <_ZN13ChannelSerial4getcEv>:

uint8_t ChannelSerial::getc()
{
    4038:	b508      	push	{r3, lr}
	return s.getc();
    403a:	30e4      	adds	r0, #228	; 0xe4
    403c:	4b01      	ldr	r3, [pc, #4]	; (4044 <_ZN13ChannelSerial4getcEv+0xc>)
    403e:	4798      	blx	r3
    4040:	b2c0      	uxtb	r0, r0
}
    4042:	bd08      	pop	{r3, pc}
    4044:	0000599d 	.word	0x0000599d

00004048 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback>:

void ChannelSerial::SetCallback(ChannelCallback* c)
{
    4048:	b508      	push	{r3, lr}
	virtual void putc(uint8_t)=0;
	virtual uint8_t getc()=0;
	
	virtual void SetCallback(ChannelCallback* c)
	{
		call = c;
    404a:	6041      	str	r1, [r0, #4]
     *  @param mptr pointer to the member function to be called
     *  @param type Which serial interrupt to attach the member function to (Seriall::RxIrq for receive, TxIrq for transmit buffer empty)
     */
    template<typename T>
    void attach(T* tptr, void (T::*mptr)(void), IrqType type=RxIrq) {
        if((mptr != NULL) && (tptr != NULL)) {
    404c:	2800      	cmp	r0, #0
    404e:	d010      	beq.n	4072 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x2a>
     *  @param object The object pointer to invoke the member function on (i.e. the this pointer)
     *  @param function The address of the void member function to attach
     */
    template<typename T>
    void attach(T *object, R (T::*member)(void)) {
        _p.object = static_cast<void*>(object);
    4050:	23b0      	movs	r3, #176	; 0xb0
    4052:	50c0      	str	r0, [r0, r3]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
    4054:	4a0a      	ldr	r2, [pc, #40]	; (4080 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x38>)
    4056:	3304      	adds	r3, #4
    4058:	50c2      	str	r2, [r0, r3]
    405a:	2200      	movs	r2, #0
    405c:	3304      	adds	r3, #4
    405e:	50c2      	str	r2, [r0, r3]
        _membercaller = &FunctionPointerArg1::membercaller<T>;
    4060:	4a08      	ldr	r2, [pc, #32]	; (4084 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x3c>)
    4062:	330c      	adds	r3, #12
    4064:	50c2      	str	r2, [r0, r3]
            _irq[type].attach(tptr, mptr);
            serial_irq_set(&_serial, (SerialIrq)type, 1);
    4066:	3068      	adds	r0, #104	; 0x68
    4068:	2100      	movs	r1, #0
    406a:	2201      	movs	r2, #1
    406c:	4b06      	ldr	r3, [pc, #24]	; (4088 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x40>)
    406e:	4798      	blx	r3
    4070:	e004      	b.n	407c <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x34>
        } else {
            serial_irq_set(&_serial, (SerialIrq)type, 0);
    4072:	2068      	movs	r0, #104	; 0x68
    4074:	2100      	movs	r1, #0
    4076:	2200      	movs	r2, #0
    4078:	4b03      	ldr	r3, [pc, #12]	; (4088 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x40>)
    407a:	4798      	blx	r3
	Channel::SetCallback(c);
	
	s.attach(this,&ChannelSerial::OnReceive,Serial::RxIrq);
//	s.attach(this,&ChannelSerial::OnTransmit,Serial::TxIrq);
}
    407c:	bd08      	pop	{r3, pc}
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	00003fa9 	.word	0x00003fa9
    4084:	00003fbd 	.word	0x00003fbd
    4088:	00005375 	.word	0x00005375

0000408c <_ZN13ChannelSerialC1E7PinNameS0_>:
 * Created: 04/07/2016 13:27:59
 *  Author: Silve
 */ 
#include "channelserial.h"

ChannelSerial::ChannelSerial(PinName tx, PinName rx)
    408c:	b570      	push	{r4, r5, r6, lr}
    408e:	1c04      	adds	r4, r0, #0
{
protected:
	ChannelCallback* call;
	
public:
    Channel() : call(0) {}
    4090:	2500      	movs	r5, #0
    4092:	6045      	str	r5, [r0, #4]
  : s(tx, rx), n_rx_int(0)
    4094:	4b05      	ldr	r3, [pc, #20]	; (40ac <_ZN13ChannelSerialC1E7PinNameS0_+0x20>)
    4096:	3308      	adds	r3, #8
    4098:	6003      	str	r3, [r0, #0]
    409a:	3008      	adds	r0, #8
    409c:	2300      	movs	r3, #0
    409e:	4e04      	ldr	r6, [pc, #16]	; (40b0 <_ZN13ChannelSerialC1E7PinNameS0_+0x24>)
    40a0:	47b0      	blx	r6
    40a2:	23fc      	movs	r3, #252	; 0xfc
    40a4:	50e5      	str	r5, [r4, r3]
{
	
}
    40a6:	1c20      	adds	r0, r4, #0
    40a8:	bd70      	pop	{r4, r5, r6, pc}
    40aa:	46c0      	nop			; (mov r8, r8)
    40ac:	0000fd98 	.word	0x0000fd98
    40b0:	00005755 	.word	0x00005755

000040b4 <_ZN15ChannelCallback10OnTransmitEP7Channel>:
	virtual ~ChannelCallback(){}
	
	// When data is received
	virtual void OnReceive(Channel* c){}
	// When data is sent
	virtual void OnTransmit(Channel* c){}
    40b4:	4770      	bx	lr
    40b6:	46c0      	nop			; (mov r8, r8)

000040b8 <_ZN15ChannelCallback9OnSpecialEP7Channeli>:
	// When a special event for channel occurs
	virtual void OnSpecial(Channel* c, int e){}
    40b8:	4770      	bx	lr
    40ba:	46c0      	nop			; (mov r8, r8)

000040bc <_ZN15ChannelCallback7OnErrorEP7Channeli>:
	// When an error occurs
	virtual void OnError(Channel* c, int e){}
    40bc:	4770      	bx	lr
    40be:	46c0      	nop			; (mov r8, r8)

000040c0 <_ZN5RelayD1Ev>:
}

Relay::~Relay()
{
	
}
    40c0:	4770      	bx	lr
    40c2:	46c0      	nop			; (mov r8, r8)

000040c4 <_ZN5Relay9OnReceiveEP7Channel>:
	
void Relay::OnReceive(Channel* c)
{
    40c4:	b538      	push	{r3, r4, r5, lr}
	if(output)
    40c6:	6844      	ldr	r4, [r0, #4]
    40c8:	2c00      	cmp	r4, #0
    40ca:	d008      	beq.n	40de <_ZN5Relay9OnReceiveEP7Channel+0x1a>
    40cc:	1c08      	adds	r0, r1, #0
	{
		output->putc(c->getc());
    40ce:	6823      	ldr	r3, [r4, #0]
    40d0:	689d      	ldr	r5, [r3, #8]
    40d2:	680b      	ldr	r3, [r1, #0]
    40d4:	68db      	ldr	r3, [r3, #12]
    40d6:	4798      	blx	r3
    40d8:	1c01      	adds	r1, r0, #0
    40da:	1c20      	adds	r0, r4, #0
    40dc:	47a8      	blx	r5
	}
}
    40de:	bd38      	pop	{r3, r4, r5, pc}

000040e0 <_ZN13RelayBuffered9OnReceiveEP7Channel>:
{
		
}
	
void RelayBuffered::OnReceive(Channel* c)
{
    40e0:	b510      	push	{r4, lr}
    40e2:	1c03      	adds	r3, r0, #0
	if(c)
    40e4:	2900      	cmp	r1, #0
    40e6:	d01c      	beq.n	4122 <_ZN13RelayBuffered9OnReceiveEP7Channel+0x42>
    40e8:	1c08      	adds	r0, r1, #0
    40ea:	1c1c      	adds	r4, r3, #0
	{
		uint8_t ch = c->getc();
    40ec:	680b      	ldr	r3, [r1, #0]
    40ee:	68db      	ldr	r3, [r3, #12]
    40f0:	4798      	blx	r3
			
		buffer[buffer_end++] = ch;
    40f2:	219a      	movs	r1, #154	; 0x9a
    40f4:	0049      	lsls	r1, r1, #1
    40f6:	5863      	ldr	r3, [r4, r1]
    40f8:	1c5a      	adds	r2, r3, #1
    40fa:	5062      	str	r2, [r4, r1]
    40fc:	18e3      	adds	r3, r4, r3
    40fe:	7218      	strb	r0, [r3, #8]
			
		if(ch == endchar)
    4100:	233e      	movs	r3, #62	; 0x3e
    4102:	33ff      	adds	r3, #255	; 0xff
    4104:	5ce3      	ldrb	r3, [r4, r3]
    4106:	4283      	cmp	r3, r0
    4108:	d104      	bne.n	4114 <_ZN13RelayBuffered9OnReceiveEP7Channel+0x34>
		{
			newdata = true;
    410a:	3934      	subs	r1, #52	; 0x34
    410c:	39ff      	subs	r1, #255	; 0xff
    410e:	239e      	movs	r3, #158	; 0x9e
    4110:	005b      	lsls	r3, r3, #1
    4112:	54e1      	strb	r1, [r4, r3]
		}
			
		if(buffer_end >= RELAY_BUFFER_SIZE)
    4114:	232c      	movs	r3, #44	; 0x2c
    4116:	33ff      	adds	r3, #255	; 0xff
    4118:	429a      	cmp	r2, r3
    411a:	d902      	bls.n	4122 <_ZN13RelayBuffered9OnReceiveEP7Channel+0x42>
		{
			buffer_end = 0;
    411c:	2200      	movs	r2, #0
    411e:	3309      	adds	r3, #9
    4120:	50e2      	str	r2, [r4, r3]
		}
	}
}
    4122:	bd10      	pop	{r4, pc}

00004124 <_ZN13RelayBuffered8PushDataEv>:
	
void RelayBuffered::PushData()
{
    4124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(output)
    4126:	6843      	ldr	r3, [r0, #4]
    4128:	2b00      	cmp	r3, #0
    412a:	d024      	beq.n	4176 <_ZN13RelayBuffered8PushDataEv+0x52>
	{
		while(newdata)
    412c:	239e      	movs	r3, #158	; 0x9e
    412e:	005b      	lsls	r3, r3, #1
    4130:	5cc3      	ldrb	r3, [r0, r3]
    4132:	2b00      	cmp	r3, #0
    4134:	d01f      	beq.n	4176 <_ZN13RelayBuffered8PushDataEv+0x52>
    4136:	1c04      	adds	r4, r0, #0
		{
			uint8_t ch = buffer[buffer_pos++];
    4138:	259c      	movs	r5, #156	; 0x9c
    413a:	006d      	lsls	r5, r5, #1
				
			if(buffer_pos >= RELAY_BUFFER_SIZE)
    413c:	262c      	movs	r6, #44	; 0x2c
    413e:	36ff      	adds	r6, #255	; 0xff
			{
				buffer_pos = 0;
    4140:	2700      	movs	r7, #0
{
	if(output)
	{
		while(newdata)
		{
			uint8_t ch = buffer[buffer_pos++];
    4142:	5963      	ldr	r3, [r4, r5]
    4144:	1c5a      	adds	r2, r3, #1
    4146:	5162      	str	r2, [r4, r5]
    4148:	18e3      	adds	r3, r4, r3
    414a:	7a19      	ldrb	r1, [r3, #8]
				
			if(buffer_pos >= RELAY_BUFFER_SIZE)
    414c:	42b2      	cmp	r2, r6
    414e:	d900      	bls.n	4152 <_ZN13RelayBuffered8PushDataEv+0x2e>
			{
				buffer_pos = 0;
    4150:	5167      	str	r7, [r4, r5]
			}
				
			if(buffer_pos == buffer_end)
    4152:	239a      	movs	r3, #154	; 0x9a
    4154:	005b      	lsls	r3, r3, #1
    4156:	58e3      	ldr	r3, [r4, r3]
    4158:	5962      	ldr	r2, [r4, r5]
    415a:	429a      	cmp	r2, r3
    415c:	d102      	bne.n	4164 <_ZN13RelayBuffered8PushDataEv+0x40>
			{
				newdata = false;
    415e:	239e      	movs	r3, #158	; 0x9e
    4160:	005b      	lsls	r3, r3, #1
    4162:	54e7      	strb	r7, [r4, r3]
			}
			
			output->putc(ch);
    4164:	6860      	ldr	r0, [r4, #4]
    4166:	6803      	ldr	r3, [r0, #0]
    4168:	689b      	ldr	r3, [r3, #8]
    416a:	4798      	blx	r3
	
void RelayBuffered::PushData()
{
	if(output)
	{
		while(newdata)
    416c:	239e      	movs	r3, #158	; 0x9e
    416e:	005b      	lsls	r3, r3, #1
    4170:	5ce3      	ldrb	r3, [r4, r3]
    4172:	2b00      	cmp	r3, #0
    4174:	d1e5      	bne.n	4142 <_ZN13RelayBuffered8PushDataEv+0x1e>
			}
			
			output->putc(ch);
		}
	}
}
    4176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004178 <_ZN13RelayBuffered10HasNewDataEv>:
	
bool RelayBuffered::HasNewData()
{
	return newdata;
    4178:	239e      	movs	r3, #158	; 0x9e
    417a:	005b      	lsls	r3, r3, #1
    417c:	5cc0      	ldrb	r0, [r0, r3]
}
    417e:	4770      	bx	lr

00004180 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel>:
{
		
}

void RelayBufferedTaskCLP::OnReceive(Channel* c)
{
    4180:	b570      	push	{r4, r5, r6, lr}
    4182:	b0cc      	sub	sp, #304	; 0x130
    4184:	1c03      	adds	r3, r0, #0
	if(c)
    4186:	2900      	cmp	r1, #0
    4188:	d064      	beq.n	4254 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd4>
    418a:	1c08      	adds	r0, r1, #0
    418c:	1c1c      	adds	r4, r3, #0
	{
		uint8_t ch = c->getc();
    418e:	680b      	ldr	r3, [r1, #0]
    4190:	68db      	ldr	r3, [r3, #12]
    4192:	4798      	blx	r3
    4194:	1c05      	adds	r5, r0, #0
    4196:	1e06      	subs	r6, r0, #0
			
		if(ch == CLP_ESCAPE_STX)
    4198:	2e02      	cmp	r6, #2
    419a:	d10f      	bne.n	41bc <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0x3c>
		{
		  
		  buffer_end = 0;
    419c:	2300      	movs	r3, #0
    419e:	229a      	movs	r2, #154	; 0x9a
    41a0:	0052      	lsls	r2, r2, #1
    41a2:	50a3      	str	r3, [r4, r2]
		  buffer_pos = 0;
    41a4:	3204      	adds	r2, #4
    41a6:	50a3      	str	r3, [r4, r2]
		  Clock clk;
		  readClock(&clk);
    41a8:	a801      	add	r0, sp, #4
    41aa:	4b2b      	ldr	r3, [pc, #172]	; (4258 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd8>)
    41ac:	4798      	blx	r3
		  timeProt.saveTime[0].second=clk.second;
    41ae:	9a01      	ldr	r2, [sp, #4]
    41b0:	4b2a      	ldr	r3, [pc, #168]	; (425c <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xdc>)
    41b2:	601a      	str	r2, [r3, #0]
		  timeProt.saveTime[0].halfmillis=clk.halfmillis;
    41b4:	9a02      	ldr	r2, [sp, #8]
    41b6:	605a      	str	r2, [r3, #4]
		  timeProt.saveTime[0].sign=true;
    41b8:	2201      	movs	r2, #1
    41ba:	721a      	strb	r2, [r3, #8]
		}
			
		buffer[buffer_end++] = ch;
    41bc:	229a      	movs	r2, #154	; 0x9a
    41be:	0052      	lsls	r2, r2, #1
    41c0:	58a3      	ldr	r3, [r4, r2]
    41c2:	1c59      	adds	r1, r3, #1
    41c4:	50a1      	str	r1, [r4, r2]
    41c6:	18e3      	adds	r3, r4, r3
    41c8:	721d      	strb	r5, [r3, #8]
		
		if(ch == endchar)
    41ca:	233e      	movs	r3, #62	; 0x3e
    41cc:	33ff      	adds	r3, #255	; 0xff
    41ce:	5ce3      	ldrb	r3, [r4, r3]
    41d0:	42b3      	cmp	r3, r6
    41d2:	d135      	bne.n	4240 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
		{
			uint8_t packet[CLP_UTILITY_MAX_PACKET_SIZE];
			size_t size = CLP_ParsePacketEscape((uint8_t*)buffer, packet);
    41d4:	1c20      	adds	r0, r4, #0
    41d6:	3008      	adds	r0, #8
    41d8:	a901      	add	r1, sp, #4
    41da:	4b21      	ldr	r3, [pc, #132]	; (4260 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe0>)
    41dc:	4798      	blx	r3
    41de:	1c06      	adds	r6, r0, #0
			//hmi.printf("ISR rece");
			if(CLP_IsPacketType(packet, CLP_EXTENSION_COMMAND_TIME_SYNC))
    41e0:	a801      	add	r0, sp, #4
    41e2:	2154      	movs	r1, #84	; 0x54
    41e4:	4b1f      	ldr	r3, [pc, #124]	; (4264 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe4>)
    41e6:	4798      	blx	r3
    41e8:	2800      	cmp	r0, #0
    41ea:	d018      	beq.n	421e <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0x9e>
			{
				//hmi.printf("T");
				newdata = false;
    41ec:	2200      	movs	r2, #0
    41ee:	239e      	movs	r3, #158	; 0x9e
    41f0:	005b      	lsls	r3, r3, #1
    41f2:	54e2      	strb	r2, [r4, r3]
				memcpy(timeProt.receive,packet,RELAY_BUFFER_SIZE);
    41f4:	4d19      	ldr	r5, [pc, #100]	; (425c <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xdc>)
    41f6:	1c28      	adds	r0, r5, #0
    41f8:	30dc      	adds	r0, #220	; 0xdc
    41fa:	a901      	add	r1, sp, #4
    41fc:	322d      	adds	r2, #45	; 0x2d
    41fe:	32ff      	adds	r2, #255	; 0xff
    4200:	4b19      	ldr	r3, [pc, #100]	; (4268 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe8>)
    4202:	4798      	blx	r3
				timeProt.length = size;
    4204:	233c      	movs	r3, #60	; 0x3c
    4206:	54ee      	strb	r6, [r5, r3]
				if(synchroTimeSync!=NULL)
    4208:	3309      	adds	r3, #9
    420a:	33ff      	adds	r3, #255	; 0xff
    420c:	58e0      	ldr	r0, [r4, r3]
    420e:	2800      	cmp	r0, #0
    4210:	d016      	beq.n	4240 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				{
				  xSemaphoreGiveFromISR(synchroTimeSync,NULL);
    4212:	2100      	movs	r1, #0
    4214:	2200      	movs	r2, #0
    4216:	2300      	movs	r3, #0
    4218:	4d14      	ldr	r5, [pc, #80]	; (426c <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xec>)
    421a:	47a8      	blx	r5
    421c:	e010      	b.n	4240 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				}
			}
			else
			{
				hmi.printf("R");
    421e:	4814      	ldr	r0, [pc, #80]	; (4270 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf0>)
    4220:	4914      	ldr	r1, [pc, #80]	; (4274 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf4>)
    4222:	4b15      	ldr	r3, [pc, #84]	; (4278 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf8>)
    4224:	4798      	blx	r3
				newdata = true;
    4226:	2201      	movs	r2, #1
    4228:	239e      	movs	r3, #158	; 0x9e
    422a:	005b      	lsls	r3, r3, #1
    422c:	54e2      	strb	r2, [r4, r3]
				if(synchroRelay!=NULL)
    422e:	3304      	adds	r3, #4
    4230:	58e0      	ldr	r0, [r4, r3]
    4232:	2800      	cmp	r0, #0
    4234:	d004      	beq.n	4240 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				{
					xSemaphoreGiveFromISR(synchroRelay,NULL);
    4236:	2100      	movs	r1, #0
    4238:	2200      	movs	r2, #0
    423a:	2300      	movs	r3, #0
    423c:	4d0b      	ldr	r5, [pc, #44]	; (426c <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xec>)
    423e:	47a8      	blx	r5
				}
			}
		}
			
		if(buffer_end >= RELAY_BUFFER_SIZE)
    4240:	239a      	movs	r3, #154	; 0x9a
    4242:	005b      	lsls	r3, r3, #1
    4244:	58e2      	ldr	r2, [r4, r3]
    4246:	232c      	movs	r3, #44	; 0x2c
    4248:	33ff      	adds	r3, #255	; 0xff
    424a:	429a      	cmp	r2, r3
    424c:	d902      	bls.n	4254 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd4>
		{
			buffer_end = 0;
    424e:	2200      	movs	r2, #0
    4250:	3309      	adds	r3, #9
    4252:	50e2      	str	r2, [r4, r3]
		}
	}
    4254:	b04c      	add	sp, #304	; 0x130
    4256:	bd70      	pop	{r4, r5, r6, pc}
    4258:	000007b5 	.word	0x000007b5
    425c:	2000049c 	.word	0x2000049c
    4260:	000001b9 	.word	0x000001b9
    4264:	000002a9 	.word	0x000002a9
    4268:	0000a9df 	.word	0x0000a9df
    426c:	000020b9 	.word	0x000020b9
    4270:	20000270 	.word	0x20000270
    4274:	0000fdb4 	.word	0x0000fdb4
    4278:	000059b1 	.word	0x000059b1

0000427c <_ZN13RelayBufferedD1Ev>:
}
	
RelayBuffered::~RelayBuffered()
{
		
}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			; (mov r8, r8)

00004280 <_ZN5RelayD0Ev>:
  : output(out)
{
	
}

Relay::~Relay()
    4280:	b510      	push	{r4, lr}
    4282:	1c04      	adds	r4, r0, #0
{
	
}
    4284:	4b01      	ldr	r3, [pc, #4]	; (428c <_ZN5RelayD0Ev+0xc>)
    4286:	4798      	blx	r3
    4288:	1c20      	adds	r0, r4, #0
    428a:	bd10      	pop	{r4, pc}
    428c:	000070cb 	.word	0x000070cb

00004290 <_ZN20RelayBufferedTaskCLPD1Ev>:
}
	
RelayBufferedTaskCLP::~RelayBufferedTaskCLP()
{
		
}
    4290:	4770      	bx	lr
    4292:	46c0      	nop			; (mov r8, r8)

00004294 <_ZN20RelayBufferedTaskCLPD0Ev>:
  : RelayBufferedTask(out, synchroMeter, '\x03'), synchroTimeSync(synchroTime)
{

}
	
RelayBufferedTaskCLP::~RelayBufferedTaskCLP()
    4294:	b510      	push	{r4, lr}
    4296:	1c04      	adds	r4, r0, #0
{
		
}
    4298:	4b01      	ldr	r3, [pc, #4]	; (42a0 <_ZN20RelayBufferedTaskCLPD0Ev+0xc>)
    429a:	4798      	blx	r3
    429c:	1c20      	adds	r0, r4, #0
    429e:	bd10      	pop	{r4, pc}
    42a0:	000070cb 	.word	0x000070cb

000042a4 <_ZN13RelayBufferedD0Ev>:
  : Relay(out), buffer_end(0), buffer_pos(0), newdata(false), endchar(end)
{
	memset(buffer,0,RELAY_BUFFER_SIZE);
}
	
RelayBuffered::~RelayBuffered()
    42a4:	b510      	push	{r4, lr}
    42a6:	1c04      	adds	r4, r0, #0
{
		
}
    42a8:	4b01      	ldr	r3, [pc, #4]	; (42b0 <_ZN13RelayBufferedD0Ev+0xc>)
    42aa:	4798      	blx	r3
    42ac:	1c20      	adds	r0, r4, #0
    42ae:	bd10      	pop	{r4, pc}
    42b0:	000070cb 	.word	0x000070cb

000042b4 <_ZN5RelayC1EP7Channel>:
#include "relay.h"
#include "mbed.h"
#include "clp_api.h"

Relay::Relay(Channel* out)
  : output(out)
    42b4:	4b02      	ldr	r3, [pc, #8]	; (42c0 <_ZN5RelayC1EP7Channel+0xc>)
    42b6:	3308      	adds	r3, #8
    42b8:	6003      	str	r3, [r0, #0]
    42ba:	6041      	str	r1, [r0, #4]
{
	
}
    42bc:	4770      	bx	lr
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	0000fdb8 	.word	0x0000fdb8

000042c4 <_ZN13RelayBufferedC1EP7Channelh>:
	{
		output->putc(c->getc());
	}
}

RelayBuffered::RelayBuffered(Channel* out, uint8_t end)
    42c4:	b510      	push	{r4, lr}
    42c6:	1c04      	adds	r4, r0, #0
#include "relay.h"
#include "mbed.h"
#include "clp_api.h"

Relay::Relay(Channel* out)
  : output(out)
    42c8:	6041      	str	r1, [r0, #4]
		output->putc(c->getc());
	}
}

RelayBuffered::RelayBuffered(Channel* out, uint8_t end)
  : Relay(out), buffer_end(0), buffer_pos(0), newdata(false), endchar(end)
    42ca:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <_ZN13RelayBufferedC1EP7Channelh+0x34>)
    42cc:	3308      	adds	r3, #8
    42ce:	6003      	str	r3, [r0, #0]
    42d0:	2300      	movs	r3, #0
    42d2:	219a      	movs	r1, #154	; 0x9a
    42d4:	0049      	lsls	r1, r1, #1
    42d6:	5043      	str	r3, [r0, r1]
    42d8:	3104      	adds	r1, #4
    42da:	5043      	str	r3, [r0, r1]
    42dc:	3104      	adds	r1, #4
    42de:	5443      	strb	r3, [r0, r1]
    42e0:	233e      	movs	r3, #62	; 0x3e
    42e2:	33ff      	adds	r3, #255	; 0xff
    42e4:	54c2      	strb	r2, [r0, r3]
{
	memset(buffer,0,RELAY_BUFFER_SIZE);
    42e6:	3008      	adds	r0, #8
    42e8:	2100      	movs	r1, #0
    42ea:	2296      	movs	r2, #150	; 0x96
    42ec:	0052      	lsls	r2, r2, #1
    42ee:	4b03      	ldr	r3, [pc, #12]	; (42fc <_ZN13RelayBufferedC1EP7Channelh+0x38>)
    42f0:	4798      	blx	r3
}
    42f2:	1c20      	adds	r0, r4, #0
    42f4:	bd10      	pop	{r4, pc}
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	0000fe00 	.word	0x0000fe00
    42fc:	0000a9f1 	.word	0x0000a9f1

00004300 <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_>:
			buffer_end = 0;
		}
	}
}

RelayBufferedTaskCLP::RelayBufferedTaskCLP(Channel* out, xSemaphoreHandle synchroMeter, xSemaphoreHandle synchroTime)
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	1c04      	adds	r4, r0, #0
    4304:	1c16      	adds	r6, r2, #0
    4306:	1c1d      	adds	r5, r3, #0
{
	return newdata;
}

RelayBufferedTask::RelayBufferedTask(Channel* out, xSemaphoreHandle synchro, uint8_t end)
  : RelayBuffered(out, end), synchroRelay(synchro)
    4308:	2203      	movs	r2, #3
    430a:	4b06      	ldr	r3, [pc, #24]	; (4324 <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_+0x24>)
    430c:	4798      	blx	r3
    430e:	23a0      	movs	r3, #160	; 0xa0
    4310:	005b      	lsls	r3, r3, #1
    4312:	50e6      	str	r6, [r4, r3]
		}
	}
}

RelayBufferedTaskCLP::RelayBufferedTaskCLP(Channel* out, xSemaphoreHandle synchroMeter, xSemaphoreHandle synchroTime)
  : RelayBufferedTask(out, synchroMeter, '\x03'), synchroTimeSync(synchroTime)
    4314:	4b04      	ldr	r3, [pc, #16]	; (4328 <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_+0x28>)
    4316:	3308      	adds	r3, #8
    4318:	6023      	str	r3, [r4, #0]
    431a:	23a2      	movs	r3, #162	; 0xa2
    431c:	005b      	lsls	r3, r3, #1
    431e:	50e5      	str	r5, [r4, r3]
{

}
    4320:	1c20      	adds	r0, r4, #0
    4322:	bd70      	pop	{r4, r5, r6, pc}
    4324:	000042c5 	.word	0x000042c5
    4328:	0000fdd8 	.word	0x0000fdd8

0000432c <mbed_die>:
    432c:	b508      	push	{r3, lr}
    432e:	b672      	cpsid	i
    4330:	2096      	movs	r0, #150	; 0x96
    4332:	f001 fbcd 	bl	5ad0 <wait_ms>
    4336:	2096      	movs	r0, #150	; 0x96
    4338:	f001 fbca 	bl	5ad0 <wait_ms>
    433c:	e7f8      	b.n	4330 <mbed_die+0x4>
    433e:	46c0      	nop			; (mov r8, r8)

00004340 <NVIC_SetVector>:
    4340:	4a0b      	ldr	r2, [pc, #44]	; (4370 <NVIC_SetVector+0x30>)
    4342:	b530      	push	{r4, r5, lr}
    4344:	6894      	ldr	r4, [r2, #8]
    4346:	6892      	ldr	r2, [r2, #8]
    4348:	1c23      	adds	r3, r4, #0
    434a:	2a00      	cmp	r2, #0
    434c:	d10c      	bne.n	4368 <NVIC_SetVector+0x28>
    434e:	2300      	movs	r3, #0
    4350:	2280      	movs	r2, #128	; 0x80
    4352:	591d      	ldr	r5, [r3, r4]
    4354:	0592      	lsls	r2, r2, #22
    4356:	189a      	adds	r2, r3, r2
    4358:	3304      	adds	r3, #4
    435a:	6015      	str	r5, [r2, #0]
    435c:	2bb0      	cmp	r3, #176	; 0xb0
    435e:	d1f7      	bne.n	4350 <NVIC_SetVector+0x10>
    4360:	2380      	movs	r3, #128	; 0x80
    4362:	4a03      	ldr	r2, [pc, #12]	; (4370 <NVIC_SetVector+0x30>)
    4364:	059b      	lsls	r3, r3, #22
    4366:	6093      	str	r3, [r2, #8]
    4368:	3010      	adds	r0, #16
    436a:	0080      	lsls	r0, r0, #2
    436c:	50c1      	str	r1, [r0, r3]
    436e:	bd30      	pop	{r4, r5, pc}
    4370:	e000ed00 	.word	0xe000ed00

00004374 <mbed_sdk_init>:
    4374:	b508      	push	{r3, lr}
    4376:	4b04      	ldr	r3, [pc, #16]	; (4388 <mbed_sdk_init+0x14>)
    4378:	781a      	ldrb	r2, [r3, #0]
    437a:	2a00      	cmp	r2, #0
    437c:	d103      	bne.n	4386 <mbed_sdk_init+0x12>
    437e:	3201      	adds	r2, #1
    4380:	701a      	strb	r2, [r3, #0]
    4382:	f000 fc13 	bl	4bac <system_init>
    4386:	bd08      	pop	{r3, pc}
    4388:	200042fc 	.word	0x200042fc

0000438c <_ZN4mbed10FileHandle4flenEv>:
    438c:	6803      	ldr	r3, [r0, #0]
    438e:	b570      	push	{r4, r5, r6, lr}
    4390:	691b      	ldr	r3, [r3, #16]
    4392:	2100      	movs	r1, #0
    4394:	2201      	movs	r2, #1
    4396:	1c04      	adds	r4, r0, #0
    4398:	4798      	blx	r3
    439a:	1c06      	adds	r6, r0, #0
    439c:	1c43      	adds	r3, r0, #1
    439e:	d00e      	beq.n	43be <_ZN4mbed10FileHandle4flenEv+0x32>
    43a0:	6823      	ldr	r3, [r4, #0]
    43a2:	2100      	movs	r1, #0
    43a4:	691b      	ldr	r3, [r3, #16]
    43a6:	2202      	movs	r2, #2
    43a8:	1c20      	adds	r0, r4, #0
    43aa:	4798      	blx	r3
    43ac:	1c05      	adds	r5, r0, #0
    43ae:	6823      	ldr	r3, [r4, #0]
    43b0:	1c20      	adds	r0, r4, #0
    43b2:	691b      	ldr	r3, [r3, #16]
    43b4:	1c31      	adds	r1, r6, #0
    43b6:	2200      	movs	r2, #0
    43b8:	4798      	blx	r3
    43ba:	1c28      	adds	r0, r5, #0
    43bc:	bd70      	pop	{r4, r5, r6, pc}
    43be:	e7fd      	b.n	43bc <_ZN4mbed10FileHandle4flenEv+0x30>

000043c0 <_ZL11init_serialv.part.0>:
    43c0:	b508      	push	{r3, lr}
    43c2:	4803      	ldr	r0, [pc, #12]	; (43d0 <_ZL11init_serialv.part.0+0x10>)
    43c4:	2104      	movs	r1, #4
    43c6:	2205      	movs	r2, #5
    43c8:	f000 fe1e 	bl	5008 <serial_init>
    43cc:	bd08      	pop	{r3, pc}
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	200044a8 	.word	0x200044a8

000043d4 <_ZN4mbed10FileHandleD1Ev>:
    43d4:	4b09      	ldr	r3, [pc, #36]	; (43fc <_ZN4mbed10FileHandleD1Ev+0x28>)
    43d6:	b510      	push	{r4, lr}
    43d8:	3308      	adds	r3, #8
    43da:	6003      	str	r3, [r0, #0]
    43dc:	4b08      	ldr	r3, [pc, #32]	; (4400 <_ZN4mbed10FileHandleD1Ev+0x2c>)
    43de:	2100      	movs	r1, #0
    43e0:	1c5a      	adds	r2, r3, #1
    43e2:	32ff      	adds	r2, #255	; 0xff
    43e4:	e002      	b.n	43ec <_ZN4mbed10FileHandleD1Ev+0x18>
    43e6:	3304      	adds	r3, #4
    43e8:	4293      	cmp	r3, r2
    43ea:	d006      	beq.n	43fa <_ZN4mbed10FileHandleD1Ev+0x26>
    43ec:	681c      	ldr	r4, [r3, #0]
    43ee:	4284      	cmp	r4, r0
    43f0:	d1f9      	bne.n	43e6 <_ZN4mbed10FileHandleD1Ev+0x12>
    43f2:	6019      	str	r1, [r3, #0]
    43f4:	3304      	adds	r3, #4
    43f6:	4293      	cmp	r3, r2
    43f8:	d1f8      	bne.n	43ec <_ZN4mbed10FileHandleD1Ev+0x18>
    43fa:	bd10      	pop	{r4, pc}
    43fc:	0000fe40 	.word	0x0000fe40
    4400:	20004300 	.word	0x20004300

00004404 <_open>:
    4404:	b5f0      	push	{r4, r5, r6, r7, lr}
    4406:	4647      	mov	r7, r8
    4408:	b480      	push	{r7}
    440a:	1c0e      	adds	r6, r1, #0
    440c:	b082      	sub	sp, #8
    440e:	4934      	ldr	r1, [pc, #208]	; (44e0 <_open+0xdc>)
    4410:	1c05      	adds	r5, r0, #0
    4412:	f007 ff73 	bl	c2fc <strcmp>
    4416:	1e04      	subs	r4, r0, #0
    4418:	d108      	bne.n	442c <_open+0x28>
    441a:	4b32      	ldr	r3, [pc, #200]	; (44e4 <_open+0xe0>)
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	2b00      	cmp	r3, #0
    4420:	d00f      	beq.n	4442 <_open+0x3e>
    4422:	1c20      	adds	r0, r4, #0
    4424:	b002      	add	sp, #8
    4426:	bc04      	pop	{r2}
    4428:	4690      	mov	r8, r2
    442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    442c:	1c28      	adds	r0, r5, #0
    442e:	492e      	ldr	r1, [pc, #184]	; (44e8 <_open+0xe4>)
    4430:	f007 ff64 	bl	c2fc <strcmp>
    4434:	2800      	cmp	r0, #0
    4436:	d107      	bne.n	4448 <_open+0x44>
    4438:	4b2a      	ldr	r3, [pc, #168]	; (44e4 <_open+0xe0>)
    443a:	2401      	movs	r4, #1
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	2b00      	cmp	r3, #0
    4440:	d1ef      	bne.n	4422 <_open+0x1e>
    4442:	f7ff ffbd 	bl	43c0 <_ZL11init_serialv.part.0>
    4446:	e7ec      	b.n	4422 <_open+0x1e>
    4448:	1c28      	adds	r0, r5, #0
    444a:	4928      	ldr	r1, [pc, #160]	; (44ec <_open+0xe8>)
    444c:	f007 ff56 	bl	c2fc <strcmp>
    4450:	2800      	cmp	r0, #0
    4452:	d024      	beq.n	449e <_open+0x9a>
    4454:	4f26      	ldr	r7, [pc, #152]	; (44f0 <_open+0xec>)
    4456:	2400      	movs	r4, #0
    4458:	1c3b      	adds	r3, r7, #0
    445a:	e003      	b.n	4464 <_open+0x60>
    445c:	3401      	adds	r4, #1
    445e:	3304      	adds	r3, #4
    4460:	2c40      	cmp	r4, #64	; 0x40
    4462:	d022      	beq.n	44aa <_open+0xa6>
    4464:	681a      	ldr	r2, [r3, #0]
    4466:	2a00      	cmp	r2, #0
    4468:	d1f8      	bne.n	445c <_open+0x58>
    446a:	782b      	ldrb	r3, [r5, #0]
    446c:	2b3a      	cmp	r3, #58	; 0x3a
    446e:	d030      	beq.n	44d2 <_open+0xce>
    4470:	4668      	mov	r0, sp
    4472:	1c29      	adds	r1, r5, #0
    4474:	f001 f834 	bl	54e0 <_ZN4mbed8FilePathC1EPKc>
    4478:	4668      	mov	r0, sp
    447a:	f001 f88b 	bl	5594 <_ZN4mbed8FilePath6existsEv>
    447e:	2800      	cmp	r0, #0
    4480:	d013      	beq.n	44aa <_open+0xa6>
    4482:	4668      	mov	r0, sp
    4484:	f001 f868 	bl	5558 <_ZN4mbed8FilePath6isFileEv>
    4488:	2800      	cmp	r0, #0
    448a:	d011      	beq.n	44b0 <_open+0xac>
    448c:	4668      	mov	r0, sp
    448e:	f001 f86f 	bl	5570 <_ZN4mbed8FilePath4fileEv>
    4492:	2800      	cmp	r0, #0
    4494:	d009      	beq.n	44aa <_open+0xa6>
    4496:	00a3      	lsls	r3, r4, #2
    4498:	50f8      	str	r0, [r7, r3]
    449a:	3403      	adds	r4, #3
    449c:	e7c1      	b.n	4422 <_open+0x1e>
    449e:	4b11      	ldr	r3, [pc, #68]	; (44e4 <_open+0xe0>)
    44a0:	2402      	movs	r4, #2
    44a2:	681b      	ldr	r3, [r3, #0]
    44a4:	2b00      	cmp	r3, #0
    44a6:	d1bc      	bne.n	4422 <_open+0x1e>
    44a8:	e7cb      	b.n	4442 <_open+0x3e>
    44aa:	2401      	movs	r4, #1
    44ac:	4264      	negs	r4, r4
    44ae:	e7b8      	b.n	4422 <_open+0x1e>
    44b0:	4668      	mov	r0, sp
    44b2:	f001 f843 	bl	553c <_ZN4mbed8FilePath10fileSystemEv>
    44b6:	1e05      	subs	r5, r0, #0
    44b8:	d0f7      	beq.n	44aa <_open+0xa6>
    44ba:	6803      	ldr	r3, [r0, #0]
    44bc:	4668      	mov	r0, sp
    44be:	689b      	ldr	r3, [r3, #8]
    44c0:	4698      	mov	r8, r3
    44c2:	f001 f839 	bl	5538 <_ZN4mbed8FilePath8fileNameEv>
    44c6:	4a0b      	ldr	r2, [pc, #44]	; (44f4 <_open+0xf0>)
    44c8:	1c01      	adds	r1, r0, #0
    44ca:	4032      	ands	r2, r6
    44cc:	1c28      	adds	r0, r5, #0
    44ce:	47c0      	blx	r8
    44d0:	e7df      	b.n	4492 <_open+0x8e>
    44d2:	1c28      	adds	r0, r5, #0
    44d4:	4908      	ldr	r1, [pc, #32]	; (44f8 <_open+0xf4>)
    44d6:	466a      	mov	r2, sp
    44d8:	f007 fe9a 	bl	c210 <siscanf>
    44dc:	9800      	ldr	r0, [sp, #0]
    44de:	e7d8      	b.n	4492 <_open+0x8e>
    44e0:	0000fe28 	.word	0x0000fe28
    44e4:	20004408 	.word	0x20004408
    44e8:	0000fe38 	.word	0x0000fe38
    44ec:	0000fe30 	.word	0x0000fe30
    44f0:	20004300 	.word	0x20004300
    44f4:	fffeffff 	.word	0xfffeffff
    44f8:	0000fe6c 	.word	0x0000fe6c

000044fc <_close>:
    44fc:	b508      	push	{r3, lr}
    44fe:	1c03      	adds	r3, r0, #0
    4500:	2000      	movs	r0, #0
    4502:	2b02      	cmp	r3, #2
    4504:	dd0a      	ble.n	451c <_close+0x20>
    4506:	4907      	ldr	r1, [pc, #28]	; (4524 <_close+0x28>)
    4508:	3b03      	subs	r3, #3
    450a:	009b      	lsls	r3, r3, #2
    450c:	585a      	ldr	r2, [r3, r1]
    450e:	5058      	str	r0, [r3, r1]
    4510:	2a00      	cmp	r2, #0
    4512:	d004      	beq.n	451e <_close+0x22>
    4514:	6813      	ldr	r3, [r2, #0]
    4516:	1c10      	adds	r0, r2, #0
    4518:	685b      	ldr	r3, [r3, #4]
    451a:	4798      	blx	r3
    451c:	bd08      	pop	{r3, pc}
    451e:	2001      	movs	r0, #1
    4520:	4240      	negs	r0, r0
    4522:	e7fb      	b.n	451c <_close+0x20>
    4524:	20004300 	.word	0x20004300

00004528 <_write>:
    4528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    452a:	1c0c      	adds	r4, r1, #0
    452c:	1c17      	adds	r7, r2, #0
    452e:	2802      	cmp	r0, #2
    4530:	dc12      	bgt.n	4558 <_write+0x30>
    4532:	4b10      	ldr	r3, [pc, #64]	; (4574 <_write+0x4c>)
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	2b00      	cmp	r3, #0
    4538:	d101      	bne.n	453e <_write+0x16>
    453a:	f7ff ff41 	bl	43c0 <_ZL11init_serialv.part.0>
    453e:	2f00      	cmp	r7, #0
    4540:	d008      	beq.n	4554 <_write+0x2c>
    4542:	4d0d      	ldr	r5, [pc, #52]	; (4578 <_write+0x50>)
    4544:	19e6      	adds	r6, r4, r7
    4546:	7821      	ldrb	r1, [r4, #0]
    4548:	1c28      	adds	r0, r5, #0
    454a:	3401      	adds	r4, #1
    454c:	f000 ffa8 	bl	54a0 <serial_putc>
    4550:	42b4      	cmp	r4, r6
    4552:	d1f8      	bne.n	4546 <_write+0x1e>
    4554:	1c38      	adds	r0, r7, #0
    4556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4558:	3803      	subs	r0, #3
    455a:	4b08      	ldr	r3, [pc, #32]	; (457c <_write+0x54>)
    455c:	0080      	lsls	r0, r0, #2
    455e:	58c0      	ldr	r0, [r0, r3]
    4560:	2800      	cmp	r0, #0
    4562:	d003      	beq.n	456c <_write+0x44>
    4564:	6803      	ldr	r3, [r0, #0]
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	4798      	blx	r3
    456a:	e7f4      	b.n	4556 <_write+0x2e>
    456c:	2001      	movs	r0, #1
    456e:	4240      	negs	r0, r0
    4570:	e7f1      	b.n	4556 <_write+0x2e>
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	20004408 	.word	0x20004408
    4578:	200044a8 	.word	0x200044a8
    457c:	20004300 	.word	0x20004300

00004580 <_read>:
    4580:	b510      	push	{r4, lr}
    4582:	1c0c      	adds	r4, r1, #0
    4584:	2802      	cmp	r0, #2
    4586:	dc09      	bgt.n	459c <_read+0x1c>
    4588:	4b0c      	ldr	r3, [pc, #48]	; (45bc <_read+0x3c>)
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	2b00      	cmp	r3, #0
    458e:	d00f      	beq.n	45b0 <_read+0x30>
    4590:	480b      	ldr	r0, [pc, #44]	; (45c0 <_read+0x40>)
    4592:	f000 ff59 	bl	5448 <serial_getc>
    4596:	7020      	strb	r0, [r4, #0]
    4598:	2001      	movs	r0, #1
    459a:	bd10      	pop	{r4, pc}
    459c:	3803      	subs	r0, #3
    459e:	4b09      	ldr	r3, [pc, #36]	; (45c4 <_read+0x44>)
    45a0:	0080      	lsls	r0, r0, #2
    45a2:	58c0      	ldr	r0, [r0, r3]
    45a4:	2800      	cmp	r0, #0
    45a6:	d006      	beq.n	45b6 <_read+0x36>
    45a8:	6803      	ldr	r3, [r0, #0]
    45aa:	689b      	ldr	r3, [r3, #8]
    45ac:	4798      	blx	r3
    45ae:	e7f4      	b.n	459a <_read+0x1a>
    45b0:	f7ff ff06 	bl	43c0 <_ZL11init_serialv.part.0>
    45b4:	e7ec      	b.n	4590 <_read+0x10>
    45b6:	2001      	movs	r0, #1
    45b8:	4240      	negs	r0, r0
    45ba:	e7ee      	b.n	459a <_read+0x1a>
    45bc:	20004408 	.word	0x20004408
    45c0:	200044a8 	.word	0x200044a8
    45c4:	20004300 	.word	0x20004300

000045c8 <_isatty>:
    45c8:	b508      	push	{r3, lr}
    45ca:	1c03      	adds	r3, r0, #0
    45cc:	2001      	movs	r0, #1
    45ce:	2b02      	cmp	r3, #2
    45d0:	dd08      	ble.n	45e4 <_isatty+0x1c>
    45d2:	3b03      	subs	r3, #3
    45d4:	4a05      	ldr	r2, [pc, #20]	; (45ec <_isatty+0x24>)
    45d6:	009b      	lsls	r3, r3, #2
    45d8:	5898      	ldr	r0, [r3, r2]
    45da:	2800      	cmp	r0, #0
    45dc:	d003      	beq.n	45e6 <_isatty+0x1e>
    45de:	6803      	ldr	r3, [r0, #0]
    45e0:	68db      	ldr	r3, [r3, #12]
    45e2:	4798      	blx	r3
    45e4:	bd08      	pop	{r3, pc}
    45e6:	2001      	movs	r0, #1
    45e8:	4240      	negs	r0, r0
    45ea:	e7fb      	b.n	45e4 <_isatty+0x1c>
    45ec:	20004300 	.word	0x20004300

000045f0 <_lseek>:
    45f0:	b508      	push	{r3, lr}
    45f2:	1c03      	adds	r3, r0, #0
    45f4:	2000      	movs	r0, #0
    45f6:	2b02      	cmp	r3, #2
    45f8:	dd08      	ble.n	460c <_lseek+0x1c>
    45fa:	3b03      	subs	r3, #3
    45fc:	4805      	ldr	r0, [pc, #20]	; (4614 <_lseek+0x24>)
    45fe:	009b      	lsls	r3, r3, #2
    4600:	5818      	ldr	r0, [r3, r0]
    4602:	2800      	cmp	r0, #0
    4604:	d003      	beq.n	460e <_lseek+0x1e>
    4606:	6803      	ldr	r3, [r0, #0]
    4608:	691b      	ldr	r3, [r3, #16]
    460a:	4798      	blx	r3
    460c:	bd08      	pop	{r3, pc}
    460e:	2001      	movs	r0, #1
    4610:	4240      	negs	r0, r0
    4612:	e7fb      	b.n	460c <_lseek+0x1c>
    4614:	20004300 	.word	0x20004300

00004618 <_fstat>:
    4618:	b508      	push	{r3, lr}
    461a:	2802      	cmp	r0, #2
    461c:	d804      	bhi.n	4628 <_fstat+0x10>
    461e:	2380      	movs	r3, #128	; 0x80
    4620:	2000      	movs	r0, #0
    4622:	019b      	lsls	r3, r3, #6
    4624:	604b      	str	r3, [r1, #4]
    4626:	bd08      	pop	{r3, pc}
    4628:	f005 fdb2 	bl	a190 <__errno>
    462c:	2309      	movs	r3, #9
    462e:	6003      	str	r3, [r0, #0]
    4630:	2001      	movs	r0, #1
    4632:	4240      	negs	r0, r0
    4634:	e7f7      	b.n	4626 <_fstat+0xe>
    4636:	46c0      	nop			; (mov r8, r8)

00004638 <__cxa_pure_virtual>:
    4638:	b508      	push	{r3, lr}
    463a:	2001      	movs	r0, #1
    463c:	f005 fdae 	bl	a19c <exit>

00004640 <mbed_main>:
    4640:	4770      	bx	lr
    4642:	46c0      	nop			; (mov r8, r8)

00004644 <__wrap_main>:
    4644:	b508      	push	{r3, lr}
    4646:	f7ff fe95 	bl	4374 <mbed_sdk_init>
    464a:	f7ff fff9 	bl	4640 <mbed_main>
    464e:	f7fe fb67 	bl	2d20 <main>
    4652:	bd08      	pop	{r3, pc}

00004654 <_sbrk>:
    4654:	4a07      	ldr	r2, [pc, #28]	; (4674 <_sbrk+0x20>)
    4656:	6813      	ldr	r3, [r2, #0]
    4658:	1818      	adds	r0, r3, r0
    465a:	f3ef 8108 	mrs	r1, MSP
    465e:	4288      	cmp	r0, r1
    4660:	d202      	bcs.n	4668 <_sbrk+0x14>
    4662:	6010      	str	r0, [r2, #0]
    4664:	1c18      	adds	r0, r3, #0
    4666:	4770      	bx	lr
    4668:	220c      	movs	r2, #12
    466a:	2001      	movs	r0, #1
    466c:	4b02      	ldr	r3, [pc, #8]	; (4678 <_sbrk+0x24>)
    466e:	4240      	negs	r0, r0
    4670:	601a      	str	r2, [r3, #0]
    4672:	e7f8      	b.n	4666 <_sbrk+0x12>
    4674:	200000cc 	.word	0x200000cc
    4678:	20004518 	.word	0x20004518

0000467c <_exit>:
    467c:	b508      	push	{r3, lr}
    467e:	2800      	cmp	r0, #0
    4680:	d100      	bne.n	4684 <_exit+0x8>
    4682:	e7fe      	b.n	4682 <_exit+0x6>
    4684:	f7ff fe52 	bl	432c <mbed_die>
    4688:	e7fb      	b.n	4682 <_exit+0x6>
    468a:	46c0      	nop			; (mov r8, r8)

0000468c <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:
    468c:	b508      	push	{r3, lr}
    468e:	2100      	movs	r1, #0
    4690:	f007 fcbf 	bl	c012 <setbuf>
    4694:	bd08      	pop	{r3, pc}
    4696:	46c0      	nop			; (mov r8, r8)

00004698 <_ZN4mbed9mbed_getcEP7__sFILE>:
    4698:	b508      	push	{r3, lr}
    469a:	f005 feef 	bl	a47c <fgetc>
    469e:	bd08      	pop	{r3, pc}

000046a0 <Dummy_Handler>:
    46a0:	e7fe      	b.n	46a0 <Dummy_Handler>
    46a2:	46c0      	nop			; (mov r8, r8)

000046a4 <Reset_Handler>:
    46a4:	4816      	ldr	r0, [pc, #88]	; (4700 <Reset_Handler+0x5c>)
    46a6:	4917      	ldr	r1, [pc, #92]	; (4704 <Reset_Handler+0x60>)
    46a8:	b510      	push	{r4, lr}
    46aa:	4288      	cmp	r0, r1
    46ac:	d00d      	beq.n	46ca <Reset_Handler+0x26>
    46ae:	4b16      	ldr	r3, [pc, #88]	; (4708 <Reset_Handler+0x64>)
    46b0:	4299      	cmp	r1, r3
    46b2:	d20a      	bcs.n	46ca <Reset_Handler+0x26>
    46b4:	43ca      	mvns	r2, r1
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	2200      	movs	r2, #0
    46ba:	089b      	lsrs	r3, r3, #2
    46bc:	3301      	adds	r3, #1
    46be:	009b      	lsls	r3, r3, #2
    46c0:	5884      	ldr	r4, [r0, r2]
    46c2:	508c      	str	r4, [r1, r2]
    46c4:	3204      	adds	r2, #4
    46c6:	429a      	cmp	r2, r3
    46c8:	d1fa      	bne.n	46c0 <Reset_Handler+0x1c>
    46ca:	4910      	ldr	r1, [pc, #64]	; (470c <Reset_Handler+0x68>)
    46cc:	4b10      	ldr	r3, [pc, #64]	; (4710 <Reset_Handler+0x6c>)
    46ce:	4299      	cmp	r1, r3
    46d0:	d20b      	bcs.n	46ea <Reset_Handler+0x46>
    46d2:	43ca      	mvns	r2, r1
    46d4:	2000      	movs	r0, #0
    46d6:	18d3      	adds	r3, r2, r3
    46d8:	2200      	movs	r2, #0
    46da:	089b      	lsrs	r3, r3, #2
    46dc:	3301      	adds	r3, #1
    46de:	009b      	lsls	r3, r3, #2
    46e0:	188c      	adds	r4, r1, r2
    46e2:	3204      	adds	r2, #4
    46e4:	6020      	str	r0, [r4, #0]
    46e6:	429a      	cmp	r2, r3
    46e8:	d1fa      	bne.n	46e0 <Reset_Handler+0x3c>
    46ea:	21ff      	movs	r1, #255	; 0xff
    46ec:	4b09      	ldr	r3, [pc, #36]	; (4714 <Reset_Handler+0x70>)
    46ee:	4a0a      	ldr	r2, [pc, #40]	; (4718 <Reset_Handler+0x74>)
    46f0:	438b      	bics	r3, r1
    46f2:	6093      	str	r3, [r2, #8]
    46f4:	f006 f8d6 	bl	a8a4 <__libc_init_array>
    46f8:	f7ff ffa4 	bl	4644 <__wrap_main>
    46fc:	e7fe      	b.n	46fc <Reset_Handler+0x58>
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	00010cac 	.word	0x00010cac
    4704:	200000b0 	.word	0x200000b0
    4708:	20000174 	.word	0x20000174
    470c:	20000174 	.word	0x20000174
    4710:	2000451c 	.word	0x2000451c
    4714:	00000000 	.word	0x00000000
    4718:	e000ed00 	.word	0xe000ed00

0000471c <extint_register_callback>:
    471c:	2317      	movs	r3, #23
    471e:	2a00      	cmp	r2, #0
    4720:	d001      	beq.n	4726 <extint_register_callback+0xa>
    4722:	1c18      	adds	r0, r3, #0
    4724:	4770      	bx	lr
    4726:	4a06      	ldr	r2, [pc, #24]	; (4740 <extint_register_callback+0x24>)
    4728:	0089      	lsls	r1, r1, #2
    472a:	588b      	ldr	r3, [r1, r2]
    472c:	2b00      	cmp	r3, #0
    472e:	d003      	beq.n	4738 <extint_register_callback+0x1c>
    4730:	4283      	cmp	r3, r0
    4732:	d003      	beq.n	473c <extint_register_callback+0x20>
    4734:	231d      	movs	r3, #29
    4736:	e7f4      	b.n	4722 <extint_register_callback+0x6>
    4738:	5088      	str	r0, [r1, r2]
    473a:	e7f2      	b.n	4722 <extint_register_callback+0x6>
    473c:	2300      	movs	r3, #0
    473e:	e7f0      	b.n	4722 <extint_register_callback+0x6>
    4740:	20004468 	.word	0x20004468

00004744 <extint_chan_enable_callback>:
    4744:	2317      	movs	r3, #23
    4746:	2900      	cmp	r1, #0
    4748:	d001      	beq.n	474e <extint_chan_enable_callback+0xa>
    474a:	1c18      	adds	r0, r3, #0
    474c:	4770      	bx	lr
    474e:	2200      	movs	r2, #0
    4750:	281f      	cmp	r0, #31
    4752:	d800      	bhi.n	4756 <extint_chan_enable_callback+0x12>
    4754:	4a02      	ldr	r2, [pc, #8]	; (4760 <extint_chan_enable_callback+0x1c>)
    4756:	2301      	movs	r3, #1
    4758:	4083      	lsls	r3, r0
    475a:	60d3      	str	r3, [r2, #12]
    475c:	2300      	movs	r3, #0
    475e:	e7f4      	b.n	474a <extint_chan_enable_callback+0x6>
    4760:	40001800 	.word	0x40001800

00004764 <EIC_Handler>:
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4766:	2300      	movs	r3, #0
    4768:	2601      	movs	r6, #1
    476a:	4c0b      	ldr	r4, [pc, #44]	; (4798 <EIC_Handler+0x34>)
    476c:	4d0b      	ldr	r5, [pc, #44]	; (479c <EIC_Handler+0x38>)
    476e:	4f0c      	ldr	r7, [pc, #48]	; (47a0 <EIC_Handler+0x3c>)
    4770:	7023      	strb	r3, [r4, #0]
    4772:	1c32      	adds	r2, r6, #0
    4774:	409a      	lsls	r2, r3
    4776:	6929      	ldr	r1, [r5, #16]
    4778:	4211      	tst	r1, r2
    477a:	d005      	beq.n	4788 <EIC_Handler+0x24>
    477c:	612a      	str	r2, [r5, #16]
    477e:	009b      	lsls	r3, r3, #2
    4780:	59db      	ldr	r3, [r3, r7]
    4782:	2b00      	cmp	r3, #0
    4784:	d000      	beq.n	4788 <EIC_Handler+0x24>
    4786:	4798      	blx	r3
    4788:	7823      	ldrb	r3, [r4, #0]
    478a:	3301      	adds	r3, #1
    478c:	b2db      	uxtb	r3, r3
    478e:	7023      	strb	r3, [r4, #0]
    4790:	2b0f      	cmp	r3, #15
    4792:	d9ee      	bls.n	4772 <EIC_Handler+0xe>
    4794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4796:	46c0      	nop			; (mov r8, r8)
    4798:	20004464 	.word	0x20004464
    479c:	40001800 	.word	0x40001800
    47a0:	20004468 	.word	0x20004468

000047a4 <_extint_enable>:
    47a4:	2302      	movs	r3, #2
    47a6:	4a04      	ldr	r2, [pc, #16]	; (47b8 <_extint_enable+0x14>)
    47a8:	7811      	ldrb	r1, [r2, #0]
    47aa:	430b      	orrs	r3, r1
    47ac:	7013      	strb	r3, [r2, #0]
    47ae:	7853      	ldrb	r3, [r2, #1]
    47b0:	b25b      	sxtb	r3, r3
    47b2:	2b00      	cmp	r3, #0
    47b4:	dbfb      	blt.n	47ae <_extint_enable+0xa>
    47b6:	4770      	bx	lr
    47b8:	40001800 	.word	0x40001800

000047bc <_system_extint_init>:
    47bc:	2340      	movs	r3, #64	; 0x40
    47be:	b500      	push	{lr}
    47c0:	4a12      	ldr	r2, [pc, #72]	; (480c <_system_extint_init+0x50>)
    47c2:	b083      	sub	sp, #12
    47c4:	6991      	ldr	r1, [r2, #24]
    47c6:	2005      	movs	r0, #5
    47c8:	430b      	orrs	r3, r1
    47ca:	6193      	str	r3, [r2, #24]
    47cc:	2300      	movs	r3, #0
    47ce:	a901      	add	r1, sp, #4
    47d0:	700b      	strb	r3, [r1, #0]
    47d2:	f000 f9c9 	bl	4b68 <system_gclk_chan_set_config>
    47d6:	2005      	movs	r0, #5
    47d8:	f000 f988 	bl	4aec <system_gclk_chan_enable>
    47dc:	2301      	movs	r3, #1
    47de:	4a0c      	ldr	r2, [pc, #48]	; (4810 <_system_extint_init+0x54>)
    47e0:	7811      	ldrb	r1, [r2, #0]
    47e2:	430b      	orrs	r3, r1
    47e4:	7013      	strb	r3, [r2, #0]
    47e6:	7853      	ldrb	r3, [r2, #1]
    47e8:	b25b      	sxtb	r3, r3
    47ea:	2b00      	cmp	r3, #0
    47ec:	dbfb      	blt.n	47e6 <_system_extint_init+0x2a>
    47ee:	4b09      	ldr	r3, [pc, #36]	; (4814 <_system_extint_init+0x58>)
    47f0:	2200      	movs	r2, #0
    47f2:	1c19      	adds	r1, r3, #0
    47f4:	3140      	adds	r1, #64	; 0x40
    47f6:	c304      	stmia	r3!, {r2}
    47f8:	428b      	cmp	r3, r1
    47fa:	d1fc      	bne.n	47f6 <_system_extint_init+0x3a>
    47fc:	2210      	movs	r2, #16
    47fe:	4b06      	ldr	r3, [pc, #24]	; (4818 <_system_extint_init+0x5c>)
    4800:	601a      	str	r2, [r3, #0]
    4802:	f7ff ffcf 	bl	47a4 <_extint_enable>
    4806:	b003      	add	sp, #12
    4808:	bd00      	pop	{pc}
    480a:	46c0      	nop			; (mov r8, r8)
    480c:	40000400 	.word	0x40000400
    4810:	40001800 	.word	0x40001800
    4814:	20004468 	.word	0x20004468
    4818:	e000e100 	.word	0xe000e100

0000481c <extint_chan_get_config_defaults>:
    481c:	2300      	movs	r3, #0
    481e:	2201      	movs	r2, #1
    4820:	6003      	str	r3, [r0, #0]
    4822:	6043      	str	r3, [r0, #4]
    4824:	7283      	strb	r3, [r0, #10]
    4826:	3302      	adds	r3, #2
    4828:	7202      	strb	r2, [r0, #8]
    482a:	7242      	strb	r2, [r0, #9]
    482c:	72c3      	strb	r3, [r0, #11]
    482e:	4770      	bx	lr

00004830 <extint_chan_set_config>:
    4830:	b5f0      	push	{r4, r5, r6, r7, lr}
    4832:	2300      	movs	r3, #0
    4834:	1c0c      	adds	r4, r1, #0
    4836:	b083      	sub	sp, #12
    4838:	a901      	add	r1, sp, #4
    483a:	704b      	strb	r3, [r1, #1]
    483c:	70cb      	strb	r3, [r1, #3]
    483e:	7923      	ldrb	r3, [r4, #4]
    4840:	1c05      	adds	r5, r0, #0
    4842:	700b      	strb	r3, [r1, #0]
    4844:	7a23      	ldrb	r3, [r4, #8]
    4846:	7820      	ldrb	r0, [r4, #0]
    4848:	708b      	strb	r3, [r1, #2]
    484a:	2600      	movs	r6, #0
    484c:	f000 f882 	bl	4954 <system_pinmux_pin_set_config>
    4850:	2d1f      	cmp	r5, #31
    4852:	d800      	bhi.n	4856 <extint_chan_set_config+0x26>
    4854:	4e12      	ldr	r6, [pc, #72]	; (48a0 <extint_chan_set_config+0x70>)
    4856:	2207      	movs	r2, #7
    4858:	7aa3      	ldrb	r3, [r4, #10]
    485a:	402a      	ands	r2, r5
    485c:	0092      	lsls	r2, r2, #2
    485e:	7ae0      	ldrb	r0, [r4, #11]
    4860:	2b00      	cmp	r3, #0
    4862:	d001      	beq.n	4868 <extint_chan_set_config+0x38>
    4864:	2308      	movs	r3, #8
    4866:	4318      	orrs	r0, r3
    4868:	270f      	movs	r7, #15
    486a:	4097      	lsls	r7, r2
    486c:	08eb      	lsrs	r3, r5, #3
    486e:	009b      	lsls	r3, r3, #2
    4870:	18f3      	adds	r3, r6, r3
    4872:	6999      	ldr	r1, [r3, #24]
    4874:	4090      	lsls	r0, r2
    4876:	43b9      	bics	r1, r7
    4878:	1c0a      	adds	r2, r1, #0
    487a:	4302      	orrs	r2, r0
    487c:	619a      	str	r2, [r3, #24]
    487e:	7a63      	ldrb	r3, [r4, #9]
    4880:	2b00      	cmp	r3, #0
    4882:	d106      	bne.n	4892 <extint_chan_set_config+0x62>
    4884:	2201      	movs	r2, #1
    4886:	40aa      	lsls	r2, r5
    4888:	6973      	ldr	r3, [r6, #20]
    488a:	4393      	bics	r3, r2
    488c:	6173      	str	r3, [r6, #20]
    488e:	b003      	add	sp, #12
    4890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4892:	2201      	movs	r2, #1
    4894:	40aa      	lsls	r2, r5
    4896:	1c15      	adds	r5, r2, #0
    4898:	6973      	ldr	r3, [r6, #20]
    489a:	431d      	orrs	r5, r3
    489c:	6175      	str	r5, [r6, #20]
    489e:	e7f6      	b.n	488e <extint_chan_set_config+0x5e>
    48a0:	40001800 	.word	0x40001800

000048a4 <_system_pinmux_config>:
    48a4:	78d3      	ldrb	r3, [r2, #3]
    48a6:	b570      	push	{r4, r5, r6, lr}
    48a8:	2b00      	cmp	r3, #0
    48aa:	d131      	bne.n	4910 <_system_pinmux_config+0x6c>
    48ac:	7814      	ldrb	r4, [r2, #0]
    48ae:	2c80      	cmp	r4, #128	; 0x80
    48b0:	d047      	beq.n	4942 <_system_pinmux_config+0x9e>
    48b2:	2380      	movs	r3, #128	; 0x80
    48b4:	0624      	lsls	r4, r4, #24
    48b6:	025b      	lsls	r3, r3, #9
    48b8:	431c      	orrs	r4, r3
    48ba:	7853      	ldrb	r3, [r2, #1]
    48bc:	2502      	movs	r5, #2
    48be:	1c1e      	adds	r6, r3, #0
    48c0:	43ae      	bics	r6, r5
    48c2:	d107      	bne.n	48d4 <_system_pinmux_config+0x30>
    48c4:	7893      	ldrb	r3, [r2, #2]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d137      	bne.n	493a <_system_pinmux_config+0x96>
    48ca:	2380      	movs	r3, #128	; 0x80
    48cc:	029b      	lsls	r3, r3, #10
    48ce:	431c      	orrs	r4, r3
    48d0:	6041      	str	r1, [r0, #4]
    48d2:	7853      	ldrb	r3, [r2, #1]
    48d4:	3b01      	subs	r3, #1
    48d6:	2b01      	cmp	r3, #1
    48d8:	d935      	bls.n	4946 <_system_pinmux_config+0xa2>
    48da:	25a0      	movs	r5, #160	; 0xa0
    48dc:	040b      	lsls	r3, r1, #16
    48de:	05ed      	lsls	r5, r5, #23
    48e0:	0c1b      	lsrs	r3, r3, #16
    48e2:	432b      	orrs	r3, r5
    48e4:	25d0      	movs	r5, #208	; 0xd0
    48e6:	4323      	orrs	r3, r4
    48e8:	6283      	str	r3, [r0, #40]	; 0x28
    48ea:	062d      	lsls	r5, r5, #24
    48ec:	0c0b      	lsrs	r3, r1, #16
    48ee:	432b      	orrs	r3, r5
    48f0:	4323      	orrs	r3, r4
    48f2:	6283      	str	r3, [r0, #40]	; 0x28
    48f4:	78d3      	ldrb	r3, [r2, #3]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d109      	bne.n	490e <_system_pinmux_config+0x6a>
    48fa:	0363      	lsls	r3, r4, #13
    48fc:	d503      	bpl.n	4906 <_system_pinmux_config+0x62>
    48fe:	7893      	ldrb	r3, [r2, #2]
    4900:	2b01      	cmp	r3, #1
    4902:	d023      	beq.n	494c <_system_pinmux_config+0xa8>
    4904:	6141      	str	r1, [r0, #20]
    4906:	7853      	ldrb	r3, [r2, #1]
    4908:	3b01      	subs	r3, #1
    490a:	2b01      	cmp	r3, #1
    490c:	d913      	bls.n	4936 <_system_pinmux_config+0x92>
    490e:	bd70      	pop	{r4, r5, r6, pc}
    4910:	24a0      	movs	r4, #160	; 0xa0
    4912:	040b      	lsls	r3, r1, #16
    4914:	05e4      	lsls	r4, r4, #23
    4916:	0c1b      	lsrs	r3, r3, #16
    4918:	4323      	orrs	r3, r4
    491a:	24d0      	movs	r4, #208	; 0xd0
    491c:	6041      	str	r1, [r0, #4]
    491e:	0624      	lsls	r4, r4, #24
    4920:	6283      	str	r3, [r0, #40]	; 0x28
    4922:	0c0b      	lsrs	r3, r1, #16
    4924:	4323      	orrs	r3, r4
    4926:	6283      	str	r3, [r0, #40]	; 0x28
    4928:	78d3      	ldrb	r3, [r2, #3]
    492a:	2b00      	cmp	r3, #0
    492c:	d1ef      	bne.n	490e <_system_pinmux_config+0x6a>
    492e:	7853      	ldrb	r3, [r2, #1]
    4930:	3b01      	subs	r3, #1
    4932:	2b01      	cmp	r3, #1
    4934:	d8eb      	bhi.n	490e <_system_pinmux_config+0x6a>
    4936:	6081      	str	r1, [r0, #8]
    4938:	e7e9      	b.n	490e <_system_pinmux_config+0x6a>
    493a:	23c0      	movs	r3, #192	; 0xc0
    493c:	02db      	lsls	r3, r3, #11
    493e:	431c      	orrs	r4, r3
    4940:	e7c6      	b.n	48d0 <_system_pinmux_config+0x2c>
    4942:	2400      	movs	r4, #0
    4944:	e7b9      	b.n	48ba <_system_pinmux_config+0x16>
    4946:	4b02      	ldr	r3, [pc, #8]	; (4950 <_system_pinmux_config+0xac>)
    4948:	401c      	ands	r4, r3
    494a:	e7c6      	b.n	48da <_system_pinmux_config+0x36>
    494c:	6181      	str	r1, [r0, #24]
    494e:	e7da      	b.n	4906 <_system_pinmux_config+0x62>
    4950:	fffbffff 	.word	0xfffbffff

00004954 <system_pinmux_pin_set_config>:
    4954:	b508      	push	{r3, lr}
    4956:	1c0a      	adds	r2, r1, #0
    4958:	1c03      	adds	r3, r0, #0
    495a:	09c1      	lsrs	r1, r0, #7
    495c:	2000      	movs	r0, #0
    495e:	2900      	cmp	r1, #0
    4960:	d104      	bne.n	496c <system_pinmux_pin_set_config+0x18>
    4962:	4906      	ldr	r1, [pc, #24]	; (497c <system_pinmux_pin_set_config+0x28>)
    4964:	0958      	lsrs	r0, r3, #5
    4966:	468c      	mov	ip, r1
    4968:	01c0      	lsls	r0, r0, #7
    496a:	4460      	add	r0, ip
    496c:	211f      	movs	r1, #31
    496e:	400b      	ands	r3, r1
    4970:	391e      	subs	r1, #30
    4972:	4099      	lsls	r1, r3
    4974:	f7ff ff96 	bl	48a4 <_system_pinmux_config>
    4978:	bd08      	pop	{r3, pc}
    497a:	46c0      	nop			; (mov r8, r8)
    497c:	41004400 	.word	0x41004400

00004980 <system_gclk_init>:
    4980:	2308      	movs	r3, #8
    4982:	4a06      	ldr	r2, [pc, #24]	; (499c <system_gclk_init+0x1c>)
    4984:	6991      	ldr	r1, [r2, #24]
    4986:	430b      	orrs	r3, r1
    4988:	6193      	str	r3, [r2, #24]
    498a:	2301      	movs	r3, #1
    498c:	2101      	movs	r1, #1
    498e:	4a04      	ldr	r2, [pc, #16]	; (49a0 <system_gclk_init+0x20>)
    4990:	7013      	strb	r3, [r2, #0]
    4992:	7813      	ldrb	r3, [r2, #0]
    4994:	4219      	tst	r1, r3
    4996:	d1fc      	bne.n	4992 <system_gclk_init+0x12>
    4998:	4770      	bx	lr
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	40000400 	.word	0x40000400
    49a0:	40000c00 	.word	0x40000c00

000049a4 <system_gclk_gen_set_config>:
    49a4:	b570      	push	{r4, r5, r6, lr}
    49a6:	780d      	ldrb	r5, [r1, #0]
    49a8:	784b      	ldrb	r3, [r1, #1]
    49aa:	022d      	lsls	r5, r5, #8
    49ac:	1c04      	adds	r4, r0, #0
    49ae:	4305      	orrs	r5, r0
    49b0:	2b00      	cmp	r3, #0
    49b2:	d002      	beq.n	49ba <system_gclk_gen_set_config+0x16>
    49b4:	2380      	movs	r3, #128	; 0x80
    49b6:	02db      	lsls	r3, r3, #11
    49b8:	431d      	orrs	r5, r3
    49ba:	7a4b      	ldrb	r3, [r1, #9]
    49bc:	2b00      	cmp	r3, #0
    49be:	d002      	beq.n	49c6 <system_gclk_gen_set_config+0x22>
    49c0:	2380      	movs	r3, #128	; 0x80
    49c2:	031b      	lsls	r3, r3, #12
    49c4:	431d      	orrs	r5, r3
    49c6:	684e      	ldr	r6, [r1, #4]
    49c8:	2e01      	cmp	r6, #1
    49ca:	d90f      	bls.n	49ec <system_gclk_gen_set_config+0x48>
    49cc:	1e73      	subs	r3, r6, #1
    49ce:	4033      	ands	r3, r6
    49d0:	d129      	bne.n	4a26 <system_gclk_gen_set_config+0x82>
    49d2:	2e02      	cmp	r6, #2
    49d4:	d005      	beq.n	49e2 <system_gclk_gen_set_config+0x3e>
    49d6:	2202      	movs	r2, #2
    49d8:	3301      	adds	r3, #1
    49da:	0052      	lsls	r2, r2, #1
    49dc:	4296      	cmp	r6, r2
    49de:	d8fb      	bhi.n	49d8 <system_gclk_gen_set_config+0x34>
    49e0:	021b      	lsls	r3, r3, #8
    49e2:	4318      	orrs	r0, r3
    49e4:	2380      	movs	r3, #128	; 0x80
    49e6:	1c04      	adds	r4, r0, #0
    49e8:	035b      	lsls	r3, r3, #13
    49ea:	431d      	orrs	r5, r3
    49ec:	7a0b      	ldrb	r3, [r1, #8]
    49ee:	2b00      	cmp	r3, #0
    49f0:	d002      	beq.n	49f8 <system_gclk_gen_set_config+0x54>
    49f2:	2380      	movs	r3, #128	; 0x80
    49f4:	039b      	lsls	r3, r3, #14
    49f6:	431d      	orrs	r5, r3
    49f8:	4a0e      	ldr	r2, [pc, #56]	; (4a34 <system_gclk_gen_set_config+0x90>)
    49fa:	7853      	ldrb	r3, [r2, #1]
    49fc:	4e0d      	ldr	r6, [pc, #52]	; (4a34 <system_gclk_gen_set_config+0x90>)
    49fe:	b25b      	sxtb	r3, r3
    4a00:	2b00      	cmp	r3, #0
    4a02:	dbfa      	blt.n	49fa <system_gclk_gen_set_config+0x56>
    4a04:	f000 f8de 	bl	4bc4 <cpu_irq_enter_critical>
    4a08:	60b4      	str	r4, [r6, #8]
    4a0a:	7873      	ldrb	r3, [r6, #1]
    4a0c:	4a09      	ldr	r2, [pc, #36]	; (4a34 <system_gclk_gen_set_config+0x90>)
    4a0e:	b25b      	sxtb	r3, r3
    4a10:	2b00      	cmp	r3, #0
    4a12:	dbfa      	blt.n	4a0a <system_gclk_gen_set_config+0x66>
    4a14:	2380      	movs	r3, #128	; 0x80
    4a16:	6851      	ldr	r1, [r2, #4]
    4a18:	025b      	lsls	r3, r3, #9
    4a1a:	400b      	ands	r3, r1
    4a1c:	431d      	orrs	r5, r3
    4a1e:	6055      	str	r5, [r2, #4]
    4a20:	f000 f8ee 	bl	4c00 <cpu_irq_leave_critical>
    4a24:	bd70      	pop	{r4, r5, r6, pc}
    4a26:	2380      	movs	r3, #128	; 0x80
    4a28:	0234      	lsls	r4, r6, #8
    4a2a:	029b      	lsls	r3, r3, #10
    4a2c:	4304      	orrs	r4, r0
    4a2e:	431d      	orrs	r5, r3
    4a30:	e7dc      	b.n	49ec <system_gclk_gen_set_config+0x48>
    4a32:	46c0      	nop			; (mov r8, r8)
    4a34:	40000c00 	.word	0x40000c00

00004a38 <system_gclk_gen_enable>:
    4a38:	b510      	push	{r4, lr}
    4a3a:	1c04      	adds	r4, r0, #0
    4a3c:	4a0b      	ldr	r2, [pc, #44]	; (4a6c <system_gclk_gen_enable+0x34>)
    4a3e:	7853      	ldrb	r3, [r2, #1]
    4a40:	b25b      	sxtb	r3, r3
    4a42:	2b00      	cmp	r3, #0
    4a44:	dbfb      	blt.n	4a3e <system_gclk_gen_enable+0x6>
    4a46:	f000 f8bd 	bl	4bc4 <cpu_irq_enter_critical>
    4a4a:	4b09      	ldr	r3, [pc, #36]	; (4a70 <system_gclk_gen_enable+0x38>)
    4a4c:	4907      	ldr	r1, [pc, #28]	; (4a6c <system_gclk_gen_enable+0x34>)
    4a4e:	701c      	strb	r4, [r3, #0]
    4a50:	784b      	ldrb	r3, [r1, #1]
    4a52:	4a06      	ldr	r2, [pc, #24]	; (4a6c <system_gclk_gen_enable+0x34>)
    4a54:	b25b      	sxtb	r3, r3
    4a56:	2b00      	cmp	r3, #0
    4a58:	dbfa      	blt.n	4a50 <system_gclk_gen_enable+0x18>
    4a5a:	2180      	movs	r1, #128	; 0x80
    4a5c:	6853      	ldr	r3, [r2, #4]
    4a5e:	0249      	lsls	r1, r1, #9
    4a60:	430b      	orrs	r3, r1
    4a62:	6053      	str	r3, [r2, #4]
    4a64:	f000 f8cc 	bl	4c00 <cpu_irq_leave_critical>
    4a68:	bd10      	pop	{r4, pc}
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	40000c00 	.word	0x40000c00
    4a70:	40000c04 	.word	0x40000c04

00004a74 <system_gclk_gen_get_hz>:
    4a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a76:	1c07      	adds	r7, r0, #0
    4a78:	4a19      	ldr	r2, [pc, #100]	; (4ae0 <system_gclk_gen_get_hz+0x6c>)
    4a7a:	7853      	ldrb	r3, [r2, #1]
    4a7c:	b25b      	sxtb	r3, r3
    4a7e:	2b00      	cmp	r3, #0
    4a80:	dbfb      	blt.n	4a7a <system_gclk_gen_get_hz+0x6>
    4a82:	f000 f89f 	bl	4bc4 <cpu_irq_enter_critical>
    4a86:	4b17      	ldr	r3, [pc, #92]	; (4ae4 <system_gclk_gen_get_hz+0x70>)
    4a88:	4a15      	ldr	r2, [pc, #84]	; (4ae0 <system_gclk_gen_get_hz+0x6c>)
    4a8a:	701f      	strb	r7, [r3, #0]
    4a8c:	7853      	ldrb	r3, [r2, #1]
    4a8e:	4c14      	ldr	r4, [pc, #80]	; (4ae0 <system_gclk_gen_get_hz+0x6c>)
    4a90:	b25b      	sxtb	r3, r3
    4a92:	2b00      	cmp	r3, #0
    4a94:	dbfa      	blt.n	4a8c <system_gclk_gen_get_hz+0x18>
    4a96:	6860      	ldr	r0, [r4, #4]
    4a98:	04c0      	lsls	r0, r0, #19
    4a9a:	0ec0      	lsrs	r0, r0, #27
    4a9c:	f001 f934 	bl	5d08 <system_clock_source_get_hz>
    4aa0:	1c06      	adds	r6, r0, #0
    4aa2:	4b10      	ldr	r3, [pc, #64]	; (4ae4 <system_gclk_gen_get_hz+0x70>)
    4aa4:	701f      	strb	r7, [r3, #0]
    4aa6:	6865      	ldr	r5, [r4, #4]
    4aa8:	4b0f      	ldr	r3, [pc, #60]	; (4ae8 <system_gclk_gen_get_hz+0x74>)
    4aaa:	02ed      	lsls	r5, r5, #11
    4aac:	0fed      	lsrs	r5, r5, #31
    4aae:	701f      	strb	r7, [r3, #0]
    4ab0:	7863      	ldrb	r3, [r4, #1]
    4ab2:	b25b      	sxtb	r3, r3
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	dbfb      	blt.n	4ab0 <system_gclk_gen_get_hz+0x3c>
    4ab8:	4b09      	ldr	r3, [pc, #36]	; (4ae0 <system_gclk_gen_get_hz+0x6c>)
    4aba:	6899      	ldr	r1, [r3, #8]
    4abc:	0a09      	lsrs	r1, r1, #8
    4abe:	b28c      	uxth	r4, r1
    4ac0:	f000 f89e 	bl	4c00 <cpu_irq_leave_critical>
    4ac4:	2d00      	cmp	r5, #0
    4ac6:	d003      	beq.n	4ad0 <system_gclk_gen_get_hz+0x5c>
    4ac8:	1c61      	adds	r1, r4, #1
    4aca:	40ce      	lsrs	r6, r1
    4acc:	1c30      	adds	r0, r6, #0
    4ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ad0:	2c01      	cmp	r4, #1
    4ad2:	d9fb      	bls.n	4acc <system_gclk_gen_get_hz+0x58>
    4ad4:	1c30      	adds	r0, r6, #0
    4ad6:	1c21      	adds	r1, r4, #0
    4ad8:	f002 fb14 	bl	7104 <__aeabi_uidiv>
    4adc:	1c06      	adds	r6, r0, #0
    4ade:	e7f5      	b.n	4acc <system_gclk_gen_get_hz+0x58>
    4ae0:	40000c00 	.word	0x40000c00
    4ae4:	40000c04 	.word	0x40000c04
    4ae8:	40000c08 	.word	0x40000c08

00004aec <system_gclk_chan_enable>:
    4aec:	b510      	push	{r4, lr}
    4aee:	1c04      	adds	r4, r0, #0
    4af0:	f000 f868 	bl	4bc4 <cpu_irq_enter_critical>
    4af4:	2180      	movs	r1, #128	; 0x80
    4af6:	4b05      	ldr	r3, [pc, #20]	; (4b0c <system_gclk_chan_enable+0x20>)
    4af8:	4a05      	ldr	r2, [pc, #20]	; (4b10 <system_gclk_chan_enable+0x24>)
    4afa:	701c      	strb	r4, [r3, #0]
    4afc:	8853      	ldrh	r3, [r2, #2]
    4afe:	01c9      	lsls	r1, r1, #7
    4b00:	430b      	orrs	r3, r1
    4b02:	8053      	strh	r3, [r2, #2]
    4b04:	f000 f87c 	bl	4c00 <cpu_irq_leave_critical>
    4b08:	bd10      	pop	{r4, pc}
    4b0a:	46c0      	nop			; (mov r8, r8)
    4b0c:	40000c02 	.word	0x40000c02
    4b10:	40000c00 	.word	0x40000c00

00004b14 <system_gclk_chan_disable>:
    4b14:	b510      	push	{r4, lr}
    4b16:	1c04      	adds	r4, r0, #0
    4b18:	f000 f854 	bl	4bc4 <cpu_irq_enter_critical>
    4b1c:	2080      	movs	r0, #128	; 0x80
    4b1e:	4b0e      	ldr	r3, [pc, #56]	; (4b58 <system_gclk_chan_disable+0x44>)
    4b20:	4a0e      	ldr	r2, [pc, #56]	; (4b5c <system_gclk_chan_disable+0x48>)
    4b22:	701c      	strb	r4, [r3, #0]
    4b24:	8854      	ldrh	r4, [r2, #2]
    4b26:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <system_gclk_chan_disable+0x4c>)
    4b28:	8851      	ldrh	r1, [r2, #2]
    4b2a:	0524      	lsls	r4, r4, #20
    4b2c:	400b      	ands	r3, r1
    4b2e:	8053      	strh	r3, [r2, #2]
    4b30:	8851      	ldrh	r1, [r2, #2]
    4b32:	4b0c      	ldr	r3, [pc, #48]	; (4b64 <system_gclk_chan_disable+0x50>)
    4b34:	0f24      	lsrs	r4, r4, #28
    4b36:	400b      	ands	r3, r1
    4b38:	8053      	strh	r3, [r2, #2]
    4b3a:	01c0      	lsls	r0, r0, #7
    4b3c:	8853      	ldrh	r3, [r2, #2]
    4b3e:	4907      	ldr	r1, [pc, #28]	; (4b5c <system_gclk_chan_disable+0x48>)
    4b40:	4203      	tst	r3, r0
    4b42:	d1fb      	bne.n	4b3c <system_gclk_chan_disable+0x28>
    4b44:	8848      	ldrh	r0, [r1, #2]
    4b46:	4b06      	ldr	r3, [pc, #24]	; (4b60 <system_gclk_chan_disable+0x4c>)
    4b48:	0222      	lsls	r2, r4, #8
    4b4a:	4003      	ands	r3, r0
    4b4c:	4313      	orrs	r3, r2
    4b4e:	804b      	strh	r3, [r1, #2]
    4b50:	f000 f856 	bl	4c00 <cpu_irq_leave_critical>
    4b54:	bd10      	pop	{r4, pc}
    4b56:	46c0      	nop			; (mov r8, r8)
    4b58:	40000c02 	.word	0x40000c02
    4b5c:	40000c00 	.word	0x40000c00
    4b60:	fffff0ff 	.word	0xfffff0ff
    4b64:	ffffbfff 	.word	0xffffbfff

00004b68 <system_gclk_chan_set_config>:
    4b68:	b510      	push	{r4, lr}
    4b6a:	780c      	ldrb	r4, [r1, #0]
    4b6c:	0224      	lsls	r4, r4, #8
    4b6e:	4304      	orrs	r4, r0
    4b70:	f7ff ffd0 	bl	4b14 <system_gclk_chan_disable>
    4b74:	4b01      	ldr	r3, [pc, #4]	; (4b7c <system_gclk_chan_set_config+0x14>)
    4b76:	b2a4      	uxth	r4, r4
    4b78:	805c      	strh	r4, [r3, #2]
    4b7a:	bd10      	pop	{r4, pc}
    4b7c:	40000c00 	.word	0x40000c00

00004b80 <system_gclk_chan_get_hz>:
    4b80:	b510      	push	{r4, lr}
    4b82:	1c04      	adds	r4, r0, #0
    4b84:	f000 f81e 	bl	4bc4 <cpu_irq_enter_critical>
    4b88:	4b05      	ldr	r3, [pc, #20]	; (4ba0 <system_gclk_chan_get_hz+0x20>)
    4b8a:	701c      	strb	r4, [r3, #0]
    4b8c:	4b05      	ldr	r3, [pc, #20]	; (4ba4 <system_gclk_chan_get_hz+0x24>)
    4b8e:	885c      	ldrh	r4, [r3, #2]
    4b90:	f000 f836 	bl	4c00 <cpu_irq_leave_critical>
    4b94:	0524      	lsls	r4, r4, #20
    4b96:	0f24      	lsrs	r4, r4, #28
    4b98:	1c20      	adds	r0, r4, #0
    4b9a:	f7ff ff6b 	bl	4a74 <system_gclk_gen_get_hz>
    4b9e:	bd10      	pop	{r4, pc}
    4ba0:	40000c02 	.word	0x40000c02
    4ba4:	40000c00 	.word	0x40000c00

00004ba8 <_system_dummy_init>:
    4ba8:	4770      	bx	lr
    4baa:	46c0      	nop			; (mov r8, r8)

00004bac <system_init>:
    4bac:	b508      	push	{r3, lr}
    4bae:	f001 f93f 	bl	5e30 <system_clock_init>
    4bb2:	f7ff fff9 	bl	4ba8 <_system_dummy_init>
    4bb6:	f7ff fff7 	bl	4ba8 <_system_dummy_init>
    4bba:	f7ff fdff 	bl	47bc <_system_extint_init>
    4bbe:	f7ff fff3 	bl	4ba8 <_system_dummy_init>
    4bc2:	bd08      	pop	{r3, pc}

00004bc4 <cpu_irq_enter_critical>:
    4bc4:	4b0b      	ldr	r3, [pc, #44]	; (4bf4 <cpu_irq_enter_critical+0x30>)
    4bc6:	681a      	ldr	r2, [r3, #0]
    4bc8:	2a00      	cmp	r2, #0
    4bca:	d105      	bne.n	4bd8 <cpu_irq_enter_critical+0x14>
    4bcc:	f3ef 8110 	mrs	r1, PRIMASK
    4bd0:	2900      	cmp	r1, #0
    4bd2:	d005      	beq.n	4be0 <cpu_irq_enter_critical+0x1c>
    4bd4:	4908      	ldr	r1, [pc, #32]	; (4bf8 <cpu_irq_enter_critical+0x34>)
    4bd6:	700a      	strb	r2, [r1, #0]
    4bd8:	681a      	ldr	r2, [r3, #0]
    4bda:	3201      	adds	r2, #1
    4bdc:	601a      	str	r2, [r3, #0]
    4bde:	4770      	bx	lr
    4be0:	b672      	cpsid	i
    4be2:	f3bf 8f5f 	dmb	sy
    4be6:	4a05      	ldr	r2, [pc, #20]	; (4bfc <cpu_irq_enter_critical+0x38>)
    4be8:	7011      	strb	r1, [r2, #0]
    4bea:	4a03      	ldr	r2, [pc, #12]	; (4bf8 <cpu_irq_enter_critical+0x34>)
    4bec:	3101      	adds	r1, #1
    4bee:	7011      	strb	r1, [r2, #0]
    4bf0:	e7f2      	b.n	4bd8 <cpu_irq_enter_critical+0x14>
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	20004400 	.word	0x20004400
    4bf8:	20004404 	.word	0x20004404
    4bfc:	200000d0 	.word	0x200000d0

00004c00 <cpu_irq_leave_critical>:
    4c00:	4b08      	ldr	r3, [pc, #32]	; (4c24 <cpu_irq_leave_critical+0x24>)
    4c02:	681a      	ldr	r2, [r3, #0]
    4c04:	3a01      	subs	r2, #1
    4c06:	601a      	str	r2, [r3, #0]
    4c08:	681b      	ldr	r3, [r3, #0]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d109      	bne.n	4c22 <cpu_irq_leave_critical+0x22>
    4c0e:	4b06      	ldr	r3, [pc, #24]	; (4c28 <cpu_irq_leave_critical+0x28>)
    4c10:	781b      	ldrb	r3, [r3, #0]
    4c12:	2b00      	cmp	r3, #0
    4c14:	d005      	beq.n	4c22 <cpu_irq_leave_critical+0x22>
    4c16:	2201      	movs	r2, #1
    4c18:	4b04      	ldr	r3, [pc, #16]	; (4c2c <cpu_irq_leave_critical+0x2c>)
    4c1a:	701a      	strb	r2, [r3, #0]
    4c1c:	f3bf 8f5f 	dmb	sy
    4c20:	b662      	cpsie	i
    4c22:	4770      	bx	lr
    4c24:	20004400 	.word	0x20004400
    4c28:	20004404 	.word	0x20004404
    4c2c:	200000d0 	.word	0x200000d0

00004c30 <uart1_irq>:
    4c30:	b538      	push	{r3, r4, r5, lr}
    4c32:	4a10      	ldr	r2, [pc, #64]	; (4c74 <uart1_irq+0x44>)
    4c34:	4d10      	ldr	r5, [pc, #64]	; (4c78 <uart1_irq+0x48>)
    4c36:	7e14      	ldrb	r4, [r2, #24]
    4c38:	6868      	ldr	r0, [r5, #4]
    4c3a:	7d93      	ldrb	r3, [r2, #22]
    4c3c:	b2e4      	uxtb	r4, r4
    4c3e:	b2db      	uxtb	r3, r3
    4c40:	2800      	cmp	r0, #0
    4c42:	d016      	beq.n	4c72 <uart1_irq+0x42>
    4c44:	401c      	ands	r4, r3
    4c46:	2302      	movs	r3, #2
    4c48:	4223      	tst	r3, r4
    4c4a:	d006      	beq.n	4c5a <uart1_irq+0x2a>
    4c4c:	7613      	strb	r3, [r2, #24]
    4c4e:	4b0b      	ldr	r3, [pc, #44]	; (4c7c <uart1_irq+0x4c>)
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d001      	beq.n	4c5a <uart1_irq+0x2a>
    4c56:	2101      	movs	r1, #1
    4c58:	4798      	blx	r3
    4c5a:	2304      	movs	r3, #4
    4c5c:	4223      	tst	r3, r4
    4c5e:	d008      	beq.n	4c72 <uart1_irq+0x42>
    4c60:	4a04      	ldr	r2, [pc, #16]	; (4c74 <uart1_irq+0x44>)
    4c62:	7613      	strb	r3, [r2, #24]
    4c64:	4b05      	ldr	r3, [pc, #20]	; (4c7c <uart1_irq+0x4c>)
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d002      	beq.n	4c72 <uart1_irq+0x42>
    4c6c:	6868      	ldr	r0, [r5, #4]
    4c6e:	2100      	movs	r1, #0
    4c70:	4798      	blx	r3
    4c72:	bd38      	pop	{r3, r4, r5, pc}
    4c74:	42000c00 	.word	0x42000c00
    4c78:	2000440c 	.word	0x2000440c
    4c7c:	20004424 	.word	0x20004424

00004c80 <uart4_irq>:
    4c80:	b538      	push	{r3, r4, r5, lr}
    4c82:	4a10      	ldr	r2, [pc, #64]	; (4cc4 <uart4_irq+0x44>)
    4c84:	4d10      	ldr	r5, [pc, #64]	; (4cc8 <uart4_irq+0x48>)
    4c86:	7e14      	ldrb	r4, [r2, #24]
    4c88:	6928      	ldr	r0, [r5, #16]
    4c8a:	7d93      	ldrb	r3, [r2, #22]
    4c8c:	b2e4      	uxtb	r4, r4
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	2800      	cmp	r0, #0
    4c92:	d016      	beq.n	4cc2 <uart4_irq+0x42>
    4c94:	401c      	ands	r4, r3
    4c96:	2302      	movs	r3, #2
    4c98:	4223      	tst	r3, r4
    4c9a:	d006      	beq.n	4caa <uart4_irq+0x2a>
    4c9c:	7613      	strb	r3, [r2, #24]
    4c9e:	4b0b      	ldr	r3, [pc, #44]	; (4ccc <uart4_irq+0x4c>)
    4ca0:	681b      	ldr	r3, [r3, #0]
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d001      	beq.n	4caa <uart4_irq+0x2a>
    4ca6:	2101      	movs	r1, #1
    4ca8:	4798      	blx	r3
    4caa:	2304      	movs	r3, #4
    4cac:	4223      	tst	r3, r4
    4cae:	d008      	beq.n	4cc2 <uart4_irq+0x42>
    4cb0:	4a04      	ldr	r2, [pc, #16]	; (4cc4 <uart4_irq+0x44>)
    4cb2:	7613      	strb	r3, [r2, #24]
    4cb4:	4b05      	ldr	r3, [pc, #20]	; (4ccc <uart4_irq+0x4c>)
    4cb6:	681b      	ldr	r3, [r3, #0]
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d002      	beq.n	4cc2 <uart4_irq+0x42>
    4cbc:	6928      	ldr	r0, [r5, #16]
    4cbe:	2100      	movs	r1, #0
    4cc0:	4798      	blx	r3
    4cc2:	bd38      	pop	{r3, r4, r5, pc}
    4cc4:	42001800 	.word	0x42001800
    4cc8:	2000440c 	.word	0x2000440c
    4ccc:	20004424 	.word	0x20004424

00004cd0 <uart0_irq>:
    4cd0:	b538      	push	{r3, r4, r5, lr}
    4cd2:	4a10      	ldr	r2, [pc, #64]	; (4d14 <uart0_irq+0x44>)
    4cd4:	4d10      	ldr	r5, [pc, #64]	; (4d18 <uart0_irq+0x48>)
    4cd6:	7e14      	ldrb	r4, [r2, #24]
    4cd8:	6828      	ldr	r0, [r5, #0]
    4cda:	7d93      	ldrb	r3, [r2, #22]
    4cdc:	b2e4      	uxtb	r4, r4
    4cde:	b2db      	uxtb	r3, r3
    4ce0:	2800      	cmp	r0, #0
    4ce2:	d016      	beq.n	4d12 <uart0_irq+0x42>
    4ce4:	401c      	ands	r4, r3
    4ce6:	2302      	movs	r3, #2
    4ce8:	4223      	tst	r3, r4
    4cea:	d006      	beq.n	4cfa <uart0_irq+0x2a>
    4cec:	7613      	strb	r3, [r2, #24]
    4cee:	4b0b      	ldr	r3, [pc, #44]	; (4d1c <uart0_irq+0x4c>)
    4cf0:	681b      	ldr	r3, [r3, #0]
    4cf2:	2b00      	cmp	r3, #0
    4cf4:	d001      	beq.n	4cfa <uart0_irq+0x2a>
    4cf6:	2101      	movs	r1, #1
    4cf8:	4798      	blx	r3
    4cfa:	2304      	movs	r3, #4
    4cfc:	4223      	tst	r3, r4
    4cfe:	d008      	beq.n	4d12 <uart0_irq+0x42>
    4d00:	4a04      	ldr	r2, [pc, #16]	; (4d14 <uart0_irq+0x44>)
    4d02:	7613      	strb	r3, [r2, #24]
    4d04:	4b05      	ldr	r3, [pc, #20]	; (4d1c <uart0_irq+0x4c>)
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d002      	beq.n	4d12 <uart0_irq+0x42>
    4d0c:	6828      	ldr	r0, [r5, #0]
    4d0e:	2100      	movs	r1, #0
    4d10:	4798      	blx	r3
    4d12:	bd38      	pop	{r3, r4, r5, pc}
    4d14:	42000800 	.word	0x42000800
    4d18:	2000440c 	.word	0x2000440c
    4d1c:	20004424 	.word	0x20004424

00004d20 <uart5_irq>:
    4d20:	b538      	push	{r3, r4, r5, lr}
    4d22:	4a10      	ldr	r2, [pc, #64]	; (4d64 <uart5_irq+0x44>)
    4d24:	4d10      	ldr	r5, [pc, #64]	; (4d68 <uart5_irq+0x48>)
    4d26:	7e14      	ldrb	r4, [r2, #24]
    4d28:	6968      	ldr	r0, [r5, #20]
    4d2a:	7d93      	ldrb	r3, [r2, #22]
    4d2c:	b2e4      	uxtb	r4, r4
    4d2e:	b2db      	uxtb	r3, r3
    4d30:	2800      	cmp	r0, #0
    4d32:	d016      	beq.n	4d62 <uart5_irq+0x42>
    4d34:	401c      	ands	r4, r3
    4d36:	2302      	movs	r3, #2
    4d38:	4223      	tst	r3, r4
    4d3a:	d006      	beq.n	4d4a <uart5_irq+0x2a>
    4d3c:	7613      	strb	r3, [r2, #24]
    4d3e:	4b0b      	ldr	r3, [pc, #44]	; (4d6c <uart5_irq+0x4c>)
    4d40:	681b      	ldr	r3, [r3, #0]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d001      	beq.n	4d4a <uart5_irq+0x2a>
    4d46:	2101      	movs	r1, #1
    4d48:	4798      	blx	r3
    4d4a:	2304      	movs	r3, #4
    4d4c:	4223      	tst	r3, r4
    4d4e:	d008      	beq.n	4d62 <uart5_irq+0x42>
    4d50:	4a04      	ldr	r2, [pc, #16]	; (4d64 <uart5_irq+0x44>)
    4d52:	7613      	strb	r3, [r2, #24]
    4d54:	4b05      	ldr	r3, [pc, #20]	; (4d6c <uart5_irq+0x4c>)
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d002      	beq.n	4d62 <uart5_irq+0x42>
    4d5c:	6968      	ldr	r0, [r5, #20]
    4d5e:	2100      	movs	r1, #0
    4d60:	4798      	blx	r3
    4d62:	bd38      	pop	{r3, r4, r5, pc}
    4d64:	42001c00 	.word	0x42001c00
    4d68:	2000440c 	.word	0x2000440c
    4d6c:	20004424 	.word	0x20004424

00004d70 <uart2_irq>:
    4d70:	b538      	push	{r3, r4, r5, lr}
    4d72:	4a10      	ldr	r2, [pc, #64]	; (4db4 <uart2_irq+0x44>)
    4d74:	4d10      	ldr	r5, [pc, #64]	; (4db8 <uart2_irq+0x48>)
    4d76:	7e14      	ldrb	r4, [r2, #24]
    4d78:	68a8      	ldr	r0, [r5, #8]
    4d7a:	7d93      	ldrb	r3, [r2, #22]
    4d7c:	b2e4      	uxtb	r4, r4
    4d7e:	b2db      	uxtb	r3, r3
    4d80:	2800      	cmp	r0, #0
    4d82:	d016      	beq.n	4db2 <uart2_irq+0x42>
    4d84:	401c      	ands	r4, r3
    4d86:	2302      	movs	r3, #2
    4d88:	4223      	tst	r3, r4
    4d8a:	d006      	beq.n	4d9a <uart2_irq+0x2a>
    4d8c:	7613      	strb	r3, [r2, #24]
    4d8e:	4b0b      	ldr	r3, [pc, #44]	; (4dbc <uart2_irq+0x4c>)
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d001      	beq.n	4d9a <uart2_irq+0x2a>
    4d96:	2101      	movs	r1, #1
    4d98:	4798      	blx	r3
    4d9a:	2304      	movs	r3, #4
    4d9c:	4223      	tst	r3, r4
    4d9e:	d008      	beq.n	4db2 <uart2_irq+0x42>
    4da0:	4a04      	ldr	r2, [pc, #16]	; (4db4 <uart2_irq+0x44>)
    4da2:	7613      	strb	r3, [r2, #24]
    4da4:	4b05      	ldr	r3, [pc, #20]	; (4dbc <uart2_irq+0x4c>)
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	2b00      	cmp	r3, #0
    4daa:	d002      	beq.n	4db2 <uart2_irq+0x42>
    4dac:	68a8      	ldr	r0, [r5, #8]
    4dae:	2100      	movs	r1, #0
    4db0:	4798      	blx	r3
    4db2:	bd38      	pop	{r3, r4, r5, pc}
    4db4:	42001000 	.word	0x42001000
    4db8:	2000440c 	.word	0x2000440c
    4dbc:	20004424 	.word	0x20004424

00004dc0 <uart3_irq>:
    4dc0:	b538      	push	{r3, r4, r5, lr}
    4dc2:	4a10      	ldr	r2, [pc, #64]	; (4e04 <uart3_irq+0x44>)
    4dc4:	4d10      	ldr	r5, [pc, #64]	; (4e08 <uart3_irq+0x48>)
    4dc6:	7e14      	ldrb	r4, [r2, #24]
    4dc8:	68e8      	ldr	r0, [r5, #12]
    4dca:	7d93      	ldrb	r3, [r2, #22]
    4dcc:	b2e4      	uxtb	r4, r4
    4dce:	b2db      	uxtb	r3, r3
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d016      	beq.n	4e02 <uart3_irq+0x42>
    4dd4:	401c      	ands	r4, r3
    4dd6:	2302      	movs	r3, #2
    4dd8:	4223      	tst	r3, r4
    4dda:	d006      	beq.n	4dea <uart3_irq+0x2a>
    4ddc:	7613      	strb	r3, [r2, #24]
    4dde:	4b0b      	ldr	r3, [pc, #44]	; (4e0c <uart3_irq+0x4c>)
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d001      	beq.n	4dea <uart3_irq+0x2a>
    4de6:	2101      	movs	r1, #1
    4de8:	4798      	blx	r3
    4dea:	2304      	movs	r3, #4
    4dec:	4223      	tst	r3, r4
    4dee:	d008      	beq.n	4e02 <uart3_irq+0x42>
    4df0:	4a04      	ldr	r2, [pc, #16]	; (4e04 <uart3_irq+0x44>)
    4df2:	7613      	strb	r3, [r2, #24]
    4df4:	4b05      	ldr	r3, [pc, #20]	; (4e0c <uart3_irq+0x4c>)
    4df6:	681b      	ldr	r3, [r3, #0]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d002      	beq.n	4e02 <uart3_irq+0x42>
    4dfc:	68e8      	ldr	r0, [r5, #12]
    4dfe:	2100      	movs	r1, #0
    4e00:	4798      	blx	r3
    4e02:	bd38      	pop	{r3, r4, r5, pc}
    4e04:	42001400 	.word	0x42001400
    4e08:	2000440c 	.word	0x2000440c
    4e0c:	20004424 	.word	0x20004424

00004e10 <usart_set_config_default>:
    4e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e12:	464f      	mov	r7, r9
    4e14:	4646      	mov	r6, r8
    4e16:	b4c0      	push	{r6, r7}
    4e18:	1c04      	adds	r4, r0, #0
    4e1a:	b085      	sub	sp, #20
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d05c      	beq.n	4eda <usart_set_config_default+0xca>
    4e20:	6800      	ldr	r0, [r0, #0]
    4e22:	f000 ff59 	bl	5cd8 <_sercom_get_sercom_inst_index>
    4e26:	250e      	movs	r5, #14
    4e28:	2300      	movs	r3, #0
    4e2a:	3014      	adds	r0, #20
    4e2c:	446d      	add	r5, sp
    4e2e:	b2c0      	uxtb	r0, r0
    4e30:	802b      	strh	r3, [r5, #0]
    4e32:	69a7      	ldr	r7, [r4, #24]
    4e34:	6966      	ldr	r6, [r4, #20]
    4e36:	f7ff fea3 	bl	4b80 <system_gclk_chan_get_hz>
    4e3a:	2310      	movs	r3, #16
    4e3c:	1c01      	adds	r1, r0, #0
    4e3e:	9300      	str	r3, [sp, #0]
    4e40:	1c38      	adds	r0, r7, #0
    4e42:	1c2a      	adds	r2, r5, #0
    4e44:	2300      	movs	r3, #0
    4e46:	f000 fe5f 	bl	5b08 <_sercom_get_async_baud_val>
    4e4a:	6822      	ldr	r2, [r4, #0]
    4e4c:	69d3      	ldr	r3, [r2, #28]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d1fc      	bne.n	4e4c <usart_set_config_default+0x3c>
    4e52:	882b      	ldrh	r3, [r5, #0]
    4e54:	8193      	strh	r3, [r2, #12]
    4e56:	68e2      	ldr	r2, [r4, #12]
    4e58:	6923      	ldr	r3, [r4, #16]
    4e5a:	4313      	orrs	r3, r2
    4e5c:	221d      	movs	r2, #29
    4e5e:	56a2      	ldrsb	r2, [r4, r2]
    4e60:	3201      	adds	r2, #1
    4e62:	d028      	beq.n	4eb6 <usart_set_config_default+0xa6>
    4e64:	25c0      	movs	r5, #192	; 0xc0
    4e66:	02ad      	lsls	r5, r5, #10
    4e68:	431d      	orrs	r5, r3
    4e6a:	231c      	movs	r3, #28
    4e6c:	56e3      	ldrsb	r3, [r4, r3]
    4e6e:	3301      	adds	r3, #1
    4e70:	d019      	beq.n	4ea6 <usart_set_config_default+0x96>
    4e72:	68a2      	ldr	r2, [r4, #8]
    4e74:	2aff      	cmp	r2, #255	; 0xff
    4e76:	d01b      	beq.n	4eb0 <usart_set_config_default+0xa0>
    4e78:	4b29      	ldr	r3, [pc, #164]	; (4f20 <usart_set_config_default+0x110>)
    4e7a:	4315      	orrs	r5, r2
    4e7c:	431e      	orrs	r6, r3
    4e7e:	2c00      	cmp	r4, #0
    4e80:	d025      	beq.n	4ece <usart_set_config_default+0xbe>
    4e82:	6822      	ldr	r2, [r4, #0]
    4e84:	69d3      	ldr	r3, [r2, #28]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d1fc      	bne.n	4e84 <usart_set_config_default+0x74>
    4e8a:	6055      	str	r5, [r2, #4]
    4e8c:	2c00      	cmp	r4, #0
    4e8e:	d018      	beq.n	4ec2 <usart_set_config_default+0xb2>
    4e90:	6822      	ldr	r2, [r4, #0]
    4e92:	69d3      	ldr	r3, [r2, #28]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d1fc      	bne.n	4e92 <usart_set_config_default+0x82>
    4e98:	2000      	movs	r0, #0
    4e9a:	6016      	str	r6, [r2, #0]
    4e9c:	b005      	add	sp, #20
    4e9e:	bc0c      	pop	{r2, r3}
    4ea0:	4690      	mov	r8, r2
    4ea2:	4699      	mov	r9, r3
    4ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ea6:	4b1f      	ldr	r3, [pc, #124]	; (4f24 <usart_set_config_default+0x114>)
    4ea8:	68a2      	ldr	r2, [r4, #8]
    4eaa:	401d      	ands	r5, r3
    4eac:	2aff      	cmp	r2, #255	; 0xff
    4eae:	d1e3      	bne.n	4e78 <usart_set_config_default+0x68>
    4eb0:	4b1d      	ldr	r3, [pc, #116]	; (4f28 <usart_set_config_default+0x118>)
    4eb2:	431e      	orrs	r6, r3
    4eb4:	e7e3      	b.n	4e7e <usart_set_config_default+0x6e>
    4eb6:	4d1d      	ldr	r5, [pc, #116]	; (4f2c <usart_set_config_default+0x11c>)
    4eb8:	401d      	ands	r5, r3
    4eba:	2380      	movs	r3, #128	; 0x80
    4ebc:	025b      	lsls	r3, r3, #9
    4ebe:	431d      	orrs	r5, r3
    4ec0:	e7d3      	b.n	4e6a <usart_set_config_default+0x5a>
    4ec2:	481b      	ldr	r0, [pc, #108]	; (4f30 <usart_set_config_default+0x120>)
    4ec4:	491b      	ldr	r1, [pc, #108]	; (4f34 <usart_set_config_default+0x124>)
    4ec6:	223f      	movs	r2, #63	; 0x3f
    4ec8:	f000 fd86 	bl	59d8 <mbed_assert_internal>
    4ecc:	e7e0      	b.n	4e90 <usart_set_config_default+0x80>
    4ece:	4818      	ldr	r0, [pc, #96]	; (4f30 <usart_set_config_default+0x120>)
    4ed0:	4918      	ldr	r1, [pc, #96]	; (4f34 <usart_set_config_default+0x124>)
    4ed2:	223f      	movs	r2, #63	; 0x3f
    4ed4:	f000 fd80 	bl	59d8 <mbed_assert_internal>
    4ed8:	e7d3      	b.n	4e82 <usart_set_config_default+0x72>
    4eda:	4b15      	ldr	r3, [pc, #84]	; (4f30 <usart_set_config_default+0x120>)
    4edc:	4f15      	ldr	r7, [pc, #84]	; (4f34 <usart_set_config_default+0x124>)
    4ede:	1c18      	adds	r0, r3, #0
    4ee0:	1c39      	adds	r1, r7, #0
    4ee2:	229c      	movs	r2, #156	; 0x9c
    4ee4:	4698      	mov	r8, r3
    4ee6:	f000 fd77 	bl	59d8 <mbed_assert_internal>
    4eea:	6820      	ldr	r0, [r4, #0]
    4eec:	f000 fef4 	bl	5cd8 <_sercom_get_sercom_inst_index>
    4ef0:	250e      	movs	r5, #14
    4ef2:	69a3      	ldr	r3, [r4, #24]
    4ef4:	3014      	adds	r0, #20
    4ef6:	446d      	add	r5, sp
    4ef8:	b2c0      	uxtb	r0, r0
    4efa:	4699      	mov	r9, r3
    4efc:	802c      	strh	r4, [r5, #0]
    4efe:	6966      	ldr	r6, [r4, #20]
    4f00:	f7ff fe3e 	bl	4b80 <system_gclk_chan_get_hz>
    4f04:	2310      	movs	r3, #16
    4f06:	1c01      	adds	r1, r0, #0
    4f08:	9300      	str	r3, [sp, #0]
    4f0a:	1c2a      	adds	r2, r5, #0
    4f0c:	4648      	mov	r0, r9
    4f0e:	2300      	movs	r3, #0
    4f10:	f000 fdfa 	bl	5b08 <_sercom_get_async_baud_val>
    4f14:	4640      	mov	r0, r8
    4f16:	1c39      	adds	r1, r7, #0
    4f18:	223f      	movs	r2, #63	; 0x3f
    4f1a:	f000 fd5d 	bl	59d8 <mbed_assert_internal>
    4f1e:	e794      	b.n	4e4a <usart_set_config_default+0x3a>
    4f20:	41000004 	.word	0x41000004
    4f24:	fffeffff 	.word	0xfffeffff
    4f28:	40000004 	.word	0x40000004
    4f2c:	fffdffff 	.word	0xfffdffff
    4f30:	0000fe88 	.word	0x0000fe88
    4f34:	0000fe8c 	.word	0x0000fe8c

00004f38 <serial_find_mux_settings>:
    4f38:	b570      	push	{r4, r5, r6, lr}
    4f3a:	1c05      	adds	r5, r0, #0
    4f3c:	b086      	sub	sp, #24
    4f3e:	2800      	cmp	r0, #0
    4f40:	d03c      	beq.n	4fbc <serial_find_mux_settings+0x84>
    4f42:	201c      	movs	r0, #28
    4f44:	211d      	movs	r1, #29
    4f46:	2300      	movs	r3, #0
    4f48:	5628      	ldrsb	r0, [r5, r0]
    4f4a:	5669      	ldrsb	r1, [r5, r1]
    4f4c:	9302      	str	r3, [sp, #8]
    4f4e:	9303      	str	r3, [sp, #12]
    4f50:	9304      	str	r3, [sp, #16]
    4f52:	9305      	str	r3, [sp, #20]
    4f54:	f001 f916 	bl	6184 <pinmap_merge_sercom>
    4f58:	2400      	movs	r4, #0
    4f5a:	1c06      	adds	r6, r0, #0
    4f5c:	201c      	movs	r0, #28
    4f5e:	192b      	adds	r3, r5, r4
    4f60:	5618      	ldrsb	r0, [r3, r0]
    4f62:	1c31      	adds	r1, r6, #0
    4f64:	f001 f99e 	bl	62a4 <pinmap_pad_sercom>
    4f68:	00a3      	lsls	r3, r4, #2
    4f6a:	aa02      	add	r2, sp, #8
    4f6c:	3401      	adds	r4, #1
    4f6e:	50d0      	str	r0, [r2, r3]
    4f70:	2c04      	cmp	r4, #4
    4f72:	d1f3      	bne.n	4f5c <serial_find_mux_settings+0x24>
    4f74:	9b03      	ldr	r3, [sp, #12]
    4f76:	2000      	movs	r0, #0
    4f78:	9301      	str	r3, [sp, #4]
    4f7a:	3b01      	subs	r3, #1
    4f7c:	2b02      	cmp	r3, #2
    4f7e:	d802      	bhi.n	4f86 <serial_find_mux_settings+0x4e>
    4f80:	4a11      	ldr	r2, [pc, #68]	; (4fc8 <serial_find_mux_settings+0x90>)
    4f82:	009b      	lsls	r3, r3, #2
    4f84:	5898      	ldr	r0, [r3, r2]
    4f86:	221e      	movs	r2, #30
    4f88:	5eab      	ldrsh	r3, [r5, r2]
    4f8a:	3301      	adds	r3, #1
    4f8c:	d008      	beq.n	4fa0 <serial_find_mux_settings+0x68>
    4f8e:	9b02      	ldr	r3, [sp, #8]
    4f90:	2b00      	cmp	r3, #0
    4f92:	d103      	bne.n	4f9c <serial_find_mux_settings+0x64>
    4f94:	9b04      	ldr	r3, [sp, #16]
    4f96:	9301      	str	r3, [sp, #4]
    4f98:	2b02      	cmp	r3, #2
    4f9a:	d008      	beq.n	4fae <serial_find_mux_settings+0x76>
    4f9c:	b006      	add	sp, #24
    4f9e:	bd70      	pop	{r4, r5, r6, pc}
    4fa0:	9b02      	ldr	r3, [sp, #8]
    4fa2:	2b02      	cmp	r3, #2
    4fa4:	d1fa      	bne.n	4f9c <serial_find_mux_settings+0x64>
    4fa6:	2380      	movs	r3, #128	; 0x80
    4fa8:	025b      	lsls	r3, r3, #9
    4faa:	4318      	orrs	r0, r3
    4fac:	e7f6      	b.n	4f9c <serial_find_mux_settings+0x64>
    4fae:	9b05      	ldr	r3, [sp, #20]
    4fb0:	2b03      	cmp	r3, #3
    4fb2:	d1f3      	bne.n	4f9c <serial_find_mux_settings+0x64>
    4fb4:	2380      	movs	r3, #128	; 0x80
    4fb6:	029b      	lsls	r3, r3, #10
    4fb8:	4318      	orrs	r0, r3
    4fba:	e7ef      	b.n	4f9c <serial_find_mux_settings+0x64>
    4fbc:	4803      	ldr	r0, [pc, #12]	; (4fcc <serial_find_mux_settings+0x94>)
    4fbe:	4904      	ldr	r1, [pc, #16]	; (4fd0 <serial_find_mux_settings+0x98>)
    4fc0:	2271      	movs	r2, #113	; 0x71
    4fc2:	f000 fd09 	bl	59d8 <mbed_assert_internal>
    4fc6:	e7bc      	b.n	4f42 <serial_find_mux_settings+0xa>
    4fc8:	0000fe7c 	.word	0x0000fe7c
    4fcc:	0000fe88 	.word	0x0000fe88
    4fd0:	0000fe8c 	.word	0x0000fe8c

00004fd4 <get_default_serial_values>:
    4fd4:	b510      	push	{r4, lr}
    4fd6:	1e04      	subs	r4, r0, #0
    4fd8:	d00b      	beq.n	4ff2 <get_default_serial_values+0x1e>
    4fda:	23ff      	movs	r3, #255	; 0xff
    4fdc:	60a3      	str	r3, [r4, #8]
    4fde:	2300      	movs	r3, #0
    4fe0:	60e3      	str	r3, [r4, #12]
    4fe2:	6123      	str	r3, [r4, #16]
    4fe4:	2396      	movs	r3, #150	; 0x96
    4fe6:	019b      	lsls	r3, r3, #6
    4fe8:	61a3      	str	r3, [r4, #24]
    4fea:	2388      	movs	r3, #136	; 0x88
    4fec:	035b      	lsls	r3, r3, #13
    4fee:	6163      	str	r3, [r4, #20]
    4ff0:	bd10      	pop	{r4, pc}
    4ff2:	4803      	ldr	r0, [pc, #12]	; (5000 <get_default_serial_values+0x2c>)
    4ff4:	4903      	ldr	r1, [pc, #12]	; (5004 <get_default_serial_values+0x30>)
    4ff6:	22e1      	movs	r2, #225	; 0xe1
    4ff8:	f000 fcee 	bl	59d8 <mbed_assert_internal>
    4ffc:	e7ed      	b.n	4fda <get_default_serial_values+0x6>
    4ffe:	46c0      	nop			; (mov r8, r8)
    5000:	0000fe88 	.word	0x0000fe88
    5004:	0000fe8c 	.word	0x0000fe8c

00005008 <serial_init>:
    5008:	b5f0      	push	{r4, r5, r6, r7, lr}
    500a:	464e      	mov	r6, r9
    500c:	4645      	mov	r5, r8
    500e:	4657      	mov	r7, sl
    5010:	b4e0      	push	{r5, r6, r7}
    5012:	1c04      	adds	r4, r0, #0
    5014:	b084      	sub	sp, #16
    5016:	1c0e      	adds	r6, r1, #0
    5018:	1c15      	adds	r5, r2, #0
    501a:	2800      	cmp	r0, #0
    501c:	d100      	bne.n	5020 <serial_init+0x18>
    501e:	e09d      	b.n	515c <serial_init+0x154>
    5020:	4f60      	ldr	r7, [pc, #384]	; (51a4 <serial_init+0x19c>)
    5022:	783b      	ldrb	r3, [r7, #0]
    5024:	2b00      	cmp	r3, #0
    5026:	d100      	bne.n	502a <serial_init+0x22>
    5028:	e083      	b.n	5132 <serial_init+0x12a>
    502a:	1c20      	adds	r0, r4, #0
    502c:	f7ff ffd2 	bl	4fd4 <get_default_serial_values>
    5030:	23ff      	movs	r3, #255	; 0xff
    5032:	7726      	strb	r6, [r4, #28]
    5034:	77a3      	strb	r3, [r4, #30]
    5036:	77e3      	strb	r3, [r4, #31]
    5038:	7765      	strb	r5, [r4, #29]
    503a:	1c20      	adds	r0, r4, #0
    503c:	f7ff ff7c 	bl	4f38 <serial_find_mux_settings>
    5040:	1c29      	adds	r1, r5, #0
    5042:	1c07      	adds	r7, r0, #0
    5044:	1c30      	adds	r0, r6, #0
    5046:	f001 f89d 	bl	6184 <pinmap_merge_sercom>
    504a:	1c43      	adds	r3, r0, #1
    504c:	d017      	beq.n	507e <serial_init+0x76>
    504e:	250f      	movs	r5, #15
    5050:	4005      	ands	r5, r0
    5052:	2001      	movs	r0, #1
    5054:	1c29      	adds	r1, r5, #0
    5056:	4240      	negs	r0, r0
    5058:	f001 f946 	bl	62e8 <pinmap_peripheral_sercom>
    505c:	1c06      	adds	r6, r0, #0
    505e:	1c02      	adds	r2, r0, #0
    5060:	6020      	str	r0, [r4, #0]
    5062:	2c00      	cmp	r4, #0
    5064:	d06a      	beq.n	513c <serial_init+0x134>
    5066:	69d3      	ldr	r3, [r2, #28]
    5068:	2b00      	cmp	r3, #0
    506a:	d1fc      	bne.n	5066 <serial_init+0x5e>
    506c:	2102      	movs	r1, #2
    506e:	6813      	ldr	r3, [r2, #0]
    5070:	438b      	bics	r3, r1
    5072:	6013      	str	r3, [r2, #0]
    5074:	2201      	movs	r2, #1
    5076:	6823      	ldr	r3, [r4, #0]
    5078:	6818      	ldr	r0, [r3, #0]
    507a:	4202      	tst	r2, r0
    507c:	d005      	beq.n	508a <serial_init+0x82>
    507e:	b004      	add	sp, #16
    5080:	bc1c      	pop	{r2, r3, r4}
    5082:	4690      	mov	r8, r2
    5084:	4699      	mov	r9, r3
    5086:	46a2      	mov	sl, r4
    5088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	4019      	ands	r1, r3
    508e:	4688      	mov	r8, r1
    5090:	d1f5      	bne.n	507e <serial_init+0x76>
    5092:	1ca8      	adds	r0, r5, #2
    5094:	4082      	lsls	r2, r0
    5096:	4944      	ldr	r1, [pc, #272]	; (51a8 <serial_init+0x1a0>)
    5098:	6a0b      	ldr	r3, [r1, #32]
    509a:	431a      	orrs	r2, r3
    509c:	620a      	str	r2, [r1, #32]
    509e:	4642      	mov	r2, r8
    50a0:	ab02      	add	r3, sp, #8
    50a2:	701a      	strb	r2, [r3, #0]
    50a4:	2314      	movs	r3, #20
    50a6:	4699      	mov	r9, r3
    50a8:	44a9      	add	r9, r5
    50aa:	a902      	add	r1, sp, #8
    50ac:	4648      	mov	r0, r9
    50ae:	f7ff fd5b 	bl	4b68 <system_gclk_chan_set_config>
    50b2:	4648      	mov	r0, r9
    50b4:	f7ff fd1a 	bl	4aec <system_gclk_chan_enable>
    50b8:	2100      	movs	r1, #0
    50ba:	2000      	movs	r0, #0
    50bc:	f000 fdec 	bl	5c98 <sercom_set_gclk_generator>
    50c0:	6167      	str	r7, [r4, #20]
    50c2:	1c20      	adds	r0, r4, #0
    50c4:	f7ff fea4 	bl	4e10 <usart_set_config_default>
    50c8:	4642      	mov	r2, r8
    50ca:	ab02      	add	r3, sp, #8
    50cc:	715a      	strb	r2, [r3, #5]
    50ce:	719a      	strb	r2, [r3, #6]
    50d0:	71da      	strb	r2, [r3, #7]
    50d2:	2320      	movs	r3, #32
    50d4:	1c27      	adds	r7, r4, #0
    50d6:	469a      	mov	sl, r3
    50d8:	371c      	adds	r7, #28
    50da:	44a2      	add	sl, r4
    50dc:	2300      	movs	r3, #0
    50de:	56fb      	ldrsb	r3, [r7, r3]
    50e0:	4699      	mov	r9, r3
    50e2:	3301      	adds	r3, #1
    50e4:	d00f      	beq.n	5106 <serial_init+0xfe>
    50e6:	4648      	mov	r0, r9
    50e8:	1c29      	adds	r1, r5, #0
    50ea:	f001 f8b7 	bl	625c <pinmap_function_sercom>
    50ee:	ab02      	add	r3, sp, #8
    50f0:	b2c0      	uxtb	r0, r0
    50f2:	7118      	strb	r0, [r3, #4]
    50f4:	28ff      	cmp	r0, #255	; 0xff
    50f6:	d006      	beq.n	5106 <serial_init+0xfe>
    50f8:	466a      	mov	r2, sp
    50fa:	464b      	mov	r3, r9
    50fc:	71d3      	strb	r3, [r2, #7]
    50fe:	79d0      	ldrb	r0, [r2, #7]
    5100:	a903      	add	r1, sp, #12
    5102:	f7ff fc27 	bl	4954 <system_pinmux_pin_set_config>
    5106:	3701      	adds	r7, #1
    5108:	4557      	cmp	r7, sl
    510a:	d1e7      	bne.n	50dc <serial_init+0xd4>
    510c:	4b27      	ldr	r3, [pc, #156]	; (51ac <serial_init+0x1a4>)
    510e:	429e      	cmp	r6, r3
    5110:	d030      	beq.n	5174 <serial_init+0x16c>
    5112:	2c00      	cmp	r4, #0
    5114:	d028      	beq.n	5168 <serial_init+0x160>
    5116:	6823      	ldr	r3, [r4, #0]
    5118:	69da      	ldr	r2, [r3, #28]
    511a:	2a00      	cmp	r2, #0
    511c:	d1fc      	bne.n	5118 <serial_init+0x110>
    511e:	2c00      	cmp	r4, #0
    5120:	d031      	beq.n	5186 <serial_init+0x17e>
    5122:	69da      	ldr	r2, [r3, #28]
    5124:	2a00      	cmp	r2, #0
    5126:	d1fc      	bne.n	5122 <serial_init+0x11a>
    5128:	6819      	ldr	r1, [r3, #0]
    512a:	3202      	adds	r2, #2
    512c:	430a      	orrs	r2, r1
    512e:	601a      	str	r2, [r3, #0]
    5130:	e7a5      	b.n	507e <serial_init+0x76>
    5132:	f7ff fd3b 	bl	4bac <system_init>
    5136:	2301      	movs	r3, #1
    5138:	703b      	strb	r3, [r7, #0]
    513a:	e776      	b.n	502a <serial_init+0x22>
    513c:	4b1c      	ldr	r3, [pc, #112]	; (51b0 <serial_init+0x1a8>)
    513e:	2256      	movs	r2, #86	; 0x56
    5140:	4699      	mov	r9, r3
    5142:	4b1c      	ldr	r3, [pc, #112]	; (51b4 <serial_init+0x1ac>)
    5144:	4648      	mov	r0, r9
    5146:	4698      	mov	r8, r3
    5148:	1c19      	adds	r1, r3, #0
    514a:	f000 fc45 	bl	59d8 <mbed_assert_internal>
    514e:	223f      	movs	r2, #63	; 0x3f
    5150:	4648      	mov	r0, r9
    5152:	4641      	mov	r1, r8
    5154:	f000 fc40 	bl	59d8 <mbed_assert_internal>
    5158:	6822      	ldr	r2, [r4, #0]
    515a:	e784      	b.n	5066 <serial_init+0x5e>
    515c:	4814      	ldr	r0, [pc, #80]	; (51b0 <serial_init+0x1a8>)
    515e:	4915      	ldr	r1, [pc, #84]	; (51b4 <serial_init+0x1ac>)
    5160:	22ed      	movs	r2, #237	; 0xed
    5162:	f000 fc39 	bl	59d8 <mbed_assert_internal>
    5166:	e75b      	b.n	5020 <serial_init+0x18>
    5168:	4811      	ldr	r0, [pc, #68]	; (51b0 <serial_init+0x1a8>)
    516a:	4912      	ldr	r1, [pc, #72]	; (51b4 <serial_init+0x1ac>)
    516c:	223f      	movs	r2, #63	; 0x3f
    516e:	f000 fc33 	bl	59d8 <mbed_assert_internal>
    5172:	e7d0      	b.n	5116 <serial_init+0x10e>
    5174:	2201      	movs	r2, #1
    5176:	4b10      	ldr	r3, [pc, #64]	; (51b8 <serial_init+0x1b0>)
    5178:	1c21      	adds	r1, r4, #0
    517a:	601a      	str	r2, [r3, #0]
    517c:	480f      	ldr	r0, [pc, #60]	; (51bc <serial_init+0x1b4>)
    517e:	3247      	adds	r2, #71	; 0x47
    5180:	f005 fc2d 	bl	a9de <memcpy>
    5184:	e7c5      	b.n	5112 <serial_init+0x10a>
    5186:	4e0a      	ldr	r6, [pc, #40]	; (51b0 <serial_init+0x1a8>)
    5188:	4d0a      	ldr	r5, [pc, #40]	; (51b4 <serial_init+0x1ac>)
    518a:	1c30      	adds	r0, r6, #0
    518c:	1c29      	adds	r1, r5, #0
    518e:	324a      	adds	r2, #74	; 0x4a
    5190:	f000 fc22 	bl	59d8 <mbed_assert_internal>
    5194:	1c30      	adds	r0, r6, #0
    5196:	1c29      	adds	r1, r5, #0
    5198:	223f      	movs	r2, #63	; 0x3f
    519a:	f000 fc1d 	bl	59d8 <mbed_assert_internal>
    519e:	6823      	ldr	r3, [r4, #0]
    51a0:	e7bf      	b.n	5122 <serial_init+0x11a>
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	200042fc 	.word	0x200042fc
    51a8:	40000400 	.word	0x40000400
    51ac:	42000800 	.word	0x42000800
    51b0:	0000fe88 	.word	0x0000fe88
    51b4:	0000fe8c 	.word	0x0000fe8c
    51b8:	20004408 	.word	0x20004408
    51bc:	200044a8 	.word	0x200044a8

000051c0 <get_serial_vector>:
    51c0:	b510      	push	{r4, lr}
    51c2:	1e04      	subs	r4, r0, #0
    51c4:	d021      	beq.n	520a <get_serial_vector+0x4a>
    51c6:	6823      	ldr	r3, [r4, #0]
    51c8:	4a13      	ldr	r2, [pc, #76]	; (5218 <get_serial_vector+0x58>)
    51ca:	4293      	cmp	r3, r2
    51cc:	d01b      	beq.n	5206 <get_serial_vector+0x46>
    51ce:	dd0a      	ble.n	51e6 <get_serial_vector+0x26>
    51d0:	4a12      	ldr	r2, [pc, #72]	; (521c <get_serial_vector+0x5c>)
    51d2:	4293      	cmp	r3, r2
    51d4:	d00f      	beq.n	51f6 <get_serial_vector+0x36>
    51d6:	4a12      	ldr	r2, [pc, #72]	; (5220 <get_serial_vector+0x60>)
    51d8:	4293      	cmp	r3, r2
    51da:	d012      	beq.n	5202 <get_serial_vector+0x42>
    51dc:	4a11      	ldr	r2, [pc, #68]	; (5224 <get_serial_vector+0x64>)
    51de:	4293      	cmp	r3, r2
    51e0:	d00b      	beq.n	51fa <get_serial_vector+0x3a>
    51e2:	2000      	movs	r0, #0
    51e4:	e006      	b.n	51f4 <get_serial_vector+0x34>
    51e6:	4a10      	ldr	r2, [pc, #64]	; (5228 <get_serial_vector+0x68>)
    51e8:	4293      	cmp	r3, r2
    51ea:	d008      	beq.n	51fe <get_serial_vector+0x3e>
    51ec:	4a0f      	ldr	r2, [pc, #60]	; (522c <get_serial_vector+0x6c>)
    51ee:	4293      	cmp	r3, r2
    51f0:	d1f7      	bne.n	51e2 <get_serial_vector+0x22>
    51f2:	480f      	ldr	r0, [pc, #60]	; (5230 <get_serial_vector+0x70>)
    51f4:	bd10      	pop	{r4, pc}
    51f6:	480f      	ldr	r0, [pc, #60]	; (5234 <get_serial_vector+0x74>)
    51f8:	e7fc      	b.n	51f4 <get_serial_vector+0x34>
    51fa:	480f      	ldr	r0, [pc, #60]	; (5238 <get_serial_vector+0x78>)
    51fc:	e7fa      	b.n	51f4 <get_serial_vector+0x34>
    51fe:	480f      	ldr	r0, [pc, #60]	; (523c <get_serial_vector+0x7c>)
    5200:	e7f8      	b.n	51f4 <get_serial_vector+0x34>
    5202:	480f      	ldr	r0, [pc, #60]	; (5240 <get_serial_vector+0x80>)
    5204:	e7f6      	b.n	51f4 <get_serial_vector+0x34>
    5206:	480f      	ldr	r0, [pc, #60]	; (5244 <get_serial_vector+0x84>)
    5208:	e7f4      	b.n	51f4 <get_serial_vector+0x34>
    520a:	22ac      	movs	r2, #172	; 0xac
    520c:	480e      	ldr	r0, [pc, #56]	; (5248 <get_serial_vector+0x88>)
    520e:	490f      	ldr	r1, [pc, #60]	; (524c <get_serial_vector+0x8c>)
    5210:	0092      	lsls	r2, r2, #2
    5212:	f000 fbe1 	bl	59d8 <mbed_assert_internal>
    5216:	e7d6      	b.n	51c6 <get_serial_vector+0x6>
    5218:	42001000 	.word	0x42001000
    521c:	42001800 	.word	0x42001800
    5220:	42001c00 	.word	0x42001c00
    5224:	42001400 	.word	0x42001400
    5228:	42000800 	.word	0x42000800
    522c:	42000c00 	.word	0x42000c00
    5230:	00004c31 	.word	0x00004c31
    5234:	00004c81 	.word	0x00004c81
    5238:	00004dc1 	.word	0x00004dc1
    523c:	00004cd1 	.word	0x00004cd1
    5240:	00004d21 	.word	0x00004d21
    5244:	00004d71 	.word	0x00004d71
    5248:	0000fe88 	.word	0x0000fe88
    524c:	0000fe8c 	.word	0x0000fe8c

00005250 <serial_irq_handler>:
    5250:	b5f0      	push	{r4, r5, r6, r7, lr}
    5252:	4647      	mov	r7, r8
    5254:	1c04      	adds	r4, r0, #0
    5256:	b480      	push	{r7}
    5258:	1c0e      	adds	r6, r1, #0
    525a:	1c15      	adds	r5, r2, #0
    525c:	2800      	cmp	r0, #0
    525e:	d020      	beq.n	52a2 <serial_irq_handler+0x52>
    5260:	4b18      	ldr	r3, [pc, #96]	; (52c4 <serial_irq_handler+0x74>)
    5262:	6019      	str	r1, [r3, #0]
    5264:	6822      	ldr	r2, [r4, #0]
    5266:	4b18      	ldr	r3, [pc, #96]	; (52c8 <serial_irq_handler+0x78>)
    5268:	429a      	cmp	r2, r3
    526a:	d018      	beq.n	529e <serial_irq_handler+0x4e>
    526c:	dc0d      	bgt.n	528a <serial_irq_handler+0x3a>
    526e:	4917      	ldr	r1, [pc, #92]	; (52cc <serial_irq_handler+0x7c>)
    5270:	2301      	movs	r3, #1
    5272:	428a      	cmp	r2, r1
    5274:	d003      	beq.n	527e <serial_irq_handler+0x2e>
    5276:	4916      	ldr	r1, [pc, #88]	; (52d0 <serial_irq_handler+0x80>)
    5278:	3301      	adds	r3, #1
    527a:	428a      	cmp	r2, r1
    527c:	d10d      	bne.n	529a <serial_irq_handler+0x4a>
    527e:	4a15      	ldr	r2, [pc, #84]	; (52d4 <serial_irq_handler+0x84>)
    5280:	009b      	lsls	r3, r3, #2
    5282:	509d      	str	r5, [r3, r2]
    5284:	bc04      	pop	{r2}
    5286:	4690      	mov	r8, r2
    5288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    528a:	4913      	ldr	r1, [pc, #76]	; (52d8 <serial_irq_handler+0x88>)
    528c:	2304      	movs	r3, #4
    528e:	428a      	cmp	r2, r1
    5290:	d0f5      	beq.n	527e <serial_irq_handler+0x2e>
    5292:	4912      	ldr	r1, [pc, #72]	; (52dc <serial_irq_handler+0x8c>)
    5294:	3301      	adds	r3, #1
    5296:	428a      	cmp	r2, r1
    5298:	d0f1      	beq.n	527e <serial_irq_handler+0x2e>
    529a:	2300      	movs	r3, #0
    529c:	e7ef      	b.n	527e <serial_irq_handler+0x2e>
    529e:	2303      	movs	r3, #3
    52a0:	e7ed      	b.n	527e <serial_irq_handler+0x2e>
    52a2:	4b0f      	ldr	r3, [pc, #60]	; (52e0 <serial_irq_handler+0x90>)
    52a4:	22b3      	movs	r2, #179	; 0xb3
    52a6:	4698      	mov	r8, r3
    52a8:	4f0e      	ldr	r7, [pc, #56]	; (52e4 <serial_irq_handler+0x94>)
    52aa:	1c18      	adds	r0, r3, #0
    52ac:	1c39      	adds	r1, r7, #0
    52ae:	0092      	lsls	r2, r2, #2
    52b0:	f000 fb92 	bl	59d8 <mbed_assert_internal>
    52b4:	4b03      	ldr	r3, [pc, #12]	; (52c4 <serial_irq_handler+0x74>)
    52b6:	4640      	mov	r0, r8
    52b8:	1c39      	adds	r1, r7, #0
    52ba:	4a0b      	ldr	r2, [pc, #44]	; (52e8 <serial_irq_handler+0x98>)
    52bc:	601e      	str	r6, [r3, #0]
    52be:	f000 fb8b 	bl	59d8 <mbed_assert_internal>
    52c2:	e7cf      	b.n	5264 <serial_irq_handler+0x14>
    52c4:	20004424 	.word	0x20004424
    52c8:	42001400 	.word	0x42001400
    52cc:	42000c00 	.word	0x42000c00
    52d0:	42001000 	.word	0x42001000
    52d4:	2000440c 	.word	0x2000440c
    52d8:	42001800 	.word	0x42001800
    52dc:	42001c00 	.word	0x42001c00
    52e0:	0000fe88 	.word	0x0000fe88
    52e4:	0000fe8c 	.word	0x0000fe8c
    52e8:	00000266 	.word	0x00000266

000052ec <get_serial_irq_num>:
    52ec:	b510      	push	{r4, lr}
    52ee:	1e04      	subs	r4, r0, #0
    52f0:	d024      	beq.n	533c <get_serial_irq_num+0x50>
    52f2:	6823      	ldr	r3, [r4, #0]
    52f4:	4a15      	ldr	r2, [pc, #84]	; (534c <get_serial_irq_num+0x60>)
    52f6:	4293      	cmp	r3, r2
    52f8:	d01e      	beq.n	5338 <get_serial_irq_num+0x4c>
    52fa:	dd12      	ble.n	5322 <get_serial_irq_num+0x36>
    52fc:	4a14      	ldr	r2, [pc, #80]	; (5350 <get_serial_irq_num+0x64>)
    52fe:	4293      	cmp	r3, r2
    5300:	d018      	beq.n	5334 <get_serial_irq_num+0x48>
    5302:	4a14      	ldr	r2, [pc, #80]	; (5354 <get_serial_irq_num+0x68>)
    5304:	200e      	movs	r0, #14
    5306:	4293      	cmp	r3, r2
    5308:	d009      	beq.n	531e <get_serial_irq_num+0x32>
    530a:	4a13      	ldr	r2, [pc, #76]	; (5358 <get_serial_irq_num+0x6c>)
    530c:	3802      	subs	r0, #2
    530e:	4293      	cmp	r3, r2
    5310:	d005      	beq.n	531e <get_serial_irq_num+0x32>
    5312:	4812      	ldr	r0, [pc, #72]	; (535c <get_serial_irq_num+0x70>)
    5314:	4912      	ldr	r1, [pc, #72]	; (5360 <get_serial_irq_num+0x74>)
    5316:	4a13      	ldr	r2, [pc, #76]	; (5364 <get_serial_irq_num+0x78>)
    5318:	f000 fb5e 	bl	59d8 <mbed_assert_internal>
    531c:	2009      	movs	r0, #9
    531e:	b240      	sxtb	r0, r0
    5320:	bd10      	pop	{r4, pc}
    5322:	4a11      	ldr	r2, [pc, #68]	; (5368 <get_serial_irq_num+0x7c>)
    5324:	2009      	movs	r0, #9
    5326:	4293      	cmp	r3, r2
    5328:	d0f9      	beq.n	531e <get_serial_irq_num+0x32>
    532a:	4a10      	ldr	r2, [pc, #64]	; (536c <get_serial_irq_num+0x80>)
    532c:	3001      	adds	r0, #1
    532e:	4293      	cmp	r3, r2
    5330:	d0f5      	beq.n	531e <get_serial_irq_num+0x32>
    5332:	e7ee      	b.n	5312 <get_serial_irq_num+0x26>
    5334:	200d      	movs	r0, #13
    5336:	e7f2      	b.n	531e <get_serial_irq_num+0x32>
    5338:	200b      	movs	r0, #11
    533a:	e7f0      	b.n	531e <get_serial_irq_num+0x32>
    533c:	22b5      	movs	r2, #181	; 0xb5
    533e:	480c      	ldr	r0, [pc, #48]	; (5370 <get_serial_irq_num+0x84>)
    5340:	4907      	ldr	r1, [pc, #28]	; (5360 <get_serial_irq_num+0x74>)
    5342:	0092      	lsls	r2, r2, #2
    5344:	f000 fb48 	bl	59d8 <mbed_assert_internal>
    5348:	e7d3      	b.n	52f2 <get_serial_irq_num+0x6>
    534a:	46c0      	nop			; (mov r8, r8)
    534c:	42001000 	.word	0x42001000
    5350:	42001800 	.word	0x42001800
    5354:	42001c00 	.word	0x42001c00
    5358:	42001400 	.word	0x42001400
    535c:	00010690 	.word	0x00010690
    5360:	0000fe8c 	.word	0x0000fe8c
    5364:	000002e3 	.word	0x000002e3
    5368:	42000800 	.word	0x42000800
    536c:	42000c00 	.word	0x42000c00
    5370:	0000fe88 	.word	0x0000fe88

00005374 <serial_irq_set>:
    5374:	b5f0      	push	{r4, r5, r6, r7, lr}
    5376:	4647      	mov	r7, r8
    5378:	1c04      	adds	r4, r0, #0
    537a:	b480      	push	{r7}
    537c:	1c0e      	adds	r6, r1, #0
    537e:	1c17      	adds	r7, r2, #0
    5380:	2800      	cmp	r0, #0
    5382:	d03f      	beq.n	5404 <serial_irq_set+0x90>
    5384:	1c20      	adds	r0, r4, #0
    5386:	f7ff ff1b 	bl	51c0 <get_serial_vector>
    538a:	4680      	mov	r8, r0
    538c:	1c20      	adds	r0, r4, #0
    538e:	f7ff ffad 	bl	52ec <get_serial_irq_num>
    5392:	1c05      	adds	r5, r0, #0
    5394:	2f00      	cmp	r7, #0
    5396:	d011      	beq.n	53bc <serial_irq_set+0x48>
    5398:	2e00      	cmp	r6, #0
    539a:	d023      	beq.n	53e4 <serial_irq_set+0x70>
    539c:	2e01      	cmp	r6, #1
    539e:	d01d      	beq.n	53dc <serial_irq_set+0x68>
    53a0:	1c28      	adds	r0, r5, #0
    53a2:	4641      	mov	r1, r8
    53a4:	f7fe ffcc 	bl	4340 <NVIC_SetVector>
    53a8:	231f      	movs	r3, #31
    53aa:	401d      	ands	r5, r3
    53ac:	3b1e      	subs	r3, #30
    53ae:	40ab      	lsls	r3, r5
    53b0:	1c1d      	adds	r5, r3, #0
    53b2:	4b17      	ldr	r3, [pc, #92]	; (5410 <serial_irq_set+0x9c>)
    53b4:	601d      	str	r5, [r3, #0]
    53b6:	bc04      	pop	{r2}
    53b8:	4690      	mov	r8, r2
    53ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53bc:	2e00      	cmp	r6, #0
    53be:	d015      	beq.n	53ec <serial_irq_set+0x78>
    53c0:	2e01      	cmp	r6, #1
    53c2:	d102      	bne.n	53ca <serial_irq_set+0x56>
    53c4:	2202      	movs	r2, #2
    53c6:	6823      	ldr	r3, [r4, #0]
    53c8:	751a      	strb	r2, [r3, #20]
    53ca:	231f      	movs	r3, #31
    53cc:	401d      	ands	r5, r3
    53ce:	3b1e      	subs	r3, #30
    53d0:	40ab      	lsls	r3, r5
    53d2:	1c1d      	adds	r5, r3, #0
    53d4:	2380      	movs	r3, #128	; 0x80
    53d6:	4a0e      	ldr	r2, [pc, #56]	; (5410 <serial_irq_set+0x9c>)
    53d8:	50d5      	str	r5, [r2, r3]
    53da:	e7ec      	b.n	53b6 <serial_irq_set+0x42>
    53dc:	2202      	movs	r2, #2
    53de:	6823      	ldr	r3, [r4, #0]
    53e0:	759a      	strb	r2, [r3, #22]
    53e2:	e7dd      	b.n	53a0 <serial_irq_set+0x2c>
    53e4:	2204      	movs	r2, #4
    53e6:	6823      	ldr	r3, [r4, #0]
    53e8:	759a      	strb	r2, [r3, #22]
    53ea:	e7d9      	b.n	53a0 <serial_irq_set+0x2c>
    53ec:	2204      	movs	r2, #4
    53ee:	6823      	ldr	r3, [r4, #0]
    53f0:	751a      	strb	r2, [r3, #20]
    53f2:	231f      	movs	r3, #31
    53f4:	401d      	ands	r5, r3
    53f6:	3b1e      	subs	r3, #30
    53f8:	40ab      	lsls	r3, r5
    53fa:	1c1d      	adds	r5, r3, #0
    53fc:	2380      	movs	r3, #128	; 0x80
    53fe:	4a04      	ldr	r2, [pc, #16]	; (5410 <serial_irq_set+0x9c>)
    5400:	50d5      	str	r5, [r2, r3]
    5402:	e7d8      	b.n	53b6 <serial_irq_set+0x42>
    5404:	4803      	ldr	r0, [pc, #12]	; (5414 <serial_irq_set+0xa0>)
    5406:	4904      	ldr	r1, [pc, #16]	; (5418 <serial_irq_set+0xa4>)
    5408:	4a04      	ldr	r2, [pc, #16]	; (541c <serial_irq_set+0xa8>)
    540a:	f000 fae5 	bl	59d8 <mbed_assert_internal>
    540e:	e7b9      	b.n	5384 <serial_irq_set+0x10>
    5410:	e000e100 	.word	0xe000e100
    5414:	0000fe88 	.word	0x0000fe88
    5418:	0000fe8c 	.word	0x0000fe8c
    541c:	000002eb 	.word	0x000002eb

00005420 <serial_readable>:
    5420:	b510      	push	{r4, lr}
    5422:	1e04      	subs	r4, r0, #0
    5424:	d004      	beq.n	5430 <serial_readable+0x10>
    5426:	6823      	ldr	r3, [r4, #0]
    5428:	7e18      	ldrb	r0, [r3, #24]
    542a:	0740      	lsls	r0, r0, #29
    542c:	0fc0      	lsrs	r0, r0, #31
    542e:	bd10      	pop	{r4, pc}
    5430:	4802      	ldr	r0, [pc, #8]	; (543c <serial_readable+0x1c>)
    5432:	4903      	ldr	r1, [pc, #12]	; (5440 <serial_readable+0x20>)
    5434:	4a03      	ldr	r2, [pc, #12]	; (5444 <serial_readable+0x24>)
    5436:	f000 facf 	bl	59d8 <mbed_assert_internal>
    543a:	e7f4      	b.n	5426 <serial_readable+0x6>
    543c:	0000fe88 	.word	0x0000fe88
    5440:	0000fe8c 	.word	0x0000fe8c
    5444:	00000323 	.word	0x00000323

00005448 <serial_getc>:
    5448:	b510      	push	{r4, lr}
    544a:	1e04      	subs	r4, r0, #0
    544c:	d008      	beq.n	5460 <serial_getc+0x18>
    544e:	1c20      	adds	r0, r4, #0
    5450:	f7ff ffe6 	bl	5420 <serial_readable>
    5454:	2800      	cmp	r0, #0
    5456:	d0fa      	beq.n	544e <serial_getc+0x6>
    5458:	6823      	ldr	r3, [r4, #0]
    545a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    545c:	b280      	uxth	r0, r0
    545e:	bd10      	pop	{r4, pc}
    5460:	4802      	ldr	r0, [pc, #8]	; (546c <serial_getc+0x24>)
    5462:	4903      	ldr	r1, [pc, #12]	; (5470 <serial_getc+0x28>)
    5464:	4a03      	ldr	r2, [pc, #12]	; (5474 <serial_getc+0x2c>)
    5466:	f000 fab7 	bl	59d8 <mbed_assert_internal>
    546a:	e7f0      	b.n	544e <serial_getc+0x6>
    546c:	0000fe88 	.word	0x0000fe88
    5470:	0000fe8c 	.word	0x0000fe8c
    5474:	00000311 	.word	0x00000311

00005478 <serial_writable>:
    5478:	b510      	push	{r4, lr}
    547a:	1e04      	subs	r4, r0, #0
    547c:	d004      	beq.n	5488 <serial_writable+0x10>
    547e:	2001      	movs	r0, #1
    5480:	6823      	ldr	r3, [r4, #0]
    5482:	7e1b      	ldrb	r3, [r3, #24]
    5484:	4018      	ands	r0, r3
    5486:	bd10      	pop	{r4, pc}
    5488:	22cc      	movs	r2, #204	; 0xcc
    548a:	4803      	ldr	r0, [pc, #12]	; (5498 <serial_writable+0x20>)
    548c:	4903      	ldr	r1, [pc, #12]	; (549c <serial_writable+0x24>)
    548e:	0092      	lsls	r2, r2, #2
    5490:	f000 faa2 	bl	59d8 <mbed_assert_internal>
    5494:	e7f3      	b.n	547e <serial_writable+0x6>
    5496:	46c0      	nop			; (mov r8, r8)
    5498:	0000fe88 	.word	0x0000fe88
    549c:	0000fe8c 	.word	0x0000fe8c

000054a0 <serial_putc>:
    54a0:	b538      	push	{r3, r4, r5, lr}
    54a2:	1c04      	adds	r4, r0, #0
    54a4:	1c0d      	adds	r5, r1, #0
    54a6:	2800      	cmp	r0, #0
    54a8:	d00e      	beq.n	54c8 <serial_putc+0x28>
    54aa:	05ed      	lsls	r5, r5, #23
    54ac:	0ded      	lsrs	r5, r5, #23
    54ae:	1c20      	adds	r0, r4, #0
    54b0:	f7ff ffe2 	bl	5478 <serial_writable>
    54b4:	2800      	cmp	r0, #0
    54b6:	d0fa      	beq.n	54ae <serial_putc+0xe>
    54b8:	2202      	movs	r2, #2
    54ba:	6823      	ldr	r3, [r4, #0]
    54bc:	851d      	strh	r5, [r3, #40]	; 0x28
    54be:	6821      	ldr	r1, [r4, #0]
    54c0:	7e0b      	ldrb	r3, [r1, #24]
    54c2:	421a      	tst	r2, r3
    54c4:	d0fc      	beq.n	54c0 <serial_putc+0x20>
    54c6:	bd38      	pop	{r3, r4, r5, pc}
    54c8:	4802      	ldr	r0, [pc, #8]	; (54d4 <serial_putc+0x34>)
    54ca:	4903      	ldr	r1, [pc, #12]	; (54d8 <serial_putc+0x38>)
    54cc:	4a03      	ldr	r2, [pc, #12]	; (54dc <serial_putc+0x3c>)
    54ce:	f000 fa83 	bl	59d8 <mbed_assert_internal>
    54d2:	e7ea      	b.n	54aa <serial_putc+0xa>
    54d4:	0000fe88 	.word	0x0000fe88
    54d8:	0000fe8c 	.word	0x0000fe8c
    54dc:	00000319 	.word	0x00000319

000054e0 <_ZN4mbed8FilePathC1EPKc>:
    54e0:	b538      	push	{r3, r4, r5, lr}
    54e2:	2300      	movs	r3, #0
    54e4:	6003      	str	r3, [r0, #0]
    54e6:	6043      	str	r3, [r0, #4]
    54e8:	780b      	ldrb	r3, [r1, #0]
    54ea:	1c04      	adds	r4, r0, #0
    54ec:	2b2f      	cmp	r3, #47	; 0x2f
    54ee:	d001      	beq.n	54f4 <_ZN4mbed8FilePathC1EPKc+0x14>
    54f0:	1c20      	adds	r0, r4, #0
    54f2:	bd38      	pop	{r3, r4, r5, pc}
    54f4:	784b      	ldrb	r3, [r1, #1]
    54f6:	2b00      	cmp	r3, #0
    54f8:	d0fa      	beq.n	54f0 <_ZN4mbed8FilePathC1EPKc+0x10>
    54fa:	1c48      	adds	r0, r1, #1
    54fc:	6020      	str	r0, [r4, #0]
    54fe:	784b      	ldrb	r3, [r1, #1]
    5500:	2b2f      	cmp	r3, #47	; 0x2f
    5502:	d014      	beq.n	552e <_ZN4mbed8FilePathC1EPKc+0x4e>
    5504:	2b00      	cmp	r3, #0
    5506:	d015      	beq.n	5534 <_ZN4mbed8FilePathC1EPKc+0x54>
    5508:	1c03      	adds	r3, r0, #0
    550a:	e001      	b.n	5510 <_ZN4mbed8FilePathC1EPKc+0x30>
    550c:	2a00      	cmp	r2, #0
    550e:	d00c      	beq.n	552a <_ZN4mbed8FilePathC1EPKc+0x4a>
    5510:	1a5d      	subs	r5, r3, r1
    5512:	3301      	adds	r3, #1
    5514:	6023      	str	r3, [r4, #0]
    5516:	781a      	ldrb	r2, [r3, #0]
    5518:	2a2f      	cmp	r2, #47	; 0x2f
    551a:	d1f7      	bne.n	550c <_ZN4mbed8FilePathC1EPKc+0x2c>
    551c:	1c29      	adds	r1, r5, #0
    551e:	3301      	adds	r3, #1
    5520:	6023      	str	r3, [r4, #0]
    5522:	f001 fb39 	bl	6b98 <_ZN4mbed8FileBase6lookupEPKcj>
    5526:	6060      	str	r0, [r4, #4]
    5528:	e7e2      	b.n	54f0 <_ZN4mbed8FilePathC1EPKc+0x10>
    552a:	1c29      	adds	r1, r5, #0
    552c:	e7f9      	b.n	5522 <_ZN4mbed8FilePathC1EPKc+0x42>
    552e:	1c03      	adds	r3, r0, #0
    5530:	2100      	movs	r1, #0
    5532:	e7f4      	b.n	551e <_ZN4mbed8FilePathC1EPKc+0x3e>
    5534:	2100      	movs	r1, #0
    5536:	e7f4      	b.n	5522 <_ZN4mbed8FilePathC1EPKc+0x42>

00005538 <_ZN4mbed8FilePath8fileNameEv>:
    5538:	6800      	ldr	r0, [r0, #0]
    553a:	4770      	bx	lr

0000553c <_ZN4mbed8FilePath10fileSystemEv>:
    553c:	6843      	ldr	r3, [r0, #4]
    553e:	b510      	push	{r4, lr}
    5540:	2b00      	cmp	r3, #0
    5542:	d007      	beq.n	5554 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    5544:	1c04      	adds	r4, r0, #0
    5546:	1c18      	adds	r0, r3, #0
    5548:	f001 fb46 	bl	6bd8 <_ZN4mbed8FileBase11getPathTypeEv>
    554c:	2801      	cmp	r0, #1
    554e:	d101      	bne.n	5554 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    5550:	6860      	ldr	r0, [r4, #4]
    5552:	bd10      	pop	{r4, pc}
    5554:	2000      	movs	r0, #0
    5556:	e7fc      	b.n	5552 <_ZN4mbed8FilePath10fileSystemEv+0x16>

00005558 <_ZN4mbed8FilePath6isFileEv>:
    5558:	6840      	ldr	r0, [r0, #4]
    555a:	b508      	push	{r3, lr}
    555c:	2800      	cmp	r0, #0
    555e:	d005      	beq.n	556c <_ZN4mbed8FilePath6isFileEv+0x14>
    5560:	f001 fb3a 	bl	6bd8 <_ZN4mbed8FileBase11getPathTypeEv>
    5564:	4243      	negs	r3, r0
    5566:	4158      	adcs	r0, r3
    5568:	b2c0      	uxtb	r0, r0
    556a:	bd08      	pop	{r3, pc}
    556c:	2000      	movs	r0, #0
    556e:	e7fc      	b.n	556a <_ZN4mbed8FilePath6isFileEv+0x12>

00005570 <_ZN4mbed8FilePath4fileEv>:
    5570:	6843      	ldr	r3, [r0, #4]
    5572:	b510      	push	{r4, lr}
    5574:	2b00      	cmp	r3, #0
    5576:	d00a      	beq.n	558e <_ZN4mbed8FilePath4fileEv+0x1e>
    5578:	1c04      	adds	r4, r0, #0
    557a:	1c18      	adds	r0, r3, #0
    557c:	f001 fb2c 	bl	6bd8 <_ZN4mbed8FileBase11getPathTypeEv>
    5580:	2800      	cmp	r0, #0
    5582:	d104      	bne.n	558e <_ZN4mbed8FilePath4fileEv+0x1e>
    5584:	6860      	ldr	r0, [r4, #4]
    5586:	2800      	cmp	r0, #0
    5588:	d001      	beq.n	558e <_ZN4mbed8FilePath4fileEv+0x1e>
    558a:	3804      	subs	r0, #4
    558c:	bd10      	pop	{r4, pc}
    558e:	2000      	movs	r0, #0
    5590:	e7fc      	b.n	558c <_ZN4mbed8FilePath4fileEv+0x1c>
    5592:	46c0      	nop			; (mov r8, r8)

00005594 <_ZN4mbed8FilePath6existsEv>:
    5594:	6840      	ldr	r0, [r0, #4]
    5596:	1e43      	subs	r3, r0, #1
    5598:	4198      	sbcs	r0, r3
    559a:	b2c0      	uxtb	r0, r0
    559c:	4770      	bx	lr
    559e:	46c0      	nop			; (mov r8, r8)

000055a0 <_ZN4mbed3SPID1Ev>:
    55a0:	4770      	bx	lr
    55a2:	46c0      	nop			; (mov r8, r8)

000055a4 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E>:
    55a4:	b510      	push	{r4, lr}
    55a6:	2800      	cmp	r0, #0
    55a8:	d008      	beq.n	55bc <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    55aa:	6814      	ldr	r4, [r2, #0]
    55ac:	6853      	ldr	r3, [r2, #4]
    55ae:	2c00      	cmp	r4, #0
    55b0:	d005      	beq.n	55be <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    55b2:	07da      	lsls	r2, r3, #31
    55b4:	d405      	bmi.n	55c2 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    55b6:	105b      	asrs	r3, r3, #1
    55b8:	18c0      	adds	r0, r0, r3
    55ba:	47a0      	blx	r4
    55bc:	bd10      	pop	{r4, pc}
    55be:	07da      	lsls	r2, r3, #31
    55c0:	d5fc      	bpl.n	55bc <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    55c2:	105b      	asrs	r3, r3, #1
    55c4:	18c0      	adds	r0, r0, r3
    55c6:	6803      	ldr	r3, [r0, #0]
    55c8:	591c      	ldr	r4, [r3, r4]
    55ca:	47a0      	blx	r4
    55cc:	e7f6      	b.n	55bc <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    55ce:	46c0      	nop			; (mov r8, r8)

000055d0 <_ZN4mbed3SPID0Ev>:
    55d0:	b510      	push	{r4, lr}
    55d2:	1c04      	adds	r4, r0, #0
    55d4:	f001 fd79 	bl	70ca <_ZdlPv>
    55d8:	1c20      	adds	r0, r4, #0
    55da:	bd10      	pop	{r4, pc}

000055dc <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_>:
    55dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55de:	4656      	mov	r6, sl
    55e0:	465f      	mov	r7, fp
    55e2:	464d      	mov	r5, r9
    55e4:	4644      	mov	r4, r8
    55e6:	4691      	mov	r9, r2
    55e8:	2200      	movs	r2, #0
    55ea:	b4f0      	push	{r4, r5, r6, r7}
    55ec:	1c05      	adds	r5, r0, #0
    55ee:	1c04      	adds	r4, r0, #0
    55f0:	b087      	sub	sp, #28
    55f2:	9303      	str	r3, [sp, #12]
    55f4:	ab10      	add	r3, sp, #64	; 0x40
    55f6:	569a      	ldrsb	r2, [r3, r2]
    55f8:	4b26      	ldr	r3, [pc, #152]	; (5694 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xb8>)
    55fa:	468a      	mov	sl, r1
    55fc:	3308      	adds	r3, #8
    55fe:	c508      	stmia	r5!, {r3}
    5600:	4693      	mov	fp, r2
    5602:	1c28      	adds	r0, r5, #0
    5604:	2100      	movs	r1, #0
    5606:	2240      	movs	r2, #64	; 0x40
    5608:	f005 f9f2 	bl	a9f0 <memset>
    560c:	2300      	movs	r3, #0
    560e:	1c22      	adds	r2, r4, #0
    5610:	9304      	str	r3, [sp, #16]
    5612:	9305      	str	r3, [sp, #20]
    5614:	a904      	add	r1, sp, #16
    5616:	3248      	adds	r2, #72	; 0x48
    5618:	c941      	ldmia	r1!, {r0, r6}
    561a:	c241      	stmia	r2!, {r0, r6}
    561c:	4a1e      	ldr	r2, [pc, #120]	; (5698 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xbc>)
    561e:	6522      	str	r2, [r4, #80]	; 0x50
    5620:	4a1e      	ldr	r2, [pc, #120]	; (569c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc0>)
    5622:	6562      	str	r2, [r4, #84]	; 0x54
    5624:	4a1e      	ldr	r2, [pc, #120]	; (56a0 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc4>)
    5626:	65a2      	str	r2, [r4, #88]	; 0x58
    5628:	1c22      	adds	r2, r4, #0
    562a:	3248      	adds	r2, #72	; 0x48
    562c:	6623      	str	r3, [r4, #96]	; 0x60
    562e:	65e4      	str	r4, [r4, #92]	; 0x5c
    5630:	6662      	str	r2, [r4, #100]	; 0x64
    5632:	4a1c      	ldr	r2, [pc, #112]	; (56a4 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc8>)
    5634:	66a2      	str	r2, [r4, #104]	; 0x68
    5636:	f3bf 8f6f 	isb	sy
    563a:	f3bf 8f4f 	dsb	sy
    563e:	2280      	movs	r2, #128	; 0x80
    5640:	66e3      	str	r3, [r4, #108]	; 0x6c
    5642:	50a3      	str	r3, [r4, r2]
    5644:	3204      	adds	r2, #4
    5646:	54a3      	strb	r3, [r4, r2]
    5648:	3204      	adds	r2, #4
    564a:	4690      	mov	r8, r2
    564c:	4641      	mov	r1, r8
    564e:	278c      	movs	r7, #140	; 0x8c
    5650:	3a80      	subs	r2, #128	; 0x80
    5652:	5062      	str	r2, [r4, r1]
    5654:	2690      	movs	r6, #144	; 0x90
    5656:	465a      	mov	r2, fp
    5658:	51e3      	str	r3, [r4, r7]
    565a:	4b13      	ldr	r3, [pc, #76]	; (56a8 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xcc>)
    565c:	9200      	str	r2, [sp, #0]
    565e:	51a3      	str	r3, [r4, r6]
    5660:	1c28      	adds	r0, r5, #0
    5662:	4651      	mov	r1, sl
    5664:	464a      	mov	r2, r9
    5666:	9b03      	ldr	r3, [sp, #12]
    5668:	f000 ff9c 	bl	65a4 <spi_init>
    566c:	4643      	mov	r3, r8
    566e:	59e2      	ldr	r2, [r4, r7]
    5670:	58e1      	ldr	r1, [r4, r3]
    5672:	1c28      	adds	r0, r5, #0
    5674:	2300      	movs	r3, #0
    5676:	f001 f88d 	bl	6794 <spi_format>
    567a:	1c28      	adds	r0, r5, #0
    567c:	59a1      	ldr	r1, [r4, r6]
    567e:	f001 f93d 	bl	68fc <spi_frequency>
    5682:	1c20      	adds	r0, r4, #0
    5684:	b007      	add	sp, #28
    5686:	bc3c      	pop	{r2, r3, r4, r5}
    5688:	4690      	mov	r8, r2
    568a:	4699      	mov	r9, r3
    568c:	46a2      	mov	sl, r4
    568e:	46ab      	mov	fp, r5
    5690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	00010128 	.word	0x00010128
    5698:	2404b51f 	.word	0x2404b51f
    569c:	cc0f447c 	.word	0xcc0f447c
    56a0:	bd1f4798 	.word	0xbd1f4798
    56a4:	000055a5 	.word	0x000055a5
    56a8:	000f4240 	.word	0x000f4240

000056ac <_ZN4mbed3SPI6aquireEv>:
    56ac:	b570      	push	{r4, r5, r6, lr}
    56ae:	4d0a      	ldr	r5, [pc, #40]	; (56d8 <_ZN4mbed3SPI6aquireEv+0x2c>)
    56b0:	682b      	ldr	r3, [r5, #0]
    56b2:	4283      	cmp	r3, r0
    56b4:	d00f      	beq.n	56d6 <_ZN4mbed3SPI6aquireEv+0x2a>
    56b6:	2388      	movs	r3, #136	; 0x88
    56b8:	1d06      	adds	r6, r0, #4
    56ba:	58c1      	ldr	r1, [r0, r3]
    56bc:	3304      	adds	r3, #4
    56be:	58c2      	ldr	r2, [r0, r3]
    56c0:	1c04      	adds	r4, r0, #0
    56c2:	2300      	movs	r3, #0
    56c4:	1c30      	adds	r0, r6, #0
    56c6:	f001 f865 	bl	6794 <spi_format>
    56ca:	2390      	movs	r3, #144	; 0x90
    56cc:	1c30      	adds	r0, r6, #0
    56ce:	58e1      	ldr	r1, [r4, r3]
    56d0:	f001 f914 	bl	68fc <spi_frequency>
    56d4:	602c      	str	r4, [r5, #0]
    56d6:	bd70      	pop	{r4, r5, r6, pc}
    56d8:	20004428 	.word	0x20004428

000056dc <_ZN4mbed3SPI6formatEii>:
    56dc:	b508      	push	{r3, lr}
    56de:	2388      	movs	r3, #136	; 0x88
    56e0:	50c1      	str	r1, [r0, r3]
    56e2:	3304      	adds	r3, #4
    56e4:	50c2      	str	r2, [r0, r3]
    56e6:	2200      	movs	r2, #0
    56e8:	4b02      	ldr	r3, [pc, #8]	; (56f4 <_ZN4mbed3SPI6formatEii+0x18>)
    56ea:	601a      	str	r2, [r3, #0]
    56ec:	f7ff ffde 	bl	56ac <_ZN4mbed3SPI6aquireEv>
    56f0:	bd08      	pop	{r3, pc}
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	20004428 	.word	0x20004428

000056f8 <_ZN4mbed3SPI9frequencyEi>:
    56f8:	b508      	push	{r3, lr}
    56fa:	2390      	movs	r3, #144	; 0x90
    56fc:	2200      	movs	r2, #0
    56fe:	50c1      	str	r1, [r0, r3]
    5700:	4b02      	ldr	r3, [pc, #8]	; (570c <_ZN4mbed3SPI9frequencyEi+0x14>)
    5702:	601a      	str	r2, [r3, #0]
    5704:	f7ff ffd2 	bl	56ac <_ZN4mbed3SPI6aquireEv>
    5708:	bd08      	pop	{r3, pc}
    570a:	46c0      	nop			; (mov r8, r8)
    570c:	20004428 	.word	0x20004428

00005710 <_ZN4mbed3SPI5writeEi>:
    5710:	b538      	push	{r3, r4, r5, lr}
    5712:	1c0d      	adds	r5, r1, #0
    5714:	1c04      	adds	r4, r0, #0
    5716:	f7ff ffc9 	bl	56ac <_ZN4mbed3SPI6aquireEv>
    571a:	1c29      	adds	r1, r5, #0
    571c:	1d20      	adds	r0, r4, #4
    571e:	f001 f969 	bl	69f4 <spi_master_write>
    5722:	bd38      	pop	{r3, r4, r5, pc}

00005724 <_ZN4mbed6Serial5_getcEv>:
    5724:	b508      	push	{r3, lr}
    5726:	f000 f8b5 	bl	5894 <_ZN4mbed10SerialBase10_base_getcEv>
    572a:	bd08      	pop	{r3, pc}

0000572c <_ZThn220_N4mbed6Serial5_getcEv>:
    572c:	b408      	push	{r3}
    572e:	4b02      	ldr	r3, [pc, #8]	; (5738 <_ZThn220_N4mbed6Serial5_getcEv+0xc>)
    5730:	469c      	mov	ip, r3
    5732:	38dc      	subs	r0, #220	; 0xdc
    5734:	bc08      	pop	{r3}
    5736:	4760      	bx	ip
    5738:	00005725 	.word	0x00005725

0000573c <_ZN4mbed6Serial5_putcEi>:
    573c:	b508      	push	{r3, lr}
    573e:	f000 f8af 	bl	58a0 <_ZN4mbed10SerialBase10_base_putcEi>
    5742:	bd08      	pop	{r3, pc}

00005744 <_ZThn220_N4mbed6Serial5_putcEi>:
    5744:	b408      	push	{r3}
    5746:	4b02      	ldr	r3, [pc, #8]	; (5750 <_ZThn220_N4mbed6Serial5_putcEi+0xc>)
    5748:	469c      	mov	ip, r3
    574a:	38dc      	subs	r0, #220	; 0xdc
    574c:	bc08      	pop	{r3}
    574e:	4760      	bx	ip
    5750:	0000573d 	.word	0x0000573d

00005754 <_ZN4mbed6SerialC1E7PinNameS1_PKc>:
    5754:	b538      	push	{r3, r4, r5, lr}
    5756:	1c04      	adds	r4, r0, #0
    5758:	1c1d      	adds	r5, r3, #0
    575a:	f000 f843 	bl	57e4 <_ZN4mbed10SerialBaseC1E7PinNameS1_>
    575e:	1c20      	adds	r0, r4, #0
    5760:	1c29      	adds	r1, r5, #0
    5762:	30dc      	adds	r0, #220	; 0xdc
    5764:	f000 f8da 	bl	591c <_ZN4mbed6StreamC1EPKc>
    5768:	4b06      	ldr	r3, [pc, #24]	; (5784 <_ZN4mbed6SerialC1E7PinNameS1_PKc+0x30>)
    576a:	1c20      	adds	r0, r4, #0
    576c:	1c1a      	adds	r2, r3, #0
    576e:	1c19      	adds	r1, r3, #0
    5770:	3208      	adds	r2, #8
    5772:	6022      	str	r2, [r4, #0]
    5774:	22dc      	movs	r2, #220	; 0xdc
    5776:	3120      	adds	r1, #32
    5778:	50a1      	str	r1, [r4, r2]
    577a:	3354      	adds	r3, #84	; 0x54
    577c:	3204      	adds	r2, #4
    577e:	50a3      	str	r3, [r4, r2]
    5780:	bd38      	pop	{r3, r4, r5, pc}
    5782:	46c0      	nop			; (mov r8, r8)
    5784:	00010140 	.word	0x00010140

00005788 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    5788:	b508      	push	{r3, lr}
    578a:	004b      	lsls	r3, r1, #1
    578c:	1859      	adds	r1, r3, r1
    578e:	00c9      	lsls	r1, r1, #3
    5790:	1843      	adds	r3, r0, r1
    5792:	1c1a      	adds	r2, r3, #0
    5794:	32b8      	adds	r2, #184	; 0xb8
    5796:	6852      	ldr	r2, [r2, #4]
    5798:	33a8      	adds	r3, #168	; 0xa8
    579a:	681b      	ldr	r3, [r3, #0]
    579c:	2a00      	cmp	r2, #0
    579e:	d006      	beq.n	57ae <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x26>
    57a0:	2b00      	cmp	r3, #0
    57a2:	d003      	beq.n	57ac <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    57a4:	1841      	adds	r1, r0, r1
    57a6:	31ac      	adds	r1, #172	; 0xac
    57a8:	1c18      	adds	r0, r3, #0
    57aa:	4790      	blx	r2
    57ac:	bd08      	pop	{r3, pc}
    57ae:	2b00      	cmp	r3, #0
    57b0:	d0fc      	beq.n	57ac <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    57b2:	4798      	blx	r3
    57b4:	e7fa      	b.n	57ac <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    57b6:	46c0      	nop			; (mov r8, r8)

000057b8 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
    57b8:	b510      	push	{r4, lr}
    57ba:	2800      	cmp	r0, #0
    57bc:	d008      	beq.n	57d0 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    57be:	6814      	ldr	r4, [r2, #0]
    57c0:	6853      	ldr	r3, [r2, #4]
    57c2:	2c00      	cmp	r4, #0
    57c4:	d005      	beq.n	57d2 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    57c6:	07da      	lsls	r2, r3, #31
    57c8:	d405      	bmi.n	57d6 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    57ca:	105b      	asrs	r3, r3, #1
    57cc:	18c0      	adds	r0, r0, r3
    57ce:	47a0      	blx	r4
    57d0:	bd10      	pop	{r4, pc}
    57d2:	07da      	lsls	r2, r3, #31
    57d4:	d5fc      	bpl.n	57d0 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    57d6:	105b      	asrs	r3, r3, #1
    57d8:	18c0      	adds	r0, r0, r3
    57da:	6803      	ldr	r3, [r0, #0]
    57dc:	591c      	ldr	r4, [r3, r4]
    57de:	47a0      	blx	r4
    57e0:	e7f6      	b.n	57d0 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    57e2:	46c0      	nop			; (mov r8, r8)

000057e4 <_ZN4mbed10SerialBaseC1E7PinNameS1_>:
    57e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e6:	4647      	mov	r7, r8
    57e8:	b480      	push	{r7}
    57ea:	4b24      	ldr	r3, [pc, #144]	; (587c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x98>)
    57ec:	b082      	sub	sp, #8
    57ee:	6003      	str	r3, [r0, #0]
    57f0:	2500      	movs	r5, #0
    57f2:	1c03      	adds	r3, r0, #0
    57f4:	1c17      	adds	r7, r2, #0
    57f6:	466a      	mov	r2, sp
    57f8:	1c04      	adds	r4, r0, #0
    57fa:	9500      	str	r5, [sp, #0]
    57fc:	9501      	str	r5, [sp, #4]
    57fe:	3308      	adds	r3, #8
    5800:	4688      	mov	r8, r1
    5802:	ca03      	ldmia	r2!, {r0, r1}
    5804:	c303      	stmia	r3!, {r0, r1}
    5806:	4b1e      	ldr	r3, [pc, #120]	; (5880 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x9c>)
    5808:	6123      	str	r3, [r4, #16]
    580a:	4b1e      	ldr	r3, [pc, #120]	; (5884 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa0>)
    580c:	6163      	str	r3, [r4, #20]
    580e:	4b1e      	ldr	r3, [pc, #120]	; (5888 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa4>)
    5810:	61a3      	str	r3, [r4, #24]
    5812:	1c23      	adds	r3, r4, #0
    5814:	3308      	adds	r3, #8
    5816:	6225      	str	r5, [r4, #32]
    5818:	61e4      	str	r4, [r4, #28]
    581a:	6263      	str	r3, [r4, #36]	; 0x24
    581c:	4b1b      	ldr	r3, [pc, #108]	; (588c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa8>)
    581e:	62a3      	str	r3, [r4, #40]	; 0x28
    5820:	f3bf 8f6f 	isb	sy
    5824:	f3bf 8f4f 	dsb	sy
    5828:	235c      	movs	r3, #92	; 0x5c
    582a:	1c26      	adds	r6, r4, #0
    582c:	62e5      	str	r5, [r4, #44]	; 0x2c
    582e:	6425      	str	r5, [r4, #64]	; 0x40
    5830:	6465      	str	r5, [r4, #68]	; 0x44
    5832:	65a5      	str	r5, [r4, #88]	; 0x58
    5834:	3660      	adds	r6, #96	; 0x60
    5836:	54e5      	strb	r5, [r4, r3]
    5838:	3301      	adds	r3, #1
    583a:	54e5      	strb	r5, [r4, r3]
    583c:	1c30      	adds	r0, r6, #0
    583e:	2100      	movs	r1, #0
    5840:	2248      	movs	r2, #72	; 0x48
    5842:	f005 f8d5 	bl	a9f0 <memset>
    5846:	23a8      	movs	r3, #168	; 0xa8
    5848:	2296      	movs	r2, #150	; 0x96
    584a:	50e5      	str	r5, [r4, r3]
    584c:	3314      	adds	r3, #20
    584e:	50e5      	str	r5, [r4, r3]
    5850:	3304      	adds	r3, #4
    5852:	50e5      	str	r5, [r4, r3]
    5854:	3314      	adds	r3, #20
    5856:	50e5      	str	r5, [r4, r3]
    5858:	0192      	lsls	r2, r2, #6
    585a:	3304      	adds	r3, #4
    585c:	50e2      	str	r2, [r4, r3]
    585e:	1c30      	adds	r0, r6, #0
    5860:	4641      	mov	r1, r8
    5862:	1c3a      	adds	r2, r7, #0
    5864:	f7ff fbd0 	bl	5008 <serial_init>
    5868:	1c30      	adds	r0, r6, #0
    586a:	4909      	ldr	r1, [pc, #36]	; (5890 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xac>)
    586c:	1c22      	adds	r2, r4, #0
    586e:	f7ff fcef 	bl	5250 <serial_irq_handler>
    5872:	1c20      	adds	r0, r4, #0
    5874:	b002      	add	sp, #8
    5876:	bc04      	pop	{r2}
    5878:	4690      	mov	r8, r2
    587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    587c:	000101a8 	.word	0x000101a8
    5880:	2404b51f 	.word	0x2404b51f
    5884:	cc0f447c 	.word	0xcc0f447c
    5888:	bd1f4798 	.word	0xbd1f4798
    588c:	000057b9 	.word	0x000057b9
    5890:	00005789 	.word	0x00005789

00005894 <_ZN4mbed10SerialBase10_base_getcEv>:
    5894:	b508      	push	{r3, lr}
    5896:	3060      	adds	r0, #96	; 0x60
    5898:	f7ff fdd6 	bl	5448 <serial_getc>
    589c:	bd08      	pop	{r3, pc}
    589e:	46c0      	nop			; (mov r8, r8)

000058a0 <_ZN4mbed10SerialBase10_base_putcEi>:
    58a0:	b510      	push	{r4, lr}
    58a2:	1c0c      	adds	r4, r1, #0
    58a4:	3060      	adds	r0, #96	; 0x60
    58a6:	f7ff fdfb 	bl	54a0 <serial_putc>
    58aa:	1c20      	adds	r0, r4, #0
    58ac:	bd10      	pop	{r4, pc}
    58ae:	46c0      	nop			; (mov r8, r8)

000058b0 <_ZN4mbed6Stream5closeEv>:
    58b0:	2000      	movs	r0, #0
    58b2:	4770      	bx	lr

000058b4 <_ZN4mbed6Stream5writeEPKvj>:
    58b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58b6:	188e      	adds	r6, r1, r2
    58b8:	1c05      	adds	r5, r0, #0
    58ba:	1c0f      	adds	r7, r1, #0
    58bc:	1e0c      	subs	r4, r1, #0
    58be:	42b4      	cmp	r4, r6
    58c0:	d102      	bne.n	58c8 <_ZN4mbed6Stream5writeEPKvj+0x14>
    58c2:	e00a      	b.n	58da <_ZN4mbed6Stream5writeEPKvj+0x26>
    58c4:	42a6      	cmp	r6, r4
    58c6:	d008      	beq.n	58da <_ZN4mbed6Stream5writeEPKvj+0x26>
    58c8:	3401      	adds	r4, #1
    58ca:	682b      	ldr	r3, [r5, #0]
    58cc:	1e62      	subs	r2, r4, #1
    58ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    58d0:	7811      	ldrb	r1, [r2, #0]
    58d2:	1c28      	adds	r0, r5, #0
    58d4:	4798      	blx	r3
    58d6:	1c43      	adds	r3, r0, #1
    58d8:	d1f4      	bne.n	58c4 <_ZN4mbed6Stream5writeEPKvj+0x10>
    58da:	1be0      	subs	r0, r4, r7
    58dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58de:	46c0      	nop			; (mov r8, r8)

000058e0 <_ZN4mbed6Stream4readEPvj>:
    58e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58e2:	188e      	adds	r6, r1, r2
    58e4:	1c05      	adds	r5, r0, #0
    58e6:	1c0f      	adds	r7, r1, #0
    58e8:	1e0c      	subs	r4, r1, #0
    58ea:	42b4      	cmp	r4, r6
    58ec:	d105      	bne.n	58fa <_ZN4mbed6Stream4readEPvj+0x1a>
    58ee:	e00a      	b.n	5906 <_ZN4mbed6Stream4readEPvj+0x26>
    58f0:	3401      	adds	r4, #1
    58f2:	1e63      	subs	r3, r4, #1
    58f4:	7018      	strb	r0, [r3, #0]
    58f6:	42a6      	cmp	r6, r4
    58f8:	d005      	beq.n	5906 <_ZN4mbed6Stream4readEPvj+0x26>
    58fa:	682b      	ldr	r3, [r5, #0]
    58fc:	1c28      	adds	r0, r5, #0
    58fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5900:	4798      	blx	r3
    5902:	1c43      	adds	r3, r0, #1
    5904:	d1f4      	bne.n	58f0 <_ZN4mbed6Stream4readEPvj+0x10>
    5906:	1be0      	subs	r0, r4, r7
    5908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    590a:	46c0      	nop			; (mov r8, r8)

0000590c <_ZN4mbed6Stream5lseekEli>:
    590c:	2000      	movs	r0, #0
    590e:	4770      	bx	lr

00005910 <_ZN4mbed6Stream6isattyEv>:
    5910:	2000      	movs	r0, #0
    5912:	4770      	bx	lr

00005914 <_ZN4mbed6Stream5fsyncEv>:
    5914:	2000      	movs	r0, #0
    5916:	4770      	bx	lr

00005918 <_ZN4mbed6Stream4flenEv>:
    5918:	2000      	movs	r0, #0
    591a:	4770      	bx	lr

0000591c <_ZN4mbed6StreamC1EPKc>:
    591c:	b510      	push	{r4, lr}
    591e:	1c04      	adds	r4, r0, #0
    5920:	b084      	sub	sp, #16
    5922:	f001 f95b 	bl	6bdc <_ZN4mbed8FileLikeC1EPKc>
    5926:	4b0b      	ldr	r3, [pc, #44]	; (5954 <_ZN4mbed6StreamC1EPKc+0x38>)
    5928:	a801      	add	r0, sp, #4
    592a:	1c1a      	adds	r2, r3, #0
    592c:	333c      	adds	r3, #60	; 0x3c
    592e:	6063      	str	r3, [r4, #4]
    5930:	2300      	movs	r3, #0
    5932:	3208      	adds	r2, #8
    5934:	6163      	str	r3, [r4, #20]
    5936:	6022      	str	r2, [r4, #0]
    5938:	4907      	ldr	r1, [pc, #28]	; (5958 <_ZN4mbed6StreamC1EPKc+0x3c>)
    593a:	1c22      	adds	r2, r4, #0
    593c:	f006 fc46 	bl	c1cc <siprintf>
    5940:	4906      	ldr	r1, [pc, #24]	; (595c <_ZN4mbed6StreamC1EPKc+0x40>)
    5942:	a801      	add	r0, sp, #4
    5944:	f004 fe96 	bl	a674 <fopen>
    5948:	6160      	str	r0, [r4, #20]
    594a:	f7fe fe9f 	bl	468c <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    594e:	1c20      	adds	r0, r4, #0
    5950:	b004      	add	sp, #16
    5952:	bd10      	pop	{r4, pc}
    5954:	000101b0 	.word	0x000101b0
    5958:	0000fe6c 	.word	0x0000fe6c
    595c:	000101f4 	.word	0x000101f4

00005960 <_ZN4mbed6StreamD1Ev>:
    5960:	4b07      	ldr	r3, [pc, #28]	; (5980 <_ZN4mbed6StreamD1Ev+0x20>)
    5962:	b510      	push	{r4, lr}
    5964:	1c1a      	adds	r2, r3, #0
    5966:	1c04      	adds	r4, r0, #0
    5968:	3208      	adds	r2, #8
    596a:	333c      	adds	r3, #60	; 0x3c
    596c:	6002      	str	r2, [r0, #0]
    596e:	6043      	str	r3, [r0, #4]
    5970:	6940      	ldr	r0, [r0, #20]
    5972:	f004 fc81 	bl	a278 <fclose>
    5976:	1c20      	adds	r0, r4, #0
    5978:	f001 f944 	bl	6c04 <_ZN4mbed8FileLikeD1Ev>
    597c:	1c20      	adds	r0, r4, #0
    597e:	bd10      	pop	{r4, pc}
    5980:	000101b0 	.word	0x000101b0

00005984 <_ZN4mbed6Stream4putcEi>:
    5984:	b538      	push	{r3, r4, r5, lr}
    5986:	1c0d      	adds	r5, r1, #0
    5988:	1c04      	adds	r4, r0, #0
    598a:	6940      	ldr	r0, [r0, #20]
    598c:	f004 fd34 	bl	a3f8 <fflush>
    5990:	1c28      	adds	r0, r5, #0
    5992:	6961      	ldr	r1, [r4, #20]
    5994:	f004 fea0 	bl	a6d8 <fputc>
    5998:	bd38      	pop	{r3, r4, r5, pc}
    599a:	46c0      	nop			; (mov r8, r8)

0000599c <_ZN4mbed6Stream4getcEv>:
    599c:	b510      	push	{r4, lr}
    599e:	1c04      	adds	r4, r0, #0
    59a0:	6940      	ldr	r0, [r0, #20]
    59a2:	f004 fd29 	bl	a3f8 <fflush>
    59a6:	6960      	ldr	r0, [r4, #20]
    59a8:	f7fe fe76 	bl	4698 <_ZN4mbed9mbed_getcEP7__sFILE>
    59ac:	bd10      	pop	{r4, pc}
    59ae:	46c0      	nop			; (mov r8, r8)

000059b0 <_ZN4mbed6Stream6printfEPKcz>:
    59b0:	b40e      	push	{r1, r2, r3}
    59b2:	b530      	push	{r4, r5, lr}
    59b4:	1c04      	adds	r4, r0, #0
    59b6:	b082      	sub	sp, #8
    59b8:	ab05      	add	r3, sp, #20
    59ba:	cb20      	ldmia	r3!, {r5}
    59bc:	6940      	ldr	r0, [r0, #20]
    59be:	9301      	str	r3, [sp, #4]
    59c0:	f004 fd1a 	bl	a3f8 <fflush>
    59c4:	6960      	ldr	r0, [r4, #20]
    59c6:	1c29      	adds	r1, r5, #0
    59c8:	9a01      	ldr	r2, [sp, #4]
    59ca:	f005 f9ef 	bl	adac <vfiprintf>
    59ce:	b002      	add	sp, #8
    59d0:	bc30      	pop	{r4, r5}
    59d2:	bc08      	pop	{r3}
    59d4:	b003      	add	sp, #12
    59d6:	4718      	bx	r3

000059d8 <mbed_assert_internal>:
    59d8:	b538      	push	{r3, r4, r5, lr}
    59da:	1c05      	adds	r5, r0, #0
    59dc:	1c0c      	adds	r4, r1, #0
    59de:	1c13      	adds	r3, r2, #0
    59e0:	1c29      	adds	r1, r5, #0
    59e2:	4802      	ldr	r0, [pc, #8]	; (59ec <mbed_assert_internal+0x14>)
    59e4:	1c22      	adds	r2, r4, #0
    59e6:	f000 f803 	bl	59f0 <error>
    59ea:	bd38      	pop	{r3, r4, r5, pc}
    59ec:	000101f8 	.word	0x000101f8

000059f0 <error>:
    59f0:	b40f      	push	{r0, r1, r2, r3}
    59f2:	2001      	movs	r0, #1
    59f4:	b508      	push	{r3, lr}
    59f6:	f004 fbd1 	bl	a19c <exit>
    59fa:	46c0      	nop			; (mov r8, r8)

000059fc <gpio_init_out>:
    59fc:	b538      	push	{r3, r4, r5, lr}
    59fe:	1c0d      	adds	r5, r1, #0
    5a00:	1c04      	adds	r4, r0, #0
    5a02:	f000 fa8b 	bl	5f1c <gpio_init>
    5a06:	1c6b      	adds	r3, r5, #1
    5a08:	d00e      	beq.n	5a28 <gpio_init_out+0x2c>
    5a0a:	2300      	movs	r3, #0
    5a0c:	56e3      	ldrsb	r3, [r4, r3]
    5a0e:	3301      	adds	r3, #1
    5a10:	d00b      	beq.n	5a2a <gpio_init_out+0x2e>
    5a12:	68e3      	ldr	r3, [r4, #12]
    5a14:	6862      	ldr	r2, [r4, #4]
    5a16:	1c20      	adds	r0, r4, #0
    5a18:	2101      	movs	r1, #1
    5a1a:	601a      	str	r2, [r3, #0]
    5a1c:	f000 fae6 	bl	5fec <gpio_dir>
    5a20:	1c20      	adds	r0, r4, #0
    5a22:	2100      	movs	r1, #0
    5a24:	f000 faba 	bl	5f9c <gpio_mode>
    5a28:	bd38      	pop	{r3, r4, r5, pc}
    5a2a:	4803      	ldr	r0, [pc, #12]	; (5a38 <gpio_init_out+0x3c>)
    5a2c:	4903      	ldr	r1, [pc, #12]	; (5a3c <gpio_init_out+0x40>)
    5a2e:	2228      	movs	r2, #40	; 0x28
    5a30:	f7ff ffd2 	bl	59d8 <mbed_assert_internal>
    5a34:	e7ed      	b.n	5a12 <gpio_init_out+0x16>
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	0000f864 	.word	0x0000f864
    5a3c:	0001022c 	.word	0x0001022c

00005a40 <pinmap_find_peripheral>:
    5a40:	e002      	b.n	5a48 <pinmap_find_peripheral+0x8>
    5a42:	4283      	cmp	r3, r0
    5a44:	d006      	beq.n	5a54 <pinmap_find_peripheral+0x14>
    5a46:	310c      	adds	r1, #12
    5a48:	2300      	movs	r3, #0
    5a4a:	56cb      	ldrsb	r3, [r1, r3]
    5a4c:	1c5a      	adds	r2, r3, #1
    5a4e:	d1f8      	bne.n	5a42 <pinmap_find_peripheral+0x2>
    5a50:	1c18      	adds	r0, r3, #0
    5a52:	4770      	bx	lr
    5a54:	6848      	ldr	r0, [r1, #4]
    5a56:	e7fc      	b.n	5a52 <pinmap_find_peripheral+0x12>

00005a58 <pinmap_peripheral>:
    5a58:	1c02      	adds	r2, r0, #0
    5a5a:	b508      	push	{r3, lr}
    5a5c:	1c53      	adds	r3, r2, #1
    5a5e:	d103      	bne.n	5a68 <pinmap_peripheral+0x10>
    5a60:	e00b      	b.n	5a7a <pinmap_peripheral+0x22>
    5a62:	429a      	cmp	r2, r3
    5a64:	d00a      	beq.n	5a7c <pinmap_peripheral+0x24>
    5a66:	310c      	adds	r1, #12
    5a68:	2300      	movs	r3, #0
    5a6a:	56cb      	ldrsb	r3, [r1, r3]
    5a6c:	1c58      	adds	r0, r3, #1
    5a6e:	d1f8      	bne.n	5a62 <pinmap_peripheral+0xa>
    5a70:	4804      	ldr	r0, [pc, #16]	; (5a84 <pinmap_peripheral+0x2c>)
    5a72:	f7ff ffbd 	bl	59f0 <error>
    5a76:	2001      	movs	r0, #1
    5a78:	4240      	negs	r0, r0
    5a7a:	bd08      	pop	{r3, pc}
    5a7c:	6848      	ldr	r0, [r1, #4]
    5a7e:	1c43      	adds	r3, r0, #1
    5a80:	d1fb      	bne.n	5a7a <pinmap_peripheral+0x22>
    5a82:	e7f5      	b.n	5a70 <pinmap_peripheral+0x18>
    5a84:	000102cc 	.word	0x000102cc

00005a88 <pinmap_function>:
    5a88:	1c02      	adds	r2, r0, #0
    5a8a:	b508      	push	{r3, lr}
    5a8c:	1c53      	adds	r3, r2, #1
    5a8e:	d103      	bne.n	5a98 <pinmap_function+0x10>
    5a90:	e00b      	b.n	5aaa <pinmap_function+0x22>
    5a92:	429a      	cmp	r2, r3
    5a94:	d00a      	beq.n	5aac <pinmap_function+0x24>
    5a96:	310c      	adds	r1, #12
    5a98:	2300      	movs	r3, #0
    5a9a:	56cb      	ldrsb	r3, [r1, r3]
    5a9c:	1c58      	adds	r0, r3, #1
    5a9e:	d1f8      	bne.n	5a92 <pinmap_function+0xa>
    5aa0:	4804      	ldr	r0, [pc, #16]	; (5ab4 <pinmap_function+0x2c>)
    5aa2:	f7ff ffa5 	bl	59f0 <error>
    5aa6:	2001      	movs	r0, #1
    5aa8:	4240      	negs	r0, r0
    5aaa:	bd08      	pop	{r3, pc}
    5aac:	6888      	ldr	r0, [r1, #8]
    5aae:	1c43      	adds	r3, r0, #1
    5ab0:	d1fb      	bne.n	5aaa <pinmap_function+0x22>
    5ab2:	e7f5      	b.n	5aa0 <pinmap_function+0x18>
    5ab4:	000102ec 	.word	0x000102ec

00005ab8 <wait_us>:
    5ab8:	b538      	push	{r3, r4, r5, lr}
    5aba:	1c05      	adds	r5, r0, #0
    5abc:	f000 fcbc 	bl	6438 <us_ticker_read>
    5ac0:	1c04      	adds	r4, r0, #0
    5ac2:	f000 fcb9 	bl	6438 <us_ticker_read>
    5ac6:	1b00      	subs	r0, r0, r4
    5ac8:	42a8      	cmp	r0, r5
    5aca:	d3fa      	bcc.n	5ac2 <wait_us+0xa>
    5acc:	bd38      	pop	{r3, r4, r5, pc}
    5ace:	46c0      	nop			; (mov r8, r8)

00005ad0 <wait_ms>:
    5ad0:	b508      	push	{r3, lr}
    5ad2:	23fa      	movs	r3, #250	; 0xfa
    5ad4:	009b      	lsls	r3, r3, #2
    5ad6:	4358      	muls	r0, r3
    5ad8:	f7ff ffee 	bl	5ab8 <wait_us>
    5adc:	bd08      	pop	{r3, pc}
    5ade:	46c0      	nop			; (mov r8, r8)

00005ae0 <_sercom_get_sync_baud_val>:
    5ae0:	b510      	push	{r4, lr}
    5ae2:	0849      	lsrs	r1, r1, #1
    5ae4:	2340      	movs	r3, #64	; 0x40
    5ae6:	2400      	movs	r4, #0
    5ae8:	4281      	cmp	r1, r0
    5aea:	d202      	bcs.n	5af2 <_sercom_get_sync_baud_val+0x12>
    5aec:	1c18      	adds	r0, r3, #0
    5aee:	bd10      	pop	{r4, pc}
    5af0:	1c1c      	adds	r4, r3, #0
    5af2:	1c63      	adds	r3, r4, #1
    5af4:	1a09      	subs	r1, r1, r0
    5af6:	b29b      	uxth	r3, r3
    5af8:	4288      	cmp	r0, r1
    5afa:	d9f9      	bls.n	5af0 <_sercom_get_sync_baud_val+0x10>
    5afc:	2340      	movs	r3, #64	; 0x40
    5afe:	2cff      	cmp	r4, #255	; 0xff
    5b00:	d8f4      	bhi.n	5aec <_sercom_get_sync_baud_val+0xc>
    5b02:	8014      	strh	r4, [r2, #0]
    5b04:	2300      	movs	r3, #0
    5b06:	e7f1      	b.n	5aec <_sercom_get_sync_baud_val+0xc>

00005b08 <_sercom_get_async_baud_val>:
    5b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b0a:	4656      	mov	r6, sl
    5b0c:	464d      	mov	r5, r9
    5b0e:	4644      	mov	r4, r8
    5b10:	465f      	mov	r7, fp
    5b12:	b4f0      	push	{r4, r5, r6, r7}
    5b14:	1c04      	adds	r4, r0, #0
    5b16:	1c25      	adds	r5, r4, #0
    5b18:	b087      	sub	sp, #28
    5b1a:	a810      	add	r0, sp, #64	; 0x40
    5b1c:	7806      	ldrb	r6, [r0, #0]
    5b1e:	2040      	movs	r0, #64	; 0x40
    5b20:	4375      	muls	r5, r6
    5b22:	428d      	cmp	r5, r1
    5b24:	d906      	bls.n	5b34 <_sercom_get_async_baud_val+0x2c>
    5b26:	b007      	add	sp, #28
    5b28:	bc3c      	pop	{r2, r3, r4, r5}
    5b2a:	4690      	mov	r8, r2
    5b2c:	4699      	mov	r9, r3
    5b2e:	46a2      	mov	sl, r4
    5b30:	46ab      	mov	fp, r5
    5b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b34:	9204      	str	r2, [sp, #16]
    5b36:	1c0d      	adds	r5, r1, #0
    5b38:	1c22      	adds	r2, r4, #0
    5b3a:	2b00      	cmp	r3, #0
    5b3c:	d13f      	bne.n	5bbe <_sercom_get_async_baud_val+0xb6>
    5b3e:	1c30      	adds	r0, r6, #0
    5b40:	2100      	movs	r1, #0
    5b42:	f001 fcd9 	bl	74f8 <__aeabi_lmul>
    5b46:	2300      	movs	r3, #0
    5b48:	4683      	mov	fp, r0
    5b4a:	213f      	movs	r1, #63	; 0x3f
    5b4c:	2001      	movs	r0, #1
    5b4e:	469c      	mov	ip, r3
    5b50:	469a      	mov	sl, r3
    5b52:	1c2e      	adds	r6, r5, #0
    5b54:	2700      	movs	r7, #0
    5b56:	2200      	movs	r2, #0
    5b58:	2300      	movs	r3, #0
    5b5a:	4680      	mov	r8, r0
    5b5c:	1c0c      	adds	r4, r1, #0
    5b5e:	e024      	b.n	5baa <_sercom_get_async_baud_val+0xa2>
    5b60:	4641      	mov	r1, r8
    5b62:	40a9      	lsls	r1, r5
    5b64:	1c0d      	adds	r5, r1, #0
    5b66:	4641      	mov	r1, r8
    5b68:	40a1      	lsls	r1, r4
    5b6a:	1c10      	adds	r0, r2, #0
    5b6c:	4689      	mov	r9, r1
    5b6e:	1c19      	adds	r1, r3, #0
    5b70:	1880      	adds	r0, r0, r2
    5b72:	4159      	adcs	r1, r3
    5b74:	1c0b      	adds	r3, r1, #0
    5b76:	1c02      	adds	r2, r0, #0
    5b78:	4659      	mov	r1, fp
    5b7a:	9200      	str	r2, [sp, #0]
    5b7c:	9301      	str	r3, [sp, #4]
    5b7e:	4229      	tst	r1, r5
    5b80:	d003      	beq.n	5b8a <_sercom_get_async_baud_val+0x82>
    5b82:	4640      	mov	r0, r8
    5b84:	4310      	orrs	r0, r2
    5b86:	1c02      	adds	r2, r0, #0
    5b88:	9b01      	ldr	r3, [sp, #4]
    5b8a:	429f      	cmp	r7, r3
    5b8c:	d80b      	bhi.n	5ba6 <_sercom_get_async_baud_val+0x9e>
    5b8e:	d101      	bne.n	5b94 <_sercom_get_async_baud_val+0x8c>
    5b90:	4296      	cmp	r6, r2
    5b92:	d808      	bhi.n	5ba6 <_sercom_get_async_baud_val+0x9e>
    5b94:	4661      	mov	r1, ip
    5b96:	4648      	mov	r0, r9
    5b98:	4301      	orrs	r1, r0
    5b9a:	4650      	mov	r0, sl
    5b9c:	4328      	orrs	r0, r5
    5b9e:	1b92      	subs	r2, r2, r6
    5ba0:	41bb      	sbcs	r3, r7
    5ba2:	468c      	mov	ip, r1
    5ba4:	4682      	mov	sl, r0
    5ba6:	3c01      	subs	r4, #1
    5ba8:	d310      	bcc.n	5bcc <_sercom_get_async_baud_val+0xc4>
    5baa:	2120      	movs	r1, #32
    5bac:	4249      	negs	r1, r1
    5bae:	1865      	adds	r5, r4, r1
    5bb0:	d5d6      	bpl.n	5b60 <_sercom_get_async_baud_val+0x58>
    5bb2:	2120      	movs	r1, #32
    5bb4:	1b0d      	subs	r5, r1, r4
    5bb6:	4641      	mov	r1, r8
    5bb8:	40e9      	lsrs	r1, r5
    5bba:	1c0d      	adds	r5, r1, #0
    5bbc:	e7d3      	b.n	5b66 <_sercom_get_async_baud_val+0x5e>
    5bbe:	2400      	movs	r4, #0
    5bc0:	2b01      	cmp	r3, #1
    5bc2:	d007      	beq.n	5bd4 <_sercom_get_async_baud_val+0xcc>
    5bc4:	9b04      	ldr	r3, [sp, #16]
    5bc6:	2000      	movs	r0, #0
    5bc8:	801c      	strh	r4, [r3, #0]
    5bca:	e7ac      	b.n	5b26 <_sercom_get_async_baud_val+0x1e>
    5bcc:	4663      	mov	r3, ip
    5bce:	425c      	negs	r4, r3
    5bd0:	0c24      	lsrs	r4, r4, #16
    5bd2:	e7f7      	b.n	5bc4 <_sercom_get_async_baud_val+0xbc>
    5bd4:	0f4b      	lsrs	r3, r1, #29
    5bd6:	1c1c      	adds	r4, r3, #0
    5bd8:	00cb      	lsls	r3, r1, #3
    5bda:	4698      	mov	r8, r3
    5bdc:	1c30      	adds	r0, r6, #0
    5bde:	2300      	movs	r3, #0
    5be0:	2100      	movs	r1, #0
    5be2:	f001 fc89 	bl	74f8 <__aeabi_lmul>
    5be6:	2300      	movs	r3, #0
    5be8:	469c      	mov	ip, r3
    5bea:	3320      	adds	r3, #32
    5bec:	469b      	mov	fp, r3
    5bee:	4663      	mov	r3, ip
    5bf0:	46a1      	mov	r9, r4
    5bf2:	9000      	str	r0, [sp, #0]
    5bf4:	9101      	str	r1, [sp, #4]
    5bf6:	9303      	str	r3, [sp, #12]
    5bf8:	466b      	mov	r3, sp
    5bfa:	7b1b      	ldrb	r3, [r3, #12]
    5bfc:	2000      	movs	r0, #0
    5bfe:	9305      	str	r3, [sp, #20]
    5c00:	2300      	movs	r3, #0
    5c02:	2100      	movs	r1, #0
    5c04:	469c      	mov	ip, r3
    5c06:	223f      	movs	r2, #63	; 0x3f
    5c08:	e027      	b.n	5c5a <_sercom_get_async_baud_val+0x152>
    5c0a:	2401      	movs	r4, #1
    5c0c:	409c      	lsls	r4, r3
    5c0e:	1c23      	adds	r3, r4, #0
    5c10:	2701      	movs	r7, #1
    5c12:	4646      	mov	r6, r8
    5c14:	4097      	lsls	r7, r2
    5c16:	403e      	ands	r6, r7
    5c18:	1c04      	adds	r4, r0, #0
    5c1a:	1c0d      	adds	r5, r1, #0
    5c1c:	46b2      	mov	sl, r6
    5c1e:	464e      	mov	r6, r9
    5c20:	1824      	adds	r4, r4, r0
    5c22:	414d      	adcs	r5, r1
    5c24:	4033      	ands	r3, r6
    5c26:	4656      	mov	r6, sl
    5c28:	1c20      	adds	r0, r4, #0
    5c2a:	1c29      	adds	r1, r5, #0
    5c2c:	4333      	orrs	r3, r6
    5c2e:	d004      	beq.n	5c3a <_sercom_get_async_baud_val+0x132>
    5c30:	2101      	movs	r1, #1
    5c32:	1c23      	adds	r3, r4, #0
    5c34:	430b      	orrs	r3, r1
    5c36:	1c18      	adds	r0, r3, #0
    5c38:	1c29      	adds	r1, r5, #0
    5c3a:	9b01      	ldr	r3, [sp, #4]
    5c3c:	428b      	cmp	r3, r1
    5c3e:	d80a      	bhi.n	5c56 <_sercom_get_async_baud_val+0x14e>
    5c40:	d102      	bne.n	5c48 <_sercom_get_async_baud_val+0x140>
    5c42:	9b00      	ldr	r3, [sp, #0]
    5c44:	4283      	cmp	r3, r0
    5c46:	d806      	bhi.n	5c56 <_sercom_get_async_baud_val+0x14e>
    5c48:	9b00      	ldr	r3, [sp, #0]
    5c4a:	9c01      	ldr	r4, [sp, #4]
    5c4c:	1ac0      	subs	r0, r0, r3
    5c4e:	41a1      	sbcs	r1, r4
    5c50:	4663      	mov	r3, ip
    5c52:	433b      	orrs	r3, r7
    5c54:	469c      	mov	ip, r3
    5c56:	3a01      	subs	r2, #1
    5c58:	d309      	bcc.n	5c6e <_sercom_get_async_baud_val+0x166>
    5c5a:	2320      	movs	r3, #32
    5c5c:	425b      	negs	r3, r3
    5c5e:	18d3      	adds	r3, r2, r3
    5c60:	d5d3      	bpl.n	5c0a <_sercom_get_async_baud_val+0x102>
    5c62:	465b      	mov	r3, fp
    5c64:	2401      	movs	r4, #1
    5c66:	1a9b      	subs	r3, r3, r2
    5c68:	40dc      	lsrs	r4, r3
    5c6a:	1c23      	adds	r3, r4, #0
    5c6c:	e7d0      	b.n	5c10 <_sercom_get_async_baud_val+0x108>
    5c6e:	4661      	mov	r1, ip
    5c70:	9a03      	ldr	r2, [sp, #12]
    5c72:	1a8b      	subs	r3, r1, r2
    5c74:	4907      	ldr	r1, [pc, #28]	; (5c94 <_sercom_get_async_baud_val+0x18c>)
    5c76:	08db      	lsrs	r3, r3, #3
    5c78:	428b      	cmp	r3, r1
    5c7a:	d906      	bls.n	5c8a <_sercom_get_async_baud_val+0x182>
    5c7c:	1c13      	adds	r3, r2, #0
    5c7e:	3301      	adds	r3, #1
    5c80:	9303      	str	r3, [sp, #12]
    5c82:	2b08      	cmp	r3, #8
    5c84:	d1b8      	bne.n	5bf8 <_sercom_get_async_baud_val+0xf0>
    5c86:	2040      	movs	r0, #64	; 0x40
    5c88:	e74d      	b.n	5b26 <_sercom_get_async_baud_val+0x1e>
    5c8a:	9a05      	ldr	r2, [sp, #20]
    5c8c:	0354      	lsls	r4, r2, #13
    5c8e:	431c      	orrs	r4, r3
    5c90:	b2a4      	uxth	r4, r4
    5c92:	e797      	b.n	5bc4 <_sercom_get_async_baud_val+0xbc>
    5c94:	00001fff 	.word	0x00001fff

00005c98 <sercom_set_gclk_generator>:
    5c98:	b530      	push	{r4, r5, lr}
    5c9a:	4c0e      	ldr	r4, [pc, #56]	; (5cd4 <sercom_set_gclk_generator+0x3c>)
    5c9c:	b083      	sub	sp, #12
    5c9e:	7823      	ldrb	r3, [r4, #0]
    5ca0:	1c05      	adds	r5, r0, #0
    5ca2:	2b00      	cmp	r3, #0
    5ca4:	d006      	beq.n	5cb4 <sercom_set_gclk_generator+0x1c>
    5ca6:	2900      	cmp	r1, #0
    5ca8:	d104      	bne.n	5cb4 <sercom_set_gclk_generator+0x1c>
    5caa:	7863      	ldrb	r3, [r4, #1]
    5cac:	4283      	cmp	r3, r0
    5cae:	d00f      	beq.n	5cd0 <sercom_set_gclk_generator+0x38>
    5cb0:	201d      	movs	r0, #29
    5cb2:	e00b      	b.n	5ccc <sercom_set_gclk_generator+0x34>
    5cb4:	a901      	add	r1, sp, #4
    5cb6:	2013      	movs	r0, #19
    5cb8:	700d      	strb	r5, [r1, #0]
    5cba:	f7fe ff55 	bl	4b68 <system_gclk_chan_set_config>
    5cbe:	2013      	movs	r0, #19
    5cc0:	f7fe ff14 	bl	4aec <system_gclk_chan_enable>
    5cc4:	2301      	movs	r3, #1
    5cc6:	2000      	movs	r0, #0
    5cc8:	7065      	strb	r5, [r4, #1]
    5cca:	7023      	strb	r3, [r4, #0]
    5ccc:	b003      	add	sp, #12
    5cce:	bd30      	pop	{r4, r5, pc}
    5cd0:	2000      	movs	r0, #0
    5cd2:	e7fb      	b.n	5ccc <sercom_set_gclk_generator+0x34>
    5cd4:	2000442c 	.word	0x2000442c

00005cd8 <_sercom_get_sercom_inst_index>:
    5cd8:	b570      	push	{r4, r5, r6, lr}
    5cda:	b086      	sub	sp, #24
    5cdc:	4669      	mov	r1, sp
    5cde:	4b09      	ldr	r3, [pc, #36]	; (5d04 <_sercom_get_sercom_inst_index+0x2c>)
    5ce0:	466a      	mov	r2, sp
    5ce2:	cb70      	ldmia	r3!, {r4, r5, r6}
    5ce4:	c170      	stmia	r1!, {r4, r5, r6}
    5ce6:	cb70      	ldmia	r3!, {r4, r5, r6}
    5ce8:	c170      	stmia	r1!, {r4, r5, r6}
    5cea:	2300      	movs	r3, #0
    5cec:	0099      	lsls	r1, r3, #2
    5cee:	5851      	ldr	r1, [r2, r1]
    5cf0:	4281      	cmp	r1, r0
    5cf2:	d005      	beq.n	5d00 <_sercom_get_sercom_inst_index+0x28>
    5cf4:	3301      	adds	r3, #1
    5cf6:	2b06      	cmp	r3, #6
    5cf8:	d1f8      	bne.n	5cec <_sercom_get_sercom_inst_index+0x14>
    5cfa:	2000      	movs	r0, #0
    5cfc:	b006      	add	sp, #24
    5cfe:	bd70      	pop	{r4, r5, r6, pc}
    5d00:	b2d8      	uxtb	r0, r3
    5d02:	e7fb      	b.n	5cfc <_sercom_get_sercom_inst_index+0x24>
    5d04:	0001051c 	.word	0x0001051c

00005d08 <system_clock_source_get_hz>:
    5d08:	b510      	push	{r4, lr}
    5d0a:	2808      	cmp	r0, #8
    5d0c:	d82c      	bhi.n	5d68 <system_clock_source_get_hz+0x60>
    5d0e:	4b1b      	ldr	r3, [pc, #108]	; (5d7c <system_clock_source_get_hz+0x74>)
    5d10:	0080      	lsls	r0, r0, #2
    5d12:	581b      	ldr	r3, [r3, r0]
    5d14:	469f      	mov	pc, r3
    5d16:	2080      	movs	r0, #128	; 0x80
    5d18:	0200      	lsls	r0, r0, #8
    5d1a:	bd10      	pop	{r4, pc}
    5d1c:	4b18      	ldr	r3, [pc, #96]	; (5d80 <system_clock_source_get_hz+0x78>)
    5d1e:	6958      	ldr	r0, [r3, #20]
    5d20:	e7fb      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d22:	4b18      	ldr	r3, [pc, #96]	; (5d84 <system_clock_source_get_hz+0x7c>)
    5d24:	6a18      	ldr	r0, [r3, #32]
    5d26:	4b18      	ldr	r3, [pc, #96]	; (5d88 <system_clock_source_get_hz+0x80>)
    5d28:	0580      	lsls	r0, r0, #22
    5d2a:	0f80      	lsrs	r0, r0, #30
    5d2c:	40c3      	lsrs	r3, r0
    5d2e:	1c18      	adds	r0, r3, #0
    5d30:	e7f3      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d32:	2002      	movs	r0, #2
    5d34:	4c12      	ldr	r4, [pc, #72]	; (5d80 <system_clock_source_get_hz+0x78>)
    5d36:	6823      	ldr	r3, [r4, #0]
    5d38:	4018      	ands	r0, r3
    5d3a:	d0ee      	beq.n	5d1a <system_clock_source_get_hz+0x12>
    5d3c:	2210      	movs	r2, #16
    5d3e:	4911      	ldr	r1, [pc, #68]	; (5d84 <system_clock_source_get_hz+0x7c>)
    5d40:	68cb      	ldr	r3, [r1, #12]
    5d42:	421a      	tst	r2, r3
    5d44:	d0fc      	beq.n	5d40 <system_clock_source_get_hz+0x38>
    5d46:	6823      	ldr	r3, [r4, #0]
    5d48:	075b      	lsls	r3, r3, #29
    5d4a:	d40f      	bmi.n	5d6c <system_clock_source_get_hz+0x64>
    5d4c:	480f      	ldr	r0, [pc, #60]	; (5d8c <system_clock_source_get_hz+0x84>)
    5d4e:	e7e4      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d50:	4b0b      	ldr	r3, [pc, #44]	; (5d80 <system_clock_source_get_hz+0x78>)
    5d52:	6918      	ldr	r0, [r3, #16]
    5d54:	e7e1      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d56:	2350      	movs	r3, #80	; 0x50
    5d58:	4a0a      	ldr	r2, [pc, #40]	; (5d84 <system_clock_source_get_hz+0x7c>)
    5d5a:	2000      	movs	r0, #0
    5d5c:	5cd3      	ldrb	r3, [r2, r3]
    5d5e:	075b      	lsls	r3, r3, #29
    5d60:	d5db      	bpl.n	5d1a <system_clock_source_get_hz+0x12>
    5d62:	4b07      	ldr	r3, [pc, #28]	; (5d80 <system_clock_source_get_hz+0x78>)
    5d64:	68d8      	ldr	r0, [r3, #12]
    5d66:	e7d8      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d68:	2000      	movs	r0, #0
    5d6a:	e7d6      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d6c:	2000      	movs	r0, #0
    5d6e:	f7fe ff07 	bl	4b80 <system_gclk_chan_get_hz>
    5d72:	68a3      	ldr	r3, [r4, #8]
    5d74:	041b      	lsls	r3, r3, #16
    5d76:	0c1b      	lsrs	r3, r3, #16
    5d78:	4358      	muls	r0, r3
    5d7a:	e7ce      	b.n	5d1a <system_clock_source_get_hz+0x12>
    5d7c:	00010534 	.word	0x00010534
    5d80:	20004430 	.word	0x20004430
    5d84:	40000800 	.word	0x40000800
    5d88:	007a1200 	.word	0x007a1200
    5d8c:	02dc6c00 	.word	0x02dc6c00

00005d90 <system_clock_source_enable>:
    5d90:	b510      	push	{r4, lr}
    5d92:	2808      	cmp	r0, #8
    5d94:	d841      	bhi.n	5e1a <system_clock_source_enable+0x8a>
    5d96:	4b22      	ldr	r3, [pc, #136]	; (5e20 <system_clock_source_enable+0x90>)
    5d98:	0080      	lsls	r0, r0, #2
    5d9a:	581b      	ldr	r3, [r3, r0]
    5d9c:	469f      	mov	pc, r3
    5d9e:	2000      	movs	r0, #0
    5da0:	bd10      	pop	{r4, pc}
    5da2:	2302      	movs	r3, #2
    5da4:	4a1f      	ldr	r2, [pc, #124]	; (5e24 <system_clock_source_enable+0x94>)
    5da6:	2000      	movs	r0, #0
    5da8:	6991      	ldr	r1, [r2, #24]
    5daa:	430b      	orrs	r3, r1
    5dac:	6193      	str	r3, [r2, #24]
    5dae:	e7f7      	b.n	5da0 <system_clock_source_enable+0x10>
    5db0:	2302      	movs	r3, #2
    5db2:	4a1c      	ldr	r2, [pc, #112]	; (5e24 <system_clock_source_enable+0x94>)
    5db4:	2000      	movs	r0, #0
    5db6:	8a91      	ldrh	r1, [r2, #20]
    5db8:	430b      	orrs	r3, r1
    5dba:	8293      	strh	r3, [r2, #20]
    5dbc:	e7f0      	b.n	5da0 <system_clock_source_enable+0x10>
    5dbe:	2302      	movs	r3, #2
    5dc0:	4a18      	ldr	r2, [pc, #96]	; (5e24 <system_clock_source_enable+0x94>)
    5dc2:	2000      	movs	r0, #0
    5dc4:	6a11      	ldr	r1, [r2, #32]
    5dc6:	430b      	orrs	r3, r1
    5dc8:	6213      	str	r3, [r2, #32]
    5dca:	e7e9      	b.n	5da0 <system_clock_source_enable+0x10>
    5dcc:	2302      	movs	r3, #2
    5dce:	2010      	movs	r0, #16
    5dd0:	4c15      	ldr	r4, [pc, #84]	; (5e28 <system_clock_source_enable+0x98>)
    5dd2:	6822      	ldr	r2, [r4, #0]
    5dd4:	4313      	orrs	r3, r2
    5dd6:	6023      	str	r3, [r4, #0]
    5dd8:	6822      	ldr	r2, [r4, #0]
    5dda:	4b14      	ldr	r3, [pc, #80]	; (5e2c <system_clock_source_enable+0x9c>)
    5ddc:	4013      	ands	r3, r2
    5dde:	4a11      	ldr	r2, [pc, #68]	; (5e24 <system_clock_source_enable+0x94>)
    5de0:	8493      	strh	r3, [r2, #36]	; 0x24
    5de2:	68d3      	ldr	r3, [r2, #12]
    5de4:	490f      	ldr	r1, [pc, #60]	; (5e24 <system_clock_source_enable+0x94>)
    5de6:	4218      	tst	r0, r3
    5de8:	d0fb      	beq.n	5de2 <system_clock_source_enable+0x52>
    5dea:	68a3      	ldr	r3, [r4, #8]
    5dec:	2000      	movs	r0, #0
    5dee:	62cb      	str	r3, [r1, #44]	; 0x2c
    5df0:	6863      	ldr	r3, [r4, #4]
    5df2:	628b      	str	r3, [r1, #40]	; 0x28
    5df4:	6823      	ldr	r3, [r4, #0]
    5df6:	b29b      	uxth	r3, r3
    5df8:	848b      	strh	r3, [r1, #36]	; 0x24
    5dfa:	e7d1      	b.n	5da0 <system_clock_source_enable+0x10>
    5dfc:	2244      	movs	r2, #68	; 0x44
    5dfe:	2302      	movs	r3, #2
    5e00:	4908      	ldr	r1, [pc, #32]	; (5e24 <system_clock_source_enable+0x94>)
    5e02:	5c88      	ldrb	r0, [r1, r2]
    5e04:	4303      	orrs	r3, r0
    5e06:	548b      	strb	r3, [r1, r2]
    5e08:	2000      	movs	r0, #0
    5e0a:	e7c9      	b.n	5da0 <system_clock_source_enable+0x10>
    5e0c:	2302      	movs	r3, #2
    5e0e:	4a05      	ldr	r2, [pc, #20]	; (5e24 <system_clock_source_enable+0x94>)
    5e10:	2000      	movs	r0, #0
    5e12:	8a11      	ldrh	r1, [r2, #16]
    5e14:	430b      	orrs	r3, r1
    5e16:	8213      	strh	r3, [r2, #16]
    5e18:	e7c2      	b.n	5da0 <system_clock_source_enable+0x10>
    5e1a:	2017      	movs	r0, #23
    5e1c:	e7c0      	b.n	5da0 <system_clock_source_enable+0x10>
    5e1e:	46c0      	nop			; (mov r8, r8)
    5e20:	00010558 	.word	0x00010558
    5e24:	40000800 	.word	0x40000800
    5e28:	20004430 	.word	0x20004430
    5e2c:	0000ff7f 	.word	0x0000ff7f

00005e30 <system_clock_init>:
    5e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e32:	4647      	mov	r7, r8
    5e34:	22c2      	movs	r2, #194	; 0xc2
    5e36:	211e      	movs	r1, #30
    5e38:	b480      	push	{r7}
    5e3a:	4b31      	ldr	r3, [pc, #196]	; (5f00 <system_clock_init+0xd0>)
    5e3c:	00d2      	lsls	r2, r2, #3
    5e3e:	609a      	str	r2, [r3, #8]
    5e40:	4a30      	ldr	r2, [pc, #192]	; (5f04 <system_clock_init+0xd4>)
    5e42:	2400      	movs	r4, #0
    5e44:	6853      	ldr	r3, [r2, #4]
    5e46:	b084      	sub	sp, #16
    5e48:	438b      	bics	r3, r1
    5e4a:	6053      	str	r3, [r2, #4]
    5e4c:	2301      	movs	r3, #1
    5e4e:	ad01      	add	r5, sp, #4
    5e50:	702b      	strb	r3, [r5, #0]
    5e52:	b2e0      	uxtb	r0, r4
    5e54:	1c29      	adds	r1, r5, #0
    5e56:	3401      	adds	r4, #1
    5e58:	f7fe fe86 	bl	4b68 <system_gclk_chan_set_config>
    5e5c:	2c25      	cmp	r4, #37	; 0x25
    5e5e:	d1f8      	bne.n	5e52 <system_clock_init+0x22>
    5e60:	4b29      	ldr	r3, [pc, #164]	; (5f08 <system_clock_init+0xd8>)
    5e62:	4c27      	ldr	r4, [pc, #156]	; (5f00 <system_clock_init+0xd0>)
    5e64:	681b      	ldr	r3, [r3, #0]
    5e66:	69a1      	ldr	r1, [r4, #24]
    5e68:	04db      	lsls	r3, r3, #19
    5e6a:	0e5b      	lsrs	r3, r3, #25
    5e6c:	041a      	lsls	r2, r3, #16
    5e6e:	4b27      	ldr	r3, [pc, #156]	; (5f0c <system_clock_init+0xdc>)
    5e70:	2604      	movs	r6, #4
    5e72:	400b      	ands	r3, r1
    5e74:	4313      	orrs	r3, r2
    5e76:	2208      	movs	r2, #8
    5e78:	2740      	movs	r7, #64	; 0x40
    5e7a:	61a3      	str	r3, [r4, #24]
    5e7c:	69a3      	ldr	r3, [r4, #24]
    5e7e:	2004      	movs	r0, #4
    5e80:	4333      	orrs	r3, r6
    5e82:	4313      	orrs	r3, r2
    5e84:	43bb      	bics	r3, r7
    5e86:	3278      	adds	r2, #120	; 0x78
    5e88:	4690      	mov	r8, r2
    5e8a:	4313      	orrs	r3, r2
    5e8c:	22e0      	movs	r2, #224	; 0xe0
    5e8e:	00d2      	lsls	r2, r2, #3
    5e90:	4313      	orrs	r3, r2
    5e92:	4a1f      	ldr	r2, [pc, #124]	; (5f10 <system_clock_init+0xe0>)
    5e94:	4013      	ands	r3, r2
    5e96:	61a3      	str	r3, [r4, #24]
    5e98:	f7ff ff7a 	bl	5d90 <system_clock_source_enable>
    5e9c:	4642      	mov	r2, r8
    5e9e:	6a23      	ldr	r3, [r4, #32]
    5ea0:	2006      	movs	r0, #6
    5ea2:	43bb      	bics	r3, r7
    5ea4:	4313      	orrs	r3, r2
    5ea6:	4a1b      	ldr	r2, [pc, #108]	; (5f14 <system_clock_init+0xe4>)
    5ea8:	4013      	ands	r3, r2
    5eaa:	6223      	str	r3, [r4, #32]
    5eac:	f7ff ff70 	bl	5d90 <system_clock_source_enable>
    5eb0:	2400      	movs	r4, #0
    5eb2:	f7fe fd65 	bl	4980 <system_gclk_init>
    5eb6:	2320      	movs	r3, #32
    5eb8:	1c29      	adds	r1, r5, #0
    5eba:	2002      	movs	r0, #2
    5ebc:	606b      	str	r3, [r5, #4]
    5ebe:	706c      	strb	r4, [r5, #1]
    5ec0:	722c      	strb	r4, [r5, #8]
    5ec2:	726c      	strb	r4, [r5, #9]
    5ec4:	702e      	strb	r6, [r5, #0]
    5ec6:	f7fe fd6d 	bl	49a4 <system_gclk_gen_set_config>
    5eca:	2002      	movs	r0, #2
    5ecc:	f7fe fdb4 	bl	4a38 <system_gclk_gen_enable>
    5ed0:	4b11      	ldr	r3, [pc, #68]	; (5f18 <system_clock_init+0xe8>)
    5ed2:	1c29      	adds	r1, r5, #0
    5ed4:	721c      	strb	r4, [r3, #8]
    5ed6:	725c      	strb	r4, [r3, #9]
    5ed8:	729c      	strb	r4, [r3, #10]
    5eda:	72dc      	strb	r4, [r3, #11]
    5edc:	2301      	movs	r3, #1
    5ede:	2000      	movs	r0, #0
    5ee0:	606b      	str	r3, [r5, #4]
    5ee2:	3305      	adds	r3, #5
    5ee4:	702b      	strb	r3, [r5, #0]
    5ee6:	706c      	strb	r4, [r5, #1]
    5ee8:	722c      	strb	r4, [r5, #8]
    5eea:	726c      	strb	r4, [r5, #9]
    5eec:	f7fe fd5a 	bl	49a4 <system_gclk_gen_set_config>
    5ef0:	2000      	movs	r0, #0
    5ef2:	f7fe fda1 	bl	4a38 <system_gclk_gen_enable>
    5ef6:	b004      	add	sp, #16
    5ef8:	bc04      	pop	{r2}
    5efa:	4690      	mov	r8, r2
    5efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	40000800 	.word	0x40000800
    5f04:	41004000 	.word	0x41004000
    5f08:	00806024 	.word	0x00806024
    5f0c:	ff80ffff 	.word	0xff80ffff
    5f10:	ffffefff 	.word	0xffffefff
    5f14:	fffffcff 	.word	0xfffffcff
    5f18:	40000400 	.word	0x40000400

00005f1c <gpio_init>:
    5f1c:	b570      	push	{r4, r5, r6, lr}
    5f1e:	1c05      	adds	r5, r0, #0
    5f20:	b082      	sub	sp, #8
    5f22:	1c0c      	adds	r4, r1, #0
    5f24:	1c4b      	adds	r3, r1, #1
    5f26:	d028      	beq.n	5f7a <gpio_init+0x5e>
    5f28:	b2c8      	uxtb	r0, r1
    5f2a:	2900      	cmp	r1, #0
    5f2c:	db2c      	blt.n	5f88 <gpio_init+0x6c>
    5f2e:	4b18      	ldr	r3, [pc, #96]	; (5f90 <gpio_init+0x74>)
    5f30:	0946      	lsrs	r6, r0, #5
    5f32:	469c      	mov	ip, r3
    5f34:	01f6      	lsls	r6, r6, #7
    5f36:	4466      	add	r6, ip
    5f38:	702c      	strb	r4, [r5, #0]
    5f3a:	17e2      	asrs	r2, r4, #31
    5f3c:	0ed2      	lsrs	r2, r2, #27
    5f3e:	18a3      	adds	r3, r4, r2
    5f40:	241f      	movs	r4, #31
    5f42:	401c      	ands	r4, r3
    5f44:	1aa4      	subs	r4, r4, r2
    5f46:	2201      	movs	r2, #1
    5f48:	1c13      	adds	r3, r2, #0
    5f4a:	b264      	sxtb	r4, r4
    5f4c:	40a3      	lsls	r3, r4
    5f4e:	606b      	str	r3, [r5, #4]
    5f50:	2300      	movs	r3, #0
    5f52:	a901      	add	r1, sp, #4
    5f54:	722b      	strb	r3, [r5, #8]
    5f56:	72ab      	strb	r3, [r5, #10]
    5f58:	726a      	strb	r2, [r5, #9]
    5f5a:	700b      	strb	r3, [r1, #0]
    5f5c:	708b      	strb	r3, [r1, #2]
    5f5e:	704a      	strb	r2, [r1, #1]
    5f60:	f000 fe6a 	bl	6c38 <port_pin_set_config>
    5f64:	1c33      	adds	r3, r6, #0
    5f66:	3314      	adds	r3, #20
    5f68:	60eb      	str	r3, [r5, #12]
    5f6a:	3304      	adds	r3, #4
    5f6c:	612b      	str	r3, [r5, #16]
    5f6e:	3610      	adds	r6, #16
    5f70:	3308      	adds	r3, #8
    5f72:	616b      	str	r3, [r5, #20]
    5f74:	61ae      	str	r6, [r5, #24]
    5f76:	b002      	add	sp, #8
    5f78:	bd70      	pop	{r4, r5, r6, pc}
    5f7a:	4806      	ldr	r0, [pc, #24]	; (5f94 <gpio_init+0x78>)
    5f7c:	4906      	ldr	r1, [pc, #24]	; (5f98 <gpio_init+0x7c>)
    5f7e:	221f      	movs	r2, #31
    5f80:	f7ff fd2a 	bl	59d8 <mbed_assert_internal>
    5f84:	702c      	strb	r4, [r5, #0]
    5f86:	e7f6      	b.n	5f76 <gpio_init+0x5a>
    5f88:	702c      	strb	r4, [r5, #0]
    5f8a:	2600      	movs	r6, #0
    5f8c:	e7d5      	b.n	5f3a <gpio_init+0x1e>
    5f8e:	46c0      	nop			; (mov r8, r8)
    5f90:	41004400 	.word	0x41004400
    5f94:	0001057c 	.word	0x0001057c
    5f98:	00010590 	.word	0x00010590

00005f9c <gpio_mode>:
    5f9c:	b530      	push	{r4, r5, lr}
    5f9e:	1c04      	adds	r4, r0, #0
    5fa0:	7800      	ldrb	r0, [r0, #0]
    5fa2:	b083      	sub	sp, #12
    5fa4:	b243      	sxtb	r3, r0
    5fa6:	1c0d      	adds	r5, r1, #0
    5fa8:	3301      	adds	r3, #1
    5faa:	d013      	beq.n	5fd4 <gpio_mode+0x38>
    5fac:	7aa3      	ldrb	r3, [r4, #10]
    5fae:	a901      	add	r1, sp, #4
    5fb0:	700b      	strb	r3, [r1, #0]
    5fb2:	7a23      	ldrb	r3, [r4, #8]
    5fb4:	7265      	strb	r5, [r4, #9]
    5fb6:	1e5a      	subs	r2, r3, #1
    5fb8:	4193      	sbcs	r3, r2
    5fba:	708b      	strb	r3, [r1, #2]
    5fbc:	2d01      	cmp	r5, #1
    5fbe:	d003      	beq.n	5fc8 <gpio_mode+0x2c>
    5fc0:	2d00      	cmp	r5, #0
    5fc2:	d001      	beq.n	5fc8 <gpio_mode+0x2c>
    5fc4:	2d02      	cmp	r5, #2
    5fc6:	d100      	bne.n	5fca <gpio_mode+0x2e>
    5fc8:	704d      	strb	r5, [r1, #1]
    5fca:	b2c0      	uxtb	r0, r0
    5fcc:	f000 fe34 	bl	6c38 <port_pin_set_config>
    5fd0:	b003      	add	sp, #12
    5fd2:	bd30      	pop	{r4, r5, pc}
    5fd4:	4803      	ldr	r0, [pc, #12]	; (5fe4 <gpio_mode+0x48>)
    5fd6:	4904      	ldr	r1, [pc, #16]	; (5fe8 <gpio_mode+0x4c>)
    5fd8:	2236      	movs	r2, #54	; 0x36
    5fda:	f7ff fcfd 	bl	59d8 <mbed_assert_internal>
    5fde:	7820      	ldrb	r0, [r4, #0]
    5fe0:	e7e4      	b.n	5fac <gpio_mode+0x10>
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	0000f864 	.word	0x0000f864
    5fe8:	00010590 	.word	0x00010590

00005fec <gpio_dir>:
    5fec:	b530      	push	{r4, r5, lr}
    5fee:	1c04      	adds	r4, r0, #0
    5ff0:	7800      	ldrb	r0, [r0, #0]
    5ff2:	b083      	sub	sp, #12
    5ff4:	b243      	sxtb	r3, r0
    5ff6:	1c0d      	adds	r5, r1, #0
    5ff8:	3301      	adds	r3, #1
    5ffa:	d013      	beq.n	6024 <gpio_dir+0x38>
    5ffc:	7a63      	ldrb	r3, [r4, #9]
    5ffe:	a901      	add	r1, sp, #4
    6000:	704b      	strb	r3, [r1, #1]
    6002:	7a23      	ldrb	r3, [r4, #8]
    6004:	72a5      	strb	r5, [r4, #10]
    6006:	1e5a      	subs	r2, r3, #1
    6008:	4193      	sbcs	r3, r2
    600a:	708b      	strb	r3, [r1, #2]
    600c:	2d01      	cmp	r5, #1
    600e:	d003      	beq.n	6018 <gpio_dir+0x2c>
    6010:	2d00      	cmp	r5, #0
    6012:	d001      	beq.n	6018 <gpio_dir+0x2c>
    6014:	2d02      	cmp	r5, #2
    6016:	d100      	bne.n	601a <gpio_dir+0x2e>
    6018:	700d      	strb	r5, [r1, #0]
    601a:	b2c0      	uxtb	r0, r0
    601c:	f000 fe0c 	bl	6c38 <port_pin_set_config>
    6020:	b003      	add	sp, #12
    6022:	bd30      	pop	{r4, r5, pc}
    6024:	4803      	ldr	r0, [pc, #12]	; (6034 <gpio_dir+0x48>)
    6026:	4904      	ldr	r1, [pc, #16]	; (6038 <gpio_dir+0x4c>)
    6028:	224c      	movs	r2, #76	; 0x4c
    602a:	f7ff fcd5 	bl	59d8 <mbed_assert_internal>
    602e:	7820      	ldrb	r0, [r4, #0]
    6030:	e7e4      	b.n	5ffc <gpio_dir+0x10>
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	0000f864 	.word	0x0000f864
    6038:	00010590 	.word	0x00010590

0000603c <pin_mode>:
    603c:	b5f0      	push	{r4, r5, r6, r7, lr}
    603e:	4645      	mov	r5, r8
    6040:	4657      	mov	r7, sl
    6042:	464e      	mov	r6, r9
    6044:	b4e0      	push	{r5, r6, r7}
    6046:	4688      	mov	r8, r1
    6048:	b082      	sub	sp, #8
    604a:	1c05      	adds	r5, r0, #0
    604c:	1c43      	adds	r3, r0, #1
    604e:	d062      	beq.n	6116 <pin_mode+0xda>
    6050:	17c4      	asrs	r4, r0, #31
    6052:	0ee2      	lsrs	r2, r4, #27
    6054:	241f      	movs	r4, #31
    6056:	2701      	movs	r7, #1
    6058:	1883      	adds	r3, r0, r2
    605a:	401c      	ands	r4, r3
    605c:	1aa4      	subs	r4, r4, r2
    605e:	b264      	sxtb	r4, r4
    6060:	40a7      	lsls	r7, r4
    6062:	b2c6      	uxtb	r6, r0
    6064:	46ba      	mov	sl, r7
    6066:	0975      	lsrs	r5, r6, #5
    6068:	09f3      	lsrs	r3, r6, #7
    606a:	d13e      	bne.n	60ea <pin_mode+0xae>
    606c:	4b37      	ldr	r3, [pc, #220]	; (614c <pin_mode+0x110>)
    606e:	01ed      	lsls	r5, r5, #7
    6070:	469c      	mov	ip, r3
    6072:	4465      	add	r5, ip
    6074:	2d00      	cmp	r5, #0
    6076:	d062      	beq.n	613e <pin_mode+0x102>
    6078:	1c28      	adds	r0, r5, #0
    607a:	231f      	movs	r3, #31
    607c:	4033      	ands	r3, r6
    607e:	18c2      	adds	r2, r0, r3
    6080:	3240      	adds	r2, #64	; 0x40
    6082:	7812      	ldrb	r2, [r2, #0]
    6084:	2101      	movs	r1, #1
    6086:	4694      	mov	ip, r2
    6088:	4667      	mov	r7, ip
    608a:	2280      	movs	r2, #128	; 0x80
    608c:	4239      	tst	r1, r7
    608e:	d136      	bne.n	60fe <pin_mode+0xc2>
    6090:	a901      	add	r1, sp, #4
    6092:	700a      	strb	r2, [r1, #0]
    6094:	2202      	movs	r2, #2
    6096:	192c      	adds	r4, r5, r4
    6098:	3440      	adds	r4, #64	; 0x40
    609a:	7823      	ldrb	r3, [r4, #0]
    609c:	421a      	tst	r2, r3
    609e:	d010      	beq.n	60c2 <pin_mode+0x86>
    60a0:	4650      	mov	r0, sl
    60a2:	682b      	ldr	r3, [r5, #0]
    60a4:	4003      	ands	r3, r0
    60a6:	d134      	bne.n	6112 <pin_mode+0xd6>
    60a8:	704b      	strb	r3, [r1, #1]
    60aa:	7823      	ldrb	r3, [r4, #0]
    60ac:	075b      	lsls	r3, r3, #29
    60ae:	d50a      	bpl.n	60c6 <pin_mode+0x8a>
    60b0:	692b      	ldr	r3, [r5, #16]
    60b2:	4642      	mov	r2, r8
    60b4:	2300      	movs	r3, #0
    60b6:	70cb      	strb	r3, [r1, #3]
    60b8:	2a01      	cmp	r2, #1
    60ba:	d109      	bne.n	60d0 <pin_mode+0x94>
    60bc:	4643      	mov	r3, r8
    60be:	708b      	strb	r3, [r1, #2]
    60c0:	e00a      	b.n	60d8 <pin_mode+0x9c>
    60c2:	2301      	movs	r3, #1
    60c4:	704b      	strb	r3, [r1, #1]
    60c6:	2300      	movs	r3, #0
    60c8:	4642      	mov	r2, r8
    60ca:	70cb      	strb	r3, [r1, #3]
    60cc:	2a01      	cmp	r2, #1
    60ce:	d0f5      	beq.n	60bc <pin_mode+0x80>
    60d0:	4642      	mov	r2, r8
    60d2:	2a02      	cmp	r2, #2
    60d4:	d0f2      	beq.n	60bc <pin_mode+0x80>
    60d6:	708b      	strb	r3, [r1, #2]
    60d8:	1c30      	adds	r0, r6, #0
    60da:	f7fe fc3b 	bl	4954 <system_pinmux_pin_set_config>
    60de:	b002      	add	sp, #8
    60e0:	bc1c      	pop	{r2, r3, r4}
    60e2:	4690      	mov	r8, r2
    60e4:	4699      	mov	r9, r3
    60e6:	46a2      	mov	sl, r4
    60e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ea:	4b19      	ldr	r3, [pc, #100]	; (6150 <pin_mode+0x114>)
    60ec:	4699      	mov	r9, r3
    60ee:	4819      	ldr	r0, [pc, #100]	; (6154 <pin_mode+0x118>)
    60f0:	4649      	mov	r1, r9
    60f2:	2223      	movs	r2, #35	; 0x23
    60f4:	f7ff fc70 	bl	59d8 <mbed_assert_internal>
    60f8:	2500      	movs	r5, #0
    60fa:	2000      	movs	r0, #0
    60fc:	e7bd      	b.n	607a <pin_mode+0x3e>
    60fe:	085b      	lsrs	r3, r3, #1
    6100:	18c3      	adds	r3, r0, r3
    6102:	3330      	adds	r3, #48	; 0x30
    6104:	781a      	ldrb	r2, [r3, #0]
    6106:	b2d2      	uxtb	r2, r2
    6108:	4231      	tst	r1, r6
    610a:	d116      	bne.n	613a <pin_mode+0xfe>
    610c:	230f      	movs	r3, #15
    610e:	401a      	ands	r2, r3
    6110:	e7be      	b.n	6090 <pin_mode+0x54>
    6112:	704a      	strb	r2, [r1, #1]
    6114:	e7d7      	b.n	60c6 <pin_mode+0x8a>
    6116:	4b0e      	ldr	r3, [pc, #56]	; (6150 <pin_mode+0x114>)
    6118:	4c0f      	ldr	r4, [pc, #60]	; (6158 <pin_mode+0x11c>)
    611a:	4699      	mov	r9, r3
    611c:	1c19      	adds	r1, r3, #0
    611e:	1c20      	adds	r0, r4, #0
    6120:	225c      	movs	r2, #92	; 0x5c
    6122:	f7ff fc59 	bl	59d8 <mbed_assert_internal>
    6126:	1c20      	adds	r0, r4, #0
    6128:	4649      	mov	r1, r9
    612a:	221e      	movs	r2, #30
    612c:	f7ff fc54 	bl	59d8 <mbed_assert_internal>
    6130:	2300      	movs	r3, #0
    6132:	26ff      	movs	r6, #255	; 0xff
    6134:	469a      	mov	sl, r3
    6136:	1c2c      	adds	r4, r5, #0
    6138:	e7d9      	b.n	60ee <pin_mode+0xb2>
    613a:	0912      	lsrs	r2, r2, #4
    613c:	e7a8      	b.n	6090 <pin_mode+0x54>
    613e:	4805      	ldr	r0, [pc, #20]	; (6154 <pin_mode+0x118>)
    6140:	4903      	ldr	r1, [pc, #12]	; (6150 <pin_mode+0x114>)
    6142:	2223      	movs	r2, #35	; 0x23
    6144:	f7ff fc48 	bl	59d8 <mbed_assert_internal>
    6148:	2000      	movs	r0, #0
    614a:	e796      	b.n	607a <pin_mode+0x3e>
    614c:	41004400 	.word	0x41004400
    6150:	000105f8 	.word	0x000105f8
    6154:	00010660 	.word	0x00010660
    6158:	0001057c 	.word	0x0001057c

0000615c <pinmap_find_peripheral_from_pad.part.0>:
    615c:	b510      	push	{r4, lr}
    615e:	1c04      	adds	r4, r0, #0
    6160:	2901      	cmp	r1, #1
    6162:	d004      	beq.n	616e <pinmap_find_peripheral_from_pad.part.0+0x12>
    6164:	1c20      	adds	r0, r4, #0
    6166:	4905      	ldr	r1, [pc, #20]	; (617c <pinmap_find_peripheral_from_pad.part.0+0x20>)
    6168:	f7ff fc6a 	bl	5a40 <pinmap_find_peripheral>
    616c:	bd10      	pop	{r4, pc}
    616e:	4904      	ldr	r1, [pc, #16]	; (6180 <pinmap_find_peripheral_from_pad.part.0+0x24>)
    6170:	f7ff fc66 	bl	5a40 <pinmap_find_peripheral>
    6174:	1c43      	adds	r3, r0, #1
    6176:	d1f9      	bne.n	616c <pinmap_find_peripheral_from_pad.part.0+0x10>
    6178:	e7f4      	b.n	6164 <pinmap_find_peripheral_from_pad.part.0+0x8>
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	00010390 	.word	0x00010390
    6180:	0001030c 	.word	0x0001030c

00006184 <pinmap_merge_sercom>:
    6184:	b538      	push	{r3, r4, r5, lr}
    6186:	1c0d      	adds	r5, r1, #0
    6188:	1c43      	adds	r3, r0, #1
    618a:	d01b      	beq.n	61c4 <pinmap_merge_sercom+0x40>
    618c:	2100      	movs	r1, #0
    618e:	f7ff ffe5 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    6192:	1c43      	adds	r3, r0, #1
    6194:	d016      	beq.n	61c4 <pinmap_merge_sercom+0x40>
    6196:	240f      	movs	r4, #15
    6198:	4004      	ands	r4, r0
    619a:	1c28      	adds	r0, r5, #0
    619c:	1c6b      	adds	r3, r5, #1
    619e:	d008      	beq.n	61b2 <pinmap_merge_sercom+0x2e>
    61a0:	2100      	movs	r1, #0
    61a2:	f7ff ffdb 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    61a6:	1c43      	adds	r3, r0, #1
    61a8:	d003      	beq.n	61b2 <pinmap_merge_sercom+0x2e>
    61aa:	230f      	movs	r3, #15
    61ac:	4018      	ands	r0, r3
    61ae:	42a0      	cmp	r0, r4
    61b0:	d006      	beq.n	61c0 <pinmap_merge_sercom+0x3c>
    61b2:	1c63      	adds	r3, r4, #1
    61b4:	d003      	beq.n	61be <pinmap_merge_sercom+0x3a>
    61b6:	1c43      	adds	r3, r0, #1
    61b8:	d002      	beq.n	61c0 <pinmap_merge_sercom+0x3c>
    61ba:	2001      	movs	r0, #1
    61bc:	4240      	negs	r0, r0
    61be:	bd38      	pop	{r3, r4, r5, pc}
    61c0:	1c20      	adds	r0, r4, #0
    61c2:	e7fc      	b.n	61be <pinmap_merge_sercom+0x3a>
    61c4:	1c28      	adds	r0, r5, #0
    61c6:	1c6b      	adds	r3, r5, #1
    61c8:	d0f9      	beq.n	61be <pinmap_merge_sercom+0x3a>
    61ca:	2100      	movs	r1, #0
    61cc:	2401      	movs	r4, #1
    61ce:	f7ff ffc5 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    61d2:	4264      	negs	r4, r4
    61d4:	1c43      	adds	r3, r0, #1
    61d6:	d1e8      	bne.n	61aa <pinmap_merge_sercom+0x26>
    61d8:	e7f1      	b.n	61be <pinmap_merge_sercom+0x3a>
    61da:	46c0      	nop			; (mov r8, r8)

000061dc <pinmap_find_sercom>:
    61dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    61de:	1c0f      	adds	r7, r1, #0
    61e0:	b085      	sub	sp, #20
    61e2:	1c16      	adds	r6, r2, #0
    61e4:	1c1d      	adds	r5, r3, #0
    61e6:	1c04      	adds	r4, r0, #0
    61e8:	1c43      	adds	r3, r0, #1
    61ea:	d003      	beq.n	61f4 <pinmap_find_sercom+0x18>
    61ec:	2100      	movs	r1, #0
    61ee:	f7ff ffb5 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    61f2:	1c04      	adds	r4, r0, #0
    61f4:	9400      	str	r4, [sp, #0]
    61f6:	1c38      	adds	r0, r7, #0
    61f8:	1c7b      	adds	r3, r7, #1
    61fa:	d002      	beq.n	6202 <pinmap_find_sercom+0x26>
    61fc:	2100      	movs	r1, #0
    61fe:	f7ff ffad 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    6202:	9001      	str	r0, [sp, #4]
    6204:	1c30      	adds	r0, r6, #0
    6206:	1c73      	adds	r3, r6, #1
    6208:	d002      	beq.n	6210 <pinmap_find_sercom+0x34>
    620a:	2100      	movs	r1, #0
    620c:	f7ff ffa6 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    6210:	9002      	str	r0, [sp, #8]
    6212:	1c28      	adds	r0, r5, #0
    6214:	1c6b      	adds	r3, r5, #1
    6216:	d002      	beq.n	621e <pinmap_find_sercom+0x42>
    6218:	2100      	movs	r1, #0
    621a:	f7ff ff9f 	bl	615c <pinmap_find_peripheral_from_pad.part.0>
    621e:	9003      	str	r0, [sp, #12]
    6220:	2001      	movs	r0, #1
    6222:	2300      	movs	r3, #0
    6224:	4240      	negs	r0, r0
    6226:	220f      	movs	r2, #15
    6228:	1c61      	adds	r1, r4, #1
    622a:	d004      	beq.n	6236 <pinmap_find_sercom+0x5a>
    622c:	1c41      	adds	r1, r0, #1
    622e:	d00b      	beq.n	6248 <pinmap_find_sercom+0x6c>
    6230:	4014      	ands	r4, r2
    6232:	4284      	cmp	r4, r0
    6234:	d10f      	bne.n	6256 <pinmap_find_sercom+0x7a>
    6236:	3304      	adds	r3, #4
    6238:	2b10      	cmp	r3, #16
    623a:	d00a      	beq.n	6252 <pinmap_find_sercom+0x76>
    623c:	4669      	mov	r1, sp
    623e:	58cc      	ldr	r4, [r1, r3]
    6240:	1c61      	adds	r1, r4, #1
    6242:	d0f8      	beq.n	6236 <pinmap_find_sercom+0x5a>
    6244:	1c41      	adds	r1, r0, #1
    6246:	d1f3      	bne.n	6230 <pinmap_find_sercom+0x54>
    6248:	1c20      	adds	r0, r4, #0
    624a:	3304      	adds	r3, #4
    624c:	4010      	ands	r0, r2
    624e:	2b10      	cmp	r3, #16
    6250:	d1f4      	bne.n	623c <pinmap_find_sercom+0x60>
    6252:	b005      	add	sp, #20
    6254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6256:	2001      	movs	r0, #1
    6258:	4240      	negs	r0, r0
    625a:	e7fa      	b.n	6252 <pinmap_find_sercom+0x76>

0000625c <pinmap_function_sercom>:
    625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    625e:	1c43      	adds	r3, r0, #1
    6260:	d004      	beq.n	626c <pinmap_function_sercom+0x10>
    6262:	260f      	movs	r6, #15
    6264:	4031      	ands	r1, r6
    6266:	1e0d      	subs	r5, r1, #0
    6268:	2d05      	cmp	r5, #5
    626a:	d902      	bls.n	6272 <pinmap_function_sercom+0x16>
    626c:	2001      	movs	r0, #1
    626e:	4240      	negs	r0, r0
    6270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6272:	4f0a      	ldr	r7, [pc, #40]	; (629c <pinmap_function_sercom+0x40>)
    6274:	1c04      	adds	r4, r0, #0
    6276:	1c39      	adds	r1, r7, #0
    6278:	f7ff fbee 	bl	5a58 <pinmap_peripheral>
    627c:	4030      	ands	r0, r6
    627e:	42a8      	cmp	r0, r5
    6280:	d007      	beq.n	6292 <pinmap_function_sercom+0x36>
    6282:	4f07      	ldr	r7, [pc, #28]	; (62a0 <pinmap_function_sercom+0x44>)
    6284:	1c20      	adds	r0, r4, #0
    6286:	1c39      	adds	r1, r7, #0
    6288:	f7ff fbe6 	bl	5a58 <pinmap_peripheral>
    628c:	4006      	ands	r6, r0
    628e:	42ae      	cmp	r6, r5
    6290:	d1ec      	bne.n	626c <pinmap_function_sercom+0x10>
    6292:	1c20      	adds	r0, r4, #0
    6294:	1c39      	adds	r1, r7, #0
    6296:	f7ff fbf7 	bl	5a88 <pinmap_function>
    629a:	e7e9      	b.n	6270 <pinmap_function_sercom+0x14>
    629c:	00010390 	.word	0x00010390
    62a0:	0001030c 	.word	0x0001030c

000062a4 <pinmap_pad_sercom>:
    62a4:	b570      	push	{r4, r5, r6, lr}
    62a6:	1c43      	adds	r3, r0, #1
    62a8:	d004      	beq.n	62b4 <pinmap_pad_sercom+0x10>
    62aa:	240f      	movs	r4, #15
    62ac:	4021      	ands	r1, r4
    62ae:	1e0d      	subs	r5, r1, #0
    62b0:	2d05      	cmp	r5, #5
    62b2:	d902      	bls.n	62ba <pinmap_pad_sercom+0x16>
    62b4:	2001      	movs	r0, #1
    62b6:	4240      	negs	r0, r0
    62b8:	bd70      	pop	{r4, r5, r6, pc}
    62ba:	4909      	ldr	r1, [pc, #36]	; (62e0 <pinmap_pad_sercom+0x3c>)
    62bc:	1c06      	adds	r6, r0, #0
    62be:	f7ff fbcb 	bl	5a58 <pinmap_peripheral>
    62c2:	1c23      	adds	r3, r4, #0
    62c4:	4003      	ands	r3, r0
    62c6:	42ab      	cmp	r3, r5
    62c8:	d007      	beq.n	62da <pinmap_pad_sercom+0x36>
    62ca:	1c30      	adds	r0, r6, #0
    62cc:	4905      	ldr	r1, [pc, #20]	; (62e4 <pinmap_pad_sercom+0x40>)
    62ce:	f7ff fbc3 	bl	5a58 <pinmap_peripheral>
    62d2:	1c23      	adds	r3, r4, #0
    62d4:	4003      	ands	r3, r0
    62d6:	42ab      	cmp	r3, r5
    62d8:	d1ec      	bne.n	62b4 <pinmap_pad_sercom+0x10>
    62da:	0900      	lsrs	r0, r0, #4
    62dc:	4020      	ands	r0, r4
    62de:	e7eb      	b.n	62b8 <pinmap_pad_sercom+0x14>
    62e0:	00010390 	.word	0x00010390
    62e4:	0001030c 	.word	0x0001030c

000062e8 <pinmap_peripheral_sercom>:
    62e8:	b570      	push	{r4, r5, r6, lr}
    62ea:	b086      	sub	sp, #24
    62ec:	466a      	mov	r2, sp
    62ee:	4b08      	ldr	r3, [pc, #32]	; (6310 <pinmap_peripheral_sercom+0x28>)
    62f0:	4668      	mov	r0, sp
    62f2:	cb70      	ldmia	r3!, {r4, r5, r6}
    62f4:	c270      	stmia	r2!, {r4, r5, r6}
    62f6:	cb70      	ldmia	r3!, {r4, r5, r6}
    62f8:	c270      	stmia	r2!, {r4, r5, r6}
    62fa:	230f      	movs	r3, #15
    62fc:	4019      	ands	r1, r3
    62fe:	2905      	cmp	r1, #5
    6300:	d903      	bls.n	630a <pinmap_peripheral_sercom+0x22>
    6302:	2001      	movs	r0, #1
    6304:	4240      	negs	r0, r0
    6306:	b006      	add	sp, #24
    6308:	bd70      	pop	{r4, r5, r6, pc}
    630a:	0089      	lsls	r1, r1, #2
    630c:	5808      	ldr	r0, [r1, r0]
    630e:	e7fa      	b.n	6306 <pinmap_peripheral_sercom+0x1e>
    6310:	00010668 	.word	0x00010668

00006314 <us_ticker_irq_handler_internal>:
    6314:	2203      	movs	r2, #3
    6316:	b508      	push	{r3, lr}
    6318:	4b02      	ldr	r3, [pc, #8]	; (6324 <us_ticker_irq_handler_internal+0x10>)
    631a:	681b      	ldr	r3, [r3, #0]
    631c:	739a      	strb	r2, [r3, #14]
    631e:	f000 fc83 	bl	6c28 <us_ticker_irq_handler>
    6322:	bd08      	pop	{r3, pc}
    6324:	200044f0 	.word	0x200044f0

00006328 <us_ticker_init.part.5>:
    6328:	b530      	push	{r4, r5, lr}
    632a:	2501      	movs	r5, #1
    632c:	4b35      	ldr	r3, [pc, #212]	; (6404 <us_ticker_init.part.5+0xdc>)
    632e:	4c36      	ldr	r4, [pc, #216]	; (6408 <us_ticker_init.part.5+0xe0>)
    6330:	601d      	str	r5, [r3, #0]
    6332:	7823      	ldrb	r3, [r4, #0]
    6334:	b08f      	sub	sp, #60	; 0x3c
    6336:	2b00      	cmp	r3, #0
    6338:	d05c      	beq.n	63f4 <us_ticker_init.part.5+0xcc>
    633a:	2300      	movs	r3, #0
    633c:	2200      	movs	r2, #0
    633e:	ac01      	add	r4, sp, #4
    6340:	7422      	strb	r2, [r4, #16]
    6342:	6163      	str	r3, [r4, #20]
    6344:	61a3      	str	r3, [r4, #24]
    6346:	7722      	strb	r2, [r4, #28]
    6348:	6223      	str	r3, [r4, #32]
    634a:	6263      	str	r3, [r4, #36]	; 0x24
    634c:	2000      	movs	r0, #0
    634e:	7023      	strb	r3, [r4, #0]
    6350:	70a3      	strb	r3, [r4, #2]
    6352:	80a3      	strh	r3, [r4, #4]
    6354:	71a2      	strb	r2, [r4, #6]
    6356:	8123      	strh	r3, [r4, #8]
    6358:	7062      	strb	r2, [r4, #1]
    635a:	72a2      	strb	r2, [r4, #10]
    635c:	72e2      	strb	r2, [r4, #11]
    635e:	7322      	strb	r2, [r4, #12]
    6360:	73a2      	strb	r2, [r4, #14]
    6362:	7362      	strb	r2, [r4, #13]
    6364:	8523      	strh	r3, [r4, #40]	; 0x28
    6366:	8563      	strh	r3, [r4, #42]	; 0x2a
    6368:	85a3      	strh	r3, [r4, #44]	; 0x2c
    636a:	f7fe fb83 	bl	4a74 <system_gclk_gen_get_hz>
    636e:	4927      	ldr	r1, [pc, #156]	; (640c <us_ticker_init.part.5+0xe4>)
    6370:	f000 fec8 	bl	7104 <__aeabi_uidiv>
    6374:	2800      	cmp	r0, #0
    6376:	d032      	beq.n	63de <us_ticker_init.part.5+0xb6>
    6378:	2300      	movs	r3, #0
    637a:	2801      	cmp	r0, #1
    637c:	d007      	beq.n	638e <us_ticker_init.part.5+0x66>
    637e:	0840      	lsrs	r0, r0, #1
    6380:	3301      	adds	r3, #1
    6382:	2801      	cmp	r0, #1
    6384:	d022      	beq.n	63cc <us_ticker_init.part.5+0xa4>
    6386:	2b0b      	cmp	r3, #11
    6388:	d1f9      	bne.n	637e <us_ticker_init.part.5+0x56>
    638a:	23e0      	movs	r3, #224	; 0xe0
    638c:	00db      	lsls	r3, r3, #3
    638e:	80a3      	strh	r3, [r4, #4]
    6390:	2308      	movs	r3, #8
    6392:	70a3      	strb	r3, [r4, #2]
    6394:	3b07      	subs	r3, #7
    6396:	7063      	strb	r3, [r4, #1]
    6398:	2300      	movs	r3, #0
    639a:	4d1d      	ldr	r5, [pc, #116]	; (6410 <us_ticker_init.part.5+0xe8>)
    639c:	62a3      	str	r3, [r4, #40]	; 0x28
    639e:	491d      	ldr	r1, [pc, #116]	; (6414 <us_ticker_init.part.5+0xec>)
    63a0:	3b01      	subs	r3, #1
    63a2:	1c22      	adds	r2, r4, #0
    63a4:	1c28      	adds	r0, r5, #0
    63a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    63a8:	f000 fcd2 	bl	6d50 <tc_init>
    63ac:	491a      	ldr	r1, [pc, #104]	; (6418 <us_ticker_init.part.5+0xf0>)
    63ae:	2202      	movs	r2, #2
    63b0:	1c28      	adds	r0, r5, #0
    63b2:	f000 fc51 	bl	6c58 <tc_register_callback>
    63b6:	217f      	movs	r1, #127	; 0x7f
    63b8:	682a      	ldr	r2, [r5, #0]
    63ba:	7bd3      	ldrb	r3, [r2, #15]
    63bc:	438b      	bics	r3, r1
    63be:	d1fc      	bne.n	63ba <us_ticker_init.part.5+0x92>
    63c0:	8811      	ldrh	r1, [r2, #0]
    63c2:	3302      	adds	r3, #2
    63c4:	430b      	orrs	r3, r1
    63c6:	8013      	strh	r3, [r2, #0]
    63c8:	b00f      	add	sp, #60	; 0x3c
    63ca:	bd30      	pop	{r4, r5, pc}
    63cc:	2b08      	cmp	r3, #8
    63ce:	d8dc      	bhi.n	638a <us_ticker_init.part.5+0x62>
    63d0:	2b06      	cmp	r3, #6
    63d2:	d813      	bhi.n	63fc <us_ticker_init.part.5+0xd4>
    63d4:	2b04      	cmp	r3, #4
    63d6:	d908      	bls.n	63ea <us_ticker_init.part.5+0xc2>
    63d8:	23a0      	movs	r3, #160	; 0xa0
    63da:	00db      	lsls	r3, r3, #3
    63dc:	e7d7      	b.n	638e <us_ticker_init.part.5+0x66>
    63de:	480f      	ldr	r0, [pc, #60]	; (641c <us_ticker_init.part.5+0xf4>)
    63e0:	490f      	ldr	r1, [pc, #60]	; (6420 <us_ticker_init.part.5+0xf8>)
    63e2:	2257      	movs	r2, #87	; 0x57
    63e4:	f7ff faf8 	bl	59d8 <mbed_assert_internal>
    63e8:	2300      	movs	r3, #0
    63ea:	22e0      	movs	r2, #224	; 0xe0
    63ec:	021b      	lsls	r3, r3, #8
    63ee:	00d2      	lsls	r2, r2, #3
    63f0:	4013      	ands	r3, r2
    63f2:	e7cc      	b.n	638e <us_ticker_init.part.5+0x66>
    63f4:	f7fe fbda 	bl	4bac <system_init>
    63f8:	7025      	strb	r5, [r4, #0]
    63fa:	e79e      	b.n	633a <us_ticker_init.part.5+0x12>
    63fc:	23c0      	movs	r3, #192	; 0xc0
    63fe:	00db      	lsls	r3, r3, #3
    6400:	e7c5      	b.n	638e <us_ticker_init.part.5+0x66>
    6402:	46c0      	nop			; (mov r8, r8)
    6404:	20004448 	.word	0x20004448
    6408:	200042fc 	.word	0x200042fc
    640c:	000f4240 	.word	0x000f4240
    6410:	200044f0 	.word	0x200044f0
    6414:	42003000 	.word	0x42003000
    6418:	00006315 	.word	0x00006315
    641c:	00010680 	.word	0x00010680
    6420:	00010694 	.word	0x00010694

00006424 <us_ticker_init>:
    6424:	b508      	push	{r3, lr}
    6426:	4b03      	ldr	r3, [pc, #12]	; (6434 <us_ticker_init+0x10>)
    6428:	681b      	ldr	r3, [r3, #0]
    642a:	2b00      	cmp	r3, #0
    642c:	d101      	bne.n	6432 <us_ticker_init+0xe>
    642e:	f7ff ff7b 	bl	6328 <us_ticker_init.part.5>
    6432:	bd08      	pop	{r3, pc}
    6434:	20004448 	.word	0x20004448

00006438 <us_ticker_read>:
    6438:	b508      	push	{r3, lr}
    643a:	4b05      	ldr	r3, [pc, #20]	; (6450 <us_ticker_read+0x18>)
    643c:	681b      	ldr	r3, [r3, #0]
    643e:	2b00      	cmp	r3, #0
    6440:	d101      	bne.n	6446 <us_ticker_read+0xe>
    6442:	f7ff ff71 	bl	6328 <us_ticker_init.part.5>
    6446:	4803      	ldr	r0, [pc, #12]	; (6454 <us_ticker_read+0x1c>)
    6448:	f000 fdd4 	bl	6ff4 <tc_get_count_value>
    644c:	bd08      	pop	{r3, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	20004448 	.word	0x20004448
    6454:	200044f0 	.word	0x200044f0

00006458 <us_ticker_set_interrupt>:
    6458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    645a:	1c06      	adds	r6, r0, #0
    645c:	f7ff ffec 	bl	6438 <us_ticker_read>
    6460:	1a30      	subs	r0, r6, r0
    6462:	d421      	bmi.n	64a8 <us_ticker_set_interrupt+0x50>
    6464:	2780      	movs	r7, #128	; 0x80
    6466:	2380      	movs	r3, #128	; 0x80
    6468:	4d11      	ldr	r5, [pc, #68]	; (64b0 <us_ticker_set_interrupt+0x58>)
    646a:	033f      	lsls	r7, r7, #12
    646c:	50ef      	str	r7, [r5, r3]
    646e:	4911      	ldr	r1, [pc, #68]	; (64b4 <us_ticker_set_interrupt+0x5c>)
    6470:	2013      	movs	r0, #19
    6472:	f7fd ff65 	bl	4340 <NVIC_SetVector>
    6476:	4c10      	ldr	r4, [pc, #64]	; (64b8 <us_ticker_set_interrupt+0x60>)
    6478:	6820      	ldr	r0, [r4, #0]
    647a:	f000 fc49 	bl	6d10 <_tc_get_inst_index>
    647e:	221f      	movs	r2, #31
    6480:	4b0e      	ldr	r3, [pc, #56]	; (64bc <us_ticker_set_interrupt+0x64>)
    6482:	2100      	movs	r1, #0
    6484:	5c1b      	ldrb	r3, [r3, r0]
    6486:	1c20      	adds	r0, r4, #0
    6488:	4013      	ands	r3, r2
    648a:	3a1e      	subs	r2, #30
    648c:	409a      	lsls	r2, r3
    648e:	2310      	movs	r3, #16
    6490:	602a      	str	r2, [r5, #0]
    6492:	7e62      	ldrb	r2, [r4, #25]
    6494:	4313      	orrs	r3, r2
    6496:	7663      	strb	r3, [r4, #25]
    6498:	2310      	movs	r3, #16
    649a:	6822      	ldr	r2, [r4, #0]
    649c:	7353      	strb	r3, [r2, #13]
    649e:	1c32      	adds	r2, r6, #0
    64a0:	f000 fdbe 	bl	7020 <tc_set_compare_value>
    64a4:	602f      	str	r7, [r5, #0]
    64a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a8:	f000 fbbe 	bl	6c28 <us_ticker_irq_handler>
    64ac:	e7fb      	b.n	64a6 <us_ticker_set_interrupt+0x4e>
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	e000e100 	.word	0xe000e100
    64b4:	00006cf9 	.word	0x00006cf9
    64b8:	200044f0 	.word	0x200044f0
    64bc:	00010704 	.word	0x00010704

000064c0 <us_ticker_disable_interrupt>:
    64c0:	2110      	movs	r1, #16
    64c2:	4b06      	ldr	r3, [pc, #24]	; (64dc <us_ticker_disable_interrupt+0x1c>)
    64c4:	681a      	ldr	r2, [r3, #0]
    64c6:	7311      	strb	r1, [r2, #12]
    64c8:	7e5a      	ldrb	r2, [r3, #25]
    64ca:	438a      	bics	r2, r1
    64cc:	2180      	movs	r1, #128	; 0x80
    64ce:	765a      	strb	r2, [r3, #25]
    64d0:	2380      	movs	r3, #128	; 0x80
    64d2:	4a03      	ldr	r2, [pc, #12]	; (64e0 <us_ticker_disable_interrupt+0x20>)
    64d4:	0309      	lsls	r1, r1, #12
    64d6:	50d1      	str	r1, [r2, r3]
    64d8:	4770      	bx	lr
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	200044f0 	.word	0x200044f0
    64e0:	e000e100 	.word	0xe000e100

000064e4 <us_ticker_clear_interrupt>:
    64e4:	2210      	movs	r2, #16
    64e6:	4b05      	ldr	r3, [pc, #20]	; (64fc <us_ticker_clear_interrupt+0x18>)
    64e8:	2180      	movs	r1, #128	; 0x80
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	0309      	lsls	r1, r1, #12
    64ee:	739a      	strb	r2, [r3, #14]
    64f0:	731a      	strb	r2, [r3, #12]
    64f2:	23c0      	movs	r3, #192	; 0xc0
    64f4:	4a02      	ldr	r2, [pc, #8]	; (6500 <us_ticker_clear_interrupt+0x1c>)
    64f6:	005b      	lsls	r3, r3, #1
    64f8:	50d1      	str	r1, [r2, r3]
    64fa:	4770      	bx	lr
    64fc:	200044f0 	.word	0x200044f0
    6500:	e000e100 	.word	0xe000e100

00006504 <spi_find_mux_settings>:
    6504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6506:	1e04      	subs	r4, r0, #0
    6508:	d03e      	beq.n	6588 <spi_find_mux_settings+0x84>
    650a:	6820      	ldr	r0, [r4, #0]
    650c:	f7ff fbe4 	bl	5cd8 <_sercom_get_sercom_inst_index>
    6510:	7923      	ldrb	r3, [r4, #4]
    6512:	1c07      	adds	r7, r0, #0
    6514:	2b01      	cmp	r3, #1
    6516:	d02a      	beq.n	656e <spi_find_mux_settings+0x6a>
    6518:	2501      	movs	r5, #1
    651a:	2300      	movs	r3, #0
    651c:	2005      	movs	r0, #5
    651e:	18e3      	adds	r3, r4, r3
    6520:	5618      	ldrsb	r0, [r3, r0]
    6522:	1c43      	adds	r3, r0, #1
    6524:	d00f      	beq.n	6546 <spi_find_mux_settings+0x42>
    6526:	1c39      	adds	r1, r7, #0
    6528:	f7ff febc 	bl	62a4 <pinmap_pad_sercom>
    652c:	1c43      	adds	r3, r0, #1
    652e:	d00a      	beq.n	6546 <spi_find_mux_settings+0x42>
    6530:	26c0      	movs	r6, #192	; 0xc0
    6532:	0500      	lsls	r0, r0, #20
    6534:	03b6      	lsls	r6, r6, #14
    6536:	4006      	ands	r6, r0
    6538:	2005      	movs	r0, #5
    653a:	1965      	adds	r5, r4, r5
    653c:	5628      	ldrsb	r0, [r5, r0]
    653e:	1c43      	adds	r3, r0, #1
    6540:	d107      	bne.n	6552 <spi_find_mux_settings+0x4e>
    6542:	1c30      	adds	r0, r6, #0
    6544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6546:	2005      	movs	r0, #5
    6548:	1965      	adds	r5, r4, r5
    654a:	5628      	ldrsb	r0, [r5, r0]
    654c:	2600      	movs	r6, #0
    654e:	1c43      	adds	r3, r0, #1
    6550:	d0f7      	beq.n	6542 <spi_find_mux_settings+0x3e>
    6552:	1c39      	adds	r1, r7, #0
    6554:	f7ff fea6 	bl	62a4 <pinmap_pad_sercom>
    6558:	1c43      	adds	r3, r0, #1
    655a:	d0f2      	beq.n	6542 <spi_find_mux_settings+0x3e>
    655c:	2800      	cmp	r0, #0
    655e:	d009      	beq.n	6574 <spi_find_mux_settings+0x70>
    6560:	23c0      	movs	r3, #192	; 0xc0
    6562:	3801      	subs	r0, #1
    6564:	0400      	lsls	r0, r0, #16
    6566:	029b      	lsls	r3, r3, #10
    6568:	4018      	ands	r0, r3
    656a:	4306      	orrs	r6, r0
    656c:	e7e9      	b.n	6542 <spi_find_mux_settings+0x3e>
    656e:	2500      	movs	r5, #0
    6570:	2301      	movs	r3, #1
    6572:	e7d3      	b.n	651c <spi_find_mux_settings+0x18>
    6574:	2007      	movs	r0, #7
    6576:	1c39      	adds	r1, r7, #0
    6578:	5620      	ldrsb	r0, [r4, r0]
    657a:	f7ff fe93 	bl	62a4 <pinmap_pad_sercom>
    657e:	2803      	cmp	r0, #3
    6580:	d008      	beq.n	6594 <spi_find_mux_settings+0x90>
    6582:	2000      	movs	r0, #0
    6584:	4306      	orrs	r6, r0
    6586:	e7dc      	b.n	6542 <spi_find_mux_settings+0x3e>
    6588:	4804      	ldr	r0, [pc, #16]	; (659c <spi_find_mux_settings+0x98>)
    658a:	4905      	ldr	r1, [pc, #20]	; (65a0 <spi_find_mux_settings+0x9c>)
    658c:	22b1      	movs	r2, #177	; 0xb1
    658e:	f7ff fa23 	bl	59d8 <mbed_assert_internal>
    6592:	e7ba      	b.n	650a <spi_find_mux_settings+0x6>
    6594:	20c0      	movs	r0, #192	; 0xc0
    6596:	0280      	lsls	r0, r0, #10
    6598:	4306      	orrs	r6, r0
    659a:	e7d2      	b.n	6542 <spi_find_mux_settings+0x3e>
    659c:	0000fe88 	.word	0x0000fe88
    65a0:	00010708 	.word	0x00010708

000065a4 <spi_init>:
    65a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a6:	4644      	mov	r4, r8
    65a8:	465f      	mov	r7, fp
    65aa:	464d      	mov	r5, r9
    65ac:	4656      	mov	r6, sl
    65ae:	b4f0      	push	{r4, r5, r6, r7}
    65b0:	b085      	sub	sp, #20
    65b2:	4698      	mov	r8, r3
    65b4:	ab0e      	add	r3, sp, #56	; 0x38
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	1c04      	adds	r4, r0, #0
    65ba:	b25b      	sxtb	r3, r3
    65bc:	1c0d      	adds	r5, r1, #0
    65be:	4693      	mov	fp, r2
    65c0:	9300      	str	r3, [sp, #0]
    65c2:	2800      	cmp	r0, #0
    65c4:	d100      	bne.n	65c8 <spi_init+0x24>
    65c6:	e0c8      	b.n	675a <spi_init+0x1b6>
    65c8:	4643      	mov	r3, r8
    65ca:	3301      	adds	r3, #1
    65cc:	d100      	bne.n	65d0 <spi_init+0x2c>
    65ce:	e0b8      	b.n	6742 <spi_init+0x19e>
    65d0:	2300      	movs	r3, #0
    65d2:	4e6a      	ldr	r6, [pc, #424]	; (677c <spi_init+0x1d8>)
    65d4:	aa02      	add	r2, sp, #8
    65d6:	8053      	strh	r3, [r2, #2]
    65d8:	7833      	ldrb	r3, [r6, #0]
    65da:	2b00      	cmp	r3, #0
    65dc:	d032      	beq.n	6644 <spi_init+0xa0>
    65de:	4659      	mov	r1, fp
    65e0:	4642      	mov	r2, r8
    65e2:	9b00      	ldr	r3, [sp, #0]
    65e4:	1c28      	adds	r0, r5, #0
    65e6:	f7ff fdf9 	bl	61dc <pinmap_find_sercom>
    65ea:	4681      	mov	r9, r0
    65ec:	2001      	movs	r0, #1
    65ee:	4649      	mov	r1, r9
    65f0:	4240      	negs	r0, r0
    65f2:	f7ff fe79 	bl	62e8 <pinmap_peripheral_sercom>
    65f6:	6020      	str	r0, [r4, #0]
    65f8:	2c00      	cmp	r4, #0
    65fa:	d100      	bne.n	65fe <spi_init+0x5a>
    65fc:	e0a7      	b.n	674e <spi_init+0x1aa>
    65fe:	4f60      	ldr	r7, [pc, #384]	; (6780 <spi_init+0x1dc>)
    6600:	4e60      	ldr	r6, [pc, #384]	; (6784 <spi_init+0x1e0>)
    6602:	e003      	b.n	660c <spi_init+0x68>
    6604:	6822      	ldr	r2, [r4, #0]
    6606:	8b53      	ldrh	r3, [r2, #26]
    6608:	0bdb      	lsrs	r3, r3, #15
    660a:	d00a      	beq.n	6622 <spi_init+0x7e>
    660c:	2c00      	cmp	r4, #0
    660e:	d1f9      	bne.n	6604 <spi_init+0x60>
    6610:	2244      	movs	r2, #68	; 0x44
    6612:	1c38      	adds	r0, r7, #0
    6614:	1c31      	adds	r1, r6, #0
    6616:	f7ff f9df 	bl	59d8 <mbed_assert_internal>
    661a:	6822      	ldr	r2, [r4, #0]
    661c:	8b53      	ldrh	r3, [r2, #26]
    661e:	0bdb      	lsrs	r3, r3, #15
    6620:	d1f4      	bne.n	660c <spi_init+0x68>
    6622:	2102      	movs	r1, #2
    6624:	6813      	ldr	r3, [r2, #0]
    6626:	438b      	bics	r3, r1
    6628:	6013      	str	r3, [r2, #0]
    662a:	6823      	ldr	r3, [r4, #0]
    662c:	681e      	ldr	r6, [r3, #0]
    662e:	2301      	movs	r3, #1
    6630:	469a      	mov	sl, r3
    6632:	401e      	ands	r6, r3
    6634:	d00b      	beq.n	664e <spi_init+0xaa>
    6636:	b005      	add	sp, #20
    6638:	bc3c      	pop	{r2, r3, r4, r5}
    663a:	4690      	mov	r8, r2
    663c:	4699      	mov	r9, r3
    663e:	46a2      	mov	sl, r4
    6640:	46ab      	mov	fp, r5
    6642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6644:	f7fe fab2 	bl	4bac <system_init>
    6648:	2301      	movs	r3, #1
    664a:	7033      	strb	r3, [r6, #0]
    664c:	e7c7      	b.n	65de <spi_init+0x3a>
    664e:	464b      	mov	r3, r9
    6650:	4650      	mov	r0, sl
    6652:	3302      	adds	r3, #2
    6654:	4098      	lsls	r0, r3
    6656:	1c03      	adds	r3, r0, #0
    6658:	494b      	ldr	r1, [pc, #300]	; (6788 <spi_init+0x1e4>)
    665a:	6a0a      	ldr	r2, [r1, #32]
    665c:	4313      	orrs	r3, r2
    665e:	620b      	str	r3, [r1, #32]
    6660:	ab02      	add	r3, sp, #8
    6662:	701e      	strb	r6, [r3, #0]
    6664:	464b      	mov	r3, r9
    6666:	3314      	adds	r3, #20
    6668:	b2db      	uxtb	r3, r3
    666a:	1c1f      	adds	r7, r3, #0
    666c:	1c18      	adds	r0, r3, #0
    666e:	a902      	add	r1, sp, #8
    6670:	9301      	str	r3, [sp, #4]
    6672:	f7fe fa79 	bl	4b68 <system_gclk_chan_set_config>
    6676:	1c38      	adds	r0, r7, #0
    6678:	f7fe fa38 	bl	4aec <system_gclk_chan_enable>
    667c:	2100      	movs	r1, #0
    667e:	2000      	movs	r0, #0
    6680:	f7ff fb0a 	bl	5c98 <sercom_set_gclk_generator>
    6684:	230c      	movs	r3, #12
    6686:	6822      	ldr	r2, [r4, #0]
    6688:	af03      	add	r7, sp, #12
    668a:	6811      	ldr	r1, [r2, #0]
    668c:	430b      	orrs	r3, r1
    668e:	6013      	str	r3, [r2, #0]
    6690:	4653      	mov	r3, sl
    6692:	7123      	strb	r3, [r4, #4]
    6694:	2380      	movs	r3, #128	; 0x80
    6696:	703b      	strb	r3, [r7, #0]
    6698:	4653      	mov	r3, sl
    669a:	70bb      	strb	r3, [r7, #2]
    669c:	465b      	mov	r3, fp
    669e:	71a3      	strb	r3, [r4, #6]
    66a0:	4643      	mov	r3, r8
    66a2:	71e3      	strb	r3, [r4, #7]
    66a4:	466b      	mov	r3, sp
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	7165      	strb	r5, [r4, #5]
    66aa:	7223      	strb	r3, [r4, #8]
    66ac:	2309      	movs	r3, #9
    66ae:	4698      	mov	r8, r3
    66b0:	b26d      	sxtb	r5, r5
    66b2:	707e      	strb	r6, [r7, #1]
    66b4:	70fe      	strb	r6, [r7, #3]
    66b6:	44a0      	add	r8, r4
    66b8:	1da6      	adds	r6, r4, #6
    66ba:	1c6b      	adds	r3, r5, #1
    66bc:	d00b      	beq.n	66d6 <spi_init+0x132>
    66be:	1c28      	adds	r0, r5, #0
    66c0:	4649      	mov	r1, r9
    66c2:	f7ff fdcb 	bl	625c <pinmap_function_sercom>
    66c6:	b2c0      	uxtb	r0, r0
    66c8:	7038      	strb	r0, [r7, #0]
    66ca:	28ff      	cmp	r0, #255	; 0xff
    66cc:	d003      	beq.n	66d6 <spi_init+0x132>
    66ce:	b2e8      	uxtb	r0, r5
    66d0:	1c39      	adds	r1, r7, #0
    66d2:	f7fe f93f 	bl	4954 <system_pinmux_pin_set_config>
    66d6:	4546      	cmp	r6, r8
    66d8:	d006      	beq.n	66e8 <spi_init+0x144>
    66da:	7835      	ldrb	r5, [r6, #0]
    66dc:	3601      	adds	r6, #1
    66de:	b26d      	sxtb	r5, r5
    66e0:	1c6b      	adds	r3, r5, #1
    66e2:	d1ec      	bne.n	66be <spi_init+0x11a>
    66e4:	4546      	cmp	r6, r8
    66e6:	d1f8      	bne.n	66da <spi_init+0x136>
    66e8:	9801      	ldr	r0, [sp, #4]
    66ea:	f7fe fa49 	bl	4b80 <system_gclk_chan_get_hz>
    66ee:	ab02      	add	r3, sp, #8
    66f0:	1c01      	adds	r1, r0, #0
    66f2:	1c9a      	adds	r2, r3, #2
    66f4:	4825      	ldr	r0, [pc, #148]	; (678c <spi_init+0x1e8>)
    66f6:	f7ff f9f3 	bl	5ae0 <_sercom_get_sync_baud_val>
    66fa:	2800      	cmp	r0, #0
    66fc:	d19b      	bne.n	6636 <spi_init+0x92>
    66fe:	ab02      	add	r3, sp, #8
    6700:	789b      	ldrb	r3, [r3, #2]
    6702:	6822      	ldr	r2, [r4, #0]
    6704:	1c20      	adds	r0, r4, #0
    6706:	7313      	strb	r3, [r2, #12]
    6708:	f7ff fefc 	bl	6504 <spi_find_mux_settings>
    670c:	2180      	movs	r1, #128	; 0x80
    670e:	6822      	ldr	r2, [r4, #0]
    6710:	0289      	lsls	r1, r1, #10
    6712:	6813      	ldr	r3, [r2, #0]
    6714:	4318      	orrs	r0, r3
    6716:	6010      	str	r0, [r2, #0]
    6718:	6822      	ldr	r2, [r4, #0]
    671a:	6853      	ldr	r3, [r2, #4]
    671c:	430b      	orrs	r3, r1
    671e:	6053      	str	r3, [r2, #4]
    6720:	2c00      	cmp	r4, #0
    6722:	d025      	beq.n	6770 <spi_init+0x1cc>
    6724:	4e16      	ldr	r6, [pc, #88]	; (6780 <spi_init+0x1dc>)
    6726:	4d17      	ldr	r5, [pc, #92]	; (6784 <spi_init+0x1e0>)
    6728:	e003      	b.n	6732 <spi_init+0x18e>
    672a:	6822      	ldr	r2, [r4, #0]
    672c:	8b53      	ldrh	r3, [r2, #26]
    672e:	0bdb      	lsrs	r3, r3, #15
    6730:	d019      	beq.n	6766 <spi_init+0x1c2>
    6732:	2c00      	cmp	r4, #0
    6734:	d1f9      	bne.n	672a <spi_init+0x186>
    6736:	1c30      	adds	r0, r6, #0
    6738:	1c29      	adds	r1, r5, #0
    673a:	2244      	movs	r2, #68	; 0x44
    673c:	f7ff f94c 	bl	59d8 <mbed_assert_internal>
    6740:	e7f3      	b.n	672a <spi_init+0x186>
    6742:	4813      	ldr	r0, [pc, #76]	; (6790 <spi_init+0x1ec>)
    6744:	490f      	ldr	r1, [pc, #60]	; (6784 <spi_init+0x1e0>)
    6746:	22f5      	movs	r2, #245	; 0xf5
    6748:	f7ff f946 	bl	59d8 <mbed_assert_internal>
    674c:	e740      	b.n	65d0 <spi_init+0x2c>
    674e:	480c      	ldr	r0, [pc, #48]	; (6780 <spi_init+0x1dc>)
    6750:	490c      	ldr	r1, [pc, #48]	; (6784 <spi_init+0x1e0>)
    6752:	225e      	movs	r2, #94	; 0x5e
    6754:	f7ff f940 	bl	59d8 <mbed_assert_internal>
    6758:	e751      	b.n	65fe <spi_init+0x5a>
    675a:	4809      	ldr	r0, [pc, #36]	; (6780 <spi_init+0x1dc>)
    675c:	4909      	ldr	r1, [pc, #36]	; (6784 <spi_init+0x1e0>)
    675e:	22f4      	movs	r2, #244	; 0xf4
    6760:	f7ff f93a 	bl	59d8 <mbed_assert_internal>
    6764:	e730      	b.n	65c8 <spi_init+0x24>
    6766:	6811      	ldr	r1, [r2, #0]
    6768:	3302      	adds	r3, #2
    676a:	430b      	orrs	r3, r1
    676c:	6013      	str	r3, [r2, #0]
    676e:	e762      	b.n	6636 <spi_init+0x92>
    6770:	4803      	ldr	r0, [pc, #12]	; (6780 <spi_init+0x1dc>)
    6772:	4904      	ldr	r1, [pc, #16]	; (6784 <spi_init+0x1e0>)
    6774:	2252      	movs	r2, #82	; 0x52
    6776:	f7ff f92f 	bl	59d8 <mbed_assert_internal>
    677a:	e7d3      	b.n	6724 <spi_init+0x180>
    677c:	200042fc 	.word	0x200042fc
    6780:	0000fe88 	.word	0x0000fe88
    6784:	00010708 	.word	0x00010708
    6788:	40000400 	.word	0x40000400
    678c:	000186a0 	.word	0x000186a0
    6790:	00010770 	.word	0x00010770

00006794 <spi_format>:
    6794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6796:	464f      	mov	r7, r9
    6798:	4646      	mov	r6, r8
    679a:	1c04      	adds	r4, r0, #0
    679c:	b4c0      	push	{r6, r7}
    679e:	4688      	mov	r8, r1
    67a0:	1c15      	adds	r5, r2, #0
    67a2:	4699      	mov	r9, r3
    67a4:	2800      	cmp	r0, #0
    67a6:	d100      	bne.n	67aa <spi_format+0x16>
    67a8:	e08a      	b.n	68c0 <spi_format+0x12c>
    67aa:	4f4f      	ldr	r7, [pc, #316]	; (68e8 <spi_format+0x154>)
    67ac:	4e4f      	ldr	r6, [pc, #316]	; (68ec <spi_format+0x158>)
    67ae:	e006      	b.n	67be <spi_format+0x2a>
    67b0:	6822      	ldr	r2, [r4, #0]
    67b2:	8b53      	ldrh	r3, [r2, #26]
    67b4:	0bdb      	lsrs	r3, r3, #15
    67b6:	03db      	lsls	r3, r3, #15
    67b8:	b29b      	uxth	r3, r3
    67ba:	2b00      	cmp	r3, #0
    67bc:	d00d      	beq.n	67da <spi_format+0x46>
    67be:	2c00      	cmp	r4, #0
    67c0:	d1f6      	bne.n	67b0 <spi_format+0x1c>
    67c2:	2244      	movs	r2, #68	; 0x44
    67c4:	1c38      	adds	r0, r7, #0
    67c6:	1c31      	adds	r1, r6, #0
    67c8:	f7ff f906 	bl	59d8 <mbed_assert_internal>
    67cc:	6822      	ldr	r2, [r4, #0]
    67ce:	8b53      	ldrh	r3, [r2, #26]
    67d0:	0bdb      	lsrs	r3, r3, #15
    67d2:	03db      	lsls	r3, r3, #15
    67d4:	b29b      	uxth	r3, r3
    67d6:	2b00      	cmp	r3, #0
    67d8:	d1f1      	bne.n	67be <spi_format+0x2a>
    67da:	2002      	movs	r0, #2
    67dc:	6811      	ldr	r1, [r2, #0]
    67de:	4381      	bics	r1, r0
    67e0:	6011      	str	r1, [r2, #0]
    67e2:	464a      	mov	r2, r9
    67e4:	2a00      	cmp	r2, #0
    67e6:	d060      	beq.n	68aa <spi_format+0x116>
    67e8:	211c      	movs	r1, #28
    67ea:	6820      	ldr	r0, [r4, #0]
    67ec:	6802      	ldr	r2, [r0, #0]
    67ee:	438a      	bics	r2, r1
    67f0:	3914      	subs	r1, #20
    67f2:	430a      	orrs	r2, r1
    67f4:	6002      	str	r2, [r0, #0]
    67f6:	6822      	ldr	r2, [r4, #0]
    67f8:	7123      	strb	r3, [r4, #4]
    67fa:	6851      	ldr	r1, [r2, #4]
    67fc:	3340      	adds	r3, #64	; 0x40
    67fe:	430b      	orrs	r3, r1
    6800:	6053      	str	r3, [r2, #4]
    6802:	2300      	movs	r3, #0
    6804:	4699      	mov	r9, r3
    6806:	1c27      	adds	r7, r4, #0
    6808:	1d66      	adds	r6, r4, #5
    680a:	3709      	adds	r7, #9
    680c:	2000      	movs	r0, #0
    680e:	5630      	ldrsb	r0, [r6, r0]
    6810:	1c43      	adds	r3, r0, #1
    6812:	d002      	beq.n	681a <spi_format+0x86>
    6814:	4649      	mov	r1, r9
    6816:	f7ff fc11 	bl	603c <pin_mode>
    681a:	3601      	adds	r6, #1
    681c:	42be      	cmp	r6, r7
    681e:	d1f5      	bne.n	680c <spi_format+0x78>
    6820:	6823      	ldr	r3, [r4, #0]
    6822:	1c20      	adds	r0, r4, #0
    6824:	681e      	ldr	r6, [r3, #0]
    6826:	4b32      	ldr	r3, [pc, #200]	; (68f0 <spi_format+0x15c>)
    6828:	401e      	ands	r6, r3
    682a:	f7ff fe6b 	bl	6504 <spi_find_mux_settings>
    682e:	4642      	mov	r2, r8
    6830:	6823      	ldr	r3, [r4, #0]
    6832:	4306      	orrs	r6, r0
    6834:	601e      	str	r6, [r3, #0]
    6836:	6821      	ldr	r1, [r4, #0]
    6838:	2301      	movs	r3, #1
    683a:	2a08      	cmp	r2, #8
    683c:	dc00      	bgt.n	6840 <spi_format+0xac>
    683e:	2300      	movs	r3, #0
    6840:	2007      	movs	r0, #7
    6842:	684a      	ldr	r2, [r1, #4]
    6844:	4003      	ands	r3, r0
    6846:	4382      	bics	r2, r0
    6848:	4313      	orrs	r3, r2
    684a:	604b      	str	r3, [r1, #4]
    684c:	2301      	movs	r3, #1
    684e:	1c1a      	adds	r2, r3, #0
    6850:	6820      	ldr	r0, [r4, #0]
    6852:	402a      	ands	r2, r5
    6854:	6806      	ldr	r6, [r0, #0]
    6856:	0711      	lsls	r1, r2, #28
    6858:	4a26      	ldr	r2, [pc, #152]	; (68f4 <spi_format+0x160>)
    685a:	086d      	lsrs	r5, r5, #1
    685c:	4032      	ands	r2, r6
    685e:	430a      	orrs	r2, r1
    6860:	6002      	str	r2, [r0, #0]
    6862:	6821      	ldr	r1, [r4, #0]
    6864:	401d      	ands	r5, r3
    6866:	076b      	lsls	r3, r5, #29
    6868:	4a23      	ldr	r2, [pc, #140]	; (68f8 <spi_format+0x164>)
    686a:	680d      	ldr	r5, [r1, #0]
    686c:	4015      	ands	r5, r2
    686e:	431d      	orrs	r5, r3
    6870:	600d      	str	r5, [r1, #0]
    6872:	2c00      	cmp	r4, #0
    6874:	d032      	beq.n	68dc <spi_format+0x148>
    6876:	4e1c      	ldr	r6, [pc, #112]	; (68e8 <spi_format+0x154>)
    6878:	4d1c      	ldr	r5, [pc, #112]	; (68ec <spi_format+0x158>)
    687a:	e003      	b.n	6884 <spi_format+0xf0>
    687c:	6822      	ldr	r2, [r4, #0]
    687e:	8b53      	ldrh	r3, [r2, #26]
    6880:	0bdb      	lsrs	r3, r3, #15
    6882:	d00a      	beq.n	689a <spi_format+0x106>
    6884:	2c00      	cmp	r4, #0
    6886:	d1f9      	bne.n	687c <spi_format+0xe8>
    6888:	2244      	movs	r2, #68	; 0x44
    688a:	1c30      	adds	r0, r6, #0
    688c:	1c29      	adds	r1, r5, #0
    688e:	f7ff f8a3 	bl	59d8 <mbed_assert_internal>
    6892:	6822      	ldr	r2, [r4, #0]
    6894:	8b53      	ldrh	r3, [r2, #26]
    6896:	0bdb      	lsrs	r3, r3, #15
    6898:	d1f4      	bne.n	6884 <spi_format+0xf0>
    689a:	6811      	ldr	r1, [r2, #0]
    689c:	3302      	adds	r3, #2
    689e:	430b      	orrs	r3, r1
    68a0:	6013      	str	r3, [r2, #0]
    68a2:	bc0c      	pop	{r2, r3}
    68a4:	4690      	mov	r8, r2
    68a6:	4699      	mov	r9, r3
    68a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68aa:	221c      	movs	r2, #28
    68ac:	6821      	ldr	r1, [r4, #0]
    68ae:	680b      	ldr	r3, [r1, #0]
    68b0:	4393      	bics	r3, r2
    68b2:	3a10      	subs	r2, #16
    68b4:	4313      	orrs	r3, r2
    68b6:	600b      	str	r3, [r1, #0]
    68b8:	2301      	movs	r3, #1
    68ba:	7123      	strb	r3, [r4, #4]
    68bc:	4699      	mov	r9, r3
    68be:	e7a2      	b.n	6806 <spi_format+0x72>
    68c0:	2296      	movs	r2, #150	; 0x96
    68c2:	4f09      	ldr	r7, [pc, #36]	; (68e8 <spi_format+0x154>)
    68c4:	4e09      	ldr	r6, [pc, #36]	; (68ec <spi_format+0x158>)
    68c6:	1c38      	adds	r0, r7, #0
    68c8:	1c31      	adds	r1, r6, #0
    68ca:	32ff      	adds	r2, #255	; 0xff
    68cc:	f7ff f884 	bl	59d8 <mbed_assert_internal>
    68d0:	1c38      	adds	r0, r7, #0
    68d2:	1c31      	adds	r1, r6, #0
    68d4:	225e      	movs	r2, #94	; 0x5e
    68d6:	f7ff f87f 	bl	59d8 <mbed_assert_internal>
    68da:	e766      	b.n	67aa <spi_format+0x16>
    68dc:	4802      	ldr	r0, [pc, #8]	; (68e8 <spi_format+0x154>)
    68de:	4903      	ldr	r1, [pc, #12]	; (68ec <spi_format+0x158>)
    68e0:	2252      	movs	r2, #82	; 0x52
    68e2:	f7ff f879 	bl	59d8 <mbed_assert_internal>
    68e6:	e7c6      	b.n	6876 <spi_format+0xe2>
    68e8:	0000fe88 	.word	0x0000fe88
    68ec:	00010708 	.word	0x00010708
    68f0:	ffccffff 	.word	0xffccffff
    68f4:	efffffff 	.word	0xefffffff
    68f8:	dfffffff 	.word	0xdfffffff

000068fc <spi_frequency>:
    68fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    68fe:	b083      	sub	sp, #12
    6900:	2300      	movs	r3, #0
    6902:	466a      	mov	r2, sp
    6904:	1c04      	adds	r4, r0, #0
    6906:	1c0d      	adds	r5, r1, #0
    6908:	80d3      	strh	r3, [r2, #6]
    690a:	2800      	cmp	r0, #0
    690c:	d053      	beq.n	69b6 <spi_frequency+0xba>
    690e:	4f37      	ldr	r7, [pc, #220]	; (69ec <spi_frequency+0xf0>)
    6910:	4e37      	ldr	r6, [pc, #220]	; (69f0 <spi_frequency+0xf4>)
    6912:	e003      	b.n	691c <spi_frequency+0x20>
    6914:	6822      	ldr	r2, [r4, #0]
    6916:	8b53      	ldrh	r3, [r2, #26]
    6918:	0bdb      	lsrs	r3, r3, #15
    691a:	d00a      	beq.n	6932 <spi_frequency+0x36>
    691c:	2c00      	cmp	r4, #0
    691e:	d1f9      	bne.n	6914 <spi_frequency+0x18>
    6920:	2244      	movs	r2, #68	; 0x44
    6922:	1c38      	adds	r0, r7, #0
    6924:	1c31      	adds	r1, r6, #0
    6926:	f7ff f857 	bl	59d8 <mbed_assert_internal>
    692a:	6822      	ldr	r2, [r4, #0]
    692c:	8b53      	ldrh	r3, [r2, #26]
    692e:	0bdb      	lsrs	r3, r3, #15
    6930:	d1f4      	bne.n	691c <spi_frequency+0x20>
    6932:	2102      	movs	r1, #2
    6934:	6813      	ldr	r3, [r2, #0]
    6936:	438b      	bics	r3, r1
    6938:	6013      	str	r3, [r2, #0]
    693a:	6820      	ldr	r0, [r4, #0]
    693c:	f7ff f9cc 	bl	5cd8 <_sercom_get_sercom_inst_index>
    6940:	3014      	adds	r0, #20
    6942:	b2c0      	uxtb	r0, r0
    6944:	f7fe f91c 	bl	4b80 <system_gclk_chan_get_hz>
    6948:	466b      	mov	r3, sp
    694a:	1c01      	adds	r1, r0, #0
    694c:	1d9a      	adds	r2, r3, #6
    694e:	1c28      	adds	r0, r5, #0
    6950:	f7ff f8c6 	bl	5ae0 <_sercom_get_sync_baud_val>
    6954:	2800      	cmp	r0, #0
    6956:	d11d      	bne.n	6994 <spi_frequency+0x98>
    6958:	466b      	mov	r3, sp
    695a:	6822      	ldr	r2, [r4, #0]
    695c:	799b      	ldrb	r3, [r3, #6]
    695e:	7313      	strb	r3, [r2, #12]
    6960:	2c00      	cmp	r4, #0
    6962:	d036      	beq.n	69d2 <spi_frequency+0xd6>
    6964:	4e21      	ldr	r6, [pc, #132]	; (69ec <spi_frequency+0xf0>)
    6966:	4d22      	ldr	r5, [pc, #136]	; (69f0 <spi_frequency+0xf4>)
    6968:	e003      	b.n	6972 <spi_frequency+0x76>
    696a:	6822      	ldr	r2, [r4, #0]
    696c:	8b53      	ldrh	r3, [r2, #26]
    696e:	0bdb      	lsrs	r3, r3, #15
    6970:	d00a      	beq.n	6988 <spi_frequency+0x8c>
    6972:	2c00      	cmp	r4, #0
    6974:	d1f9      	bne.n	696a <spi_frequency+0x6e>
    6976:	2244      	movs	r2, #68	; 0x44
    6978:	1c30      	adds	r0, r6, #0
    697a:	1c29      	adds	r1, r5, #0
    697c:	f7ff f82c 	bl	59d8 <mbed_assert_internal>
    6980:	6822      	ldr	r2, [r4, #0]
    6982:	8b53      	ldrh	r3, [r2, #26]
    6984:	0bdb      	lsrs	r3, r3, #15
    6986:	d1f4      	bne.n	6972 <spi_frequency+0x76>
    6988:	6811      	ldr	r1, [r2, #0]
    698a:	3302      	adds	r3, #2
    698c:	430b      	orrs	r3, r1
    698e:	6013      	str	r3, [r2, #0]
    6990:	b003      	add	sp, #12
    6992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6994:	2c00      	cmp	r4, #0
    6996:	d022      	beq.n	69de <spi_frequency+0xe2>
    6998:	4e14      	ldr	r6, [pc, #80]	; (69ec <spi_frequency+0xf0>)
    699a:	4d15      	ldr	r5, [pc, #84]	; (69f0 <spi_frequency+0xf4>)
    699c:	e003      	b.n	69a6 <spi_frequency+0xaa>
    699e:	6822      	ldr	r2, [r4, #0]
    69a0:	8b53      	ldrh	r3, [r2, #26]
    69a2:	0bdb      	lsrs	r3, r3, #15
    69a4:	d0f0      	beq.n	6988 <spi_frequency+0x8c>
    69a6:	2c00      	cmp	r4, #0
    69a8:	d1f9      	bne.n	699e <spi_frequency+0xa2>
    69aa:	1c30      	adds	r0, r6, #0
    69ac:	1c29      	adds	r1, r5, #0
    69ae:	2244      	movs	r2, #68	; 0x44
    69b0:	f7ff f812 	bl	59d8 <mbed_assert_internal>
    69b4:	e7f3      	b.n	699e <spi_frequency+0xa2>
    69b6:	22d0      	movs	r2, #208	; 0xd0
    69b8:	4f0c      	ldr	r7, [pc, #48]	; (69ec <spi_frequency+0xf0>)
    69ba:	4e0d      	ldr	r6, [pc, #52]	; (69f0 <spi_frequency+0xf4>)
    69bc:	1c38      	adds	r0, r7, #0
    69be:	1c31      	adds	r1, r6, #0
    69c0:	32ff      	adds	r2, #255	; 0xff
    69c2:	f7ff f809 	bl	59d8 <mbed_assert_internal>
    69c6:	1c38      	adds	r0, r7, #0
    69c8:	1c31      	adds	r1, r6, #0
    69ca:	225e      	movs	r2, #94	; 0x5e
    69cc:	f7ff f804 	bl	59d8 <mbed_assert_internal>
    69d0:	e79d      	b.n	690e <spi_frequency+0x12>
    69d2:	4806      	ldr	r0, [pc, #24]	; (69ec <spi_frequency+0xf0>)
    69d4:	4906      	ldr	r1, [pc, #24]	; (69f0 <spi_frequency+0xf4>)
    69d6:	2252      	movs	r2, #82	; 0x52
    69d8:	f7fe fffe 	bl	59d8 <mbed_assert_internal>
    69dc:	e7c2      	b.n	6964 <spi_frequency+0x68>
    69de:	4803      	ldr	r0, [pc, #12]	; (69ec <spi_frequency+0xf0>)
    69e0:	4903      	ldr	r1, [pc, #12]	; (69f0 <spi_frequency+0xf4>)
    69e2:	2252      	movs	r2, #82	; 0x52
    69e4:	f7fe fff8 	bl	59d8 <mbed_assert_internal>
    69e8:	e7d6      	b.n	6998 <spi_frequency+0x9c>
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	0000fe88 	.word	0x0000fe88
    69f0:	00010708 	.word	0x00010708

000069f4 <spi_master_write>:
    69f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69f6:	4647      	mov	r7, r8
    69f8:	1c04      	adds	r4, r0, #0
    69fa:	b480      	push	{r7}
    69fc:	1c0e      	adds	r6, r1, #0
    69fe:	2800      	cmp	r0, #0
    6a00:	d052      	beq.n	6aa8 <spi_master_write+0xb4>
    6a02:	7a63      	ldrb	r3, [r4, #9]
    6a04:	2b05      	cmp	r3, #5
    6a06:	d045      	beq.n	6a94 <spi_master_write+0xa0>
    6a08:	4b3a      	ldr	r3, [pc, #232]	; (6af4 <spi_master_write+0x100>)
    6a0a:	4f3b      	ldr	r7, [pc, #236]	; (6af8 <spi_master_write+0x104>)
    6a0c:	4698      	mov	r8, r3
    6a0e:	2501      	movs	r5, #1
    6a10:	e003      	b.n	6a1a <spi_master_write+0x26>
    6a12:	6823      	ldr	r3, [r4, #0]
    6a14:	7e1a      	ldrb	r2, [r3, #24]
    6a16:	4215      	tst	r5, r2
    6a18:	d10a      	bne.n	6a30 <spi_master_write+0x3c>
    6a1a:	2c00      	cmp	r4, #0
    6a1c:	d1f9      	bne.n	6a12 <spi_master_write+0x1e>
    6a1e:	2273      	movs	r2, #115	; 0x73
    6a20:	4640      	mov	r0, r8
    6a22:	1c39      	adds	r1, r7, #0
    6a24:	f7fe ffd8 	bl	59d8 <mbed_assert_internal>
    6a28:	6823      	ldr	r3, [r4, #0]
    6a2a:	7e1a      	ldrb	r2, [r3, #24]
    6a2c:	4215      	tst	r5, r2
    6a2e:	d0f4      	beq.n	6a1a <spi_master_write+0x26>
    6a30:	2c00      	cmp	r4, #0
    6a32:	d043      	beq.n	6abc <spi_master_write+0xc8>
    6a34:	7e1a      	ldrb	r2, [r3, #24]
    6a36:	07d2      	lsls	r2, r2, #31
    6a38:	d503      	bpl.n	6a42 <spi_master_write+0x4e>
    6a3a:	05f6      	lsls	r6, r6, #23
    6a3c:	0df6      	lsrs	r6, r6, #23
    6a3e:	629e      	str	r6, [r3, #40]	; 0x28
    6a40:	6823      	ldr	r3, [r4, #0]
    6a42:	685b      	ldr	r3, [r3, #4]
    6a44:	039b      	lsls	r3, r3, #14
    6a46:	d525      	bpl.n	6a94 <spi_master_write+0xa0>
    6a48:	4f2a      	ldr	r7, [pc, #168]	; (6af4 <spi_master_write+0x100>)
    6a4a:	4e2b      	ldr	r6, [pc, #172]	; (6af8 <spi_master_write+0x104>)
    6a4c:	2504      	movs	r5, #4
    6a4e:	e003      	b.n	6a58 <spi_master_write+0x64>
    6a50:	6823      	ldr	r3, [r4, #0]
    6a52:	7e1a      	ldrb	r2, [r3, #24]
    6a54:	4215      	tst	r5, r2
    6a56:	d10a      	bne.n	6a6e <spi_master_write+0x7a>
    6a58:	2c00      	cmp	r4, #0
    6a5a:	d1f9      	bne.n	6a50 <spi_master_write+0x5c>
    6a5c:	227c      	movs	r2, #124	; 0x7c
    6a5e:	1c38      	adds	r0, r7, #0
    6a60:	1c31      	adds	r1, r6, #0
    6a62:	f7fe ffb9 	bl	59d8 <mbed_assert_internal>
    6a66:	6823      	ldr	r3, [r4, #0]
    6a68:	7e1a      	ldrb	r2, [r3, #24]
    6a6a:	4215      	tst	r5, r2
    6a6c:	d0f4      	beq.n	6a58 <spi_master_write+0x64>
    6a6e:	2c00      	cmp	r4, #0
    6a70:	d032      	beq.n	6ad8 <spi_master_write+0xe4>
    6a72:	2204      	movs	r2, #4
    6a74:	7e19      	ldrb	r1, [r3, #24]
    6a76:	2000      	movs	r0, #0
    6a78:	420a      	tst	r2, r1
    6a7a:	d00c      	beq.n	6a96 <spi_master_write+0xa2>
    6a7c:	8b59      	ldrh	r1, [r3, #26]
    6a7e:	420a      	tst	r2, r1
    6a80:	d10c      	bne.n	6a9c <spi_master_write+0xa8>
    6a82:	2107      	movs	r1, #7
    6a84:	685a      	ldr	r2, [r3, #4]
    6a86:	400a      	ands	r2, r1
    6a88:	2a01      	cmp	r2, #1
    6a8a:	d013      	beq.n	6ab4 <spi_master_write+0xc0>
    6a8c:	20ff      	movs	r0, #255	; 0xff
    6a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a90:	4018      	ands	r0, r3
    6a92:	e000      	b.n	6a96 <spi_master_write+0xa2>
    6a94:	2000      	movs	r0, #0
    6a96:	bc04      	pop	{r2}
    6a98:	4690      	mov	r8, r2
    6a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a9c:	8b59      	ldrh	r1, [r3, #26]
    6a9e:	430a      	orrs	r2, r1
    6aa0:	b292      	uxth	r2, r2
    6aa2:	835a      	strh	r2, [r3, #26]
    6aa4:	6823      	ldr	r3, [r4, #0]
    6aa6:	e7ec      	b.n	6a82 <spi_master_write+0x8e>
    6aa8:	4812      	ldr	r0, [pc, #72]	; (6af4 <spi_master_write+0x100>)
    6aaa:	4913      	ldr	r1, [pc, #76]	; (6af8 <spi_master_write+0x104>)
    6aac:	4a13      	ldr	r2, [pc, #76]	; (6afc <spi_master_write+0x108>)
    6aae:	f7fe ff93 	bl	59d8 <mbed_assert_internal>
    6ab2:	e7a6      	b.n	6a02 <spi_master_write+0xe>
    6ab4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6ab6:	05c0      	lsls	r0, r0, #23
    6ab8:	0dc0      	lsrs	r0, r0, #23
    6aba:	e7ec      	b.n	6a96 <spi_master_write+0xa2>
    6abc:	4f0d      	ldr	r7, [pc, #52]	; (6af4 <spi_master_write+0x100>)
    6abe:	4d0e      	ldr	r5, [pc, #56]	; (6af8 <spi_master_write+0x104>)
    6ac0:	1c38      	adds	r0, r7, #0
    6ac2:	1c29      	adds	r1, r5, #0
    6ac4:	2285      	movs	r2, #133	; 0x85
    6ac6:	f7fe ff87 	bl	59d8 <mbed_assert_internal>
    6aca:	1c38      	adds	r0, r7, #0
    6acc:	1c29      	adds	r1, r5, #0
    6ace:	2273      	movs	r2, #115	; 0x73
    6ad0:	f7fe ff82 	bl	59d8 <mbed_assert_internal>
    6ad4:	6823      	ldr	r3, [r4, #0]
    6ad6:	e7ad      	b.n	6a34 <spi_master_write+0x40>
    6ad8:	4e06      	ldr	r6, [pc, #24]	; (6af4 <spi_master_write+0x100>)
    6ada:	4d07      	ldr	r5, [pc, #28]	; (6af8 <spi_master_write+0x104>)
    6adc:	1c30      	adds	r0, r6, #0
    6ade:	1c29      	adds	r1, r5, #0
    6ae0:	2296      	movs	r2, #150	; 0x96
    6ae2:	f7fe ff79 	bl	59d8 <mbed_assert_internal>
    6ae6:	1c30      	adds	r0, r6, #0
    6ae8:	1c29      	adds	r1, r5, #0
    6aea:	227c      	movs	r2, #124	; 0x7c
    6aec:	f7fe ff74 	bl	59d8 <mbed_assert_internal>
    6af0:	6823      	ldr	r3, [r4, #0]
    6af2:	e7be      	b.n	6a72 <spi_master_write+0x7e>
    6af4:	0000fe88 	.word	0x0000fe88
    6af8:	00010708 	.word	0x00010708
    6afc:	00000212 	.word	0x00000212

00006b00 <_ZN4mbed8FileBaseD1Ev>:
    6b00:	4b0a      	ldr	r3, [pc, #40]	; (6b2c <_ZN4mbed8FileBaseD1Ev+0x2c>)
    6b02:	3308      	adds	r3, #8
    6b04:	6003      	str	r3, [r0, #0]
    6b06:	6883      	ldr	r3, [r0, #8]
    6b08:	2b00      	cmp	r3, #0
    6b0a:	d00a      	beq.n	6b22 <_ZN4mbed8FileBaseD1Ev+0x22>
    6b0c:	4b08      	ldr	r3, [pc, #32]	; (6b30 <_ZN4mbed8FileBaseD1Ev+0x30>)
    6b0e:	681a      	ldr	r2, [r3, #0]
    6b10:	4282      	cmp	r2, r0
    6b12:	d101      	bne.n	6b18 <_ZN4mbed8FileBaseD1Ev+0x18>
    6b14:	e006      	b.n	6b24 <_ZN4mbed8FileBaseD1Ev+0x24>
    6b16:	1c1a      	adds	r2, r3, #0
    6b18:	6853      	ldr	r3, [r2, #4]
    6b1a:	4283      	cmp	r3, r0
    6b1c:	d1fb      	bne.n	6b16 <_ZN4mbed8FileBaseD1Ev+0x16>
    6b1e:	6843      	ldr	r3, [r0, #4]
    6b20:	6053      	str	r3, [r2, #4]
    6b22:	4770      	bx	lr
    6b24:	6842      	ldr	r2, [r0, #4]
    6b26:	601a      	str	r2, [r3, #0]
    6b28:	e7fb      	b.n	6b22 <_ZN4mbed8FileBaseD1Ev+0x22>
    6b2a:	46c0      	nop			; (mov r8, r8)
    6b2c:	00010780 	.word	0x00010780
    6b30:	2000444c 	.word	0x2000444c

00006b34 <_ZN4mbed8FileBaseD0Ev>:
    6b34:	4b0d      	ldr	r3, [pc, #52]	; (6b6c <_ZN4mbed8FileBaseD0Ev+0x38>)
    6b36:	b510      	push	{r4, lr}
    6b38:	3308      	adds	r3, #8
    6b3a:	6003      	str	r3, [r0, #0]
    6b3c:	6883      	ldr	r3, [r0, #8]
    6b3e:	1c04      	adds	r4, r0, #0
    6b40:	2b00      	cmp	r3, #0
    6b42:	d00a      	beq.n	6b5a <_ZN4mbed8FileBaseD0Ev+0x26>
    6b44:	4b0a      	ldr	r3, [pc, #40]	; (6b70 <_ZN4mbed8FileBaseD0Ev+0x3c>)
    6b46:	681a      	ldr	r2, [r3, #0]
    6b48:	4290      	cmp	r0, r2
    6b4a:	d101      	bne.n	6b50 <_ZN4mbed8FileBaseD0Ev+0x1c>
    6b4c:	e00a      	b.n	6b64 <_ZN4mbed8FileBaseD0Ev+0x30>
    6b4e:	1c1a      	adds	r2, r3, #0
    6b50:	6853      	ldr	r3, [r2, #4]
    6b52:	429c      	cmp	r4, r3
    6b54:	d1fb      	bne.n	6b4e <_ZN4mbed8FileBaseD0Ev+0x1a>
    6b56:	6863      	ldr	r3, [r4, #4]
    6b58:	6053      	str	r3, [r2, #4]
    6b5a:	1c20      	adds	r0, r4, #0
    6b5c:	f000 fab5 	bl	70ca <_ZdlPv>
    6b60:	1c20      	adds	r0, r4, #0
    6b62:	bd10      	pop	{r4, pc}
    6b64:	6842      	ldr	r2, [r0, #4]
    6b66:	601a      	str	r2, [r3, #0]
    6b68:	e7f7      	b.n	6b5a <_ZN4mbed8FileBaseD0Ev+0x26>
    6b6a:	46c0      	nop			; (mov r8, r8)
    6b6c:	00010780 	.word	0x00010780
    6b70:	2000444c 	.word	0x2000444c

00006b74 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
    6b74:	4b06      	ldr	r3, [pc, #24]	; (6b90 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1c>)
    6b76:	6081      	str	r1, [r0, #8]
    6b78:	3308      	adds	r3, #8
    6b7a:	6003      	str	r3, [r0, #0]
    6b7c:	2300      	movs	r3, #0
    6b7e:	7302      	strb	r2, [r0, #12]
    6b80:	6043      	str	r3, [r0, #4]
    6b82:	2900      	cmp	r1, #0
    6b84:	d003      	beq.n	6b8e <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1a>
    6b86:	4b03      	ldr	r3, [pc, #12]	; (6b94 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x20>)
    6b88:	681a      	ldr	r2, [r3, #0]
    6b8a:	6018      	str	r0, [r3, #0]
    6b8c:	6042      	str	r2, [r0, #4]
    6b8e:	4770      	bx	lr
    6b90:	00010780 	.word	0x00010780
    6b94:	2000444c 	.word	0x2000444c

00006b98 <_ZN4mbed8FileBase6lookupEPKcj>:
    6b98:	4b0e      	ldr	r3, [pc, #56]	; (6bd4 <_ZN4mbed8FileBase6lookupEPKcj+0x3c>)
    6b9a:	b570      	push	{r4, r5, r6, lr}
    6b9c:	681c      	ldr	r4, [r3, #0]
    6b9e:	1c06      	adds	r6, r0, #0
    6ba0:	1c0d      	adds	r5, r1, #0
    6ba2:	2c00      	cmp	r4, #0
    6ba4:	d103      	bne.n	6bae <_ZN4mbed8FileBase6lookupEPKcj+0x16>
    6ba6:	e012      	b.n	6bce <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6ba8:	6864      	ldr	r4, [r4, #4]
    6baa:	2c00      	cmp	r4, #0
    6bac:	d00f      	beq.n	6bce <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6bae:	68a0      	ldr	r0, [r4, #8]
    6bb0:	2800      	cmp	r0, #0
    6bb2:	d0f9      	beq.n	6ba8 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6bb4:	1c31      	adds	r1, r6, #0
    6bb6:	1c2a      	adds	r2, r5, #0
    6bb8:	f005 fbb1 	bl	c31e <strncmp>
    6bbc:	2800      	cmp	r0, #0
    6bbe:	d1f3      	bne.n	6ba8 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6bc0:	68a0      	ldr	r0, [r4, #8]
    6bc2:	f005 fba5 	bl	c310 <strlen>
    6bc6:	42a8      	cmp	r0, r5
    6bc8:	d1ee      	bne.n	6ba8 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6bca:	1c20      	adds	r0, r4, #0
    6bcc:	e000      	b.n	6bd0 <_ZN4mbed8FileBase6lookupEPKcj+0x38>
    6bce:	2000      	movs	r0, #0
    6bd0:	bd70      	pop	{r4, r5, r6, pc}
    6bd2:	46c0      	nop			; (mov r8, r8)
    6bd4:	2000444c 	.word	0x2000444c

00006bd8 <_ZN4mbed8FileBase11getPathTypeEv>:
    6bd8:	7b00      	ldrb	r0, [r0, #12]
    6bda:	4770      	bx	lr

00006bdc <_ZN4mbed8FileLikeC1EPKc>:
    6bdc:	4b07      	ldr	r3, [pc, #28]	; (6bfc <_ZN4mbed8FileLikeC1EPKc+0x20>)
    6bde:	b510      	push	{r4, lr}
    6be0:	2200      	movs	r2, #0
    6be2:	1c04      	adds	r4, r0, #0
    6be4:	c008      	stmia	r0!, {r3}
    6be6:	f7ff ffc5 	bl	6b74 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
    6bea:	4b05      	ldr	r3, [pc, #20]	; (6c00 <_ZN4mbed8FileLikeC1EPKc+0x24>)
    6bec:	1c20      	adds	r0, r4, #0
    6bee:	1c1a      	adds	r2, r3, #0
    6bf0:	3334      	adds	r3, #52	; 0x34
    6bf2:	3208      	adds	r2, #8
    6bf4:	6022      	str	r2, [r4, #0]
    6bf6:	6063      	str	r3, [r4, #4]
    6bf8:	bd10      	pop	{r4, pc}
    6bfa:	46c0      	nop			; (mov r8, r8)
    6bfc:	0000fe48 	.word	0x0000fe48
    6c00:	00010790 	.word	0x00010790

00006c04 <_ZN4mbed8FileLikeD1Ev>:
    6c04:	4b07      	ldr	r3, [pc, #28]	; (6c24 <_ZN4mbed8FileLikeD1Ev+0x20>)
    6c06:	b510      	push	{r4, lr}
    6c08:	1c1a      	adds	r2, r3, #0
    6c0a:	1c04      	adds	r4, r0, #0
    6c0c:	3208      	adds	r2, #8
    6c0e:	3334      	adds	r3, #52	; 0x34
    6c10:	6002      	str	r2, [r0, #0]
    6c12:	6043      	str	r3, [r0, #4]
    6c14:	3004      	adds	r0, #4
    6c16:	f7ff ff73 	bl	6b00 <_ZN4mbed8FileBaseD1Ev>
    6c1a:	1c20      	adds	r0, r4, #0
    6c1c:	f7fd fbda 	bl	43d4 <_ZN4mbed10FileHandleD1Ev>
    6c20:	1c20      	adds	r0, r4, #0
    6c22:	bd10      	pop	{r4, pc}
    6c24:	00010790 	.word	0x00010790

00006c28 <us_ticker_irq_handler>:
    6c28:	b508      	push	{r3, lr}
    6c2a:	4802      	ldr	r0, [pc, #8]	; (6c34 <us_ticker_irq_handler+0xc>)
    6c2c:	f000 fa20 	bl	7070 <ticker_irq_handler>
    6c30:	bd08      	pop	{r3, pc}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	000107e0 	.word	0x000107e0

00006c38 <port_pin_set_config>:
    6c38:	2280      	movs	r2, #128	; 0x80
    6c3a:	b500      	push	{lr}
    6c3c:	b083      	sub	sp, #12
    6c3e:	ab01      	add	r3, sp, #4
    6c40:	701a      	strb	r2, [r3, #0]
    6c42:	780a      	ldrb	r2, [r1, #0]
    6c44:	705a      	strb	r2, [r3, #1]
    6c46:	784a      	ldrb	r2, [r1, #1]
    6c48:	709a      	strb	r2, [r3, #2]
    6c4a:	788a      	ldrb	r2, [r1, #2]
    6c4c:	1c19      	adds	r1, r3, #0
    6c4e:	70da      	strb	r2, [r3, #3]
    6c50:	f7fd fe80 	bl	4954 <system_pinmux_pin_set_config>
    6c54:	b003      	add	sp, #12
    6c56:	bd00      	pop	{pc}

00006c58 <tc_register_callback>:
    6c58:	1c93      	adds	r3, r2, #2
    6c5a:	009b      	lsls	r3, r3, #2
    6c5c:	5019      	str	r1, [r3, r0]
    6c5e:	2a02      	cmp	r2, #2
    6c60:	d009      	beq.n	6c76 <tc_register_callback+0x1e>
    6c62:	2a03      	cmp	r2, #3
    6c64:	d00c      	beq.n	6c80 <tc_register_callback+0x28>
    6c66:	2301      	movs	r3, #1
    6c68:	4093      	lsls	r3, r2
    6c6a:	1c1a      	adds	r2, r3, #0
    6c6c:	7e03      	ldrb	r3, [r0, #24]
    6c6e:	431a      	orrs	r2, r3
    6c70:	7602      	strb	r2, [r0, #24]
    6c72:	2000      	movs	r0, #0
    6c74:	4770      	bx	lr
    6c76:	2310      	movs	r3, #16
    6c78:	7e02      	ldrb	r2, [r0, #24]
    6c7a:	4313      	orrs	r3, r2
    6c7c:	7603      	strb	r3, [r0, #24]
    6c7e:	e7f8      	b.n	6c72 <tc_register_callback+0x1a>
    6c80:	2320      	movs	r3, #32
    6c82:	7e02      	ldrb	r2, [r0, #24]
    6c84:	4313      	orrs	r3, r2
    6c86:	7603      	strb	r3, [r0, #24]
    6c88:	e7f3      	b.n	6c72 <tc_register_callback+0x1a>
    6c8a:	46c0      	nop			; (mov r8, r8)

00006c8c <_tc_interrupt_handler>:
    6c8c:	b570      	push	{r4, r5, r6, lr}
    6c8e:	2601      	movs	r6, #1
    6c90:	4b15      	ldr	r3, [pc, #84]	; (6ce8 <_tc_interrupt_handler+0x5c>)
    6c92:	0080      	lsls	r0, r0, #2
    6c94:	58c5      	ldr	r5, [r0, r3]
    6c96:	682b      	ldr	r3, [r5, #0]
    6c98:	7e2c      	ldrb	r4, [r5, #24]
    6c9a:	7b9b      	ldrb	r3, [r3, #14]
    6c9c:	401c      	ands	r4, r3
    6c9e:	7e6b      	ldrb	r3, [r5, #25]
    6ca0:	401c      	ands	r4, r3
    6ca2:	4226      	tst	r6, r4
    6ca4:	d11a      	bne.n	6cdc <_tc_interrupt_handler+0x50>
    6ca6:	2602      	movs	r6, #2
    6ca8:	4226      	tst	r6, r4
    6caa:	d111      	bne.n	6cd0 <_tc_interrupt_handler+0x44>
    6cac:	2610      	movs	r6, #16
    6cae:	4226      	tst	r6, r4
    6cb0:	d108      	bne.n	6cc4 <_tc_interrupt_handler+0x38>
    6cb2:	2620      	movs	r6, #32
    6cb4:	4226      	tst	r6, r4
    6cb6:	d004      	beq.n	6cc2 <_tc_interrupt_handler+0x36>
    6cb8:	696b      	ldr	r3, [r5, #20]
    6cba:	1c28      	adds	r0, r5, #0
    6cbc:	4798      	blx	r3
    6cbe:	682b      	ldr	r3, [r5, #0]
    6cc0:	739e      	strb	r6, [r3, #14]
    6cc2:	bd70      	pop	{r4, r5, r6, pc}
    6cc4:	692b      	ldr	r3, [r5, #16]
    6cc6:	1c28      	adds	r0, r5, #0
    6cc8:	4798      	blx	r3
    6cca:	682b      	ldr	r3, [r5, #0]
    6ccc:	739e      	strb	r6, [r3, #14]
    6cce:	e7f0      	b.n	6cb2 <_tc_interrupt_handler+0x26>
    6cd0:	68eb      	ldr	r3, [r5, #12]
    6cd2:	1c28      	adds	r0, r5, #0
    6cd4:	4798      	blx	r3
    6cd6:	682b      	ldr	r3, [r5, #0]
    6cd8:	739e      	strb	r6, [r3, #14]
    6cda:	e7e7      	b.n	6cac <_tc_interrupt_handler+0x20>
    6cdc:	68ab      	ldr	r3, [r5, #8]
    6cde:	1c28      	adds	r0, r5, #0
    6ce0:	4798      	blx	r3
    6ce2:	682b      	ldr	r3, [r5, #0]
    6ce4:	739e      	strb	r6, [r3, #14]
    6ce6:	e7de      	b.n	6ca6 <_tc_interrupt_handler+0x1a>
    6ce8:	2000450c 	.word	0x2000450c

00006cec <TC3_Handler>:
    6cec:	b508      	push	{r3, lr}
    6cee:	2000      	movs	r0, #0
    6cf0:	f7ff ffcc 	bl	6c8c <_tc_interrupt_handler>
    6cf4:	bd08      	pop	{r3, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)

00006cf8 <TC4_Handler>:
    6cf8:	b508      	push	{r3, lr}
    6cfa:	2001      	movs	r0, #1
    6cfc:	f7ff ffc6 	bl	6c8c <_tc_interrupt_handler>
    6d00:	bd08      	pop	{r3, pc}
    6d02:	46c0      	nop			; (mov r8, r8)

00006d04 <TC5_Handler>:
    6d04:	b508      	push	{r3, lr}
    6d06:	2002      	movs	r0, #2
    6d08:	f7ff ffc0 	bl	6c8c <_tc_interrupt_handler>
    6d0c:	bd08      	pop	{r3, pc}
    6d0e:	46c0      	nop			; (mov r8, r8)

00006d10 <_tc_get_inst_index>:
    6d10:	4b0e      	ldr	r3, [pc, #56]	; (6d4c <_tc_get_inst_index+0x3c>)
    6d12:	1c01      	adds	r1, r0, #0
    6d14:	1c18      	adds	r0, r3, #0
    6d16:	b570      	push	{r4, r5, r6, lr}
    6d18:	b084      	sub	sp, #16
    6d1a:	aa01      	add	r2, sp, #4
    6d1c:	c870      	ldmia	r0!, {r4, r5, r6}
    6d1e:	c270      	stmia	r2!, {r4, r5, r6}
    6d20:	9a01      	ldr	r2, [sp, #4]
    6d22:	428a      	cmp	r2, r1
    6d24:	d008      	beq.n	6d38 <_tc_get_inst_index+0x28>
    6d26:	685a      	ldr	r2, [r3, #4]
    6d28:	428a      	cmp	r2, r1
    6d2a:	d008      	beq.n	6d3e <_tc_get_inst_index+0x2e>
    6d2c:	689b      	ldr	r3, [r3, #8]
    6d2e:	2000      	movs	r0, #0
    6d30:	428b      	cmp	r3, r1
    6d32:	d007      	beq.n	6d44 <_tc_get_inst_index+0x34>
    6d34:	b004      	add	sp, #16
    6d36:	bd70      	pop	{r4, r5, r6, pc}
    6d38:	2000      	movs	r0, #0
    6d3a:	b2c0      	uxtb	r0, r0
    6d3c:	e7fa      	b.n	6d34 <_tc_get_inst_index+0x24>
    6d3e:	2001      	movs	r0, #1
    6d40:	b2c0      	uxtb	r0, r0
    6d42:	e7f7      	b.n	6d34 <_tc_get_inst_index+0x24>
    6d44:	3002      	adds	r0, #2
    6d46:	b2c0      	uxtb	r0, r0
    6d48:	e7f4      	b.n	6d34 <_tc_get_inst_index+0x24>
    6d4a:	46c0      	nop			; (mov r8, r8)
    6d4c:	000107e8 	.word	0x000107e8

00006d50 <tc_init>:
    6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d52:	4657      	mov	r7, sl
    6d54:	464e      	mov	r6, r9
    6d56:	4645      	mov	r5, r8
    6d58:	4ca3      	ldr	r4, [pc, #652]	; (6fe8 <tc_init+0x298>)
    6d5a:	4691      	mov	r9, r2
    6d5c:	1c22      	adds	r2, r4, #0
    6d5e:	b4e0      	push	{r5, r6, r7}
    6d60:	b086      	sub	sp, #24
    6d62:	ab03      	add	r3, sp, #12
    6d64:	1c05      	adds	r5, r0, #0
    6d66:	1c0e      	adds	r6, r1, #0
    6d68:	469a      	mov	sl, r3
    6d6a:	ca83      	ldmia	r2!, {r0, r1, r7}
    6d6c:	c383      	stmia	r3!, {r0, r1, r7}
    6d6e:	9b03      	ldr	r3, [sp, #12]
    6d70:	429e      	cmp	r6, r3
    6d72:	d100      	bne.n	6d76 <tc_init+0x26>
    6d74:	e10c      	b.n	6f90 <tc_init+0x240>
    6d76:	6863      	ldr	r3, [r4, #4]
    6d78:	429e      	cmp	r6, r3
    6d7a:	d100      	bne.n	6d7e <tc_init+0x2e>
    6d7c:	e10b      	b.n	6f96 <tc_init+0x246>
    6d7e:	2300      	movs	r3, #0
    6d80:	4698      	mov	r8, r3
    6d82:	68a3      	ldr	r3, [r4, #8]
    6d84:	429e      	cmp	r6, r3
    6d86:	d100      	bne.n	6d8a <tc_init+0x3a>
    6d88:	e108      	b.n	6f9c <tc_init+0x24c>
    6d8a:	1c21      	adds	r1, r4, #0
    6d8c:	2203      	movs	r2, #3
    6d8e:	310c      	adds	r1, #12
    6d90:	a801      	add	r0, sp, #4
    6d92:	f003 fe24 	bl	a9de <memcpy>
    6d96:	1c21      	adds	r1, r4, #0
    6d98:	2206      	movs	r2, #6
    6d9a:	3110      	adds	r1, #16
    6d9c:	4650      	mov	r0, sl
    6d9e:	f003 fe1e 	bl	a9de <memcpy>
    6da2:	2300      	movs	r3, #0
    6da4:	60ab      	str	r3, [r5, #8]
    6da6:	60eb      	str	r3, [r5, #12]
    6da8:	612b      	str	r3, [r5, #16]
    6daa:	616b      	str	r3, [r5, #20]
    6dac:	762b      	strb	r3, [r5, #24]
    6dae:	766b      	strb	r3, [r5, #25]
    6db0:	4643      	mov	r3, r8
    6db2:	4a8e      	ldr	r2, [pc, #568]	; (6fec <tc_init+0x29c>)
    6db4:	009b      	lsls	r3, r3, #2
    6db6:	509d      	str	r5, [r3, r2]
    6db8:	464b      	mov	r3, r9
    6dba:	602e      	str	r6, [r5, #0]
    6dbc:	789b      	ldrb	r3, [r3, #2]
    6dbe:	2b08      	cmp	r3, #8
    6dc0:	d00b      	beq.n	6dda <tc_init+0x8a>
    6dc2:	712b      	strb	r3, [r5, #4]
    6dc4:	8833      	ldrh	r3, [r6, #0]
    6dc6:	2201      	movs	r2, #1
    6dc8:	2005      	movs	r0, #5
    6dca:	07db      	lsls	r3, r3, #31
    6dcc:	d50a      	bpl.n	6de4 <tc_init+0x94>
    6dce:	b006      	add	sp, #24
    6dd0:	bc1c      	pop	{r2, r3, r4}
    6dd2:	4690      	mov	r8, r2
    6dd4:	4699      	mov	r9, r3
    6dd6:	46a2      	mov	sl, r4
    6dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6dda:	4642      	mov	r2, r8
    6ddc:	2017      	movs	r0, #23
    6dde:	07d2      	lsls	r2, r2, #31
    6de0:	d5f5      	bpl.n	6dce <tc_init+0x7e>
    6de2:	e7ee      	b.n	6dc2 <tc_init+0x72>
    6de4:	7bf3      	ldrb	r3, [r6, #15]
    6de6:	3017      	adds	r0, #23
    6de8:	06db      	lsls	r3, r3, #27
    6dea:	d4f0      	bmi.n	6dce <tc_init+0x7e>
    6dec:	2102      	movs	r1, #2
    6dee:	8833      	ldrh	r3, [r6, #0]
    6df0:	400b      	ands	r3, r1
    6df2:	d1ec      	bne.n	6dce <tc_init+0x7e>
    6df4:	4649      	mov	r1, r9
    6df6:	7c09      	ldrb	r1, [r1, #16]
    6df8:	2900      	cmp	r1, #0
    6dfa:	d000      	beq.n	6dfe <tc_init+0xae>
    6dfc:	e0d1      	b.n	6fa2 <tc_init+0x252>
    6dfe:	464b      	mov	r3, r9
    6e00:	7f1b      	ldrb	r3, [r3, #28]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d000      	beq.n	6e08 <tc_init+0xb8>
    6e06:	e0d8      	b.n	6fba <tc_init+0x26a>
    6e08:	4641      	mov	r1, r8
    6e0a:	4650      	mov	r0, sl
    6e0c:	4a78      	ldr	r2, [pc, #480]	; (6ff0 <tc_init+0x2a0>)
    6e0e:	0049      	lsls	r1, r1, #1
    6e10:	6a13      	ldr	r3, [r2, #32]
    6e12:	5a41      	ldrh	r1, [r0, r1]
    6e14:	430b      	orrs	r3, r1
    6e16:	6213      	str	r3, [r2, #32]
    6e18:	464b      	mov	r3, r9
    6e1a:	789b      	ldrb	r3, [r3, #2]
    6e1c:	2b08      	cmp	r3, #8
    6e1e:	d100      	bne.n	6e22 <tc_init+0xd2>
    6e20:	e0da      	b.n	6fd8 <tc_init+0x288>
    6e22:	464b      	mov	r3, r9
    6e24:	466a      	mov	r2, sp
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	4669      	mov	r1, sp
    6e2a:	7013      	strb	r3, [r2, #0]
    6e2c:	466b      	mov	r3, sp
    6e2e:	4642      	mov	r2, r8
    6e30:	3304      	adds	r3, #4
    6e32:	5c9c      	ldrb	r4, [r3, r2]
    6e34:	1c20      	adds	r0, r4, #0
    6e36:	f7fd fe97 	bl	4b68 <system_gclk_chan_set_config>
    6e3a:	1c20      	adds	r0, r4, #0
    6e3c:	f7fd fe56 	bl	4aec <system_gclk_chan_enable>
    6e40:	464b      	mov	r3, r9
    6e42:	464a      	mov	r2, r9
    6e44:	8898      	ldrh	r0, [r3, #4]
    6e46:	891b      	ldrh	r3, [r3, #8]
    6e48:	4303      	orrs	r3, r0
    6e4a:	7990      	ldrb	r0, [r2, #6]
    6e4c:	7892      	ldrb	r2, [r2, #2]
    6e4e:	4310      	orrs	r0, r2
    6e50:	4318      	orrs	r0, r3
    6e52:	464b      	mov	r3, r9
    6e54:	785b      	ldrb	r3, [r3, #1]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d002      	beq.n	6e60 <tc_init+0x110>
    6e5a:	2380      	movs	r3, #128	; 0x80
    6e5c:	011b      	lsls	r3, r3, #4
    6e5e:	4318      	orrs	r0, r3
    6e60:	227f      	movs	r2, #127	; 0x7f
    6e62:	6829      	ldr	r1, [r5, #0]
    6e64:	7bcb      	ldrb	r3, [r1, #15]
    6e66:	4393      	bics	r3, r2
    6e68:	d1fc      	bne.n	6e64 <tc_init+0x114>
    6e6a:	464b      	mov	r3, r9
    6e6c:	8030      	strh	r0, [r6, #0]
    6e6e:	7b58      	ldrb	r0, [r3, #13]
    6e70:	1e43      	subs	r3, r0, #1
    6e72:	4198      	sbcs	r0, r3
    6e74:	464b      	mov	r3, r9
    6e76:	7b9b      	ldrb	r3, [r3, #14]
    6e78:	0080      	lsls	r0, r0, #2
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d001      	beq.n	6e82 <tc_init+0x132>
    6e7e:	2301      	movs	r3, #1
    6e80:	4318      	orrs	r0, r3
    6e82:	227f      	movs	r2, #127	; 0x7f
    6e84:	6829      	ldr	r1, [r5, #0]
    6e86:	7bcb      	ldrb	r3, [r1, #15]
    6e88:	4393      	bics	r3, r2
    6e8a:	d1fc      	bne.n	6e86 <tc_init+0x136>
    6e8c:	33ff      	adds	r3, #255	; 0xff
    6e8e:	7133      	strb	r3, [r6, #4]
    6e90:	2800      	cmp	r0, #0
    6e92:	d005      	beq.n	6ea0 <tc_init+0x150>
    6e94:	227f      	movs	r2, #127	; 0x7f
    6e96:	6829      	ldr	r1, [r5, #0]
    6e98:	7bcb      	ldrb	r3, [r1, #15]
    6e9a:	4393      	bics	r3, r2
    6e9c:	d1fc      	bne.n	6e98 <tc_init+0x148>
    6e9e:	7170      	strb	r0, [r6, #5]
    6ea0:	464b      	mov	r3, r9
    6ea2:	7a98      	ldrb	r0, [r3, #10]
    6ea4:	7adb      	ldrb	r3, [r3, #11]
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d001      	beq.n	6eae <tc_init+0x15e>
    6eaa:	2310      	movs	r3, #16
    6eac:	4318      	orrs	r0, r3
    6eae:	464b      	mov	r3, r9
    6eb0:	7b1b      	ldrb	r3, [r3, #12]
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	d001      	beq.n	6eba <tc_init+0x16a>
    6eb6:	2320      	movs	r3, #32
    6eb8:	4318      	orrs	r0, r3
    6eba:	227f      	movs	r2, #127	; 0x7f
    6ebc:	6829      	ldr	r1, [r5, #0]
    6ebe:	7bcb      	ldrb	r3, [r1, #15]
    6ec0:	4393      	bics	r3, r2
    6ec2:	d1fc      	bne.n	6ebe <tc_init+0x16e>
    6ec4:	217f      	movs	r1, #127	; 0x7f
    6ec6:	71b0      	strb	r0, [r6, #6]
    6ec8:	682a      	ldr	r2, [r5, #0]
    6eca:	7bd3      	ldrb	r3, [r2, #15]
    6ecc:	438b      	bics	r3, r1
    6ece:	d1fc      	bne.n	6eca <tc_init+0x17a>
    6ed0:	792b      	ldrb	r3, [r5, #4]
    6ed2:	217f      	movs	r1, #127	; 0x7f
    6ed4:	2b04      	cmp	r3, #4
    6ed6:	d007      	beq.n	6ee8 <tc_init+0x198>
    6ed8:	217f      	movs	r1, #127	; 0x7f
    6eda:	2b08      	cmp	r3, #8
    6edc:	d040      	beq.n	6f60 <tc_init+0x210>
    6ede:	217f      	movs	r1, #127	; 0x7f
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d025      	beq.n	6f30 <tc_init+0x1e0>
    6ee4:	2017      	movs	r0, #23
    6ee6:	e772      	b.n	6dce <tc_init+0x7e>
    6ee8:	7bd3      	ldrb	r3, [r2, #15]
    6eea:	438b      	bics	r3, r1
    6eec:	d1fc      	bne.n	6ee8 <tc_init+0x198>
    6eee:	464a      	mov	r2, r9
    6ef0:	3328      	adds	r3, #40	; 0x28
    6ef2:	5cd3      	ldrb	r3, [r2, r3]
    6ef4:	227f      	movs	r2, #127	; 0x7f
    6ef6:	7433      	strb	r3, [r6, #16]
    6ef8:	6829      	ldr	r1, [r5, #0]
    6efa:	7bcb      	ldrb	r3, [r1, #15]
    6efc:	4393      	bics	r3, r2
    6efe:	d1fc      	bne.n	6efa <tc_init+0x1aa>
    6f00:	464a      	mov	r2, r9
    6f02:	3329      	adds	r3, #41	; 0x29
    6f04:	5cd3      	ldrb	r3, [r2, r3]
    6f06:	227f      	movs	r2, #127	; 0x7f
    6f08:	7533      	strb	r3, [r6, #20]
    6f0a:	6829      	ldr	r1, [r5, #0]
    6f0c:	7bcb      	ldrb	r3, [r1, #15]
    6f0e:	4393      	bics	r3, r2
    6f10:	d1fc      	bne.n	6f0c <tc_init+0x1bc>
    6f12:	464a      	mov	r2, r9
    6f14:	332a      	adds	r3, #42	; 0x2a
    6f16:	5cd3      	ldrb	r3, [r2, r3]
    6f18:	227f      	movs	r2, #127	; 0x7f
    6f1a:	7633      	strb	r3, [r6, #24]
    6f1c:	6829      	ldr	r1, [r5, #0]
    6f1e:	7bcb      	ldrb	r3, [r1, #15]
    6f20:	4393      	bics	r3, r2
    6f22:	d1fc      	bne.n	6f1e <tc_init+0x1ce>
    6f24:	464a      	mov	r2, r9
    6f26:	332b      	adds	r3, #43	; 0x2b
    6f28:	5cd3      	ldrb	r3, [r2, r3]
    6f2a:	2000      	movs	r0, #0
    6f2c:	7673      	strb	r3, [r6, #25]
    6f2e:	e74e      	b.n	6dce <tc_init+0x7e>
    6f30:	7bd3      	ldrb	r3, [r2, #15]
    6f32:	438b      	bics	r3, r1
    6f34:	d1fc      	bne.n	6f30 <tc_init+0x1e0>
    6f36:	464b      	mov	r3, r9
    6f38:	227f      	movs	r2, #127	; 0x7f
    6f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6f3c:	8233      	strh	r3, [r6, #16]
    6f3e:	6829      	ldr	r1, [r5, #0]
    6f40:	7bcb      	ldrb	r3, [r1, #15]
    6f42:	4393      	bics	r3, r2
    6f44:	d1fc      	bne.n	6f40 <tc_init+0x1f0>
    6f46:	464b      	mov	r3, r9
    6f48:	227f      	movs	r2, #127	; 0x7f
    6f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    6f4c:	8333      	strh	r3, [r6, #24]
    6f4e:	6829      	ldr	r1, [r5, #0]
    6f50:	7bcb      	ldrb	r3, [r1, #15]
    6f52:	4393      	bics	r3, r2
    6f54:	d1fc      	bne.n	6f50 <tc_init+0x200>
    6f56:	464b      	mov	r3, r9
    6f58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6f5a:	2000      	movs	r0, #0
    6f5c:	8373      	strh	r3, [r6, #26]
    6f5e:	e736      	b.n	6dce <tc_init+0x7e>
    6f60:	7bd3      	ldrb	r3, [r2, #15]
    6f62:	438b      	bics	r3, r1
    6f64:	d1fc      	bne.n	6f60 <tc_init+0x210>
    6f66:	464b      	mov	r3, r9
    6f68:	227f      	movs	r2, #127	; 0x7f
    6f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f6c:	6133      	str	r3, [r6, #16]
    6f6e:	6829      	ldr	r1, [r5, #0]
    6f70:	7bcb      	ldrb	r3, [r1, #15]
    6f72:	4393      	bics	r3, r2
    6f74:	d1fc      	bne.n	6f70 <tc_init+0x220>
    6f76:	464b      	mov	r3, r9
    6f78:	227f      	movs	r2, #127	; 0x7f
    6f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f7c:	61b3      	str	r3, [r6, #24]
    6f7e:	6829      	ldr	r1, [r5, #0]
    6f80:	7bcb      	ldrb	r3, [r1, #15]
    6f82:	4393      	bics	r3, r2
    6f84:	d1fc      	bne.n	6f80 <tc_init+0x230>
    6f86:	464b      	mov	r3, r9
    6f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6f8a:	2000      	movs	r0, #0
    6f8c:	61f3      	str	r3, [r6, #28]
    6f8e:	e71e      	b.n	6dce <tc_init+0x7e>
    6f90:	2300      	movs	r3, #0
    6f92:	4698      	mov	r8, r3
    6f94:	e6f9      	b.n	6d8a <tc_init+0x3a>
    6f96:	2301      	movs	r3, #1
    6f98:	4698      	mov	r8, r3
    6f9a:	e6f6      	b.n	6d8a <tc_init+0x3a>
    6f9c:	2302      	movs	r3, #2
    6f9e:	4698      	mov	r8, r3
    6fa0:	e6f3      	b.n	6d8a <tc_init+0x3a>
    6fa2:	a902      	add	r1, sp, #8
    6fa4:	70cb      	strb	r3, [r1, #3]
    6fa6:	464b      	mov	r3, r9
    6fa8:	7e1b      	ldrb	r3, [r3, #24]
    6faa:	708a      	strb	r2, [r1, #2]
    6fac:	700b      	strb	r3, [r1, #0]
    6fae:	464b      	mov	r3, r9
    6fb0:	7d18      	ldrb	r0, [r3, #20]
    6fb2:	704a      	strb	r2, [r1, #1]
    6fb4:	f7fd fcce 	bl	4954 <system_pinmux_pin_set_config>
    6fb8:	e721      	b.n	6dfe <tc_init+0xae>
    6fba:	2301      	movs	r3, #1
    6fbc:	2200      	movs	r2, #0
    6fbe:	a902      	add	r1, sp, #8
    6fc0:	708b      	strb	r3, [r1, #2]
    6fc2:	704b      	strb	r3, [r1, #1]
    6fc4:	464b      	mov	r3, r9
    6fc6:	70ca      	strb	r2, [r1, #3]
    6fc8:	464a      	mov	r2, r9
    6fca:	6a1b      	ldr	r3, [r3, #32]
    6fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6fce:	b2d8      	uxtb	r0, r3
    6fd0:	700a      	strb	r2, [r1, #0]
    6fd2:	f7fd fcbf 	bl	4954 <system_pinmux_pin_set_config>
    6fd6:	e717      	b.n	6e08 <tc_init+0xb8>
    6fd8:	4641      	mov	r1, r8
    6fda:	3101      	adds	r1, #1
    6fdc:	0049      	lsls	r1, r1, #1
    6fde:	6a13      	ldr	r3, [r2, #32]
    6fe0:	5a41      	ldrh	r1, [r0, r1]
    6fe2:	430b      	orrs	r3, r1
    6fe4:	6213      	str	r3, [r2, #32]
    6fe6:	e71c      	b.n	6e22 <tc_init+0xd2>
    6fe8:	000107e8 	.word	0x000107e8
    6fec:	2000450c 	.word	0x2000450c
    6ff0:	40000400 	.word	0x40000400

00006ff4 <tc_get_count_value>:
    6ff4:	217f      	movs	r1, #127	; 0x7f
    6ff6:	6802      	ldr	r2, [r0, #0]
    6ff8:	7bd3      	ldrb	r3, [r2, #15]
    6ffa:	438b      	bics	r3, r1
    6ffc:	d1fc      	bne.n	6ff8 <tc_get_count_value+0x4>
    6ffe:	7903      	ldrb	r3, [r0, #4]
    7000:	2b04      	cmp	r3, #4
    7002:	d00a      	beq.n	701a <tc_get_count_value+0x26>
    7004:	2b08      	cmp	r3, #8
    7006:	d006      	beq.n	7016 <tc_get_count_value+0x22>
    7008:	2000      	movs	r0, #0
    700a:	2b00      	cmp	r3, #0
    700c:	d000      	beq.n	7010 <tc_get_count_value+0x1c>
    700e:	4770      	bx	lr
    7010:	8a10      	ldrh	r0, [r2, #16]
    7012:	b280      	uxth	r0, r0
    7014:	e7fb      	b.n	700e <tc_get_count_value+0x1a>
    7016:	6910      	ldr	r0, [r2, #16]
    7018:	e7f9      	b.n	700e <tc_get_count_value+0x1a>
    701a:	7c10      	ldrb	r0, [r2, #16]
    701c:	b2c0      	uxtb	r0, r0
    701e:	e7f6      	b.n	700e <tc_get_count_value+0x1a>

00007020 <tc_set_compare_value>:
    7020:	b530      	push	{r4, r5, lr}
    7022:	257f      	movs	r5, #127	; 0x7f
    7024:	6804      	ldr	r4, [r0, #0]
    7026:	7be3      	ldrb	r3, [r4, #15]
    7028:	43ab      	bics	r3, r5
    702a:	d1fc      	bne.n	7026 <tc_set_compare_value+0x6>
    702c:	7903      	ldrb	r3, [r0, #4]
    702e:	2b04      	cmp	r3, #4
    7030:	d016      	beq.n	7060 <tc_set_compare_value+0x40>
    7032:	2b08      	cmp	r3, #8
    7034:	d00c      	beq.n	7050 <tc_set_compare_value+0x30>
    7036:	2017      	movs	r0, #23
    7038:	2b00      	cmp	r3, #0
    703a:	d000      	beq.n	703e <tc_set_compare_value+0x1e>
    703c:	bd30      	pop	{r4, r5, pc}
    703e:	2017      	movs	r0, #23
    7040:	2901      	cmp	r1, #1
    7042:	d8fb      	bhi.n	703c <tc_set_compare_value+0x1c>
    7044:	310c      	adds	r1, #12
    7046:	b292      	uxth	r2, r2
    7048:	0049      	lsls	r1, r1, #1
    704a:	530a      	strh	r2, [r1, r4]
    704c:	2000      	movs	r0, #0
    704e:	e7f5      	b.n	703c <tc_set_compare_value+0x1c>
    7050:	2017      	movs	r0, #23
    7052:	2901      	cmp	r1, #1
    7054:	d8f2      	bhi.n	703c <tc_set_compare_value+0x1c>
    7056:	3106      	adds	r1, #6
    7058:	0089      	lsls	r1, r1, #2
    705a:	510a      	str	r2, [r1, r4]
    705c:	2000      	movs	r0, #0
    705e:	e7ed      	b.n	703c <tc_set_compare_value+0x1c>
    7060:	2017      	movs	r0, #23
    7062:	2901      	cmp	r1, #1
    7064:	d8ea      	bhi.n	703c <tc_set_compare_value+0x1c>
    7066:	b2d2      	uxtb	r2, r2
    7068:	1861      	adds	r1, r4, r1
    706a:	760a      	strb	r2, [r1, #24]
    706c:	2000      	movs	r0, #0
    706e:	e7e5      	b.n	703c <tc_set_compare_value+0x1c>

00007070 <ticker_irq_handler>:
    7070:	b538      	push	{r3, r4, r5, lr}
    7072:	6803      	ldr	r3, [r0, #0]
    7074:	1c05      	adds	r5, r0, #0
    7076:	68db      	ldr	r3, [r3, #12]
    7078:	4798      	blx	r3
    707a:	686b      	ldr	r3, [r5, #4]
    707c:	685b      	ldr	r3, [r3, #4]
    707e:	e00d      	b.n	709c <ticker_irq_handler+0x2c>
    7080:	681c      	ldr	r4, [r3, #0]
    7082:	682b      	ldr	r3, [r5, #0]
    7084:	685b      	ldr	r3, [r3, #4]
    7086:	4798      	blx	r3
    7088:	1a24      	subs	r4, r4, r0
    708a:	2c00      	cmp	r4, #0
    708c:	dc0c      	bgt.n	70a8 <ticker_irq_handler+0x38>
    708e:	686a      	ldr	r2, [r5, #4]
    7090:	6851      	ldr	r1, [r2, #4]
    7092:	688b      	ldr	r3, [r1, #8]
    7094:	6053      	str	r3, [r2, #4]
    7096:	6812      	ldr	r2, [r2, #0]
    7098:	2a00      	cmp	r2, #0
    709a:	d10c      	bne.n	70b6 <ticker_irq_handler+0x46>
    709c:	2b00      	cmp	r3, #0
    709e:	d1ef      	bne.n	7080 <ticker_irq_handler+0x10>
    70a0:	682b      	ldr	r3, [r5, #0]
    70a2:	689b      	ldr	r3, [r3, #8]
    70a4:	4798      	blx	r3
    70a6:	bd38      	pop	{r3, r4, r5, pc}
    70a8:	686a      	ldr	r2, [r5, #4]
    70aa:	682b      	ldr	r3, [r5, #0]
    70ac:	6852      	ldr	r2, [r2, #4]
    70ae:	691b      	ldr	r3, [r3, #16]
    70b0:	6810      	ldr	r0, [r2, #0]
    70b2:	4798      	blx	r3
    70b4:	e7f7      	b.n	70a6 <ticker_irq_handler+0x36>
    70b6:	6848      	ldr	r0, [r1, #4]
    70b8:	4790      	blx	r2
    70ba:	e7de      	b.n	707a <ticker_irq_handler+0xa>

000070bc <__aeabi_atexit>:
    70bc:	b508      	push	{r3, lr}
    70be:	1c03      	adds	r3, r0, #0
    70c0:	1c08      	adds	r0, r1, #0
    70c2:	1c19      	adds	r1, r3, #0
    70c4:	f003 f856 	bl	a174 <__cxa_atexit>
    70c8:	bd08      	pop	{r3, pc}

000070ca <_ZdlPv>:
    70ca:	b508      	push	{r3, lr}
    70cc:	f003 fc72 	bl	a9b4 <free>
    70d0:	bd08      	pop	{r3, pc}

000070d2 <_Znwj>:
    70d2:	b510      	push	{r4, lr}
    70d4:	1e04      	subs	r4, r0, #0
    70d6:	d102      	bne.n	70de <_Znwj+0xc>
    70d8:	3401      	adds	r4, #1
    70da:	e000      	b.n	70de <_Znwj+0xc>
    70dc:	4780      	blx	r0
    70de:	1c20      	adds	r0, r4, #0
    70e0:	f003 fc5e 	bl	a9a0 <malloc>
    70e4:	2800      	cmp	r0, #0
    70e6:	d105      	bne.n	70f4 <_Znwj+0x22>
    70e8:	f000 f806 	bl	70f8 <_ZSt15get_new_handlerv>
    70ec:	2800      	cmp	r0, #0
    70ee:	d1f5      	bne.n	70dc <_Znwj+0xa>
    70f0:	f003 f838 	bl	a164 <abort>
    70f4:	bd10      	pop	{r4, pc}
	...

000070f8 <_ZSt15get_new_handlerv>:
    70f8:	4b01      	ldr	r3, [pc, #4]	; (7100 <_ZSt15get_new_handlerv+0x8>)
    70fa:	6818      	ldr	r0, [r3, #0]
    70fc:	4770      	bx	lr
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	20004458 	.word	0x20004458

00007104 <__aeabi_uidiv>:
    7104:	2200      	movs	r2, #0
    7106:	0843      	lsrs	r3, r0, #1
    7108:	428b      	cmp	r3, r1
    710a:	d374      	bcc.n	71f6 <__aeabi_uidiv+0xf2>
    710c:	0903      	lsrs	r3, r0, #4
    710e:	428b      	cmp	r3, r1
    7110:	d35f      	bcc.n	71d2 <__aeabi_uidiv+0xce>
    7112:	0a03      	lsrs	r3, r0, #8
    7114:	428b      	cmp	r3, r1
    7116:	d344      	bcc.n	71a2 <__aeabi_uidiv+0x9e>
    7118:	0b03      	lsrs	r3, r0, #12
    711a:	428b      	cmp	r3, r1
    711c:	d328      	bcc.n	7170 <__aeabi_uidiv+0x6c>
    711e:	0c03      	lsrs	r3, r0, #16
    7120:	428b      	cmp	r3, r1
    7122:	d30d      	bcc.n	7140 <__aeabi_uidiv+0x3c>
    7124:	22ff      	movs	r2, #255	; 0xff
    7126:	0209      	lsls	r1, r1, #8
    7128:	ba12      	rev	r2, r2
    712a:	0c03      	lsrs	r3, r0, #16
    712c:	428b      	cmp	r3, r1
    712e:	d302      	bcc.n	7136 <__aeabi_uidiv+0x32>
    7130:	1212      	asrs	r2, r2, #8
    7132:	0209      	lsls	r1, r1, #8
    7134:	d065      	beq.n	7202 <__aeabi_uidiv+0xfe>
    7136:	0b03      	lsrs	r3, r0, #12
    7138:	428b      	cmp	r3, r1
    713a:	d319      	bcc.n	7170 <__aeabi_uidiv+0x6c>
    713c:	e000      	b.n	7140 <__aeabi_uidiv+0x3c>
    713e:	0a09      	lsrs	r1, r1, #8
    7140:	0bc3      	lsrs	r3, r0, #15
    7142:	428b      	cmp	r3, r1
    7144:	d301      	bcc.n	714a <__aeabi_uidiv+0x46>
    7146:	03cb      	lsls	r3, r1, #15
    7148:	1ac0      	subs	r0, r0, r3
    714a:	4152      	adcs	r2, r2
    714c:	0b83      	lsrs	r3, r0, #14
    714e:	428b      	cmp	r3, r1
    7150:	d301      	bcc.n	7156 <__aeabi_uidiv+0x52>
    7152:	038b      	lsls	r3, r1, #14
    7154:	1ac0      	subs	r0, r0, r3
    7156:	4152      	adcs	r2, r2
    7158:	0b43      	lsrs	r3, r0, #13
    715a:	428b      	cmp	r3, r1
    715c:	d301      	bcc.n	7162 <__aeabi_uidiv+0x5e>
    715e:	034b      	lsls	r3, r1, #13
    7160:	1ac0      	subs	r0, r0, r3
    7162:	4152      	adcs	r2, r2
    7164:	0b03      	lsrs	r3, r0, #12
    7166:	428b      	cmp	r3, r1
    7168:	d301      	bcc.n	716e <__aeabi_uidiv+0x6a>
    716a:	030b      	lsls	r3, r1, #12
    716c:	1ac0      	subs	r0, r0, r3
    716e:	4152      	adcs	r2, r2
    7170:	0ac3      	lsrs	r3, r0, #11
    7172:	428b      	cmp	r3, r1
    7174:	d301      	bcc.n	717a <__aeabi_uidiv+0x76>
    7176:	02cb      	lsls	r3, r1, #11
    7178:	1ac0      	subs	r0, r0, r3
    717a:	4152      	adcs	r2, r2
    717c:	0a83      	lsrs	r3, r0, #10
    717e:	428b      	cmp	r3, r1
    7180:	d301      	bcc.n	7186 <__aeabi_uidiv+0x82>
    7182:	028b      	lsls	r3, r1, #10
    7184:	1ac0      	subs	r0, r0, r3
    7186:	4152      	adcs	r2, r2
    7188:	0a43      	lsrs	r3, r0, #9
    718a:	428b      	cmp	r3, r1
    718c:	d301      	bcc.n	7192 <__aeabi_uidiv+0x8e>
    718e:	024b      	lsls	r3, r1, #9
    7190:	1ac0      	subs	r0, r0, r3
    7192:	4152      	adcs	r2, r2
    7194:	0a03      	lsrs	r3, r0, #8
    7196:	428b      	cmp	r3, r1
    7198:	d301      	bcc.n	719e <__aeabi_uidiv+0x9a>
    719a:	020b      	lsls	r3, r1, #8
    719c:	1ac0      	subs	r0, r0, r3
    719e:	4152      	adcs	r2, r2
    71a0:	d2cd      	bcs.n	713e <__aeabi_uidiv+0x3a>
    71a2:	09c3      	lsrs	r3, r0, #7
    71a4:	428b      	cmp	r3, r1
    71a6:	d301      	bcc.n	71ac <__aeabi_uidiv+0xa8>
    71a8:	01cb      	lsls	r3, r1, #7
    71aa:	1ac0      	subs	r0, r0, r3
    71ac:	4152      	adcs	r2, r2
    71ae:	0983      	lsrs	r3, r0, #6
    71b0:	428b      	cmp	r3, r1
    71b2:	d301      	bcc.n	71b8 <__aeabi_uidiv+0xb4>
    71b4:	018b      	lsls	r3, r1, #6
    71b6:	1ac0      	subs	r0, r0, r3
    71b8:	4152      	adcs	r2, r2
    71ba:	0943      	lsrs	r3, r0, #5
    71bc:	428b      	cmp	r3, r1
    71be:	d301      	bcc.n	71c4 <__aeabi_uidiv+0xc0>
    71c0:	014b      	lsls	r3, r1, #5
    71c2:	1ac0      	subs	r0, r0, r3
    71c4:	4152      	adcs	r2, r2
    71c6:	0903      	lsrs	r3, r0, #4
    71c8:	428b      	cmp	r3, r1
    71ca:	d301      	bcc.n	71d0 <__aeabi_uidiv+0xcc>
    71cc:	010b      	lsls	r3, r1, #4
    71ce:	1ac0      	subs	r0, r0, r3
    71d0:	4152      	adcs	r2, r2
    71d2:	08c3      	lsrs	r3, r0, #3
    71d4:	428b      	cmp	r3, r1
    71d6:	d301      	bcc.n	71dc <__aeabi_uidiv+0xd8>
    71d8:	00cb      	lsls	r3, r1, #3
    71da:	1ac0      	subs	r0, r0, r3
    71dc:	4152      	adcs	r2, r2
    71de:	0883      	lsrs	r3, r0, #2
    71e0:	428b      	cmp	r3, r1
    71e2:	d301      	bcc.n	71e8 <__aeabi_uidiv+0xe4>
    71e4:	008b      	lsls	r3, r1, #2
    71e6:	1ac0      	subs	r0, r0, r3
    71e8:	4152      	adcs	r2, r2
    71ea:	0843      	lsrs	r3, r0, #1
    71ec:	428b      	cmp	r3, r1
    71ee:	d301      	bcc.n	71f4 <__aeabi_uidiv+0xf0>
    71f0:	004b      	lsls	r3, r1, #1
    71f2:	1ac0      	subs	r0, r0, r3
    71f4:	4152      	adcs	r2, r2
    71f6:	1a41      	subs	r1, r0, r1
    71f8:	d200      	bcs.n	71fc <__aeabi_uidiv+0xf8>
    71fa:	4601      	mov	r1, r0
    71fc:	4152      	adcs	r2, r2
    71fe:	4610      	mov	r0, r2
    7200:	4770      	bx	lr
    7202:	e7ff      	b.n	7204 <__aeabi_uidiv+0x100>
    7204:	b501      	push	{r0, lr}
    7206:	2000      	movs	r0, #0
    7208:	f000 f8fc 	bl	7404 <__aeabi_idiv0>
    720c:	bd02      	pop	{r1, pc}
    720e:	46c0      	nop			; (mov r8, r8)

00007210 <__aeabi_uidivmod>:
    7210:	2900      	cmp	r1, #0
    7212:	d0f7      	beq.n	7204 <__aeabi_uidiv+0x100>
    7214:	b503      	push	{r0, r1, lr}
    7216:	f7ff ff75 	bl	7104 <__aeabi_uidiv>
    721a:	bc0e      	pop	{r1, r2, r3}
    721c:	4342      	muls	r2, r0
    721e:	1a89      	subs	r1, r1, r2
    7220:	4718      	bx	r3
    7222:	46c0      	nop			; (mov r8, r8)

00007224 <__aeabi_idiv>:
    7224:	4603      	mov	r3, r0
    7226:	430b      	orrs	r3, r1
    7228:	d47f      	bmi.n	732a <__aeabi_idiv+0x106>
    722a:	2200      	movs	r2, #0
    722c:	0843      	lsrs	r3, r0, #1
    722e:	428b      	cmp	r3, r1
    7230:	d374      	bcc.n	731c <__aeabi_idiv+0xf8>
    7232:	0903      	lsrs	r3, r0, #4
    7234:	428b      	cmp	r3, r1
    7236:	d35f      	bcc.n	72f8 <__aeabi_idiv+0xd4>
    7238:	0a03      	lsrs	r3, r0, #8
    723a:	428b      	cmp	r3, r1
    723c:	d344      	bcc.n	72c8 <__aeabi_idiv+0xa4>
    723e:	0b03      	lsrs	r3, r0, #12
    7240:	428b      	cmp	r3, r1
    7242:	d328      	bcc.n	7296 <__aeabi_idiv+0x72>
    7244:	0c03      	lsrs	r3, r0, #16
    7246:	428b      	cmp	r3, r1
    7248:	d30d      	bcc.n	7266 <__aeabi_idiv+0x42>
    724a:	22ff      	movs	r2, #255	; 0xff
    724c:	0209      	lsls	r1, r1, #8
    724e:	ba12      	rev	r2, r2
    7250:	0c03      	lsrs	r3, r0, #16
    7252:	428b      	cmp	r3, r1
    7254:	d302      	bcc.n	725c <__aeabi_idiv+0x38>
    7256:	1212      	asrs	r2, r2, #8
    7258:	0209      	lsls	r1, r1, #8
    725a:	d065      	beq.n	7328 <__aeabi_idiv+0x104>
    725c:	0b03      	lsrs	r3, r0, #12
    725e:	428b      	cmp	r3, r1
    7260:	d319      	bcc.n	7296 <__aeabi_idiv+0x72>
    7262:	e000      	b.n	7266 <__aeabi_idiv+0x42>
    7264:	0a09      	lsrs	r1, r1, #8
    7266:	0bc3      	lsrs	r3, r0, #15
    7268:	428b      	cmp	r3, r1
    726a:	d301      	bcc.n	7270 <__aeabi_idiv+0x4c>
    726c:	03cb      	lsls	r3, r1, #15
    726e:	1ac0      	subs	r0, r0, r3
    7270:	4152      	adcs	r2, r2
    7272:	0b83      	lsrs	r3, r0, #14
    7274:	428b      	cmp	r3, r1
    7276:	d301      	bcc.n	727c <__aeabi_idiv+0x58>
    7278:	038b      	lsls	r3, r1, #14
    727a:	1ac0      	subs	r0, r0, r3
    727c:	4152      	adcs	r2, r2
    727e:	0b43      	lsrs	r3, r0, #13
    7280:	428b      	cmp	r3, r1
    7282:	d301      	bcc.n	7288 <__aeabi_idiv+0x64>
    7284:	034b      	lsls	r3, r1, #13
    7286:	1ac0      	subs	r0, r0, r3
    7288:	4152      	adcs	r2, r2
    728a:	0b03      	lsrs	r3, r0, #12
    728c:	428b      	cmp	r3, r1
    728e:	d301      	bcc.n	7294 <__aeabi_idiv+0x70>
    7290:	030b      	lsls	r3, r1, #12
    7292:	1ac0      	subs	r0, r0, r3
    7294:	4152      	adcs	r2, r2
    7296:	0ac3      	lsrs	r3, r0, #11
    7298:	428b      	cmp	r3, r1
    729a:	d301      	bcc.n	72a0 <__aeabi_idiv+0x7c>
    729c:	02cb      	lsls	r3, r1, #11
    729e:	1ac0      	subs	r0, r0, r3
    72a0:	4152      	adcs	r2, r2
    72a2:	0a83      	lsrs	r3, r0, #10
    72a4:	428b      	cmp	r3, r1
    72a6:	d301      	bcc.n	72ac <__aeabi_idiv+0x88>
    72a8:	028b      	lsls	r3, r1, #10
    72aa:	1ac0      	subs	r0, r0, r3
    72ac:	4152      	adcs	r2, r2
    72ae:	0a43      	lsrs	r3, r0, #9
    72b0:	428b      	cmp	r3, r1
    72b2:	d301      	bcc.n	72b8 <__aeabi_idiv+0x94>
    72b4:	024b      	lsls	r3, r1, #9
    72b6:	1ac0      	subs	r0, r0, r3
    72b8:	4152      	adcs	r2, r2
    72ba:	0a03      	lsrs	r3, r0, #8
    72bc:	428b      	cmp	r3, r1
    72be:	d301      	bcc.n	72c4 <__aeabi_idiv+0xa0>
    72c0:	020b      	lsls	r3, r1, #8
    72c2:	1ac0      	subs	r0, r0, r3
    72c4:	4152      	adcs	r2, r2
    72c6:	d2cd      	bcs.n	7264 <__aeabi_idiv+0x40>
    72c8:	09c3      	lsrs	r3, r0, #7
    72ca:	428b      	cmp	r3, r1
    72cc:	d301      	bcc.n	72d2 <__aeabi_idiv+0xae>
    72ce:	01cb      	lsls	r3, r1, #7
    72d0:	1ac0      	subs	r0, r0, r3
    72d2:	4152      	adcs	r2, r2
    72d4:	0983      	lsrs	r3, r0, #6
    72d6:	428b      	cmp	r3, r1
    72d8:	d301      	bcc.n	72de <__aeabi_idiv+0xba>
    72da:	018b      	lsls	r3, r1, #6
    72dc:	1ac0      	subs	r0, r0, r3
    72de:	4152      	adcs	r2, r2
    72e0:	0943      	lsrs	r3, r0, #5
    72e2:	428b      	cmp	r3, r1
    72e4:	d301      	bcc.n	72ea <__aeabi_idiv+0xc6>
    72e6:	014b      	lsls	r3, r1, #5
    72e8:	1ac0      	subs	r0, r0, r3
    72ea:	4152      	adcs	r2, r2
    72ec:	0903      	lsrs	r3, r0, #4
    72ee:	428b      	cmp	r3, r1
    72f0:	d301      	bcc.n	72f6 <__aeabi_idiv+0xd2>
    72f2:	010b      	lsls	r3, r1, #4
    72f4:	1ac0      	subs	r0, r0, r3
    72f6:	4152      	adcs	r2, r2
    72f8:	08c3      	lsrs	r3, r0, #3
    72fa:	428b      	cmp	r3, r1
    72fc:	d301      	bcc.n	7302 <__aeabi_idiv+0xde>
    72fe:	00cb      	lsls	r3, r1, #3
    7300:	1ac0      	subs	r0, r0, r3
    7302:	4152      	adcs	r2, r2
    7304:	0883      	lsrs	r3, r0, #2
    7306:	428b      	cmp	r3, r1
    7308:	d301      	bcc.n	730e <__aeabi_idiv+0xea>
    730a:	008b      	lsls	r3, r1, #2
    730c:	1ac0      	subs	r0, r0, r3
    730e:	4152      	adcs	r2, r2
    7310:	0843      	lsrs	r3, r0, #1
    7312:	428b      	cmp	r3, r1
    7314:	d301      	bcc.n	731a <__aeabi_idiv+0xf6>
    7316:	004b      	lsls	r3, r1, #1
    7318:	1ac0      	subs	r0, r0, r3
    731a:	4152      	adcs	r2, r2
    731c:	1a41      	subs	r1, r0, r1
    731e:	d200      	bcs.n	7322 <__aeabi_idiv+0xfe>
    7320:	4601      	mov	r1, r0
    7322:	4152      	adcs	r2, r2
    7324:	4610      	mov	r0, r2
    7326:	4770      	bx	lr
    7328:	e05d      	b.n	73e6 <__aeabi_idiv+0x1c2>
    732a:	0fca      	lsrs	r2, r1, #31
    732c:	d000      	beq.n	7330 <__aeabi_idiv+0x10c>
    732e:	4249      	negs	r1, r1
    7330:	1003      	asrs	r3, r0, #32
    7332:	d300      	bcc.n	7336 <__aeabi_idiv+0x112>
    7334:	4240      	negs	r0, r0
    7336:	4053      	eors	r3, r2
    7338:	2200      	movs	r2, #0
    733a:	469c      	mov	ip, r3
    733c:	0903      	lsrs	r3, r0, #4
    733e:	428b      	cmp	r3, r1
    7340:	d32d      	bcc.n	739e <__aeabi_idiv+0x17a>
    7342:	0a03      	lsrs	r3, r0, #8
    7344:	428b      	cmp	r3, r1
    7346:	d312      	bcc.n	736e <__aeabi_idiv+0x14a>
    7348:	22fc      	movs	r2, #252	; 0xfc
    734a:	0189      	lsls	r1, r1, #6
    734c:	ba12      	rev	r2, r2
    734e:	0a03      	lsrs	r3, r0, #8
    7350:	428b      	cmp	r3, r1
    7352:	d30c      	bcc.n	736e <__aeabi_idiv+0x14a>
    7354:	0189      	lsls	r1, r1, #6
    7356:	1192      	asrs	r2, r2, #6
    7358:	428b      	cmp	r3, r1
    735a:	d308      	bcc.n	736e <__aeabi_idiv+0x14a>
    735c:	0189      	lsls	r1, r1, #6
    735e:	1192      	asrs	r2, r2, #6
    7360:	428b      	cmp	r3, r1
    7362:	d304      	bcc.n	736e <__aeabi_idiv+0x14a>
    7364:	0189      	lsls	r1, r1, #6
    7366:	d03a      	beq.n	73de <__aeabi_idiv+0x1ba>
    7368:	1192      	asrs	r2, r2, #6
    736a:	e000      	b.n	736e <__aeabi_idiv+0x14a>
    736c:	0989      	lsrs	r1, r1, #6
    736e:	09c3      	lsrs	r3, r0, #7
    7370:	428b      	cmp	r3, r1
    7372:	d301      	bcc.n	7378 <__aeabi_idiv+0x154>
    7374:	01cb      	lsls	r3, r1, #7
    7376:	1ac0      	subs	r0, r0, r3
    7378:	4152      	adcs	r2, r2
    737a:	0983      	lsrs	r3, r0, #6
    737c:	428b      	cmp	r3, r1
    737e:	d301      	bcc.n	7384 <__aeabi_idiv+0x160>
    7380:	018b      	lsls	r3, r1, #6
    7382:	1ac0      	subs	r0, r0, r3
    7384:	4152      	adcs	r2, r2
    7386:	0943      	lsrs	r3, r0, #5
    7388:	428b      	cmp	r3, r1
    738a:	d301      	bcc.n	7390 <__aeabi_idiv+0x16c>
    738c:	014b      	lsls	r3, r1, #5
    738e:	1ac0      	subs	r0, r0, r3
    7390:	4152      	adcs	r2, r2
    7392:	0903      	lsrs	r3, r0, #4
    7394:	428b      	cmp	r3, r1
    7396:	d301      	bcc.n	739c <__aeabi_idiv+0x178>
    7398:	010b      	lsls	r3, r1, #4
    739a:	1ac0      	subs	r0, r0, r3
    739c:	4152      	adcs	r2, r2
    739e:	08c3      	lsrs	r3, r0, #3
    73a0:	428b      	cmp	r3, r1
    73a2:	d301      	bcc.n	73a8 <__aeabi_idiv+0x184>
    73a4:	00cb      	lsls	r3, r1, #3
    73a6:	1ac0      	subs	r0, r0, r3
    73a8:	4152      	adcs	r2, r2
    73aa:	0883      	lsrs	r3, r0, #2
    73ac:	428b      	cmp	r3, r1
    73ae:	d301      	bcc.n	73b4 <__aeabi_idiv+0x190>
    73b0:	008b      	lsls	r3, r1, #2
    73b2:	1ac0      	subs	r0, r0, r3
    73b4:	4152      	adcs	r2, r2
    73b6:	d2d9      	bcs.n	736c <__aeabi_idiv+0x148>
    73b8:	0843      	lsrs	r3, r0, #1
    73ba:	428b      	cmp	r3, r1
    73bc:	d301      	bcc.n	73c2 <__aeabi_idiv+0x19e>
    73be:	004b      	lsls	r3, r1, #1
    73c0:	1ac0      	subs	r0, r0, r3
    73c2:	4152      	adcs	r2, r2
    73c4:	1a41      	subs	r1, r0, r1
    73c6:	d200      	bcs.n	73ca <__aeabi_idiv+0x1a6>
    73c8:	4601      	mov	r1, r0
    73ca:	4663      	mov	r3, ip
    73cc:	4152      	adcs	r2, r2
    73ce:	105b      	asrs	r3, r3, #1
    73d0:	4610      	mov	r0, r2
    73d2:	d301      	bcc.n	73d8 <__aeabi_idiv+0x1b4>
    73d4:	4240      	negs	r0, r0
    73d6:	2b00      	cmp	r3, #0
    73d8:	d500      	bpl.n	73dc <__aeabi_idiv+0x1b8>
    73da:	4249      	negs	r1, r1
    73dc:	4770      	bx	lr
    73de:	4663      	mov	r3, ip
    73e0:	105b      	asrs	r3, r3, #1
    73e2:	d300      	bcc.n	73e6 <__aeabi_idiv+0x1c2>
    73e4:	4240      	negs	r0, r0
    73e6:	b501      	push	{r0, lr}
    73e8:	2000      	movs	r0, #0
    73ea:	f000 f80b 	bl	7404 <__aeabi_idiv0>
    73ee:	bd02      	pop	{r1, pc}

000073f0 <__aeabi_idivmod>:
    73f0:	2900      	cmp	r1, #0
    73f2:	d0f8      	beq.n	73e6 <__aeabi_idiv+0x1c2>
    73f4:	b503      	push	{r0, r1, lr}
    73f6:	f7ff ff15 	bl	7224 <__aeabi_idiv>
    73fa:	bc0e      	pop	{r1, r2, r3}
    73fc:	4342      	muls	r2, r0
    73fe:	1a89      	subs	r1, r1, r2
    7400:	4718      	bx	r3
    7402:	46c0      	nop			; (mov r8, r8)

00007404 <__aeabi_idiv0>:
    7404:	4770      	bx	lr
    7406:	46c0      	nop			; (mov r8, r8)

00007408 <__aeabi_cdrcmple>:
    7408:	4684      	mov	ip, r0
    740a:	1c10      	adds	r0, r2, #0
    740c:	4662      	mov	r2, ip
    740e:	468c      	mov	ip, r1
    7410:	1c19      	adds	r1, r3, #0
    7412:	4663      	mov	r3, ip
    7414:	e000      	b.n	7418 <__aeabi_cdcmpeq>
    7416:	46c0      	nop			; (mov r8, r8)

00007418 <__aeabi_cdcmpeq>:
    7418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    741a:	f001 fe83 	bl	9124 <__ledf2>
    741e:	2800      	cmp	r0, #0
    7420:	d401      	bmi.n	7426 <__aeabi_cdcmpeq+0xe>
    7422:	2100      	movs	r1, #0
    7424:	42c8      	cmn	r0, r1
    7426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007428 <__aeabi_dcmpeq>:
    7428:	b510      	push	{r4, lr}
    742a:	f001 fdc7 	bl	8fbc <__eqdf2>
    742e:	4240      	negs	r0, r0
    7430:	3001      	adds	r0, #1
    7432:	bd10      	pop	{r4, pc}

00007434 <__aeabi_dcmplt>:
    7434:	b510      	push	{r4, lr}
    7436:	f001 fe75 	bl	9124 <__ledf2>
    743a:	2800      	cmp	r0, #0
    743c:	db01      	blt.n	7442 <__aeabi_dcmplt+0xe>
    743e:	2000      	movs	r0, #0
    7440:	bd10      	pop	{r4, pc}
    7442:	2001      	movs	r0, #1
    7444:	bd10      	pop	{r4, pc}
    7446:	46c0      	nop			; (mov r8, r8)

00007448 <__aeabi_dcmple>:
    7448:	b510      	push	{r4, lr}
    744a:	f001 fe6b 	bl	9124 <__ledf2>
    744e:	2800      	cmp	r0, #0
    7450:	dd01      	ble.n	7456 <__aeabi_dcmple+0xe>
    7452:	2000      	movs	r0, #0
    7454:	bd10      	pop	{r4, pc}
    7456:	2001      	movs	r0, #1
    7458:	bd10      	pop	{r4, pc}
    745a:	46c0      	nop			; (mov r8, r8)

0000745c <__aeabi_dcmpgt>:
    745c:	b510      	push	{r4, lr}
    745e:	f001 fdf1 	bl	9044 <__gedf2>
    7462:	2800      	cmp	r0, #0
    7464:	dc01      	bgt.n	746a <__aeabi_dcmpgt+0xe>
    7466:	2000      	movs	r0, #0
    7468:	bd10      	pop	{r4, pc}
    746a:	2001      	movs	r0, #1
    746c:	bd10      	pop	{r4, pc}
    746e:	46c0      	nop			; (mov r8, r8)

00007470 <__aeabi_dcmpge>:
    7470:	b510      	push	{r4, lr}
    7472:	f001 fde7 	bl	9044 <__gedf2>
    7476:	2800      	cmp	r0, #0
    7478:	da01      	bge.n	747e <__aeabi_dcmpge+0xe>
    747a:	2000      	movs	r0, #0
    747c:	bd10      	pop	{r4, pc}
    747e:	2001      	movs	r0, #1
    7480:	bd10      	pop	{r4, pc}
    7482:	46c0      	nop			; (mov r8, r8)

00007484 <__aeabi_cfrcmple>:
    7484:	4684      	mov	ip, r0
    7486:	1c08      	adds	r0, r1, #0
    7488:	4661      	mov	r1, ip
    748a:	e7ff      	b.n	748c <__aeabi_cfcmpeq>

0000748c <__aeabi_cfcmpeq>:
    748c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    748e:	f000 fba3 	bl	7bd8 <__lesf2>
    7492:	2800      	cmp	r0, #0
    7494:	d401      	bmi.n	749a <__aeabi_cfcmpeq+0xe>
    7496:	2100      	movs	r1, #0
    7498:	42c8      	cmn	r0, r1
    749a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000749c <__aeabi_fcmpeq>:
    749c:	b510      	push	{r4, lr}
    749e:	f000 fb27 	bl	7af0 <__eqsf2>
    74a2:	4240      	negs	r0, r0
    74a4:	3001      	adds	r0, #1
    74a6:	bd10      	pop	{r4, pc}

000074a8 <__aeabi_fcmplt>:
    74a8:	b510      	push	{r4, lr}
    74aa:	f000 fb95 	bl	7bd8 <__lesf2>
    74ae:	2800      	cmp	r0, #0
    74b0:	db01      	blt.n	74b6 <__aeabi_fcmplt+0xe>
    74b2:	2000      	movs	r0, #0
    74b4:	bd10      	pop	{r4, pc}
    74b6:	2001      	movs	r0, #1
    74b8:	bd10      	pop	{r4, pc}
    74ba:	46c0      	nop			; (mov r8, r8)

000074bc <__aeabi_fcmple>:
    74bc:	b510      	push	{r4, lr}
    74be:	f000 fb8b 	bl	7bd8 <__lesf2>
    74c2:	2800      	cmp	r0, #0
    74c4:	dd01      	ble.n	74ca <__aeabi_fcmple+0xe>
    74c6:	2000      	movs	r0, #0
    74c8:	bd10      	pop	{r4, pc}
    74ca:	2001      	movs	r0, #1
    74cc:	bd10      	pop	{r4, pc}
    74ce:	46c0      	nop			; (mov r8, r8)

000074d0 <__aeabi_fcmpgt>:
    74d0:	b510      	push	{r4, lr}
    74d2:	f000 fb37 	bl	7b44 <__gesf2>
    74d6:	2800      	cmp	r0, #0
    74d8:	dc01      	bgt.n	74de <__aeabi_fcmpgt+0xe>
    74da:	2000      	movs	r0, #0
    74dc:	bd10      	pop	{r4, pc}
    74de:	2001      	movs	r0, #1
    74e0:	bd10      	pop	{r4, pc}
    74e2:	46c0      	nop			; (mov r8, r8)

000074e4 <__aeabi_fcmpge>:
    74e4:	b510      	push	{r4, lr}
    74e6:	f000 fb2d 	bl	7b44 <__gesf2>
    74ea:	2800      	cmp	r0, #0
    74ec:	da01      	bge.n	74f2 <__aeabi_fcmpge+0xe>
    74ee:	2000      	movs	r0, #0
    74f0:	bd10      	pop	{r4, pc}
    74f2:	2001      	movs	r0, #1
    74f4:	bd10      	pop	{r4, pc}
    74f6:	46c0      	nop			; (mov r8, r8)

000074f8 <__aeabi_lmul>:
    74f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    74fa:	464f      	mov	r7, r9
    74fc:	4646      	mov	r6, r8
    74fe:	0405      	lsls	r5, r0, #16
    7500:	0c2d      	lsrs	r5, r5, #16
    7502:	1c2c      	adds	r4, r5, #0
    7504:	b4c0      	push	{r6, r7}
    7506:	0417      	lsls	r7, r2, #16
    7508:	0c16      	lsrs	r6, r2, #16
    750a:	0c3f      	lsrs	r7, r7, #16
    750c:	4699      	mov	r9, r3
    750e:	0c03      	lsrs	r3, r0, #16
    7510:	437c      	muls	r4, r7
    7512:	4375      	muls	r5, r6
    7514:	435f      	muls	r7, r3
    7516:	4373      	muls	r3, r6
    7518:	197d      	adds	r5, r7, r5
    751a:	0c26      	lsrs	r6, r4, #16
    751c:	19ad      	adds	r5, r5, r6
    751e:	469c      	mov	ip, r3
    7520:	42af      	cmp	r7, r5
    7522:	d903      	bls.n	752c <__aeabi_lmul+0x34>
    7524:	2380      	movs	r3, #128	; 0x80
    7526:	025b      	lsls	r3, r3, #9
    7528:	4698      	mov	r8, r3
    752a:	44c4      	add	ip, r8
    752c:	464b      	mov	r3, r9
    752e:	4351      	muls	r1, r2
    7530:	4343      	muls	r3, r0
    7532:	0424      	lsls	r4, r4, #16
    7534:	0c2e      	lsrs	r6, r5, #16
    7536:	0c24      	lsrs	r4, r4, #16
    7538:	042d      	lsls	r5, r5, #16
    753a:	4466      	add	r6, ip
    753c:	192c      	adds	r4, r5, r4
    753e:	1859      	adds	r1, r3, r1
    7540:	1989      	adds	r1, r1, r6
    7542:	1c20      	adds	r0, r4, #0
    7544:	bc0c      	pop	{r2, r3}
    7546:	4690      	mov	r8, r2
    7548:	4699      	mov	r9, r3
    754a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000754c <__aeabi_d2uiz>:
    754c:	b538      	push	{r3, r4, r5, lr}
    754e:	2200      	movs	r2, #0
    7550:	4b0c      	ldr	r3, [pc, #48]	; (7584 <__aeabi_d2uiz+0x38>)
    7552:	1c04      	adds	r4, r0, #0
    7554:	1c0d      	adds	r5, r1, #0
    7556:	f7ff ff8b 	bl	7470 <__aeabi_dcmpge>
    755a:	2800      	cmp	r0, #0
    755c:	d104      	bne.n	7568 <__aeabi_d2uiz+0x1c>
    755e:	1c20      	adds	r0, r4, #0
    7560:	1c29      	adds	r1, r5, #0
    7562:	f002 fc59 	bl	9e18 <__aeabi_d2iz>
    7566:	bd38      	pop	{r3, r4, r5, pc}
    7568:	4b06      	ldr	r3, [pc, #24]	; (7584 <__aeabi_d2uiz+0x38>)
    756a:	2200      	movs	r2, #0
    756c:	1c20      	adds	r0, r4, #0
    756e:	1c29      	adds	r1, r5, #0
    7570:	f002 f8d8 	bl	9724 <__aeabi_dsub>
    7574:	f002 fc50 	bl	9e18 <__aeabi_d2iz>
    7578:	2380      	movs	r3, #128	; 0x80
    757a:	061b      	lsls	r3, r3, #24
    757c:	469c      	mov	ip, r3
    757e:	4460      	add	r0, ip
    7580:	e7f1      	b.n	7566 <__aeabi_d2uiz+0x1a>
    7582:	46c0      	nop			; (mov r8, r8)
    7584:	41e00000 	.word	0x41e00000

00007588 <__aeabi_fadd>:
    7588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    758a:	004a      	lsls	r2, r1, #1
    758c:	0243      	lsls	r3, r0, #9
    758e:	0044      	lsls	r4, r0, #1
    7590:	024e      	lsls	r6, r1, #9
    7592:	0fc5      	lsrs	r5, r0, #31
    7594:	0e24      	lsrs	r4, r4, #24
    7596:	1c28      	adds	r0, r5, #0
    7598:	099b      	lsrs	r3, r3, #6
    759a:	0e12      	lsrs	r2, r2, #24
    759c:	0fc9      	lsrs	r1, r1, #31
    759e:	09b7      	lsrs	r7, r6, #6
    75a0:	428d      	cmp	r5, r1
    75a2:	d040      	beq.n	7626 <__aeabi_fadd+0x9e>
    75a4:	1aa0      	subs	r0, r4, r2
    75a6:	2800      	cmp	r0, #0
    75a8:	dc00      	bgt.n	75ac <__aeabi_fadd+0x24>
    75aa:	e084      	b.n	76b6 <__aeabi_fadd+0x12e>
    75ac:	2a00      	cmp	r2, #0
    75ae:	d11c      	bne.n	75ea <__aeabi_fadd+0x62>
    75b0:	2f00      	cmp	r7, #0
    75b2:	d15c      	bne.n	766e <__aeabi_fadd+0xe6>
    75b4:	075a      	lsls	r2, r3, #29
    75b6:	d004      	beq.n	75c2 <__aeabi_fadd+0x3a>
    75b8:	220f      	movs	r2, #15
    75ba:	401a      	ands	r2, r3
    75bc:	2a04      	cmp	r2, #4
    75be:	d000      	beq.n	75c2 <__aeabi_fadd+0x3a>
    75c0:	3304      	adds	r3, #4
    75c2:	2280      	movs	r2, #128	; 0x80
    75c4:	04d2      	lsls	r2, r2, #19
    75c6:	401a      	ands	r2, r3
    75c8:	1c28      	adds	r0, r5, #0
    75ca:	2a00      	cmp	r2, #0
    75cc:	d024      	beq.n	7618 <__aeabi_fadd+0x90>
    75ce:	3401      	adds	r4, #1
    75d0:	2cff      	cmp	r4, #255	; 0xff
    75d2:	d100      	bne.n	75d6 <__aeabi_fadd+0x4e>
    75d4:	e07b      	b.n	76ce <__aeabi_fadd+0x146>
    75d6:	019b      	lsls	r3, r3, #6
    75d8:	0a5b      	lsrs	r3, r3, #9
    75da:	b2e4      	uxtb	r4, r4
    75dc:	025b      	lsls	r3, r3, #9
    75de:	05e4      	lsls	r4, r4, #23
    75e0:	0a5b      	lsrs	r3, r3, #9
    75e2:	4323      	orrs	r3, r4
    75e4:	07c0      	lsls	r0, r0, #31
    75e6:	4318      	orrs	r0, r3
    75e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75ea:	2cff      	cmp	r4, #255	; 0xff
    75ec:	d0e2      	beq.n	75b4 <__aeabi_fadd+0x2c>
    75ee:	2280      	movs	r2, #128	; 0x80
    75f0:	04d2      	lsls	r2, r2, #19
    75f2:	4317      	orrs	r7, r2
    75f4:	2601      	movs	r6, #1
    75f6:	281b      	cmp	r0, #27
    75f8:	dc08      	bgt.n	760c <__aeabi_fadd+0x84>
    75fa:	1c39      	adds	r1, r7, #0
    75fc:	2220      	movs	r2, #32
    75fe:	1c3e      	adds	r6, r7, #0
    7600:	40c1      	lsrs	r1, r0
    7602:	1a10      	subs	r0, r2, r0
    7604:	4086      	lsls	r6, r0
    7606:	1e77      	subs	r7, r6, #1
    7608:	41be      	sbcs	r6, r7
    760a:	430e      	orrs	r6, r1
    760c:	1b9b      	subs	r3, r3, r6
    760e:	015a      	lsls	r2, r3, #5
    7610:	d433      	bmi.n	767a <__aeabi_fadd+0xf2>
    7612:	1c28      	adds	r0, r5, #0
    7614:	075a      	lsls	r2, r3, #29
    7616:	d1cf      	bne.n	75b8 <__aeabi_fadd+0x30>
    7618:	08db      	lsrs	r3, r3, #3
    761a:	2cff      	cmp	r4, #255	; 0xff
    761c:	d01e      	beq.n	765c <__aeabi_fadd+0xd4>
    761e:	025b      	lsls	r3, r3, #9
    7620:	0a5b      	lsrs	r3, r3, #9
    7622:	b2e4      	uxtb	r4, r4
    7624:	e7da      	b.n	75dc <__aeabi_fadd+0x54>
    7626:	1aa1      	subs	r1, r4, r2
    7628:	2900      	cmp	r1, #0
    762a:	dd57      	ble.n	76dc <__aeabi_fadd+0x154>
    762c:	2a00      	cmp	r2, #0
    762e:	d03a      	beq.n	76a6 <__aeabi_fadd+0x11e>
    7630:	2cff      	cmp	r4, #255	; 0xff
    7632:	d0bf      	beq.n	75b4 <__aeabi_fadd+0x2c>
    7634:	2280      	movs	r2, #128	; 0x80
    7636:	04d2      	lsls	r2, r2, #19
    7638:	4317      	orrs	r7, r2
    763a:	2601      	movs	r6, #1
    763c:	291b      	cmp	r1, #27
    763e:	dd72      	ble.n	7726 <__aeabi_fadd+0x19e>
    7640:	199b      	adds	r3, r3, r6
    7642:	015a      	lsls	r2, r3, #5
    7644:	d5e5      	bpl.n	7612 <__aeabi_fadd+0x8a>
    7646:	3401      	adds	r4, #1
    7648:	2cff      	cmp	r4, #255	; 0xff
    764a:	d100      	bne.n	764e <__aeabi_fadd+0xc6>
    764c:	e087      	b.n	775e <__aeabi_fadd+0x1d6>
    764e:	2101      	movs	r1, #1
    7650:	4a8a      	ldr	r2, [pc, #552]	; (787c <__aeabi_fadd+0x2f4>)
    7652:	4019      	ands	r1, r3
    7654:	4013      	ands	r3, r2
    7656:	085b      	lsrs	r3, r3, #1
    7658:	430b      	orrs	r3, r1
    765a:	e7ab      	b.n	75b4 <__aeabi_fadd+0x2c>
    765c:	2b00      	cmp	r3, #0
    765e:	d036      	beq.n	76ce <__aeabi_fadd+0x146>
    7660:	2280      	movs	r2, #128	; 0x80
    7662:	03d2      	lsls	r2, r2, #15
    7664:	4313      	orrs	r3, r2
    7666:	025b      	lsls	r3, r3, #9
    7668:	0a5b      	lsrs	r3, r3, #9
    766a:	24ff      	movs	r4, #255	; 0xff
    766c:	e7b6      	b.n	75dc <__aeabi_fadd+0x54>
    766e:	3801      	subs	r0, #1
    7670:	2800      	cmp	r0, #0
    7672:	d13f      	bne.n	76f4 <__aeabi_fadd+0x16c>
    7674:	1bdb      	subs	r3, r3, r7
    7676:	015a      	lsls	r2, r3, #5
    7678:	d5cb      	bpl.n	7612 <__aeabi_fadd+0x8a>
    767a:	019b      	lsls	r3, r3, #6
    767c:	099e      	lsrs	r6, r3, #6
    767e:	1c30      	adds	r0, r6, #0
    7680:	f002 fd52 	bl	a128 <__clzsi2>
    7684:	3805      	subs	r0, #5
    7686:	4086      	lsls	r6, r0
    7688:	4284      	cmp	r4, r0
    768a:	dc23      	bgt.n	76d4 <__aeabi_fadd+0x14c>
    768c:	1b00      	subs	r0, r0, r4
    768e:	241f      	movs	r4, #31
    7690:	1c32      	adds	r2, r6, #0
    7692:	1c43      	adds	r3, r0, #1
    7694:	1a20      	subs	r0, r4, r0
    7696:	40da      	lsrs	r2, r3
    7698:	4086      	lsls	r6, r0
    769a:	1c13      	adds	r3, r2, #0
    769c:	1e74      	subs	r4, r6, #1
    769e:	41a6      	sbcs	r6, r4
    76a0:	2400      	movs	r4, #0
    76a2:	4333      	orrs	r3, r6
    76a4:	e786      	b.n	75b4 <__aeabi_fadd+0x2c>
    76a6:	2f00      	cmp	r7, #0
    76a8:	d100      	bne.n	76ac <__aeabi_fadd+0x124>
    76aa:	e783      	b.n	75b4 <__aeabi_fadd+0x2c>
    76ac:	3901      	subs	r1, #1
    76ae:	2900      	cmp	r1, #0
    76b0:	d150      	bne.n	7754 <__aeabi_fadd+0x1cc>
    76b2:	19db      	adds	r3, r3, r7
    76b4:	e7c5      	b.n	7642 <__aeabi_fadd+0xba>
    76b6:	2800      	cmp	r0, #0
    76b8:	d120      	bne.n	76fc <__aeabi_fadd+0x174>
    76ba:	1c62      	adds	r2, r4, #1
    76bc:	b2d2      	uxtb	r2, r2
    76be:	2a01      	cmp	r2, #1
    76c0:	dd5e      	ble.n	7780 <__aeabi_fadd+0x1f8>
    76c2:	1bde      	subs	r6, r3, r7
    76c4:	0172      	lsls	r2, r6, #5
    76c6:	d528      	bpl.n	771a <__aeabi_fadd+0x192>
    76c8:	1afe      	subs	r6, r7, r3
    76ca:	1c0d      	adds	r5, r1, #0
    76cc:	e7d7      	b.n	767e <__aeabi_fadd+0xf6>
    76ce:	24ff      	movs	r4, #255	; 0xff
    76d0:	2300      	movs	r3, #0
    76d2:	e783      	b.n	75dc <__aeabi_fadd+0x54>
    76d4:	4b69      	ldr	r3, [pc, #420]	; (787c <__aeabi_fadd+0x2f4>)
    76d6:	1a24      	subs	r4, r4, r0
    76d8:	4033      	ands	r3, r6
    76da:	e76b      	b.n	75b4 <__aeabi_fadd+0x2c>
    76dc:	2900      	cmp	r1, #0
    76de:	d158      	bne.n	7792 <__aeabi_fadd+0x20a>
    76e0:	1c62      	adds	r2, r4, #1
    76e2:	b2d1      	uxtb	r1, r2
    76e4:	2901      	cmp	r1, #1
    76e6:	dd3c      	ble.n	7762 <__aeabi_fadd+0x1da>
    76e8:	2aff      	cmp	r2, #255	; 0xff
    76ea:	d037      	beq.n	775c <__aeabi_fadd+0x1d4>
    76ec:	18fb      	adds	r3, r7, r3
    76ee:	085b      	lsrs	r3, r3, #1
    76f0:	1c14      	adds	r4, r2, #0
    76f2:	e75f      	b.n	75b4 <__aeabi_fadd+0x2c>
    76f4:	2cff      	cmp	r4, #255	; 0xff
    76f6:	d000      	beq.n	76fa <__aeabi_fadd+0x172>
    76f8:	e77c      	b.n	75f4 <__aeabi_fadd+0x6c>
    76fa:	e75b      	b.n	75b4 <__aeabi_fadd+0x2c>
    76fc:	2c00      	cmp	r4, #0
    76fe:	d01e      	beq.n	773e <__aeabi_fadd+0x1b6>
    7700:	2aff      	cmp	r2, #255	; 0xff
    7702:	d023      	beq.n	774c <__aeabi_fadd+0x1c4>
    7704:	2480      	movs	r4, #128	; 0x80
    7706:	04e4      	lsls	r4, r4, #19
    7708:	4240      	negs	r0, r0
    770a:	4323      	orrs	r3, r4
    770c:	281b      	cmp	r0, #27
    770e:	dd5b      	ble.n	77c8 <__aeabi_fadd+0x240>
    7710:	2301      	movs	r3, #1
    7712:	1afb      	subs	r3, r7, r3
    7714:	1c14      	adds	r4, r2, #0
    7716:	1c0d      	adds	r5, r1, #0
    7718:	e7ad      	b.n	7676 <__aeabi_fadd+0xee>
    771a:	2e00      	cmp	r6, #0
    771c:	d1af      	bne.n	767e <__aeabi_fadd+0xf6>
    771e:	2300      	movs	r3, #0
    7720:	2000      	movs	r0, #0
    7722:	2400      	movs	r4, #0
    7724:	e778      	b.n	7618 <__aeabi_fadd+0x90>
    7726:	1c3a      	adds	r2, r7, #0
    7728:	40ca      	lsrs	r2, r1
    772a:	4694      	mov	ip, r2
    772c:	2220      	movs	r2, #32
    772e:	1c3e      	adds	r6, r7, #0
    7730:	1a51      	subs	r1, r2, r1
    7732:	408e      	lsls	r6, r1
    7734:	4662      	mov	r2, ip
    7736:	1e77      	subs	r7, r6, #1
    7738:	41be      	sbcs	r6, r7
    773a:	4316      	orrs	r6, r2
    773c:	e780      	b.n	7640 <__aeabi_fadd+0xb8>
    773e:	2b00      	cmp	r3, #0
    7740:	d03e      	beq.n	77c0 <__aeabi_fadd+0x238>
    7742:	43c0      	mvns	r0, r0
    7744:	2800      	cmp	r0, #0
    7746:	d0e4      	beq.n	7712 <__aeabi_fadd+0x18a>
    7748:	2aff      	cmp	r2, #255	; 0xff
    774a:	d1df      	bne.n	770c <__aeabi_fadd+0x184>
    774c:	1c3b      	adds	r3, r7, #0
    774e:	24ff      	movs	r4, #255	; 0xff
    7750:	1c0d      	adds	r5, r1, #0
    7752:	e72f      	b.n	75b4 <__aeabi_fadd+0x2c>
    7754:	2cff      	cmp	r4, #255	; 0xff
    7756:	d000      	beq.n	775a <__aeabi_fadd+0x1d2>
    7758:	e76f      	b.n	763a <__aeabi_fadd+0xb2>
    775a:	e72b      	b.n	75b4 <__aeabi_fadd+0x2c>
    775c:	24ff      	movs	r4, #255	; 0xff
    775e:	2300      	movs	r3, #0
    7760:	e75a      	b.n	7618 <__aeabi_fadd+0x90>
    7762:	2c00      	cmp	r4, #0
    7764:	d15a      	bne.n	781c <__aeabi_fadd+0x294>
    7766:	2b00      	cmp	r3, #0
    7768:	d07f      	beq.n	786a <__aeabi_fadd+0x2e2>
    776a:	2f00      	cmp	r7, #0
    776c:	d100      	bne.n	7770 <__aeabi_fadd+0x1e8>
    776e:	e721      	b.n	75b4 <__aeabi_fadd+0x2c>
    7770:	19db      	adds	r3, r3, r7
    7772:	015a      	lsls	r2, r3, #5
    7774:	d400      	bmi.n	7778 <__aeabi_fadd+0x1f0>
    7776:	e74c      	b.n	7612 <__aeabi_fadd+0x8a>
    7778:	4a40      	ldr	r2, [pc, #256]	; (787c <__aeabi_fadd+0x2f4>)
    777a:	3401      	adds	r4, #1
    777c:	4013      	ands	r3, r2
    777e:	e719      	b.n	75b4 <__aeabi_fadd+0x2c>
    7780:	2c00      	cmp	r4, #0
    7782:	d115      	bne.n	77b0 <__aeabi_fadd+0x228>
    7784:	2b00      	cmp	r3, #0
    7786:	d12f      	bne.n	77e8 <__aeabi_fadd+0x260>
    7788:	2f00      	cmp	r7, #0
    778a:	d05d      	beq.n	7848 <__aeabi_fadd+0x2c0>
    778c:	1c3b      	adds	r3, r7, #0
    778e:	1c0d      	adds	r5, r1, #0
    7790:	e710      	b.n	75b4 <__aeabi_fadd+0x2c>
    7792:	2c00      	cmp	r4, #0
    7794:	d121      	bne.n	77da <__aeabi_fadd+0x252>
    7796:	2b00      	cmp	r3, #0
    7798:	d053      	beq.n	7842 <__aeabi_fadd+0x2ba>
    779a:	43c9      	mvns	r1, r1
    779c:	2900      	cmp	r1, #0
    779e:	d004      	beq.n	77aa <__aeabi_fadd+0x222>
    77a0:	2aff      	cmp	r2, #255	; 0xff
    77a2:	d04b      	beq.n	783c <__aeabi_fadd+0x2b4>
    77a4:	291b      	cmp	r1, #27
    77a6:	dd57      	ble.n	7858 <__aeabi_fadd+0x2d0>
    77a8:	2301      	movs	r3, #1
    77aa:	19db      	adds	r3, r3, r7
    77ac:	1c14      	adds	r4, r2, #0
    77ae:	e748      	b.n	7642 <__aeabi_fadd+0xba>
    77b0:	2b00      	cmp	r3, #0
    77b2:	d122      	bne.n	77fa <__aeabi_fadd+0x272>
    77b4:	2f00      	cmp	r7, #0
    77b6:	d04a      	beq.n	784e <__aeabi_fadd+0x2c6>
    77b8:	1c3b      	adds	r3, r7, #0
    77ba:	1c0d      	adds	r5, r1, #0
    77bc:	24ff      	movs	r4, #255	; 0xff
    77be:	e6f9      	b.n	75b4 <__aeabi_fadd+0x2c>
    77c0:	1c3b      	adds	r3, r7, #0
    77c2:	1c14      	adds	r4, r2, #0
    77c4:	1c0d      	adds	r5, r1, #0
    77c6:	e6f5      	b.n	75b4 <__aeabi_fadd+0x2c>
    77c8:	1c1d      	adds	r5, r3, #0
    77ca:	2420      	movs	r4, #32
    77cc:	40c5      	lsrs	r5, r0
    77ce:	1a20      	subs	r0, r4, r0
    77d0:	4083      	lsls	r3, r0
    77d2:	1e58      	subs	r0, r3, #1
    77d4:	4183      	sbcs	r3, r0
    77d6:	432b      	orrs	r3, r5
    77d8:	e79b      	b.n	7712 <__aeabi_fadd+0x18a>
    77da:	2aff      	cmp	r2, #255	; 0xff
    77dc:	d02e      	beq.n	783c <__aeabi_fadd+0x2b4>
    77de:	2480      	movs	r4, #128	; 0x80
    77e0:	04e4      	lsls	r4, r4, #19
    77e2:	4249      	negs	r1, r1
    77e4:	4323      	orrs	r3, r4
    77e6:	e7dd      	b.n	77a4 <__aeabi_fadd+0x21c>
    77e8:	2f00      	cmp	r7, #0
    77ea:	d100      	bne.n	77ee <__aeabi_fadd+0x266>
    77ec:	e6e2      	b.n	75b4 <__aeabi_fadd+0x2c>
    77ee:	1bda      	subs	r2, r3, r7
    77f0:	0150      	lsls	r0, r2, #5
    77f2:	d53c      	bpl.n	786e <__aeabi_fadd+0x2e6>
    77f4:	1afb      	subs	r3, r7, r3
    77f6:	1c0d      	adds	r5, r1, #0
    77f8:	e6dc      	b.n	75b4 <__aeabi_fadd+0x2c>
    77fa:	24ff      	movs	r4, #255	; 0xff
    77fc:	2f00      	cmp	r7, #0
    77fe:	d100      	bne.n	7802 <__aeabi_fadd+0x27a>
    7800:	e6d8      	b.n	75b4 <__aeabi_fadd+0x2c>
    7802:	2280      	movs	r2, #128	; 0x80
    7804:	08db      	lsrs	r3, r3, #3
    7806:	03d2      	lsls	r2, r2, #15
    7808:	4213      	tst	r3, r2
    780a:	d004      	beq.n	7816 <__aeabi_fadd+0x28e>
    780c:	08fe      	lsrs	r6, r7, #3
    780e:	4216      	tst	r6, r2
    7810:	d101      	bne.n	7816 <__aeabi_fadd+0x28e>
    7812:	1c33      	adds	r3, r6, #0
    7814:	1c0d      	adds	r5, r1, #0
    7816:	00db      	lsls	r3, r3, #3
    7818:	24ff      	movs	r4, #255	; 0xff
    781a:	e6cb      	b.n	75b4 <__aeabi_fadd+0x2c>
    781c:	2b00      	cmp	r3, #0
    781e:	d00d      	beq.n	783c <__aeabi_fadd+0x2b4>
    7820:	24ff      	movs	r4, #255	; 0xff
    7822:	2f00      	cmp	r7, #0
    7824:	d100      	bne.n	7828 <__aeabi_fadd+0x2a0>
    7826:	e6c5      	b.n	75b4 <__aeabi_fadd+0x2c>
    7828:	2280      	movs	r2, #128	; 0x80
    782a:	08db      	lsrs	r3, r3, #3
    782c:	03d2      	lsls	r2, r2, #15
    782e:	4213      	tst	r3, r2
    7830:	d0f1      	beq.n	7816 <__aeabi_fadd+0x28e>
    7832:	08fe      	lsrs	r6, r7, #3
    7834:	4216      	tst	r6, r2
    7836:	d1ee      	bne.n	7816 <__aeabi_fadd+0x28e>
    7838:	1c33      	adds	r3, r6, #0
    783a:	e7ec      	b.n	7816 <__aeabi_fadd+0x28e>
    783c:	1c3b      	adds	r3, r7, #0
    783e:	24ff      	movs	r4, #255	; 0xff
    7840:	e6b8      	b.n	75b4 <__aeabi_fadd+0x2c>
    7842:	1c3b      	adds	r3, r7, #0
    7844:	1c14      	adds	r4, r2, #0
    7846:	e6b5      	b.n	75b4 <__aeabi_fadd+0x2c>
    7848:	1c23      	adds	r3, r4, #0
    784a:	2000      	movs	r0, #0
    784c:	e6e4      	b.n	7618 <__aeabi_fadd+0x90>
    784e:	2380      	movs	r3, #128	; 0x80
    7850:	2000      	movs	r0, #0
    7852:	049b      	lsls	r3, r3, #18
    7854:	24ff      	movs	r4, #255	; 0xff
    7856:	e6df      	b.n	7618 <__aeabi_fadd+0x90>
    7858:	1c1e      	adds	r6, r3, #0
    785a:	2420      	movs	r4, #32
    785c:	40ce      	lsrs	r6, r1
    785e:	1a61      	subs	r1, r4, r1
    7860:	408b      	lsls	r3, r1
    7862:	1e59      	subs	r1, r3, #1
    7864:	418b      	sbcs	r3, r1
    7866:	4333      	orrs	r3, r6
    7868:	e79f      	b.n	77aa <__aeabi_fadd+0x222>
    786a:	1c3b      	adds	r3, r7, #0
    786c:	e6a2      	b.n	75b4 <__aeabi_fadd+0x2c>
    786e:	1e13      	subs	r3, r2, #0
    7870:	d000      	beq.n	7874 <__aeabi_fadd+0x2ec>
    7872:	e6ce      	b.n	7612 <__aeabi_fadd+0x8a>
    7874:	2300      	movs	r3, #0
    7876:	2000      	movs	r0, #0
    7878:	e6ce      	b.n	7618 <__aeabi_fadd+0x90>
    787a:	46c0      	nop			; (mov r8, r8)
    787c:	fbffffff 	.word	0xfbffffff

00007880 <__aeabi_fdiv>:
    7880:	b5f0      	push	{r4, r5, r6, r7, lr}
    7882:	4656      	mov	r6, sl
    7884:	464d      	mov	r5, r9
    7886:	465f      	mov	r7, fp
    7888:	4644      	mov	r4, r8
    788a:	b4f0      	push	{r4, r5, r6, r7}
    788c:	0243      	lsls	r3, r0, #9
    788e:	0045      	lsls	r5, r0, #1
    7890:	0fc7      	lsrs	r7, r0, #31
    7892:	b083      	sub	sp, #12
    7894:	468a      	mov	sl, r1
    7896:	0a5c      	lsrs	r4, r3, #9
    7898:	0e2e      	lsrs	r6, r5, #24
    789a:	46b9      	mov	r9, r7
    789c:	d041      	beq.n	7922 <__aeabi_fdiv+0xa2>
    789e:	2eff      	cmp	r6, #255	; 0xff
    78a0:	d026      	beq.n	78f0 <__aeabi_fdiv+0x70>
    78a2:	2380      	movs	r3, #128	; 0x80
    78a4:	041b      	lsls	r3, r3, #16
    78a6:	4323      	orrs	r3, r4
    78a8:	00dc      	lsls	r4, r3, #3
    78aa:	2300      	movs	r3, #0
    78ac:	4698      	mov	r8, r3
    78ae:	469b      	mov	fp, r3
    78b0:	3e7f      	subs	r6, #127	; 0x7f
    78b2:	4653      	mov	r3, sl
    78b4:	025b      	lsls	r3, r3, #9
    78b6:	0a5d      	lsrs	r5, r3, #9
    78b8:	4653      	mov	r3, sl
    78ba:	005a      	lsls	r2, r3, #1
    78bc:	0fdb      	lsrs	r3, r3, #31
    78be:	0e12      	lsrs	r2, r2, #24
    78c0:	469a      	mov	sl, r3
    78c2:	d039      	beq.n	7938 <__aeabi_fdiv+0xb8>
    78c4:	2aff      	cmp	r2, #255	; 0xff
    78c6:	d033      	beq.n	7930 <__aeabi_fdiv+0xb0>
    78c8:	2380      	movs	r3, #128	; 0x80
    78ca:	041b      	lsls	r3, r3, #16
    78cc:	432b      	orrs	r3, r5
    78ce:	00dd      	lsls	r5, r3, #3
    78d0:	2300      	movs	r3, #0
    78d2:	3a7f      	subs	r2, #127	; 0x7f
    78d4:	4651      	mov	r1, sl
    78d6:	1ab2      	subs	r2, r6, r2
    78d8:	4646      	mov	r6, r8
    78da:	4079      	eors	r1, r7
    78dc:	1c08      	adds	r0, r1, #0
    78de:	9201      	str	r2, [sp, #4]
    78e0:	431e      	orrs	r6, r3
    78e2:	2e0f      	cmp	r6, #15
    78e4:	d900      	bls.n	78e8 <__aeabi_fdiv+0x68>
    78e6:	e076      	b.n	79d6 <__aeabi_fdiv+0x156>
    78e8:	4a7e      	ldr	r2, [pc, #504]	; (7ae4 <__aeabi_fdiv+0x264>)
    78ea:	00b6      	lsls	r6, r6, #2
    78ec:	5996      	ldr	r6, [r2, r6]
    78ee:	46b7      	mov	pc, r6
    78f0:	2c00      	cmp	r4, #0
    78f2:	d130      	bne.n	7956 <__aeabi_fdiv+0xd6>
    78f4:	2308      	movs	r3, #8
    78f6:	4698      	mov	r8, r3
    78f8:	3b06      	subs	r3, #6
    78fa:	469b      	mov	fp, r3
    78fc:	e7d9      	b.n	78b2 <__aeabi_fdiv+0x32>
    78fe:	2380      	movs	r3, #128	; 0x80
    7900:	2100      	movs	r1, #0
    7902:	03db      	lsls	r3, r3, #15
    7904:	24ff      	movs	r4, #255	; 0xff
    7906:	025b      	lsls	r3, r3, #9
    7908:	05e4      	lsls	r4, r4, #23
    790a:	0a5b      	lsrs	r3, r3, #9
    790c:	07c9      	lsls	r1, r1, #31
    790e:	4323      	orrs	r3, r4
    7910:	430b      	orrs	r3, r1
    7912:	1c18      	adds	r0, r3, #0
    7914:	b003      	add	sp, #12
    7916:	bc3c      	pop	{r2, r3, r4, r5}
    7918:	4690      	mov	r8, r2
    791a:	4699      	mov	r9, r3
    791c:	46a2      	mov	sl, r4
    791e:	46ab      	mov	fp, r5
    7920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7922:	2c00      	cmp	r4, #0
    7924:	d128      	bne.n	7978 <__aeabi_fdiv+0xf8>
    7926:	2304      	movs	r3, #4
    7928:	4698      	mov	r8, r3
    792a:	3b03      	subs	r3, #3
    792c:	469b      	mov	fp, r3
    792e:	e7c0      	b.n	78b2 <__aeabi_fdiv+0x32>
    7930:	2d00      	cmp	r5, #0
    7932:	d11f      	bne.n	7974 <__aeabi_fdiv+0xf4>
    7934:	2302      	movs	r3, #2
    7936:	e002      	b.n	793e <__aeabi_fdiv+0xbe>
    7938:	2d00      	cmp	r5, #0
    793a:	d111      	bne.n	7960 <__aeabi_fdiv+0xe0>
    793c:	2301      	movs	r3, #1
    793e:	1ab2      	subs	r2, r6, r2
    7940:	4650      	mov	r0, sl
    7942:	4646      	mov	r6, r8
    7944:	4078      	eors	r0, r7
    7946:	9201      	str	r2, [sp, #4]
    7948:	431e      	orrs	r6, r3
    794a:	2e0f      	cmp	r6, #15
    794c:	d827      	bhi.n	799e <__aeabi_fdiv+0x11e>
    794e:	4966      	ldr	r1, [pc, #408]	; (7ae8 <__aeabi_fdiv+0x268>)
    7950:	00b6      	lsls	r6, r6, #2
    7952:	5989      	ldr	r1, [r1, r6]
    7954:	468f      	mov	pc, r1
    7956:	230c      	movs	r3, #12
    7958:	4698      	mov	r8, r3
    795a:	3b09      	subs	r3, #9
    795c:	469b      	mov	fp, r3
    795e:	e7a8      	b.n	78b2 <__aeabi_fdiv+0x32>
    7960:	1c28      	adds	r0, r5, #0
    7962:	f002 fbe1 	bl	a128 <__clzsi2>
    7966:	2276      	movs	r2, #118	; 0x76
    7968:	1f43      	subs	r3, r0, #5
    796a:	4252      	negs	r2, r2
    796c:	409d      	lsls	r5, r3
    796e:	1a12      	subs	r2, r2, r0
    7970:	2300      	movs	r3, #0
    7972:	e7af      	b.n	78d4 <__aeabi_fdiv+0x54>
    7974:	2303      	movs	r3, #3
    7976:	e7ad      	b.n	78d4 <__aeabi_fdiv+0x54>
    7978:	1c20      	adds	r0, r4, #0
    797a:	f002 fbd5 	bl	a128 <__clzsi2>
    797e:	1f43      	subs	r3, r0, #5
    7980:	409c      	lsls	r4, r3
    7982:	2376      	movs	r3, #118	; 0x76
    7984:	425b      	negs	r3, r3
    7986:	1a1e      	subs	r6, r3, r0
    7988:	2300      	movs	r3, #0
    798a:	4698      	mov	r8, r3
    798c:	469b      	mov	fp, r3
    798e:	e790      	b.n	78b2 <__aeabi_fdiv+0x32>
    7990:	2500      	movs	r5, #0
    7992:	46d1      	mov	r9, sl
    7994:	469b      	mov	fp, r3
    7996:	465b      	mov	r3, fp
    7998:	4648      	mov	r0, r9
    799a:	2b02      	cmp	r3, #2
    799c:	d16f      	bne.n	7a7e <__aeabi_fdiv+0x1fe>
    799e:	2101      	movs	r1, #1
    79a0:	24ff      	movs	r4, #255	; 0xff
    79a2:	4001      	ands	r1, r0
    79a4:	2300      	movs	r3, #0
    79a6:	e7ae      	b.n	7906 <__aeabi_fdiv+0x86>
    79a8:	237e      	movs	r3, #126	; 0x7e
    79aa:	9a01      	ldr	r2, [sp, #4]
    79ac:	425b      	negs	r3, r3
    79ae:	1a9b      	subs	r3, r3, r2
    79b0:	2b1b      	cmp	r3, #27
    79b2:	dd6d      	ble.n	7a90 <__aeabi_fdiv+0x210>
    79b4:	2101      	movs	r1, #1
    79b6:	464b      	mov	r3, r9
    79b8:	4019      	ands	r1, r3
    79ba:	2400      	movs	r4, #0
    79bc:	2300      	movs	r3, #0
    79be:	e7a2      	b.n	7906 <__aeabi_fdiv+0x86>
    79c0:	2380      	movs	r3, #128	; 0x80
    79c2:	03db      	lsls	r3, r3, #15
    79c4:	421c      	tst	r4, r3
    79c6:	d149      	bne.n	7a5c <__aeabi_fdiv+0x1dc>
    79c8:	2380      	movs	r3, #128	; 0x80
    79ca:	03db      	lsls	r3, r3, #15
    79cc:	4323      	orrs	r3, r4
    79ce:	025b      	lsls	r3, r3, #9
    79d0:	0a5b      	lsrs	r3, r3, #9
    79d2:	1c39      	adds	r1, r7, #0
    79d4:	e796      	b.n	7904 <__aeabi_fdiv+0x84>
    79d6:	0163      	lsls	r3, r4, #5
    79d8:	016d      	lsls	r5, r5, #5
    79da:	42ab      	cmp	r3, r5
    79dc:	d337      	bcc.n	7a4e <__aeabi_fdiv+0x1ce>
    79de:	4689      	mov	r9, r1
    79e0:	201a      	movs	r0, #26
    79e2:	2101      	movs	r1, #1
    79e4:	1b5b      	subs	r3, r3, r5
    79e6:	2401      	movs	r4, #1
    79e8:	1c1e      	adds	r6, r3, #0
    79ea:	0049      	lsls	r1, r1, #1
    79ec:	005b      	lsls	r3, r3, #1
    79ee:	2e00      	cmp	r6, #0
    79f0:	db01      	blt.n	79f6 <__aeabi_fdiv+0x176>
    79f2:	42ab      	cmp	r3, r5
    79f4:	d301      	bcc.n	79fa <__aeabi_fdiv+0x17a>
    79f6:	1b5b      	subs	r3, r3, r5
    79f8:	4321      	orrs	r1, r4
    79fa:	3801      	subs	r0, #1
    79fc:	2800      	cmp	r0, #0
    79fe:	d1f3      	bne.n	79e8 <__aeabi_fdiv+0x168>
    7a00:	1e58      	subs	r0, r3, #1
    7a02:	4183      	sbcs	r3, r0
    7a04:	430b      	orrs	r3, r1
    7a06:	1c1d      	adds	r5, r3, #0
    7a08:	9c01      	ldr	r4, [sp, #4]
    7a0a:	347f      	adds	r4, #127	; 0x7f
    7a0c:	2c00      	cmp	r4, #0
    7a0e:	ddcb      	ble.n	79a8 <__aeabi_fdiv+0x128>
    7a10:	076b      	lsls	r3, r5, #29
    7a12:	d004      	beq.n	7a1e <__aeabi_fdiv+0x19e>
    7a14:	230f      	movs	r3, #15
    7a16:	402b      	ands	r3, r5
    7a18:	2b04      	cmp	r3, #4
    7a1a:	d000      	beq.n	7a1e <__aeabi_fdiv+0x19e>
    7a1c:	3504      	adds	r5, #4
    7a1e:	012b      	lsls	r3, r5, #4
    7a20:	d504      	bpl.n	7a2c <__aeabi_fdiv+0x1ac>
    7a22:	9a01      	ldr	r2, [sp, #4]
    7a24:	4b31      	ldr	r3, [pc, #196]	; (7aec <__aeabi_fdiv+0x26c>)
    7a26:	3280      	adds	r2, #128	; 0x80
    7a28:	1c14      	adds	r4, r2, #0
    7a2a:	401d      	ands	r5, r3
    7a2c:	2cfe      	cmp	r4, #254	; 0xfe
    7a2e:	dd07      	ble.n	7a40 <__aeabi_fdiv+0x1c0>
    7a30:	464b      	mov	r3, r9
    7a32:	2101      	movs	r1, #1
    7a34:	24ff      	movs	r4, #255	; 0xff
    7a36:	4019      	ands	r1, r3
    7a38:	2300      	movs	r3, #0
    7a3a:	e764      	b.n	7906 <__aeabi_fdiv+0x86>
    7a3c:	1c25      	adds	r5, r4, #0
    7a3e:	e7aa      	b.n	7996 <__aeabi_fdiv+0x116>
    7a40:	2101      	movs	r1, #1
    7a42:	464a      	mov	r2, r9
    7a44:	01ab      	lsls	r3, r5, #6
    7a46:	0a5b      	lsrs	r3, r3, #9
    7a48:	b2e4      	uxtb	r4, r4
    7a4a:	4011      	ands	r1, r2
    7a4c:	e75b      	b.n	7906 <__aeabi_fdiv+0x86>
    7a4e:	9a01      	ldr	r2, [sp, #4]
    7a50:	4689      	mov	r9, r1
    7a52:	3a01      	subs	r2, #1
    7a54:	9201      	str	r2, [sp, #4]
    7a56:	201b      	movs	r0, #27
    7a58:	2100      	movs	r1, #0
    7a5a:	e7c4      	b.n	79e6 <__aeabi_fdiv+0x166>
    7a5c:	421d      	tst	r5, r3
    7a5e:	d007      	beq.n	7a70 <__aeabi_fdiv+0x1f0>
    7a60:	4323      	orrs	r3, r4
    7a62:	025b      	lsls	r3, r3, #9
    7a64:	0a5b      	lsrs	r3, r3, #9
    7a66:	1c39      	adds	r1, r7, #0
    7a68:	e74c      	b.n	7904 <__aeabi_fdiv+0x84>
    7a6a:	2500      	movs	r5, #0
    7a6c:	0263      	lsls	r3, r4, #9
    7a6e:	d5ab      	bpl.n	79c8 <__aeabi_fdiv+0x148>
    7a70:	2380      	movs	r3, #128	; 0x80
    7a72:	03db      	lsls	r3, r3, #15
    7a74:	432b      	orrs	r3, r5
    7a76:	025b      	lsls	r3, r3, #9
    7a78:	0a5b      	lsrs	r3, r3, #9
    7a7a:	4651      	mov	r1, sl
    7a7c:	e742      	b.n	7904 <__aeabi_fdiv+0x84>
    7a7e:	2b03      	cmp	r3, #3
    7a80:	d025      	beq.n	7ace <__aeabi_fdiv+0x24e>
    7a82:	2b01      	cmp	r3, #1
    7a84:	d1c0      	bne.n	7a08 <__aeabi_fdiv+0x188>
    7a86:	2101      	movs	r1, #1
    7a88:	2400      	movs	r4, #0
    7a8a:	4001      	ands	r1, r0
    7a8c:	2300      	movs	r3, #0
    7a8e:	e73a      	b.n	7906 <__aeabi_fdiv+0x86>
    7a90:	1c29      	adds	r1, r5, #0
    7a92:	40d9      	lsrs	r1, r3
    7a94:	1c2b      	adds	r3, r5, #0
    7a96:	9a01      	ldr	r2, [sp, #4]
    7a98:	329e      	adds	r2, #158	; 0x9e
    7a9a:	4093      	lsls	r3, r2
    7a9c:	1e5d      	subs	r5, r3, #1
    7a9e:	41ab      	sbcs	r3, r5
    7aa0:	430b      	orrs	r3, r1
    7aa2:	075a      	lsls	r2, r3, #29
    7aa4:	d004      	beq.n	7ab0 <__aeabi_fdiv+0x230>
    7aa6:	220f      	movs	r2, #15
    7aa8:	401a      	ands	r2, r3
    7aaa:	2a04      	cmp	r2, #4
    7aac:	d000      	beq.n	7ab0 <__aeabi_fdiv+0x230>
    7aae:	3304      	adds	r3, #4
    7ab0:	015a      	lsls	r2, r3, #5
    7ab2:	d505      	bpl.n	7ac0 <__aeabi_fdiv+0x240>
    7ab4:	464b      	mov	r3, r9
    7ab6:	2101      	movs	r1, #1
    7ab8:	2401      	movs	r4, #1
    7aba:	4019      	ands	r1, r3
    7abc:	2300      	movs	r3, #0
    7abe:	e722      	b.n	7906 <__aeabi_fdiv+0x86>
    7ac0:	2101      	movs	r1, #1
    7ac2:	464a      	mov	r2, r9
    7ac4:	019b      	lsls	r3, r3, #6
    7ac6:	0a5b      	lsrs	r3, r3, #9
    7ac8:	4011      	ands	r1, r2
    7aca:	2400      	movs	r4, #0
    7acc:	e71b      	b.n	7906 <__aeabi_fdiv+0x86>
    7ace:	2380      	movs	r3, #128	; 0x80
    7ad0:	2101      	movs	r1, #1
    7ad2:	464a      	mov	r2, r9
    7ad4:	03db      	lsls	r3, r3, #15
    7ad6:	432b      	orrs	r3, r5
    7ad8:	025b      	lsls	r3, r3, #9
    7ada:	400a      	ands	r2, r1
    7adc:	0a5b      	lsrs	r3, r3, #9
    7ade:	1c11      	adds	r1, r2, #0
    7ae0:	e710      	b.n	7904 <__aeabi_fdiv+0x84>
    7ae2:	46c0      	nop			; (mov r8, r8)
    7ae4:	00010800 	.word	0x00010800
    7ae8:	00010840 	.word	0x00010840
    7aec:	f7ffffff 	.word	0xf7ffffff

00007af0 <__eqsf2>:
    7af0:	0243      	lsls	r3, r0, #9
    7af2:	b570      	push	{r4, r5, r6, lr}
    7af4:	0042      	lsls	r2, r0, #1
    7af6:	004c      	lsls	r4, r1, #1
    7af8:	0a5d      	lsrs	r5, r3, #9
    7afa:	0fc3      	lsrs	r3, r0, #31
    7afc:	0248      	lsls	r0, r1, #9
    7afe:	0e12      	lsrs	r2, r2, #24
    7b00:	0a46      	lsrs	r6, r0, #9
    7b02:	0e24      	lsrs	r4, r4, #24
    7b04:	0fc9      	lsrs	r1, r1, #31
    7b06:	2aff      	cmp	r2, #255	; 0xff
    7b08:	d005      	beq.n	7b16 <__eqsf2+0x26>
    7b0a:	2cff      	cmp	r4, #255	; 0xff
    7b0c:	d008      	beq.n	7b20 <__eqsf2+0x30>
    7b0e:	2001      	movs	r0, #1
    7b10:	42a2      	cmp	r2, r4
    7b12:	d00b      	beq.n	7b2c <__eqsf2+0x3c>
    7b14:	bd70      	pop	{r4, r5, r6, pc}
    7b16:	2001      	movs	r0, #1
    7b18:	2d00      	cmp	r5, #0
    7b1a:	d1fb      	bne.n	7b14 <__eqsf2+0x24>
    7b1c:	2cff      	cmp	r4, #255	; 0xff
    7b1e:	d1f6      	bne.n	7b0e <__eqsf2+0x1e>
    7b20:	2001      	movs	r0, #1
    7b22:	2e00      	cmp	r6, #0
    7b24:	d1f6      	bne.n	7b14 <__eqsf2+0x24>
    7b26:	2001      	movs	r0, #1
    7b28:	42a2      	cmp	r2, r4
    7b2a:	d1f3      	bne.n	7b14 <__eqsf2+0x24>
    7b2c:	42b5      	cmp	r5, r6
    7b2e:	d1f1      	bne.n	7b14 <__eqsf2+0x24>
    7b30:	428b      	cmp	r3, r1
    7b32:	d005      	beq.n	7b40 <__eqsf2+0x50>
    7b34:	2a00      	cmp	r2, #0
    7b36:	d1ed      	bne.n	7b14 <__eqsf2+0x24>
    7b38:	1c28      	adds	r0, r5, #0
    7b3a:	1e43      	subs	r3, r0, #1
    7b3c:	4198      	sbcs	r0, r3
    7b3e:	e7e9      	b.n	7b14 <__eqsf2+0x24>
    7b40:	2000      	movs	r0, #0
    7b42:	e7e7      	b.n	7b14 <__eqsf2+0x24>

00007b44 <__gesf2>:
    7b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b46:	0243      	lsls	r3, r0, #9
    7b48:	024d      	lsls	r5, r1, #9
    7b4a:	004a      	lsls	r2, r1, #1
    7b4c:	0044      	lsls	r4, r0, #1
    7b4e:	0a5e      	lsrs	r6, r3, #9
    7b50:	0e24      	lsrs	r4, r4, #24
    7b52:	0fc3      	lsrs	r3, r0, #31
    7b54:	0a6d      	lsrs	r5, r5, #9
    7b56:	0e12      	lsrs	r2, r2, #24
    7b58:	0fc9      	lsrs	r1, r1, #31
    7b5a:	2cff      	cmp	r4, #255	; 0xff
    7b5c:	d00d      	beq.n	7b7a <__gesf2+0x36>
    7b5e:	2aff      	cmp	r2, #255	; 0xff
    7b60:	d031      	beq.n	7bc6 <__gesf2+0x82>
    7b62:	2c00      	cmp	r4, #0
    7b64:	d10d      	bne.n	7b82 <__gesf2+0x3e>
    7b66:	4277      	negs	r7, r6
    7b68:	4177      	adcs	r7, r6
    7b6a:	2a00      	cmp	r2, #0
    7b6c:	d123      	bne.n	7bb6 <__gesf2+0x72>
    7b6e:	2d00      	cmp	r5, #0
    7b70:	d121      	bne.n	7bb6 <__gesf2+0x72>
    7b72:	2000      	movs	r0, #0
    7b74:	2f00      	cmp	r7, #0
    7b76:	d10b      	bne.n	7b90 <__gesf2+0x4c>
    7b78:	e007      	b.n	7b8a <__gesf2+0x46>
    7b7a:	2e00      	cmp	r6, #0
    7b7c:	d128      	bne.n	7bd0 <__gesf2+0x8c>
    7b7e:	2aff      	cmp	r2, #255	; 0xff
    7b80:	d021      	beq.n	7bc6 <__gesf2+0x82>
    7b82:	2a00      	cmp	r2, #0
    7b84:	d005      	beq.n	7b92 <__gesf2+0x4e>
    7b86:	428b      	cmp	r3, r1
    7b88:	d007      	beq.n	7b9a <__gesf2+0x56>
    7b8a:	4258      	negs	r0, r3
    7b8c:	2301      	movs	r3, #1
    7b8e:	4318      	orrs	r0, r3
    7b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b92:	2d00      	cmp	r5, #0
    7b94:	d0f9      	beq.n	7b8a <__gesf2+0x46>
    7b96:	428b      	cmp	r3, r1
    7b98:	d1f7      	bne.n	7b8a <__gesf2+0x46>
    7b9a:	4294      	cmp	r4, r2
    7b9c:	dcf5      	bgt.n	7b8a <__gesf2+0x46>
    7b9e:	db04      	blt.n	7baa <__gesf2+0x66>
    7ba0:	42ae      	cmp	r6, r5
    7ba2:	d8f2      	bhi.n	7b8a <__gesf2+0x46>
    7ba4:	2000      	movs	r0, #0
    7ba6:	42ae      	cmp	r6, r5
    7ba8:	d2f2      	bcs.n	7b90 <__gesf2+0x4c>
    7baa:	4258      	negs	r0, r3
    7bac:	4143      	adcs	r3, r0
    7bae:	2001      	movs	r0, #1
    7bb0:	425b      	negs	r3, r3
    7bb2:	4318      	orrs	r0, r3
    7bb4:	e7ec      	b.n	7b90 <__gesf2+0x4c>
    7bb6:	2f00      	cmp	r7, #0
    7bb8:	d0e5      	beq.n	7b86 <__gesf2+0x42>
    7bba:	4248      	negs	r0, r1
    7bbc:	4141      	adcs	r1, r0
    7bbe:	2001      	movs	r0, #1
    7bc0:	4249      	negs	r1, r1
    7bc2:	4308      	orrs	r0, r1
    7bc4:	e7e4      	b.n	7b90 <__gesf2+0x4c>
    7bc6:	2d00      	cmp	r5, #0
    7bc8:	d102      	bne.n	7bd0 <__gesf2+0x8c>
    7bca:	2c00      	cmp	r4, #0
    7bcc:	d0cb      	beq.n	7b66 <__gesf2+0x22>
    7bce:	e7da      	b.n	7b86 <__gesf2+0x42>
    7bd0:	2002      	movs	r0, #2
    7bd2:	4240      	negs	r0, r0
    7bd4:	e7dc      	b.n	7b90 <__gesf2+0x4c>
    7bd6:	46c0      	nop			; (mov r8, r8)

00007bd8 <__lesf2>:
    7bd8:	0243      	lsls	r3, r0, #9
    7bda:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bdc:	0042      	lsls	r2, r0, #1
    7bde:	004c      	lsls	r4, r1, #1
    7be0:	0a5e      	lsrs	r6, r3, #9
    7be2:	0fc3      	lsrs	r3, r0, #31
    7be4:	0248      	lsls	r0, r1, #9
    7be6:	0e12      	lsrs	r2, r2, #24
    7be8:	0a45      	lsrs	r5, r0, #9
    7bea:	0e24      	lsrs	r4, r4, #24
    7bec:	0fc9      	lsrs	r1, r1, #31
    7bee:	2aff      	cmp	r2, #255	; 0xff
    7bf0:	d00f      	beq.n	7c12 <__lesf2+0x3a>
    7bf2:	2cff      	cmp	r4, #255	; 0xff
    7bf4:	d01a      	beq.n	7c2c <__lesf2+0x54>
    7bf6:	2a00      	cmp	r2, #0
    7bf8:	d110      	bne.n	7c1c <__lesf2+0x44>
    7bfa:	4277      	negs	r7, r6
    7bfc:	4177      	adcs	r7, r6
    7bfe:	2c00      	cmp	r4, #0
    7c00:	d029      	beq.n	7c56 <__lesf2+0x7e>
    7c02:	2f00      	cmp	r7, #0
    7c04:	d017      	beq.n	7c36 <__lesf2+0x5e>
    7c06:	4248      	negs	r0, r1
    7c08:	4141      	adcs	r1, r0
    7c0a:	2001      	movs	r0, #1
    7c0c:	4249      	negs	r1, r1
    7c0e:	4308      	orrs	r0, r1
    7c10:	e00b      	b.n	7c2a <__lesf2+0x52>
    7c12:	2002      	movs	r0, #2
    7c14:	2e00      	cmp	r6, #0
    7c16:	d108      	bne.n	7c2a <__lesf2+0x52>
    7c18:	2cff      	cmp	r4, #255	; 0xff
    7c1a:	d007      	beq.n	7c2c <__lesf2+0x54>
    7c1c:	2c00      	cmp	r4, #0
    7c1e:	d10a      	bne.n	7c36 <__lesf2+0x5e>
    7c20:	2d00      	cmp	r5, #0
    7c22:	d108      	bne.n	7c36 <__lesf2+0x5e>
    7c24:	4258      	negs	r0, r3
    7c26:	2301      	movs	r3, #1
    7c28:	4318      	orrs	r0, r3
    7c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c2c:	2002      	movs	r0, #2
    7c2e:	2d00      	cmp	r5, #0
    7c30:	d1fb      	bne.n	7c2a <__lesf2+0x52>
    7c32:	2a00      	cmp	r2, #0
    7c34:	d0e1      	beq.n	7bfa <__lesf2+0x22>
    7c36:	428b      	cmp	r3, r1
    7c38:	d1f4      	bne.n	7c24 <__lesf2+0x4c>
    7c3a:	42a2      	cmp	r2, r4
    7c3c:	dcf2      	bgt.n	7c24 <__lesf2+0x4c>
    7c3e:	db04      	blt.n	7c4a <__lesf2+0x72>
    7c40:	42ae      	cmp	r6, r5
    7c42:	d8ef      	bhi.n	7c24 <__lesf2+0x4c>
    7c44:	2000      	movs	r0, #0
    7c46:	42ae      	cmp	r6, r5
    7c48:	d2ef      	bcs.n	7c2a <__lesf2+0x52>
    7c4a:	4258      	negs	r0, r3
    7c4c:	4143      	adcs	r3, r0
    7c4e:	2001      	movs	r0, #1
    7c50:	425b      	negs	r3, r3
    7c52:	4318      	orrs	r0, r3
    7c54:	e7e9      	b.n	7c2a <__lesf2+0x52>
    7c56:	2d00      	cmp	r5, #0
    7c58:	d1d3      	bne.n	7c02 <__lesf2+0x2a>
    7c5a:	2000      	movs	r0, #0
    7c5c:	2f00      	cmp	r7, #0
    7c5e:	d1e4      	bne.n	7c2a <__lesf2+0x52>
    7c60:	e7e0      	b.n	7c24 <__lesf2+0x4c>
    7c62:	46c0      	nop			; (mov r8, r8)

00007c64 <__aeabi_fmul>:
    7c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c66:	465f      	mov	r7, fp
    7c68:	4656      	mov	r6, sl
    7c6a:	464d      	mov	r5, r9
    7c6c:	4644      	mov	r4, r8
    7c6e:	b4f0      	push	{r4, r5, r6, r7}
    7c70:	0245      	lsls	r5, r0, #9
    7c72:	0046      	lsls	r6, r0, #1
    7c74:	0fc4      	lsrs	r4, r0, #31
    7c76:	b083      	sub	sp, #12
    7c78:	1c0f      	adds	r7, r1, #0
    7c7a:	0a6d      	lsrs	r5, r5, #9
    7c7c:	0e36      	lsrs	r6, r6, #24
    7c7e:	46a3      	mov	fp, r4
    7c80:	d045      	beq.n	7d0e <__aeabi_fmul+0xaa>
    7c82:	2eff      	cmp	r6, #255	; 0xff
    7c84:	d025      	beq.n	7cd2 <__aeabi_fmul+0x6e>
    7c86:	2380      	movs	r3, #128	; 0x80
    7c88:	041b      	lsls	r3, r3, #16
    7c8a:	431d      	orrs	r5, r3
    7c8c:	2300      	movs	r3, #0
    7c8e:	469a      	mov	sl, r3
    7c90:	00ed      	lsls	r5, r5, #3
    7c92:	3e7f      	subs	r6, #127	; 0x7f
    7c94:	9301      	str	r3, [sp, #4]
    7c96:	027b      	lsls	r3, r7, #9
    7c98:	0a5b      	lsrs	r3, r3, #9
    7c9a:	4698      	mov	r8, r3
    7c9c:	0078      	lsls	r0, r7, #1
    7c9e:	0ffb      	lsrs	r3, r7, #31
    7ca0:	0e00      	lsrs	r0, r0, #24
    7ca2:	4699      	mov	r9, r3
    7ca4:	d040      	beq.n	7d28 <__aeabi_fmul+0xc4>
    7ca6:	28ff      	cmp	r0, #255	; 0xff
    7ca8:	d038      	beq.n	7d1c <__aeabi_fmul+0xb8>
    7caa:	2380      	movs	r3, #128	; 0x80
    7cac:	4642      	mov	r2, r8
    7cae:	041b      	lsls	r3, r3, #16
    7cb0:	4313      	orrs	r3, r2
    7cb2:	00db      	lsls	r3, r3, #3
    7cb4:	4698      	mov	r8, r3
    7cb6:	2300      	movs	r3, #0
    7cb8:	387f      	subs	r0, #127	; 0x7f
    7cba:	464a      	mov	r2, r9
    7cbc:	9f01      	ldr	r7, [sp, #4]
    7cbe:	1830      	adds	r0, r6, r0
    7cc0:	4062      	eors	r2, r4
    7cc2:	1c41      	adds	r1, r0, #1
    7cc4:	431f      	orrs	r7, r3
    7cc6:	2f0f      	cmp	r7, #15
    7cc8:	d869      	bhi.n	7d9e <__aeabi_fmul+0x13a>
    7cca:	4e7d      	ldr	r6, [pc, #500]	; (7ec0 <__aeabi_fmul+0x25c>)
    7ccc:	00bf      	lsls	r7, r7, #2
    7cce:	59f6      	ldr	r6, [r6, r7]
    7cd0:	46b7      	mov	pc, r6
    7cd2:	2d00      	cmp	r5, #0
    7cd4:	d145      	bne.n	7d62 <__aeabi_fmul+0xfe>
    7cd6:	2308      	movs	r3, #8
    7cd8:	9301      	str	r3, [sp, #4]
    7cda:	3b06      	subs	r3, #6
    7cdc:	469a      	mov	sl, r3
    7cde:	e7da      	b.n	7c96 <__aeabi_fmul+0x32>
    7ce0:	4693      	mov	fp, r2
    7ce2:	4653      	mov	r3, sl
    7ce4:	2b02      	cmp	r3, #2
    7ce6:	d12f      	bne.n	7d48 <__aeabi_fmul+0xe4>
    7ce8:	465b      	mov	r3, fp
    7cea:	2401      	movs	r4, #1
    7cec:	2500      	movs	r5, #0
    7cee:	401c      	ands	r4, r3
    7cf0:	23ff      	movs	r3, #255	; 0xff
    7cf2:	026d      	lsls	r5, r5, #9
    7cf4:	05db      	lsls	r3, r3, #23
    7cf6:	0a6d      	lsrs	r5, r5, #9
    7cf8:	07e4      	lsls	r4, r4, #31
    7cfa:	431d      	orrs	r5, r3
    7cfc:	4325      	orrs	r5, r4
    7cfe:	1c28      	adds	r0, r5, #0
    7d00:	b003      	add	sp, #12
    7d02:	bc3c      	pop	{r2, r3, r4, r5}
    7d04:	4690      	mov	r8, r2
    7d06:	4699      	mov	r9, r3
    7d08:	46a2      	mov	sl, r4
    7d0a:	46ab      	mov	fp, r5
    7d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d0e:	2d00      	cmp	r5, #0
    7d10:	d12c      	bne.n	7d6c <__aeabi_fmul+0x108>
    7d12:	2304      	movs	r3, #4
    7d14:	9301      	str	r3, [sp, #4]
    7d16:	3b03      	subs	r3, #3
    7d18:	469a      	mov	sl, r3
    7d1a:	e7bc      	b.n	7c96 <__aeabi_fmul+0x32>
    7d1c:	4643      	mov	r3, r8
    7d1e:	425a      	negs	r2, r3
    7d20:	4153      	adcs	r3, r2
    7d22:	2203      	movs	r2, #3
    7d24:	1ad3      	subs	r3, r2, r3
    7d26:	e7c8      	b.n	7cba <__aeabi_fmul+0x56>
    7d28:	4642      	mov	r2, r8
    7d2a:	2301      	movs	r3, #1
    7d2c:	2a00      	cmp	r2, #0
    7d2e:	d0c4      	beq.n	7cba <__aeabi_fmul+0x56>
    7d30:	4640      	mov	r0, r8
    7d32:	f002 f9f9 	bl	a128 <__clzsi2>
    7d36:	4642      	mov	r2, r8
    7d38:	1f43      	subs	r3, r0, #5
    7d3a:	409a      	lsls	r2, r3
    7d3c:	2376      	movs	r3, #118	; 0x76
    7d3e:	425b      	negs	r3, r3
    7d40:	1a18      	subs	r0, r3, r0
    7d42:	4690      	mov	r8, r2
    7d44:	2300      	movs	r3, #0
    7d46:	e7b8      	b.n	7cba <__aeabi_fmul+0x56>
    7d48:	2b03      	cmp	r3, #3
    7d4a:	d100      	bne.n	7d4e <__aeabi_fmul+0xea>
    7d4c:	e0ad      	b.n	7eaa <__aeabi_fmul+0x246>
    7d4e:	2b01      	cmp	r3, #1
    7d50:	d000      	beq.n	7d54 <__aeabi_fmul+0xf0>
    7d52:	e08c      	b.n	7e6e <__aeabi_fmul+0x20a>
    7d54:	465b      	mov	r3, fp
    7d56:	4654      	mov	r4, sl
    7d58:	401c      	ands	r4, r3
    7d5a:	b2e4      	uxtb	r4, r4
    7d5c:	2300      	movs	r3, #0
    7d5e:	2500      	movs	r5, #0
    7d60:	e7c7      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7d62:	230c      	movs	r3, #12
    7d64:	9301      	str	r3, [sp, #4]
    7d66:	3b09      	subs	r3, #9
    7d68:	469a      	mov	sl, r3
    7d6a:	e794      	b.n	7c96 <__aeabi_fmul+0x32>
    7d6c:	1c28      	adds	r0, r5, #0
    7d6e:	f002 f9db 	bl	a128 <__clzsi2>
    7d72:	2676      	movs	r6, #118	; 0x76
    7d74:	1f43      	subs	r3, r0, #5
    7d76:	409d      	lsls	r5, r3
    7d78:	2300      	movs	r3, #0
    7d7a:	4276      	negs	r6, r6
    7d7c:	1a36      	subs	r6, r6, r0
    7d7e:	9301      	str	r3, [sp, #4]
    7d80:	469a      	mov	sl, r3
    7d82:	e788      	b.n	7c96 <__aeabi_fmul+0x32>
    7d84:	2580      	movs	r5, #128	; 0x80
    7d86:	2400      	movs	r4, #0
    7d88:	03ed      	lsls	r5, r5, #15
    7d8a:	23ff      	movs	r3, #255	; 0xff
    7d8c:	e7b1      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7d8e:	4645      	mov	r5, r8
    7d90:	46cb      	mov	fp, r9
    7d92:	469a      	mov	sl, r3
    7d94:	e7a5      	b.n	7ce2 <__aeabi_fmul+0x7e>
    7d96:	4645      	mov	r5, r8
    7d98:	4693      	mov	fp, r2
    7d9a:	469a      	mov	sl, r3
    7d9c:	e7a1      	b.n	7ce2 <__aeabi_fmul+0x7e>
    7d9e:	4643      	mov	r3, r8
    7da0:	042c      	lsls	r4, r5, #16
    7da2:	0c1b      	lsrs	r3, r3, #16
    7da4:	469c      	mov	ip, r3
    7da6:	0c23      	lsrs	r3, r4, #16
    7da8:	4644      	mov	r4, r8
    7daa:	0426      	lsls	r6, r4, #16
    7dac:	1c1c      	adds	r4, r3, #0
    7dae:	0c36      	lsrs	r6, r6, #16
    7db0:	0c2f      	lsrs	r7, r5, #16
    7db2:	4374      	muls	r4, r6
    7db4:	1c35      	adds	r5, r6, #0
    7db6:	4666      	mov	r6, ip
    7db8:	437d      	muls	r5, r7
    7dba:	4373      	muls	r3, r6
    7dbc:	4377      	muls	r7, r6
    7dbe:	18eb      	adds	r3, r5, r3
    7dc0:	0c26      	lsrs	r6, r4, #16
    7dc2:	199e      	adds	r6, r3, r6
    7dc4:	42b5      	cmp	r5, r6
    7dc6:	d903      	bls.n	7dd0 <__aeabi_fmul+0x16c>
    7dc8:	2380      	movs	r3, #128	; 0x80
    7dca:	025b      	lsls	r3, r3, #9
    7dcc:	469c      	mov	ip, r3
    7dce:	4467      	add	r7, ip
    7dd0:	0424      	lsls	r4, r4, #16
    7dd2:	0433      	lsls	r3, r6, #16
    7dd4:	0c24      	lsrs	r4, r4, #16
    7dd6:	191b      	adds	r3, r3, r4
    7dd8:	019d      	lsls	r5, r3, #6
    7dda:	1e6c      	subs	r4, r5, #1
    7ddc:	41a5      	sbcs	r5, r4
    7dde:	0e9b      	lsrs	r3, r3, #26
    7de0:	0c36      	lsrs	r6, r6, #16
    7de2:	432b      	orrs	r3, r5
    7de4:	19bd      	adds	r5, r7, r6
    7de6:	01ad      	lsls	r5, r5, #6
    7de8:	431d      	orrs	r5, r3
    7dea:	012b      	lsls	r3, r5, #4
    7dec:	d504      	bpl.n	7df8 <__aeabi_fmul+0x194>
    7dee:	2301      	movs	r3, #1
    7df0:	0868      	lsrs	r0, r5, #1
    7df2:	401d      	ands	r5, r3
    7df4:	4305      	orrs	r5, r0
    7df6:	1c08      	adds	r0, r1, #0
    7df8:	1c03      	adds	r3, r0, #0
    7dfa:	337f      	adds	r3, #127	; 0x7f
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	dd2c      	ble.n	7e5a <__aeabi_fmul+0x1f6>
    7e00:	0769      	lsls	r1, r5, #29
    7e02:	d004      	beq.n	7e0e <__aeabi_fmul+0x1aa>
    7e04:	210f      	movs	r1, #15
    7e06:	4029      	ands	r1, r5
    7e08:	2904      	cmp	r1, #4
    7e0a:	d000      	beq.n	7e0e <__aeabi_fmul+0x1aa>
    7e0c:	3504      	adds	r5, #4
    7e0e:	0129      	lsls	r1, r5, #4
    7e10:	d503      	bpl.n	7e1a <__aeabi_fmul+0x1b6>
    7e12:	4b2c      	ldr	r3, [pc, #176]	; (7ec4 <__aeabi_fmul+0x260>)
    7e14:	401d      	ands	r5, r3
    7e16:	1c03      	adds	r3, r0, #0
    7e18:	3380      	adds	r3, #128	; 0x80
    7e1a:	2bfe      	cmp	r3, #254	; 0xfe
    7e1c:	dd17      	ble.n	7e4e <__aeabi_fmul+0x1ea>
    7e1e:	2401      	movs	r4, #1
    7e20:	23ff      	movs	r3, #255	; 0xff
    7e22:	4014      	ands	r4, r2
    7e24:	2500      	movs	r5, #0
    7e26:	e764      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e28:	2080      	movs	r0, #128	; 0x80
    7e2a:	03c0      	lsls	r0, r0, #15
    7e2c:	4205      	tst	r5, r0
    7e2e:	d009      	beq.n	7e44 <__aeabi_fmul+0x1e0>
    7e30:	4643      	mov	r3, r8
    7e32:	4203      	tst	r3, r0
    7e34:	d106      	bne.n	7e44 <__aeabi_fmul+0x1e0>
    7e36:	4645      	mov	r5, r8
    7e38:	4305      	orrs	r5, r0
    7e3a:	026d      	lsls	r5, r5, #9
    7e3c:	0a6d      	lsrs	r5, r5, #9
    7e3e:	464c      	mov	r4, r9
    7e40:	23ff      	movs	r3, #255	; 0xff
    7e42:	e756      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e44:	4305      	orrs	r5, r0
    7e46:	026d      	lsls	r5, r5, #9
    7e48:	0a6d      	lsrs	r5, r5, #9
    7e4a:	23ff      	movs	r3, #255	; 0xff
    7e4c:	e751      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e4e:	2401      	movs	r4, #1
    7e50:	01ad      	lsls	r5, r5, #6
    7e52:	0a6d      	lsrs	r5, r5, #9
    7e54:	b2db      	uxtb	r3, r3
    7e56:	4014      	ands	r4, r2
    7e58:	e74b      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e5a:	237e      	movs	r3, #126	; 0x7e
    7e5c:	425b      	negs	r3, r3
    7e5e:	1a1b      	subs	r3, r3, r0
    7e60:	2b1b      	cmp	r3, #27
    7e62:	dd07      	ble.n	7e74 <__aeabi_fmul+0x210>
    7e64:	2401      	movs	r4, #1
    7e66:	2300      	movs	r3, #0
    7e68:	4014      	ands	r4, r2
    7e6a:	2500      	movs	r5, #0
    7e6c:	e741      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e6e:	1c08      	adds	r0, r1, #0
    7e70:	465a      	mov	r2, fp
    7e72:	e7c1      	b.n	7df8 <__aeabi_fmul+0x194>
    7e74:	309e      	adds	r0, #158	; 0x9e
    7e76:	1c29      	adds	r1, r5, #0
    7e78:	4085      	lsls	r5, r0
    7e7a:	40d9      	lsrs	r1, r3
    7e7c:	1e68      	subs	r0, r5, #1
    7e7e:	4185      	sbcs	r5, r0
    7e80:	430d      	orrs	r5, r1
    7e82:	076b      	lsls	r3, r5, #29
    7e84:	d004      	beq.n	7e90 <__aeabi_fmul+0x22c>
    7e86:	230f      	movs	r3, #15
    7e88:	402b      	ands	r3, r5
    7e8a:	2b04      	cmp	r3, #4
    7e8c:	d000      	beq.n	7e90 <__aeabi_fmul+0x22c>
    7e8e:	3504      	adds	r5, #4
    7e90:	016b      	lsls	r3, r5, #5
    7e92:	d504      	bpl.n	7e9e <__aeabi_fmul+0x23a>
    7e94:	2401      	movs	r4, #1
    7e96:	2301      	movs	r3, #1
    7e98:	4014      	ands	r4, r2
    7e9a:	2500      	movs	r5, #0
    7e9c:	e729      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7e9e:	2401      	movs	r4, #1
    7ea0:	01ad      	lsls	r5, r5, #6
    7ea2:	0a6d      	lsrs	r5, r5, #9
    7ea4:	4014      	ands	r4, r2
    7ea6:	2300      	movs	r3, #0
    7ea8:	e723      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7eaa:	2380      	movs	r3, #128	; 0x80
    7eac:	03db      	lsls	r3, r3, #15
    7eae:	431d      	orrs	r5, r3
    7eb0:	2401      	movs	r4, #1
    7eb2:	465b      	mov	r3, fp
    7eb4:	026d      	lsls	r5, r5, #9
    7eb6:	4023      	ands	r3, r4
    7eb8:	1c1c      	adds	r4, r3, #0
    7eba:	0a6d      	lsrs	r5, r5, #9
    7ebc:	23ff      	movs	r3, #255	; 0xff
    7ebe:	e718      	b.n	7cf2 <__aeabi_fmul+0x8e>
    7ec0:	00010880 	.word	0x00010880
    7ec4:	f7ffffff 	.word	0xf7ffffff

00007ec8 <__aeabi_fsub>:
    7ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7eca:	004a      	lsls	r2, r1, #1
    7ecc:	0243      	lsls	r3, r0, #9
    7ece:	0044      	lsls	r4, r0, #1
    7ed0:	024d      	lsls	r5, r1, #9
    7ed2:	0fc0      	lsrs	r0, r0, #31
    7ed4:	0e24      	lsrs	r4, r4, #24
    7ed6:	1c06      	adds	r6, r0, #0
    7ed8:	099b      	lsrs	r3, r3, #6
    7eda:	0e12      	lsrs	r2, r2, #24
    7edc:	0fc9      	lsrs	r1, r1, #31
    7ede:	09ad      	lsrs	r5, r5, #6
    7ee0:	2aff      	cmp	r2, #255	; 0xff
    7ee2:	d100      	bne.n	7ee6 <__aeabi_fsub+0x1e>
    7ee4:	e075      	b.n	7fd2 <__aeabi_fsub+0x10a>
    7ee6:	2701      	movs	r7, #1
    7ee8:	4079      	eors	r1, r7
    7eea:	4288      	cmp	r0, r1
    7eec:	d050      	beq.n	7f90 <__aeabi_fsub+0xc8>
    7eee:	1aa0      	subs	r0, r4, r2
    7ef0:	2800      	cmp	r0, #0
    7ef2:	dc00      	bgt.n	7ef6 <__aeabi_fsub+0x2e>
    7ef4:	e08f      	b.n	8016 <__aeabi_fsub+0x14e>
    7ef6:	2a00      	cmp	r2, #0
    7ef8:	d11e      	bne.n	7f38 <__aeabi_fsub+0x70>
    7efa:	2d00      	cmp	r5, #0
    7efc:	d000      	beq.n	7f00 <__aeabi_fsub+0x38>
    7efe:	e075      	b.n	7fec <__aeabi_fsub+0x124>
    7f00:	075a      	lsls	r2, r3, #29
    7f02:	d004      	beq.n	7f0e <__aeabi_fsub+0x46>
    7f04:	220f      	movs	r2, #15
    7f06:	401a      	ands	r2, r3
    7f08:	2a04      	cmp	r2, #4
    7f0a:	d000      	beq.n	7f0e <__aeabi_fsub+0x46>
    7f0c:	3304      	adds	r3, #4
    7f0e:	2280      	movs	r2, #128	; 0x80
    7f10:	2001      	movs	r0, #1
    7f12:	04d2      	lsls	r2, r2, #19
    7f14:	401a      	ands	r2, r3
    7f16:	4030      	ands	r0, r6
    7f18:	2a00      	cmp	r2, #0
    7f1a:	d032      	beq.n	7f82 <__aeabi_fsub+0xba>
    7f1c:	3401      	adds	r4, #1
    7f1e:	2cff      	cmp	r4, #255	; 0xff
    7f20:	d100      	bne.n	7f24 <__aeabi_fsub+0x5c>
    7f22:	e084      	b.n	802e <__aeabi_fsub+0x166>
    7f24:	019b      	lsls	r3, r3, #6
    7f26:	0a5b      	lsrs	r3, r3, #9
    7f28:	b2e4      	uxtb	r4, r4
    7f2a:	025b      	lsls	r3, r3, #9
    7f2c:	05e4      	lsls	r4, r4, #23
    7f2e:	0a5b      	lsrs	r3, r3, #9
    7f30:	4323      	orrs	r3, r4
    7f32:	07c0      	lsls	r0, r0, #31
    7f34:	4318      	orrs	r0, r3
    7f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f38:	2cff      	cmp	r4, #255	; 0xff
    7f3a:	d0e1      	beq.n	7f00 <__aeabi_fsub+0x38>
    7f3c:	2280      	movs	r2, #128	; 0x80
    7f3e:	04d2      	lsls	r2, r2, #19
    7f40:	4315      	orrs	r5, r2
    7f42:	281b      	cmp	r0, #27
    7f44:	dd7a      	ble.n	803c <__aeabi_fsub+0x174>
    7f46:	2501      	movs	r5, #1
    7f48:	1b5b      	subs	r3, r3, r5
    7f4a:	015a      	lsls	r2, r3, #5
    7f4c:	d55d      	bpl.n	800a <__aeabi_fsub+0x142>
    7f4e:	019b      	lsls	r3, r3, #6
    7f50:	099f      	lsrs	r7, r3, #6
    7f52:	1c38      	adds	r0, r7, #0
    7f54:	f002 f8e8 	bl	a128 <__clzsi2>
    7f58:	3805      	subs	r0, #5
    7f5a:	4087      	lsls	r7, r0
    7f5c:	4284      	cmp	r4, r0
    7f5e:	dc69      	bgt.n	8034 <__aeabi_fsub+0x16c>
    7f60:	1b00      	subs	r0, r0, r4
    7f62:	241f      	movs	r4, #31
    7f64:	1c3a      	adds	r2, r7, #0
    7f66:	1c43      	adds	r3, r0, #1
    7f68:	1a20      	subs	r0, r4, r0
    7f6a:	40da      	lsrs	r2, r3
    7f6c:	4087      	lsls	r7, r0
    7f6e:	1c13      	adds	r3, r2, #0
    7f70:	1e7c      	subs	r4, r7, #1
    7f72:	41a7      	sbcs	r7, r4
    7f74:	2400      	movs	r4, #0
    7f76:	433b      	orrs	r3, r7
    7f78:	e7c2      	b.n	7f00 <__aeabi_fsub+0x38>
    7f7a:	1e13      	subs	r3, r2, #0
    7f7c:	d145      	bne.n	800a <__aeabi_fsub+0x142>
    7f7e:	2300      	movs	r3, #0
    7f80:	2000      	movs	r0, #0
    7f82:	08db      	lsrs	r3, r3, #3
    7f84:	2cff      	cmp	r4, #255	; 0xff
    7f86:	d028      	beq.n	7fda <__aeabi_fsub+0x112>
    7f88:	025b      	lsls	r3, r3, #9
    7f8a:	0a5b      	lsrs	r3, r3, #9
    7f8c:	b2e4      	uxtb	r4, r4
    7f8e:	e7cc      	b.n	7f2a <__aeabi_fsub+0x62>
    7f90:	1aa1      	subs	r1, r4, r2
    7f92:	2900      	cmp	r1, #0
    7f94:	dd5b      	ble.n	804e <__aeabi_fsub+0x186>
    7f96:	2a00      	cmp	r2, #0
    7f98:	d02e      	beq.n	7ff8 <__aeabi_fsub+0x130>
    7f9a:	2cff      	cmp	r4, #255	; 0xff
    7f9c:	d0b0      	beq.n	7f00 <__aeabi_fsub+0x38>
    7f9e:	2280      	movs	r2, #128	; 0x80
    7fa0:	04d2      	lsls	r2, r2, #19
    7fa2:	4315      	orrs	r5, r2
    7fa4:	291b      	cmp	r1, #27
    7fa6:	dc74      	bgt.n	8092 <__aeabi_fsub+0x1ca>
    7fa8:	1c2f      	adds	r7, r5, #0
    7faa:	2220      	movs	r2, #32
    7fac:	40cf      	lsrs	r7, r1
    7fae:	1a51      	subs	r1, r2, r1
    7fb0:	408d      	lsls	r5, r1
    7fb2:	1e69      	subs	r1, r5, #1
    7fb4:	418d      	sbcs	r5, r1
    7fb6:	433d      	orrs	r5, r7
    7fb8:	195b      	adds	r3, r3, r5
    7fba:	015a      	lsls	r2, r3, #5
    7fbc:	d525      	bpl.n	800a <__aeabi_fsub+0x142>
    7fbe:	3401      	adds	r4, #1
    7fc0:	2cff      	cmp	r4, #255	; 0xff
    7fc2:	d074      	beq.n	80ae <__aeabi_fsub+0x1e6>
    7fc4:	2101      	movs	r1, #1
    7fc6:	4a7e      	ldr	r2, [pc, #504]	; (81c0 <__aeabi_fsub+0x2f8>)
    7fc8:	4019      	ands	r1, r3
    7fca:	4013      	ands	r3, r2
    7fcc:	085b      	lsrs	r3, r3, #1
    7fce:	430b      	orrs	r3, r1
    7fd0:	e796      	b.n	7f00 <__aeabi_fsub+0x38>
    7fd2:	2d00      	cmp	r5, #0
    7fd4:	d000      	beq.n	7fd8 <__aeabi_fsub+0x110>
    7fd6:	e788      	b.n	7eea <__aeabi_fsub+0x22>
    7fd8:	e785      	b.n	7ee6 <__aeabi_fsub+0x1e>
    7fda:	2b00      	cmp	r3, #0
    7fdc:	d027      	beq.n	802e <__aeabi_fsub+0x166>
    7fde:	2280      	movs	r2, #128	; 0x80
    7fe0:	03d2      	lsls	r2, r2, #15
    7fe2:	4313      	orrs	r3, r2
    7fe4:	025b      	lsls	r3, r3, #9
    7fe6:	0a5b      	lsrs	r3, r3, #9
    7fe8:	24ff      	movs	r4, #255	; 0xff
    7fea:	e79e      	b.n	7f2a <__aeabi_fsub+0x62>
    7fec:	3801      	subs	r0, #1
    7fee:	2800      	cmp	r0, #0
    7ff0:	d0aa      	beq.n	7f48 <__aeabi_fsub+0x80>
    7ff2:	2cff      	cmp	r4, #255	; 0xff
    7ff4:	d1a5      	bne.n	7f42 <__aeabi_fsub+0x7a>
    7ff6:	e783      	b.n	7f00 <__aeabi_fsub+0x38>
    7ff8:	2d00      	cmp	r5, #0
    7ffa:	d100      	bne.n	7ffe <__aeabi_fsub+0x136>
    7ffc:	e780      	b.n	7f00 <__aeabi_fsub+0x38>
    7ffe:	3901      	subs	r1, #1
    8000:	2900      	cmp	r1, #0
    8002:	d0d9      	beq.n	7fb8 <__aeabi_fsub+0xf0>
    8004:	2cff      	cmp	r4, #255	; 0xff
    8006:	d1cd      	bne.n	7fa4 <__aeabi_fsub+0xdc>
    8008:	e77a      	b.n	7f00 <__aeabi_fsub+0x38>
    800a:	075a      	lsls	r2, r3, #29
    800c:	d000      	beq.n	8010 <__aeabi_fsub+0x148>
    800e:	e779      	b.n	7f04 <__aeabi_fsub+0x3c>
    8010:	2001      	movs	r0, #1
    8012:	4030      	ands	r0, r6
    8014:	e7b5      	b.n	7f82 <__aeabi_fsub+0xba>
    8016:	2800      	cmp	r0, #0
    8018:	d125      	bne.n	8066 <__aeabi_fsub+0x19e>
    801a:	1c62      	adds	r2, r4, #1
    801c:	b2d2      	uxtb	r2, r2
    801e:	2a01      	cmp	r2, #1
    8020:	dd55      	ble.n	80ce <__aeabi_fsub+0x206>
    8022:	1b5f      	subs	r7, r3, r5
    8024:	017a      	lsls	r2, r7, #5
    8026:	d52d      	bpl.n	8084 <__aeabi_fsub+0x1bc>
    8028:	1aef      	subs	r7, r5, r3
    802a:	1c0e      	adds	r6, r1, #0
    802c:	e791      	b.n	7f52 <__aeabi_fsub+0x8a>
    802e:	24ff      	movs	r4, #255	; 0xff
    8030:	2300      	movs	r3, #0
    8032:	e77a      	b.n	7f2a <__aeabi_fsub+0x62>
    8034:	4b62      	ldr	r3, [pc, #392]	; (81c0 <__aeabi_fsub+0x2f8>)
    8036:	1a24      	subs	r4, r4, r0
    8038:	403b      	ands	r3, r7
    803a:	e761      	b.n	7f00 <__aeabi_fsub+0x38>
    803c:	1c29      	adds	r1, r5, #0
    803e:	2220      	movs	r2, #32
    8040:	40c1      	lsrs	r1, r0
    8042:	1a10      	subs	r0, r2, r0
    8044:	4085      	lsls	r5, r0
    8046:	1e68      	subs	r0, r5, #1
    8048:	4185      	sbcs	r5, r0
    804a:	430d      	orrs	r5, r1
    804c:	e77c      	b.n	7f48 <__aeabi_fsub+0x80>
    804e:	2900      	cmp	r1, #0
    8050:	d146      	bne.n	80e0 <__aeabi_fsub+0x218>
    8052:	1c62      	adds	r2, r4, #1
    8054:	b2d1      	uxtb	r1, r2
    8056:	2901      	cmp	r1, #1
    8058:	dd2b      	ble.n	80b2 <__aeabi_fsub+0x1ea>
    805a:	2aff      	cmp	r2, #255	; 0xff
    805c:	d026      	beq.n	80ac <__aeabi_fsub+0x1e4>
    805e:	18eb      	adds	r3, r5, r3
    8060:	085b      	lsrs	r3, r3, #1
    8062:	1c14      	adds	r4, r2, #0
    8064:	e74c      	b.n	7f00 <__aeabi_fsub+0x38>
    8066:	2c00      	cmp	r4, #0
    8068:	d015      	beq.n	8096 <__aeabi_fsub+0x1ce>
    806a:	2aff      	cmp	r2, #255	; 0xff
    806c:	d01a      	beq.n	80a4 <__aeabi_fsub+0x1dc>
    806e:	2480      	movs	r4, #128	; 0x80
    8070:	04e4      	lsls	r4, r4, #19
    8072:	4240      	negs	r0, r0
    8074:	4323      	orrs	r3, r4
    8076:	281b      	cmp	r0, #27
    8078:	dd4d      	ble.n	8116 <__aeabi_fsub+0x24e>
    807a:	2301      	movs	r3, #1
    807c:	1aeb      	subs	r3, r5, r3
    807e:	1c14      	adds	r4, r2, #0
    8080:	1c0e      	adds	r6, r1, #0
    8082:	e762      	b.n	7f4a <__aeabi_fsub+0x82>
    8084:	2f00      	cmp	r7, #0
    8086:	d000      	beq.n	808a <__aeabi_fsub+0x1c2>
    8088:	e763      	b.n	7f52 <__aeabi_fsub+0x8a>
    808a:	2300      	movs	r3, #0
    808c:	2000      	movs	r0, #0
    808e:	2400      	movs	r4, #0
    8090:	e777      	b.n	7f82 <__aeabi_fsub+0xba>
    8092:	2501      	movs	r5, #1
    8094:	e790      	b.n	7fb8 <__aeabi_fsub+0xf0>
    8096:	2b00      	cmp	r3, #0
    8098:	d039      	beq.n	810e <__aeabi_fsub+0x246>
    809a:	43c0      	mvns	r0, r0
    809c:	2800      	cmp	r0, #0
    809e:	d0ed      	beq.n	807c <__aeabi_fsub+0x1b4>
    80a0:	2aff      	cmp	r2, #255	; 0xff
    80a2:	d1e8      	bne.n	8076 <__aeabi_fsub+0x1ae>
    80a4:	1c2b      	adds	r3, r5, #0
    80a6:	24ff      	movs	r4, #255	; 0xff
    80a8:	1c0e      	adds	r6, r1, #0
    80aa:	e729      	b.n	7f00 <__aeabi_fsub+0x38>
    80ac:	24ff      	movs	r4, #255	; 0xff
    80ae:	2300      	movs	r3, #0
    80b0:	e767      	b.n	7f82 <__aeabi_fsub+0xba>
    80b2:	2c00      	cmp	r4, #0
    80b4:	d15a      	bne.n	816c <__aeabi_fsub+0x2a4>
    80b6:	2b00      	cmp	r3, #0
    80b8:	d07f      	beq.n	81ba <__aeabi_fsub+0x2f2>
    80ba:	2d00      	cmp	r5, #0
    80bc:	d100      	bne.n	80c0 <__aeabi_fsub+0x1f8>
    80be:	e71f      	b.n	7f00 <__aeabi_fsub+0x38>
    80c0:	195b      	adds	r3, r3, r5
    80c2:	015a      	lsls	r2, r3, #5
    80c4:	d5a1      	bpl.n	800a <__aeabi_fsub+0x142>
    80c6:	4a3e      	ldr	r2, [pc, #248]	; (81c0 <__aeabi_fsub+0x2f8>)
    80c8:	3401      	adds	r4, #1
    80ca:	4013      	ands	r3, r2
    80cc:	e718      	b.n	7f00 <__aeabi_fsub+0x38>
    80ce:	2c00      	cmp	r4, #0
    80d0:	d115      	bne.n	80fe <__aeabi_fsub+0x236>
    80d2:	2b00      	cmp	r3, #0
    80d4:	d12f      	bne.n	8136 <__aeabi_fsub+0x26e>
    80d6:	2d00      	cmp	r5, #0
    80d8:	d05e      	beq.n	8198 <__aeabi_fsub+0x2d0>
    80da:	1c2b      	adds	r3, r5, #0
    80dc:	1c0e      	adds	r6, r1, #0
    80de:	e70f      	b.n	7f00 <__aeabi_fsub+0x38>
    80e0:	2c00      	cmp	r4, #0
    80e2:	d121      	bne.n	8128 <__aeabi_fsub+0x260>
    80e4:	2b00      	cmp	r3, #0
    80e6:	d054      	beq.n	8192 <__aeabi_fsub+0x2ca>
    80e8:	43c9      	mvns	r1, r1
    80ea:	2900      	cmp	r1, #0
    80ec:	d004      	beq.n	80f8 <__aeabi_fsub+0x230>
    80ee:	2aff      	cmp	r2, #255	; 0xff
    80f0:	d04c      	beq.n	818c <__aeabi_fsub+0x2c4>
    80f2:	291b      	cmp	r1, #27
    80f4:	dd58      	ble.n	81a8 <__aeabi_fsub+0x2e0>
    80f6:	2301      	movs	r3, #1
    80f8:	195b      	adds	r3, r3, r5
    80fa:	1c14      	adds	r4, r2, #0
    80fc:	e75d      	b.n	7fba <__aeabi_fsub+0xf2>
    80fe:	2b00      	cmp	r3, #0
    8100:	d123      	bne.n	814a <__aeabi_fsub+0x282>
    8102:	2d00      	cmp	r5, #0
    8104:	d04b      	beq.n	819e <__aeabi_fsub+0x2d6>
    8106:	1c2b      	adds	r3, r5, #0
    8108:	1c0e      	adds	r6, r1, #0
    810a:	24ff      	movs	r4, #255	; 0xff
    810c:	e6f8      	b.n	7f00 <__aeabi_fsub+0x38>
    810e:	1c2b      	adds	r3, r5, #0
    8110:	1c14      	adds	r4, r2, #0
    8112:	1c0e      	adds	r6, r1, #0
    8114:	e6f4      	b.n	7f00 <__aeabi_fsub+0x38>
    8116:	1c1e      	adds	r6, r3, #0
    8118:	2420      	movs	r4, #32
    811a:	40c6      	lsrs	r6, r0
    811c:	1a20      	subs	r0, r4, r0
    811e:	4083      	lsls	r3, r0
    8120:	1e58      	subs	r0, r3, #1
    8122:	4183      	sbcs	r3, r0
    8124:	4333      	orrs	r3, r6
    8126:	e7a9      	b.n	807c <__aeabi_fsub+0x1b4>
    8128:	2aff      	cmp	r2, #255	; 0xff
    812a:	d02f      	beq.n	818c <__aeabi_fsub+0x2c4>
    812c:	2480      	movs	r4, #128	; 0x80
    812e:	04e4      	lsls	r4, r4, #19
    8130:	4249      	negs	r1, r1
    8132:	4323      	orrs	r3, r4
    8134:	e7dd      	b.n	80f2 <__aeabi_fsub+0x22a>
    8136:	2d00      	cmp	r5, #0
    8138:	d100      	bne.n	813c <__aeabi_fsub+0x274>
    813a:	e6e1      	b.n	7f00 <__aeabi_fsub+0x38>
    813c:	1b5a      	subs	r2, r3, r5
    813e:	0150      	lsls	r0, r2, #5
    8140:	d400      	bmi.n	8144 <__aeabi_fsub+0x27c>
    8142:	e71a      	b.n	7f7a <__aeabi_fsub+0xb2>
    8144:	1aeb      	subs	r3, r5, r3
    8146:	1c0e      	adds	r6, r1, #0
    8148:	e6da      	b.n	7f00 <__aeabi_fsub+0x38>
    814a:	24ff      	movs	r4, #255	; 0xff
    814c:	2d00      	cmp	r5, #0
    814e:	d100      	bne.n	8152 <__aeabi_fsub+0x28a>
    8150:	e6d6      	b.n	7f00 <__aeabi_fsub+0x38>
    8152:	2280      	movs	r2, #128	; 0x80
    8154:	08db      	lsrs	r3, r3, #3
    8156:	03d2      	lsls	r2, r2, #15
    8158:	4213      	tst	r3, r2
    815a:	d004      	beq.n	8166 <__aeabi_fsub+0x29e>
    815c:	08ed      	lsrs	r5, r5, #3
    815e:	4215      	tst	r5, r2
    8160:	d101      	bne.n	8166 <__aeabi_fsub+0x29e>
    8162:	1c2b      	adds	r3, r5, #0
    8164:	1c0e      	adds	r6, r1, #0
    8166:	00db      	lsls	r3, r3, #3
    8168:	24ff      	movs	r4, #255	; 0xff
    816a:	e6c9      	b.n	7f00 <__aeabi_fsub+0x38>
    816c:	2b00      	cmp	r3, #0
    816e:	d00d      	beq.n	818c <__aeabi_fsub+0x2c4>
    8170:	24ff      	movs	r4, #255	; 0xff
    8172:	2d00      	cmp	r5, #0
    8174:	d100      	bne.n	8178 <__aeabi_fsub+0x2b0>
    8176:	e6c3      	b.n	7f00 <__aeabi_fsub+0x38>
    8178:	2280      	movs	r2, #128	; 0x80
    817a:	08db      	lsrs	r3, r3, #3
    817c:	03d2      	lsls	r2, r2, #15
    817e:	4213      	tst	r3, r2
    8180:	d0f1      	beq.n	8166 <__aeabi_fsub+0x29e>
    8182:	08ed      	lsrs	r5, r5, #3
    8184:	4215      	tst	r5, r2
    8186:	d1ee      	bne.n	8166 <__aeabi_fsub+0x29e>
    8188:	1c2b      	adds	r3, r5, #0
    818a:	e7ec      	b.n	8166 <__aeabi_fsub+0x29e>
    818c:	1c2b      	adds	r3, r5, #0
    818e:	24ff      	movs	r4, #255	; 0xff
    8190:	e6b6      	b.n	7f00 <__aeabi_fsub+0x38>
    8192:	1c2b      	adds	r3, r5, #0
    8194:	1c14      	adds	r4, r2, #0
    8196:	e6b3      	b.n	7f00 <__aeabi_fsub+0x38>
    8198:	1c23      	adds	r3, r4, #0
    819a:	2000      	movs	r0, #0
    819c:	e6f1      	b.n	7f82 <__aeabi_fsub+0xba>
    819e:	2380      	movs	r3, #128	; 0x80
    81a0:	2000      	movs	r0, #0
    81a2:	049b      	lsls	r3, r3, #18
    81a4:	24ff      	movs	r4, #255	; 0xff
    81a6:	e6ec      	b.n	7f82 <__aeabi_fsub+0xba>
    81a8:	1c1f      	adds	r7, r3, #0
    81aa:	2420      	movs	r4, #32
    81ac:	40cf      	lsrs	r7, r1
    81ae:	1a61      	subs	r1, r4, r1
    81b0:	408b      	lsls	r3, r1
    81b2:	1e59      	subs	r1, r3, #1
    81b4:	418b      	sbcs	r3, r1
    81b6:	433b      	orrs	r3, r7
    81b8:	e79e      	b.n	80f8 <__aeabi_fsub+0x230>
    81ba:	1c2b      	adds	r3, r5, #0
    81bc:	e6a0      	b.n	7f00 <__aeabi_fsub+0x38>
    81be:	46c0      	nop			; (mov r8, r8)
    81c0:	fbffffff 	.word	0xfbffffff

000081c4 <__aeabi_f2iz>:
    81c4:	0242      	lsls	r2, r0, #9
    81c6:	0a51      	lsrs	r1, r2, #9
    81c8:	0042      	lsls	r2, r0, #1
    81ca:	0fc3      	lsrs	r3, r0, #31
    81cc:	0e12      	lsrs	r2, r2, #24
    81ce:	2000      	movs	r0, #0
    81d0:	2a7e      	cmp	r2, #126	; 0x7e
    81d2:	dd0d      	ble.n	81f0 <__aeabi_f2iz+0x2c>
    81d4:	2a9d      	cmp	r2, #157	; 0x9d
    81d6:	dc0c      	bgt.n	81f2 <__aeabi_f2iz+0x2e>
    81d8:	2080      	movs	r0, #128	; 0x80
    81da:	0400      	lsls	r0, r0, #16
    81dc:	4301      	orrs	r1, r0
    81de:	2a95      	cmp	r2, #149	; 0x95
    81e0:	dc0a      	bgt.n	81f8 <__aeabi_f2iz+0x34>
    81e2:	2096      	movs	r0, #150	; 0x96
    81e4:	1a82      	subs	r2, r0, r2
    81e6:	40d1      	lsrs	r1, r2
    81e8:	1c0a      	adds	r2, r1, #0
    81ea:	4258      	negs	r0, r3
    81ec:	4042      	eors	r2, r0
    81ee:	18d0      	adds	r0, r2, r3
    81f0:	4770      	bx	lr
    81f2:	4a03      	ldr	r2, [pc, #12]	; (8200 <__aeabi_f2iz+0x3c>)
    81f4:	1898      	adds	r0, r3, r2
    81f6:	e7fb      	b.n	81f0 <__aeabi_f2iz+0x2c>
    81f8:	3a96      	subs	r2, #150	; 0x96
    81fa:	4091      	lsls	r1, r2
    81fc:	1c0a      	adds	r2, r1, #0
    81fe:	e7f4      	b.n	81ea <__aeabi_f2iz+0x26>
    8200:	7fffffff 	.word	0x7fffffff

00008204 <__aeabi_i2f>:
    8204:	b570      	push	{r4, r5, r6, lr}
    8206:	1e04      	subs	r4, r0, #0
    8208:	d039      	beq.n	827e <__aeabi_i2f+0x7a>
    820a:	0fc5      	lsrs	r5, r0, #31
    820c:	d000      	beq.n	8210 <__aeabi_i2f+0xc>
    820e:	4244      	negs	r4, r0
    8210:	1c20      	adds	r0, r4, #0
    8212:	f001 ff89 	bl	a128 <__clzsi2>
    8216:	239e      	movs	r3, #158	; 0x9e
    8218:	1c26      	adds	r6, r4, #0
    821a:	1a1b      	subs	r3, r3, r0
    821c:	2b96      	cmp	r3, #150	; 0x96
    821e:	dc07      	bgt.n	8230 <__aeabi_i2f+0x2c>
    8220:	2808      	cmp	r0, #8
    8222:	dd01      	ble.n	8228 <__aeabi_i2f+0x24>
    8224:	3808      	subs	r0, #8
    8226:	4084      	lsls	r4, r0
    8228:	0264      	lsls	r4, r4, #9
    822a:	0a64      	lsrs	r4, r4, #9
    822c:	b2d8      	uxtb	r0, r3
    822e:	e01e      	b.n	826e <__aeabi_i2f+0x6a>
    8230:	2b99      	cmp	r3, #153	; 0x99
    8232:	dd0a      	ble.n	824a <__aeabi_i2f+0x46>
    8234:	2205      	movs	r2, #5
    8236:	1c21      	adds	r1, r4, #0
    8238:	1a12      	subs	r2, r2, r0
    823a:	40d1      	lsrs	r1, r2
    823c:	1c0a      	adds	r2, r1, #0
    823e:	1c01      	adds	r1, r0, #0
    8240:	311b      	adds	r1, #27
    8242:	408e      	lsls	r6, r1
    8244:	1e71      	subs	r1, r6, #1
    8246:	418e      	sbcs	r6, r1
    8248:	4316      	orrs	r6, r2
    824a:	2805      	cmp	r0, #5
    824c:	dd01      	ble.n	8252 <__aeabi_i2f+0x4e>
    824e:	1f42      	subs	r2, r0, #5
    8250:	4096      	lsls	r6, r2
    8252:	4c0f      	ldr	r4, [pc, #60]	; (8290 <__aeabi_i2f+0x8c>)
    8254:	4034      	ands	r4, r6
    8256:	0772      	lsls	r2, r6, #29
    8258:	d004      	beq.n	8264 <__aeabi_i2f+0x60>
    825a:	220f      	movs	r2, #15
    825c:	4016      	ands	r6, r2
    825e:	2e04      	cmp	r6, #4
    8260:	d000      	beq.n	8264 <__aeabi_i2f+0x60>
    8262:	3404      	adds	r4, #4
    8264:	0162      	lsls	r2, r4, #5
    8266:	d40e      	bmi.n	8286 <__aeabi_i2f+0x82>
    8268:	01a4      	lsls	r4, r4, #6
    826a:	0a64      	lsrs	r4, r4, #9
    826c:	b2d8      	uxtb	r0, r3
    826e:	0264      	lsls	r4, r4, #9
    8270:	05c0      	lsls	r0, r0, #23
    8272:	0a64      	lsrs	r4, r4, #9
    8274:	07ed      	lsls	r5, r5, #31
    8276:	4304      	orrs	r4, r0
    8278:	432c      	orrs	r4, r5
    827a:	1c20      	adds	r0, r4, #0
    827c:	bd70      	pop	{r4, r5, r6, pc}
    827e:	2500      	movs	r5, #0
    8280:	2000      	movs	r0, #0
    8282:	2400      	movs	r4, #0
    8284:	e7f3      	b.n	826e <__aeabi_i2f+0x6a>
    8286:	4b02      	ldr	r3, [pc, #8]	; (8290 <__aeabi_i2f+0x8c>)
    8288:	401c      	ands	r4, r3
    828a:	239f      	movs	r3, #159	; 0x9f
    828c:	1a1b      	subs	r3, r3, r0
    828e:	e7eb      	b.n	8268 <__aeabi_i2f+0x64>
    8290:	fbffffff 	.word	0xfbffffff

00008294 <__aeabi_ui2f>:
    8294:	b510      	push	{r4, lr}
    8296:	1e04      	subs	r4, r0, #0
    8298:	d035      	beq.n	8306 <__aeabi_ui2f+0x72>
    829a:	f001 ff45 	bl	a128 <__clzsi2>
    829e:	219e      	movs	r1, #158	; 0x9e
    82a0:	1a09      	subs	r1, r1, r0
    82a2:	2996      	cmp	r1, #150	; 0x96
    82a4:	dc09      	bgt.n	82ba <__aeabi_ui2f+0x26>
    82a6:	2808      	cmp	r0, #8
    82a8:	dd30      	ble.n	830c <__aeabi_ui2f+0x78>
    82aa:	1c02      	adds	r2, r0, #0
    82ac:	1c23      	adds	r3, r4, #0
    82ae:	3a08      	subs	r2, #8
    82b0:	4093      	lsls	r3, r2
    82b2:	025b      	lsls	r3, r3, #9
    82b4:	0a5b      	lsrs	r3, r3, #9
    82b6:	b2c8      	uxtb	r0, r1
    82b8:	e020      	b.n	82fc <__aeabi_ui2f+0x68>
    82ba:	2999      	cmp	r1, #153	; 0x99
    82bc:	dd0c      	ble.n	82d8 <__aeabi_ui2f+0x44>
    82be:	2205      	movs	r2, #5
    82c0:	1c23      	adds	r3, r4, #0
    82c2:	1a12      	subs	r2, r2, r0
    82c4:	40d3      	lsrs	r3, r2
    82c6:	1c1a      	adds	r2, r3, #0
    82c8:	1c03      	adds	r3, r0, #0
    82ca:	331b      	adds	r3, #27
    82cc:	409c      	lsls	r4, r3
    82ce:	1c23      	adds	r3, r4, #0
    82d0:	1e5c      	subs	r4, r3, #1
    82d2:	41a3      	sbcs	r3, r4
    82d4:	4313      	orrs	r3, r2
    82d6:	1c1c      	adds	r4, r3, #0
    82d8:	2805      	cmp	r0, #5
    82da:	dd01      	ble.n	82e0 <__aeabi_ui2f+0x4c>
    82dc:	1f43      	subs	r3, r0, #5
    82de:	409c      	lsls	r4, r3
    82e0:	4b0f      	ldr	r3, [pc, #60]	; (8320 <__aeabi_ui2f+0x8c>)
    82e2:	4023      	ands	r3, r4
    82e4:	0762      	lsls	r2, r4, #29
    82e6:	d004      	beq.n	82f2 <__aeabi_ui2f+0x5e>
    82e8:	220f      	movs	r2, #15
    82ea:	4014      	ands	r4, r2
    82ec:	2c04      	cmp	r4, #4
    82ee:	d000      	beq.n	82f2 <__aeabi_ui2f+0x5e>
    82f0:	3304      	adds	r3, #4
    82f2:	015a      	lsls	r2, r3, #5
    82f4:	d40e      	bmi.n	8314 <__aeabi_ui2f+0x80>
    82f6:	019b      	lsls	r3, r3, #6
    82f8:	0a5b      	lsrs	r3, r3, #9
    82fa:	b2c8      	uxtb	r0, r1
    82fc:	025b      	lsls	r3, r3, #9
    82fe:	0a5b      	lsrs	r3, r3, #9
    8300:	05c0      	lsls	r0, r0, #23
    8302:	4318      	orrs	r0, r3
    8304:	bd10      	pop	{r4, pc}
    8306:	2000      	movs	r0, #0
    8308:	2300      	movs	r3, #0
    830a:	e7f7      	b.n	82fc <__aeabi_ui2f+0x68>
    830c:	0263      	lsls	r3, r4, #9
    830e:	0a5b      	lsrs	r3, r3, #9
    8310:	b2c8      	uxtb	r0, r1
    8312:	e7f3      	b.n	82fc <__aeabi_ui2f+0x68>
    8314:	219f      	movs	r1, #159	; 0x9f
    8316:	4a02      	ldr	r2, [pc, #8]	; (8320 <__aeabi_ui2f+0x8c>)
    8318:	1a09      	subs	r1, r1, r0
    831a:	4013      	ands	r3, r2
    831c:	e7eb      	b.n	82f6 <__aeabi_ui2f+0x62>
    831e:	46c0      	nop			; (mov r8, r8)
    8320:	fbffffff 	.word	0xfbffffff

00008324 <__aeabi_dadd>:
    8324:	b5f0      	push	{r4, r5, r6, r7, lr}
    8326:	4645      	mov	r5, r8
    8328:	4657      	mov	r7, sl
    832a:	464e      	mov	r6, r9
    832c:	4694      	mov	ip, r2
    832e:	004c      	lsls	r4, r1, #1
    8330:	030a      	lsls	r2, r1, #12
    8332:	0fc9      	lsrs	r1, r1, #31
    8334:	b4e0      	push	{r5, r6, r7}
    8336:	4688      	mov	r8, r1
    8338:	1c0e      	adds	r6, r1, #0
    833a:	0319      	lsls	r1, r3, #12
    833c:	0f47      	lsrs	r7, r0, #29
    833e:	00c5      	lsls	r5, r0, #3
    8340:	0a48      	lsrs	r0, r1, #9
    8342:	4661      	mov	r1, ip
    8344:	0f49      	lsrs	r1, r1, #29
    8346:	4301      	orrs	r1, r0
    8348:	4660      	mov	r0, ip
    834a:	0a52      	lsrs	r2, r2, #9
    834c:	4317      	orrs	r7, r2
    834e:	00c0      	lsls	r0, r0, #3
    8350:	005a      	lsls	r2, r3, #1
    8352:	0d64      	lsrs	r4, r4, #21
    8354:	0d52      	lsrs	r2, r2, #21
    8356:	0fdb      	lsrs	r3, r3, #31
    8358:	4684      	mov	ip, r0
    835a:	4598      	cmp	r8, r3
    835c:	d100      	bne.n	8360 <__aeabi_dadd+0x3c>
    835e:	e0a7      	b.n	84b0 <__aeabi_dadd+0x18c>
    8360:	1aa0      	subs	r0, r4, r2
    8362:	2800      	cmp	r0, #0
    8364:	dc00      	bgt.n	8368 <__aeabi_dadd+0x44>
    8366:	e101      	b.n	856c <__aeabi_dadd+0x248>
    8368:	2a00      	cmp	r2, #0
    836a:	d13d      	bne.n	83e8 <__aeabi_dadd+0xc4>
    836c:	4663      	mov	r3, ip
    836e:	430b      	orrs	r3, r1
    8370:	d000      	beq.n	8374 <__aeabi_dadd+0x50>
    8372:	e0d4      	b.n	851e <__aeabi_dadd+0x1fa>
    8374:	076b      	lsls	r3, r5, #29
    8376:	d100      	bne.n	837a <__aeabi_dadd+0x56>
    8378:	e088      	b.n	848c <__aeabi_dadd+0x168>
    837a:	230f      	movs	r3, #15
    837c:	402b      	ands	r3, r5
    837e:	2b04      	cmp	r3, #4
    8380:	d100      	bne.n	8384 <__aeabi_dadd+0x60>
    8382:	e083      	b.n	848c <__aeabi_dadd+0x168>
    8384:	1d2a      	adds	r2, r5, #4
    8386:	42aa      	cmp	r2, r5
    8388:	41ad      	sbcs	r5, r5
    838a:	2380      	movs	r3, #128	; 0x80
    838c:	426d      	negs	r5, r5
    838e:	197f      	adds	r7, r7, r5
    8390:	041b      	lsls	r3, r3, #16
    8392:	403b      	ands	r3, r7
    8394:	4646      	mov	r6, r8
    8396:	1c15      	adds	r5, r2, #0
    8398:	2b00      	cmp	r3, #0
    839a:	d100      	bne.n	839e <__aeabi_dadd+0x7a>
    839c:	e07c      	b.n	8498 <__aeabi_dadd+0x174>
    839e:	4bcc      	ldr	r3, [pc, #816]	; (86d0 <__aeabi_dadd+0x3ac>)
    83a0:	3401      	adds	r4, #1
    83a2:	429c      	cmp	r4, r3
    83a4:	d100      	bne.n	83a8 <__aeabi_dadd+0x84>
    83a6:	e0fd      	b.n	85a4 <__aeabi_dadd+0x280>
    83a8:	1c3a      	adds	r2, r7, #0
    83aa:	4bca      	ldr	r3, [pc, #808]	; (86d4 <__aeabi_dadd+0x3b0>)
    83ac:	08ed      	lsrs	r5, r5, #3
    83ae:	401a      	ands	r2, r3
    83b0:	0750      	lsls	r0, r2, #29
    83b2:	0564      	lsls	r4, r4, #21
    83b4:	0252      	lsls	r2, r2, #9
    83b6:	4305      	orrs	r5, r0
    83b8:	0b12      	lsrs	r2, r2, #12
    83ba:	0d64      	lsrs	r4, r4, #21
    83bc:	2100      	movs	r1, #0
    83be:	0312      	lsls	r2, r2, #12
    83c0:	0d0b      	lsrs	r3, r1, #20
    83c2:	051b      	lsls	r3, r3, #20
    83c4:	0564      	lsls	r4, r4, #21
    83c6:	0b12      	lsrs	r2, r2, #12
    83c8:	431a      	orrs	r2, r3
    83ca:	0863      	lsrs	r3, r4, #1
    83cc:	4cc2      	ldr	r4, [pc, #776]	; (86d8 <__aeabi_dadd+0x3b4>)
    83ce:	07f6      	lsls	r6, r6, #31
    83d0:	4014      	ands	r4, r2
    83d2:	431c      	orrs	r4, r3
    83d4:	0064      	lsls	r4, r4, #1
    83d6:	0864      	lsrs	r4, r4, #1
    83d8:	4334      	orrs	r4, r6
    83da:	1c28      	adds	r0, r5, #0
    83dc:	1c21      	adds	r1, r4, #0
    83de:	bc1c      	pop	{r2, r3, r4}
    83e0:	4690      	mov	r8, r2
    83e2:	4699      	mov	r9, r3
    83e4:	46a2      	mov	sl, r4
    83e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83e8:	4bb9      	ldr	r3, [pc, #740]	; (86d0 <__aeabi_dadd+0x3ac>)
    83ea:	429c      	cmp	r4, r3
    83ec:	d0c2      	beq.n	8374 <__aeabi_dadd+0x50>
    83ee:	2380      	movs	r3, #128	; 0x80
    83f0:	041b      	lsls	r3, r3, #16
    83f2:	4319      	orrs	r1, r3
    83f4:	2838      	cmp	r0, #56	; 0x38
    83f6:	dd00      	ble.n	83fa <__aeabi_dadd+0xd6>
    83f8:	e0ec      	b.n	85d4 <__aeabi_dadd+0x2b0>
    83fa:	281f      	cmp	r0, #31
    83fc:	dd00      	ble.n	8400 <__aeabi_dadd+0xdc>
    83fe:	e121      	b.n	8644 <__aeabi_dadd+0x320>
    8400:	2220      	movs	r2, #32
    8402:	1c0e      	adds	r6, r1, #0
    8404:	4663      	mov	r3, ip
    8406:	1a12      	subs	r2, r2, r0
    8408:	4096      	lsls	r6, r2
    840a:	40c3      	lsrs	r3, r0
    840c:	4333      	orrs	r3, r6
    840e:	4666      	mov	r6, ip
    8410:	4096      	lsls	r6, r2
    8412:	1c32      	adds	r2, r6, #0
    8414:	1e56      	subs	r6, r2, #1
    8416:	41b2      	sbcs	r2, r6
    8418:	4313      	orrs	r3, r2
    841a:	1c0a      	adds	r2, r1, #0
    841c:	40c2      	lsrs	r2, r0
    841e:	1aeb      	subs	r3, r5, r3
    8420:	429d      	cmp	r5, r3
    8422:	41b6      	sbcs	r6, r6
    8424:	1c1d      	adds	r5, r3, #0
    8426:	1aba      	subs	r2, r7, r2
    8428:	4276      	negs	r6, r6
    842a:	1b97      	subs	r7, r2, r6
    842c:	023b      	lsls	r3, r7, #8
    842e:	d400      	bmi.n	8432 <__aeabi_dadd+0x10e>
    8430:	e097      	b.n	8562 <__aeabi_dadd+0x23e>
    8432:	027a      	lsls	r2, r7, #9
    8434:	0a56      	lsrs	r6, r2, #9
    8436:	2e00      	cmp	r6, #0
    8438:	d100      	bne.n	843c <__aeabi_dadd+0x118>
    843a:	e0b6      	b.n	85aa <__aeabi_dadd+0x286>
    843c:	1c30      	adds	r0, r6, #0
    843e:	f001 fe73 	bl	a128 <__clzsi2>
    8442:	1c03      	adds	r3, r0, #0
    8444:	3b08      	subs	r3, #8
    8446:	2b1f      	cmp	r3, #31
    8448:	dd00      	ble.n	844c <__aeabi_dadd+0x128>
    844a:	e0b7      	b.n	85bc <__aeabi_dadd+0x298>
    844c:	409e      	lsls	r6, r3
    844e:	1c37      	adds	r7, r6, #0
    8450:	2628      	movs	r6, #40	; 0x28
    8452:	1c2a      	adds	r2, r5, #0
    8454:	1a36      	subs	r6, r6, r0
    8456:	40f2      	lsrs	r2, r6
    8458:	1c16      	adds	r6, r2, #0
    845a:	409d      	lsls	r5, r3
    845c:	433e      	orrs	r6, r7
    845e:	429c      	cmp	r4, r3
    8460:	dd00      	ble.n	8464 <__aeabi_dadd+0x140>
    8462:	e0b2      	b.n	85ca <__aeabi_dadd+0x2a6>
    8464:	1b1c      	subs	r4, r3, r4
    8466:	1c62      	adds	r2, r4, #1
    8468:	2a1f      	cmp	r2, #31
    846a:	dd00      	ble.n	846e <__aeabi_dadd+0x14a>
    846c:	e0d8      	b.n	8620 <__aeabi_dadd+0x2fc>
    846e:	231f      	movs	r3, #31
    8470:	1c29      	adds	r1, r5, #0
    8472:	1b1c      	subs	r4, r3, r4
    8474:	1c33      	adds	r3, r6, #0
    8476:	40a5      	lsls	r5, r4
    8478:	40a3      	lsls	r3, r4
    847a:	40d1      	lsrs	r1, r2
    847c:	1e6c      	subs	r4, r5, #1
    847e:	41a5      	sbcs	r5, r4
    8480:	40d6      	lsrs	r6, r2
    8482:	4319      	orrs	r1, r3
    8484:	430d      	orrs	r5, r1
    8486:	1c37      	adds	r7, r6, #0
    8488:	2400      	movs	r4, #0
    848a:	e773      	b.n	8374 <__aeabi_dadd+0x50>
    848c:	2380      	movs	r3, #128	; 0x80
    848e:	041b      	lsls	r3, r3, #16
    8490:	403b      	ands	r3, r7
    8492:	4646      	mov	r6, r8
    8494:	d000      	beq.n	8498 <__aeabi_dadd+0x174>
    8496:	e782      	b.n	839e <__aeabi_dadd+0x7a>
    8498:	4b8d      	ldr	r3, [pc, #564]	; (86d0 <__aeabi_dadd+0x3ac>)
    849a:	08ed      	lsrs	r5, r5, #3
    849c:	0778      	lsls	r0, r7, #29
    849e:	4305      	orrs	r5, r0
    84a0:	08fa      	lsrs	r2, r7, #3
    84a2:	429c      	cmp	r4, r3
    84a4:	d032      	beq.n	850c <__aeabi_dadd+0x1e8>
    84a6:	0312      	lsls	r2, r2, #12
    84a8:	0564      	lsls	r4, r4, #21
    84aa:	0b12      	lsrs	r2, r2, #12
    84ac:	0d64      	lsrs	r4, r4, #21
    84ae:	e785      	b.n	83bc <__aeabi_dadd+0x98>
    84b0:	1aa3      	subs	r3, r4, r2
    84b2:	2b00      	cmp	r3, #0
    84b4:	dc00      	bgt.n	84b8 <__aeabi_dadd+0x194>
    84b6:	e094      	b.n	85e2 <__aeabi_dadd+0x2be>
    84b8:	2a00      	cmp	r2, #0
    84ba:	d03c      	beq.n	8536 <__aeabi_dadd+0x212>
    84bc:	4a84      	ldr	r2, [pc, #528]	; (86d0 <__aeabi_dadd+0x3ac>)
    84be:	4294      	cmp	r4, r2
    84c0:	d100      	bne.n	84c4 <__aeabi_dadd+0x1a0>
    84c2:	e757      	b.n	8374 <__aeabi_dadd+0x50>
    84c4:	2280      	movs	r2, #128	; 0x80
    84c6:	0412      	lsls	r2, r2, #16
    84c8:	4311      	orrs	r1, r2
    84ca:	2b38      	cmp	r3, #56	; 0x38
    84cc:	dc00      	bgt.n	84d0 <__aeabi_dadd+0x1ac>
    84ce:	e105      	b.n	86dc <__aeabi_dadd+0x3b8>
    84d0:	4663      	mov	r3, ip
    84d2:	4319      	orrs	r1, r3
    84d4:	1e48      	subs	r0, r1, #1
    84d6:	4181      	sbcs	r1, r0
    84d8:	2200      	movs	r2, #0
    84da:	b2c8      	uxtb	r0, r1
    84dc:	1940      	adds	r0, r0, r5
    84de:	42a8      	cmp	r0, r5
    84e0:	419b      	sbcs	r3, r3
    84e2:	1c05      	adds	r5, r0, #0
    84e4:	19d2      	adds	r2, r2, r7
    84e6:	425b      	negs	r3, r3
    84e8:	18d7      	adds	r7, r2, r3
    84ea:	023b      	lsls	r3, r7, #8
    84ec:	d539      	bpl.n	8562 <__aeabi_dadd+0x23e>
    84ee:	4b78      	ldr	r3, [pc, #480]	; (86d0 <__aeabi_dadd+0x3ac>)
    84f0:	3401      	adds	r4, #1
    84f2:	429c      	cmp	r4, r3
    84f4:	d100      	bne.n	84f8 <__aeabi_dadd+0x1d4>
    84f6:	e14c      	b.n	8792 <__aeabi_dadd+0x46e>
    84f8:	2001      	movs	r0, #1
    84fa:	4a76      	ldr	r2, [pc, #472]	; (86d4 <__aeabi_dadd+0x3b0>)
    84fc:	086b      	lsrs	r3, r5, #1
    84fe:	403a      	ands	r2, r7
    8500:	4028      	ands	r0, r5
    8502:	4318      	orrs	r0, r3
    8504:	07d5      	lsls	r5, r2, #31
    8506:	4305      	orrs	r5, r0
    8508:	0857      	lsrs	r7, r2, #1
    850a:	e733      	b.n	8374 <__aeabi_dadd+0x50>
    850c:	1c2b      	adds	r3, r5, #0
    850e:	4313      	orrs	r3, r2
    8510:	d048      	beq.n	85a4 <__aeabi_dadd+0x280>
    8512:	2380      	movs	r3, #128	; 0x80
    8514:	031b      	lsls	r3, r3, #12
    8516:	431a      	orrs	r2, r3
    8518:	0312      	lsls	r2, r2, #12
    851a:	0b12      	lsrs	r2, r2, #12
    851c:	e74e      	b.n	83bc <__aeabi_dadd+0x98>
    851e:	3801      	subs	r0, #1
    8520:	2800      	cmp	r0, #0
    8522:	d178      	bne.n	8616 <__aeabi_dadd+0x2f2>
    8524:	4663      	mov	r3, ip
    8526:	1aee      	subs	r6, r5, r3
    8528:	42b5      	cmp	r5, r6
    852a:	419b      	sbcs	r3, r3
    852c:	1a7a      	subs	r2, r7, r1
    852e:	425b      	negs	r3, r3
    8530:	1ad7      	subs	r7, r2, r3
    8532:	1c35      	adds	r5, r6, #0
    8534:	e77a      	b.n	842c <__aeabi_dadd+0x108>
    8536:	1c02      	adds	r2, r0, #0
    8538:	430a      	orrs	r2, r1
    853a:	d100      	bne.n	853e <__aeabi_dadd+0x21a>
    853c:	e71a      	b.n	8374 <__aeabi_dadd+0x50>
    853e:	3b01      	subs	r3, #1
    8540:	2b00      	cmp	r3, #0
    8542:	d000      	beq.n	8546 <__aeabi_dadd+0x222>
    8544:	e0f2      	b.n	872c <__aeabi_dadd+0x408>
    8546:	1940      	adds	r0, r0, r5
    8548:	42a8      	cmp	r0, r5
    854a:	419b      	sbcs	r3, r3
    854c:	19ca      	adds	r2, r1, r7
    854e:	425b      	negs	r3, r3
    8550:	18d7      	adds	r7, r2, r3
    8552:	1c05      	adds	r5, r0, #0
    8554:	e7c9      	b.n	84ea <__aeabi_dadd+0x1c6>
    8556:	1c13      	adds	r3, r2, #0
    8558:	4333      	orrs	r3, r6
    855a:	d100      	bne.n	855e <__aeabi_dadd+0x23a>
    855c:	e118      	b.n	8790 <__aeabi_dadd+0x46c>
    855e:	1c17      	adds	r7, r2, #0
    8560:	1c35      	adds	r5, r6, #0
    8562:	4646      	mov	r6, r8
    8564:	076b      	lsls	r3, r5, #29
    8566:	d000      	beq.n	856a <__aeabi_dadd+0x246>
    8568:	e707      	b.n	837a <__aeabi_dadd+0x56>
    856a:	e795      	b.n	8498 <__aeabi_dadd+0x174>
    856c:	2800      	cmp	r0, #0
    856e:	d17a      	bne.n	8666 <__aeabi_dadd+0x342>
    8570:	1c62      	adds	r2, r4, #1
    8572:	0552      	lsls	r2, r2, #21
    8574:	0d52      	lsrs	r2, r2, #21
    8576:	2a01      	cmp	r2, #1
    8578:	dc00      	bgt.n	857c <__aeabi_dadd+0x258>
    857a:	e0fb      	b.n	8774 <__aeabi_dadd+0x450>
    857c:	4662      	mov	r2, ip
    857e:	1aaa      	subs	r2, r5, r2
    8580:	4295      	cmp	r5, r2
    8582:	41b6      	sbcs	r6, r6
    8584:	4691      	mov	r9, r2
    8586:	1a78      	subs	r0, r7, r1
    8588:	4272      	negs	r2, r6
    858a:	1a86      	subs	r6, r0, r2
    858c:	0232      	lsls	r2, r6, #8
    858e:	d400      	bmi.n	8592 <__aeabi_dadd+0x26e>
    8590:	e093      	b.n	86ba <__aeabi_dadd+0x396>
    8592:	4662      	mov	r2, ip
    8594:	1b55      	subs	r5, r2, r5
    8596:	45ac      	cmp	ip, r5
    8598:	4180      	sbcs	r0, r0
    859a:	1bcf      	subs	r7, r1, r7
    859c:	4240      	negs	r0, r0
    859e:	1a3e      	subs	r6, r7, r0
    85a0:	4698      	mov	r8, r3
    85a2:	e748      	b.n	8436 <__aeabi_dadd+0x112>
    85a4:	2200      	movs	r2, #0
    85a6:	2500      	movs	r5, #0
    85a8:	e708      	b.n	83bc <__aeabi_dadd+0x98>
    85aa:	1c28      	adds	r0, r5, #0
    85ac:	f001 fdbc 	bl	a128 <__clzsi2>
    85b0:	3020      	adds	r0, #32
    85b2:	1c03      	adds	r3, r0, #0
    85b4:	3b08      	subs	r3, #8
    85b6:	2b1f      	cmp	r3, #31
    85b8:	dc00      	bgt.n	85bc <__aeabi_dadd+0x298>
    85ba:	e747      	b.n	844c <__aeabi_dadd+0x128>
    85bc:	3828      	subs	r0, #40	; 0x28
    85be:	4085      	lsls	r5, r0
    85c0:	1c2e      	adds	r6, r5, #0
    85c2:	2500      	movs	r5, #0
    85c4:	429c      	cmp	r4, r3
    85c6:	dc00      	bgt.n	85ca <__aeabi_dadd+0x2a6>
    85c8:	e74c      	b.n	8464 <__aeabi_dadd+0x140>
    85ca:	4a42      	ldr	r2, [pc, #264]	; (86d4 <__aeabi_dadd+0x3b0>)
    85cc:	1ae4      	subs	r4, r4, r3
    85ce:	4016      	ands	r6, r2
    85d0:	1c37      	adds	r7, r6, #0
    85d2:	e6cf      	b.n	8374 <__aeabi_dadd+0x50>
    85d4:	4663      	mov	r3, ip
    85d6:	4319      	orrs	r1, r3
    85d8:	1e4b      	subs	r3, r1, #1
    85da:	4199      	sbcs	r1, r3
    85dc:	2200      	movs	r2, #0
    85de:	b2cb      	uxtb	r3, r1
    85e0:	e71d      	b.n	841e <__aeabi_dadd+0xfa>
    85e2:	2b00      	cmp	r3, #0
    85e4:	d000      	beq.n	85e8 <__aeabi_dadd+0x2c4>
    85e6:	e0f2      	b.n	87ce <__aeabi_dadd+0x4aa>
    85e8:	1c60      	adds	r0, r4, #1
    85ea:	0543      	lsls	r3, r0, #21
    85ec:	0d5b      	lsrs	r3, r3, #21
    85ee:	2b01      	cmp	r3, #1
    85f0:	dc00      	bgt.n	85f4 <__aeabi_dadd+0x2d0>
    85f2:	e0a4      	b.n	873e <__aeabi_dadd+0x41a>
    85f4:	4b36      	ldr	r3, [pc, #216]	; (86d0 <__aeabi_dadd+0x3ac>)
    85f6:	4298      	cmp	r0, r3
    85f8:	d100      	bne.n	85fc <__aeabi_dadd+0x2d8>
    85fa:	e121      	b.n	8840 <__aeabi_dadd+0x51c>
    85fc:	4663      	mov	r3, ip
    85fe:	195c      	adds	r4, r3, r5
    8600:	42ac      	cmp	r4, r5
    8602:	419b      	sbcs	r3, r3
    8604:	19cf      	adds	r7, r1, r7
    8606:	425b      	negs	r3, r3
    8608:	18fa      	adds	r2, r7, r3
    860a:	0864      	lsrs	r4, r4, #1
    860c:	07d5      	lsls	r5, r2, #31
    860e:	4325      	orrs	r5, r4
    8610:	0857      	lsrs	r7, r2, #1
    8612:	1c04      	adds	r4, r0, #0
    8614:	e6ae      	b.n	8374 <__aeabi_dadd+0x50>
    8616:	4b2e      	ldr	r3, [pc, #184]	; (86d0 <__aeabi_dadd+0x3ac>)
    8618:	429c      	cmp	r4, r3
    861a:	d000      	beq.n	861e <__aeabi_dadd+0x2fa>
    861c:	e6ea      	b.n	83f4 <__aeabi_dadd+0xd0>
    861e:	e6a9      	b.n	8374 <__aeabi_dadd+0x50>
    8620:	1c21      	adds	r1, r4, #0
    8622:	1c33      	adds	r3, r6, #0
    8624:	391f      	subs	r1, #31
    8626:	40cb      	lsrs	r3, r1
    8628:	1c19      	adds	r1, r3, #0
    862a:	2a20      	cmp	r2, #32
    862c:	d100      	bne.n	8630 <__aeabi_dadd+0x30c>
    862e:	e082      	b.n	8736 <__aeabi_dadd+0x412>
    8630:	233f      	movs	r3, #63	; 0x3f
    8632:	1b1c      	subs	r4, r3, r4
    8634:	40a6      	lsls	r6, r4
    8636:	4335      	orrs	r5, r6
    8638:	1e6e      	subs	r6, r5, #1
    863a:	41b5      	sbcs	r5, r6
    863c:	2700      	movs	r7, #0
    863e:	430d      	orrs	r5, r1
    8640:	2400      	movs	r4, #0
    8642:	e78e      	b.n	8562 <__aeabi_dadd+0x23e>
    8644:	1c03      	adds	r3, r0, #0
    8646:	1c0e      	adds	r6, r1, #0
    8648:	3b20      	subs	r3, #32
    864a:	40de      	lsrs	r6, r3
    864c:	2820      	cmp	r0, #32
    864e:	d074      	beq.n	873a <__aeabi_dadd+0x416>
    8650:	2340      	movs	r3, #64	; 0x40
    8652:	1a1b      	subs	r3, r3, r0
    8654:	4099      	lsls	r1, r3
    8656:	1c0b      	adds	r3, r1, #0
    8658:	4662      	mov	r2, ip
    865a:	4313      	orrs	r3, r2
    865c:	1e59      	subs	r1, r3, #1
    865e:	418b      	sbcs	r3, r1
    8660:	2200      	movs	r2, #0
    8662:	4333      	orrs	r3, r6
    8664:	e6db      	b.n	841e <__aeabi_dadd+0xfa>
    8666:	2c00      	cmp	r4, #0
    8668:	d050      	beq.n	870c <__aeabi_dadd+0x3e8>
    866a:	4c19      	ldr	r4, [pc, #100]	; (86d0 <__aeabi_dadd+0x3ac>)
    866c:	42a2      	cmp	r2, r4
    866e:	d100      	bne.n	8672 <__aeabi_dadd+0x34e>
    8670:	e0a8      	b.n	87c4 <__aeabi_dadd+0x4a0>
    8672:	2480      	movs	r4, #128	; 0x80
    8674:	0424      	lsls	r4, r4, #16
    8676:	4240      	negs	r0, r0
    8678:	4327      	orrs	r7, r4
    867a:	2838      	cmp	r0, #56	; 0x38
    867c:	dd00      	ble.n	8680 <__aeabi_dadd+0x35c>
    867e:	e0d9      	b.n	8834 <__aeabi_dadd+0x510>
    8680:	281f      	cmp	r0, #31
    8682:	dd00      	ble.n	8686 <__aeabi_dadd+0x362>
    8684:	e139      	b.n	88fa <__aeabi_dadd+0x5d6>
    8686:	2420      	movs	r4, #32
    8688:	1c3e      	adds	r6, r7, #0
    868a:	1a24      	subs	r4, r4, r0
    868c:	40a6      	lsls	r6, r4
    868e:	46b0      	mov	r8, r6
    8690:	1c2e      	adds	r6, r5, #0
    8692:	46a1      	mov	r9, r4
    8694:	40c6      	lsrs	r6, r0
    8696:	4644      	mov	r4, r8
    8698:	4326      	orrs	r6, r4
    869a:	464c      	mov	r4, r9
    869c:	40a5      	lsls	r5, r4
    869e:	1e6c      	subs	r4, r5, #1
    86a0:	41a5      	sbcs	r5, r4
    86a2:	40c7      	lsrs	r7, r0
    86a4:	4335      	orrs	r5, r6
    86a6:	4660      	mov	r0, ip
    86a8:	1b45      	subs	r5, r0, r5
    86aa:	1bcf      	subs	r7, r1, r7
    86ac:	45ac      	cmp	ip, r5
    86ae:	4189      	sbcs	r1, r1
    86b0:	4249      	negs	r1, r1
    86b2:	1a7f      	subs	r7, r7, r1
    86b4:	1c14      	adds	r4, r2, #0
    86b6:	4698      	mov	r8, r3
    86b8:	e6b8      	b.n	842c <__aeabi_dadd+0x108>
    86ba:	464b      	mov	r3, r9
    86bc:	464d      	mov	r5, r9
    86be:	4333      	orrs	r3, r6
    86c0:	d000      	beq.n	86c4 <__aeabi_dadd+0x3a0>
    86c2:	e6b8      	b.n	8436 <__aeabi_dadd+0x112>
    86c4:	2600      	movs	r6, #0
    86c6:	2700      	movs	r7, #0
    86c8:	2400      	movs	r4, #0
    86ca:	2500      	movs	r5, #0
    86cc:	e6e4      	b.n	8498 <__aeabi_dadd+0x174>
    86ce:	46c0      	nop			; (mov r8, r8)
    86d0:	000007ff 	.word	0x000007ff
    86d4:	ff7fffff 	.word	0xff7fffff
    86d8:	800fffff 	.word	0x800fffff
    86dc:	2b1f      	cmp	r3, #31
    86de:	dc5b      	bgt.n	8798 <__aeabi_dadd+0x474>
    86e0:	2220      	movs	r2, #32
    86e2:	1c08      	adds	r0, r1, #0
    86e4:	1ad2      	subs	r2, r2, r3
    86e6:	4090      	lsls	r0, r2
    86e8:	4681      	mov	r9, r0
    86ea:	4660      	mov	r0, ip
    86ec:	4692      	mov	sl, r2
    86ee:	40d8      	lsrs	r0, r3
    86f0:	464a      	mov	r2, r9
    86f2:	4310      	orrs	r0, r2
    86f4:	4681      	mov	r9, r0
    86f6:	4652      	mov	r2, sl
    86f8:	4660      	mov	r0, ip
    86fa:	4090      	lsls	r0, r2
    86fc:	1c02      	adds	r2, r0, #0
    86fe:	1e50      	subs	r0, r2, #1
    8700:	4182      	sbcs	r2, r0
    8702:	4648      	mov	r0, r9
    8704:	4310      	orrs	r0, r2
    8706:	1c0a      	adds	r2, r1, #0
    8708:	40da      	lsrs	r2, r3
    870a:	e6e7      	b.n	84dc <__aeabi_dadd+0x1b8>
    870c:	1c3c      	adds	r4, r7, #0
    870e:	432c      	orrs	r4, r5
    8710:	d058      	beq.n	87c4 <__aeabi_dadd+0x4a0>
    8712:	43c0      	mvns	r0, r0
    8714:	2800      	cmp	r0, #0
    8716:	d151      	bne.n	87bc <__aeabi_dadd+0x498>
    8718:	4660      	mov	r0, ip
    871a:	1b45      	subs	r5, r0, r5
    871c:	45ac      	cmp	ip, r5
    871e:	4180      	sbcs	r0, r0
    8720:	1bcf      	subs	r7, r1, r7
    8722:	4240      	negs	r0, r0
    8724:	1a3f      	subs	r7, r7, r0
    8726:	1c14      	adds	r4, r2, #0
    8728:	4698      	mov	r8, r3
    872a:	e67f      	b.n	842c <__aeabi_dadd+0x108>
    872c:	4a8f      	ldr	r2, [pc, #572]	; (896c <__aeabi_dadd+0x648>)
    872e:	4294      	cmp	r4, r2
    8730:	d000      	beq.n	8734 <__aeabi_dadd+0x410>
    8732:	e6ca      	b.n	84ca <__aeabi_dadd+0x1a6>
    8734:	e61e      	b.n	8374 <__aeabi_dadd+0x50>
    8736:	2600      	movs	r6, #0
    8738:	e77d      	b.n	8636 <__aeabi_dadd+0x312>
    873a:	2300      	movs	r3, #0
    873c:	e78c      	b.n	8658 <__aeabi_dadd+0x334>
    873e:	1c3b      	adds	r3, r7, #0
    8740:	432b      	orrs	r3, r5
    8742:	2c00      	cmp	r4, #0
    8744:	d000      	beq.n	8748 <__aeabi_dadd+0x424>
    8746:	e0bd      	b.n	88c4 <__aeabi_dadd+0x5a0>
    8748:	2b00      	cmp	r3, #0
    874a:	d100      	bne.n	874e <__aeabi_dadd+0x42a>
    874c:	e0f5      	b.n	893a <__aeabi_dadd+0x616>
    874e:	4663      	mov	r3, ip
    8750:	430b      	orrs	r3, r1
    8752:	d100      	bne.n	8756 <__aeabi_dadd+0x432>
    8754:	e60e      	b.n	8374 <__aeabi_dadd+0x50>
    8756:	4663      	mov	r3, ip
    8758:	195b      	adds	r3, r3, r5
    875a:	42ab      	cmp	r3, r5
    875c:	4180      	sbcs	r0, r0
    875e:	19ca      	adds	r2, r1, r7
    8760:	4240      	negs	r0, r0
    8762:	1817      	adds	r7, r2, r0
    8764:	023a      	lsls	r2, r7, #8
    8766:	d400      	bmi.n	876a <__aeabi_dadd+0x446>
    8768:	e0fc      	b.n	8964 <__aeabi_dadd+0x640>
    876a:	4a81      	ldr	r2, [pc, #516]	; (8970 <__aeabi_dadd+0x64c>)
    876c:	1c1d      	adds	r5, r3, #0
    876e:	4017      	ands	r7, r2
    8770:	3401      	adds	r4, #1
    8772:	e5ff      	b.n	8374 <__aeabi_dadd+0x50>
    8774:	1c3a      	adds	r2, r7, #0
    8776:	432a      	orrs	r2, r5
    8778:	2c00      	cmp	r4, #0
    877a:	d151      	bne.n	8820 <__aeabi_dadd+0x4fc>
    877c:	2a00      	cmp	r2, #0
    877e:	d000      	beq.n	8782 <__aeabi_dadd+0x45e>
    8780:	e085      	b.n	888e <__aeabi_dadd+0x56a>
    8782:	4662      	mov	r2, ip
    8784:	430a      	orrs	r2, r1
    8786:	d003      	beq.n	8790 <__aeabi_dadd+0x46c>
    8788:	1c0f      	adds	r7, r1, #0
    878a:	4665      	mov	r5, ip
    878c:	4698      	mov	r8, r3
    878e:	e5f1      	b.n	8374 <__aeabi_dadd+0x50>
    8790:	2600      	movs	r6, #0
    8792:	2700      	movs	r7, #0
    8794:	2500      	movs	r5, #0
    8796:	e67f      	b.n	8498 <__aeabi_dadd+0x174>
    8798:	1c18      	adds	r0, r3, #0
    879a:	1c0a      	adds	r2, r1, #0
    879c:	3820      	subs	r0, #32
    879e:	40c2      	lsrs	r2, r0
    87a0:	2b20      	cmp	r3, #32
    87a2:	d100      	bne.n	87a6 <__aeabi_dadd+0x482>
    87a4:	e0a7      	b.n	88f6 <__aeabi_dadd+0x5d2>
    87a6:	2040      	movs	r0, #64	; 0x40
    87a8:	1ac0      	subs	r0, r0, r3
    87aa:	4081      	lsls	r1, r0
    87ac:	1c08      	adds	r0, r1, #0
    87ae:	4663      	mov	r3, ip
    87b0:	4318      	orrs	r0, r3
    87b2:	1e41      	subs	r1, r0, #1
    87b4:	4188      	sbcs	r0, r1
    87b6:	4310      	orrs	r0, r2
    87b8:	2200      	movs	r2, #0
    87ba:	e68f      	b.n	84dc <__aeabi_dadd+0x1b8>
    87bc:	4c6b      	ldr	r4, [pc, #428]	; (896c <__aeabi_dadd+0x648>)
    87be:	42a2      	cmp	r2, r4
    87c0:	d000      	beq.n	87c4 <__aeabi_dadd+0x4a0>
    87c2:	e75a      	b.n	867a <__aeabi_dadd+0x356>
    87c4:	1c0f      	adds	r7, r1, #0
    87c6:	4665      	mov	r5, ip
    87c8:	1c14      	adds	r4, r2, #0
    87ca:	4698      	mov	r8, r3
    87cc:	e5d2      	b.n	8374 <__aeabi_dadd+0x50>
    87ce:	2c00      	cmp	r4, #0
    87d0:	d13a      	bne.n	8848 <__aeabi_dadd+0x524>
    87d2:	1c38      	adds	r0, r7, #0
    87d4:	4328      	orrs	r0, r5
    87d6:	d071      	beq.n	88bc <__aeabi_dadd+0x598>
    87d8:	43db      	mvns	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	d018      	beq.n	8810 <__aeabi_dadd+0x4ec>
    87de:	4863      	ldr	r0, [pc, #396]	; (896c <__aeabi_dadd+0x648>)
    87e0:	4282      	cmp	r2, r0
    87e2:	d06b      	beq.n	88bc <__aeabi_dadd+0x598>
    87e4:	2b38      	cmp	r3, #56	; 0x38
    87e6:	dd00      	ble.n	87ea <__aeabi_dadd+0x4c6>
    87e8:	e09d      	b.n	8926 <__aeabi_dadd+0x602>
    87ea:	2b1f      	cmp	r3, #31
    87ec:	dd00      	ble.n	87f0 <__aeabi_dadd+0x4cc>
    87ee:	e0a7      	b.n	8940 <__aeabi_dadd+0x61c>
    87f0:	2020      	movs	r0, #32
    87f2:	1c3c      	adds	r4, r7, #0
    87f4:	1ac0      	subs	r0, r0, r3
    87f6:	4084      	lsls	r4, r0
    87f8:	46a1      	mov	r9, r4
    87fa:	1c2c      	adds	r4, r5, #0
    87fc:	4682      	mov	sl, r0
    87fe:	40dc      	lsrs	r4, r3
    8800:	4648      	mov	r0, r9
    8802:	4304      	orrs	r4, r0
    8804:	4650      	mov	r0, sl
    8806:	4085      	lsls	r5, r0
    8808:	1e68      	subs	r0, r5, #1
    880a:	4185      	sbcs	r5, r0
    880c:	40df      	lsrs	r7, r3
    880e:	4325      	orrs	r5, r4
    8810:	4465      	add	r5, ip
    8812:	4565      	cmp	r5, ip
    8814:	419b      	sbcs	r3, r3
    8816:	187f      	adds	r7, r7, r1
    8818:	425b      	negs	r3, r3
    881a:	18ff      	adds	r7, r7, r3
    881c:	1c14      	adds	r4, r2, #0
    881e:	e664      	b.n	84ea <__aeabi_dadd+0x1c6>
    8820:	2a00      	cmp	r2, #0
    8822:	d119      	bne.n	8858 <__aeabi_dadd+0x534>
    8824:	4662      	mov	r2, ip
    8826:	430a      	orrs	r2, r1
    8828:	d077      	beq.n	891a <__aeabi_dadd+0x5f6>
    882a:	1c0f      	adds	r7, r1, #0
    882c:	4665      	mov	r5, ip
    882e:	4698      	mov	r8, r3
    8830:	4c4e      	ldr	r4, [pc, #312]	; (896c <__aeabi_dadd+0x648>)
    8832:	e59f      	b.n	8374 <__aeabi_dadd+0x50>
    8834:	433d      	orrs	r5, r7
    8836:	1e6f      	subs	r7, r5, #1
    8838:	41bd      	sbcs	r5, r7
    883a:	2700      	movs	r7, #0
    883c:	b2ed      	uxtb	r5, r5
    883e:	e732      	b.n	86a6 <__aeabi_dadd+0x382>
    8840:	1c04      	adds	r4, r0, #0
    8842:	2700      	movs	r7, #0
    8844:	2500      	movs	r5, #0
    8846:	e627      	b.n	8498 <__aeabi_dadd+0x174>
    8848:	4848      	ldr	r0, [pc, #288]	; (896c <__aeabi_dadd+0x648>)
    884a:	4282      	cmp	r2, r0
    884c:	d036      	beq.n	88bc <__aeabi_dadd+0x598>
    884e:	2080      	movs	r0, #128	; 0x80
    8850:	0400      	lsls	r0, r0, #16
    8852:	425b      	negs	r3, r3
    8854:	4307      	orrs	r7, r0
    8856:	e7c5      	b.n	87e4 <__aeabi_dadd+0x4c0>
    8858:	4662      	mov	r2, ip
    885a:	430a      	orrs	r2, r1
    885c:	d049      	beq.n	88f2 <__aeabi_dadd+0x5ce>
    885e:	2480      	movs	r4, #128	; 0x80
    8860:	08ed      	lsrs	r5, r5, #3
    8862:	0778      	lsls	r0, r7, #29
    8864:	08fa      	lsrs	r2, r7, #3
    8866:	0324      	lsls	r4, r4, #12
    8868:	4328      	orrs	r0, r5
    886a:	4222      	tst	r2, r4
    886c:	d009      	beq.n	8882 <__aeabi_dadd+0x55e>
    886e:	08ce      	lsrs	r6, r1, #3
    8870:	4226      	tst	r6, r4
    8872:	d106      	bne.n	8882 <__aeabi_dadd+0x55e>
    8874:	4662      	mov	r2, ip
    8876:	074f      	lsls	r7, r1, #29
    8878:	1c38      	adds	r0, r7, #0
    887a:	08d2      	lsrs	r2, r2, #3
    887c:	4310      	orrs	r0, r2
    887e:	4698      	mov	r8, r3
    8880:	1c32      	adds	r2, r6, #0
    8882:	00d2      	lsls	r2, r2, #3
    8884:	0f47      	lsrs	r7, r0, #29
    8886:	4317      	orrs	r7, r2
    8888:	00c5      	lsls	r5, r0, #3
    888a:	4c38      	ldr	r4, [pc, #224]	; (896c <__aeabi_dadd+0x648>)
    888c:	e572      	b.n	8374 <__aeabi_dadd+0x50>
    888e:	4662      	mov	r2, ip
    8890:	430a      	orrs	r2, r1
    8892:	d100      	bne.n	8896 <__aeabi_dadd+0x572>
    8894:	e56e      	b.n	8374 <__aeabi_dadd+0x50>
    8896:	4662      	mov	r2, ip
    8898:	1aae      	subs	r6, r5, r2
    889a:	42b5      	cmp	r5, r6
    889c:	4192      	sbcs	r2, r2
    889e:	1a78      	subs	r0, r7, r1
    88a0:	4252      	negs	r2, r2
    88a2:	1a82      	subs	r2, r0, r2
    88a4:	0210      	lsls	r0, r2, #8
    88a6:	d400      	bmi.n	88aa <__aeabi_dadd+0x586>
    88a8:	e655      	b.n	8556 <__aeabi_dadd+0x232>
    88aa:	4662      	mov	r2, ip
    88ac:	1b55      	subs	r5, r2, r5
    88ae:	45ac      	cmp	ip, r5
    88b0:	4180      	sbcs	r0, r0
    88b2:	1bca      	subs	r2, r1, r7
    88b4:	4240      	negs	r0, r0
    88b6:	1a17      	subs	r7, r2, r0
    88b8:	4698      	mov	r8, r3
    88ba:	e55b      	b.n	8374 <__aeabi_dadd+0x50>
    88bc:	1c0f      	adds	r7, r1, #0
    88be:	4665      	mov	r5, ip
    88c0:	1c14      	adds	r4, r2, #0
    88c2:	e557      	b.n	8374 <__aeabi_dadd+0x50>
    88c4:	2b00      	cmp	r3, #0
    88c6:	d034      	beq.n	8932 <__aeabi_dadd+0x60e>
    88c8:	4663      	mov	r3, ip
    88ca:	430b      	orrs	r3, r1
    88cc:	d011      	beq.n	88f2 <__aeabi_dadd+0x5ce>
    88ce:	2480      	movs	r4, #128	; 0x80
    88d0:	08ed      	lsrs	r5, r5, #3
    88d2:	0778      	lsls	r0, r7, #29
    88d4:	08fa      	lsrs	r2, r7, #3
    88d6:	0324      	lsls	r4, r4, #12
    88d8:	4328      	orrs	r0, r5
    88da:	4222      	tst	r2, r4
    88dc:	d0d1      	beq.n	8882 <__aeabi_dadd+0x55e>
    88de:	08cb      	lsrs	r3, r1, #3
    88e0:	4223      	tst	r3, r4
    88e2:	d1ce      	bne.n	8882 <__aeabi_dadd+0x55e>
    88e4:	4662      	mov	r2, ip
    88e6:	074f      	lsls	r7, r1, #29
    88e8:	1c38      	adds	r0, r7, #0
    88ea:	08d2      	lsrs	r2, r2, #3
    88ec:	4310      	orrs	r0, r2
    88ee:	1c1a      	adds	r2, r3, #0
    88f0:	e7c7      	b.n	8882 <__aeabi_dadd+0x55e>
    88f2:	4c1e      	ldr	r4, [pc, #120]	; (896c <__aeabi_dadd+0x648>)
    88f4:	e53e      	b.n	8374 <__aeabi_dadd+0x50>
    88f6:	2000      	movs	r0, #0
    88f8:	e759      	b.n	87ae <__aeabi_dadd+0x48a>
    88fa:	1c04      	adds	r4, r0, #0
    88fc:	1c3e      	adds	r6, r7, #0
    88fe:	3c20      	subs	r4, #32
    8900:	40e6      	lsrs	r6, r4
    8902:	1c34      	adds	r4, r6, #0
    8904:	2820      	cmp	r0, #32
    8906:	d02b      	beq.n	8960 <__aeabi_dadd+0x63c>
    8908:	2640      	movs	r6, #64	; 0x40
    890a:	1a30      	subs	r0, r6, r0
    890c:	4087      	lsls	r7, r0
    890e:	433d      	orrs	r5, r7
    8910:	1e6f      	subs	r7, r5, #1
    8912:	41bd      	sbcs	r5, r7
    8914:	2700      	movs	r7, #0
    8916:	4325      	orrs	r5, r4
    8918:	e6c5      	b.n	86a6 <__aeabi_dadd+0x382>
    891a:	2780      	movs	r7, #128	; 0x80
    891c:	2600      	movs	r6, #0
    891e:	03ff      	lsls	r7, r7, #15
    8920:	4c12      	ldr	r4, [pc, #72]	; (896c <__aeabi_dadd+0x648>)
    8922:	2500      	movs	r5, #0
    8924:	e5b8      	b.n	8498 <__aeabi_dadd+0x174>
    8926:	433d      	orrs	r5, r7
    8928:	1e6f      	subs	r7, r5, #1
    892a:	41bd      	sbcs	r5, r7
    892c:	2700      	movs	r7, #0
    892e:	b2ed      	uxtb	r5, r5
    8930:	e76e      	b.n	8810 <__aeabi_dadd+0x4ec>
    8932:	1c0f      	adds	r7, r1, #0
    8934:	4665      	mov	r5, ip
    8936:	4c0d      	ldr	r4, [pc, #52]	; (896c <__aeabi_dadd+0x648>)
    8938:	e51c      	b.n	8374 <__aeabi_dadd+0x50>
    893a:	1c0f      	adds	r7, r1, #0
    893c:	4665      	mov	r5, ip
    893e:	e519      	b.n	8374 <__aeabi_dadd+0x50>
    8940:	1c1c      	adds	r4, r3, #0
    8942:	1c38      	adds	r0, r7, #0
    8944:	3c20      	subs	r4, #32
    8946:	40e0      	lsrs	r0, r4
    8948:	1c04      	adds	r4, r0, #0
    894a:	2b20      	cmp	r3, #32
    894c:	d00c      	beq.n	8968 <__aeabi_dadd+0x644>
    894e:	2040      	movs	r0, #64	; 0x40
    8950:	1ac3      	subs	r3, r0, r3
    8952:	409f      	lsls	r7, r3
    8954:	433d      	orrs	r5, r7
    8956:	1e6f      	subs	r7, r5, #1
    8958:	41bd      	sbcs	r5, r7
    895a:	2700      	movs	r7, #0
    895c:	4325      	orrs	r5, r4
    895e:	e757      	b.n	8810 <__aeabi_dadd+0x4ec>
    8960:	2700      	movs	r7, #0
    8962:	e7d4      	b.n	890e <__aeabi_dadd+0x5ea>
    8964:	1c1d      	adds	r5, r3, #0
    8966:	e5fc      	b.n	8562 <__aeabi_dadd+0x23e>
    8968:	2700      	movs	r7, #0
    896a:	e7f3      	b.n	8954 <__aeabi_dadd+0x630>
    896c:	000007ff 	.word	0x000007ff
    8970:	ff7fffff 	.word	0xff7fffff

00008974 <__aeabi_ddiv>:
    8974:	b5f0      	push	{r4, r5, r6, r7, lr}
    8976:	465f      	mov	r7, fp
    8978:	4656      	mov	r6, sl
    897a:	464d      	mov	r5, r9
    897c:	4644      	mov	r4, r8
    897e:	b4f0      	push	{r4, r5, r6, r7}
    8980:	030f      	lsls	r7, r1, #12
    8982:	b087      	sub	sp, #28
    8984:	4698      	mov	r8, r3
    8986:	004d      	lsls	r5, r1, #1
    8988:	0b3b      	lsrs	r3, r7, #12
    898a:	0fcc      	lsrs	r4, r1, #31
    898c:	1c06      	adds	r6, r0, #0
    898e:	4692      	mov	sl, r2
    8990:	4681      	mov	r9, r0
    8992:	469b      	mov	fp, r3
    8994:	0d6d      	lsrs	r5, r5, #21
    8996:	9401      	str	r4, [sp, #4]
    8998:	d06b      	beq.n	8a72 <__aeabi_ddiv+0xfe>
    899a:	4b66      	ldr	r3, [pc, #408]	; (8b34 <__aeabi_ddiv+0x1c0>)
    899c:	429d      	cmp	r5, r3
    899e:	d035      	beq.n	8a0c <__aeabi_ddiv+0x98>
    89a0:	2780      	movs	r7, #128	; 0x80
    89a2:	465b      	mov	r3, fp
    89a4:	037f      	lsls	r7, r7, #13
    89a6:	431f      	orrs	r7, r3
    89a8:	00f3      	lsls	r3, r6, #3
    89aa:	4699      	mov	r9, r3
    89ac:	4b62      	ldr	r3, [pc, #392]	; (8b38 <__aeabi_ddiv+0x1c4>)
    89ae:	00ff      	lsls	r7, r7, #3
    89b0:	0f40      	lsrs	r0, r0, #29
    89b2:	469c      	mov	ip, r3
    89b4:	4307      	orrs	r7, r0
    89b6:	2300      	movs	r3, #0
    89b8:	46bb      	mov	fp, r7
    89ba:	2600      	movs	r6, #0
    89bc:	4465      	add	r5, ip
    89be:	9300      	str	r3, [sp, #0]
    89c0:	4642      	mov	r2, r8
    89c2:	0317      	lsls	r7, r2, #12
    89c4:	0050      	lsls	r0, r2, #1
    89c6:	0fd2      	lsrs	r2, r2, #31
    89c8:	4653      	mov	r3, sl
    89ca:	0b3f      	lsrs	r7, r7, #12
    89cc:	0d40      	lsrs	r0, r0, #21
    89ce:	4690      	mov	r8, r2
    89d0:	d100      	bne.n	89d4 <__aeabi_ddiv+0x60>
    89d2:	e072      	b.n	8aba <__aeabi_ddiv+0x146>
    89d4:	4a57      	ldr	r2, [pc, #348]	; (8b34 <__aeabi_ddiv+0x1c0>)
    89d6:	4290      	cmp	r0, r2
    89d8:	d067      	beq.n	8aaa <__aeabi_ddiv+0x136>
    89da:	2380      	movs	r3, #128	; 0x80
    89dc:	035b      	lsls	r3, r3, #13
    89de:	431f      	orrs	r7, r3
    89e0:	4653      	mov	r3, sl
    89e2:	4a55      	ldr	r2, [pc, #340]	; (8b38 <__aeabi_ddiv+0x1c4>)
    89e4:	0f5b      	lsrs	r3, r3, #29
    89e6:	00ff      	lsls	r7, r7, #3
    89e8:	431f      	orrs	r7, r3
    89ea:	4694      	mov	ip, r2
    89ec:	4653      	mov	r3, sl
    89ee:	2100      	movs	r1, #0
    89f0:	00db      	lsls	r3, r3, #3
    89f2:	4460      	add	r0, ip
    89f4:	4642      	mov	r2, r8
    89f6:	4062      	eors	r2, r4
    89f8:	4692      	mov	sl, r2
    89fa:	1a2d      	subs	r5, r5, r0
    89fc:	430e      	orrs	r6, r1
    89fe:	2e0f      	cmp	r6, #15
    8a00:	d900      	bls.n	8a04 <__aeabi_ddiv+0x90>
    8a02:	e0a1      	b.n	8b48 <__aeabi_ddiv+0x1d4>
    8a04:	484d      	ldr	r0, [pc, #308]	; (8b3c <__aeabi_ddiv+0x1c8>)
    8a06:	00b6      	lsls	r6, r6, #2
    8a08:	5980      	ldr	r0, [r0, r6]
    8a0a:	4687      	mov	pc, r0
    8a0c:	465b      	mov	r3, fp
    8a0e:	431e      	orrs	r6, r3
    8a10:	d000      	beq.n	8a14 <__aeabi_ddiv+0xa0>
    8a12:	e076      	b.n	8b02 <__aeabi_ddiv+0x18e>
    8a14:	2300      	movs	r3, #0
    8a16:	469b      	mov	fp, r3
    8a18:	4699      	mov	r9, r3
    8a1a:	3302      	adds	r3, #2
    8a1c:	2608      	movs	r6, #8
    8a1e:	9300      	str	r3, [sp, #0]
    8a20:	e7ce      	b.n	89c0 <__aeabi_ddiv+0x4c>
    8a22:	4699      	mov	r9, r3
    8a24:	4643      	mov	r3, r8
    8a26:	46bb      	mov	fp, r7
    8a28:	9301      	str	r3, [sp, #4]
    8a2a:	9100      	str	r1, [sp, #0]
    8a2c:	9b00      	ldr	r3, [sp, #0]
    8a2e:	2b02      	cmp	r3, #2
    8a30:	d16b      	bne.n	8b0a <__aeabi_ddiv+0x196>
    8a32:	9b01      	ldr	r3, [sp, #4]
    8a34:	469a      	mov	sl, r3
    8a36:	2100      	movs	r1, #0
    8a38:	4653      	mov	r3, sl
    8a3a:	2201      	movs	r2, #1
    8a3c:	2700      	movs	r7, #0
    8a3e:	4689      	mov	r9, r1
    8a40:	401a      	ands	r2, r3
    8a42:	4b3c      	ldr	r3, [pc, #240]	; (8b34 <__aeabi_ddiv+0x1c0>)
    8a44:	2100      	movs	r1, #0
    8a46:	033f      	lsls	r7, r7, #12
    8a48:	0d0c      	lsrs	r4, r1, #20
    8a4a:	0524      	lsls	r4, r4, #20
    8a4c:	0b3f      	lsrs	r7, r7, #12
    8a4e:	4327      	orrs	r7, r4
    8a50:	4c3b      	ldr	r4, [pc, #236]	; (8b40 <__aeabi_ddiv+0x1cc>)
    8a52:	051b      	lsls	r3, r3, #20
    8a54:	4027      	ands	r7, r4
    8a56:	431f      	orrs	r7, r3
    8a58:	007f      	lsls	r7, r7, #1
    8a5a:	07d2      	lsls	r2, r2, #31
    8a5c:	087f      	lsrs	r7, r7, #1
    8a5e:	4317      	orrs	r7, r2
    8a60:	4648      	mov	r0, r9
    8a62:	1c39      	adds	r1, r7, #0
    8a64:	b007      	add	sp, #28
    8a66:	bc3c      	pop	{r2, r3, r4, r5}
    8a68:	4690      	mov	r8, r2
    8a6a:	4699      	mov	r9, r3
    8a6c:	46a2      	mov	sl, r4
    8a6e:	46ab      	mov	fp, r5
    8a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a72:	4303      	orrs	r3, r0
    8a74:	d03e      	beq.n	8af4 <__aeabi_ddiv+0x180>
    8a76:	465b      	mov	r3, fp
    8a78:	2b00      	cmp	r3, #0
    8a7a:	d100      	bne.n	8a7e <__aeabi_ddiv+0x10a>
    8a7c:	e19c      	b.n	8db8 <__aeabi_ddiv+0x444>
    8a7e:	4658      	mov	r0, fp
    8a80:	f001 fb52 	bl	a128 <__clzsi2>
    8a84:	2328      	movs	r3, #40	; 0x28
    8a86:	1c31      	adds	r1, r6, #0
    8a88:	1a1b      	subs	r3, r3, r0
    8a8a:	1c02      	adds	r2, r0, #0
    8a8c:	465f      	mov	r7, fp
    8a8e:	40d9      	lsrs	r1, r3
    8a90:	3a08      	subs	r2, #8
    8a92:	4097      	lsls	r7, r2
    8a94:	1c0b      	adds	r3, r1, #0
    8a96:	4096      	lsls	r6, r2
    8a98:	433b      	orrs	r3, r7
    8a9a:	469b      	mov	fp, r3
    8a9c:	46b1      	mov	r9, r6
    8a9e:	2300      	movs	r3, #0
    8aa0:	4d28      	ldr	r5, [pc, #160]	; (8b44 <__aeabi_ddiv+0x1d0>)
    8aa2:	2600      	movs	r6, #0
    8aa4:	1a2d      	subs	r5, r5, r0
    8aa6:	9300      	str	r3, [sp, #0]
    8aa8:	e78a      	b.n	89c0 <__aeabi_ddiv+0x4c>
    8aaa:	4652      	mov	r2, sl
    8aac:	2103      	movs	r1, #3
    8aae:	433a      	orrs	r2, r7
    8ab0:	d1a0      	bne.n	89f4 <__aeabi_ddiv+0x80>
    8ab2:	2700      	movs	r7, #0
    8ab4:	2300      	movs	r3, #0
    8ab6:	2102      	movs	r1, #2
    8ab8:	e79c      	b.n	89f4 <__aeabi_ddiv+0x80>
    8aba:	4652      	mov	r2, sl
    8abc:	433a      	orrs	r2, r7
    8abe:	d015      	beq.n	8aec <__aeabi_ddiv+0x178>
    8ac0:	2f00      	cmp	r7, #0
    8ac2:	d100      	bne.n	8ac6 <__aeabi_ddiv+0x152>
    8ac4:	e185      	b.n	8dd2 <__aeabi_ddiv+0x45e>
    8ac6:	1c38      	adds	r0, r7, #0
    8ac8:	f001 fb2e 	bl	a128 <__clzsi2>
    8acc:	1c02      	adds	r2, r0, #0
    8ace:	2128      	movs	r1, #40	; 0x28
    8ad0:	4650      	mov	r0, sl
    8ad2:	1a89      	subs	r1, r1, r2
    8ad4:	1c13      	adds	r3, r2, #0
    8ad6:	40c8      	lsrs	r0, r1
    8ad8:	4651      	mov	r1, sl
    8ada:	3b08      	subs	r3, #8
    8adc:	4099      	lsls	r1, r3
    8ade:	409f      	lsls	r7, r3
    8ae0:	1c0b      	adds	r3, r1, #0
    8ae2:	4307      	orrs	r7, r0
    8ae4:	4817      	ldr	r0, [pc, #92]	; (8b44 <__aeabi_ddiv+0x1d0>)
    8ae6:	2100      	movs	r1, #0
    8ae8:	1a80      	subs	r0, r0, r2
    8aea:	e783      	b.n	89f4 <__aeabi_ddiv+0x80>
    8aec:	2700      	movs	r7, #0
    8aee:	2300      	movs	r3, #0
    8af0:	2101      	movs	r1, #1
    8af2:	e77f      	b.n	89f4 <__aeabi_ddiv+0x80>
    8af4:	2300      	movs	r3, #0
    8af6:	469b      	mov	fp, r3
    8af8:	4699      	mov	r9, r3
    8afa:	3301      	adds	r3, #1
    8afc:	2604      	movs	r6, #4
    8afe:	9300      	str	r3, [sp, #0]
    8b00:	e75e      	b.n	89c0 <__aeabi_ddiv+0x4c>
    8b02:	2303      	movs	r3, #3
    8b04:	260c      	movs	r6, #12
    8b06:	9300      	str	r3, [sp, #0]
    8b08:	e75a      	b.n	89c0 <__aeabi_ddiv+0x4c>
    8b0a:	2b03      	cmp	r3, #3
    8b0c:	d100      	bne.n	8b10 <__aeabi_ddiv+0x19c>
    8b0e:	e23c      	b.n	8f8a <__aeabi_ddiv+0x616>
    8b10:	2b01      	cmp	r3, #1
    8b12:	d000      	beq.n	8b16 <__aeabi_ddiv+0x1a2>
    8b14:	e1bf      	b.n	8e96 <__aeabi_ddiv+0x522>
    8b16:	1c1a      	adds	r2, r3, #0
    8b18:	9b01      	ldr	r3, [sp, #4]
    8b1a:	401a      	ands	r2, r3
    8b1c:	2100      	movs	r1, #0
    8b1e:	2300      	movs	r3, #0
    8b20:	2700      	movs	r7, #0
    8b22:	4689      	mov	r9, r1
    8b24:	e78e      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8b26:	2300      	movs	r3, #0
    8b28:	2780      	movs	r7, #128	; 0x80
    8b2a:	4699      	mov	r9, r3
    8b2c:	2200      	movs	r2, #0
    8b2e:	033f      	lsls	r7, r7, #12
    8b30:	4b00      	ldr	r3, [pc, #0]	; (8b34 <__aeabi_ddiv+0x1c0>)
    8b32:	e787      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8b34:	000007ff 	.word	0x000007ff
    8b38:	fffffc01 	.word	0xfffffc01
    8b3c:	000108c0 	.word	0x000108c0
    8b40:	800fffff 	.word	0x800fffff
    8b44:	fffffc0d 	.word	0xfffffc0d
    8b48:	45bb      	cmp	fp, r7
    8b4a:	d900      	bls.n	8b4e <__aeabi_ddiv+0x1da>
    8b4c:	e151      	b.n	8df2 <__aeabi_ddiv+0x47e>
    8b4e:	d100      	bne.n	8b52 <__aeabi_ddiv+0x1de>
    8b50:	e14c      	b.n	8dec <__aeabi_ddiv+0x478>
    8b52:	464a      	mov	r2, r9
    8b54:	9203      	str	r2, [sp, #12]
    8b56:	2200      	movs	r2, #0
    8b58:	465c      	mov	r4, fp
    8b5a:	4690      	mov	r8, r2
    8b5c:	3d01      	subs	r5, #1
    8b5e:	0e18      	lsrs	r0, r3, #24
    8b60:	023f      	lsls	r7, r7, #8
    8b62:	4338      	orrs	r0, r7
    8b64:	021b      	lsls	r3, r3, #8
    8b66:	9301      	str	r3, [sp, #4]
    8b68:	0c03      	lsrs	r3, r0, #16
    8b6a:	4699      	mov	r9, r3
    8b6c:	0403      	lsls	r3, r0, #16
    8b6e:	0c1b      	lsrs	r3, r3, #16
    8b70:	4649      	mov	r1, r9
    8b72:	1c06      	adds	r6, r0, #0
    8b74:	1c20      	adds	r0, r4, #0
    8b76:	1c1f      	adds	r7, r3, #0
    8b78:	9300      	str	r3, [sp, #0]
    8b7a:	f7fe fac3 	bl	7104 <__aeabi_uidiv>
    8b7e:	1c02      	adds	r2, r0, #0
    8b80:	437a      	muls	r2, r7
    8b82:	9002      	str	r0, [sp, #8]
    8b84:	4649      	mov	r1, r9
    8b86:	1c20      	adds	r0, r4, #0
    8b88:	1c17      	adds	r7, r2, #0
    8b8a:	f7fe fb41 	bl	7210 <__aeabi_uidivmod>
    8b8e:	9b03      	ldr	r3, [sp, #12]
    8b90:	0409      	lsls	r1, r1, #16
    8b92:	0c1b      	lsrs	r3, r3, #16
    8b94:	4319      	orrs	r1, r3
    8b96:	428f      	cmp	r7, r1
    8b98:	d90c      	bls.n	8bb4 <__aeabi_ddiv+0x240>
    8b9a:	9b02      	ldr	r3, [sp, #8]
    8b9c:	1989      	adds	r1, r1, r6
    8b9e:	3b01      	subs	r3, #1
    8ba0:	428e      	cmp	r6, r1
    8ba2:	d900      	bls.n	8ba6 <__aeabi_ddiv+0x232>
    8ba4:	e152      	b.n	8e4c <__aeabi_ddiv+0x4d8>
    8ba6:	428f      	cmp	r7, r1
    8ba8:	d800      	bhi.n	8bac <__aeabi_ddiv+0x238>
    8baa:	e14f      	b.n	8e4c <__aeabi_ddiv+0x4d8>
    8bac:	9b02      	ldr	r3, [sp, #8]
    8bae:	1989      	adds	r1, r1, r6
    8bb0:	3b02      	subs	r3, #2
    8bb2:	9302      	str	r3, [sp, #8]
    8bb4:	1bcc      	subs	r4, r1, r7
    8bb6:	1c20      	adds	r0, r4, #0
    8bb8:	4649      	mov	r1, r9
    8bba:	f7fe faa3 	bl	7104 <__aeabi_uidiv>
    8bbe:	9f00      	ldr	r7, [sp, #0]
    8bc0:	4683      	mov	fp, r0
    8bc2:	4347      	muls	r7, r0
    8bc4:	4649      	mov	r1, r9
    8bc6:	1c20      	adds	r0, r4, #0
    8bc8:	f7fe fb22 	bl	7210 <__aeabi_uidivmod>
    8bcc:	9a03      	ldr	r2, [sp, #12]
    8bce:	040b      	lsls	r3, r1, #16
    8bd0:	0414      	lsls	r4, r2, #16
    8bd2:	0c24      	lsrs	r4, r4, #16
    8bd4:	4323      	orrs	r3, r4
    8bd6:	429f      	cmp	r7, r3
    8bd8:	d90d      	bls.n	8bf6 <__aeabi_ddiv+0x282>
    8bda:	465a      	mov	r2, fp
    8bdc:	199b      	adds	r3, r3, r6
    8bde:	3a01      	subs	r2, #1
    8be0:	429e      	cmp	r6, r3
    8be2:	d900      	bls.n	8be6 <__aeabi_ddiv+0x272>
    8be4:	e130      	b.n	8e48 <__aeabi_ddiv+0x4d4>
    8be6:	429f      	cmp	r7, r3
    8be8:	d800      	bhi.n	8bec <__aeabi_ddiv+0x278>
    8bea:	e12d      	b.n	8e48 <__aeabi_ddiv+0x4d4>
    8bec:	2202      	movs	r2, #2
    8bee:	4252      	negs	r2, r2
    8bf0:	4694      	mov	ip, r2
    8bf2:	199b      	adds	r3, r3, r6
    8bf4:	44e3      	add	fp, ip
    8bf6:	9a02      	ldr	r2, [sp, #8]
    8bf8:	1bdb      	subs	r3, r3, r7
    8bfa:	0417      	lsls	r7, r2, #16
    8bfc:	465a      	mov	r2, fp
    8bfe:	433a      	orrs	r2, r7
    8c00:	4693      	mov	fp, r2
    8c02:	9c01      	ldr	r4, [sp, #4]
    8c04:	0c17      	lsrs	r7, r2, #16
    8c06:	0c22      	lsrs	r2, r4, #16
    8c08:	1c10      	adds	r0, r2, #0
    8c0a:	9204      	str	r2, [sp, #16]
    8c0c:	465a      	mov	r2, fp
    8c0e:	0411      	lsls	r1, r2, #16
    8c10:	0422      	lsls	r2, r4, #16
    8c12:	0c12      	lsrs	r2, r2, #16
    8c14:	1c14      	adds	r4, r2, #0
    8c16:	0c09      	lsrs	r1, r1, #16
    8c18:	437c      	muls	r4, r7
    8c1a:	9205      	str	r2, [sp, #20]
    8c1c:	434a      	muls	r2, r1
    8c1e:	4341      	muls	r1, r0
    8c20:	4347      	muls	r7, r0
    8c22:	1861      	adds	r1, r4, r1
    8c24:	0c10      	lsrs	r0, r2, #16
    8c26:	1809      	adds	r1, r1, r0
    8c28:	428c      	cmp	r4, r1
    8c2a:	d903      	bls.n	8c34 <__aeabi_ddiv+0x2c0>
    8c2c:	2080      	movs	r0, #128	; 0x80
    8c2e:	0240      	lsls	r0, r0, #9
    8c30:	4684      	mov	ip, r0
    8c32:	4467      	add	r7, ip
    8c34:	0c0c      	lsrs	r4, r1, #16
    8c36:	0412      	lsls	r2, r2, #16
    8c38:	0408      	lsls	r0, r1, #16
    8c3a:	0c12      	lsrs	r2, r2, #16
    8c3c:	193c      	adds	r4, r7, r4
    8c3e:	1881      	adds	r1, r0, r2
    8c40:	42a3      	cmp	r3, r4
    8c42:	d200      	bcs.n	8c46 <__aeabi_ddiv+0x2d2>
    8c44:	e0e5      	b.n	8e12 <__aeabi_ddiv+0x49e>
    8c46:	d100      	bne.n	8c4a <__aeabi_ddiv+0x2d6>
    8c48:	e0df      	b.n	8e0a <__aeabi_ddiv+0x496>
    8c4a:	1b1f      	subs	r7, r3, r4
    8c4c:	4643      	mov	r3, r8
    8c4e:	1a5c      	subs	r4, r3, r1
    8c50:	45a0      	cmp	r8, r4
    8c52:	4192      	sbcs	r2, r2
    8c54:	4252      	negs	r2, r2
    8c56:	1abf      	subs	r7, r7, r2
    8c58:	42b7      	cmp	r7, r6
    8c5a:	d100      	bne.n	8c5e <__aeabi_ddiv+0x2ea>
    8c5c:	e10e      	b.n	8e7c <__aeabi_ddiv+0x508>
    8c5e:	1c38      	adds	r0, r7, #0
    8c60:	4649      	mov	r1, r9
    8c62:	f7fe fa4f 	bl	7104 <__aeabi_uidiv>
    8c66:	9b00      	ldr	r3, [sp, #0]
    8c68:	9002      	str	r0, [sp, #8]
    8c6a:	4343      	muls	r3, r0
    8c6c:	4649      	mov	r1, r9
    8c6e:	1c38      	adds	r0, r7, #0
    8c70:	4698      	mov	r8, r3
    8c72:	f7fe facd 	bl	7210 <__aeabi_uidivmod>
    8c76:	0c23      	lsrs	r3, r4, #16
    8c78:	040f      	lsls	r7, r1, #16
    8c7a:	431f      	orrs	r7, r3
    8c7c:	45b8      	cmp	r8, r7
    8c7e:	d90c      	bls.n	8c9a <__aeabi_ddiv+0x326>
    8c80:	9b02      	ldr	r3, [sp, #8]
    8c82:	19bf      	adds	r7, r7, r6
    8c84:	3b01      	subs	r3, #1
    8c86:	42be      	cmp	r6, r7
    8c88:	d900      	bls.n	8c8c <__aeabi_ddiv+0x318>
    8c8a:	e0fb      	b.n	8e84 <__aeabi_ddiv+0x510>
    8c8c:	45b8      	cmp	r8, r7
    8c8e:	d800      	bhi.n	8c92 <__aeabi_ddiv+0x31e>
    8c90:	e0f8      	b.n	8e84 <__aeabi_ddiv+0x510>
    8c92:	9b02      	ldr	r3, [sp, #8]
    8c94:	19bf      	adds	r7, r7, r6
    8c96:	3b02      	subs	r3, #2
    8c98:	9302      	str	r3, [sp, #8]
    8c9a:	4643      	mov	r3, r8
    8c9c:	1aff      	subs	r7, r7, r3
    8c9e:	4649      	mov	r1, r9
    8ca0:	1c38      	adds	r0, r7, #0
    8ca2:	f7fe fa2f 	bl	7104 <__aeabi_uidiv>
    8ca6:	9b00      	ldr	r3, [sp, #0]
    8ca8:	9003      	str	r0, [sp, #12]
    8caa:	4343      	muls	r3, r0
    8cac:	4649      	mov	r1, r9
    8cae:	1c38      	adds	r0, r7, #0
    8cb0:	4698      	mov	r8, r3
    8cb2:	f7fe faad 	bl	7210 <__aeabi_uidivmod>
    8cb6:	0424      	lsls	r4, r4, #16
    8cb8:	0409      	lsls	r1, r1, #16
    8cba:	0c24      	lsrs	r4, r4, #16
    8cbc:	4321      	orrs	r1, r4
    8cbe:	4588      	cmp	r8, r1
    8cc0:	d90c      	bls.n	8cdc <__aeabi_ddiv+0x368>
    8cc2:	9b03      	ldr	r3, [sp, #12]
    8cc4:	1989      	adds	r1, r1, r6
    8cc6:	3b01      	subs	r3, #1
    8cc8:	428e      	cmp	r6, r1
    8cca:	d900      	bls.n	8cce <__aeabi_ddiv+0x35a>
    8ccc:	e0dc      	b.n	8e88 <__aeabi_ddiv+0x514>
    8cce:	4588      	cmp	r8, r1
    8cd0:	d800      	bhi.n	8cd4 <__aeabi_ddiv+0x360>
    8cd2:	e0d9      	b.n	8e88 <__aeabi_ddiv+0x514>
    8cd4:	9b03      	ldr	r3, [sp, #12]
    8cd6:	1989      	adds	r1, r1, r6
    8cd8:	3b02      	subs	r3, #2
    8cda:	9303      	str	r3, [sp, #12]
    8cdc:	4643      	mov	r3, r8
    8cde:	1ac9      	subs	r1, r1, r3
    8ce0:	9b02      	ldr	r3, [sp, #8]
    8ce2:	9a03      	ldr	r2, [sp, #12]
    8ce4:	041b      	lsls	r3, r3, #16
    8ce6:	9c05      	ldr	r4, [sp, #20]
    8ce8:	431a      	orrs	r2, r3
    8cea:	0c10      	lsrs	r0, r2, #16
    8cec:	0413      	lsls	r3, r2, #16
    8cee:	4691      	mov	r9, r2
    8cf0:	1c22      	adds	r2, r4, #0
    8cf2:	9f04      	ldr	r7, [sp, #16]
    8cf4:	0c1b      	lsrs	r3, r3, #16
    8cf6:	435a      	muls	r2, r3
    8cf8:	4344      	muls	r4, r0
    8cfa:	437b      	muls	r3, r7
    8cfc:	4378      	muls	r0, r7
    8cfe:	18e3      	adds	r3, r4, r3
    8d00:	0c17      	lsrs	r7, r2, #16
    8d02:	19db      	adds	r3, r3, r7
    8d04:	429c      	cmp	r4, r3
    8d06:	d903      	bls.n	8d10 <__aeabi_ddiv+0x39c>
    8d08:	2480      	movs	r4, #128	; 0x80
    8d0a:	0264      	lsls	r4, r4, #9
    8d0c:	46a4      	mov	ip, r4
    8d0e:	4460      	add	r0, ip
    8d10:	0c1c      	lsrs	r4, r3, #16
    8d12:	0412      	lsls	r2, r2, #16
    8d14:	041b      	lsls	r3, r3, #16
    8d16:	0c12      	lsrs	r2, r2, #16
    8d18:	1900      	adds	r0, r0, r4
    8d1a:	189b      	adds	r3, r3, r2
    8d1c:	4281      	cmp	r1, r0
    8d1e:	d200      	bcs.n	8d22 <__aeabi_ddiv+0x3ae>
    8d20:	e096      	b.n	8e50 <__aeabi_ddiv+0x4dc>
    8d22:	d100      	bne.n	8d26 <__aeabi_ddiv+0x3b2>
    8d24:	e0fc      	b.n	8f20 <__aeabi_ddiv+0x5ac>
    8d26:	464a      	mov	r2, r9
    8d28:	2301      	movs	r3, #1
    8d2a:	431a      	orrs	r2, r3
    8d2c:	4691      	mov	r9, r2
    8d2e:	4b9b      	ldr	r3, [pc, #620]	; (8f9c <__aeabi_ddiv+0x628>)
    8d30:	18eb      	adds	r3, r5, r3
    8d32:	2b00      	cmp	r3, #0
    8d34:	dc00      	bgt.n	8d38 <__aeabi_ddiv+0x3c4>
    8d36:	e099      	b.n	8e6c <__aeabi_ddiv+0x4f8>
    8d38:	464a      	mov	r2, r9
    8d3a:	0752      	lsls	r2, r2, #29
    8d3c:	d00a      	beq.n	8d54 <__aeabi_ddiv+0x3e0>
    8d3e:	220f      	movs	r2, #15
    8d40:	4649      	mov	r1, r9
    8d42:	400a      	ands	r2, r1
    8d44:	2a04      	cmp	r2, #4
    8d46:	d005      	beq.n	8d54 <__aeabi_ddiv+0x3e0>
    8d48:	3104      	adds	r1, #4
    8d4a:	4549      	cmp	r1, r9
    8d4c:	4192      	sbcs	r2, r2
    8d4e:	4689      	mov	r9, r1
    8d50:	4252      	negs	r2, r2
    8d52:	4493      	add	fp, r2
    8d54:	465a      	mov	r2, fp
    8d56:	01d2      	lsls	r2, r2, #7
    8d58:	d506      	bpl.n	8d68 <__aeabi_ddiv+0x3f4>
    8d5a:	465a      	mov	r2, fp
    8d5c:	4b90      	ldr	r3, [pc, #576]	; (8fa0 <__aeabi_ddiv+0x62c>)
    8d5e:	401a      	ands	r2, r3
    8d60:	2380      	movs	r3, #128	; 0x80
    8d62:	4693      	mov	fp, r2
    8d64:	00db      	lsls	r3, r3, #3
    8d66:	18eb      	adds	r3, r5, r3
    8d68:	4a8e      	ldr	r2, [pc, #568]	; (8fa4 <__aeabi_ddiv+0x630>)
    8d6a:	4293      	cmp	r3, r2
    8d6c:	dd00      	ble.n	8d70 <__aeabi_ddiv+0x3fc>
    8d6e:	e662      	b.n	8a36 <__aeabi_ddiv+0xc2>
    8d70:	464a      	mov	r2, r9
    8d72:	4659      	mov	r1, fp
    8d74:	08d2      	lsrs	r2, r2, #3
    8d76:	0749      	lsls	r1, r1, #29
    8d78:	4311      	orrs	r1, r2
    8d7a:	465a      	mov	r2, fp
    8d7c:	4689      	mov	r9, r1
    8d7e:	0257      	lsls	r7, r2, #9
    8d80:	4651      	mov	r1, sl
    8d82:	2201      	movs	r2, #1
    8d84:	055b      	lsls	r3, r3, #21
    8d86:	0b3f      	lsrs	r7, r7, #12
    8d88:	0d5b      	lsrs	r3, r3, #21
    8d8a:	400a      	ands	r2, r1
    8d8c:	e65a      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8d8e:	2080      	movs	r0, #128	; 0x80
    8d90:	465a      	mov	r2, fp
    8d92:	0300      	lsls	r0, r0, #12
    8d94:	4202      	tst	r2, r0
    8d96:	d008      	beq.n	8daa <__aeabi_ddiv+0x436>
    8d98:	4207      	tst	r7, r0
    8d9a:	d106      	bne.n	8daa <__aeabi_ddiv+0x436>
    8d9c:	4307      	orrs	r7, r0
    8d9e:	033f      	lsls	r7, r7, #12
    8da0:	4699      	mov	r9, r3
    8da2:	0b3f      	lsrs	r7, r7, #12
    8da4:	4642      	mov	r2, r8
    8da6:	4b80      	ldr	r3, [pc, #512]	; (8fa8 <__aeabi_ddiv+0x634>)
    8da8:	e64c      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8daa:	465f      	mov	r7, fp
    8dac:	4307      	orrs	r7, r0
    8dae:	033f      	lsls	r7, r7, #12
    8db0:	0b3f      	lsrs	r7, r7, #12
    8db2:	1c22      	adds	r2, r4, #0
    8db4:	4b7c      	ldr	r3, [pc, #496]	; (8fa8 <__aeabi_ddiv+0x634>)
    8db6:	e645      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8db8:	f001 f9b6 	bl	a128 <__clzsi2>
    8dbc:	1c03      	adds	r3, r0, #0
    8dbe:	3020      	adds	r0, #32
    8dc0:	2827      	cmp	r0, #39	; 0x27
    8dc2:	dc00      	bgt.n	8dc6 <__aeabi_ddiv+0x452>
    8dc4:	e65e      	b.n	8a84 <__aeabi_ddiv+0x110>
    8dc6:	3b08      	subs	r3, #8
    8dc8:	409e      	lsls	r6, r3
    8dca:	2300      	movs	r3, #0
    8dcc:	46b3      	mov	fp, r6
    8dce:	4699      	mov	r9, r3
    8dd0:	e665      	b.n	8a9e <__aeabi_ddiv+0x12a>
    8dd2:	4650      	mov	r0, sl
    8dd4:	f001 f9a8 	bl	a128 <__clzsi2>
    8dd8:	1c02      	adds	r2, r0, #0
    8dda:	3220      	adds	r2, #32
    8ddc:	2a27      	cmp	r2, #39	; 0x27
    8dde:	dc00      	bgt.n	8de2 <__aeabi_ddiv+0x46e>
    8de0:	e675      	b.n	8ace <__aeabi_ddiv+0x15a>
    8de2:	4657      	mov	r7, sl
    8de4:	3808      	subs	r0, #8
    8de6:	4087      	lsls	r7, r0
    8de8:	2300      	movs	r3, #0
    8dea:	e67b      	b.n	8ae4 <__aeabi_ddiv+0x170>
    8dec:	4599      	cmp	r9, r3
    8dee:	d200      	bcs.n	8df2 <__aeabi_ddiv+0x47e>
    8df0:	e6af      	b.n	8b52 <__aeabi_ddiv+0x1de>
    8df2:	465a      	mov	r2, fp
    8df4:	4659      	mov	r1, fp
    8df6:	0854      	lsrs	r4, r2, #1
    8df8:	464a      	mov	r2, r9
    8dfa:	07c8      	lsls	r0, r1, #31
    8dfc:	0852      	lsrs	r2, r2, #1
    8dfe:	4302      	orrs	r2, r0
    8e00:	9203      	str	r2, [sp, #12]
    8e02:	464a      	mov	r2, r9
    8e04:	07d2      	lsls	r2, r2, #31
    8e06:	4690      	mov	r8, r2
    8e08:	e6a9      	b.n	8b5e <__aeabi_ddiv+0x1ea>
    8e0a:	2700      	movs	r7, #0
    8e0c:	4588      	cmp	r8, r1
    8e0e:	d300      	bcc.n	8e12 <__aeabi_ddiv+0x49e>
    8e10:	e71c      	b.n	8c4c <__aeabi_ddiv+0x2d8>
    8e12:	9f01      	ldr	r7, [sp, #4]
    8e14:	465a      	mov	r2, fp
    8e16:	46bc      	mov	ip, r7
    8e18:	44e0      	add	r8, ip
    8e1a:	45b8      	cmp	r8, r7
    8e1c:	41bf      	sbcs	r7, r7
    8e1e:	427f      	negs	r7, r7
    8e20:	19bf      	adds	r7, r7, r6
    8e22:	18ff      	adds	r7, r7, r3
    8e24:	3a01      	subs	r2, #1
    8e26:	42be      	cmp	r6, r7
    8e28:	d206      	bcs.n	8e38 <__aeabi_ddiv+0x4c4>
    8e2a:	42bc      	cmp	r4, r7
    8e2c:	d85f      	bhi.n	8eee <__aeabi_ddiv+0x57a>
    8e2e:	d100      	bne.n	8e32 <__aeabi_ddiv+0x4be>
    8e30:	e09f      	b.n	8f72 <__aeabi_ddiv+0x5fe>
    8e32:	1b3f      	subs	r7, r7, r4
    8e34:	4693      	mov	fp, r2
    8e36:	e709      	b.n	8c4c <__aeabi_ddiv+0x2d8>
    8e38:	42b7      	cmp	r7, r6
    8e3a:	d1fa      	bne.n	8e32 <__aeabi_ddiv+0x4be>
    8e3c:	9b01      	ldr	r3, [sp, #4]
    8e3e:	4543      	cmp	r3, r8
    8e40:	d9f3      	bls.n	8e2a <__aeabi_ddiv+0x4b6>
    8e42:	1b37      	subs	r7, r6, r4
    8e44:	4693      	mov	fp, r2
    8e46:	e701      	b.n	8c4c <__aeabi_ddiv+0x2d8>
    8e48:	4693      	mov	fp, r2
    8e4a:	e6d4      	b.n	8bf6 <__aeabi_ddiv+0x282>
    8e4c:	9302      	str	r3, [sp, #8]
    8e4e:	e6b1      	b.n	8bb4 <__aeabi_ddiv+0x240>
    8e50:	464a      	mov	r2, r9
    8e52:	1989      	adds	r1, r1, r6
    8e54:	3a01      	subs	r2, #1
    8e56:	428e      	cmp	r6, r1
    8e58:	d918      	bls.n	8e8c <__aeabi_ddiv+0x518>
    8e5a:	4691      	mov	r9, r2
    8e5c:	4281      	cmp	r1, r0
    8e5e:	d000      	beq.n	8e62 <__aeabi_ddiv+0x4ee>
    8e60:	e761      	b.n	8d26 <__aeabi_ddiv+0x3b2>
    8e62:	9a01      	ldr	r2, [sp, #4]
    8e64:	429a      	cmp	r2, r3
    8e66:	d000      	beq.n	8e6a <__aeabi_ddiv+0x4f6>
    8e68:	e75d      	b.n	8d26 <__aeabi_ddiv+0x3b2>
    8e6a:	e760      	b.n	8d2e <__aeabi_ddiv+0x3ba>
    8e6c:	4f4f      	ldr	r7, [pc, #316]	; (8fac <__aeabi_ddiv+0x638>)
    8e6e:	1b7f      	subs	r7, r7, r5
    8e70:	2f38      	cmp	r7, #56	; 0x38
    8e72:	dd13      	ble.n	8e9c <__aeabi_ddiv+0x528>
    8e74:	2201      	movs	r2, #1
    8e76:	4653      	mov	r3, sl
    8e78:	401a      	ands	r2, r3
    8e7a:	e64f      	b.n	8b1c <__aeabi_ddiv+0x1a8>
    8e7c:	2301      	movs	r3, #1
    8e7e:	425b      	negs	r3, r3
    8e80:	4699      	mov	r9, r3
    8e82:	e754      	b.n	8d2e <__aeabi_ddiv+0x3ba>
    8e84:	9302      	str	r3, [sp, #8]
    8e86:	e708      	b.n	8c9a <__aeabi_ddiv+0x326>
    8e88:	9303      	str	r3, [sp, #12]
    8e8a:	e727      	b.n	8cdc <__aeabi_ddiv+0x368>
    8e8c:	4288      	cmp	r0, r1
    8e8e:	d83c      	bhi.n	8f0a <__aeabi_ddiv+0x596>
    8e90:	d074      	beq.n	8f7c <__aeabi_ddiv+0x608>
    8e92:	4691      	mov	r9, r2
    8e94:	e747      	b.n	8d26 <__aeabi_ddiv+0x3b2>
    8e96:	9b01      	ldr	r3, [sp, #4]
    8e98:	469a      	mov	sl, r3
    8e9a:	e748      	b.n	8d2e <__aeabi_ddiv+0x3ba>
    8e9c:	2f1f      	cmp	r7, #31
    8e9e:	dc44      	bgt.n	8f2a <__aeabi_ddiv+0x5b6>
    8ea0:	4b43      	ldr	r3, [pc, #268]	; (8fb0 <__aeabi_ddiv+0x63c>)
    8ea2:	464a      	mov	r2, r9
    8ea4:	469c      	mov	ip, r3
    8ea6:	465b      	mov	r3, fp
    8ea8:	4465      	add	r5, ip
    8eaa:	40fa      	lsrs	r2, r7
    8eac:	40ab      	lsls	r3, r5
    8eae:	4313      	orrs	r3, r2
    8eb0:	464a      	mov	r2, r9
    8eb2:	40aa      	lsls	r2, r5
    8eb4:	1c15      	adds	r5, r2, #0
    8eb6:	1e6a      	subs	r2, r5, #1
    8eb8:	4195      	sbcs	r5, r2
    8eba:	465a      	mov	r2, fp
    8ebc:	40fa      	lsrs	r2, r7
    8ebe:	432b      	orrs	r3, r5
    8ec0:	1c17      	adds	r7, r2, #0
    8ec2:	075a      	lsls	r2, r3, #29
    8ec4:	d009      	beq.n	8eda <__aeabi_ddiv+0x566>
    8ec6:	220f      	movs	r2, #15
    8ec8:	401a      	ands	r2, r3
    8eca:	2a04      	cmp	r2, #4
    8ecc:	d005      	beq.n	8eda <__aeabi_ddiv+0x566>
    8ece:	1d1a      	adds	r2, r3, #4
    8ed0:	429a      	cmp	r2, r3
    8ed2:	419b      	sbcs	r3, r3
    8ed4:	425b      	negs	r3, r3
    8ed6:	18ff      	adds	r7, r7, r3
    8ed8:	1c13      	adds	r3, r2, #0
    8eda:	023a      	lsls	r2, r7, #8
    8edc:	d53e      	bpl.n	8f5c <__aeabi_ddiv+0x5e8>
    8ede:	4653      	mov	r3, sl
    8ee0:	2201      	movs	r2, #1
    8ee2:	2100      	movs	r1, #0
    8ee4:	401a      	ands	r2, r3
    8ee6:	2700      	movs	r7, #0
    8ee8:	2301      	movs	r3, #1
    8eea:	4689      	mov	r9, r1
    8eec:	e5aa      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8eee:	2302      	movs	r3, #2
    8ef0:	425b      	negs	r3, r3
    8ef2:	469c      	mov	ip, r3
    8ef4:	9a01      	ldr	r2, [sp, #4]
    8ef6:	44e3      	add	fp, ip
    8ef8:	4694      	mov	ip, r2
    8efa:	44e0      	add	r8, ip
    8efc:	4590      	cmp	r8, r2
    8efe:	419b      	sbcs	r3, r3
    8f00:	425b      	negs	r3, r3
    8f02:	199b      	adds	r3, r3, r6
    8f04:	19df      	adds	r7, r3, r7
    8f06:	1b3f      	subs	r7, r7, r4
    8f08:	e6a0      	b.n	8c4c <__aeabi_ddiv+0x2d8>
    8f0a:	9f01      	ldr	r7, [sp, #4]
    8f0c:	464a      	mov	r2, r9
    8f0e:	007c      	lsls	r4, r7, #1
    8f10:	42bc      	cmp	r4, r7
    8f12:	41bf      	sbcs	r7, r7
    8f14:	427f      	negs	r7, r7
    8f16:	19bf      	adds	r7, r7, r6
    8f18:	3a02      	subs	r2, #2
    8f1a:	19c9      	adds	r1, r1, r7
    8f1c:	9401      	str	r4, [sp, #4]
    8f1e:	e79c      	b.n	8e5a <__aeabi_ddiv+0x4e6>
    8f20:	2b00      	cmp	r3, #0
    8f22:	d195      	bne.n	8e50 <__aeabi_ddiv+0x4dc>
    8f24:	2200      	movs	r2, #0
    8f26:	9201      	str	r2, [sp, #4]
    8f28:	e79b      	b.n	8e62 <__aeabi_ddiv+0x4ee>
    8f2a:	465a      	mov	r2, fp
    8f2c:	4b21      	ldr	r3, [pc, #132]	; (8fb4 <__aeabi_ddiv+0x640>)
    8f2e:	1b5b      	subs	r3, r3, r5
    8f30:	40da      	lsrs	r2, r3
    8f32:	2f20      	cmp	r7, #32
    8f34:	d027      	beq.n	8f86 <__aeabi_ddiv+0x612>
    8f36:	4b20      	ldr	r3, [pc, #128]	; (8fb8 <__aeabi_ddiv+0x644>)
    8f38:	469c      	mov	ip, r3
    8f3a:	465b      	mov	r3, fp
    8f3c:	4465      	add	r5, ip
    8f3e:	40ab      	lsls	r3, r5
    8f40:	4649      	mov	r1, r9
    8f42:	430b      	orrs	r3, r1
    8f44:	1e59      	subs	r1, r3, #1
    8f46:	418b      	sbcs	r3, r1
    8f48:	4313      	orrs	r3, r2
    8f4a:	2207      	movs	r2, #7
    8f4c:	2700      	movs	r7, #0
    8f4e:	401a      	ands	r2, r3
    8f50:	d007      	beq.n	8f62 <__aeabi_ddiv+0x5ee>
    8f52:	220f      	movs	r2, #15
    8f54:	2700      	movs	r7, #0
    8f56:	401a      	ands	r2, r3
    8f58:	2a04      	cmp	r2, #4
    8f5a:	d1b8      	bne.n	8ece <__aeabi_ddiv+0x55a>
    8f5c:	077a      	lsls	r2, r7, #29
    8f5e:	027f      	lsls	r7, r7, #9
    8f60:	0b3f      	lsrs	r7, r7, #12
    8f62:	08db      	lsrs	r3, r3, #3
    8f64:	4313      	orrs	r3, r2
    8f66:	4699      	mov	r9, r3
    8f68:	2201      	movs	r2, #1
    8f6a:	4653      	mov	r3, sl
    8f6c:	401a      	ands	r2, r3
    8f6e:	2300      	movs	r3, #0
    8f70:	e568      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8f72:	4541      	cmp	r1, r8
    8f74:	d8bb      	bhi.n	8eee <__aeabi_ddiv+0x57a>
    8f76:	4693      	mov	fp, r2
    8f78:	2700      	movs	r7, #0
    8f7a:	e667      	b.n	8c4c <__aeabi_ddiv+0x2d8>
    8f7c:	9c01      	ldr	r4, [sp, #4]
    8f7e:	429c      	cmp	r4, r3
    8f80:	d3c3      	bcc.n	8f0a <__aeabi_ddiv+0x596>
    8f82:	4691      	mov	r9, r2
    8f84:	e76d      	b.n	8e62 <__aeabi_ddiv+0x4ee>
    8f86:	2300      	movs	r3, #0
    8f88:	e7da      	b.n	8f40 <__aeabi_ddiv+0x5cc>
    8f8a:	2780      	movs	r7, #128	; 0x80
    8f8c:	465b      	mov	r3, fp
    8f8e:	033f      	lsls	r7, r7, #12
    8f90:	431f      	orrs	r7, r3
    8f92:	033f      	lsls	r7, r7, #12
    8f94:	0b3f      	lsrs	r7, r7, #12
    8f96:	9a01      	ldr	r2, [sp, #4]
    8f98:	4b03      	ldr	r3, [pc, #12]	; (8fa8 <__aeabi_ddiv+0x634>)
    8f9a:	e553      	b.n	8a44 <__aeabi_ddiv+0xd0>
    8f9c:	000003ff 	.word	0x000003ff
    8fa0:	feffffff 	.word	0xfeffffff
    8fa4:	000007fe 	.word	0x000007fe
    8fa8:	000007ff 	.word	0x000007ff
    8fac:	fffffc02 	.word	0xfffffc02
    8fb0:	0000041e 	.word	0x0000041e
    8fb4:	fffffbe2 	.word	0xfffffbe2
    8fb8:	0000043e 	.word	0x0000043e

00008fbc <__eqdf2>:
    8fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fbe:	465f      	mov	r7, fp
    8fc0:	464d      	mov	r5, r9
    8fc2:	4644      	mov	r4, r8
    8fc4:	4656      	mov	r6, sl
    8fc6:	b4f0      	push	{r4, r5, r6, r7}
    8fc8:	031f      	lsls	r7, r3, #12
    8fca:	005c      	lsls	r4, r3, #1
    8fcc:	0fdb      	lsrs	r3, r3, #31
    8fce:	4699      	mov	r9, r3
    8fd0:	4b1b      	ldr	r3, [pc, #108]	; (9040 <__eqdf2+0x84>)
    8fd2:	030e      	lsls	r6, r1, #12
    8fd4:	004d      	lsls	r5, r1, #1
    8fd6:	0fc9      	lsrs	r1, r1, #31
    8fd8:	4684      	mov	ip, r0
    8fda:	0b36      	lsrs	r6, r6, #12
    8fdc:	0d6d      	lsrs	r5, r5, #21
    8fde:	468b      	mov	fp, r1
    8fe0:	4690      	mov	r8, r2
    8fe2:	0b3f      	lsrs	r7, r7, #12
    8fe4:	0d64      	lsrs	r4, r4, #21
    8fe6:	429d      	cmp	r5, r3
    8fe8:	d00c      	beq.n	9004 <__eqdf2+0x48>
    8fea:	4b15      	ldr	r3, [pc, #84]	; (9040 <__eqdf2+0x84>)
    8fec:	429c      	cmp	r4, r3
    8fee:	d010      	beq.n	9012 <__eqdf2+0x56>
    8ff0:	2301      	movs	r3, #1
    8ff2:	42a5      	cmp	r5, r4
    8ff4:	d014      	beq.n	9020 <__eqdf2+0x64>
    8ff6:	1c18      	adds	r0, r3, #0
    8ff8:	bc3c      	pop	{r2, r3, r4, r5}
    8ffa:	4690      	mov	r8, r2
    8ffc:	4699      	mov	r9, r3
    8ffe:	46a2      	mov	sl, r4
    9000:	46ab      	mov	fp, r5
    9002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9004:	1c31      	adds	r1, r6, #0
    9006:	2301      	movs	r3, #1
    9008:	4301      	orrs	r1, r0
    900a:	d1f4      	bne.n	8ff6 <__eqdf2+0x3a>
    900c:	4b0c      	ldr	r3, [pc, #48]	; (9040 <__eqdf2+0x84>)
    900e:	429c      	cmp	r4, r3
    9010:	d1ee      	bne.n	8ff0 <__eqdf2+0x34>
    9012:	433a      	orrs	r2, r7
    9014:	2301      	movs	r3, #1
    9016:	2a00      	cmp	r2, #0
    9018:	d1ed      	bne.n	8ff6 <__eqdf2+0x3a>
    901a:	2301      	movs	r3, #1
    901c:	42a5      	cmp	r5, r4
    901e:	d1ea      	bne.n	8ff6 <__eqdf2+0x3a>
    9020:	42be      	cmp	r6, r7
    9022:	d1e8      	bne.n	8ff6 <__eqdf2+0x3a>
    9024:	45c4      	cmp	ip, r8
    9026:	d1e6      	bne.n	8ff6 <__eqdf2+0x3a>
    9028:	45cb      	cmp	fp, r9
    902a:	d006      	beq.n	903a <__eqdf2+0x7e>
    902c:	2d00      	cmp	r5, #0
    902e:	d1e2      	bne.n	8ff6 <__eqdf2+0x3a>
    9030:	4330      	orrs	r0, r6
    9032:	1c03      	adds	r3, r0, #0
    9034:	1e58      	subs	r0, r3, #1
    9036:	4183      	sbcs	r3, r0
    9038:	e7dd      	b.n	8ff6 <__eqdf2+0x3a>
    903a:	2300      	movs	r3, #0
    903c:	e7db      	b.n	8ff6 <__eqdf2+0x3a>
    903e:	46c0      	nop			; (mov r8, r8)
    9040:	000007ff 	.word	0x000007ff

00009044 <__gedf2>:
    9044:	b5f0      	push	{r4, r5, r6, r7, lr}
    9046:	4657      	mov	r7, sl
    9048:	4645      	mov	r5, r8
    904a:	464e      	mov	r6, r9
    904c:	b4e0      	push	{r5, r6, r7}
    904e:	030f      	lsls	r7, r1, #12
    9050:	004e      	lsls	r6, r1, #1
    9052:	0fc9      	lsrs	r1, r1, #31
    9054:	468a      	mov	sl, r1
    9056:	4932      	ldr	r1, [pc, #200]	; (9120 <__gedf2+0xdc>)
    9058:	031d      	lsls	r5, r3, #12
    905a:	005c      	lsls	r4, r3, #1
    905c:	4684      	mov	ip, r0
    905e:	0b3f      	lsrs	r7, r7, #12
    9060:	0d76      	lsrs	r6, r6, #21
    9062:	4690      	mov	r8, r2
    9064:	0b2d      	lsrs	r5, r5, #12
    9066:	0d64      	lsrs	r4, r4, #21
    9068:	0fdb      	lsrs	r3, r3, #31
    906a:	428e      	cmp	r6, r1
    906c:	d00f      	beq.n	908e <__gedf2+0x4a>
    906e:	428c      	cmp	r4, r1
    9070:	d039      	beq.n	90e6 <__gedf2+0xa2>
    9072:	2e00      	cmp	r6, #0
    9074:	d110      	bne.n	9098 <__gedf2+0x54>
    9076:	4338      	orrs	r0, r7
    9078:	4241      	negs	r1, r0
    907a:	4141      	adcs	r1, r0
    907c:	4689      	mov	r9, r1
    907e:	2c00      	cmp	r4, #0
    9080:	d127      	bne.n	90d2 <__gedf2+0x8e>
    9082:	432a      	orrs	r2, r5
    9084:	d125      	bne.n	90d2 <__gedf2+0x8e>
    9086:	2000      	movs	r0, #0
    9088:	2900      	cmp	r1, #0
    908a:	d10e      	bne.n	90aa <__gedf2+0x66>
    908c:	e008      	b.n	90a0 <__gedf2+0x5c>
    908e:	1c39      	adds	r1, r7, #0
    9090:	4301      	orrs	r1, r0
    9092:	d12e      	bne.n	90f2 <__gedf2+0xae>
    9094:	42b4      	cmp	r4, r6
    9096:	d026      	beq.n	90e6 <__gedf2+0xa2>
    9098:	2c00      	cmp	r4, #0
    909a:	d00b      	beq.n	90b4 <__gedf2+0x70>
    909c:	459a      	cmp	sl, r3
    909e:	d00d      	beq.n	90bc <__gedf2+0x78>
    90a0:	4653      	mov	r3, sl
    90a2:	4259      	negs	r1, r3
    90a4:	2301      	movs	r3, #1
    90a6:	4319      	orrs	r1, r3
    90a8:	1c08      	adds	r0, r1, #0
    90aa:	bc1c      	pop	{r2, r3, r4}
    90ac:	4690      	mov	r8, r2
    90ae:	4699      	mov	r9, r3
    90b0:	46a2      	mov	sl, r4
    90b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90b4:	432a      	orrs	r2, r5
    90b6:	d0f3      	beq.n	90a0 <__gedf2+0x5c>
    90b8:	459a      	cmp	sl, r3
    90ba:	d1f1      	bne.n	90a0 <__gedf2+0x5c>
    90bc:	42a6      	cmp	r6, r4
    90be:	dcef      	bgt.n	90a0 <__gedf2+0x5c>
    90c0:	da1a      	bge.n	90f8 <__gedf2+0xb4>
    90c2:	4650      	mov	r0, sl
    90c4:	4241      	negs	r1, r0
    90c6:	4148      	adcs	r0, r1
    90c8:	2301      	movs	r3, #1
    90ca:	4241      	negs	r1, r0
    90cc:	4319      	orrs	r1, r3
    90ce:	1c08      	adds	r0, r1, #0
    90d0:	e7eb      	b.n	90aa <__gedf2+0x66>
    90d2:	464a      	mov	r2, r9
    90d4:	2a00      	cmp	r2, #0
    90d6:	d0e1      	beq.n	909c <__gedf2+0x58>
    90d8:	4258      	negs	r0, r3
    90da:	4158      	adcs	r0, r3
    90dc:	2201      	movs	r2, #1
    90de:	4241      	negs	r1, r0
    90e0:	4311      	orrs	r1, r2
    90e2:	1c08      	adds	r0, r1, #0
    90e4:	e7e1      	b.n	90aa <__gedf2+0x66>
    90e6:	1c29      	adds	r1, r5, #0
    90e8:	4311      	orrs	r1, r2
    90ea:	d102      	bne.n	90f2 <__gedf2+0xae>
    90ec:	2e00      	cmp	r6, #0
    90ee:	d0c2      	beq.n	9076 <__gedf2+0x32>
    90f0:	e7d4      	b.n	909c <__gedf2+0x58>
    90f2:	2002      	movs	r0, #2
    90f4:	4240      	negs	r0, r0
    90f6:	e7d8      	b.n	90aa <__gedf2+0x66>
    90f8:	42af      	cmp	r7, r5
    90fa:	d8d1      	bhi.n	90a0 <__gedf2+0x5c>
    90fc:	d009      	beq.n	9112 <__gedf2+0xce>
    90fe:	2000      	movs	r0, #0
    9100:	42af      	cmp	r7, r5
    9102:	d2d2      	bcs.n	90aa <__gedf2+0x66>
    9104:	4650      	mov	r0, sl
    9106:	4241      	negs	r1, r0
    9108:	4148      	adcs	r0, r1
    910a:	2301      	movs	r3, #1
    910c:	4240      	negs	r0, r0
    910e:	4318      	orrs	r0, r3
    9110:	e7cb      	b.n	90aa <__gedf2+0x66>
    9112:	45c4      	cmp	ip, r8
    9114:	d8c4      	bhi.n	90a0 <__gedf2+0x5c>
    9116:	2000      	movs	r0, #0
    9118:	45c4      	cmp	ip, r8
    911a:	d3f3      	bcc.n	9104 <__gedf2+0xc0>
    911c:	e7c5      	b.n	90aa <__gedf2+0x66>
    911e:	46c0      	nop			; (mov r8, r8)
    9120:	000007ff 	.word	0x000007ff

00009124 <__ledf2>:
    9124:	b5f0      	push	{r4, r5, r6, r7, lr}
    9126:	465f      	mov	r7, fp
    9128:	464d      	mov	r5, r9
    912a:	4644      	mov	r4, r8
    912c:	4656      	mov	r6, sl
    912e:	4680      	mov	r8, r0
    9130:	b4f0      	push	{r4, r5, r6, r7}
    9132:	1c06      	adds	r6, r0, #0
    9134:	0308      	lsls	r0, r1, #12
    9136:	0b00      	lsrs	r0, r0, #12
    9138:	4684      	mov	ip, r0
    913a:	482c      	ldr	r0, [pc, #176]	; (91ec <__ledf2+0xc8>)
    913c:	004c      	lsls	r4, r1, #1
    913e:	031f      	lsls	r7, r3, #12
    9140:	005d      	lsls	r5, r3, #1
    9142:	0fc9      	lsrs	r1, r1, #31
    9144:	0d64      	lsrs	r4, r4, #21
    9146:	468b      	mov	fp, r1
    9148:	4691      	mov	r9, r2
    914a:	0b3f      	lsrs	r7, r7, #12
    914c:	0d6d      	lsrs	r5, r5, #21
    914e:	0fdb      	lsrs	r3, r3, #31
    9150:	4284      	cmp	r4, r0
    9152:	d012      	beq.n	917a <__ledf2+0x56>
    9154:	4285      	cmp	r5, r0
    9156:	d025      	beq.n	91a4 <__ledf2+0x80>
    9158:	2c00      	cmp	r4, #0
    915a:	d114      	bne.n	9186 <__ledf2+0x62>
    915c:	4661      	mov	r1, ip
    915e:	430e      	orrs	r6, r1
    9160:	4270      	negs	r0, r6
    9162:	4146      	adcs	r6, r0
    9164:	2d00      	cmp	r5, #0
    9166:	d035      	beq.n	91d4 <__ledf2+0xb0>
    9168:	2e00      	cmp	r6, #0
    916a:	d021      	beq.n	91b0 <__ledf2+0x8c>
    916c:	4258      	negs	r0, r3
    916e:	4158      	adcs	r0, r3
    9170:	2101      	movs	r1, #1
    9172:	4243      	negs	r3, r0
    9174:	430b      	orrs	r3, r1
    9176:	1c18      	adds	r0, r3, #0
    9178:	e00e      	b.n	9198 <__ledf2+0x74>
    917a:	4661      	mov	r1, ip
    917c:	2002      	movs	r0, #2
    917e:	4331      	orrs	r1, r6
    9180:	d10a      	bne.n	9198 <__ledf2+0x74>
    9182:	42a5      	cmp	r5, r4
    9184:	d00e      	beq.n	91a4 <__ledf2+0x80>
    9186:	2d00      	cmp	r5, #0
    9188:	d112      	bne.n	91b0 <__ledf2+0x8c>
    918a:	433a      	orrs	r2, r7
    918c:	d110      	bne.n	91b0 <__ledf2+0x8c>
    918e:	465b      	mov	r3, fp
    9190:	4259      	negs	r1, r3
    9192:	2301      	movs	r3, #1
    9194:	4319      	orrs	r1, r3
    9196:	1c08      	adds	r0, r1, #0
    9198:	bc3c      	pop	{r2, r3, r4, r5}
    919a:	4690      	mov	r8, r2
    919c:	4699      	mov	r9, r3
    919e:	46a2      	mov	sl, r4
    91a0:	46ab      	mov	fp, r5
    91a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91a4:	1c39      	adds	r1, r7, #0
    91a6:	2002      	movs	r0, #2
    91a8:	4311      	orrs	r1, r2
    91aa:	d1f5      	bne.n	9198 <__ledf2+0x74>
    91ac:	2c00      	cmp	r4, #0
    91ae:	d0d5      	beq.n	915c <__ledf2+0x38>
    91b0:	459b      	cmp	fp, r3
    91b2:	d1ec      	bne.n	918e <__ledf2+0x6a>
    91b4:	42ac      	cmp	r4, r5
    91b6:	dcea      	bgt.n	918e <__ledf2+0x6a>
    91b8:	db05      	blt.n	91c6 <__ledf2+0xa2>
    91ba:	45bc      	cmp	ip, r7
    91bc:	d8e7      	bhi.n	918e <__ledf2+0x6a>
    91be:	d00f      	beq.n	91e0 <__ledf2+0xbc>
    91c0:	2000      	movs	r0, #0
    91c2:	45bc      	cmp	ip, r7
    91c4:	d2e8      	bcs.n	9198 <__ledf2+0x74>
    91c6:	4658      	mov	r0, fp
    91c8:	4241      	negs	r1, r0
    91ca:	4148      	adcs	r0, r1
    91cc:	4241      	negs	r1, r0
    91ce:	2001      	movs	r0, #1
    91d0:	4308      	orrs	r0, r1
    91d2:	e7e1      	b.n	9198 <__ledf2+0x74>
    91d4:	433a      	orrs	r2, r7
    91d6:	d1c7      	bne.n	9168 <__ledf2+0x44>
    91d8:	2000      	movs	r0, #0
    91da:	2e00      	cmp	r6, #0
    91dc:	d1dc      	bne.n	9198 <__ledf2+0x74>
    91de:	e7d6      	b.n	918e <__ledf2+0x6a>
    91e0:	45c8      	cmp	r8, r9
    91e2:	d8d4      	bhi.n	918e <__ledf2+0x6a>
    91e4:	2000      	movs	r0, #0
    91e6:	45c8      	cmp	r8, r9
    91e8:	d3ed      	bcc.n	91c6 <__ledf2+0xa2>
    91ea:	e7d5      	b.n	9198 <__ledf2+0x74>
    91ec:	000007ff 	.word	0x000007ff

000091f0 <__aeabi_dmul>:
    91f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    91f2:	465f      	mov	r7, fp
    91f4:	4656      	mov	r6, sl
    91f6:	464d      	mov	r5, r9
    91f8:	4644      	mov	r4, r8
    91fa:	b4f0      	push	{r4, r5, r6, r7}
    91fc:	1c05      	adds	r5, r0, #0
    91fe:	1c06      	adds	r6, r0, #0
    9200:	0308      	lsls	r0, r1, #12
    9202:	b087      	sub	sp, #28
    9204:	4699      	mov	r9, r3
    9206:	004f      	lsls	r7, r1, #1
    9208:	0b03      	lsrs	r3, r0, #12
    920a:	0fcc      	lsrs	r4, r1, #31
    920c:	4692      	mov	sl, r2
    920e:	469b      	mov	fp, r3
    9210:	0d7f      	lsrs	r7, r7, #21
    9212:	9401      	str	r4, [sp, #4]
    9214:	d067      	beq.n	92e6 <__aeabi_dmul+0xf6>
    9216:	4b6c      	ldr	r3, [pc, #432]	; (93c8 <__aeabi_dmul+0x1d8>)
    9218:	429f      	cmp	r7, r3
    921a:	d036      	beq.n	928a <__aeabi_dmul+0x9a>
    921c:	2080      	movs	r0, #128	; 0x80
    921e:	465b      	mov	r3, fp
    9220:	0340      	lsls	r0, r0, #13
    9222:	4318      	orrs	r0, r3
    9224:	00c0      	lsls	r0, r0, #3
    9226:	0f6b      	lsrs	r3, r5, #29
    9228:	4318      	orrs	r0, r3
    922a:	4b68      	ldr	r3, [pc, #416]	; (93cc <__aeabi_dmul+0x1dc>)
    922c:	4683      	mov	fp, r0
    922e:	469c      	mov	ip, r3
    9230:	2300      	movs	r3, #0
    9232:	4698      	mov	r8, r3
    9234:	00ee      	lsls	r6, r5, #3
    9236:	4467      	add	r7, ip
    9238:	9300      	str	r3, [sp, #0]
    923a:	464b      	mov	r3, r9
    923c:	4649      	mov	r1, r9
    923e:	031d      	lsls	r5, r3, #12
    9240:	0fc9      	lsrs	r1, r1, #31
    9242:	005b      	lsls	r3, r3, #1
    9244:	4652      	mov	r2, sl
    9246:	0b2d      	lsrs	r5, r5, #12
    9248:	0d5b      	lsrs	r3, r3, #21
    924a:	4689      	mov	r9, r1
    924c:	d100      	bne.n	9250 <__aeabi_dmul+0x60>
    924e:	e06e      	b.n	932e <__aeabi_dmul+0x13e>
    9250:	495d      	ldr	r1, [pc, #372]	; (93c8 <__aeabi_dmul+0x1d8>)
    9252:	428b      	cmp	r3, r1
    9254:	d064      	beq.n	9320 <__aeabi_dmul+0x130>
    9256:	2080      	movs	r0, #128	; 0x80
    9258:	495c      	ldr	r1, [pc, #368]	; (93cc <__aeabi_dmul+0x1dc>)
    925a:	0340      	lsls	r0, r0, #13
    925c:	468c      	mov	ip, r1
    925e:	2100      	movs	r1, #0
    9260:	4305      	orrs	r5, r0
    9262:	00ed      	lsls	r5, r5, #3
    9264:	0f50      	lsrs	r0, r2, #29
    9266:	4305      	orrs	r5, r0
    9268:	00d2      	lsls	r2, r2, #3
    926a:	4463      	add	r3, ip
    926c:	4648      	mov	r0, r9
    926e:	18ff      	adds	r7, r7, r3
    9270:	1c7b      	adds	r3, r7, #1
    9272:	469a      	mov	sl, r3
    9274:	9b00      	ldr	r3, [sp, #0]
    9276:	4060      	eors	r0, r4
    9278:	9002      	str	r0, [sp, #8]
    927a:	430b      	orrs	r3, r1
    927c:	2b0f      	cmp	r3, #15
    927e:	d900      	bls.n	9282 <__aeabi_dmul+0x92>
    9280:	e0ac      	b.n	93dc <__aeabi_dmul+0x1ec>
    9282:	4853      	ldr	r0, [pc, #332]	; (93d0 <__aeabi_dmul+0x1e0>)
    9284:	009b      	lsls	r3, r3, #2
    9286:	58c3      	ldr	r3, [r0, r3]
    9288:	469f      	mov	pc, r3
    928a:	465b      	mov	r3, fp
    928c:	431d      	orrs	r5, r3
    928e:	d000      	beq.n	9292 <__aeabi_dmul+0xa2>
    9290:	e082      	b.n	9398 <__aeabi_dmul+0x1a8>
    9292:	2308      	movs	r3, #8
    9294:	9300      	str	r3, [sp, #0]
    9296:	2300      	movs	r3, #0
    9298:	469b      	mov	fp, r3
    929a:	3302      	adds	r3, #2
    929c:	2600      	movs	r6, #0
    929e:	4698      	mov	r8, r3
    92a0:	e7cb      	b.n	923a <__aeabi_dmul+0x4a>
    92a2:	9b02      	ldr	r3, [sp, #8]
    92a4:	9301      	str	r3, [sp, #4]
    92a6:	4643      	mov	r3, r8
    92a8:	2b02      	cmp	r3, #2
    92aa:	d159      	bne.n	9360 <__aeabi_dmul+0x170>
    92ac:	2401      	movs	r4, #1
    92ae:	2500      	movs	r5, #0
    92b0:	2600      	movs	r6, #0
    92b2:	9b01      	ldr	r3, [sp, #4]
    92b4:	401c      	ands	r4, r3
    92b6:	4b44      	ldr	r3, [pc, #272]	; (93c8 <__aeabi_dmul+0x1d8>)
    92b8:	2100      	movs	r1, #0
    92ba:	032d      	lsls	r5, r5, #12
    92bc:	0d0a      	lsrs	r2, r1, #20
    92be:	0512      	lsls	r2, r2, #20
    92c0:	0b2d      	lsrs	r5, r5, #12
    92c2:	4315      	orrs	r5, r2
    92c4:	4a43      	ldr	r2, [pc, #268]	; (93d4 <__aeabi_dmul+0x1e4>)
    92c6:	051b      	lsls	r3, r3, #20
    92c8:	4015      	ands	r5, r2
    92ca:	431d      	orrs	r5, r3
    92cc:	006d      	lsls	r5, r5, #1
    92ce:	07e4      	lsls	r4, r4, #31
    92d0:	086d      	lsrs	r5, r5, #1
    92d2:	4325      	orrs	r5, r4
    92d4:	1c30      	adds	r0, r6, #0
    92d6:	1c29      	adds	r1, r5, #0
    92d8:	b007      	add	sp, #28
    92da:	bc3c      	pop	{r2, r3, r4, r5}
    92dc:	4690      	mov	r8, r2
    92de:	4699      	mov	r9, r3
    92e0:	46a2      	mov	sl, r4
    92e2:	46ab      	mov	fp, r5
    92e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e6:	432b      	orrs	r3, r5
    92e8:	d04e      	beq.n	9388 <__aeabi_dmul+0x198>
    92ea:	465b      	mov	r3, fp
    92ec:	2b00      	cmp	r3, #0
    92ee:	d100      	bne.n	92f2 <__aeabi_dmul+0x102>
    92f0:	e185      	b.n	95fe <__aeabi_dmul+0x40e>
    92f2:	4658      	mov	r0, fp
    92f4:	f000 ff18 	bl	a128 <__clzsi2>
    92f8:	1c02      	adds	r2, r0, #0
    92fa:	2328      	movs	r3, #40	; 0x28
    92fc:	1c29      	adds	r1, r5, #0
    92fe:	1a9b      	subs	r3, r3, r2
    9300:	1c16      	adds	r6, r2, #0
    9302:	4658      	mov	r0, fp
    9304:	40d9      	lsrs	r1, r3
    9306:	3e08      	subs	r6, #8
    9308:	40b0      	lsls	r0, r6
    930a:	1c0b      	adds	r3, r1, #0
    930c:	40b5      	lsls	r5, r6
    930e:	4303      	orrs	r3, r0
    9310:	469b      	mov	fp, r3
    9312:	1c2e      	adds	r6, r5, #0
    9314:	2300      	movs	r3, #0
    9316:	4f30      	ldr	r7, [pc, #192]	; (93d8 <__aeabi_dmul+0x1e8>)
    9318:	9300      	str	r3, [sp, #0]
    931a:	1abf      	subs	r7, r7, r2
    931c:	4698      	mov	r8, r3
    931e:	e78c      	b.n	923a <__aeabi_dmul+0x4a>
    9320:	4651      	mov	r1, sl
    9322:	4329      	orrs	r1, r5
    9324:	d12e      	bne.n	9384 <__aeabi_dmul+0x194>
    9326:	2500      	movs	r5, #0
    9328:	2200      	movs	r2, #0
    932a:	2102      	movs	r1, #2
    932c:	e79e      	b.n	926c <__aeabi_dmul+0x7c>
    932e:	4651      	mov	r1, sl
    9330:	4329      	orrs	r1, r5
    9332:	d023      	beq.n	937c <__aeabi_dmul+0x18c>
    9334:	2d00      	cmp	r5, #0
    9336:	d100      	bne.n	933a <__aeabi_dmul+0x14a>
    9338:	e154      	b.n	95e4 <__aeabi_dmul+0x3f4>
    933a:	1c28      	adds	r0, r5, #0
    933c:	f000 fef4 	bl	a128 <__clzsi2>
    9340:	1c03      	adds	r3, r0, #0
    9342:	2128      	movs	r1, #40	; 0x28
    9344:	4650      	mov	r0, sl
    9346:	1ac9      	subs	r1, r1, r3
    9348:	1c1a      	adds	r2, r3, #0
    934a:	40c8      	lsrs	r0, r1
    934c:	4651      	mov	r1, sl
    934e:	3a08      	subs	r2, #8
    9350:	4091      	lsls	r1, r2
    9352:	4095      	lsls	r5, r2
    9354:	1c0a      	adds	r2, r1, #0
    9356:	4305      	orrs	r5, r0
    9358:	481f      	ldr	r0, [pc, #124]	; (93d8 <__aeabi_dmul+0x1e8>)
    935a:	2100      	movs	r1, #0
    935c:	1ac3      	subs	r3, r0, r3
    935e:	e785      	b.n	926c <__aeabi_dmul+0x7c>
    9360:	2b03      	cmp	r3, #3
    9362:	d100      	bne.n	9366 <__aeabi_dmul+0x176>
    9364:	e1c2      	b.n	96ec <__aeabi_dmul+0x4fc>
    9366:	2b01      	cmp	r3, #1
    9368:	d000      	beq.n	936c <__aeabi_dmul+0x17c>
    936a:	e16d      	b.n	9648 <__aeabi_dmul+0x458>
    936c:	4644      	mov	r4, r8
    936e:	9b01      	ldr	r3, [sp, #4]
    9370:	2500      	movs	r5, #0
    9372:	401c      	ands	r4, r3
    9374:	b2e4      	uxtb	r4, r4
    9376:	2300      	movs	r3, #0
    9378:	2600      	movs	r6, #0
    937a:	e79d      	b.n	92b8 <__aeabi_dmul+0xc8>
    937c:	2500      	movs	r5, #0
    937e:	2200      	movs	r2, #0
    9380:	2101      	movs	r1, #1
    9382:	e773      	b.n	926c <__aeabi_dmul+0x7c>
    9384:	2103      	movs	r1, #3
    9386:	e771      	b.n	926c <__aeabi_dmul+0x7c>
    9388:	2304      	movs	r3, #4
    938a:	9300      	str	r3, [sp, #0]
    938c:	2300      	movs	r3, #0
    938e:	469b      	mov	fp, r3
    9390:	3301      	adds	r3, #1
    9392:	2600      	movs	r6, #0
    9394:	4698      	mov	r8, r3
    9396:	e750      	b.n	923a <__aeabi_dmul+0x4a>
    9398:	230c      	movs	r3, #12
    939a:	9300      	str	r3, [sp, #0]
    939c:	3b09      	subs	r3, #9
    939e:	4698      	mov	r8, r3
    93a0:	e74b      	b.n	923a <__aeabi_dmul+0x4a>
    93a2:	2580      	movs	r5, #128	; 0x80
    93a4:	2400      	movs	r4, #0
    93a6:	032d      	lsls	r5, r5, #12
    93a8:	2600      	movs	r6, #0
    93aa:	4b07      	ldr	r3, [pc, #28]	; (93c8 <__aeabi_dmul+0x1d8>)
    93ac:	e784      	b.n	92b8 <__aeabi_dmul+0xc8>
    93ae:	464b      	mov	r3, r9
    93b0:	46ab      	mov	fp, r5
    93b2:	1c16      	adds	r6, r2, #0
    93b4:	9301      	str	r3, [sp, #4]
    93b6:	4688      	mov	r8, r1
    93b8:	e775      	b.n	92a6 <__aeabi_dmul+0xb6>
    93ba:	9b02      	ldr	r3, [sp, #8]
    93bc:	46ab      	mov	fp, r5
    93be:	1c16      	adds	r6, r2, #0
    93c0:	9301      	str	r3, [sp, #4]
    93c2:	4688      	mov	r8, r1
    93c4:	e76f      	b.n	92a6 <__aeabi_dmul+0xb6>
    93c6:	46c0      	nop			; (mov r8, r8)
    93c8:	000007ff 	.word	0x000007ff
    93cc:	fffffc01 	.word	0xfffffc01
    93d0:	00010900 	.word	0x00010900
    93d4:	800fffff 	.word	0x800fffff
    93d8:	fffffc0d 	.word	0xfffffc0d
    93dc:	0c33      	lsrs	r3, r6, #16
    93de:	0436      	lsls	r6, r6, #16
    93e0:	0c36      	lsrs	r6, r6, #16
    93e2:	469c      	mov	ip, r3
    93e4:	1c33      	adds	r3, r6, #0
    93e6:	0c14      	lsrs	r4, r2, #16
    93e8:	0412      	lsls	r2, r2, #16
    93ea:	0c12      	lsrs	r2, r2, #16
    93ec:	4353      	muls	r3, r2
    93ee:	4698      	mov	r8, r3
    93f0:	4663      	mov	r3, ip
    93f2:	4353      	muls	r3, r2
    93f4:	4699      	mov	r9, r3
    93f6:	4663      	mov	r3, ip
    93f8:	4363      	muls	r3, r4
    93fa:	9301      	str	r3, [sp, #4]
    93fc:	1c33      	adds	r3, r6, #0
    93fe:	4641      	mov	r1, r8
    9400:	4363      	muls	r3, r4
    9402:	0c09      	lsrs	r1, r1, #16
    9404:	444b      	add	r3, r9
    9406:	185b      	adds	r3, r3, r1
    9408:	4599      	cmp	r9, r3
    940a:	d905      	bls.n	9418 <__aeabi_dmul+0x228>
    940c:	2080      	movs	r0, #128	; 0x80
    940e:	0240      	lsls	r0, r0, #9
    9410:	4681      	mov	r9, r0
    9412:	9901      	ldr	r1, [sp, #4]
    9414:	4449      	add	r1, r9
    9416:	9101      	str	r1, [sp, #4]
    9418:	0c19      	lsrs	r1, r3, #16
    941a:	9103      	str	r1, [sp, #12]
    941c:	4641      	mov	r1, r8
    941e:	0409      	lsls	r1, r1, #16
    9420:	0c09      	lsrs	r1, r1, #16
    9422:	041b      	lsls	r3, r3, #16
    9424:	185b      	adds	r3, r3, r1
    9426:	9304      	str	r3, [sp, #16]
    9428:	0c2b      	lsrs	r3, r5, #16
    942a:	4698      	mov	r8, r3
    942c:	1c33      	adds	r3, r6, #0
    942e:	042d      	lsls	r5, r5, #16
    9430:	0c29      	lsrs	r1, r5, #16
    9432:	434b      	muls	r3, r1
    9434:	4660      	mov	r0, ip
    9436:	9300      	str	r3, [sp, #0]
    9438:	4643      	mov	r3, r8
    943a:	4665      	mov	r5, ip
    943c:	4358      	muls	r0, r3
    943e:	435e      	muls	r6, r3
    9440:	9b00      	ldr	r3, [sp, #0]
    9442:	434d      	muls	r5, r1
    9444:	0c1b      	lsrs	r3, r3, #16
    9446:	4699      	mov	r9, r3
    9448:	19ae      	adds	r6, r5, r6
    944a:	444e      	add	r6, r9
    944c:	4684      	mov	ip, r0
    944e:	42b5      	cmp	r5, r6
    9450:	d903      	bls.n	945a <__aeabi_dmul+0x26a>
    9452:	2380      	movs	r3, #128	; 0x80
    9454:	025b      	lsls	r3, r3, #9
    9456:	4699      	mov	r9, r3
    9458:	44cc      	add	ip, r9
    945a:	0c35      	lsrs	r5, r6, #16
    945c:	1c2b      	adds	r3, r5, #0
    945e:	9803      	ldr	r0, [sp, #12]
    9460:	4463      	add	r3, ip
    9462:	4684      	mov	ip, r0
    9464:	9305      	str	r3, [sp, #20]
    9466:	9b00      	ldr	r3, [sp, #0]
    9468:	0436      	lsls	r6, r6, #16
    946a:	041b      	lsls	r3, r3, #16
    946c:	0c1b      	lsrs	r3, r3, #16
    946e:	18f3      	adds	r3, r6, r3
    9470:	449c      	add	ip, r3
    9472:	4660      	mov	r0, ip
    9474:	9003      	str	r0, [sp, #12]
    9476:	4658      	mov	r0, fp
    9478:	0405      	lsls	r5, r0, #16
    947a:	0c06      	lsrs	r6, r0, #16
    947c:	0c28      	lsrs	r0, r5, #16
    947e:	4684      	mov	ip, r0
    9480:	4350      	muls	r0, r2
    9482:	1c35      	adds	r5, r6, #0
    9484:	4681      	mov	r9, r0
    9486:	4660      	mov	r0, ip
    9488:	4365      	muls	r5, r4
    948a:	4344      	muls	r4, r0
    948c:	4648      	mov	r0, r9
    948e:	0c00      	lsrs	r0, r0, #16
    9490:	4683      	mov	fp, r0
    9492:	4372      	muls	r2, r6
    9494:	1914      	adds	r4, r2, r4
    9496:	445c      	add	r4, fp
    9498:	42a2      	cmp	r2, r4
    949a:	d903      	bls.n	94a4 <__aeabi_dmul+0x2b4>
    949c:	2280      	movs	r2, #128	; 0x80
    949e:	0252      	lsls	r2, r2, #9
    94a0:	4693      	mov	fp, r2
    94a2:	445d      	add	r5, fp
    94a4:	0c22      	lsrs	r2, r4, #16
    94a6:	18ad      	adds	r5, r5, r2
    94a8:	464a      	mov	r2, r9
    94aa:	0412      	lsls	r2, r2, #16
    94ac:	0c12      	lsrs	r2, r2, #16
    94ae:	0424      	lsls	r4, r4, #16
    94b0:	4640      	mov	r0, r8
    94b2:	18a4      	adds	r4, r4, r2
    94b4:	4662      	mov	r2, ip
    94b6:	434a      	muls	r2, r1
    94b8:	4371      	muls	r1, r6
    94ba:	4346      	muls	r6, r0
    94bc:	4660      	mov	r0, ip
    94be:	9600      	str	r6, [sp, #0]
    94c0:	4646      	mov	r6, r8
    94c2:	4370      	muls	r0, r6
    94c4:	4680      	mov	r8, r0
    94c6:	0c10      	lsrs	r0, r2, #16
    94c8:	4684      	mov	ip, r0
    94ca:	4488      	add	r8, r1
    94cc:	44e0      	add	r8, ip
    94ce:	4541      	cmp	r1, r8
    94d0:	d905      	bls.n	94de <__aeabi_dmul+0x2ee>
    94d2:	2180      	movs	r1, #128	; 0x80
    94d4:	0249      	lsls	r1, r1, #9
    94d6:	468c      	mov	ip, r1
    94d8:	9900      	ldr	r1, [sp, #0]
    94da:	4461      	add	r1, ip
    94dc:	9100      	str	r1, [sp, #0]
    94de:	9801      	ldr	r0, [sp, #4]
    94e0:	9903      	ldr	r1, [sp, #12]
    94e2:	4684      	mov	ip, r0
    94e4:	4461      	add	r1, ip
    94e6:	4299      	cmp	r1, r3
    94e8:	419b      	sbcs	r3, r3
    94ea:	425b      	negs	r3, r3
    94ec:	4699      	mov	r9, r3
    94ee:	9805      	ldr	r0, [sp, #20]
    94f0:	4643      	mov	r3, r8
    94f2:	4684      	mov	ip, r0
    94f4:	0412      	lsls	r2, r2, #16
    94f6:	0c12      	lsrs	r2, r2, #16
    94f8:	041b      	lsls	r3, r3, #16
    94fa:	189b      	adds	r3, r3, r2
    94fc:	4463      	add	r3, ip
    94fe:	469c      	mov	ip, r3
    9500:	46ab      	mov	fp, r5
    9502:	4283      	cmp	r3, r0
    9504:	419b      	sbcs	r3, r3
    9506:	4640      	mov	r0, r8
    9508:	190a      	adds	r2, r1, r4
    950a:	44cc      	add	ip, r9
    950c:	42a2      	cmp	r2, r4
    950e:	4189      	sbcs	r1, r1
    9510:	44e3      	add	fp, ip
    9512:	45cc      	cmp	ip, r9
    9514:	41b6      	sbcs	r6, r6
    9516:	465c      	mov	r4, fp
    9518:	0c00      	lsrs	r0, r0, #16
    951a:	4680      	mov	r8, r0
    951c:	4249      	negs	r1, r1
    951e:	4276      	negs	r6, r6
    9520:	425b      	negs	r3, r3
    9522:	1864      	adds	r4, r4, r1
    9524:	4333      	orrs	r3, r6
    9526:	4498      	add	r8, r3
    9528:	428c      	cmp	r4, r1
    952a:	4189      	sbcs	r1, r1
    952c:	45ab      	cmp	fp, r5
    952e:	419b      	sbcs	r3, r3
    9530:	4249      	negs	r1, r1
    9532:	425b      	negs	r3, r3
    9534:	4319      	orrs	r1, r3
    9536:	1c0d      	adds	r5, r1, #0
    9538:	9b00      	ldr	r3, [sp, #0]
    953a:	4445      	add	r5, r8
    953c:	18ee      	adds	r6, r5, r3
    953e:	0276      	lsls	r6, r6, #9
    9540:	0de5      	lsrs	r5, r4, #23
    9542:	432e      	orrs	r6, r5
    9544:	46b3      	mov	fp, r6
    9546:	9b04      	ldr	r3, [sp, #16]
    9548:	0256      	lsls	r6, r2, #9
    954a:	431e      	orrs	r6, r3
    954c:	1e73      	subs	r3, r6, #1
    954e:	419e      	sbcs	r6, r3
    9550:	465b      	mov	r3, fp
    9552:	0dd2      	lsrs	r2, r2, #23
    9554:	4332      	orrs	r2, r6
    9556:	0266      	lsls	r6, r4, #9
    9558:	4316      	orrs	r6, r2
    955a:	01db      	lsls	r3, r3, #7
    955c:	d50a      	bpl.n	9574 <__aeabi_dmul+0x384>
    955e:	2301      	movs	r3, #1
    9560:	4033      	ands	r3, r6
    9562:	0876      	lsrs	r6, r6, #1
    9564:	431e      	orrs	r6, r3
    9566:	465b      	mov	r3, fp
    9568:	07db      	lsls	r3, r3, #31
    956a:	431e      	orrs	r6, r3
    956c:	465b      	mov	r3, fp
    956e:	085b      	lsrs	r3, r3, #1
    9570:	469b      	mov	fp, r3
    9572:	4657      	mov	r7, sl
    9574:	4b63      	ldr	r3, [pc, #396]	; (9704 <__aeabi_dmul+0x514>)
    9576:	18fb      	adds	r3, r7, r3
    9578:	2b00      	cmp	r3, #0
    957a:	dd5a      	ble.n	9632 <__aeabi_dmul+0x442>
    957c:	0772      	lsls	r2, r6, #29
    957e:	d009      	beq.n	9594 <__aeabi_dmul+0x3a4>
    9580:	220f      	movs	r2, #15
    9582:	4032      	ands	r2, r6
    9584:	2a04      	cmp	r2, #4
    9586:	d005      	beq.n	9594 <__aeabi_dmul+0x3a4>
    9588:	1d32      	adds	r2, r6, #4
    958a:	42b2      	cmp	r2, r6
    958c:	41b6      	sbcs	r6, r6
    958e:	4276      	negs	r6, r6
    9590:	44b3      	add	fp, r6
    9592:	1c16      	adds	r6, r2, #0
    9594:	465a      	mov	r2, fp
    9596:	01d2      	lsls	r2, r2, #7
    9598:	d506      	bpl.n	95a8 <__aeabi_dmul+0x3b8>
    959a:	465a      	mov	r2, fp
    959c:	4b5a      	ldr	r3, [pc, #360]	; (9708 <__aeabi_dmul+0x518>)
    959e:	401a      	ands	r2, r3
    95a0:	2380      	movs	r3, #128	; 0x80
    95a2:	4693      	mov	fp, r2
    95a4:	00db      	lsls	r3, r3, #3
    95a6:	18fb      	adds	r3, r7, r3
    95a8:	4a58      	ldr	r2, [pc, #352]	; (970c <__aeabi_dmul+0x51c>)
    95aa:	4293      	cmp	r3, r2
    95ac:	dd34      	ble.n	9618 <__aeabi_dmul+0x428>
    95ae:	2401      	movs	r4, #1
    95b0:	9b02      	ldr	r3, [sp, #8]
    95b2:	2500      	movs	r5, #0
    95b4:	401c      	ands	r4, r3
    95b6:	2600      	movs	r6, #0
    95b8:	4b55      	ldr	r3, [pc, #340]	; (9710 <__aeabi_dmul+0x520>)
    95ba:	e67d      	b.n	92b8 <__aeabi_dmul+0xc8>
    95bc:	2080      	movs	r0, #128	; 0x80
    95be:	465b      	mov	r3, fp
    95c0:	0300      	lsls	r0, r0, #12
    95c2:	4203      	tst	r3, r0
    95c4:	d008      	beq.n	95d8 <__aeabi_dmul+0x3e8>
    95c6:	4205      	tst	r5, r0
    95c8:	d106      	bne.n	95d8 <__aeabi_dmul+0x3e8>
    95ca:	4305      	orrs	r5, r0
    95cc:	032d      	lsls	r5, r5, #12
    95ce:	0b2d      	lsrs	r5, r5, #12
    95d0:	464c      	mov	r4, r9
    95d2:	1c16      	adds	r6, r2, #0
    95d4:	4b4e      	ldr	r3, [pc, #312]	; (9710 <__aeabi_dmul+0x520>)
    95d6:	e66f      	b.n	92b8 <__aeabi_dmul+0xc8>
    95d8:	465d      	mov	r5, fp
    95da:	4305      	orrs	r5, r0
    95dc:	032d      	lsls	r5, r5, #12
    95de:	0b2d      	lsrs	r5, r5, #12
    95e0:	4b4b      	ldr	r3, [pc, #300]	; (9710 <__aeabi_dmul+0x520>)
    95e2:	e669      	b.n	92b8 <__aeabi_dmul+0xc8>
    95e4:	4650      	mov	r0, sl
    95e6:	f000 fd9f 	bl	a128 <__clzsi2>
    95ea:	1c03      	adds	r3, r0, #0
    95ec:	3320      	adds	r3, #32
    95ee:	2b27      	cmp	r3, #39	; 0x27
    95f0:	dc00      	bgt.n	95f4 <__aeabi_dmul+0x404>
    95f2:	e6a6      	b.n	9342 <__aeabi_dmul+0x152>
    95f4:	4655      	mov	r5, sl
    95f6:	3808      	subs	r0, #8
    95f8:	4085      	lsls	r5, r0
    95fa:	2200      	movs	r2, #0
    95fc:	e6ac      	b.n	9358 <__aeabi_dmul+0x168>
    95fe:	1c28      	adds	r0, r5, #0
    9600:	f000 fd92 	bl	a128 <__clzsi2>
    9604:	1c02      	adds	r2, r0, #0
    9606:	3220      	adds	r2, #32
    9608:	2a27      	cmp	r2, #39	; 0x27
    960a:	dc00      	bgt.n	960e <__aeabi_dmul+0x41e>
    960c:	e675      	b.n	92fa <__aeabi_dmul+0x10a>
    960e:	3808      	subs	r0, #8
    9610:	4085      	lsls	r5, r0
    9612:	2600      	movs	r6, #0
    9614:	46ab      	mov	fp, r5
    9616:	e67d      	b.n	9314 <__aeabi_dmul+0x124>
    9618:	465a      	mov	r2, fp
    961a:	08f6      	lsrs	r6, r6, #3
    961c:	0752      	lsls	r2, r2, #29
    961e:	4316      	orrs	r6, r2
    9620:	465a      	mov	r2, fp
    9622:	2401      	movs	r4, #1
    9624:	0255      	lsls	r5, r2, #9
    9626:	9a02      	ldr	r2, [sp, #8]
    9628:	055b      	lsls	r3, r3, #21
    962a:	0b2d      	lsrs	r5, r5, #12
    962c:	0d5b      	lsrs	r3, r3, #21
    962e:	4014      	ands	r4, r2
    9630:	e642      	b.n	92b8 <__aeabi_dmul+0xc8>
    9632:	4d38      	ldr	r5, [pc, #224]	; (9714 <__aeabi_dmul+0x524>)
    9634:	1bed      	subs	r5, r5, r7
    9636:	2d38      	cmp	r5, #56	; 0x38
    9638:	dd0a      	ble.n	9650 <__aeabi_dmul+0x460>
    963a:	2401      	movs	r4, #1
    963c:	9b02      	ldr	r3, [sp, #8]
    963e:	2500      	movs	r5, #0
    9640:	401c      	ands	r4, r3
    9642:	2600      	movs	r6, #0
    9644:	2300      	movs	r3, #0
    9646:	e637      	b.n	92b8 <__aeabi_dmul+0xc8>
    9648:	9b01      	ldr	r3, [sp, #4]
    964a:	4657      	mov	r7, sl
    964c:	9302      	str	r3, [sp, #8]
    964e:	e791      	b.n	9574 <__aeabi_dmul+0x384>
    9650:	2d1f      	cmp	r5, #31
    9652:	dc25      	bgt.n	96a0 <__aeabi_dmul+0x4b0>
    9654:	4b30      	ldr	r3, [pc, #192]	; (9718 <__aeabi_dmul+0x528>)
    9656:	1c32      	adds	r2, r6, #0
    9658:	469c      	mov	ip, r3
    965a:	4467      	add	r7, ip
    965c:	40be      	lsls	r6, r7
    965e:	465b      	mov	r3, fp
    9660:	40bb      	lsls	r3, r7
    9662:	1c37      	adds	r7, r6, #0
    9664:	40ea      	lsrs	r2, r5
    9666:	1e7e      	subs	r6, r7, #1
    9668:	41b7      	sbcs	r7, r6
    966a:	4313      	orrs	r3, r2
    966c:	433b      	orrs	r3, r7
    966e:	1c1e      	adds	r6, r3, #0
    9670:	465b      	mov	r3, fp
    9672:	40eb      	lsrs	r3, r5
    9674:	1c1d      	adds	r5, r3, #0
    9676:	0773      	lsls	r3, r6, #29
    9678:	d009      	beq.n	968e <__aeabi_dmul+0x49e>
    967a:	230f      	movs	r3, #15
    967c:	4033      	ands	r3, r6
    967e:	2b04      	cmp	r3, #4
    9680:	d005      	beq.n	968e <__aeabi_dmul+0x49e>
    9682:	1d33      	adds	r3, r6, #4
    9684:	42b3      	cmp	r3, r6
    9686:	41b6      	sbcs	r6, r6
    9688:	4276      	negs	r6, r6
    968a:	19ad      	adds	r5, r5, r6
    968c:	1c1e      	adds	r6, r3, #0
    968e:	022b      	lsls	r3, r5, #8
    9690:	d520      	bpl.n	96d4 <__aeabi_dmul+0x4e4>
    9692:	2401      	movs	r4, #1
    9694:	9b02      	ldr	r3, [sp, #8]
    9696:	2500      	movs	r5, #0
    9698:	401c      	ands	r4, r3
    969a:	2600      	movs	r6, #0
    969c:	2301      	movs	r3, #1
    969e:	e60b      	b.n	92b8 <__aeabi_dmul+0xc8>
    96a0:	465a      	mov	r2, fp
    96a2:	4b1e      	ldr	r3, [pc, #120]	; (971c <__aeabi_dmul+0x52c>)
    96a4:	1bdb      	subs	r3, r3, r7
    96a6:	40da      	lsrs	r2, r3
    96a8:	1c13      	adds	r3, r2, #0
    96aa:	2d20      	cmp	r5, #32
    96ac:	d01c      	beq.n	96e8 <__aeabi_dmul+0x4f8>
    96ae:	4a1c      	ldr	r2, [pc, #112]	; (9720 <__aeabi_dmul+0x530>)
    96b0:	4694      	mov	ip, r2
    96b2:	465a      	mov	r2, fp
    96b4:	4467      	add	r7, ip
    96b6:	40ba      	lsls	r2, r7
    96b8:	1c17      	adds	r7, r2, #0
    96ba:	433e      	orrs	r6, r7
    96bc:	1e72      	subs	r2, r6, #1
    96be:	4196      	sbcs	r6, r2
    96c0:	431e      	orrs	r6, r3
    96c2:	2307      	movs	r3, #7
    96c4:	2500      	movs	r5, #0
    96c6:	4033      	ands	r3, r6
    96c8:	d007      	beq.n	96da <__aeabi_dmul+0x4ea>
    96ca:	230f      	movs	r3, #15
    96cc:	2500      	movs	r5, #0
    96ce:	4033      	ands	r3, r6
    96d0:	2b04      	cmp	r3, #4
    96d2:	d1d6      	bne.n	9682 <__aeabi_dmul+0x492>
    96d4:	076b      	lsls	r3, r5, #29
    96d6:	026d      	lsls	r5, r5, #9
    96d8:	0b2d      	lsrs	r5, r5, #12
    96da:	2401      	movs	r4, #1
    96dc:	08f6      	lsrs	r6, r6, #3
    96de:	431e      	orrs	r6, r3
    96e0:	9b02      	ldr	r3, [sp, #8]
    96e2:	401c      	ands	r4, r3
    96e4:	2300      	movs	r3, #0
    96e6:	e5e7      	b.n	92b8 <__aeabi_dmul+0xc8>
    96e8:	2700      	movs	r7, #0
    96ea:	e7e6      	b.n	96ba <__aeabi_dmul+0x4ca>
    96ec:	2580      	movs	r5, #128	; 0x80
    96ee:	465b      	mov	r3, fp
    96f0:	2401      	movs	r4, #1
    96f2:	032d      	lsls	r5, r5, #12
    96f4:	431d      	orrs	r5, r3
    96f6:	9b01      	ldr	r3, [sp, #4]
    96f8:	032d      	lsls	r5, r5, #12
    96fa:	4023      	ands	r3, r4
    96fc:	1c1c      	adds	r4, r3, #0
    96fe:	0b2d      	lsrs	r5, r5, #12
    9700:	4b03      	ldr	r3, [pc, #12]	; (9710 <__aeabi_dmul+0x520>)
    9702:	e5d9      	b.n	92b8 <__aeabi_dmul+0xc8>
    9704:	000003ff 	.word	0x000003ff
    9708:	feffffff 	.word	0xfeffffff
    970c:	000007fe 	.word	0x000007fe
    9710:	000007ff 	.word	0x000007ff
    9714:	fffffc02 	.word	0xfffffc02
    9718:	0000041e 	.word	0x0000041e
    971c:	fffffbe2 	.word	0xfffffbe2
    9720:	0000043e 	.word	0x0000043e

00009724 <__aeabi_dsub>:
    9724:	b5f0      	push	{r4, r5, r6, r7, lr}
    9726:	464d      	mov	r5, r9
    9728:	4644      	mov	r4, r8
    972a:	465f      	mov	r7, fp
    972c:	4656      	mov	r6, sl
    972e:	b4f0      	push	{r4, r5, r6, r7}
    9730:	1c0e      	adds	r6, r1, #0
    9732:	1c11      	adds	r1, r2, #0
    9734:	0332      	lsls	r2, r6, #12
    9736:	0a52      	lsrs	r2, r2, #9
    9738:	0f47      	lsrs	r7, r0, #29
    973a:	4317      	orrs	r7, r2
    973c:	00c5      	lsls	r5, r0, #3
    973e:	031a      	lsls	r2, r3, #12
    9740:	0058      	lsls	r0, r3, #1
    9742:	0fdb      	lsrs	r3, r3, #31
    9744:	4699      	mov	r9, r3
    9746:	0a52      	lsrs	r2, r2, #9
    9748:	0f4b      	lsrs	r3, r1, #29
    974a:	b083      	sub	sp, #12
    974c:	431a      	orrs	r2, r3
    974e:	00cb      	lsls	r3, r1, #3
    9750:	9301      	str	r3, [sp, #4]
    9752:	4bcf      	ldr	r3, [pc, #828]	; (9a90 <__aeabi_dsub+0x36c>)
    9754:	0074      	lsls	r4, r6, #1
    9756:	0ff6      	lsrs	r6, r6, #31
    9758:	0d64      	lsrs	r4, r4, #21
    975a:	46b0      	mov	r8, r6
    975c:	0d40      	lsrs	r0, r0, #21
    975e:	4298      	cmp	r0, r3
    9760:	d100      	bne.n	9764 <__aeabi_dsub+0x40>
    9762:	e0e8      	b.n	9936 <__aeabi_dsub+0x212>
    9764:	2301      	movs	r3, #1
    9766:	4649      	mov	r1, r9
    9768:	4059      	eors	r1, r3
    976a:	1c0b      	adds	r3, r1, #0
    976c:	429e      	cmp	r6, r3
    976e:	d100      	bne.n	9772 <__aeabi_dsub+0x4e>
    9770:	e0b1      	b.n	98d6 <__aeabi_dsub+0x1b2>
    9772:	1a26      	subs	r6, r4, r0
    9774:	2e00      	cmp	r6, #0
    9776:	dc00      	bgt.n	977a <__aeabi_dsub+0x56>
    9778:	e11c      	b.n	99b4 <__aeabi_dsub+0x290>
    977a:	2800      	cmp	r0, #0
    977c:	d142      	bne.n	9804 <__aeabi_dsub+0xe0>
    977e:	1c13      	adds	r3, r2, #0
    9780:	9901      	ldr	r1, [sp, #4]
    9782:	430b      	orrs	r3, r1
    9784:	d000      	beq.n	9788 <__aeabi_dsub+0x64>
    9786:	e0e6      	b.n	9956 <__aeabi_dsub+0x232>
    9788:	076b      	lsls	r3, r5, #29
    978a:	d100      	bne.n	978e <__aeabi_dsub+0x6a>
    978c:	e08e      	b.n	98ac <__aeabi_dsub+0x188>
    978e:	230f      	movs	r3, #15
    9790:	402b      	ands	r3, r5
    9792:	2b04      	cmp	r3, #4
    9794:	d100      	bne.n	9798 <__aeabi_dsub+0x74>
    9796:	e089      	b.n	98ac <__aeabi_dsub+0x188>
    9798:	1d2a      	adds	r2, r5, #4
    979a:	42aa      	cmp	r2, r5
    979c:	41ad      	sbcs	r5, r5
    979e:	2380      	movs	r3, #128	; 0x80
    97a0:	2601      	movs	r6, #1
    97a2:	4641      	mov	r1, r8
    97a4:	426d      	negs	r5, r5
    97a6:	197f      	adds	r7, r7, r5
    97a8:	041b      	lsls	r3, r3, #16
    97aa:	403b      	ands	r3, r7
    97ac:	400e      	ands	r6, r1
    97ae:	1c15      	adds	r5, r2, #0
    97b0:	2b00      	cmp	r3, #0
    97b2:	d100      	bne.n	97b6 <__aeabi_dsub+0x92>
    97b4:	e083      	b.n	98be <__aeabi_dsub+0x19a>
    97b6:	4bb6      	ldr	r3, [pc, #728]	; (9a90 <__aeabi_dsub+0x36c>)
    97b8:	3401      	adds	r4, #1
    97ba:	429c      	cmp	r4, r3
    97bc:	d100      	bne.n	97c0 <__aeabi_dsub+0x9c>
    97be:	e116      	b.n	99ee <__aeabi_dsub+0x2ca>
    97c0:	1c3a      	adds	r2, r7, #0
    97c2:	4bb4      	ldr	r3, [pc, #720]	; (9a94 <__aeabi_dsub+0x370>)
    97c4:	08ed      	lsrs	r5, r5, #3
    97c6:	401a      	ands	r2, r3
    97c8:	0750      	lsls	r0, r2, #29
    97ca:	0564      	lsls	r4, r4, #21
    97cc:	0252      	lsls	r2, r2, #9
    97ce:	4305      	orrs	r5, r0
    97d0:	0b12      	lsrs	r2, r2, #12
    97d2:	0d64      	lsrs	r4, r4, #21
    97d4:	2100      	movs	r1, #0
    97d6:	0312      	lsls	r2, r2, #12
    97d8:	0d0b      	lsrs	r3, r1, #20
    97da:	051b      	lsls	r3, r3, #20
    97dc:	0564      	lsls	r4, r4, #21
    97de:	0b12      	lsrs	r2, r2, #12
    97e0:	431a      	orrs	r2, r3
    97e2:	0863      	lsrs	r3, r4, #1
    97e4:	4cac      	ldr	r4, [pc, #688]	; (9a98 <__aeabi_dsub+0x374>)
    97e6:	07f6      	lsls	r6, r6, #31
    97e8:	4014      	ands	r4, r2
    97ea:	431c      	orrs	r4, r3
    97ec:	0064      	lsls	r4, r4, #1
    97ee:	0864      	lsrs	r4, r4, #1
    97f0:	4334      	orrs	r4, r6
    97f2:	1c28      	adds	r0, r5, #0
    97f4:	1c21      	adds	r1, r4, #0
    97f6:	b003      	add	sp, #12
    97f8:	bc3c      	pop	{r2, r3, r4, r5}
    97fa:	4690      	mov	r8, r2
    97fc:	4699      	mov	r9, r3
    97fe:	46a2      	mov	sl, r4
    9800:	46ab      	mov	fp, r5
    9802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9804:	4ba2      	ldr	r3, [pc, #648]	; (9a90 <__aeabi_dsub+0x36c>)
    9806:	429c      	cmp	r4, r3
    9808:	d0be      	beq.n	9788 <__aeabi_dsub+0x64>
    980a:	2380      	movs	r3, #128	; 0x80
    980c:	041b      	lsls	r3, r3, #16
    980e:	431a      	orrs	r2, r3
    9810:	2e38      	cmp	r6, #56	; 0x38
    9812:	dd00      	ble.n	9816 <__aeabi_dsub+0xf2>
    9814:	e103      	b.n	9a1e <__aeabi_dsub+0x2fa>
    9816:	2e1f      	cmp	r6, #31
    9818:	dd00      	ble.n	981c <__aeabi_dsub+0xf8>
    981a:	e13f      	b.n	9a9c <__aeabi_dsub+0x378>
    981c:	2020      	movs	r0, #32
    981e:	1b83      	subs	r3, r0, r6
    9820:	4699      	mov	r9, r3
    9822:	1c13      	adds	r3, r2, #0
    9824:	4649      	mov	r1, r9
    9826:	408b      	lsls	r3, r1
    9828:	469c      	mov	ip, r3
    982a:	9b01      	ldr	r3, [sp, #4]
    982c:	4660      	mov	r0, ip
    982e:	40f3      	lsrs	r3, r6
    9830:	4303      	orrs	r3, r0
    9832:	9801      	ldr	r0, [sp, #4]
    9834:	40f2      	lsrs	r2, r6
    9836:	4088      	lsls	r0, r1
    9838:	1c01      	adds	r1, r0, #0
    983a:	1e48      	subs	r0, r1, #1
    983c:	4181      	sbcs	r1, r0
    983e:	430b      	orrs	r3, r1
    9840:	1aeb      	subs	r3, r5, r3
    9842:	429d      	cmp	r5, r3
    9844:	4180      	sbcs	r0, r0
    9846:	1c1d      	adds	r5, r3, #0
    9848:	1aba      	subs	r2, r7, r2
    984a:	4240      	negs	r0, r0
    984c:	1a17      	subs	r7, r2, r0
    984e:	023b      	lsls	r3, r7, #8
    9850:	d400      	bmi.n	9854 <__aeabi_dsub+0x130>
    9852:	e0a8      	b.n	99a6 <__aeabi_dsub+0x282>
    9854:	027a      	lsls	r2, r7, #9
    9856:	0a56      	lsrs	r6, r2, #9
    9858:	2e00      	cmp	r6, #0
    985a:	d100      	bne.n	985e <__aeabi_dsub+0x13a>
    985c:	e0ca      	b.n	99f4 <__aeabi_dsub+0x2d0>
    985e:	1c30      	adds	r0, r6, #0
    9860:	f000 fc62 	bl	a128 <__clzsi2>
    9864:	1c03      	adds	r3, r0, #0
    9866:	3b08      	subs	r3, #8
    9868:	2b1f      	cmp	r3, #31
    986a:	dd00      	ble.n	986e <__aeabi_dsub+0x14a>
    986c:	e0cb      	b.n	9a06 <__aeabi_dsub+0x2e2>
    986e:	2228      	movs	r2, #40	; 0x28
    9870:	1c29      	adds	r1, r5, #0
    9872:	1a12      	subs	r2, r2, r0
    9874:	40d1      	lsrs	r1, r2
    9876:	409e      	lsls	r6, r3
    9878:	1c0a      	adds	r2, r1, #0
    987a:	409d      	lsls	r5, r3
    987c:	4332      	orrs	r2, r6
    987e:	429c      	cmp	r4, r3
    9880:	dd00      	ble.n	9884 <__aeabi_dsub+0x160>
    9882:	e0c8      	b.n	9a16 <__aeabi_dsub+0x2f2>
    9884:	1b1c      	subs	r4, r3, r4
    9886:	1c67      	adds	r7, r4, #1
    9888:	2f1f      	cmp	r7, #31
    988a:	dd00      	ble.n	988e <__aeabi_dsub+0x16a>
    988c:	e0ed      	b.n	9a6a <__aeabi_dsub+0x346>
    988e:	231f      	movs	r3, #31
    9890:	1c29      	adds	r1, r5, #0
    9892:	1b1c      	subs	r4, r3, r4
    9894:	1c13      	adds	r3, r2, #0
    9896:	40a5      	lsls	r5, r4
    9898:	40a3      	lsls	r3, r4
    989a:	40f9      	lsrs	r1, r7
    989c:	1e6c      	subs	r4, r5, #1
    989e:	41a5      	sbcs	r5, r4
    98a0:	40fa      	lsrs	r2, r7
    98a2:	4319      	orrs	r1, r3
    98a4:	430d      	orrs	r5, r1
    98a6:	1c17      	adds	r7, r2, #0
    98a8:	2400      	movs	r4, #0
    98aa:	e76d      	b.n	9788 <__aeabi_dsub+0x64>
    98ac:	2380      	movs	r3, #128	; 0x80
    98ae:	2601      	movs	r6, #1
    98b0:	4642      	mov	r2, r8
    98b2:	041b      	lsls	r3, r3, #16
    98b4:	403b      	ands	r3, r7
    98b6:	4016      	ands	r6, r2
    98b8:	2b00      	cmp	r3, #0
    98ba:	d000      	beq.n	98be <__aeabi_dsub+0x19a>
    98bc:	e77b      	b.n	97b6 <__aeabi_dsub+0x92>
    98be:	4b74      	ldr	r3, [pc, #464]	; (9a90 <__aeabi_dsub+0x36c>)
    98c0:	08ed      	lsrs	r5, r5, #3
    98c2:	0778      	lsls	r0, r7, #29
    98c4:	4305      	orrs	r5, r0
    98c6:	08fa      	lsrs	r2, r7, #3
    98c8:	429c      	cmp	r4, r3
    98ca:	d03b      	beq.n	9944 <__aeabi_dsub+0x220>
    98cc:	0312      	lsls	r2, r2, #12
    98ce:	0564      	lsls	r4, r4, #21
    98d0:	0b12      	lsrs	r2, r2, #12
    98d2:	0d64      	lsrs	r4, r4, #21
    98d4:	e77e      	b.n	97d4 <__aeabi_dsub+0xb0>
    98d6:	1a23      	subs	r3, r4, r0
    98d8:	469a      	mov	sl, r3
    98da:	2b00      	cmp	r3, #0
    98dc:	dc00      	bgt.n	98e0 <__aeabi_dsub+0x1bc>
    98de:	e0a5      	b.n	9a2c <__aeabi_dsub+0x308>
    98e0:	2800      	cmp	r0, #0
    98e2:	d044      	beq.n	996e <__aeabi_dsub+0x24a>
    98e4:	486a      	ldr	r0, [pc, #424]	; (9a90 <__aeabi_dsub+0x36c>)
    98e6:	4284      	cmp	r4, r0
    98e8:	d100      	bne.n	98ec <__aeabi_dsub+0x1c8>
    98ea:	e74d      	b.n	9788 <__aeabi_dsub+0x64>
    98ec:	2080      	movs	r0, #128	; 0x80
    98ee:	0400      	lsls	r0, r0, #16
    98f0:	4302      	orrs	r2, r0
    98f2:	4653      	mov	r3, sl
    98f4:	2b38      	cmp	r3, #56	; 0x38
    98f6:	dc00      	bgt.n	98fa <__aeabi_dsub+0x1d6>
    98f8:	e11c      	b.n	9b34 <__aeabi_dsub+0x410>
    98fa:	9b01      	ldr	r3, [sp, #4]
    98fc:	431a      	orrs	r2, r3
    98fe:	1e51      	subs	r1, r2, #1
    9900:	418a      	sbcs	r2, r1
    9902:	b2d1      	uxtb	r1, r2
    9904:	2200      	movs	r2, #0
    9906:	1949      	adds	r1, r1, r5
    9908:	42a9      	cmp	r1, r5
    990a:	4180      	sbcs	r0, r0
    990c:	1c0d      	adds	r5, r1, #0
    990e:	19d2      	adds	r2, r2, r7
    9910:	4240      	negs	r0, r0
    9912:	1817      	adds	r7, r2, r0
    9914:	023b      	lsls	r3, r7, #8
    9916:	d546      	bpl.n	99a6 <__aeabi_dsub+0x282>
    9918:	4b5d      	ldr	r3, [pc, #372]	; (9a90 <__aeabi_dsub+0x36c>)
    991a:	3401      	adds	r4, #1
    991c:	429c      	cmp	r4, r3
    991e:	d100      	bne.n	9922 <__aeabi_dsub+0x1fe>
    9920:	e169      	b.n	9bf6 <__aeabi_dsub+0x4d2>
    9922:	2001      	movs	r0, #1
    9924:	4a5b      	ldr	r2, [pc, #364]	; (9a94 <__aeabi_dsub+0x370>)
    9926:	086b      	lsrs	r3, r5, #1
    9928:	403a      	ands	r2, r7
    992a:	4028      	ands	r0, r5
    992c:	4318      	orrs	r0, r3
    992e:	07d5      	lsls	r5, r2, #31
    9930:	4305      	orrs	r5, r0
    9932:	0857      	lsrs	r7, r2, #1
    9934:	e728      	b.n	9788 <__aeabi_dsub+0x64>
    9936:	1c13      	adds	r3, r2, #0
    9938:	9901      	ldr	r1, [sp, #4]
    993a:	430b      	orrs	r3, r1
    993c:	d100      	bne.n	9940 <__aeabi_dsub+0x21c>
    993e:	e711      	b.n	9764 <__aeabi_dsub+0x40>
    9940:	464b      	mov	r3, r9
    9942:	e713      	b.n	976c <__aeabi_dsub+0x48>
    9944:	1c2b      	adds	r3, r5, #0
    9946:	4313      	orrs	r3, r2
    9948:	d051      	beq.n	99ee <__aeabi_dsub+0x2ca>
    994a:	2380      	movs	r3, #128	; 0x80
    994c:	031b      	lsls	r3, r3, #12
    994e:	431a      	orrs	r2, r3
    9950:	0312      	lsls	r2, r2, #12
    9952:	0b12      	lsrs	r2, r2, #12
    9954:	e73e      	b.n	97d4 <__aeabi_dsub+0xb0>
    9956:	3e01      	subs	r6, #1
    9958:	2e00      	cmp	r6, #0
    995a:	d000      	beq.n	995e <__aeabi_dsub+0x23a>
    995c:	e080      	b.n	9a60 <__aeabi_dsub+0x33c>
    995e:	1a69      	subs	r1, r5, r1
    9960:	428d      	cmp	r5, r1
    9962:	419b      	sbcs	r3, r3
    9964:	1aba      	subs	r2, r7, r2
    9966:	425b      	negs	r3, r3
    9968:	1ad7      	subs	r7, r2, r3
    996a:	1c0d      	adds	r5, r1, #0
    996c:	e76f      	b.n	984e <__aeabi_dsub+0x12a>
    996e:	1c10      	adds	r0, r2, #0
    9970:	9b01      	ldr	r3, [sp, #4]
    9972:	4318      	orrs	r0, r3
    9974:	d100      	bne.n	9978 <__aeabi_dsub+0x254>
    9976:	e707      	b.n	9788 <__aeabi_dsub+0x64>
    9978:	2301      	movs	r3, #1
    997a:	425b      	negs	r3, r3
    997c:	469c      	mov	ip, r3
    997e:	44e2      	add	sl, ip
    9980:	4653      	mov	r3, sl
    9982:	2b00      	cmp	r3, #0
    9984:	d000      	beq.n	9988 <__aeabi_dsub+0x264>
    9986:	e102      	b.n	9b8e <__aeabi_dsub+0x46a>
    9988:	9b01      	ldr	r3, [sp, #4]
    998a:	19d2      	adds	r2, r2, r7
    998c:	1959      	adds	r1, r3, r5
    998e:	42a9      	cmp	r1, r5
    9990:	419b      	sbcs	r3, r3
    9992:	425b      	negs	r3, r3
    9994:	18d7      	adds	r7, r2, r3
    9996:	1c0d      	adds	r5, r1, #0
    9998:	e7bc      	b.n	9914 <__aeabi_dsub+0x1f0>
    999a:	4663      	mov	r3, ip
    999c:	4303      	orrs	r3, r0
    999e:	d100      	bne.n	99a2 <__aeabi_dsub+0x27e>
    99a0:	e128      	b.n	9bf4 <__aeabi_dsub+0x4d0>
    99a2:	1c07      	adds	r7, r0, #0
    99a4:	4665      	mov	r5, ip
    99a6:	076b      	lsls	r3, r5, #29
    99a8:	d000      	beq.n	99ac <__aeabi_dsub+0x288>
    99aa:	e6f0      	b.n	978e <__aeabi_dsub+0x6a>
    99ac:	2601      	movs	r6, #1
    99ae:	4643      	mov	r3, r8
    99b0:	401e      	ands	r6, r3
    99b2:	e784      	b.n	98be <__aeabi_dsub+0x19a>
    99b4:	2e00      	cmp	r6, #0
    99b6:	d000      	beq.n	99ba <__aeabi_dsub+0x296>
    99b8:	e081      	b.n	9abe <__aeabi_dsub+0x39a>
    99ba:	1c60      	adds	r0, r4, #1
    99bc:	0540      	lsls	r0, r0, #21
    99be:	0d40      	lsrs	r0, r0, #21
    99c0:	2801      	cmp	r0, #1
    99c2:	dc00      	bgt.n	99c6 <__aeabi_dsub+0x2a2>
    99c4:	e107      	b.n	9bd6 <__aeabi_dsub+0x4b2>
    99c6:	9901      	ldr	r1, [sp, #4]
    99c8:	1a68      	subs	r0, r5, r1
    99ca:	4684      	mov	ip, r0
    99cc:	4565      	cmp	r5, ip
    99ce:	41b6      	sbcs	r6, r6
    99d0:	1ab8      	subs	r0, r7, r2
    99d2:	4276      	negs	r6, r6
    99d4:	1b86      	subs	r6, r0, r6
    99d6:	0230      	lsls	r0, r6, #8
    99d8:	d400      	bmi.n	99dc <__aeabi_dsub+0x2b8>
    99da:	e0a1      	b.n	9b20 <__aeabi_dsub+0x3fc>
    99dc:	468c      	mov	ip, r1
    99de:	1b4d      	subs	r5, r1, r5
    99e0:	45ac      	cmp	ip, r5
    99e2:	4189      	sbcs	r1, r1
    99e4:	1bd2      	subs	r2, r2, r7
    99e6:	4249      	negs	r1, r1
    99e8:	1a56      	subs	r6, r2, r1
    99ea:	4698      	mov	r8, r3
    99ec:	e734      	b.n	9858 <__aeabi_dsub+0x134>
    99ee:	2200      	movs	r2, #0
    99f0:	2500      	movs	r5, #0
    99f2:	e6ef      	b.n	97d4 <__aeabi_dsub+0xb0>
    99f4:	1c28      	adds	r0, r5, #0
    99f6:	f000 fb97 	bl	a128 <__clzsi2>
    99fa:	3020      	adds	r0, #32
    99fc:	1c03      	adds	r3, r0, #0
    99fe:	3b08      	subs	r3, #8
    9a00:	2b1f      	cmp	r3, #31
    9a02:	dc00      	bgt.n	9a06 <__aeabi_dsub+0x2e2>
    9a04:	e733      	b.n	986e <__aeabi_dsub+0x14a>
    9a06:	1c02      	adds	r2, r0, #0
    9a08:	3a28      	subs	r2, #40	; 0x28
    9a0a:	4095      	lsls	r5, r2
    9a0c:	1c2a      	adds	r2, r5, #0
    9a0e:	2500      	movs	r5, #0
    9a10:	429c      	cmp	r4, r3
    9a12:	dc00      	bgt.n	9a16 <__aeabi_dsub+0x2f2>
    9a14:	e736      	b.n	9884 <__aeabi_dsub+0x160>
    9a16:	4f1f      	ldr	r7, [pc, #124]	; (9a94 <__aeabi_dsub+0x370>)
    9a18:	1ae4      	subs	r4, r4, r3
    9a1a:	4017      	ands	r7, r2
    9a1c:	e6b4      	b.n	9788 <__aeabi_dsub+0x64>
    9a1e:	9b01      	ldr	r3, [sp, #4]
    9a20:	431a      	orrs	r2, r3
    9a22:	1e51      	subs	r1, r2, #1
    9a24:	418a      	sbcs	r2, r1
    9a26:	b2d3      	uxtb	r3, r2
    9a28:	2200      	movs	r2, #0
    9a2a:	e709      	b.n	9840 <__aeabi_dsub+0x11c>
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d000      	beq.n	9a32 <__aeabi_dsub+0x30e>
    9a30:	e101      	b.n	9c36 <__aeabi_dsub+0x512>
    9a32:	1c60      	adds	r0, r4, #1
    9a34:	0543      	lsls	r3, r0, #21
    9a36:	0d5b      	lsrs	r3, r3, #21
    9a38:	2b01      	cmp	r3, #1
    9a3a:	dc00      	bgt.n	9a3e <__aeabi_dsub+0x31a>
    9a3c:	e0b0      	b.n	9ba0 <__aeabi_dsub+0x47c>
    9a3e:	4b14      	ldr	r3, [pc, #80]	; (9a90 <__aeabi_dsub+0x36c>)
    9a40:	4298      	cmp	r0, r3
    9a42:	d100      	bne.n	9a46 <__aeabi_dsub+0x322>
    9a44:	e11e      	b.n	9c84 <__aeabi_dsub+0x560>
    9a46:	9b01      	ldr	r3, [sp, #4]
    9a48:	19d2      	adds	r2, r2, r7
    9a4a:	1959      	adds	r1, r3, r5
    9a4c:	42a9      	cmp	r1, r5
    9a4e:	419b      	sbcs	r3, r3
    9a50:	425b      	negs	r3, r3
    9a52:	18d2      	adds	r2, r2, r3
    9a54:	0849      	lsrs	r1, r1, #1
    9a56:	07d5      	lsls	r5, r2, #31
    9a58:	430d      	orrs	r5, r1
    9a5a:	0857      	lsrs	r7, r2, #1
    9a5c:	1c04      	adds	r4, r0, #0
    9a5e:	e693      	b.n	9788 <__aeabi_dsub+0x64>
    9a60:	4b0b      	ldr	r3, [pc, #44]	; (9a90 <__aeabi_dsub+0x36c>)
    9a62:	429c      	cmp	r4, r3
    9a64:	d000      	beq.n	9a68 <__aeabi_dsub+0x344>
    9a66:	e6d3      	b.n	9810 <__aeabi_dsub+0xec>
    9a68:	e68e      	b.n	9788 <__aeabi_dsub+0x64>
    9a6a:	1c21      	adds	r1, r4, #0
    9a6c:	1c13      	adds	r3, r2, #0
    9a6e:	391f      	subs	r1, #31
    9a70:	40cb      	lsrs	r3, r1
    9a72:	1c19      	adds	r1, r3, #0
    9a74:	2f20      	cmp	r7, #32
    9a76:	d100      	bne.n	9a7a <__aeabi_dsub+0x356>
    9a78:	e08e      	b.n	9b98 <__aeabi_dsub+0x474>
    9a7a:	233f      	movs	r3, #63	; 0x3f
    9a7c:	1b1c      	subs	r4, r3, r4
    9a7e:	40a2      	lsls	r2, r4
    9a80:	4315      	orrs	r5, r2
    9a82:	1e6a      	subs	r2, r5, #1
    9a84:	4195      	sbcs	r5, r2
    9a86:	2700      	movs	r7, #0
    9a88:	430d      	orrs	r5, r1
    9a8a:	2400      	movs	r4, #0
    9a8c:	e78b      	b.n	99a6 <__aeabi_dsub+0x282>
    9a8e:	46c0      	nop			; (mov r8, r8)
    9a90:	000007ff 	.word	0x000007ff
    9a94:	ff7fffff 	.word	0xff7fffff
    9a98:	800fffff 	.word	0x800fffff
    9a9c:	1c33      	adds	r3, r6, #0
    9a9e:	1c10      	adds	r0, r2, #0
    9aa0:	3b20      	subs	r3, #32
    9aa2:	40d8      	lsrs	r0, r3
    9aa4:	2e20      	cmp	r6, #32
    9aa6:	d079      	beq.n	9b9c <__aeabi_dsub+0x478>
    9aa8:	2340      	movs	r3, #64	; 0x40
    9aaa:	1b9b      	subs	r3, r3, r6
    9aac:	409a      	lsls	r2, r3
    9aae:	1c13      	adds	r3, r2, #0
    9ab0:	9a01      	ldr	r2, [sp, #4]
    9ab2:	4313      	orrs	r3, r2
    9ab4:	1e59      	subs	r1, r3, #1
    9ab6:	418b      	sbcs	r3, r1
    9ab8:	2200      	movs	r2, #0
    9aba:	4303      	orrs	r3, r0
    9abc:	e6c0      	b.n	9840 <__aeabi_dsub+0x11c>
    9abe:	2c00      	cmp	r4, #0
    9ac0:	d053      	beq.n	9b6a <__aeabi_dsub+0x446>
    9ac2:	4cc7      	ldr	r4, [pc, #796]	; (9de0 <__aeabi_dsub+0x6bc>)
    9ac4:	42a0      	cmp	r0, r4
    9ac6:	d100      	bne.n	9aca <__aeabi_dsub+0x3a6>
    9ac8:	e0b0      	b.n	9c2c <__aeabi_dsub+0x508>
    9aca:	2480      	movs	r4, #128	; 0x80
    9acc:	4271      	negs	r1, r6
    9ace:	4689      	mov	r9, r1
    9ad0:	0424      	lsls	r4, r4, #16
    9ad2:	4327      	orrs	r7, r4
    9ad4:	4649      	mov	r1, r9
    9ad6:	2938      	cmp	r1, #56	; 0x38
    9ad8:	dd00      	ble.n	9adc <__aeabi_dsub+0x3b8>
    9ada:	e0cd      	b.n	9c78 <__aeabi_dsub+0x554>
    9adc:	291f      	cmp	r1, #31
    9ade:	dd00      	ble.n	9ae2 <__aeabi_dsub+0x3be>
    9ae0:	e159      	b.n	9d96 <__aeabi_dsub+0x672>
    9ae2:	2420      	movs	r4, #32
    9ae4:	1c3e      	adds	r6, r7, #0
    9ae6:	1a61      	subs	r1, r4, r1
    9ae8:	408e      	lsls	r6, r1
    9aea:	468a      	mov	sl, r1
    9aec:	46b0      	mov	r8, r6
    9aee:	4649      	mov	r1, r9
    9af0:	1c2e      	adds	r6, r5, #0
    9af2:	40ce      	lsrs	r6, r1
    9af4:	4651      	mov	r1, sl
    9af6:	46b4      	mov	ip, r6
    9af8:	408d      	lsls	r5, r1
    9afa:	4664      	mov	r4, ip
    9afc:	4646      	mov	r6, r8
    9afe:	4649      	mov	r1, r9
    9b00:	4326      	orrs	r6, r4
    9b02:	1e6c      	subs	r4, r5, #1
    9b04:	41a5      	sbcs	r5, r4
    9b06:	40cf      	lsrs	r7, r1
    9b08:	4335      	orrs	r5, r6
    9b0a:	9901      	ldr	r1, [sp, #4]
    9b0c:	1bd7      	subs	r7, r2, r7
    9b0e:	468c      	mov	ip, r1
    9b10:	1b4d      	subs	r5, r1, r5
    9b12:	45ac      	cmp	ip, r5
    9b14:	4192      	sbcs	r2, r2
    9b16:	4252      	negs	r2, r2
    9b18:	1abf      	subs	r7, r7, r2
    9b1a:	1c04      	adds	r4, r0, #0
    9b1c:	4698      	mov	r8, r3
    9b1e:	e696      	b.n	984e <__aeabi_dsub+0x12a>
    9b20:	4663      	mov	r3, ip
    9b22:	4665      	mov	r5, ip
    9b24:	4333      	orrs	r3, r6
    9b26:	d000      	beq.n	9b2a <__aeabi_dsub+0x406>
    9b28:	e696      	b.n	9858 <__aeabi_dsub+0x134>
    9b2a:	2600      	movs	r6, #0
    9b2c:	2700      	movs	r7, #0
    9b2e:	2400      	movs	r4, #0
    9b30:	2500      	movs	r5, #0
    9b32:	e6c4      	b.n	98be <__aeabi_dsub+0x19a>
    9b34:	2b1f      	cmp	r3, #31
    9b36:	dc61      	bgt.n	9bfc <__aeabi_dsub+0x4d8>
    9b38:	2020      	movs	r0, #32
    9b3a:	1ac3      	subs	r3, r0, r3
    9b3c:	469b      	mov	fp, r3
    9b3e:	1c13      	adds	r3, r2, #0
    9b40:	4659      	mov	r1, fp
    9b42:	408b      	lsls	r3, r1
    9b44:	4651      	mov	r1, sl
    9b46:	4699      	mov	r9, r3
    9b48:	9b01      	ldr	r3, [sp, #4]
    9b4a:	40cb      	lsrs	r3, r1
    9b4c:	469c      	mov	ip, r3
    9b4e:	464b      	mov	r3, r9
    9b50:	4660      	mov	r0, ip
    9b52:	4303      	orrs	r3, r0
    9b54:	469c      	mov	ip, r3
    9b56:	465b      	mov	r3, fp
    9b58:	9901      	ldr	r1, [sp, #4]
    9b5a:	4099      	lsls	r1, r3
    9b5c:	4663      	mov	r3, ip
    9b5e:	1e48      	subs	r0, r1, #1
    9b60:	4181      	sbcs	r1, r0
    9b62:	4319      	orrs	r1, r3
    9b64:	4653      	mov	r3, sl
    9b66:	40da      	lsrs	r2, r3
    9b68:	e6cd      	b.n	9906 <__aeabi_dsub+0x1e2>
    9b6a:	1c3c      	adds	r4, r7, #0
    9b6c:	432c      	orrs	r4, r5
    9b6e:	d05d      	beq.n	9c2c <__aeabi_dsub+0x508>
    9b70:	43f1      	mvns	r1, r6
    9b72:	4689      	mov	r9, r1
    9b74:	2900      	cmp	r1, #0
    9b76:	d155      	bne.n	9c24 <__aeabi_dsub+0x500>
    9b78:	9901      	ldr	r1, [sp, #4]
    9b7a:	1bd2      	subs	r2, r2, r7
    9b7c:	468c      	mov	ip, r1
    9b7e:	1b4d      	subs	r5, r1, r5
    9b80:	45ac      	cmp	ip, r5
    9b82:	4189      	sbcs	r1, r1
    9b84:	4249      	negs	r1, r1
    9b86:	1a57      	subs	r7, r2, r1
    9b88:	1c04      	adds	r4, r0, #0
    9b8a:	4698      	mov	r8, r3
    9b8c:	e65f      	b.n	984e <__aeabi_dsub+0x12a>
    9b8e:	4894      	ldr	r0, [pc, #592]	; (9de0 <__aeabi_dsub+0x6bc>)
    9b90:	4284      	cmp	r4, r0
    9b92:	d000      	beq.n	9b96 <__aeabi_dsub+0x472>
    9b94:	e6ad      	b.n	98f2 <__aeabi_dsub+0x1ce>
    9b96:	e5f7      	b.n	9788 <__aeabi_dsub+0x64>
    9b98:	2200      	movs	r2, #0
    9b9a:	e771      	b.n	9a80 <__aeabi_dsub+0x35c>
    9b9c:	2300      	movs	r3, #0
    9b9e:	e787      	b.n	9ab0 <__aeabi_dsub+0x38c>
    9ba0:	1c3b      	adds	r3, r7, #0
    9ba2:	432b      	orrs	r3, r5
    9ba4:	2c00      	cmp	r4, #0
    9ba6:	d000      	beq.n	9baa <__aeabi_dsub+0x486>
    9ba8:	e0da      	b.n	9d60 <__aeabi_dsub+0x63c>
    9baa:	2b00      	cmp	r3, #0
    9bac:	d100      	bne.n	9bb0 <__aeabi_dsub+0x48c>
    9bae:	e113      	b.n	9dd8 <__aeabi_dsub+0x6b4>
    9bb0:	1c13      	adds	r3, r2, #0
    9bb2:	9901      	ldr	r1, [sp, #4]
    9bb4:	430b      	orrs	r3, r1
    9bb6:	d100      	bne.n	9bba <__aeabi_dsub+0x496>
    9bb8:	e5e6      	b.n	9788 <__aeabi_dsub+0x64>
    9bba:	1949      	adds	r1, r1, r5
    9bbc:	42a9      	cmp	r1, r5
    9bbe:	419b      	sbcs	r3, r3
    9bc0:	19d2      	adds	r2, r2, r7
    9bc2:	425b      	negs	r3, r3
    9bc4:	18d7      	adds	r7, r2, r3
    9bc6:	023b      	lsls	r3, r7, #8
    9bc8:	d400      	bmi.n	9bcc <__aeabi_dsub+0x4a8>
    9bca:	e121      	b.n	9e10 <__aeabi_dsub+0x6ec>
    9bcc:	4b85      	ldr	r3, [pc, #532]	; (9de4 <__aeabi_dsub+0x6c0>)
    9bce:	1c0d      	adds	r5, r1, #0
    9bd0:	401f      	ands	r7, r3
    9bd2:	1c04      	adds	r4, r0, #0
    9bd4:	e5d8      	b.n	9788 <__aeabi_dsub+0x64>
    9bd6:	1c38      	adds	r0, r7, #0
    9bd8:	4328      	orrs	r0, r5
    9bda:	2c00      	cmp	r4, #0
    9bdc:	d140      	bne.n	9c60 <__aeabi_dsub+0x53c>
    9bde:	2800      	cmp	r0, #0
    9be0:	d000      	beq.n	9be4 <__aeabi_dsub+0x4c0>
    9be2:	e083      	b.n	9cec <__aeabi_dsub+0x5c8>
    9be4:	1c10      	adds	r0, r2, #0
    9be6:	9901      	ldr	r1, [sp, #4]
    9be8:	4308      	orrs	r0, r1
    9bea:	d003      	beq.n	9bf4 <__aeabi_dsub+0x4d0>
    9bec:	1c17      	adds	r7, r2, #0
    9bee:	1c0d      	adds	r5, r1, #0
    9bf0:	4698      	mov	r8, r3
    9bf2:	e5c9      	b.n	9788 <__aeabi_dsub+0x64>
    9bf4:	2600      	movs	r6, #0
    9bf6:	2700      	movs	r7, #0
    9bf8:	2500      	movs	r5, #0
    9bfa:	e660      	b.n	98be <__aeabi_dsub+0x19a>
    9bfc:	4650      	mov	r0, sl
    9bfe:	1c13      	adds	r3, r2, #0
    9c00:	3820      	subs	r0, #32
    9c02:	40c3      	lsrs	r3, r0
    9c04:	1c18      	adds	r0, r3, #0
    9c06:	4653      	mov	r3, sl
    9c08:	2b20      	cmp	r3, #32
    9c0a:	d100      	bne.n	9c0e <__aeabi_dsub+0x4ea>
    9c0c:	e0c1      	b.n	9d92 <__aeabi_dsub+0x66e>
    9c0e:	2340      	movs	r3, #64	; 0x40
    9c10:	4651      	mov	r1, sl
    9c12:	1a5b      	subs	r3, r3, r1
    9c14:	409a      	lsls	r2, r3
    9c16:	9901      	ldr	r1, [sp, #4]
    9c18:	4311      	orrs	r1, r2
    9c1a:	1e4a      	subs	r2, r1, #1
    9c1c:	4191      	sbcs	r1, r2
    9c1e:	2200      	movs	r2, #0
    9c20:	4301      	orrs	r1, r0
    9c22:	e670      	b.n	9906 <__aeabi_dsub+0x1e2>
    9c24:	4c6e      	ldr	r4, [pc, #440]	; (9de0 <__aeabi_dsub+0x6bc>)
    9c26:	42a0      	cmp	r0, r4
    9c28:	d000      	beq.n	9c2c <__aeabi_dsub+0x508>
    9c2a:	e753      	b.n	9ad4 <__aeabi_dsub+0x3b0>
    9c2c:	1c17      	adds	r7, r2, #0
    9c2e:	9d01      	ldr	r5, [sp, #4]
    9c30:	1c04      	adds	r4, r0, #0
    9c32:	4698      	mov	r8, r3
    9c34:	e5a8      	b.n	9788 <__aeabi_dsub+0x64>
    9c36:	2c00      	cmp	r4, #0
    9c38:	d128      	bne.n	9c8c <__aeabi_dsub+0x568>
    9c3a:	1c3c      	adds	r4, r7, #0
    9c3c:	432c      	orrs	r4, r5
    9c3e:	d100      	bne.n	9c42 <__aeabi_dsub+0x51e>
    9c40:	e08a      	b.n	9d58 <__aeabi_dsub+0x634>
    9c42:	43db      	mvns	r3, r3
    9c44:	469a      	mov	sl, r3
    9c46:	2b00      	cmp	r3, #0
    9c48:	d000      	beq.n	9c4c <__aeabi_dsub+0x528>
    9c4a:	e082      	b.n	9d52 <__aeabi_dsub+0x62e>
    9c4c:	9b01      	ldr	r3, [sp, #4]
    9c4e:	19d2      	adds	r2, r2, r7
    9c50:	469c      	mov	ip, r3
    9c52:	4465      	add	r5, ip
    9c54:	429d      	cmp	r5, r3
    9c56:	4189      	sbcs	r1, r1
    9c58:	4249      	negs	r1, r1
    9c5a:	1857      	adds	r7, r2, r1
    9c5c:	1c04      	adds	r4, r0, #0
    9c5e:	e659      	b.n	9914 <__aeabi_dsub+0x1f0>
    9c60:	2800      	cmp	r0, #0
    9c62:	d15b      	bne.n	9d1c <__aeabi_dsub+0x5f8>
    9c64:	1c10      	adds	r0, r2, #0
    9c66:	9901      	ldr	r1, [sp, #4]
    9c68:	4308      	orrs	r0, r1
    9c6a:	d100      	bne.n	9c6e <__aeabi_dsub+0x54a>
    9c6c:	e0a4      	b.n	9db8 <__aeabi_dsub+0x694>
    9c6e:	1c17      	adds	r7, r2, #0
    9c70:	1c0d      	adds	r5, r1, #0
    9c72:	4698      	mov	r8, r3
    9c74:	4c5a      	ldr	r4, [pc, #360]	; (9de0 <__aeabi_dsub+0x6bc>)
    9c76:	e587      	b.n	9788 <__aeabi_dsub+0x64>
    9c78:	433d      	orrs	r5, r7
    9c7a:	1e6f      	subs	r7, r5, #1
    9c7c:	41bd      	sbcs	r5, r7
    9c7e:	2700      	movs	r7, #0
    9c80:	b2ed      	uxtb	r5, r5
    9c82:	e742      	b.n	9b0a <__aeabi_dsub+0x3e6>
    9c84:	1c04      	adds	r4, r0, #0
    9c86:	2700      	movs	r7, #0
    9c88:	2500      	movs	r5, #0
    9c8a:	e618      	b.n	98be <__aeabi_dsub+0x19a>
    9c8c:	4c54      	ldr	r4, [pc, #336]	; (9de0 <__aeabi_dsub+0x6bc>)
    9c8e:	42a0      	cmp	r0, r4
    9c90:	d062      	beq.n	9d58 <__aeabi_dsub+0x634>
    9c92:	4653      	mov	r3, sl
    9c94:	2480      	movs	r4, #128	; 0x80
    9c96:	425b      	negs	r3, r3
    9c98:	469a      	mov	sl, r3
    9c9a:	0424      	lsls	r4, r4, #16
    9c9c:	4327      	orrs	r7, r4
    9c9e:	4653      	mov	r3, sl
    9ca0:	2b38      	cmp	r3, #56	; 0x38
    9ca2:	dd00      	ble.n	9ca6 <__aeabi_dsub+0x582>
    9ca4:	e08e      	b.n	9dc4 <__aeabi_dsub+0x6a0>
    9ca6:	2b1f      	cmp	r3, #31
    9ca8:	dd00      	ble.n	9cac <__aeabi_dsub+0x588>
    9caa:	e09d      	b.n	9de8 <__aeabi_dsub+0x6c4>
    9cac:	2420      	movs	r4, #32
    9cae:	1ae3      	subs	r3, r4, r3
    9cb0:	469b      	mov	fp, r3
    9cb2:	1c3b      	adds	r3, r7, #0
    9cb4:	4659      	mov	r1, fp
    9cb6:	408b      	lsls	r3, r1
    9cb8:	4651      	mov	r1, sl
    9cba:	4699      	mov	r9, r3
    9cbc:	1c2b      	adds	r3, r5, #0
    9cbe:	40cb      	lsrs	r3, r1
    9cc0:	469c      	mov	ip, r3
    9cc2:	464b      	mov	r3, r9
    9cc4:	4664      	mov	r4, ip
    9cc6:	4323      	orrs	r3, r4
    9cc8:	469c      	mov	ip, r3
    9cca:	465b      	mov	r3, fp
    9ccc:	409d      	lsls	r5, r3
    9cce:	4663      	mov	r3, ip
    9cd0:	1e6c      	subs	r4, r5, #1
    9cd2:	41a5      	sbcs	r5, r4
    9cd4:	40cf      	lsrs	r7, r1
    9cd6:	431d      	orrs	r5, r3
    9cd8:	9b01      	ldr	r3, [sp, #4]
    9cda:	18bf      	adds	r7, r7, r2
    9cdc:	469c      	mov	ip, r3
    9cde:	4465      	add	r5, ip
    9ce0:	429d      	cmp	r5, r3
    9ce2:	4192      	sbcs	r2, r2
    9ce4:	4252      	negs	r2, r2
    9ce6:	18bf      	adds	r7, r7, r2
    9ce8:	1c04      	adds	r4, r0, #0
    9cea:	e613      	b.n	9914 <__aeabi_dsub+0x1f0>
    9cec:	1c10      	adds	r0, r2, #0
    9cee:	9901      	ldr	r1, [sp, #4]
    9cf0:	4308      	orrs	r0, r1
    9cf2:	d100      	bne.n	9cf6 <__aeabi_dsub+0x5d2>
    9cf4:	e548      	b.n	9788 <__aeabi_dsub+0x64>
    9cf6:	1a68      	subs	r0, r5, r1
    9cf8:	4684      	mov	ip, r0
    9cfa:	4285      	cmp	r5, r0
    9cfc:	4180      	sbcs	r0, r0
    9cfe:	1abe      	subs	r6, r7, r2
    9d00:	4240      	negs	r0, r0
    9d02:	1a30      	subs	r0, r6, r0
    9d04:	0206      	lsls	r6, r0, #8
    9d06:	d400      	bmi.n	9d0a <__aeabi_dsub+0x5e6>
    9d08:	e647      	b.n	999a <__aeabi_dsub+0x276>
    9d0a:	468c      	mov	ip, r1
    9d0c:	1b4d      	subs	r5, r1, r5
    9d0e:	45ac      	cmp	ip, r5
    9d10:	4189      	sbcs	r1, r1
    9d12:	1bd2      	subs	r2, r2, r7
    9d14:	4249      	negs	r1, r1
    9d16:	1a57      	subs	r7, r2, r1
    9d18:	4698      	mov	r8, r3
    9d1a:	e535      	b.n	9788 <__aeabi_dsub+0x64>
    9d1c:	1c10      	adds	r0, r2, #0
    9d1e:	9901      	ldr	r1, [sp, #4]
    9d20:	4308      	orrs	r0, r1
    9d22:	d034      	beq.n	9d8e <__aeabi_dsub+0x66a>
    9d24:	2480      	movs	r4, #128	; 0x80
    9d26:	0778      	lsls	r0, r7, #29
    9d28:	08ed      	lsrs	r5, r5, #3
    9d2a:	08ff      	lsrs	r7, r7, #3
    9d2c:	0324      	lsls	r4, r4, #12
    9d2e:	4328      	orrs	r0, r5
    9d30:	4227      	tst	r7, r4
    9d32:	d008      	beq.n	9d46 <__aeabi_dsub+0x622>
    9d34:	08d6      	lsrs	r6, r2, #3
    9d36:	4226      	tst	r6, r4
    9d38:	d105      	bne.n	9d46 <__aeabi_dsub+0x622>
    9d3a:	08c9      	lsrs	r1, r1, #3
    9d3c:	0752      	lsls	r2, r2, #29
    9d3e:	430a      	orrs	r2, r1
    9d40:	1c10      	adds	r0, r2, #0
    9d42:	1c37      	adds	r7, r6, #0
    9d44:	4698      	mov	r8, r3
    9d46:	00ff      	lsls	r7, r7, #3
    9d48:	0f42      	lsrs	r2, r0, #29
    9d4a:	4317      	orrs	r7, r2
    9d4c:	00c5      	lsls	r5, r0, #3
    9d4e:	4c24      	ldr	r4, [pc, #144]	; (9de0 <__aeabi_dsub+0x6bc>)
    9d50:	e51a      	b.n	9788 <__aeabi_dsub+0x64>
    9d52:	4c23      	ldr	r4, [pc, #140]	; (9de0 <__aeabi_dsub+0x6bc>)
    9d54:	42a0      	cmp	r0, r4
    9d56:	d1a2      	bne.n	9c9e <__aeabi_dsub+0x57a>
    9d58:	1c17      	adds	r7, r2, #0
    9d5a:	9d01      	ldr	r5, [sp, #4]
    9d5c:	1c04      	adds	r4, r0, #0
    9d5e:	e513      	b.n	9788 <__aeabi_dsub+0x64>
    9d60:	2b00      	cmp	r3, #0
    9d62:	d035      	beq.n	9dd0 <__aeabi_dsub+0x6ac>
    9d64:	1c13      	adds	r3, r2, #0
    9d66:	9901      	ldr	r1, [sp, #4]
    9d68:	430b      	orrs	r3, r1
    9d6a:	d010      	beq.n	9d8e <__aeabi_dsub+0x66a>
    9d6c:	2480      	movs	r4, #128	; 0x80
    9d6e:	0778      	lsls	r0, r7, #29
    9d70:	08ed      	lsrs	r5, r5, #3
    9d72:	08ff      	lsrs	r7, r7, #3
    9d74:	0324      	lsls	r4, r4, #12
    9d76:	4328      	orrs	r0, r5
    9d78:	4227      	tst	r7, r4
    9d7a:	d0e4      	beq.n	9d46 <__aeabi_dsub+0x622>
    9d7c:	08d3      	lsrs	r3, r2, #3
    9d7e:	4223      	tst	r3, r4
    9d80:	d1e1      	bne.n	9d46 <__aeabi_dsub+0x622>
    9d82:	08c9      	lsrs	r1, r1, #3
    9d84:	0752      	lsls	r2, r2, #29
    9d86:	430a      	orrs	r2, r1
    9d88:	1c10      	adds	r0, r2, #0
    9d8a:	1c1f      	adds	r7, r3, #0
    9d8c:	e7db      	b.n	9d46 <__aeabi_dsub+0x622>
    9d8e:	4c14      	ldr	r4, [pc, #80]	; (9de0 <__aeabi_dsub+0x6bc>)
    9d90:	e4fa      	b.n	9788 <__aeabi_dsub+0x64>
    9d92:	2200      	movs	r2, #0
    9d94:	e73f      	b.n	9c16 <__aeabi_dsub+0x4f2>
    9d96:	464c      	mov	r4, r9
    9d98:	1c3e      	adds	r6, r7, #0
    9d9a:	3c20      	subs	r4, #32
    9d9c:	40e6      	lsrs	r6, r4
    9d9e:	4649      	mov	r1, r9
    9da0:	1c34      	adds	r4, r6, #0
    9da2:	2920      	cmp	r1, #32
    9da4:	d032      	beq.n	9e0c <__aeabi_dsub+0x6e8>
    9da6:	2640      	movs	r6, #64	; 0x40
    9da8:	1a76      	subs	r6, r6, r1
    9daa:	40b7      	lsls	r7, r6
    9dac:	433d      	orrs	r5, r7
    9dae:	1e6f      	subs	r7, r5, #1
    9db0:	41bd      	sbcs	r5, r7
    9db2:	2700      	movs	r7, #0
    9db4:	4325      	orrs	r5, r4
    9db6:	e6a8      	b.n	9b0a <__aeabi_dsub+0x3e6>
    9db8:	2780      	movs	r7, #128	; 0x80
    9dba:	2600      	movs	r6, #0
    9dbc:	03ff      	lsls	r7, r7, #15
    9dbe:	4c08      	ldr	r4, [pc, #32]	; (9de0 <__aeabi_dsub+0x6bc>)
    9dc0:	2500      	movs	r5, #0
    9dc2:	e57c      	b.n	98be <__aeabi_dsub+0x19a>
    9dc4:	433d      	orrs	r5, r7
    9dc6:	1e6f      	subs	r7, r5, #1
    9dc8:	41bd      	sbcs	r5, r7
    9dca:	2700      	movs	r7, #0
    9dcc:	b2ed      	uxtb	r5, r5
    9dce:	e783      	b.n	9cd8 <__aeabi_dsub+0x5b4>
    9dd0:	1c17      	adds	r7, r2, #0
    9dd2:	9d01      	ldr	r5, [sp, #4]
    9dd4:	4c02      	ldr	r4, [pc, #8]	; (9de0 <__aeabi_dsub+0x6bc>)
    9dd6:	e4d7      	b.n	9788 <__aeabi_dsub+0x64>
    9dd8:	1c17      	adds	r7, r2, #0
    9dda:	9d01      	ldr	r5, [sp, #4]
    9ddc:	e4d4      	b.n	9788 <__aeabi_dsub+0x64>
    9dde:	46c0      	nop			; (mov r8, r8)
    9de0:	000007ff 	.word	0x000007ff
    9de4:	ff7fffff 	.word	0xff7fffff
    9de8:	4654      	mov	r4, sl
    9dea:	1c3b      	adds	r3, r7, #0
    9dec:	3c20      	subs	r4, #32
    9dee:	40e3      	lsrs	r3, r4
    9df0:	1c1c      	adds	r4, r3, #0
    9df2:	4653      	mov	r3, sl
    9df4:	2b20      	cmp	r3, #32
    9df6:	d00d      	beq.n	9e14 <__aeabi_dsub+0x6f0>
    9df8:	2340      	movs	r3, #64	; 0x40
    9dfa:	4651      	mov	r1, sl
    9dfc:	1a5b      	subs	r3, r3, r1
    9dfe:	409f      	lsls	r7, r3
    9e00:	433d      	orrs	r5, r7
    9e02:	1e6f      	subs	r7, r5, #1
    9e04:	41bd      	sbcs	r5, r7
    9e06:	2700      	movs	r7, #0
    9e08:	4325      	orrs	r5, r4
    9e0a:	e765      	b.n	9cd8 <__aeabi_dsub+0x5b4>
    9e0c:	2700      	movs	r7, #0
    9e0e:	e7cd      	b.n	9dac <__aeabi_dsub+0x688>
    9e10:	1c0d      	adds	r5, r1, #0
    9e12:	e5c8      	b.n	99a6 <__aeabi_dsub+0x282>
    9e14:	2700      	movs	r7, #0
    9e16:	e7f3      	b.n	9e00 <__aeabi_dsub+0x6dc>

00009e18 <__aeabi_d2iz>:
    9e18:	030b      	lsls	r3, r1, #12
    9e1a:	b530      	push	{r4, r5, lr}
    9e1c:	4c13      	ldr	r4, [pc, #76]	; (9e6c <__aeabi_d2iz+0x54>)
    9e1e:	0b1a      	lsrs	r2, r3, #12
    9e20:	004b      	lsls	r3, r1, #1
    9e22:	1c05      	adds	r5, r0, #0
    9e24:	0d5b      	lsrs	r3, r3, #21
    9e26:	0fc9      	lsrs	r1, r1, #31
    9e28:	2000      	movs	r0, #0
    9e2a:	42a3      	cmp	r3, r4
    9e2c:	dd10      	ble.n	9e50 <__aeabi_d2iz+0x38>
    9e2e:	4810      	ldr	r0, [pc, #64]	; (9e70 <__aeabi_d2iz+0x58>)
    9e30:	4283      	cmp	r3, r0
    9e32:	dc0e      	bgt.n	9e52 <__aeabi_d2iz+0x3a>
    9e34:	2080      	movs	r0, #128	; 0x80
    9e36:	4c0f      	ldr	r4, [pc, #60]	; (9e74 <__aeabi_d2iz+0x5c>)
    9e38:	0340      	lsls	r0, r0, #13
    9e3a:	4302      	orrs	r2, r0
    9e3c:	1ae4      	subs	r4, r4, r3
    9e3e:	2c1f      	cmp	r4, #31
    9e40:	dd0a      	ble.n	9e58 <__aeabi_d2iz+0x40>
    9e42:	480d      	ldr	r0, [pc, #52]	; (9e78 <__aeabi_d2iz+0x60>)
    9e44:	1ac3      	subs	r3, r0, r3
    9e46:	40da      	lsrs	r2, r3
    9e48:	1c13      	adds	r3, r2, #0
    9e4a:	4248      	negs	r0, r1
    9e4c:	4043      	eors	r3, r0
    9e4e:	1858      	adds	r0, r3, r1
    9e50:	bd30      	pop	{r4, r5, pc}
    9e52:	4b0a      	ldr	r3, [pc, #40]	; (9e7c <__aeabi_d2iz+0x64>)
    9e54:	18c8      	adds	r0, r1, r3
    9e56:	e7fb      	b.n	9e50 <__aeabi_d2iz+0x38>
    9e58:	1c28      	adds	r0, r5, #0
    9e5a:	40e0      	lsrs	r0, r4
    9e5c:	4c08      	ldr	r4, [pc, #32]	; (9e80 <__aeabi_d2iz+0x68>)
    9e5e:	46a4      	mov	ip, r4
    9e60:	4463      	add	r3, ip
    9e62:	409a      	lsls	r2, r3
    9e64:	1c13      	adds	r3, r2, #0
    9e66:	4303      	orrs	r3, r0
    9e68:	e7ef      	b.n	9e4a <__aeabi_d2iz+0x32>
    9e6a:	46c0      	nop			; (mov r8, r8)
    9e6c:	000003fe 	.word	0x000003fe
    9e70:	0000041d 	.word	0x0000041d
    9e74:	00000433 	.word	0x00000433
    9e78:	00000413 	.word	0x00000413
    9e7c:	7fffffff 	.word	0x7fffffff
    9e80:	fffffbed 	.word	0xfffffbed

00009e84 <__aeabi_i2d>:
    9e84:	b538      	push	{r3, r4, r5, lr}
    9e86:	1e04      	subs	r4, r0, #0
    9e88:	d016      	beq.n	9eb8 <__aeabi_i2d+0x34>
    9e8a:	0fc5      	lsrs	r5, r0, #31
    9e8c:	d000      	beq.n	9e90 <__aeabi_i2d+0xc>
    9e8e:	4244      	negs	r4, r0
    9e90:	1c20      	adds	r0, r4, #0
    9e92:	f000 f949 	bl	a128 <__clzsi2>
    9e96:	4b17      	ldr	r3, [pc, #92]	; (9ef4 <__aeabi_i2d+0x70>)
    9e98:	1a1b      	subs	r3, r3, r0
    9e9a:	280a      	cmp	r0, #10
    9e9c:	dc21      	bgt.n	9ee2 <__aeabi_i2d+0x5e>
    9e9e:	1c02      	adds	r2, r0, #0
    9ea0:	1c21      	adds	r1, r4, #0
    9ea2:	3215      	adds	r2, #21
    9ea4:	4091      	lsls	r1, r2
    9ea6:	1c0a      	adds	r2, r1, #0
    9ea8:	210b      	movs	r1, #11
    9eaa:	1a08      	subs	r0, r1, r0
    9eac:	40c4      	lsrs	r4, r0
    9eae:	055b      	lsls	r3, r3, #21
    9eb0:	0324      	lsls	r4, r4, #12
    9eb2:	0b24      	lsrs	r4, r4, #12
    9eb4:	0d5b      	lsrs	r3, r3, #21
    9eb6:	e003      	b.n	9ec0 <__aeabi_i2d+0x3c>
    9eb8:	2500      	movs	r5, #0
    9eba:	2300      	movs	r3, #0
    9ebc:	2400      	movs	r4, #0
    9ebe:	2200      	movs	r2, #0
    9ec0:	2100      	movs	r1, #0
    9ec2:	1c10      	adds	r0, r2, #0
    9ec4:	0324      	lsls	r4, r4, #12
    9ec6:	0d0a      	lsrs	r2, r1, #20
    9ec8:	0512      	lsls	r2, r2, #20
    9eca:	0b24      	lsrs	r4, r4, #12
    9ecc:	4314      	orrs	r4, r2
    9ece:	4a0a      	ldr	r2, [pc, #40]	; (9ef8 <__aeabi_i2d+0x74>)
    9ed0:	051b      	lsls	r3, r3, #20
    9ed2:	4014      	ands	r4, r2
    9ed4:	431c      	orrs	r4, r3
    9ed6:	0064      	lsls	r4, r4, #1
    9ed8:	07ed      	lsls	r5, r5, #31
    9eda:	0864      	lsrs	r4, r4, #1
    9edc:	432c      	orrs	r4, r5
    9ede:	1c21      	adds	r1, r4, #0
    9ee0:	bd38      	pop	{r3, r4, r5, pc}
    9ee2:	380b      	subs	r0, #11
    9ee4:	4084      	lsls	r4, r0
    9ee6:	055b      	lsls	r3, r3, #21
    9ee8:	0324      	lsls	r4, r4, #12
    9eea:	0b24      	lsrs	r4, r4, #12
    9eec:	0d5b      	lsrs	r3, r3, #21
    9eee:	2200      	movs	r2, #0
    9ef0:	e7e6      	b.n	9ec0 <__aeabi_i2d+0x3c>
    9ef2:	46c0      	nop			; (mov r8, r8)
    9ef4:	0000041e 	.word	0x0000041e
    9ef8:	800fffff 	.word	0x800fffff

00009efc <__aeabi_ui2d>:
    9efc:	b510      	push	{r4, lr}
    9efe:	1e04      	subs	r4, r0, #0
    9f00:	d010      	beq.n	9f24 <__aeabi_ui2d+0x28>
    9f02:	f000 f911 	bl	a128 <__clzsi2>
    9f06:	4a14      	ldr	r2, [pc, #80]	; (9f58 <__aeabi_ui2d+0x5c>)
    9f08:	1a12      	subs	r2, r2, r0
    9f0a:	280a      	cmp	r0, #10
    9f0c:	dc1a      	bgt.n	9f44 <__aeabi_ui2d+0x48>
    9f0e:	230b      	movs	r3, #11
    9f10:	1c21      	adds	r1, r4, #0
    9f12:	1a1b      	subs	r3, r3, r0
    9f14:	40d9      	lsrs	r1, r3
    9f16:	3015      	adds	r0, #21
    9f18:	030b      	lsls	r3, r1, #12
    9f1a:	0552      	lsls	r2, r2, #21
    9f1c:	4084      	lsls	r4, r0
    9f1e:	0b1b      	lsrs	r3, r3, #12
    9f20:	0d52      	lsrs	r2, r2, #21
    9f22:	e001      	b.n	9f28 <__aeabi_ui2d+0x2c>
    9f24:	2200      	movs	r2, #0
    9f26:	2300      	movs	r3, #0
    9f28:	2100      	movs	r1, #0
    9f2a:	031b      	lsls	r3, r3, #12
    9f2c:	1c20      	adds	r0, r4, #0
    9f2e:	0b1c      	lsrs	r4, r3, #12
    9f30:	0d0b      	lsrs	r3, r1, #20
    9f32:	051b      	lsls	r3, r3, #20
    9f34:	4323      	orrs	r3, r4
    9f36:	4c09      	ldr	r4, [pc, #36]	; (9f5c <__aeabi_ui2d+0x60>)
    9f38:	0512      	lsls	r2, r2, #20
    9f3a:	4023      	ands	r3, r4
    9f3c:	4313      	orrs	r3, r2
    9f3e:	005b      	lsls	r3, r3, #1
    9f40:	0859      	lsrs	r1, r3, #1
    9f42:	bd10      	pop	{r4, pc}
    9f44:	1c03      	adds	r3, r0, #0
    9f46:	3b0b      	subs	r3, #11
    9f48:	409c      	lsls	r4, r3
    9f4a:	0552      	lsls	r2, r2, #21
    9f4c:	0323      	lsls	r3, r4, #12
    9f4e:	0b1b      	lsrs	r3, r3, #12
    9f50:	0d52      	lsrs	r2, r2, #21
    9f52:	2400      	movs	r4, #0
    9f54:	e7e8      	b.n	9f28 <__aeabi_ui2d+0x2c>
    9f56:	46c0      	nop			; (mov r8, r8)
    9f58:	0000041e 	.word	0x0000041e
    9f5c:	800fffff 	.word	0x800fffff

00009f60 <__aeabi_f2d>:
    9f60:	0042      	lsls	r2, r0, #1
    9f62:	0e12      	lsrs	r2, r2, #24
    9f64:	1c51      	adds	r1, r2, #1
    9f66:	b538      	push	{r3, r4, r5, lr}
    9f68:	b2c9      	uxtb	r1, r1
    9f6a:	0243      	lsls	r3, r0, #9
    9f6c:	0a5d      	lsrs	r5, r3, #9
    9f6e:	0fc4      	lsrs	r4, r0, #31
    9f70:	2901      	cmp	r1, #1
    9f72:	dd15      	ble.n	9fa0 <__aeabi_f2d+0x40>
    9f74:	21e0      	movs	r1, #224	; 0xe0
    9f76:	0089      	lsls	r1, r1, #2
    9f78:	468c      	mov	ip, r1
    9f7a:	076d      	lsls	r5, r5, #29
    9f7c:	0b1b      	lsrs	r3, r3, #12
    9f7e:	4462      	add	r2, ip
    9f80:	2100      	movs	r1, #0
    9f82:	1c28      	adds	r0, r5, #0
    9f84:	0d0d      	lsrs	r5, r1, #20
    9f86:	052d      	lsls	r5, r5, #20
    9f88:	432b      	orrs	r3, r5
    9f8a:	4d1c      	ldr	r5, [pc, #112]	; (9ffc <__aeabi_f2d+0x9c>)
    9f8c:	0552      	lsls	r2, r2, #21
    9f8e:	402b      	ands	r3, r5
    9f90:	0852      	lsrs	r2, r2, #1
    9f92:	4313      	orrs	r3, r2
    9f94:	005b      	lsls	r3, r3, #1
    9f96:	07e4      	lsls	r4, r4, #31
    9f98:	085b      	lsrs	r3, r3, #1
    9f9a:	4323      	orrs	r3, r4
    9f9c:	1c19      	adds	r1, r3, #0
    9f9e:	bd38      	pop	{r3, r4, r5, pc}
    9fa0:	2a00      	cmp	r2, #0
    9fa2:	d115      	bne.n	9fd0 <__aeabi_f2d+0x70>
    9fa4:	2d00      	cmp	r5, #0
    9fa6:	d01f      	beq.n	9fe8 <__aeabi_f2d+0x88>
    9fa8:	1c28      	adds	r0, r5, #0
    9faa:	f000 f8bd 	bl	a128 <__clzsi2>
    9fae:	280a      	cmp	r0, #10
    9fb0:	dc1d      	bgt.n	9fee <__aeabi_f2d+0x8e>
    9fb2:	230b      	movs	r3, #11
    9fb4:	1c2a      	adds	r2, r5, #0
    9fb6:	1a1b      	subs	r3, r3, r0
    9fb8:	40da      	lsrs	r2, r3
    9fba:	1c13      	adds	r3, r2, #0
    9fbc:	1c02      	adds	r2, r0, #0
    9fbe:	3215      	adds	r2, #21
    9fc0:	4095      	lsls	r5, r2
    9fc2:	4a0f      	ldr	r2, [pc, #60]	; (a000 <__aeabi_f2d+0xa0>)
    9fc4:	031b      	lsls	r3, r3, #12
    9fc6:	1a12      	subs	r2, r2, r0
    9fc8:	0552      	lsls	r2, r2, #21
    9fca:	0b1b      	lsrs	r3, r3, #12
    9fcc:	0d52      	lsrs	r2, r2, #21
    9fce:	e7d7      	b.n	9f80 <__aeabi_f2d+0x20>
    9fd0:	2d00      	cmp	r5, #0
    9fd2:	d006      	beq.n	9fe2 <__aeabi_f2d+0x82>
    9fd4:	2280      	movs	r2, #128	; 0x80
    9fd6:	0b1b      	lsrs	r3, r3, #12
    9fd8:	0312      	lsls	r2, r2, #12
    9fda:	4313      	orrs	r3, r2
    9fdc:	076d      	lsls	r5, r5, #29
    9fde:	4a09      	ldr	r2, [pc, #36]	; (a004 <__aeabi_f2d+0xa4>)
    9fe0:	e7ce      	b.n	9f80 <__aeabi_f2d+0x20>
    9fe2:	4a08      	ldr	r2, [pc, #32]	; (a004 <__aeabi_f2d+0xa4>)
    9fe4:	2300      	movs	r3, #0
    9fe6:	e7cb      	b.n	9f80 <__aeabi_f2d+0x20>
    9fe8:	2200      	movs	r2, #0
    9fea:	2300      	movs	r3, #0
    9fec:	e7c8      	b.n	9f80 <__aeabi_f2d+0x20>
    9fee:	1c03      	adds	r3, r0, #0
    9ff0:	3b0b      	subs	r3, #11
    9ff2:	409d      	lsls	r5, r3
    9ff4:	1c2b      	adds	r3, r5, #0
    9ff6:	2500      	movs	r5, #0
    9ff8:	e7e3      	b.n	9fc2 <__aeabi_f2d+0x62>
    9ffa:	46c0      	nop			; (mov r8, r8)
    9ffc:	800fffff 	.word	0x800fffff
    a000:	00000389 	.word	0x00000389
    a004:	000007ff 	.word	0x000007ff

0000a008 <__aeabi_d2f>:
    a008:	b570      	push	{r4, r5, r6, lr}
    a00a:	030b      	lsls	r3, r1, #12
    a00c:	004d      	lsls	r5, r1, #1
    a00e:	0f44      	lsrs	r4, r0, #29
    a010:	0d6d      	lsrs	r5, r5, #21
    a012:	0a5b      	lsrs	r3, r3, #9
    a014:	4323      	orrs	r3, r4
    a016:	1c6c      	adds	r4, r5, #1
    a018:	0564      	lsls	r4, r4, #21
    a01a:	0fc9      	lsrs	r1, r1, #31
    a01c:	00c2      	lsls	r2, r0, #3
    a01e:	0d64      	lsrs	r4, r4, #21
    a020:	2c01      	cmp	r4, #1
    a022:	dd2a      	ble.n	a07a <__aeabi_d2f+0x72>
    a024:	4c3b      	ldr	r4, [pc, #236]	; (a114 <__aeabi_d2f+0x10c>)
    a026:	192c      	adds	r4, r5, r4
    a028:	2cfe      	cmp	r4, #254	; 0xfe
    a02a:	dc1a      	bgt.n	a062 <__aeabi_d2f+0x5a>
    a02c:	2c00      	cmp	r4, #0
    a02e:	dd35      	ble.n	a09c <__aeabi_d2f+0x94>
    a030:	0180      	lsls	r0, r0, #6
    a032:	1e45      	subs	r5, r0, #1
    a034:	41a8      	sbcs	r0, r5
    a036:	00db      	lsls	r3, r3, #3
    a038:	4303      	orrs	r3, r0
    a03a:	0f52      	lsrs	r2, r2, #29
    a03c:	4313      	orrs	r3, r2
    a03e:	075a      	lsls	r2, r3, #29
    a040:	d004      	beq.n	a04c <__aeabi_d2f+0x44>
    a042:	220f      	movs	r2, #15
    a044:	401a      	ands	r2, r3
    a046:	2a04      	cmp	r2, #4
    a048:	d000      	beq.n	a04c <__aeabi_d2f+0x44>
    a04a:	3304      	adds	r3, #4
    a04c:	2280      	movs	r2, #128	; 0x80
    a04e:	04d2      	lsls	r2, r2, #19
    a050:	401a      	ands	r2, r3
    a052:	d027      	beq.n	a0a4 <__aeabi_d2f+0x9c>
    a054:	3401      	adds	r4, #1
    a056:	2cff      	cmp	r4, #255	; 0xff
    a058:	d003      	beq.n	a062 <__aeabi_d2f+0x5a>
    a05a:	019b      	lsls	r3, r3, #6
    a05c:	0a5b      	lsrs	r3, r3, #9
    a05e:	b2e4      	uxtb	r4, r4
    a060:	e001      	b.n	a066 <__aeabi_d2f+0x5e>
    a062:	24ff      	movs	r4, #255	; 0xff
    a064:	2300      	movs	r3, #0
    a066:	025b      	lsls	r3, r3, #9
    a068:	05e4      	lsls	r4, r4, #23
    a06a:	0a5b      	lsrs	r3, r3, #9
    a06c:	4323      	orrs	r3, r4
    a06e:	005b      	lsls	r3, r3, #1
    a070:	07c9      	lsls	r1, r1, #31
    a072:	085b      	lsrs	r3, r3, #1
    a074:	430b      	orrs	r3, r1
    a076:	1c18      	adds	r0, r3, #0
    a078:	bd70      	pop	{r4, r5, r6, pc}
    a07a:	2d00      	cmp	r5, #0
    a07c:	d106      	bne.n	a08c <__aeabi_d2f+0x84>
    a07e:	4313      	orrs	r3, r2
    a080:	d10e      	bne.n	a0a0 <__aeabi_d2f+0x98>
    a082:	2400      	movs	r4, #0
    a084:	025b      	lsls	r3, r3, #9
    a086:	0a5b      	lsrs	r3, r3, #9
    a088:	b2e4      	uxtb	r4, r4
    a08a:	e7ec      	b.n	a066 <__aeabi_d2f+0x5e>
    a08c:	431a      	orrs	r2, r3
    a08e:	d0e8      	beq.n	a062 <__aeabi_d2f+0x5a>
    a090:	2080      	movs	r0, #128	; 0x80
    a092:	00db      	lsls	r3, r3, #3
    a094:	0480      	lsls	r0, r0, #18
    a096:	4303      	orrs	r3, r0
    a098:	24ff      	movs	r4, #255	; 0xff
    a09a:	e7d0      	b.n	a03e <__aeabi_d2f+0x36>
    a09c:	3417      	adds	r4, #23
    a09e:	da0c      	bge.n	a0ba <__aeabi_d2f+0xb2>
    a0a0:	2305      	movs	r3, #5
    a0a2:	2400      	movs	r4, #0
    a0a4:	08db      	lsrs	r3, r3, #3
    a0a6:	2cff      	cmp	r4, #255	; 0xff
    a0a8:	d1ec      	bne.n	a084 <__aeabi_d2f+0x7c>
    a0aa:	2b00      	cmp	r3, #0
    a0ac:	d02d      	beq.n	a10a <__aeabi_d2f+0x102>
    a0ae:	2280      	movs	r2, #128	; 0x80
    a0b0:	03d2      	lsls	r2, r2, #15
    a0b2:	4313      	orrs	r3, r2
    a0b4:	025b      	lsls	r3, r3, #9
    a0b6:	0a5b      	lsrs	r3, r3, #9
    a0b8:	e7d5      	b.n	a066 <__aeabi_d2f+0x5e>
    a0ba:	2480      	movs	r4, #128	; 0x80
    a0bc:	4816      	ldr	r0, [pc, #88]	; (a118 <__aeabi_d2f+0x110>)
    a0be:	0424      	lsls	r4, r4, #16
    a0c0:	4323      	orrs	r3, r4
    a0c2:	1b40      	subs	r0, r0, r5
    a0c4:	281f      	cmp	r0, #31
    a0c6:	dc0d      	bgt.n	a0e4 <__aeabi_d2f+0xdc>
    a0c8:	4c14      	ldr	r4, [pc, #80]	; (a11c <__aeabi_d2f+0x114>)
    a0ca:	46a4      	mov	ip, r4
    a0cc:	4465      	add	r5, ip
    a0ce:	40ab      	lsls	r3, r5
    a0d0:	1c1c      	adds	r4, r3, #0
    a0d2:	1c13      	adds	r3, r2, #0
    a0d4:	40ab      	lsls	r3, r5
    a0d6:	1e5d      	subs	r5, r3, #1
    a0d8:	41ab      	sbcs	r3, r5
    a0da:	40c2      	lsrs	r2, r0
    a0dc:	4323      	orrs	r3, r4
    a0de:	4313      	orrs	r3, r2
    a0e0:	2400      	movs	r4, #0
    a0e2:	e7ac      	b.n	a03e <__aeabi_d2f+0x36>
    a0e4:	1c1e      	adds	r6, r3, #0
    a0e6:	4c0e      	ldr	r4, [pc, #56]	; (a120 <__aeabi_d2f+0x118>)
    a0e8:	1b64      	subs	r4, r4, r5
    a0ea:	40e6      	lsrs	r6, r4
    a0ec:	1c34      	adds	r4, r6, #0
    a0ee:	2820      	cmp	r0, #32
    a0f0:	d00d      	beq.n	a10e <__aeabi_d2f+0x106>
    a0f2:	480c      	ldr	r0, [pc, #48]	; (a124 <__aeabi_d2f+0x11c>)
    a0f4:	4684      	mov	ip, r0
    a0f6:	4465      	add	r5, ip
    a0f8:	40ab      	lsls	r3, r5
    a0fa:	1c1d      	adds	r5, r3, #0
    a0fc:	432a      	orrs	r2, r5
    a0fe:	1e53      	subs	r3, r2, #1
    a100:	419a      	sbcs	r2, r3
    a102:	1c13      	adds	r3, r2, #0
    a104:	4323      	orrs	r3, r4
    a106:	2400      	movs	r4, #0
    a108:	e799      	b.n	a03e <__aeabi_d2f+0x36>
    a10a:	2300      	movs	r3, #0
    a10c:	e7ab      	b.n	a066 <__aeabi_d2f+0x5e>
    a10e:	2500      	movs	r5, #0
    a110:	e7f4      	b.n	a0fc <__aeabi_d2f+0xf4>
    a112:	46c0      	nop			; (mov r8, r8)
    a114:	fffffc80 	.word	0xfffffc80
    a118:	0000039e 	.word	0x0000039e
    a11c:	fffffc82 	.word	0xfffffc82
    a120:	0000037e 	.word	0x0000037e
    a124:	fffffca2 	.word	0xfffffca2

0000a128 <__clzsi2>:
    a128:	211c      	movs	r1, #28
    a12a:	2301      	movs	r3, #1
    a12c:	041b      	lsls	r3, r3, #16
    a12e:	4298      	cmp	r0, r3
    a130:	d301      	bcc.n	a136 <__clzsi2+0xe>
    a132:	0c00      	lsrs	r0, r0, #16
    a134:	3910      	subs	r1, #16
    a136:	0a1b      	lsrs	r3, r3, #8
    a138:	4298      	cmp	r0, r3
    a13a:	d301      	bcc.n	a140 <__clzsi2+0x18>
    a13c:	0a00      	lsrs	r0, r0, #8
    a13e:	3908      	subs	r1, #8
    a140:	091b      	lsrs	r3, r3, #4
    a142:	4298      	cmp	r0, r3
    a144:	d301      	bcc.n	a14a <__clzsi2+0x22>
    a146:	0900      	lsrs	r0, r0, #4
    a148:	3904      	subs	r1, #4
    a14a:	a202      	add	r2, pc, #8	; (adr r2, a154 <__clzsi2+0x2c>)
    a14c:	5c10      	ldrb	r0, [r2, r0]
    a14e:	1840      	adds	r0, r0, r1
    a150:	4770      	bx	lr
    a152:	46c0      	nop			; (mov r8, r8)
    a154:	02020304 	.word	0x02020304
    a158:	01010101 	.word	0x01010101
	...

0000a164 <abort>:
    a164:	b508      	push	{r3, lr}
    a166:	2006      	movs	r0, #6
    a168:	f002 f810 	bl	c18c <raise>
    a16c:	2001      	movs	r0, #1
    a16e:	f7fa fa85 	bl	467c <_exit>
	...

0000a174 <__cxa_atexit>:
    a174:	4b05      	ldr	r3, [pc, #20]	; (a18c <__cxa_atexit+0x18>)
    a176:	b510      	push	{r4, lr}
    a178:	1c04      	adds	r4, r0, #0
    a17a:	1e18      	subs	r0, r3, #0
    a17c:	d005      	beq.n	a18a <__cxa_atexit+0x16>
    a17e:	1c13      	adds	r3, r2, #0
    a180:	2002      	movs	r0, #2
    a182:	1c0a      	adds	r2, r1, #0
    a184:	1c21      	adds	r1, r4, #0
    a186:	e000      	b.n	a18a <__cxa_atexit+0x16>
    a188:	bf00      	nop
    a18a:	bd10      	pop	{r4, pc}
    a18c:	00000000 	.word	0x00000000

0000a190 <__errno>:
    a190:	4b01      	ldr	r3, [pc, #4]	; (a198 <__errno+0x8>)
    a192:	6818      	ldr	r0, [r3, #0]
    a194:	4770      	bx	lr
    a196:	46c0      	nop			; (mov r8, r8)
    a198:	20000134 	.word	0x20000134

0000a19c <exit>:
    a19c:	4b08      	ldr	r3, [pc, #32]	; (a1c0 <exit+0x24>)
    a19e:	b510      	push	{r4, lr}
    a1a0:	1c04      	adds	r4, r0, #0
    a1a2:	2b00      	cmp	r3, #0
    a1a4:	d002      	beq.n	a1ac <exit+0x10>
    a1a6:	2100      	movs	r1, #0
    a1a8:	e000      	b.n	a1ac <exit+0x10>
    a1aa:	bf00      	nop
    a1ac:	4b05      	ldr	r3, [pc, #20]	; (a1c4 <exit+0x28>)
    a1ae:	6818      	ldr	r0, [r3, #0]
    a1b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d000      	beq.n	a1b8 <exit+0x1c>
    a1b6:	4798      	blx	r3
    a1b8:	1c20      	adds	r0, r4, #0
    a1ba:	f7fa fa5f 	bl	467c <_exit>
    a1be:	46c0      	nop			; (mov r8, r8)
    a1c0:	00000000 	.word	0x00000000
    a1c4:	000109a4 	.word	0x000109a4

0000a1c8 <_fclose_r>:
    a1c8:	b570      	push	{r4, r5, r6, lr}
    a1ca:	1c05      	adds	r5, r0, #0
    a1cc:	1e0c      	subs	r4, r1, #0
    a1ce:	d101      	bne.n	a1d4 <_fclose_r+0xc>
    a1d0:	2000      	movs	r0, #0
    a1d2:	e049      	b.n	a268 <_fclose_r+0xa0>
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d004      	beq.n	a1e2 <_fclose_r+0x1a>
    a1d8:	6983      	ldr	r3, [r0, #24]
    a1da:	2b00      	cmp	r3, #0
    a1dc:	d101      	bne.n	a1e2 <_fclose_r+0x1a>
    a1de:	f000 f999 	bl	a514 <__sinit>
    a1e2:	4b22      	ldr	r3, [pc, #136]	; (a26c <_fclose_r+0xa4>)
    a1e4:	429c      	cmp	r4, r3
    a1e6:	d101      	bne.n	a1ec <_fclose_r+0x24>
    a1e8:	686c      	ldr	r4, [r5, #4]
    a1ea:	e008      	b.n	a1fe <_fclose_r+0x36>
    a1ec:	4b20      	ldr	r3, [pc, #128]	; (a270 <_fclose_r+0xa8>)
    a1ee:	429c      	cmp	r4, r3
    a1f0:	d101      	bne.n	a1f6 <_fclose_r+0x2e>
    a1f2:	68ac      	ldr	r4, [r5, #8]
    a1f4:	e003      	b.n	a1fe <_fclose_r+0x36>
    a1f6:	4b1f      	ldr	r3, [pc, #124]	; (a274 <_fclose_r+0xac>)
    a1f8:	429c      	cmp	r4, r3
    a1fa:	d100      	bne.n	a1fe <_fclose_r+0x36>
    a1fc:	68ec      	ldr	r4, [r5, #12]
    a1fe:	220c      	movs	r2, #12
    a200:	5ea3      	ldrsh	r3, [r4, r2]
    a202:	2b00      	cmp	r3, #0
    a204:	d0e4      	beq.n	a1d0 <_fclose_r+0x8>
    a206:	1c28      	adds	r0, r5, #0
    a208:	1c21      	adds	r1, r4, #0
    a20a:	f000 f83f 	bl	a28c <__sflush_r>
    a20e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a210:	1c06      	adds	r6, r0, #0
    a212:	2b00      	cmp	r3, #0
    a214:	d006      	beq.n	a224 <_fclose_r+0x5c>
    a216:	1c28      	adds	r0, r5, #0
    a218:	6a21      	ldr	r1, [r4, #32]
    a21a:	4798      	blx	r3
    a21c:	2800      	cmp	r0, #0
    a21e:	da01      	bge.n	a224 <_fclose_r+0x5c>
    a220:	2601      	movs	r6, #1
    a222:	4276      	negs	r6, r6
    a224:	89a3      	ldrh	r3, [r4, #12]
    a226:	061b      	lsls	r3, r3, #24
    a228:	d503      	bpl.n	a232 <_fclose_r+0x6a>
    a22a:	1c28      	adds	r0, r5, #0
    a22c:	6921      	ldr	r1, [r4, #16]
    a22e:	f000 fbe7 	bl	aa00 <_free_r>
    a232:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a234:	2900      	cmp	r1, #0
    a236:	d008      	beq.n	a24a <_fclose_r+0x82>
    a238:	1c23      	adds	r3, r4, #0
    a23a:	3344      	adds	r3, #68	; 0x44
    a23c:	4299      	cmp	r1, r3
    a23e:	d002      	beq.n	a246 <_fclose_r+0x7e>
    a240:	1c28      	adds	r0, r5, #0
    a242:	f000 fbdd 	bl	aa00 <_free_r>
    a246:	2300      	movs	r3, #0
    a248:	6363      	str	r3, [r4, #52]	; 0x34
    a24a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a24c:	2900      	cmp	r1, #0
    a24e:	d004      	beq.n	a25a <_fclose_r+0x92>
    a250:	1c28      	adds	r0, r5, #0
    a252:	f000 fbd5 	bl	aa00 <_free_r>
    a256:	2300      	movs	r3, #0
    a258:	64a3      	str	r3, [r4, #72]	; 0x48
    a25a:	f000 f9cb 	bl	a5f4 <__sfp_lock_acquire>
    a25e:	2300      	movs	r3, #0
    a260:	81a3      	strh	r3, [r4, #12]
    a262:	f000 f9c8 	bl	a5f6 <__sfp_lock_release>
    a266:	1c30      	adds	r0, r6, #0
    a268:	bd70      	pop	{r4, r5, r6, pc}
    a26a:	46c0      	nop			; (mov r8, r8)
    a26c:	00010940 	.word	0x00010940
    a270:	00010960 	.word	0x00010960
    a274:	00010980 	.word	0x00010980

0000a278 <fclose>:
    a278:	b508      	push	{r3, lr}
    a27a:	4b03      	ldr	r3, [pc, #12]	; (a288 <fclose+0x10>)
    a27c:	1c01      	adds	r1, r0, #0
    a27e:	6818      	ldr	r0, [r3, #0]
    a280:	f7ff ffa2 	bl	a1c8 <_fclose_r>
    a284:	bd08      	pop	{r3, pc}
    a286:	46c0      	nop			; (mov r8, r8)
    a288:	20000134 	.word	0x20000134

0000a28c <__sflush_r>:
    a28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a28e:	898a      	ldrh	r2, [r1, #12]
    a290:	1c05      	adds	r5, r0, #0
    a292:	1c0c      	adds	r4, r1, #0
    a294:	0713      	lsls	r3, r2, #28
    a296:	d45e      	bmi.n	a356 <__sflush_r+0xca>
    a298:	684b      	ldr	r3, [r1, #4]
    a29a:	2b00      	cmp	r3, #0
    a29c:	dc02      	bgt.n	a2a4 <__sflush_r+0x18>
    a29e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	dd1a      	ble.n	a2da <__sflush_r+0x4e>
    a2a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a2a6:	2f00      	cmp	r7, #0
    a2a8:	d017      	beq.n	a2da <__sflush_r+0x4e>
    a2aa:	2300      	movs	r3, #0
    a2ac:	682e      	ldr	r6, [r5, #0]
    a2ae:	602b      	str	r3, [r5, #0]
    a2b0:	2380      	movs	r3, #128	; 0x80
    a2b2:	015b      	lsls	r3, r3, #5
    a2b4:	401a      	ands	r2, r3
    a2b6:	d001      	beq.n	a2bc <__sflush_r+0x30>
    a2b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    a2ba:	e015      	b.n	a2e8 <__sflush_r+0x5c>
    a2bc:	1c28      	adds	r0, r5, #0
    a2be:	6a21      	ldr	r1, [r4, #32]
    a2c0:	2301      	movs	r3, #1
    a2c2:	47b8      	blx	r7
    a2c4:	1c02      	adds	r2, r0, #0
    a2c6:	1c43      	adds	r3, r0, #1
    a2c8:	d10e      	bne.n	a2e8 <__sflush_r+0x5c>
    a2ca:	682b      	ldr	r3, [r5, #0]
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d00b      	beq.n	a2e8 <__sflush_r+0x5c>
    a2d0:	2b1d      	cmp	r3, #29
    a2d2:	d001      	beq.n	a2d8 <__sflush_r+0x4c>
    a2d4:	2b16      	cmp	r3, #22
    a2d6:	d102      	bne.n	a2de <__sflush_r+0x52>
    a2d8:	602e      	str	r6, [r5, #0]
    a2da:	2000      	movs	r0, #0
    a2dc:	e05e      	b.n	a39c <__sflush_r+0x110>
    a2de:	2140      	movs	r1, #64	; 0x40
    a2e0:	89a3      	ldrh	r3, [r4, #12]
    a2e2:	430b      	orrs	r3, r1
    a2e4:	81a3      	strh	r3, [r4, #12]
    a2e6:	e059      	b.n	a39c <__sflush_r+0x110>
    a2e8:	89a3      	ldrh	r3, [r4, #12]
    a2ea:	075b      	lsls	r3, r3, #29
    a2ec:	d506      	bpl.n	a2fc <__sflush_r+0x70>
    a2ee:	6863      	ldr	r3, [r4, #4]
    a2f0:	1ad2      	subs	r2, r2, r3
    a2f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d001      	beq.n	a2fc <__sflush_r+0x70>
    a2f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a2fa:	1ad2      	subs	r2, r2, r3
    a2fc:	2300      	movs	r3, #0
    a2fe:	1c28      	adds	r0, r5, #0
    a300:	6a21      	ldr	r1, [r4, #32]
    a302:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a304:	47b8      	blx	r7
    a306:	89a3      	ldrh	r3, [r4, #12]
    a308:	1c42      	adds	r2, r0, #1
    a30a:	d106      	bne.n	a31a <__sflush_r+0x8e>
    a30c:	682a      	ldr	r2, [r5, #0]
    a30e:	2a00      	cmp	r2, #0
    a310:	d003      	beq.n	a31a <__sflush_r+0x8e>
    a312:	2a1d      	cmp	r2, #29
    a314:	d001      	beq.n	a31a <__sflush_r+0x8e>
    a316:	2a16      	cmp	r2, #22
    a318:	d119      	bne.n	a34e <__sflush_r+0xc2>
    a31a:	2200      	movs	r2, #0
    a31c:	6062      	str	r2, [r4, #4]
    a31e:	6922      	ldr	r2, [r4, #16]
    a320:	6022      	str	r2, [r4, #0]
    a322:	04db      	lsls	r3, r3, #19
    a324:	d505      	bpl.n	a332 <__sflush_r+0xa6>
    a326:	1c43      	adds	r3, r0, #1
    a328:	d102      	bne.n	a330 <__sflush_r+0xa4>
    a32a:	682b      	ldr	r3, [r5, #0]
    a32c:	2b00      	cmp	r3, #0
    a32e:	d100      	bne.n	a332 <__sflush_r+0xa6>
    a330:	6560      	str	r0, [r4, #84]	; 0x54
    a332:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a334:	602e      	str	r6, [r5, #0]
    a336:	2900      	cmp	r1, #0
    a338:	d0cf      	beq.n	a2da <__sflush_r+0x4e>
    a33a:	1c23      	adds	r3, r4, #0
    a33c:	3344      	adds	r3, #68	; 0x44
    a33e:	4299      	cmp	r1, r3
    a340:	d002      	beq.n	a348 <__sflush_r+0xbc>
    a342:	1c28      	adds	r0, r5, #0
    a344:	f000 fb5c 	bl	aa00 <_free_r>
    a348:	2000      	movs	r0, #0
    a34a:	6360      	str	r0, [r4, #52]	; 0x34
    a34c:	e026      	b.n	a39c <__sflush_r+0x110>
    a34e:	2240      	movs	r2, #64	; 0x40
    a350:	4313      	orrs	r3, r2
    a352:	81a3      	strh	r3, [r4, #12]
    a354:	e022      	b.n	a39c <__sflush_r+0x110>
    a356:	690f      	ldr	r7, [r1, #16]
    a358:	2f00      	cmp	r7, #0
    a35a:	d0be      	beq.n	a2da <__sflush_r+0x4e>
    a35c:	680b      	ldr	r3, [r1, #0]
    a35e:	600f      	str	r7, [r1, #0]
    a360:	1bdb      	subs	r3, r3, r7
    a362:	9301      	str	r3, [sp, #4]
    a364:	2300      	movs	r3, #0
    a366:	0792      	lsls	r2, r2, #30
    a368:	d100      	bne.n	a36c <__sflush_r+0xe0>
    a36a:	694b      	ldr	r3, [r1, #20]
    a36c:	60a3      	str	r3, [r4, #8]
    a36e:	9b01      	ldr	r3, [sp, #4]
    a370:	2b00      	cmp	r3, #0
    a372:	ddb2      	ble.n	a2da <__sflush_r+0x4e>
    a374:	1c28      	adds	r0, r5, #0
    a376:	6a21      	ldr	r1, [r4, #32]
    a378:	1c3a      	adds	r2, r7, #0
    a37a:	9b01      	ldr	r3, [sp, #4]
    a37c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    a37e:	47b0      	blx	r6
    a380:	2800      	cmp	r0, #0
    a382:	dc06      	bgt.n	a392 <__sflush_r+0x106>
    a384:	2240      	movs	r2, #64	; 0x40
    a386:	2001      	movs	r0, #1
    a388:	89a3      	ldrh	r3, [r4, #12]
    a38a:	4240      	negs	r0, r0
    a38c:	4313      	orrs	r3, r2
    a38e:	81a3      	strh	r3, [r4, #12]
    a390:	e004      	b.n	a39c <__sflush_r+0x110>
    a392:	9b01      	ldr	r3, [sp, #4]
    a394:	183f      	adds	r7, r7, r0
    a396:	1a1b      	subs	r3, r3, r0
    a398:	9301      	str	r3, [sp, #4]
    a39a:	e7e8      	b.n	a36e <__sflush_r+0xe2>
    a39c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a3a0 <_fflush_r>:
    a3a0:	b538      	push	{r3, r4, r5, lr}
    a3a2:	690b      	ldr	r3, [r1, #16]
    a3a4:	1c05      	adds	r5, r0, #0
    a3a6:	1c0c      	adds	r4, r1, #0
    a3a8:	2b00      	cmp	r3, #0
    a3aa:	d101      	bne.n	a3b0 <_fflush_r+0x10>
    a3ac:	2000      	movs	r0, #0
    a3ae:	e01c      	b.n	a3ea <_fflush_r+0x4a>
    a3b0:	2800      	cmp	r0, #0
    a3b2:	d004      	beq.n	a3be <_fflush_r+0x1e>
    a3b4:	6983      	ldr	r3, [r0, #24]
    a3b6:	2b00      	cmp	r3, #0
    a3b8:	d101      	bne.n	a3be <_fflush_r+0x1e>
    a3ba:	f000 f8ab 	bl	a514 <__sinit>
    a3be:	4b0b      	ldr	r3, [pc, #44]	; (a3ec <_fflush_r+0x4c>)
    a3c0:	429c      	cmp	r4, r3
    a3c2:	d101      	bne.n	a3c8 <_fflush_r+0x28>
    a3c4:	686c      	ldr	r4, [r5, #4]
    a3c6:	e008      	b.n	a3da <_fflush_r+0x3a>
    a3c8:	4b09      	ldr	r3, [pc, #36]	; (a3f0 <_fflush_r+0x50>)
    a3ca:	429c      	cmp	r4, r3
    a3cc:	d101      	bne.n	a3d2 <_fflush_r+0x32>
    a3ce:	68ac      	ldr	r4, [r5, #8]
    a3d0:	e003      	b.n	a3da <_fflush_r+0x3a>
    a3d2:	4b08      	ldr	r3, [pc, #32]	; (a3f4 <_fflush_r+0x54>)
    a3d4:	429c      	cmp	r4, r3
    a3d6:	d100      	bne.n	a3da <_fflush_r+0x3a>
    a3d8:	68ec      	ldr	r4, [r5, #12]
    a3da:	220c      	movs	r2, #12
    a3dc:	5ea3      	ldrsh	r3, [r4, r2]
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d0e4      	beq.n	a3ac <_fflush_r+0xc>
    a3e2:	1c28      	adds	r0, r5, #0
    a3e4:	1c21      	adds	r1, r4, #0
    a3e6:	f7ff ff51 	bl	a28c <__sflush_r>
    a3ea:	bd38      	pop	{r3, r4, r5, pc}
    a3ec:	00010940 	.word	0x00010940
    a3f0:	00010960 	.word	0x00010960
    a3f4:	00010980 	.word	0x00010980

0000a3f8 <fflush>:
    a3f8:	b508      	push	{r3, lr}
    a3fa:	1e01      	subs	r1, r0, #0
    a3fc:	d105      	bne.n	a40a <fflush+0x12>
    a3fe:	4b05      	ldr	r3, [pc, #20]	; (a414 <fflush+0x1c>)
    a400:	4905      	ldr	r1, [pc, #20]	; (a418 <fflush+0x20>)
    a402:	6818      	ldr	r0, [r3, #0]
    a404:	f000 fa2c 	bl	a860 <_fwalk_reent>
    a408:	e003      	b.n	a412 <fflush+0x1a>
    a40a:	4b04      	ldr	r3, [pc, #16]	; (a41c <fflush+0x24>)
    a40c:	6818      	ldr	r0, [r3, #0]
    a40e:	f7ff ffc7 	bl	a3a0 <_fflush_r>
    a412:	bd08      	pop	{r3, pc}
    a414:	000109a4 	.word	0x000109a4
    a418:	0000a3a1 	.word	0x0000a3a1
    a41c:	20000134 	.word	0x20000134

0000a420 <_fgetc_r>:
    a420:	b538      	push	{r3, r4, r5, lr}
    a422:	1c05      	adds	r5, r0, #0
    a424:	1c0c      	adds	r4, r1, #0
    a426:	2800      	cmp	r0, #0
    a428:	d004      	beq.n	a434 <_fgetc_r+0x14>
    a42a:	6983      	ldr	r3, [r0, #24]
    a42c:	2b00      	cmp	r3, #0
    a42e:	d101      	bne.n	a434 <_fgetc_r+0x14>
    a430:	f000 f870 	bl	a514 <__sinit>
    a434:	4b0e      	ldr	r3, [pc, #56]	; (a470 <_fgetc_r+0x50>)
    a436:	429c      	cmp	r4, r3
    a438:	d101      	bne.n	a43e <_fgetc_r+0x1e>
    a43a:	686c      	ldr	r4, [r5, #4]
    a43c:	e008      	b.n	a450 <_fgetc_r+0x30>
    a43e:	4b0d      	ldr	r3, [pc, #52]	; (a474 <_fgetc_r+0x54>)
    a440:	429c      	cmp	r4, r3
    a442:	d101      	bne.n	a448 <_fgetc_r+0x28>
    a444:	68ac      	ldr	r4, [r5, #8]
    a446:	e003      	b.n	a450 <_fgetc_r+0x30>
    a448:	4b0b      	ldr	r3, [pc, #44]	; (a478 <_fgetc_r+0x58>)
    a44a:	429c      	cmp	r4, r3
    a44c:	d100      	bne.n	a450 <_fgetc_r+0x30>
    a44e:	68ec      	ldr	r4, [r5, #12]
    a450:	6863      	ldr	r3, [r4, #4]
    a452:	3b01      	subs	r3, #1
    a454:	6063      	str	r3, [r4, #4]
    a456:	2b00      	cmp	r3, #0
    a458:	da04      	bge.n	a464 <_fgetc_r+0x44>
    a45a:	1c28      	adds	r0, r5, #0
    a45c:	1c21      	adds	r1, r4, #0
    a45e:	f001 fd3b 	bl	bed8 <__srget_r>
    a462:	e003      	b.n	a46c <_fgetc_r+0x4c>
    a464:	6823      	ldr	r3, [r4, #0]
    a466:	1c5a      	adds	r2, r3, #1
    a468:	6022      	str	r2, [r4, #0]
    a46a:	7818      	ldrb	r0, [r3, #0]
    a46c:	bd38      	pop	{r3, r4, r5, pc}
    a46e:	46c0      	nop			; (mov r8, r8)
    a470:	00010940 	.word	0x00010940
    a474:	00010960 	.word	0x00010960
    a478:	00010980 	.word	0x00010980

0000a47c <fgetc>:
    a47c:	b508      	push	{r3, lr}
    a47e:	4b03      	ldr	r3, [pc, #12]	; (a48c <fgetc+0x10>)
    a480:	1c01      	adds	r1, r0, #0
    a482:	6818      	ldr	r0, [r3, #0]
    a484:	f7ff ffcc 	bl	a420 <_fgetc_r>
    a488:	bd08      	pop	{r3, pc}
    a48a:	46c0      	nop			; (mov r8, r8)
    a48c:	20000134 	.word	0x20000134

0000a490 <_cleanup_r>:
    a490:	b508      	push	{r3, lr}
    a492:	4902      	ldr	r1, [pc, #8]	; (a49c <_cleanup_r+0xc>)
    a494:	f000 f9e4 	bl	a860 <_fwalk_reent>
    a498:	bd08      	pop	{r3, pc}
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	0000a3a1 	.word	0x0000a3a1

0000a4a0 <std.isra.0>:
    a4a0:	2300      	movs	r3, #0
    a4a2:	b510      	push	{r4, lr}
    a4a4:	1c04      	adds	r4, r0, #0
    a4a6:	6003      	str	r3, [r0, #0]
    a4a8:	6043      	str	r3, [r0, #4]
    a4aa:	6083      	str	r3, [r0, #8]
    a4ac:	8181      	strh	r1, [r0, #12]
    a4ae:	6643      	str	r3, [r0, #100]	; 0x64
    a4b0:	81c2      	strh	r2, [r0, #14]
    a4b2:	6103      	str	r3, [r0, #16]
    a4b4:	6143      	str	r3, [r0, #20]
    a4b6:	6183      	str	r3, [r0, #24]
    a4b8:	1c19      	adds	r1, r3, #0
    a4ba:	2208      	movs	r2, #8
    a4bc:	305c      	adds	r0, #92	; 0x5c
    a4be:	f000 fa97 	bl	a9f0 <memset>
    a4c2:	4b05      	ldr	r3, [pc, #20]	; (a4d8 <std.isra.0+0x38>)
    a4c4:	6224      	str	r4, [r4, #32]
    a4c6:	6263      	str	r3, [r4, #36]	; 0x24
    a4c8:	4b04      	ldr	r3, [pc, #16]	; (a4dc <std.isra.0+0x3c>)
    a4ca:	62a3      	str	r3, [r4, #40]	; 0x28
    a4cc:	4b04      	ldr	r3, [pc, #16]	; (a4e0 <std.isra.0+0x40>)
    a4ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    a4d0:	4b04      	ldr	r3, [pc, #16]	; (a4e4 <std.isra.0+0x44>)
    a4d2:	6323      	str	r3, [r4, #48]	; 0x30
    a4d4:	bd10      	pop	{r4, pc}
    a4d6:	46c0      	nop			; (mov r8, r8)
    a4d8:	0000c261 	.word	0x0000c261
    a4dc:	0000c28d 	.word	0x0000c28d
    a4e0:	0000c2c5 	.word	0x0000c2c5
    a4e4:	0000c2f1 	.word	0x0000c2f1

0000a4e8 <__sfmoreglue>:
    a4e8:	b570      	push	{r4, r5, r6, lr}
    a4ea:	2568      	movs	r5, #104	; 0x68
    a4ec:	1e4b      	subs	r3, r1, #1
    a4ee:	435d      	muls	r5, r3
    a4f0:	1c0e      	adds	r6, r1, #0
    a4f2:	1c29      	adds	r1, r5, #0
    a4f4:	3174      	adds	r1, #116	; 0x74
    a4f6:	f000 fac9 	bl	aa8c <_malloc_r>
    a4fa:	1e04      	subs	r4, r0, #0
    a4fc:	d008      	beq.n	a510 <__sfmoreglue+0x28>
    a4fe:	2100      	movs	r1, #0
    a500:	1c2a      	adds	r2, r5, #0
    a502:	6001      	str	r1, [r0, #0]
    a504:	6046      	str	r6, [r0, #4]
    a506:	300c      	adds	r0, #12
    a508:	60a0      	str	r0, [r4, #8]
    a50a:	3268      	adds	r2, #104	; 0x68
    a50c:	f000 fa70 	bl	a9f0 <memset>
    a510:	1c20      	adds	r0, r4, #0
    a512:	bd70      	pop	{r4, r5, r6, pc}

0000a514 <__sinit>:
    a514:	6983      	ldr	r3, [r0, #24]
    a516:	b513      	push	{r0, r1, r4, lr}
    a518:	2b00      	cmp	r3, #0
    a51a:	d128      	bne.n	a56e <__sinit+0x5a>
    a51c:	6483      	str	r3, [r0, #72]	; 0x48
    a51e:	64c3      	str	r3, [r0, #76]	; 0x4c
    a520:	6503      	str	r3, [r0, #80]	; 0x50
    a522:	4b13      	ldr	r3, [pc, #76]	; (a570 <__sinit+0x5c>)
    a524:	4a13      	ldr	r2, [pc, #76]	; (a574 <__sinit+0x60>)
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	6282      	str	r2, [r0, #40]	; 0x28
    a52a:	9301      	str	r3, [sp, #4]
    a52c:	4298      	cmp	r0, r3
    a52e:	d101      	bne.n	a534 <__sinit+0x20>
    a530:	2301      	movs	r3, #1
    a532:	6183      	str	r3, [r0, #24]
    a534:	1c04      	adds	r4, r0, #0
    a536:	f000 f81f 	bl	a578 <__sfp>
    a53a:	6060      	str	r0, [r4, #4]
    a53c:	1c20      	adds	r0, r4, #0
    a53e:	f000 f81b 	bl	a578 <__sfp>
    a542:	60a0      	str	r0, [r4, #8]
    a544:	1c20      	adds	r0, r4, #0
    a546:	f000 f817 	bl	a578 <__sfp>
    a54a:	2104      	movs	r1, #4
    a54c:	60e0      	str	r0, [r4, #12]
    a54e:	2200      	movs	r2, #0
    a550:	6860      	ldr	r0, [r4, #4]
    a552:	f7ff ffa5 	bl	a4a0 <std.isra.0>
    a556:	68a0      	ldr	r0, [r4, #8]
    a558:	2109      	movs	r1, #9
    a55a:	2201      	movs	r2, #1
    a55c:	f7ff ffa0 	bl	a4a0 <std.isra.0>
    a560:	68e0      	ldr	r0, [r4, #12]
    a562:	2112      	movs	r1, #18
    a564:	2202      	movs	r2, #2
    a566:	f7ff ff9b 	bl	a4a0 <std.isra.0>
    a56a:	2301      	movs	r3, #1
    a56c:	61a3      	str	r3, [r4, #24]
    a56e:	bd13      	pop	{r0, r1, r4, pc}
    a570:	000109a4 	.word	0x000109a4
    a574:	0000a491 	.word	0x0000a491

0000a578 <__sfp>:
    a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a57a:	4b1d      	ldr	r3, [pc, #116]	; (a5f0 <__sfp+0x78>)
    a57c:	1c06      	adds	r6, r0, #0
    a57e:	681d      	ldr	r5, [r3, #0]
    a580:	69ab      	ldr	r3, [r5, #24]
    a582:	2b00      	cmp	r3, #0
    a584:	d102      	bne.n	a58c <__sfp+0x14>
    a586:	1c28      	adds	r0, r5, #0
    a588:	f7ff ffc4 	bl	a514 <__sinit>
    a58c:	3548      	adds	r5, #72	; 0x48
    a58e:	68ac      	ldr	r4, [r5, #8]
    a590:	686b      	ldr	r3, [r5, #4]
    a592:	3b01      	subs	r3, #1
    a594:	d405      	bmi.n	a5a2 <__sfp+0x2a>
    a596:	220c      	movs	r2, #12
    a598:	5ea7      	ldrsh	r7, [r4, r2]
    a59a:	2f00      	cmp	r7, #0
    a59c:	d010      	beq.n	a5c0 <__sfp+0x48>
    a59e:	3468      	adds	r4, #104	; 0x68
    a5a0:	e7f7      	b.n	a592 <__sfp+0x1a>
    a5a2:	682b      	ldr	r3, [r5, #0]
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d106      	bne.n	a5b6 <__sfp+0x3e>
    a5a8:	1c30      	adds	r0, r6, #0
    a5aa:	2104      	movs	r1, #4
    a5ac:	f7ff ff9c 	bl	a4e8 <__sfmoreglue>
    a5b0:	6028      	str	r0, [r5, #0]
    a5b2:	2800      	cmp	r0, #0
    a5b4:	d001      	beq.n	a5ba <__sfp+0x42>
    a5b6:	682d      	ldr	r5, [r5, #0]
    a5b8:	e7e9      	b.n	a58e <__sfp+0x16>
    a5ba:	230c      	movs	r3, #12
    a5bc:	6033      	str	r3, [r6, #0]
    a5be:	e016      	b.n	a5ee <__sfp+0x76>
    a5c0:	2301      	movs	r3, #1
    a5c2:	1c20      	adds	r0, r4, #0
    a5c4:	425b      	negs	r3, r3
    a5c6:	81e3      	strh	r3, [r4, #14]
    a5c8:	3302      	adds	r3, #2
    a5ca:	81a3      	strh	r3, [r4, #12]
    a5cc:	6667      	str	r7, [r4, #100]	; 0x64
    a5ce:	6027      	str	r7, [r4, #0]
    a5d0:	60a7      	str	r7, [r4, #8]
    a5d2:	6067      	str	r7, [r4, #4]
    a5d4:	6127      	str	r7, [r4, #16]
    a5d6:	6167      	str	r7, [r4, #20]
    a5d8:	61a7      	str	r7, [r4, #24]
    a5da:	305c      	adds	r0, #92	; 0x5c
    a5dc:	1c39      	adds	r1, r7, #0
    a5de:	2208      	movs	r2, #8
    a5e0:	f000 fa06 	bl	a9f0 <memset>
    a5e4:	1c20      	adds	r0, r4, #0
    a5e6:	6367      	str	r7, [r4, #52]	; 0x34
    a5e8:	63a7      	str	r7, [r4, #56]	; 0x38
    a5ea:	64a7      	str	r7, [r4, #72]	; 0x48
    a5ec:	64e7      	str	r7, [r4, #76]	; 0x4c
    a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5f0:	000109a4 	.word	0x000109a4

0000a5f4 <__sfp_lock_acquire>:
    a5f4:	4770      	bx	lr

0000a5f6 <__sfp_lock_release>:
    a5f6:	4770      	bx	lr

0000a5f8 <_fopen_r>:
    a5f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a5fa:	1c0f      	adds	r7, r1, #0
    a5fc:	1c11      	adds	r1, r2, #0
    a5fe:	aa01      	add	r2, sp, #4
    a600:	1c05      	adds	r5, r0, #0
    a602:	f003 fdc3 	bl	e18c <__sflags>
    a606:	1e06      	subs	r6, r0, #0
    a608:	d101      	bne.n	a60e <_fopen_r+0x16>
    a60a:	2400      	movs	r4, #0
    a60c:	e027      	b.n	a65e <_fopen_r+0x66>
    a60e:	1c28      	adds	r0, r5, #0
    a610:	f7ff ffb2 	bl	a578 <__sfp>
    a614:	1e04      	subs	r4, r0, #0
    a616:	d0f8      	beq.n	a60a <_fopen_r+0x12>
    a618:	23db      	movs	r3, #219	; 0xdb
    a61a:	1c28      	adds	r0, r5, #0
    a61c:	1c39      	adds	r1, r7, #0
    a61e:	9a01      	ldr	r2, [sp, #4]
    a620:	005b      	lsls	r3, r3, #1
    a622:	f001 fb6d 	bl	bd00 <_open_r>
    a626:	2800      	cmp	r0, #0
    a628:	da06      	bge.n	a638 <_fopen_r+0x40>
    a62a:	2500      	movs	r5, #0
    a62c:	f7ff ffe2 	bl	a5f4 <__sfp_lock_acquire>
    a630:	81a5      	strh	r5, [r4, #12]
    a632:	f7ff ffe0 	bl	a5f6 <__sfp_lock_release>
    a636:	e7e8      	b.n	a60a <_fopen_r+0x12>
    a638:	4b0a      	ldr	r3, [pc, #40]	; (a664 <_fopen_r+0x6c>)
    a63a:	81e0      	strh	r0, [r4, #14]
    a63c:	6263      	str	r3, [r4, #36]	; 0x24
    a63e:	4b0a      	ldr	r3, [pc, #40]	; (a668 <_fopen_r+0x70>)
    a640:	81a6      	strh	r6, [r4, #12]
    a642:	62a3      	str	r3, [r4, #40]	; 0x28
    a644:	4b09      	ldr	r3, [pc, #36]	; (a66c <_fopen_r+0x74>)
    a646:	6224      	str	r4, [r4, #32]
    a648:	62e3      	str	r3, [r4, #44]	; 0x2c
    a64a:	4b09      	ldr	r3, [pc, #36]	; (a670 <_fopen_r+0x78>)
    a64c:	6323      	str	r3, [r4, #48]	; 0x30
    a64e:	05f3      	lsls	r3, r6, #23
    a650:	d505      	bpl.n	a65e <_fopen_r+0x66>
    a652:	1c28      	adds	r0, r5, #0
    a654:	1c21      	adds	r1, r4, #0
    a656:	2200      	movs	r2, #0
    a658:	2302      	movs	r3, #2
    a65a:	f000 f849 	bl	a6f0 <_fseek_r>
    a65e:	1c20      	adds	r0, r4, #0
    a660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a662:	46c0      	nop			; (mov r8, r8)
    a664:	0000c261 	.word	0x0000c261
    a668:	0000c28d 	.word	0x0000c28d
    a66c:	0000c2c5 	.word	0x0000c2c5
    a670:	0000c2f1 	.word	0x0000c2f1

0000a674 <fopen>:
    a674:	b508      	push	{r3, lr}
    a676:	1c03      	adds	r3, r0, #0
    a678:	1c0a      	adds	r2, r1, #0
    a67a:	4903      	ldr	r1, [pc, #12]	; (a688 <fopen+0x14>)
    a67c:	6808      	ldr	r0, [r1, #0]
    a67e:	1c19      	adds	r1, r3, #0
    a680:	f7ff ffba 	bl	a5f8 <_fopen_r>
    a684:	bd08      	pop	{r3, pc}
    a686:	46c0      	nop			; (mov r8, r8)
    a688:	20000134 	.word	0x20000134

0000a68c <_fputc_r>:
    a68c:	b570      	push	{r4, r5, r6, lr}
    a68e:	1c05      	adds	r5, r0, #0
    a690:	1c0e      	adds	r6, r1, #0
    a692:	1c14      	adds	r4, r2, #0
    a694:	2800      	cmp	r0, #0
    a696:	d004      	beq.n	a6a2 <_fputc_r+0x16>
    a698:	6983      	ldr	r3, [r0, #24]
    a69a:	2b00      	cmp	r3, #0
    a69c:	d101      	bne.n	a6a2 <_fputc_r+0x16>
    a69e:	f7ff ff39 	bl	a514 <__sinit>
    a6a2:	4b0a      	ldr	r3, [pc, #40]	; (a6cc <_fputc_r+0x40>)
    a6a4:	429c      	cmp	r4, r3
    a6a6:	d101      	bne.n	a6ac <_fputc_r+0x20>
    a6a8:	686c      	ldr	r4, [r5, #4]
    a6aa:	e008      	b.n	a6be <_fputc_r+0x32>
    a6ac:	4b08      	ldr	r3, [pc, #32]	; (a6d0 <_fputc_r+0x44>)
    a6ae:	429c      	cmp	r4, r3
    a6b0:	d101      	bne.n	a6b6 <_fputc_r+0x2a>
    a6b2:	68ac      	ldr	r4, [r5, #8]
    a6b4:	e003      	b.n	a6be <_fputc_r+0x32>
    a6b6:	4b07      	ldr	r3, [pc, #28]	; (a6d4 <_fputc_r+0x48>)
    a6b8:	429c      	cmp	r4, r3
    a6ba:	d100      	bne.n	a6be <_fputc_r+0x32>
    a6bc:	68ec      	ldr	r4, [r5, #12]
    a6be:	1c28      	adds	r0, r5, #0
    a6c0:	1c31      	adds	r1, r6, #0
    a6c2:	1c22      	adds	r2, r4, #0
    a6c4:	f001 fb30 	bl	bd28 <_putc_r>
    a6c8:	bd70      	pop	{r4, r5, r6, pc}
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	00010940 	.word	0x00010940
    a6d0:	00010960 	.word	0x00010960
    a6d4:	00010980 	.word	0x00010980

0000a6d8 <fputc>:
    a6d8:	b508      	push	{r3, lr}
    a6da:	1c03      	adds	r3, r0, #0
    a6dc:	1c0a      	adds	r2, r1, #0
    a6de:	4903      	ldr	r1, [pc, #12]	; (a6ec <fputc+0x14>)
    a6e0:	6808      	ldr	r0, [r1, #0]
    a6e2:	1c19      	adds	r1, r3, #0
    a6e4:	f7ff ffd2 	bl	a68c <_fputc_r>
    a6e8:	bd08      	pop	{r3, pc}
    a6ea:	46c0      	nop			; (mov r8, r8)
    a6ec:	20000134 	.word	0x20000134

0000a6f0 <_fseek_r>:
    a6f0:	b508      	push	{r3, lr}
    a6f2:	f000 f801 	bl	a6f8 <_fseeko_r>
    a6f6:	bd08      	pop	{r3, pc}

0000a6f8 <_fseeko_r>:
    a6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a6fa:	1c05      	adds	r5, r0, #0
    a6fc:	1c0c      	adds	r4, r1, #0
    a6fe:	9201      	str	r2, [sp, #4]
    a700:	1c1e      	adds	r6, r3, #0
    a702:	2800      	cmp	r0, #0
    a704:	d004      	beq.n	a710 <_fseeko_r+0x18>
    a706:	6983      	ldr	r3, [r0, #24]
    a708:	2b00      	cmp	r3, #0
    a70a:	d101      	bne.n	a710 <_fseeko_r+0x18>
    a70c:	f7ff ff02 	bl	a514 <__sinit>
    a710:	4b41      	ldr	r3, [pc, #260]	; (a818 <_fseeko_r+0x120>)
    a712:	429c      	cmp	r4, r3
    a714:	d101      	bne.n	a71a <_fseeko_r+0x22>
    a716:	686c      	ldr	r4, [r5, #4]
    a718:	e008      	b.n	a72c <_fseeko_r+0x34>
    a71a:	4b40      	ldr	r3, [pc, #256]	; (a81c <_fseeko_r+0x124>)
    a71c:	429c      	cmp	r4, r3
    a71e:	d101      	bne.n	a724 <_fseeko_r+0x2c>
    a720:	68ac      	ldr	r4, [r5, #8]
    a722:	e003      	b.n	a72c <_fseeko_r+0x34>
    a724:	4b3e      	ldr	r3, [pc, #248]	; (a820 <_fseeko_r+0x128>)
    a726:	429c      	cmp	r4, r3
    a728:	d100      	bne.n	a72c <_fseeko_r+0x34>
    a72a:	68ec      	ldr	r4, [r5, #12]
    a72c:	2284      	movs	r2, #132	; 0x84
    a72e:	89a3      	ldrh	r3, [r4, #12]
    a730:	0052      	lsls	r2, r2, #1
    a732:	4013      	ands	r3, r2
    a734:	4293      	cmp	r3, r2
    a736:	d103      	bne.n	a740 <_fseeko_r+0x48>
    a738:	1c28      	adds	r0, r5, #0
    a73a:	1c21      	adds	r1, r4, #0
    a73c:	f7ff fe30 	bl	a3a0 <_fflush_r>
    a740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a742:	9300      	str	r3, [sp, #0]
    a744:	2b00      	cmp	r3, #0
    a746:	d101      	bne.n	a74c <_fseeko_r+0x54>
    a748:	331d      	adds	r3, #29
    a74a:	e031      	b.n	a7b0 <_fseeko_r+0xb8>
    a74c:	2e01      	cmp	r6, #1
    a74e:	d005      	beq.n	a75c <_fseeko_r+0x64>
    a750:	2e02      	cmp	r6, #2
    a752:	d031      	beq.n	a7b8 <_fseeko_r+0xc0>
    a754:	2316      	movs	r3, #22
    a756:	2e00      	cmp	r6, #0
    a758:	d12a      	bne.n	a7b0 <_fseeko_r+0xb8>
    a75a:	e02d      	b.n	a7b8 <_fseeko_r+0xc0>
    a75c:	1c28      	adds	r0, r5, #0
    a75e:	1c21      	adds	r1, r4, #0
    a760:	f7ff fe1e 	bl	a3a0 <_fflush_r>
    a764:	2380      	movs	r3, #128	; 0x80
    a766:	89a2      	ldrh	r2, [r4, #12]
    a768:	015b      	lsls	r3, r3, #5
    a76a:	401a      	ands	r2, r3
    a76c:	d001      	beq.n	a772 <_fseeko_r+0x7a>
    a76e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a770:	e006      	b.n	a780 <_fseeko_r+0x88>
    a772:	1c33      	adds	r3, r6, #0
    a774:	1c28      	adds	r0, r5, #0
    a776:	6a21      	ldr	r1, [r4, #32]
    a778:	9e00      	ldr	r6, [sp, #0]
    a77a:	47b0      	blx	r6
    a77c:	1c43      	adds	r3, r0, #1
    a77e:	d018      	beq.n	a7b2 <_fseeko_r+0xba>
    a780:	89a3      	ldrh	r3, [r4, #12]
    a782:	075a      	lsls	r2, r3, #29
    a784:	d507      	bpl.n	a796 <_fseeko_r+0x9e>
    a786:	6863      	ldr	r3, [r4, #4]
    a788:	1ac0      	subs	r0, r0, r3
    a78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a78c:	2b00      	cmp	r3, #0
    a78e:	d00a      	beq.n	a7a6 <_fseeko_r+0xae>
    a790:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a792:	1ac0      	subs	r0, r0, r3
    a794:	e007      	b.n	a7a6 <_fseeko_r+0xae>
    a796:	071b      	lsls	r3, r3, #28
    a798:	d505      	bpl.n	a7a6 <_fseeko_r+0xae>
    a79a:	6823      	ldr	r3, [r4, #0]
    a79c:	2b00      	cmp	r3, #0
    a79e:	d002      	beq.n	a7a6 <_fseeko_r+0xae>
    a7a0:	6922      	ldr	r2, [r4, #16]
    a7a2:	1a9b      	subs	r3, r3, r2
    a7a4:	18c0      	adds	r0, r0, r3
    a7a6:	9b01      	ldr	r3, [sp, #4]
    a7a8:	2600      	movs	r6, #0
    a7aa:	181b      	adds	r3, r3, r0
    a7ac:	9301      	str	r3, [sp, #4]
    a7ae:	e003      	b.n	a7b8 <_fseeko_r+0xc0>
    a7b0:	602b      	str	r3, [r5, #0]
    a7b2:	2701      	movs	r7, #1
    a7b4:	427f      	negs	r7, r7
    a7b6:	e02d      	b.n	a814 <_fseeko_r+0x11c>
    a7b8:	6923      	ldr	r3, [r4, #16]
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d103      	bne.n	a7c6 <_fseeko_r+0xce>
    a7be:	1c28      	adds	r0, r5, #0
    a7c0:	1c21      	adds	r1, r4, #0
    a7c2:	f000 f895 	bl	a8f0 <__smakebuf_r>
    a7c6:	1c28      	adds	r0, r5, #0
    a7c8:	1c21      	adds	r1, r4, #0
    a7ca:	f7ff fde9 	bl	a3a0 <_fflush_r>
    a7ce:	1e07      	subs	r7, r0, #0
    a7d0:	d1ef      	bne.n	a7b2 <_fseeko_r+0xba>
    a7d2:	1c33      	adds	r3, r6, #0
    a7d4:	1c28      	adds	r0, r5, #0
    a7d6:	6a21      	ldr	r1, [r4, #32]
    a7d8:	9a01      	ldr	r2, [sp, #4]
    a7da:	9e00      	ldr	r6, [sp, #0]
    a7dc:	47b0      	blx	r6
    a7de:	1c43      	adds	r3, r0, #1
    a7e0:	d0e7      	beq.n	a7b2 <_fseeko_r+0xba>
    a7e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a7e4:	2900      	cmp	r1, #0
    a7e6:	d008      	beq.n	a7fa <_fseeko_r+0x102>
    a7e8:	1c23      	adds	r3, r4, #0
    a7ea:	3344      	adds	r3, #68	; 0x44
    a7ec:	4299      	cmp	r1, r3
    a7ee:	d002      	beq.n	a7f6 <_fseeko_r+0xfe>
    a7f0:	1c28      	adds	r0, r5, #0
    a7f2:	f000 f905 	bl	aa00 <_free_r>
    a7f6:	2300      	movs	r3, #0
    a7f8:	6363      	str	r3, [r4, #52]	; 0x34
    a7fa:	2100      	movs	r1, #0
    a7fc:	1c20      	adds	r0, r4, #0
    a7fe:	6923      	ldr	r3, [r4, #16]
    a800:	89a2      	ldrh	r2, [r4, #12]
    a802:	6023      	str	r3, [r4, #0]
    a804:	4b07      	ldr	r3, [pc, #28]	; (a824 <_fseeko_r+0x12c>)
    a806:	6061      	str	r1, [r4, #4]
    a808:	4013      	ands	r3, r2
    a80a:	81a3      	strh	r3, [r4, #12]
    a80c:	305c      	adds	r0, #92	; 0x5c
    a80e:	2208      	movs	r2, #8
    a810:	f000 f8ee 	bl	a9f0 <memset>
    a814:	1c38      	adds	r0, r7, #0
    a816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a818:	00010940 	.word	0x00010940
    a81c:	00010960 	.word	0x00010960
    a820:	00010980 	.word	0x00010980
    a824:	fffff7df 	.word	0xfffff7df

0000a828 <_fwalk>:
    a828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a82a:	3048      	adds	r0, #72	; 0x48
    a82c:	1c04      	adds	r4, r0, #0
    a82e:	2600      	movs	r6, #0
    a830:	9101      	str	r1, [sp, #4]
    a832:	2c00      	cmp	r4, #0
    a834:	d012      	beq.n	a85c <_fwalk+0x34>
    a836:	68a5      	ldr	r5, [r4, #8]
    a838:	6867      	ldr	r7, [r4, #4]
    a83a:	3f01      	subs	r7, #1
    a83c:	d40c      	bmi.n	a858 <_fwalk+0x30>
    a83e:	89ab      	ldrh	r3, [r5, #12]
    a840:	2b01      	cmp	r3, #1
    a842:	d907      	bls.n	a854 <_fwalk+0x2c>
    a844:	220e      	movs	r2, #14
    a846:	5eab      	ldrsh	r3, [r5, r2]
    a848:	3301      	adds	r3, #1
    a84a:	d003      	beq.n	a854 <_fwalk+0x2c>
    a84c:	1c28      	adds	r0, r5, #0
    a84e:	9b01      	ldr	r3, [sp, #4]
    a850:	4798      	blx	r3
    a852:	4306      	orrs	r6, r0
    a854:	3568      	adds	r5, #104	; 0x68
    a856:	e7f0      	b.n	a83a <_fwalk+0x12>
    a858:	6824      	ldr	r4, [r4, #0]
    a85a:	e7ea      	b.n	a832 <_fwalk+0xa>
    a85c:	1c30      	adds	r0, r6, #0
    a85e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a860 <_fwalk_reent>:
    a860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a862:	1c04      	adds	r4, r0, #0
    a864:	1c07      	adds	r7, r0, #0
    a866:	2600      	movs	r6, #0
    a868:	9101      	str	r1, [sp, #4]
    a86a:	3448      	adds	r4, #72	; 0x48
    a86c:	2c00      	cmp	r4, #0
    a86e:	d016      	beq.n	a89e <_fwalk_reent+0x3e>
    a870:	6863      	ldr	r3, [r4, #4]
    a872:	68a5      	ldr	r5, [r4, #8]
    a874:	9300      	str	r3, [sp, #0]
    a876:	9b00      	ldr	r3, [sp, #0]
    a878:	3b01      	subs	r3, #1
    a87a:	9300      	str	r3, [sp, #0]
    a87c:	d40d      	bmi.n	a89a <_fwalk_reent+0x3a>
    a87e:	89ab      	ldrh	r3, [r5, #12]
    a880:	2b01      	cmp	r3, #1
    a882:	d908      	bls.n	a896 <_fwalk_reent+0x36>
    a884:	220e      	movs	r2, #14
    a886:	5eab      	ldrsh	r3, [r5, r2]
    a888:	3301      	adds	r3, #1
    a88a:	d004      	beq.n	a896 <_fwalk_reent+0x36>
    a88c:	1c38      	adds	r0, r7, #0
    a88e:	1c29      	adds	r1, r5, #0
    a890:	9b01      	ldr	r3, [sp, #4]
    a892:	4798      	blx	r3
    a894:	4306      	orrs	r6, r0
    a896:	3568      	adds	r5, #104	; 0x68
    a898:	e7ed      	b.n	a876 <_fwalk_reent+0x16>
    a89a:	6824      	ldr	r4, [r4, #0]
    a89c:	e7e6      	b.n	a86c <_fwalk_reent+0xc>
    a89e:	1c30      	adds	r0, r6, #0
    a8a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000a8a4 <__libc_init_array>:
    a8a4:	4b0e      	ldr	r3, [pc, #56]	; (a8e0 <__libc_init_array+0x3c>)
    a8a6:	b570      	push	{r4, r5, r6, lr}
    a8a8:	2500      	movs	r5, #0
    a8aa:	1c1e      	adds	r6, r3, #0
    a8ac:	4c0d      	ldr	r4, [pc, #52]	; (a8e4 <__libc_init_array+0x40>)
    a8ae:	1ae4      	subs	r4, r4, r3
    a8b0:	10a4      	asrs	r4, r4, #2
    a8b2:	42a5      	cmp	r5, r4
    a8b4:	d004      	beq.n	a8c0 <__libc_init_array+0x1c>
    a8b6:	00ab      	lsls	r3, r5, #2
    a8b8:	58f3      	ldr	r3, [r6, r3]
    a8ba:	4798      	blx	r3
    a8bc:	3501      	adds	r5, #1
    a8be:	e7f8      	b.n	a8b2 <__libc_init_array+0xe>
    a8c0:	f006 f9e0 	bl	10c84 <_init>
    a8c4:	4b08      	ldr	r3, [pc, #32]	; (a8e8 <__libc_init_array+0x44>)
    a8c6:	2500      	movs	r5, #0
    a8c8:	1c1e      	adds	r6, r3, #0
    a8ca:	4c08      	ldr	r4, [pc, #32]	; (a8ec <__libc_init_array+0x48>)
    a8cc:	1ae4      	subs	r4, r4, r3
    a8ce:	10a4      	asrs	r4, r4, #2
    a8d0:	42a5      	cmp	r5, r4
    a8d2:	d004      	beq.n	a8de <__libc_init_array+0x3a>
    a8d4:	00ab      	lsls	r3, r5, #2
    a8d6:	58f3      	ldr	r3, [r6, r3]
    a8d8:	4798      	blx	r3
    a8da:	3501      	adds	r5, #1
    a8dc:	e7f8      	b.n	a8d0 <__libc_init_array+0x2c>
    a8de:	bd70      	pop	{r4, r5, r6, pc}
    a8e0:	00010c90 	.word	0x00010c90
    a8e4:	00010c90 	.word	0x00010c90
    a8e8:	00010c90 	.word	0x00010c90
    a8ec:	00010c9c 	.word	0x00010c9c

0000a8f0 <__smakebuf_r>:
    a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8f2:	898b      	ldrh	r3, [r1, #12]
    a8f4:	b091      	sub	sp, #68	; 0x44
    a8f6:	079b      	lsls	r3, r3, #30
    a8f8:	d506      	bpl.n	a908 <__smakebuf_r+0x18>
    a8fa:	1c0b      	adds	r3, r1, #0
    a8fc:	3347      	adds	r3, #71	; 0x47
    a8fe:	600b      	str	r3, [r1, #0]
    a900:	610b      	str	r3, [r1, #16]
    a902:	2301      	movs	r3, #1
    a904:	614b      	str	r3, [r1, #20]
    a906:	e045      	b.n	a994 <__smakebuf_r+0xa4>
    a908:	1c0c      	adds	r4, r1, #0
    a90a:	230e      	movs	r3, #14
    a90c:	5ec9      	ldrsh	r1, [r1, r3]
    a90e:	1c06      	adds	r6, r0, #0
    a910:	2900      	cmp	r1, #0
    a912:	da04      	bge.n	a91e <__smakebuf_r+0x2e>
    a914:	2380      	movs	r3, #128	; 0x80
    a916:	89a5      	ldrh	r5, [r4, #12]
    a918:	401d      	ands	r5, r3
    a91a:	d110      	bne.n	a93e <__smakebuf_r+0x4e>
    a91c:	e00c      	b.n	a938 <__smakebuf_r+0x48>
    a91e:	aa01      	add	r2, sp, #4
    a920:	f003 fc6c 	bl	e1fc <_fstat_r>
    a924:	2800      	cmp	r0, #0
    a926:	dbf5      	blt.n	a914 <__smakebuf_r+0x24>
    a928:	23f0      	movs	r3, #240	; 0xf0
    a92a:	9d02      	ldr	r5, [sp, #8]
    a92c:	021b      	lsls	r3, r3, #8
    a92e:	401d      	ands	r5, r3
    a930:	4b19      	ldr	r3, [pc, #100]	; (a998 <__smakebuf_r+0xa8>)
    a932:	18ed      	adds	r5, r5, r3
    a934:	426b      	negs	r3, r5
    a936:	415d      	adcs	r5, r3
    a938:	2780      	movs	r7, #128	; 0x80
    a93a:	00ff      	lsls	r7, r7, #3
    a93c:	e001      	b.n	a942 <__smakebuf_r+0x52>
    a93e:	2500      	movs	r5, #0
    a940:	2740      	movs	r7, #64	; 0x40
    a942:	1c30      	adds	r0, r6, #0
    a944:	1c39      	adds	r1, r7, #0
    a946:	f000 f8a1 	bl	aa8c <_malloc_r>
    a94a:	2800      	cmp	r0, #0
    a94c:	d10c      	bne.n	a968 <__smakebuf_r+0x78>
    a94e:	89a3      	ldrh	r3, [r4, #12]
    a950:	059a      	lsls	r2, r3, #22
    a952:	d41f      	bmi.n	a994 <__smakebuf_r+0xa4>
    a954:	2202      	movs	r2, #2
    a956:	4313      	orrs	r3, r2
    a958:	81a3      	strh	r3, [r4, #12]
    a95a:	1c23      	adds	r3, r4, #0
    a95c:	3347      	adds	r3, #71	; 0x47
    a95e:	6023      	str	r3, [r4, #0]
    a960:	6123      	str	r3, [r4, #16]
    a962:	2301      	movs	r3, #1
    a964:	6163      	str	r3, [r4, #20]
    a966:	e015      	b.n	a994 <__smakebuf_r+0xa4>
    a968:	2280      	movs	r2, #128	; 0x80
    a96a:	4b0c      	ldr	r3, [pc, #48]	; (a99c <__smakebuf_r+0xac>)
    a96c:	62b3      	str	r3, [r6, #40]	; 0x28
    a96e:	89a3      	ldrh	r3, [r4, #12]
    a970:	6020      	str	r0, [r4, #0]
    a972:	4313      	orrs	r3, r2
    a974:	81a3      	strh	r3, [r4, #12]
    a976:	6120      	str	r0, [r4, #16]
    a978:	6167      	str	r7, [r4, #20]
    a97a:	2d00      	cmp	r5, #0
    a97c:	d00a      	beq.n	a994 <__smakebuf_r+0xa4>
    a97e:	230e      	movs	r3, #14
    a980:	5ee1      	ldrsh	r1, [r4, r3]
    a982:	1c30      	adds	r0, r6, #0
    a984:	f003 ff64 	bl	e850 <_isatty_r>
    a988:	2800      	cmp	r0, #0
    a98a:	d003      	beq.n	a994 <__smakebuf_r+0xa4>
    a98c:	2201      	movs	r2, #1
    a98e:	89a3      	ldrh	r3, [r4, #12]
    a990:	4313      	orrs	r3, r2
    a992:	81a3      	strh	r3, [r4, #12]
    a994:	b011      	add	sp, #68	; 0x44
    a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a998:	ffffe000 	.word	0xffffe000
    a99c:	0000a491 	.word	0x0000a491

0000a9a0 <malloc>:
    a9a0:	b508      	push	{r3, lr}
    a9a2:	4b03      	ldr	r3, [pc, #12]	; (a9b0 <malloc+0x10>)
    a9a4:	1c01      	adds	r1, r0, #0
    a9a6:	6818      	ldr	r0, [r3, #0]
    a9a8:	f000 f870 	bl	aa8c <_malloc_r>
    a9ac:	bd08      	pop	{r3, pc}
    a9ae:	46c0      	nop			; (mov r8, r8)
    a9b0:	20000134 	.word	0x20000134

0000a9b4 <free>:
    a9b4:	b508      	push	{r3, lr}
    a9b6:	4b03      	ldr	r3, [pc, #12]	; (a9c4 <free+0x10>)
    a9b8:	1c01      	adds	r1, r0, #0
    a9ba:	6818      	ldr	r0, [r3, #0]
    a9bc:	f000 f820 	bl	aa00 <_free_r>
    a9c0:	bd08      	pop	{r3, pc}
    a9c2:	46c0      	nop			; (mov r8, r8)
    a9c4:	20000134 	.word	0x20000134

0000a9c8 <memchr>:
    a9c8:	b2c9      	uxtb	r1, r1
    a9ca:	1882      	adds	r2, r0, r2
    a9cc:	4290      	cmp	r0, r2
    a9ce:	d004      	beq.n	a9da <memchr+0x12>
    a9d0:	7803      	ldrb	r3, [r0, #0]
    a9d2:	428b      	cmp	r3, r1
    a9d4:	d002      	beq.n	a9dc <memchr+0x14>
    a9d6:	3001      	adds	r0, #1
    a9d8:	e7f8      	b.n	a9cc <memchr+0x4>
    a9da:	2000      	movs	r0, #0
    a9dc:	4770      	bx	lr

0000a9de <memcpy>:
    a9de:	2300      	movs	r3, #0
    a9e0:	b510      	push	{r4, lr}
    a9e2:	4293      	cmp	r3, r2
    a9e4:	d003      	beq.n	a9ee <memcpy+0x10>
    a9e6:	5ccc      	ldrb	r4, [r1, r3]
    a9e8:	54c4      	strb	r4, [r0, r3]
    a9ea:	3301      	adds	r3, #1
    a9ec:	e7f9      	b.n	a9e2 <memcpy+0x4>
    a9ee:	bd10      	pop	{r4, pc}

0000a9f0 <memset>:
    a9f0:	1c03      	adds	r3, r0, #0
    a9f2:	1882      	adds	r2, r0, r2
    a9f4:	4293      	cmp	r3, r2
    a9f6:	d002      	beq.n	a9fe <memset+0xe>
    a9f8:	7019      	strb	r1, [r3, #0]
    a9fa:	3301      	adds	r3, #1
    a9fc:	e7fa      	b.n	a9f4 <memset+0x4>
    a9fe:	4770      	bx	lr

0000aa00 <_free_r>:
    aa00:	b530      	push	{r4, r5, lr}
    aa02:	2900      	cmp	r1, #0
    aa04:	d03e      	beq.n	aa84 <_free_r+0x84>
    aa06:	3904      	subs	r1, #4
    aa08:	680b      	ldr	r3, [r1, #0]
    aa0a:	2b00      	cmp	r3, #0
    aa0c:	da00      	bge.n	aa10 <_free_r+0x10>
    aa0e:	18c9      	adds	r1, r1, r3
    aa10:	4a1d      	ldr	r2, [pc, #116]	; (aa88 <_free_r+0x88>)
    aa12:	6813      	ldr	r3, [r2, #0]
    aa14:	1c14      	adds	r4, r2, #0
    aa16:	2b00      	cmp	r3, #0
    aa18:	d102      	bne.n	aa20 <_free_r+0x20>
    aa1a:	604b      	str	r3, [r1, #4]
    aa1c:	6011      	str	r1, [r2, #0]
    aa1e:	e031      	b.n	aa84 <_free_r+0x84>
    aa20:	4299      	cmp	r1, r3
    aa22:	d20d      	bcs.n	aa40 <_free_r+0x40>
    aa24:	6808      	ldr	r0, [r1, #0]
    aa26:	180a      	adds	r2, r1, r0
    aa28:	429a      	cmp	r2, r3
    aa2a:	d103      	bne.n	aa34 <_free_r+0x34>
    aa2c:	6813      	ldr	r3, [r2, #0]
    aa2e:	18c3      	adds	r3, r0, r3
    aa30:	600b      	str	r3, [r1, #0]
    aa32:	6853      	ldr	r3, [r2, #4]
    aa34:	604b      	str	r3, [r1, #4]
    aa36:	6021      	str	r1, [r4, #0]
    aa38:	e024      	b.n	aa84 <_free_r+0x84>
    aa3a:	428a      	cmp	r2, r1
    aa3c:	d803      	bhi.n	aa46 <_free_r+0x46>
    aa3e:	1c13      	adds	r3, r2, #0
    aa40:	685a      	ldr	r2, [r3, #4]
    aa42:	2a00      	cmp	r2, #0
    aa44:	d1f9      	bne.n	aa3a <_free_r+0x3a>
    aa46:	681d      	ldr	r5, [r3, #0]
    aa48:	195c      	adds	r4, r3, r5
    aa4a:	428c      	cmp	r4, r1
    aa4c:	d10b      	bne.n	aa66 <_free_r+0x66>
    aa4e:	6809      	ldr	r1, [r1, #0]
    aa50:	1869      	adds	r1, r5, r1
    aa52:	1858      	adds	r0, r3, r1
    aa54:	6019      	str	r1, [r3, #0]
    aa56:	4290      	cmp	r0, r2
    aa58:	d114      	bne.n	aa84 <_free_r+0x84>
    aa5a:	6810      	ldr	r0, [r2, #0]
    aa5c:	6852      	ldr	r2, [r2, #4]
    aa5e:	1809      	adds	r1, r1, r0
    aa60:	6019      	str	r1, [r3, #0]
    aa62:	605a      	str	r2, [r3, #4]
    aa64:	e00e      	b.n	aa84 <_free_r+0x84>
    aa66:	428c      	cmp	r4, r1
    aa68:	d902      	bls.n	aa70 <_free_r+0x70>
    aa6a:	230c      	movs	r3, #12
    aa6c:	6003      	str	r3, [r0, #0]
    aa6e:	e009      	b.n	aa84 <_free_r+0x84>
    aa70:	6808      	ldr	r0, [r1, #0]
    aa72:	180c      	adds	r4, r1, r0
    aa74:	4294      	cmp	r4, r2
    aa76:	d103      	bne.n	aa80 <_free_r+0x80>
    aa78:	6814      	ldr	r4, [r2, #0]
    aa7a:	6852      	ldr	r2, [r2, #4]
    aa7c:	1900      	adds	r0, r0, r4
    aa7e:	6008      	str	r0, [r1, #0]
    aa80:	604a      	str	r2, [r1, #4]
    aa82:	6059      	str	r1, [r3, #4]
    aa84:	bd30      	pop	{r4, r5, pc}
    aa86:	46c0      	nop			; (mov r8, r8)
    aa88:	20004460 	.word	0x20004460

0000aa8c <_malloc_r>:
    aa8c:	2303      	movs	r3, #3
    aa8e:	b570      	push	{r4, r5, r6, lr}
    aa90:	1ccc      	adds	r4, r1, #3
    aa92:	439c      	bics	r4, r3
    aa94:	3408      	adds	r4, #8
    aa96:	1c05      	adds	r5, r0, #0
    aa98:	2c0c      	cmp	r4, #12
    aa9a:	d201      	bcs.n	aaa0 <_malloc_r+0x14>
    aa9c:	240c      	movs	r4, #12
    aa9e:	e005      	b.n	aaac <_malloc_r+0x20>
    aaa0:	2c00      	cmp	r4, #0
    aaa2:	da03      	bge.n	aaac <_malloc_r+0x20>
    aaa4:	230c      	movs	r3, #12
    aaa6:	2000      	movs	r0, #0
    aaa8:	602b      	str	r3, [r5, #0]
    aaaa:	e042      	b.n	ab32 <_malloc_r+0xa6>
    aaac:	428c      	cmp	r4, r1
    aaae:	d3f9      	bcc.n	aaa4 <_malloc_r+0x18>
    aab0:	4a20      	ldr	r2, [pc, #128]	; (ab34 <_malloc_r+0xa8>)
    aab2:	6813      	ldr	r3, [r2, #0]
    aab4:	1c10      	adds	r0, r2, #0
    aab6:	1c19      	adds	r1, r3, #0
    aab8:	2900      	cmp	r1, #0
    aaba:	d013      	beq.n	aae4 <_malloc_r+0x58>
    aabc:	680a      	ldr	r2, [r1, #0]
    aabe:	1b12      	subs	r2, r2, r4
    aac0:	d40d      	bmi.n	aade <_malloc_r+0x52>
    aac2:	2a0b      	cmp	r2, #11
    aac4:	d902      	bls.n	aacc <_malloc_r+0x40>
    aac6:	600a      	str	r2, [r1, #0]
    aac8:	188b      	adds	r3, r1, r2
    aaca:	e01f      	b.n	ab0c <_malloc_r+0x80>
    aacc:	428b      	cmp	r3, r1
    aace:	d102      	bne.n	aad6 <_malloc_r+0x4a>
    aad0:	685a      	ldr	r2, [r3, #4]
    aad2:	6002      	str	r2, [r0, #0]
    aad4:	e01b      	b.n	ab0e <_malloc_r+0x82>
    aad6:	684a      	ldr	r2, [r1, #4]
    aad8:	605a      	str	r2, [r3, #4]
    aada:	1c0b      	adds	r3, r1, #0
    aadc:	e017      	b.n	ab0e <_malloc_r+0x82>
    aade:	1c0b      	adds	r3, r1, #0
    aae0:	6849      	ldr	r1, [r1, #4]
    aae2:	e7e9      	b.n	aab8 <_malloc_r+0x2c>
    aae4:	4e14      	ldr	r6, [pc, #80]	; (ab38 <_malloc_r+0xac>)
    aae6:	6833      	ldr	r3, [r6, #0]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d103      	bne.n	aaf4 <_malloc_r+0x68>
    aaec:	1c28      	adds	r0, r5, #0
    aaee:	f001 fa4b 	bl	bf88 <_sbrk_r>
    aaf2:	6030      	str	r0, [r6, #0]
    aaf4:	1c28      	adds	r0, r5, #0
    aaf6:	1c21      	adds	r1, r4, #0
    aaf8:	f001 fa46 	bl	bf88 <_sbrk_r>
    aafc:	1c03      	adds	r3, r0, #0
    aafe:	1c42      	adds	r2, r0, #1
    ab00:	d0d0      	beq.n	aaa4 <_malloc_r+0x18>
    ab02:	2203      	movs	r2, #3
    ab04:	1cc6      	adds	r6, r0, #3
    ab06:	4396      	bics	r6, r2
    ab08:	4286      	cmp	r6, r0
    ab0a:	d10a      	bne.n	ab22 <_malloc_r+0x96>
    ab0c:	601c      	str	r4, [r3, #0]
    ab0e:	1c18      	adds	r0, r3, #0
    ab10:	2107      	movs	r1, #7
    ab12:	300b      	adds	r0, #11
    ab14:	1d1a      	adds	r2, r3, #4
    ab16:	4388      	bics	r0, r1
    ab18:	1a82      	subs	r2, r0, r2
    ab1a:	d00a      	beq.n	ab32 <_malloc_r+0xa6>
    ab1c:	4251      	negs	r1, r2
    ab1e:	5099      	str	r1, [r3, r2]
    ab20:	e007      	b.n	ab32 <_malloc_r+0xa6>
    ab22:	1a31      	subs	r1, r6, r0
    ab24:	1c28      	adds	r0, r5, #0
    ab26:	f001 fa2f 	bl	bf88 <_sbrk_r>
    ab2a:	1c43      	adds	r3, r0, #1
    ab2c:	d0ba      	beq.n	aaa4 <_malloc_r+0x18>
    ab2e:	1c33      	adds	r3, r6, #0
    ab30:	e7ec      	b.n	ab0c <_malloc_r+0x80>
    ab32:	bd70      	pop	{r4, r5, r6, pc}
    ab34:	20004460 	.word	0x20004460
    ab38:	2000445c 	.word	0x2000445c

0000ab3c <__sfputc_r>:
    ab3c:	6893      	ldr	r3, [r2, #8]
    ab3e:	b510      	push	{r4, lr}
    ab40:	3b01      	subs	r3, #1
    ab42:	6093      	str	r3, [r2, #8]
    ab44:	2b00      	cmp	r3, #0
    ab46:	da05      	bge.n	ab54 <__sfputc_r+0x18>
    ab48:	6994      	ldr	r4, [r2, #24]
    ab4a:	42a3      	cmp	r3, r4
    ab4c:	db08      	blt.n	ab60 <__sfputc_r+0x24>
    ab4e:	b2cb      	uxtb	r3, r1
    ab50:	2b0a      	cmp	r3, #10
    ab52:	d005      	beq.n	ab60 <__sfputc_r+0x24>
    ab54:	6813      	ldr	r3, [r2, #0]
    ab56:	1c58      	adds	r0, r3, #1
    ab58:	6010      	str	r0, [r2, #0]
    ab5a:	7019      	strb	r1, [r3, #0]
    ab5c:	b2c8      	uxtb	r0, r1
    ab5e:	e001      	b.n	ab64 <__sfputc_r+0x28>
    ab60:	f002 fb9a 	bl	d298 <__swbuf_r>
    ab64:	bd10      	pop	{r4, pc}

0000ab66 <__sfputs_r>:
    ab66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab68:	1c06      	adds	r6, r0, #0
    ab6a:	1c0f      	adds	r7, r1, #0
    ab6c:	1c14      	adds	r4, r2, #0
    ab6e:	18d5      	adds	r5, r2, r3
    ab70:	42ac      	cmp	r4, r5
    ab72:	d008      	beq.n	ab86 <__sfputs_r+0x20>
    ab74:	7821      	ldrb	r1, [r4, #0]
    ab76:	1c30      	adds	r0, r6, #0
    ab78:	1c3a      	adds	r2, r7, #0
    ab7a:	f7ff ffdf 	bl	ab3c <__sfputc_r>
    ab7e:	3401      	adds	r4, #1
    ab80:	1c43      	adds	r3, r0, #1
    ab82:	d1f5      	bne.n	ab70 <__sfputs_r+0xa>
    ab84:	e000      	b.n	ab88 <__sfputs_r+0x22>
    ab86:	2000      	movs	r0, #0
    ab88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000ab8c <_vfiprintf_r>:
    ab8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab8e:	b09f      	sub	sp, #124	; 0x7c
    ab90:	1c06      	adds	r6, r0, #0
    ab92:	1c0f      	adds	r7, r1, #0
    ab94:	9202      	str	r2, [sp, #8]
    ab96:	9305      	str	r3, [sp, #20]
    ab98:	2800      	cmp	r0, #0
    ab9a:	d004      	beq.n	aba6 <_vfiprintf_r+0x1a>
    ab9c:	6983      	ldr	r3, [r0, #24]
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d101      	bne.n	aba6 <_vfiprintf_r+0x1a>
    aba2:	f7ff fcb7 	bl	a514 <__sinit>
    aba6:	4b79      	ldr	r3, [pc, #484]	; (ad8c <_vfiprintf_r+0x200>)
    aba8:	429f      	cmp	r7, r3
    abaa:	d101      	bne.n	abb0 <_vfiprintf_r+0x24>
    abac:	6877      	ldr	r7, [r6, #4]
    abae:	e008      	b.n	abc2 <_vfiprintf_r+0x36>
    abb0:	4b77      	ldr	r3, [pc, #476]	; (ad90 <_vfiprintf_r+0x204>)
    abb2:	429f      	cmp	r7, r3
    abb4:	d101      	bne.n	abba <_vfiprintf_r+0x2e>
    abb6:	68b7      	ldr	r7, [r6, #8]
    abb8:	e003      	b.n	abc2 <_vfiprintf_r+0x36>
    abba:	4b76      	ldr	r3, [pc, #472]	; (ad94 <_vfiprintf_r+0x208>)
    abbc:	429f      	cmp	r7, r3
    abbe:	d100      	bne.n	abc2 <_vfiprintf_r+0x36>
    abc0:	68f7      	ldr	r7, [r6, #12]
    abc2:	89bb      	ldrh	r3, [r7, #12]
    abc4:	071b      	lsls	r3, r3, #28
    abc6:	d50a      	bpl.n	abde <_vfiprintf_r+0x52>
    abc8:	693b      	ldr	r3, [r7, #16]
    abca:	2b00      	cmp	r3, #0
    abcc:	d007      	beq.n	abde <_vfiprintf_r+0x52>
    abce:	2300      	movs	r3, #0
    abd0:	ad06      	add	r5, sp, #24
    abd2:	616b      	str	r3, [r5, #20]
    abd4:	3320      	adds	r3, #32
    abd6:	766b      	strb	r3, [r5, #25]
    abd8:	3310      	adds	r3, #16
    abda:	76ab      	strb	r3, [r5, #26]
    abdc:	e03d      	b.n	ac5a <_vfiprintf_r+0xce>
    abde:	1c30      	adds	r0, r6, #0
    abe0:	1c39      	adds	r1, r7, #0
    abe2:	f002 fbc5 	bl	d370 <__swsetup_r>
    abe6:	2800      	cmp	r0, #0
    abe8:	d0f1      	beq.n	abce <_vfiprintf_r+0x42>
    abea:	2001      	movs	r0, #1
    abec:	4240      	negs	r0, r0
    abee:	e0ca      	b.n	ad86 <_vfiprintf_r+0x1fa>
    abf0:	9a05      	ldr	r2, [sp, #20]
    abf2:	1d11      	adds	r1, r2, #4
    abf4:	6812      	ldr	r2, [r2, #0]
    abf6:	9105      	str	r1, [sp, #20]
    abf8:	2a00      	cmp	r2, #0
    abfa:	db7e      	blt.n	acfa <_vfiprintf_r+0x16e>
    abfc:	9209      	str	r2, [sp, #36]	; 0x24
    abfe:	3401      	adds	r4, #1
    ac00:	7823      	ldrb	r3, [r4, #0]
    ac02:	2b2e      	cmp	r3, #46	; 0x2e
    ac04:	d100      	bne.n	ac08 <_vfiprintf_r+0x7c>
    ac06:	e089      	b.n	ad1c <_vfiprintf_r+0x190>
    ac08:	7821      	ldrb	r1, [r4, #0]
    ac0a:	4863      	ldr	r0, [pc, #396]	; (ad98 <_vfiprintf_r+0x20c>)
    ac0c:	2203      	movs	r2, #3
    ac0e:	f7ff fedb 	bl	a9c8 <memchr>
    ac12:	2800      	cmp	r0, #0
    ac14:	d008      	beq.n	ac28 <_vfiprintf_r+0x9c>
    ac16:	4b60      	ldr	r3, [pc, #384]	; (ad98 <_vfiprintf_r+0x20c>)
    ac18:	3401      	adds	r4, #1
    ac1a:	1ac0      	subs	r0, r0, r3
    ac1c:	2340      	movs	r3, #64	; 0x40
    ac1e:	4083      	lsls	r3, r0
    ac20:	1c18      	adds	r0, r3, #0
    ac22:	682b      	ldr	r3, [r5, #0]
    ac24:	4318      	orrs	r0, r3
    ac26:	6028      	str	r0, [r5, #0]
    ac28:	7821      	ldrb	r1, [r4, #0]
    ac2a:	1c63      	adds	r3, r4, #1
    ac2c:	485b      	ldr	r0, [pc, #364]	; (ad9c <_vfiprintf_r+0x210>)
    ac2e:	2206      	movs	r2, #6
    ac30:	9302      	str	r3, [sp, #8]
    ac32:	7629      	strb	r1, [r5, #24]
    ac34:	f7ff fec8 	bl	a9c8 <memchr>
    ac38:	2800      	cmp	r0, #0
    ac3a:	d100      	bne.n	ac3e <_vfiprintf_r+0xb2>
    ac3c:	e091      	b.n	ad62 <_vfiprintf_r+0x1d6>
    ac3e:	4b58      	ldr	r3, [pc, #352]	; (ada0 <_vfiprintf_r+0x214>)
    ac40:	2b00      	cmp	r3, #0
    ac42:	d000      	beq.n	ac46 <_vfiprintf_r+0xba>
    ac44:	e084      	b.n	ad50 <_vfiprintf_r+0x1c4>
    ac46:	2207      	movs	r2, #7
    ac48:	9b05      	ldr	r3, [sp, #20]
    ac4a:	3307      	adds	r3, #7
    ac4c:	4393      	bics	r3, r2
    ac4e:	3308      	adds	r3, #8
    ac50:	9305      	str	r3, [sp, #20]
    ac52:	696b      	ldr	r3, [r5, #20]
    ac54:	9a03      	ldr	r2, [sp, #12]
    ac56:	189b      	adds	r3, r3, r2
    ac58:	616b      	str	r3, [r5, #20]
    ac5a:	9c02      	ldr	r4, [sp, #8]
    ac5c:	7823      	ldrb	r3, [r4, #0]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d104      	bne.n	ac6c <_vfiprintf_r+0xe0>
    ac62:	9b02      	ldr	r3, [sp, #8]
    ac64:	1ae3      	subs	r3, r4, r3
    ac66:	9304      	str	r3, [sp, #16]
    ac68:	d011      	beq.n	ac8e <_vfiprintf_r+0x102>
    ac6a:	e003      	b.n	ac74 <_vfiprintf_r+0xe8>
    ac6c:	2b25      	cmp	r3, #37	; 0x25
    ac6e:	d0f8      	beq.n	ac62 <_vfiprintf_r+0xd6>
    ac70:	3401      	adds	r4, #1
    ac72:	e7f3      	b.n	ac5c <_vfiprintf_r+0xd0>
    ac74:	9b04      	ldr	r3, [sp, #16]
    ac76:	1c30      	adds	r0, r6, #0
    ac78:	1c39      	adds	r1, r7, #0
    ac7a:	9a02      	ldr	r2, [sp, #8]
    ac7c:	f7ff ff73 	bl	ab66 <__sfputs_r>
    ac80:	1c43      	adds	r3, r0, #1
    ac82:	d07b      	beq.n	ad7c <_vfiprintf_r+0x1f0>
    ac84:	696a      	ldr	r2, [r5, #20]
    ac86:	9b04      	ldr	r3, [sp, #16]
    ac88:	4694      	mov	ip, r2
    ac8a:	4463      	add	r3, ip
    ac8c:	616b      	str	r3, [r5, #20]
    ac8e:	7823      	ldrb	r3, [r4, #0]
    ac90:	2b00      	cmp	r3, #0
    ac92:	d073      	beq.n	ad7c <_vfiprintf_r+0x1f0>
    ac94:	2201      	movs	r2, #1
    ac96:	2300      	movs	r3, #0
    ac98:	4252      	negs	r2, r2
    ac9a:	606a      	str	r2, [r5, #4]
    ac9c:	a902      	add	r1, sp, #8
    ac9e:	3254      	adds	r2, #84	; 0x54
    aca0:	1852      	adds	r2, r2, r1
    aca2:	3401      	adds	r4, #1
    aca4:	602b      	str	r3, [r5, #0]
    aca6:	60eb      	str	r3, [r5, #12]
    aca8:	60ab      	str	r3, [r5, #8]
    acaa:	7013      	strb	r3, [r2, #0]
    acac:	65ab      	str	r3, [r5, #88]	; 0x58
    acae:	7821      	ldrb	r1, [r4, #0]
    acb0:	483c      	ldr	r0, [pc, #240]	; (ada4 <_vfiprintf_r+0x218>)
    acb2:	2205      	movs	r2, #5
    acb4:	f7ff fe88 	bl	a9c8 <memchr>
    acb8:	2800      	cmp	r0, #0
    acba:	d009      	beq.n	acd0 <_vfiprintf_r+0x144>
    acbc:	4b39      	ldr	r3, [pc, #228]	; (ada4 <_vfiprintf_r+0x218>)
    acbe:	3401      	adds	r4, #1
    acc0:	1ac0      	subs	r0, r0, r3
    acc2:	2301      	movs	r3, #1
    acc4:	4083      	lsls	r3, r0
    acc6:	1c18      	adds	r0, r3, #0
    acc8:	682b      	ldr	r3, [r5, #0]
    acca:	4318      	orrs	r0, r3
    accc:	6028      	str	r0, [r5, #0]
    acce:	e7ee      	b.n	acae <_vfiprintf_r+0x122>
    acd0:	682b      	ldr	r3, [r5, #0]
    acd2:	06da      	lsls	r2, r3, #27
    acd4:	d504      	bpl.n	ace0 <_vfiprintf_r+0x154>
    acd6:	2253      	movs	r2, #83	; 0x53
    acd8:	2120      	movs	r1, #32
    acda:	a802      	add	r0, sp, #8
    acdc:	1812      	adds	r2, r2, r0
    acde:	7011      	strb	r1, [r2, #0]
    ace0:	071a      	lsls	r2, r3, #28
    ace2:	d504      	bpl.n	acee <_vfiprintf_r+0x162>
    ace4:	2253      	movs	r2, #83	; 0x53
    ace6:	212b      	movs	r1, #43	; 0x2b
    ace8:	a802      	add	r0, sp, #8
    acea:	1812      	adds	r2, r2, r0
    acec:	7011      	strb	r1, [r2, #0]
    acee:	7822      	ldrb	r2, [r4, #0]
    acf0:	2a2a      	cmp	r2, #42	; 0x2a
    acf2:	d100      	bne.n	acf6 <_vfiprintf_r+0x16a>
    acf4:	e77c      	b.n	abf0 <_vfiprintf_r+0x64>
    acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    acf8:	e005      	b.n	ad06 <_vfiprintf_r+0x17a>
    acfa:	4252      	negs	r2, r2
    acfc:	60ea      	str	r2, [r5, #12]
    acfe:	2202      	movs	r2, #2
    ad00:	4313      	orrs	r3, r2
    ad02:	602b      	str	r3, [r5, #0]
    ad04:	e77b      	b.n	abfe <_vfiprintf_r+0x72>
    ad06:	7822      	ldrb	r2, [r4, #0]
    ad08:	3a30      	subs	r2, #48	; 0x30
    ad0a:	2a09      	cmp	r2, #9
    ad0c:	d804      	bhi.n	ad18 <_vfiprintf_r+0x18c>
    ad0e:	210a      	movs	r1, #10
    ad10:	434b      	muls	r3, r1
    ad12:	3401      	adds	r4, #1
    ad14:	189b      	adds	r3, r3, r2
    ad16:	e7f6      	b.n	ad06 <_vfiprintf_r+0x17a>
    ad18:	9309      	str	r3, [sp, #36]	; 0x24
    ad1a:	e771      	b.n	ac00 <_vfiprintf_r+0x74>
    ad1c:	7863      	ldrb	r3, [r4, #1]
    ad1e:	2b2a      	cmp	r3, #42	; 0x2a
    ad20:	d109      	bne.n	ad36 <_vfiprintf_r+0x1aa>
    ad22:	9b05      	ldr	r3, [sp, #20]
    ad24:	3402      	adds	r4, #2
    ad26:	1d1a      	adds	r2, r3, #4
    ad28:	681b      	ldr	r3, [r3, #0]
    ad2a:	9205      	str	r2, [sp, #20]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	da0d      	bge.n	ad4c <_vfiprintf_r+0x1c0>
    ad30:	2301      	movs	r3, #1
    ad32:	425b      	negs	r3, r3
    ad34:	e00a      	b.n	ad4c <_vfiprintf_r+0x1c0>
    ad36:	2300      	movs	r3, #0
    ad38:	3401      	adds	r4, #1
    ad3a:	7822      	ldrb	r2, [r4, #0]
    ad3c:	3a30      	subs	r2, #48	; 0x30
    ad3e:	2a09      	cmp	r2, #9
    ad40:	d804      	bhi.n	ad4c <_vfiprintf_r+0x1c0>
    ad42:	210a      	movs	r1, #10
    ad44:	434b      	muls	r3, r1
    ad46:	3401      	adds	r4, #1
    ad48:	189b      	adds	r3, r3, r2
    ad4a:	e7f6      	b.n	ad3a <_vfiprintf_r+0x1ae>
    ad4c:	9307      	str	r3, [sp, #28]
    ad4e:	e75b      	b.n	ac08 <_vfiprintf_r+0x7c>
    ad50:	ab05      	add	r3, sp, #20
    ad52:	9300      	str	r3, [sp, #0]
    ad54:	1c30      	adds	r0, r6, #0
    ad56:	1c29      	adds	r1, r5, #0
    ad58:	1c3a      	adds	r2, r7, #0
    ad5a:	4b13      	ldr	r3, [pc, #76]	; (ada8 <_vfiprintf_r+0x21c>)
    ad5c:	f000 f8ca 	bl	aef4 <_printf_float>
    ad60:	e007      	b.n	ad72 <_vfiprintf_r+0x1e6>
    ad62:	ab05      	add	r3, sp, #20
    ad64:	9300      	str	r3, [sp, #0]
    ad66:	1c30      	adds	r0, r6, #0
    ad68:	1c29      	adds	r1, r5, #0
    ad6a:	1c3a      	adds	r2, r7, #0
    ad6c:	4b0e      	ldr	r3, [pc, #56]	; (ada8 <_vfiprintf_r+0x21c>)
    ad6e:	f000 fb6d 	bl	b44c <_printf_i>
    ad72:	9003      	str	r0, [sp, #12]
    ad74:	9b03      	ldr	r3, [sp, #12]
    ad76:	3301      	adds	r3, #1
    ad78:	d000      	beq.n	ad7c <_vfiprintf_r+0x1f0>
    ad7a:	e76a      	b.n	ac52 <_vfiprintf_r+0xc6>
    ad7c:	89bb      	ldrh	r3, [r7, #12]
    ad7e:	065b      	lsls	r3, r3, #25
    ad80:	d500      	bpl.n	ad84 <_vfiprintf_r+0x1f8>
    ad82:	e732      	b.n	abea <_vfiprintf_r+0x5e>
    ad84:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ad86:	b01f      	add	sp, #124	; 0x7c
    ad88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad8a:	46c0      	nop			; (mov r8, r8)
    ad8c:	00010940 	.word	0x00010940
    ad90:	00010960 	.word	0x00010960
    ad94:	00010980 	.word	0x00010980
    ad98:	000109ae 	.word	0x000109ae
    ad9c:	000109b2 	.word	0x000109b2
    ada0:	0000aef5 	.word	0x0000aef5
    ada4:	000109a8 	.word	0x000109a8
    ada8:	0000ab67 	.word	0x0000ab67

0000adac <vfiprintf>:
    adac:	b538      	push	{r3, r4, r5, lr}
    adae:	1c05      	adds	r5, r0, #0
    adb0:	1c0c      	adds	r4, r1, #0
    adb2:	1c13      	adds	r3, r2, #0
    adb4:	4a03      	ldr	r2, [pc, #12]	; (adc4 <vfiprintf+0x18>)
    adb6:	1c29      	adds	r1, r5, #0
    adb8:	6810      	ldr	r0, [r2, #0]
    adba:	1c22      	adds	r2, r4, #0
    adbc:	f7ff fee6 	bl	ab8c <_vfiprintf_r>
    adc0:	bd38      	pop	{r3, r4, r5, pc}
    adc2:	46c0      	nop			; (mov r8, r8)
    adc4:	20000134 	.word	0x20000134

0000adc8 <__cvt>:
    adc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adca:	b08b      	sub	sp, #44	; 0x2c
    adcc:	1c14      	adds	r4, r2, #0
    adce:	1e1d      	subs	r5, r3, #0
    add0:	9912      	ldr	r1, [sp, #72]	; 0x48
    add2:	da06      	bge.n	ade2 <__cvt+0x1a>
    add4:	2480      	movs	r4, #128	; 0x80
    add6:	0624      	lsls	r4, r4, #24
    add8:	192b      	adds	r3, r5, r4
    adda:	1c1d      	adds	r5, r3, #0
    addc:	1c14      	adds	r4, r2, #0
    adde:	232d      	movs	r3, #45	; 0x2d
    ade0:	e000      	b.n	ade4 <__cvt+0x1c>
    ade2:	2300      	movs	r3, #0
    ade4:	700b      	strb	r3, [r1, #0]
    ade6:	2320      	movs	r3, #32
    ade8:	9e14      	ldr	r6, [sp, #80]	; 0x50
    adea:	2203      	movs	r2, #3
    adec:	439e      	bics	r6, r3
    adee:	2e46      	cmp	r6, #70	; 0x46
    adf0:	d007      	beq.n	ae02 <__cvt+0x3a>
    adf2:	1c33      	adds	r3, r6, #0
    adf4:	3b45      	subs	r3, #69	; 0x45
    adf6:	4259      	negs	r1, r3
    adf8:	414b      	adcs	r3, r1
    adfa:	9910      	ldr	r1, [sp, #64]	; 0x40
    adfc:	3a01      	subs	r2, #1
    adfe:	18cb      	adds	r3, r1, r3
    ae00:	9310      	str	r3, [sp, #64]	; 0x40
    ae02:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ae04:	9200      	str	r2, [sp, #0]
    ae06:	9301      	str	r3, [sp, #4]
    ae08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ae0a:	1c22      	adds	r2, r4, #0
    ae0c:	9302      	str	r3, [sp, #8]
    ae0e:	ab08      	add	r3, sp, #32
    ae10:	9303      	str	r3, [sp, #12]
    ae12:	ab09      	add	r3, sp, #36	; 0x24
    ae14:	9304      	str	r3, [sp, #16]
    ae16:	1c2b      	adds	r3, r5, #0
    ae18:	f002 fbb8 	bl	d58c <_dtoa_r>
    ae1c:	1c07      	adds	r7, r0, #0
    ae1e:	2e47      	cmp	r6, #71	; 0x47
    ae20:	d102      	bne.n	ae28 <__cvt+0x60>
    ae22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ae24:	07db      	lsls	r3, r3, #31
    ae26:	d52c      	bpl.n	ae82 <__cvt+0xba>
    ae28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ae2a:	18fb      	adds	r3, r7, r3
    ae2c:	9307      	str	r3, [sp, #28]
    ae2e:	2e46      	cmp	r6, #70	; 0x46
    ae30:	d114      	bne.n	ae5c <__cvt+0x94>
    ae32:	783b      	ldrb	r3, [r7, #0]
    ae34:	2b30      	cmp	r3, #48	; 0x30
    ae36:	d10c      	bne.n	ae52 <__cvt+0x8a>
    ae38:	1c20      	adds	r0, r4, #0
    ae3a:	1c29      	adds	r1, r5, #0
    ae3c:	2200      	movs	r2, #0
    ae3e:	2300      	movs	r3, #0
    ae40:	f7fc faf2 	bl	7428 <__aeabi_dcmpeq>
    ae44:	2800      	cmp	r0, #0
    ae46:	d104      	bne.n	ae52 <__cvt+0x8a>
    ae48:	2301      	movs	r3, #1
    ae4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ae4c:	1a9b      	subs	r3, r3, r2
    ae4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ae50:	6013      	str	r3, [r2, #0]
    ae52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ae54:	9a07      	ldr	r2, [sp, #28]
    ae56:	681b      	ldr	r3, [r3, #0]
    ae58:	18d3      	adds	r3, r2, r3
    ae5a:	9307      	str	r3, [sp, #28]
    ae5c:	1c20      	adds	r0, r4, #0
    ae5e:	1c29      	adds	r1, r5, #0
    ae60:	2200      	movs	r2, #0
    ae62:	2300      	movs	r3, #0
    ae64:	f7fc fae0 	bl	7428 <__aeabi_dcmpeq>
    ae68:	2800      	cmp	r0, #0
    ae6a:	d001      	beq.n	ae70 <__cvt+0xa8>
    ae6c:	9b07      	ldr	r3, [sp, #28]
    ae6e:	9309      	str	r3, [sp, #36]	; 0x24
    ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae72:	9a07      	ldr	r2, [sp, #28]
    ae74:	4293      	cmp	r3, r2
    ae76:	d204      	bcs.n	ae82 <__cvt+0xba>
    ae78:	1c5a      	adds	r2, r3, #1
    ae7a:	9209      	str	r2, [sp, #36]	; 0x24
    ae7c:	2230      	movs	r2, #48	; 0x30
    ae7e:	701a      	strb	r2, [r3, #0]
    ae80:	e7f6      	b.n	ae70 <__cvt+0xa8>
    ae82:	1c38      	adds	r0, r7, #0
    ae84:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae86:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ae88:	1bdb      	subs	r3, r3, r7
    ae8a:	6013      	str	r3, [r2, #0]
    ae8c:	b00b      	add	sp, #44	; 0x2c
    ae8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ae90 <__exponent>:
    ae90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ae92:	232b      	movs	r3, #43	; 0x2b
    ae94:	1c07      	adds	r7, r0, #0
    ae96:	1c0c      	adds	r4, r1, #0
    ae98:	7002      	strb	r2, [r0, #0]
    ae9a:	1c86      	adds	r6, r0, #2
    ae9c:	2900      	cmp	r1, #0
    ae9e:	da01      	bge.n	aea4 <__exponent+0x14>
    aea0:	232d      	movs	r3, #45	; 0x2d
    aea2:	424c      	negs	r4, r1
    aea4:	707b      	strb	r3, [r7, #1]
    aea6:	2c09      	cmp	r4, #9
    aea8:	dd1c      	ble.n	aee4 <__exponent+0x54>
    aeaa:	466b      	mov	r3, sp
    aeac:	1ddd      	adds	r5, r3, #7
    aeae:	1c20      	adds	r0, r4, #0
    aeb0:	210a      	movs	r1, #10
    aeb2:	f7fc fa9d 	bl	73f0 <__aeabi_idivmod>
    aeb6:	3d01      	subs	r5, #1
    aeb8:	3130      	adds	r1, #48	; 0x30
    aeba:	7029      	strb	r1, [r5, #0]
    aebc:	1c20      	adds	r0, r4, #0
    aebe:	210a      	movs	r1, #10
    aec0:	f7fc f9b0 	bl	7224 <__aeabi_idiv>
    aec4:	1e04      	subs	r4, r0, #0
    aec6:	2c09      	cmp	r4, #9
    aec8:	dcf1      	bgt.n	aeae <__exponent+0x1e>
    aeca:	3d01      	subs	r5, #1
    aecc:	3430      	adds	r4, #48	; 0x30
    aece:	702c      	strb	r4, [r5, #0]
    aed0:	466b      	mov	r3, sp
    aed2:	3307      	adds	r3, #7
    aed4:	1c30      	adds	r0, r6, #0
    aed6:	42ab      	cmp	r3, r5
    aed8:	d909      	bls.n	aeee <__exponent+0x5e>
    aeda:	782b      	ldrb	r3, [r5, #0]
    aedc:	3501      	adds	r5, #1
    aede:	7033      	strb	r3, [r6, #0]
    aee0:	3601      	adds	r6, #1
    aee2:	e7f5      	b.n	aed0 <__exponent+0x40>
    aee4:	2330      	movs	r3, #48	; 0x30
    aee6:	18e4      	adds	r4, r4, r3
    aee8:	7033      	strb	r3, [r6, #0]
    aeea:	1cb0      	adds	r0, r6, #2
    aeec:	7074      	strb	r4, [r6, #1]
    aeee:	1bc0      	subs	r0, r0, r7
    aef0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000aef4 <_printf_float>:
    aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aef6:	b093      	sub	sp, #76	; 0x4c
    aef8:	1c0c      	adds	r4, r1, #0
    aefa:	9208      	str	r2, [sp, #32]
    aefc:	9309      	str	r3, [sp, #36]	; 0x24
    aefe:	9e18      	ldr	r6, [sp, #96]	; 0x60
    af00:	1c05      	adds	r5, r0, #0
    af02:	f003 fcb7 	bl	e874 <_localeconv_r>
    af06:	6803      	ldr	r3, [r0, #0]
    af08:	1c18      	adds	r0, r3, #0
    af0a:	930b      	str	r3, [sp, #44]	; 0x2c
    af0c:	f001 fa00 	bl	c310 <strlen>
    af10:	2300      	movs	r3, #0
    af12:	6821      	ldr	r1, [r4, #0]
    af14:	9310      	str	r3, [sp, #64]	; 0x40
    af16:	900c      	str	r0, [sp, #48]	; 0x30
    af18:	7e27      	ldrb	r7, [r4, #24]
    af1a:	6833      	ldr	r3, [r6, #0]
    af1c:	2207      	movs	r2, #7
    af1e:	05c9      	lsls	r1, r1, #23
    af20:	d501      	bpl.n	af26 <_printf_float+0x32>
    af22:	189b      	adds	r3, r3, r2
    af24:	e000      	b.n	af28 <_printf_float+0x34>
    af26:	3307      	adds	r3, #7
    af28:	4393      	bics	r3, r2
    af2a:	1c1a      	adds	r2, r3, #0
    af2c:	3208      	adds	r2, #8
    af2e:	6032      	str	r2, [r6, #0]
    af30:	681a      	ldr	r2, [r3, #0]
    af32:	685b      	ldr	r3, [r3, #4]
    af34:	64a2      	str	r2, [r4, #72]	; 0x48
    af36:	64e3      	str	r3, [r4, #76]	; 0x4c
    af38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    af3a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    af3c:	f000 fffc 	bl	bf38 <__fpclassifyd>
    af40:	2801      	cmp	r0, #1
    af42:	d118      	bne.n	af76 <_printf_float+0x82>
    af44:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    af46:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    af48:	2200      	movs	r2, #0
    af4a:	2300      	movs	r3, #0
    af4c:	f7fc fa72 	bl	7434 <__aeabi_dcmplt>
    af50:	2800      	cmp	r0, #0
    af52:	d003      	beq.n	af5c <_printf_float+0x68>
    af54:	1c23      	adds	r3, r4, #0
    af56:	222d      	movs	r2, #45	; 0x2d
    af58:	3343      	adds	r3, #67	; 0x43
    af5a:	701a      	strb	r2, [r3, #0]
    af5c:	4bb6      	ldr	r3, [pc, #728]	; (b238 <_printf_float+0x344>)
    af5e:	930a      	str	r3, [sp, #40]	; 0x28
    af60:	2f47      	cmp	r7, #71	; 0x47
    af62:	d901      	bls.n	af68 <_printf_float+0x74>
    af64:	4bb5      	ldr	r3, [pc, #724]	; (b23c <_printf_float+0x348>)
    af66:	930a      	str	r3, [sp, #40]	; 0x28
    af68:	2303      	movs	r3, #3
    af6a:	6822      	ldr	r2, [r4, #0]
    af6c:	6123      	str	r3, [r4, #16]
    af6e:	3301      	adds	r3, #1
    af70:	439a      	bics	r2, r3
    af72:	6022      	str	r2, [r4, #0]
    af74:	e012      	b.n	af9c <_printf_float+0xa8>
    af76:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    af78:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    af7a:	f000 ffdd 	bl	bf38 <__fpclassifyd>
    af7e:	6826      	ldr	r6, [r4, #0]
    af80:	2800      	cmp	r0, #0
    af82:	d10d      	bne.n	afa0 <_printf_float+0xac>
    af84:	4bae      	ldr	r3, [pc, #696]	; (b240 <_printf_float+0x34c>)
    af86:	930a      	str	r3, [sp, #40]	; 0x28
    af88:	2f47      	cmp	r7, #71	; 0x47
    af8a:	d901      	bls.n	af90 <_printf_float+0x9c>
    af8c:	4bad      	ldr	r3, [pc, #692]	; (b244 <_printf_float+0x350>)
    af8e:	930a      	str	r3, [sp, #40]	; 0x28
    af90:	2303      	movs	r3, #3
    af92:	1c31      	adds	r1, r6, #0
    af94:	6123      	str	r3, [r4, #16]
    af96:	3301      	adds	r3, #1
    af98:	4399      	bics	r1, r3
    af9a:	6021      	str	r1, [r4, #0]
    af9c:	2600      	movs	r6, #0
    af9e:	e080      	b.n	b0a2 <_printf_float+0x1ae>
    afa0:	2180      	movs	r1, #128	; 0x80
    afa2:	6860      	ldr	r0, [r4, #4]
    afa4:	00c9      	lsls	r1, r1, #3
    afa6:	1c43      	adds	r3, r0, #1
    afa8:	d101      	bne.n	afae <_printf_float+0xba>
    afaa:	2306      	movs	r3, #6
    afac:	e009      	b.n	afc2 <_printf_float+0xce>
    afae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    afb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    afb2:	2f67      	cmp	r7, #103	; 0x67
    afb4:	d001      	beq.n	afba <_printf_float+0xc6>
    afb6:	2f47      	cmp	r7, #71	; 0x47
    afb8:	d104      	bne.n	afc4 <_printf_float+0xd0>
    afba:	2800      	cmp	r0, #0
    afbc:	d000      	beq.n	afc0 <_printf_float+0xcc>
    afbe:	e1c0      	b.n	b342 <_printf_float+0x44e>
    afc0:	2301      	movs	r3, #1
    afc2:	6063      	str	r3, [r4, #4]
    afc4:	6863      	ldr	r3, [r4, #4]
    afc6:	4331      	orrs	r1, r6
    afc8:	9300      	str	r3, [sp, #0]
    afca:	2323      	movs	r3, #35	; 0x23
    afcc:	6021      	str	r1, [r4, #0]
    afce:	9101      	str	r1, [sp, #4]
    afd0:	2100      	movs	r1, #0
    afd2:	aa06      	add	r2, sp, #24
    afd4:	189b      	adds	r3, r3, r2
    afd6:	9302      	str	r3, [sp, #8]
    afd8:	ab0f      	add	r3, sp, #60	; 0x3c
    afda:	9303      	str	r3, [sp, #12]
    afdc:	ab10      	add	r3, sp, #64	; 0x40
    afde:	9305      	str	r3, [sp, #20]
    afe0:	9704      	str	r7, [sp, #16]
    afe2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    afe4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    afe6:	9106      	str	r1, [sp, #24]
    afe8:	1c28      	adds	r0, r5, #0
    afea:	f7ff feed 	bl	adc8 <__cvt>
    afee:	2320      	movs	r3, #32
    aff0:	1c3a      	adds	r2, r7, #0
    aff2:	900a      	str	r0, [sp, #40]	; 0x28
    aff4:	439a      	bics	r2, r3
    aff6:	2a47      	cmp	r2, #71	; 0x47
    aff8:	d107      	bne.n	b00a <_printf_float+0x116>
    affa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    affc:	1cda      	adds	r2, r3, #3
    affe:	db02      	blt.n	b006 <_printf_float+0x112>
    b000:	6862      	ldr	r2, [r4, #4]
    b002:	4293      	cmp	r3, r2
    b004:	dd2d      	ble.n	b062 <_printf_float+0x16e>
    b006:	3f02      	subs	r7, #2
    b008:	b2ff      	uxtb	r7, r7
    b00a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b00c:	2f65      	cmp	r7, #101	; 0x65
    b00e:	d812      	bhi.n	b036 <_printf_float+0x142>
    b010:	1c20      	adds	r0, r4, #0
    b012:	3901      	subs	r1, #1
    b014:	1c3a      	adds	r2, r7, #0
    b016:	3050      	adds	r0, #80	; 0x50
    b018:	910f      	str	r1, [sp, #60]	; 0x3c
    b01a:	f7ff ff39 	bl	ae90 <__exponent>
    b01e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b020:	1c06      	adds	r6, r0, #0
    b022:	1883      	adds	r3, r0, r2
    b024:	6123      	str	r3, [r4, #16]
    b026:	2a01      	cmp	r2, #1
    b028:	dc02      	bgt.n	b030 <_printf_float+0x13c>
    b02a:	6822      	ldr	r2, [r4, #0]
    b02c:	07d2      	lsls	r2, r2, #31
    b02e:	d52e      	bpl.n	b08e <_printf_float+0x19a>
    b030:	3301      	adds	r3, #1
    b032:	6123      	str	r3, [r4, #16]
    b034:	e02b      	b.n	b08e <_printf_float+0x19a>
    b036:	2f66      	cmp	r7, #102	; 0x66
    b038:	d114      	bne.n	b064 <_printf_float+0x170>
    b03a:	6863      	ldr	r3, [r4, #4]
    b03c:	2900      	cmp	r1, #0
    b03e:	dd08      	ble.n	b052 <_printf_float+0x15e>
    b040:	6121      	str	r1, [r4, #16]
    b042:	2b00      	cmp	r3, #0
    b044:	d102      	bne.n	b04c <_printf_float+0x158>
    b046:	6822      	ldr	r2, [r4, #0]
    b048:	07d2      	lsls	r2, r2, #31
    b04a:	d51d      	bpl.n	b088 <_printf_float+0x194>
    b04c:	3301      	adds	r3, #1
    b04e:	18cb      	adds	r3, r1, r3
    b050:	e011      	b.n	b076 <_printf_float+0x182>
    b052:	2b00      	cmp	r3, #0
    b054:	d103      	bne.n	b05e <_printf_float+0x16a>
    b056:	2201      	movs	r2, #1
    b058:	6821      	ldr	r1, [r4, #0]
    b05a:	4211      	tst	r1, r2
    b05c:	d013      	beq.n	b086 <_printf_float+0x192>
    b05e:	1c9a      	adds	r2, r3, #2
    b060:	e011      	b.n	b086 <_printf_float+0x192>
    b062:	2767      	movs	r7, #103	; 0x67
    b064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b066:	9810      	ldr	r0, [sp, #64]	; 0x40
    b068:	4283      	cmp	r3, r0
    b06a:	db06      	blt.n	b07a <_printf_float+0x186>
    b06c:	6822      	ldr	r2, [r4, #0]
    b06e:	6123      	str	r3, [r4, #16]
    b070:	07d2      	lsls	r2, r2, #31
    b072:	d509      	bpl.n	b088 <_printf_float+0x194>
    b074:	3301      	adds	r3, #1
    b076:	6123      	str	r3, [r4, #16]
    b078:	e006      	b.n	b088 <_printf_float+0x194>
    b07a:	2201      	movs	r2, #1
    b07c:	2b00      	cmp	r3, #0
    b07e:	dc01      	bgt.n	b084 <_printf_float+0x190>
    b080:	2102      	movs	r1, #2
    b082:	1aca      	subs	r2, r1, r3
    b084:	1882      	adds	r2, r0, r2
    b086:	6122      	str	r2, [r4, #16]
    b088:	2600      	movs	r6, #0
    b08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b08c:	65a3      	str	r3, [r4, #88]	; 0x58
    b08e:	2323      	movs	r3, #35	; 0x23
    b090:	aa06      	add	r2, sp, #24
    b092:	189b      	adds	r3, r3, r2
    b094:	781b      	ldrb	r3, [r3, #0]
    b096:	2b00      	cmp	r3, #0
    b098:	d003      	beq.n	b0a2 <_printf_float+0x1ae>
    b09a:	1c23      	adds	r3, r4, #0
    b09c:	222d      	movs	r2, #45	; 0x2d
    b09e:	3343      	adds	r3, #67	; 0x43
    b0a0:	701a      	strb	r2, [r3, #0]
    b0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0a4:	1c28      	adds	r0, r5, #0
    b0a6:	9300      	str	r3, [sp, #0]
    b0a8:	1c21      	adds	r1, r4, #0
    b0aa:	9b08      	ldr	r3, [sp, #32]
    b0ac:	aa11      	add	r2, sp, #68	; 0x44
    b0ae:	f000 f95f 	bl	b370 <_printf_common>
    b0b2:	1c43      	adds	r3, r0, #1
    b0b4:	d102      	bne.n	b0bc <_printf_float+0x1c8>
    b0b6:	2001      	movs	r0, #1
    b0b8:	4240      	negs	r0, r0
    b0ba:	e156      	b.n	b36a <_printf_float+0x476>
    b0bc:	6822      	ldr	r2, [r4, #0]
    b0be:	0553      	lsls	r3, r2, #21
    b0c0:	d404      	bmi.n	b0cc <_printf_float+0x1d8>
    b0c2:	1c28      	adds	r0, r5, #0
    b0c4:	9908      	ldr	r1, [sp, #32]
    b0c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b0c8:	6923      	ldr	r3, [r4, #16]
    b0ca:	e116      	b.n	b2fa <_printf_float+0x406>
    b0cc:	2f65      	cmp	r7, #101	; 0x65
    b0ce:	d800      	bhi.n	b0d2 <_printf_float+0x1de>
    b0d0:	e0d4      	b.n	b27c <_printf_float+0x388>
    b0d2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    b0d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b0d6:	2200      	movs	r2, #0
    b0d8:	2300      	movs	r3, #0
    b0da:	f7fc f9a5 	bl	7428 <__aeabi_dcmpeq>
    b0de:	2800      	cmp	r0, #0
    b0e0:	d02b      	beq.n	b13a <_printf_float+0x246>
    b0e2:	2301      	movs	r3, #1
    b0e4:	1c28      	adds	r0, r5, #0
    b0e6:	9908      	ldr	r1, [sp, #32]
    b0e8:	4a57      	ldr	r2, [pc, #348]	; (b248 <_printf_float+0x354>)
    b0ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b0ec:	47b0      	blx	r6
    b0ee:	1c43      	adds	r3, r0, #1
    b0f0:	d0e1      	beq.n	b0b6 <_printf_float+0x1c2>
    b0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b0f6:	4293      	cmp	r3, r2
    b0f8:	db07      	blt.n	b10a <_printf_float+0x216>
    b0fa:	6823      	ldr	r3, [r4, #0]
    b0fc:	07db      	lsls	r3, r3, #31
    b0fe:	d404      	bmi.n	b10a <_printf_float+0x216>
    b100:	6823      	ldr	r3, [r4, #0]
    b102:	079b      	lsls	r3, r3, #30
    b104:	d500      	bpl.n	b108 <_printf_float+0x214>
    b106:	e11a      	b.n	b33e <_printf_float+0x44a>
    b108:	e113      	b.n	b332 <_printf_float+0x43e>
    b10a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b10c:	1c28      	adds	r0, r5, #0
    b10e:	9908      	ldr	r1, [sp, #32]
    b110:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b114:	47b0      	blx	r6
    b116:	2600      	movs	r6, #0
    b118:	1c43      	adds	r3, r0, #1
    b11a:	d0cc      	beq.n	b0b6 <_printf_float+0x1c2>
    b11c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b11e:	3b01      	subs	r3, #1
    b120:	429e      	cmp	r6, r3
    b122:	daed      	bge.n	b100 <_printf_float+0x20c>
    b124:	1c22      	adds	r2, r4, #0
    b126:	2301      	movs	r3, #1
    b128:	1c28      	adds	r0, r5, #0
    b12a:	9908      	ldr	r1, [sp, #32]
    b12c:	321a      	adds	r2, #26
    b12e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b130:	47b8      	blx	r7
    b132:	1c43      	adds	r3, r0, #1
    b134:	d0bf      	beq.n	b0b6 <_printf_float+0x1c2>
    b136:	3601      	adds	r6, #1
    b138:	e7f0      	b.n	b11c <_printf_float+0x228>
    b13a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b13c:	2b00      	cmp	r3, #0
    b13e:	dc2b      	bgt.n	b198 <_printf_float+0x2a4>
    b140:	2301      	movs	r3, #1
    b142:	1c28      	adds	r0, r5, #0
    b144:	9908      	ldr	r1, [sp, #32]
    b146:	4a40      	ldr	r2, [pc, #256]	; (b248 <_printf_float+0x354>)
    b148:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b14a:	47b0      	blx	r6
    b14c:	1c43      	adds	r3, r0, #1
    b14e:	d0b2      	beq.n	b0b6 <_printf_float+0x1c2>
    b150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b152:	2b00      	cmp	r3, #0
    b154:	d105      	bne.n	b162 <_printf_float+0x26e>
    b156:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b158:	2b00      	cmp	r3, #0
    b15a:	d102      	bne.n	b162 <_printf_float+0x26e>
    b15c:	6823      	ldr	r3, [r4, #0]
    b15e:	07db      	lsls	r3, r3, #31
    b160:	d5ce      	bpl.n	b100 <_printf_float+0x20c>
    b162:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b164:	1c28      	adds	r0, r5, #0
    b166:	9908      	ldr	r1, [sp, #32]
    b168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b16a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b16c:	47b0      	blx	r6
    b16e:	2600      	movs	r6, #0
    b170:	1c43      	adds	r3, r0, #1
    b172:	d0a0      	beq.n	b0b6 <_printf_float+0x1c2>
    b174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b176:	1c28      	adds	r0, r5, #0
    b178:	425b      	negs	r3, r3
    b17a:	9908      	ldr	r1, [sp, #32]
    b17c:	429e      	cmp	r6, r3
    b17e:	da08      	bge.n	b192 <_printf_float+0x29e>
    b180:	1c22      	adds	r2, r4, #0
    b182:	2301      	movs	r3, #1
    b184:	321a      	adds	r2, #26
    b186:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b188:	47b8      	blx	r7
    b18a:	1c43      	adds	r3, r0, #1
    b18c:	d093      	beq.n	b0b6 <_printf_float+0x1c2>
    b18e:	3601      	adds	r6, #1
    b190:	e7f0      	b.n	b174 <_printf_float+0x280>
    b192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b194:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b196:	e0b0      	b.n	b2fa <_printf_float+0x406>
    b198:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b19a:	6da6      	ldr	r6, [r4, #88]	; 0x58
    b19c:	429e      	cmp	r6, r3
    b19e:	dd00      	ble.n	b1a2 <_printf_float+0x2ae>
    b1a0:	1c1e      	adds	r6, r3, #0
    b1a2:	2e00      	cmp	r6, #0
    b1a4:	dc01      	bgt.n	b1aa <_printf_float+0x2b6>
    b1a6:	2300      	movs	r3, #0
    b1a8:	e014      	b.n	b1d4 <_printf_float+0x2e0>
    b1aa:	1c33      	adds	r3, r6, #0
    b1ac:	1c28      	adds	r0, r5, #0
    b1ae:	9908      	ldr	r1, [sp, #32]
    b1b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b1b4:	47b8      	blx	r7
    b1b6:	1c43      	adds	r3, r0, #1
    b1b8:	d1f5      	bne.n	b1a6 <_printf_float+0x2b2>
    b1ba:	e77c      	b.n	b0b6 <_printf_float+0x1c2>
    b1bc:	1c22      	adds	r2, r4, #0
    b1be:	2301      	movs	r3, #1
    b1c0:	1c28      	adds	r0, r5, #0
    b1c2:	9908      	ldr	r1, [sp, #32]
    b1c4:	321a      	adds	r2, #26
    b1c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b1c8:	47b8      	blx	r7
    b1ca:	1c43      	adds	r3, r0, #1
    b1cc:	d100      	bne.n	b1d0 <_printf_float+0x2dc>
    b1ce:	e772      	b.n	b0b6 <_printf_float+0x1c2>
    b1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b1d2:	3301      	adds	r3, #1
    b1d4:	930d      	str	r3, [sp, #52]	; 0x34
    b1d6:	43f3      	mvns	r3, r6
    b1d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
    b1da:	17db      	asrs	r3, r3, #31
    b1dc:	990d      	ldr	r1, [sp, #52]	; 0x34
    b1de:	4033      	ands	r3, r6
    b1e0:	1ad3      	subs	r3, r2, r3
    b1e2:	4299      	cmp	r1, r3
    b1e4:	dbea      	blt.n	b1bc <_printf_float+0x2c8>
    b1e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1e8:	189e      	adds	r6, r3, r2
    b1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b1ee:	4293      	cmp	r3, r2
    b1f0:	db0e      	blt.n	b210 <_printf_float+0x31c>
    b1f2:	6823      	ldr	r3, [r4, #0]
    b1f4:	07db      	lsls	r3, r3, #31
    b1f6:	d40b      	bmi.n	b210 <_printf_float+0x31c>
    b1f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b1fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1fc:	18d7      	adds	r7, r2, r3
    b1fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b200:	1bbf      	subs	r7, r7, r6
    b202:	1a9b      	subs	r3, r3, r2
    b204:	429f      	cmp	r7, r3
    b206:	dd00      	ble.n	b20a <_printf_float+0x316>
    b208:	1c1f      	adds	r7, r3, #0
    b20a:	2f00      	cmp	r7, #0
    b20c:	dc09      	bgt.n	b222 <_printf_float+0x32e>
    b20e:	e011      	b.n	b234 <_printf_float+0x340>
    b210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b212:	1c28      	adds	r0, r5, #0
    b214:	9908      	ldr	r1, [sp, #32]
    b216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b218:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b21a:	47b8      	blx	r7
    b21c:	1c43      	adds	r3, r0, #1
    b21e:	d1eb      	bne.n	b1f8 <_printf_float+0x304>
    b220:	e749      	b.n	b0b6 <_printf_float+0x1c2>
    b222:	1c32      	adds	r2, r6, #0
    b224:	1c3b      	adds	r3, r7, #0
    b226:	1c28      	adds	r0, r5, #0
    b228:	9908      	ldr	r1, [sp, #32]
    b22a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b22c:	47b0      	blx	r6
    b22e:	1c43      	adds	r3, r0, #1
    b230:	d100      	bne.n	b234 <_printf_float+0x340>
    b232:	e740      	b.n	b0b6 <_printf_float+0x1c2>
    b234:	2300      	movs	r3, #0
    b236:	e015      	b.n	b264 <_printf_float+0x370>
    b238:	000109b9 	.word	0x000109b9
    b23c:	000109bd 	.word	0x000109bd
    b240:	000109c1 	.word	0x000109c1
    b244:	000109c5 	.word	0x000109c5
    b248:	00010a12 	.word	0x00010a12
    b24c:	1c22      	adds	r2, r4, #0
    b24e:	2301      	movs	r3, #1
    b250:	1c28      	adds	r0, r5, #0
    b252:	9908      	ldr	r1, [sp, #32]
    b254:	321a      	adds	r2, #26
    b256:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b258:	47b0      	blx	r6
    b25a:	1c43      	adds	r3, r0, #1
    b25c:	d100      	bne.n	b260 <_printf_float+0x36c>
    b25e:	e72a      	b.n	b0b6 <_printf_float+0x1c2>
    b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b262:	3301      	adds	r3, #1
    b264:	930a      	str	r3, [sp, #40]	; 0x28
    b266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b268:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b26a:	1a9a      	subs	r2, r3, r2
    b26c:	43fb      	mvns	r3, r7
    b26e:	17db      	asrs	r3, r3, #31
    b270:	403b      	ands	r3, r7
    b272:	1ad3      	subs	r3, r2, r3
    b274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b276:	429a      	cmp	r2, r3
    b278:	dbe8      	blt.n	b24c <_printf_float+0x358>
    b27a:	e741      	b.n	b100 <_printf_float+0x20c>
    b27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b27e:	1c28      	adds	r0, r5, #0
    b280:	9908      	ldr	r1, [sp, #32]
    b282:	2b01      	cmp	r3, #1
    b284:	dc02      	bgt.n	b28c <_printf_float+0x398>
    b286:	2301      	movs	r3, #1
    b288:	421a      	tst	r2, r3
    b28a:	d03c      	beq.n	b306 <_printf_float+0x412>
    b28c:	2301      	movs	r3, #1
    b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b290:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b292:	47b8      	blx	r7
    b294:	1c43      	adds	r3, r0, #1
    b296:	d100      	bne.n	b29a <_printf_float+0x3a6>
    b298:	e70d      	b.n	b0b6 <_printf_float+0x1c2>
    b29a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b29c:	1c28      	adds	r0, r5, #0
    b29e:	9908      	ldr	r1, [sp, #32]
    b2a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b2a4:	47b8      	blx	r7
    b2a6:	1c43      	adds	r3, r0, #1
    b2a8:	d100      	bne.n	b2ac <_printf_float+0x3b8>
    b2aa:	e704      	b.n	b0b6 <_printf_float+0x1c2>
    b2ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    b2ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    b2b0:	2300      	movs	r3, #0
    b2b2:	2200      	movs	r2, #0
    b2b4:	f7fc f8b8 	bl	7428 <__aeabi_dcmpeq>
    b2b8:	2300      	movs	r3, #0
    b2ba:	2800      	cmp	r0, #0
    b2bc:	d112      	bne.n	b2e4 <_printf_float+0x3f0>
    b2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b2c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2c2:	3201      	adds	r2, #1
    b2c4:	3b01      	subs	r3, #1
    b2c6:	1c28      	adds	r0, r5, #0
    b2c8:	9908      	ldr	r1, [sp, #32]
    b2ca:	e01d      	b.n	b308 <_printf_float+0x414>
    b2cc:	1c22      	adds	r2, r4, #0
    b2ce:	2301      	movs	r3, #1
    b2d0:	1c28      	adds	r0, r5, #0
    b2d2:	9908      	ldr	r1, [sp, #32]
    b2d4:	321a      	adds	r2, #26
    b2d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b2d8:	47b8      	blx	r7
    b2da:	1c43      	adds	r3, r0, #1
    b2dc:	d100      	bne.n	b2e0 <_printf_float+0x3ec>
    b2de:	e6ea      	b.n	b0b6 <_printf_float+0x1c2>
    b2e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2e2:	3301      	adds	r3, #1
    b2e4:	930a      	str	r3, [sp, #40]	; 0x28
    b2e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b2e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b2ea:	3b01      	subs	r3, #1
    b2ec:	429a      	cmp	r2, r3
    b2ee:	dbed      	blt.n	b2cc <_printf_float+0x3d8>
    b2f0:	1c22      	adds	r2, r4, #0
    b2f2:	1c28      	adds	r0, r5, #0
    b2f4:	1c33      	adds	r3, r6, #0
    b2f6:	9908      	ldr	r1, [sp, #32]
    b2f8:	3250      	adds	r2, #80	; 0x50
    b2fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b2fc:	47b0      	blx	r6
    b2fe:	1c43      	adds	r3, r0, #1
    b300:	d000      	beq.n	b304 <_printf_float+0x410>
    b302:	e6fd      	b.n	b100 <_printf_float+0x20c>
    b304:	e6d7      	b.n	b0b6 <_printf_float+0x1c2>
    b306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b308:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b30a:	47b8      	blx	r7
    b30c:	1c43      	adds	r3, r0, #1
    b30e:	d1ef      	bne.n	b2f0 <_printf_float+0x3fc>
    b310:	e6d1      	b.n	b0b6 <_printf_float+0x1c2>
    b312:	1c22      	adds	r2, r4, #0
    b314:	2301      	movs	r3, #1
    b316:	1c28      	adds	r0, r5, #0
    b318:	9908      	ldr	r1, [sp, #32]
    b31a:	3219      	adds	r2, #25
    b31c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b31e:	47b8      	blx	r7
    b320:	1c43      	adds	r3, r0, #1
    b322:	d100      	bne.n	b326 <_printf_float+0x432>
    b324:	e6c7      	b.n	b0b6 <_printf_float+0x1c2>
    b326:	3601      	adds	r6, #1
    b328:	68e3      	ldr	r3, [r4, #12]
    b32a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b32c:	1a9b      	subs	r3, r3, r2
    b32e:	429e      	cmp	r6, r3
    b330:	dbef      	blt.n	b312 <_printf_float+0x41e>
    b332:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b334:	68e0      	ldr	r0, [r4, #12]
    b336:	4298      	cmp	r0, r3
    b338:	da17      	bge.n	b36a <_printf_float+0x476>
    b33a:	1c18      	adds	r0, r3, #0
    b33c:	e015      	b.n	b36a <_printf_float+0x476>
    b33e:	2600      	movs	r6, #0
    b340:	e7f2      	b.n	b328 <_printf_float+0x434>
    b342:	4331      	orrs	r1, r6
    b344:	6021      	str	r1, [r4, #0]
    b346:	9101      	str	r1, [sp, #4]
    b348:	2123      	movs	r1, #35	; 0x23
    b34a:	9000      	str	r0, [sp, #0]
    b34c:	a806      	add	r0, sp, #24
    b34e:	1809      	adds	r1, r1, r0
    b350:	9102      	str	r1, [sp, #8]
    b352:	a90f      	add	r1, sp, #60	; 0x3c
    b354:	9103      	str	r1, [sp, #12]
    b356:	a910      	add	r1, sp, #64	; 0x40
    b358:	9105      	str	r1, [sp, #20]
    b35a:	2100      	movs	r1, #0
    b35c:	9704      	str	r7, [sp, #16]
    b35e:	9106      	str	r1, [sp, #24]
    b360:	1c28      	adds	r0, r5, #0
    b362:	f7ff fd31 	bl	adc8 <__cvt>
    b366:	900a      	str	r0, [sp, #40]	; 0x28
    b368:	e647      	b.n	affa <_printf_float+0x106>
    b36a:	b013      	add	sp, #76	; 0x4c
    b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b36e:	46c0      	nop			; (mov r8, r8)

0000b370 <_printf_common>:
    b370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b372:	1c17      	adds	r7, r2, #0
    b374:	9301      	str	r3, [sp, #4]
    b376:	690a      	ldr	r2, [r1, #16]
    b378:	688b      	ldr	r3, [r1, #8]
    b37a:	9000      	str	r0, [sp, #0]
    b37c:	1c0c      	adds	r4, r1, #0
    b37e:	4293      	cmp	r3, r2
    b380:	da00      	bge.n	b384 <_printf_common+0x14>
    b382:	1c13      	adds	r3, r2, #0
    b384:	1c22      	adds	r2, r4, #0
    b386:	603b      	str	r3, [r7, #0]
    b388:	3243      	adds	r2, #67	; 0x43
    b38a:	7812      	ldrb	r2, [r2, #0]
    b38c:	2a00      	cmp	r2, #0
    b38e:	d001      	beq.n	b394 <_printf_common+0x24>
    b390:	3301      	adds	r3, #1
    b392:	603b      	str	r3, [r7, #0]
    b394:	6823      	ldr	r3, [r4, #0]
    b396:	069b      	lsls	r3, r3, #26
    b398:	d502      	bpl.n	b3a0 <_printf_common+0x30>
    b39a:	683b      	ldr	r3, [r7, #0]
    b39c:	3302      	adds	r3, #2
    b39e:	603b      	str	r3, [r7, #0]
    b3a0:	2506      	movs	r5, #6
    b3a2:	6823      	ldr	r3, [r4, #0]
    b3a4:	401d      	ands	r5, r3
    b3a6:	d01e      	beq.n	b3e6 <_printf_common+0x76>
    b3a8:	1c23      	adds	r3, r4, #0
    b3aa:	3343      	adds	r3, #67	; 0x43
    b3ac:	781b      	ldrb	r3, [r3, #0]
    b3ae:	1e5a      	subs	r2, r3, #1
    b3b0:	4193      	sbcs	r3, r2
    b3b2:	6822      	ldr	r2, [r4, #0]
    b3b4:	0692      	lsls	r2, r2, #26
    b3b6:	d51c      	bpl.n	b3f2 <_printf_common+0x82>
    b3b8:	2030      	movs	r0, #48	; 0x30
    b3ba:	18e1      	adds	r1, r4, r3
    b3bc:	3140      	adds	r1, #64	; 0x40
    b3be:	70c8      	strb	r0, [r1, #3]
    b3c0:	1c21      	adds	r1, r4, #0
    b3c2:	1c5a      	adds	r2, r3, #1
    b3c4:	3145      	adds	r1, #69	; 0x45
    b3c6:	7809      	ldrb	r1, [r1, #0]
    b3c8:	18a2      	adds	r2, r4, r2
    b3ca:	3240      	adds	r2, #64	; 0x40
    b3cc:	3302      	adds	r3, #2
    b3ce:	70d1      	strb	r1, [r2, #3]
    b3d0:	e00f      	b.n	b3f2 <_printf_common+0x82>
    b3d2:	1c22      	adds	r2, r4, #0
    b3d4:	2301      	movs	r3, #1
    b3d6:	9800      	ldr	r0, [sp, #0]
    b3d8:	9901      	ldr	r1, [sp, #4]
    b3da:	3219      	adds	r2, #25
    b3dc:	9e08      	ldr	r6, [sp, #32]
    b3de:	47b0      	blx	r6
    b3e0:	1c43      	adds	r3, r0, #1
    b3e2:	d00e      	beq.n	b402 <_printf_common+0x92>
    b3e4:	3501      	adds	r5, #1
    b3e6:	68e3      	ldr	r3, [r4, #12]
    b3e8:	683a      	ldr	r2, [r7, #0]
    b3ea:	1a9b      	subs	r3, r3, r2
    b3ec:	429d      	cmp	r5, r3
    b3ee:	dbf0      	blt.n	b3d2 <_printf_common+0x62>
    b3f0:	e7da      	b.n	b3a8 <_printf_common+0x38>
    b3f2:	1c22      	adds	r2, r4, #0
    b3f4:	9800      	ldr	r0, [sp, #0]
    b3f6:	9901      	ldr	r1, [sp, #4]
    b3f8:	3243      	adds	r2, #67	; 0x43
    b3fa:	9d08      	ldr	r5, [sp, #32]
    b3fc:	47a8      	blx	r5
    b3fe:	1c43      	adds	r3, r0, #1
    b400:	d102      	bne.n	b408 <_printf_common+0x98>
    b402:	2001      	movs	r0, #1
    b404:	4240      	negs	r0, r0
    b406:	e020      	b.n	b44a <_printf_common+0xda>
    b408:	2306      	movs	r3, #6
    b40a:	6820      	ldr	r0, [r4, #0]
    b40c:	68e1      	ldr	r1, [r4, #12]
    b40e:	683a      	ldr	r2, [r7, #0]
    b410:	4003      	ands	r3, r0
    b412:	2500      	movs	r5, #0
    b414:	2b04      	cmp	r3, #4
    b416:	d103      	bne.n	b420 <_printf_common+0xb0>
    b418:	1a8d      	subs	r5, r1, r2
    b41a:	43eb      	mvns	r3, r5
    b41c:	17db      	asrs	r3, r3, #31
    b41e:	401d      	ands	r5, r3
    b420:	68a3      	ldr	r3, [r4, #8]
    b422:	6922      	ldr	r2, [r4, #16]
    b424:	4293      	cmp	r3, r2
    b426:	dd01      	ble.n	b42c <_printf_common+0xbc>
    b428:	1a9b      	subs	r3, r3, r2
    b42a:	18ed      	adds	r5, r5, r3
    b42c:	2700      	movs	r7, #0
    b42e:	42af      	cmp	r7, r5
    b430:	da0a      	bge.n	b448 <_printf_common+0xd8>
    b432:	1c22      	adds	r2, r4, #0
    b434:	2301      	movs	r3, #1
    b436:	9800      	ldr	r0, [sp, #0]
    b438:	9901      	ldr	r1, [sp, #4]
    b43a:	321a      	adds	r2, #26
    b43c:	9e08      	ldr	r6, [sp, #32]
    b43e:	47b0      	blx	r6
    b440:	1c43      	adds	r3, r0, #1
    b442:	d0de      	beq.n	b402 <_printf_common+0x92>
    b444:	3701      	adds	r7, #1
    b446:	e7f2      	b.n	b42e <_printf_common+0xbe>
    b448:	2000      	movs	r0, #0
    b44a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000b44c <_printf_i>:
    b44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b44e:	b08b      	sub	sp, #44	; 0x2c
    b450:	9206      	str	r2, [sp, #24]
    b452:	1c0a      	adds	r2, r1, #0
    b454:	3243      	adds	r2, #67	; 0x43
    b456:	9307      	str	r3, [sp, #28]
    b458:	9005      	str	r0, [sp, #20]
    b45a:	9204      	str	r2, [sp, #16]
    b45c:	7e0a      	ldrb	r2, [r1, #24]
    b45e:	1c0c      	adds	r4, r1, #0
    b460:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b462:	2a6e      	cmp	r2, #110	; 0x6e
    b464:	d100      	bne.n	b468 <_printf_i+0x1c>
    b466:	e0a8      	b.n	b5ba <_printf_i+0x16e>
    b468:	d811      	bhi.n	b48e <_printf_i+0x42>
    b46a:	2a63      	cmp	r2, #99	; 0x63
    b46c:	d022      	beq.n	b4b4 <_printf_i+0x68>
    b46e:	d809      	bhi.n	b484 <_printf_i+0x38>
    b470:	2a00      	cmp	r2, #0
    b472:	d100      	bne.n	b476 <_printf_i+0x2a>
    b474:	e0b2      	b.n	b5dc <_printf_i+0x190>
    b476:	2a58      	cmp	r2, #88	; 0x58
    b478:	d000      	beq.n	b47c <_printf_i+0x30>
    b47a:	e0c2      	b.n	b602 <_printf_i+0x1b6>
    b47c:	3145      	adds	r1, #69	; 0x45
    b47e:	700a      	strb	r2, [r1, #0]
    b480:	4a7c      	ldr	r2, [pc, #496]	; (b674 <_printf_i+0x228>)
    b482:	e04f      	b.n	b524 <_printf_i+0xd8>
    b484:	2a64      	cmp	r2, #100	; 0x64
    b486:	d01d      	beq.n	b4c4 <_printf_i+0x78>
    b488:	2a69      	cmp	r2, #105	; 0x69
    b48a:	d01b      	beq.n	b4c4 <_printf_i+0x78>
    b48c:	e0b9      	b.n	b602 <_printf_i+0x1b6>
    b48e:	2a73      	cmp	r2, #115	; 0x73
    b490:	d100      	bne.n	b494 <_printf_i+0x48>
    b492:	e0a7      	b.n	b5e4 <_printf_i+0x198>
    b494:	d809      	bhi.n	b4aa <_printf_i+0x5e>
    b496:	2a6f      	cmp	r2, #111	; 0x6f
    b498:	d029      	beq.n	b4ee <_printf_i+0xa2>
    b49a:	2a70      	cmp	r2, #112	; 0x70
    b49c:	d000      	beq.n	b4a0 <_printf_i+0x54>
    b49e:	e0b0      	b.n	b602 <_printf_i+0x1b6>
    b4a0:	2220      	movs	r2, #32
    b4a2:	6809      	ldr	r1, [r1, #0]
    b4a4:	430a      	orrs	r2, r1
    b4a6:	6022      	str	r2, [r4, #0]
    b4a8:	e037      	b.n	b51a <_printf_i+0xce>
    b4aa:	2a75      	cmp	r2, #117	; 0x75
    b4ac:	d01f      	beq.n	b4ee <_printf_i+0xa2>
    b4ae:	2a78      	cmp	r2, #120	; 0x78
    b4b0:	d033      	beq.n	b51a <_printf_i+0xce>
    b4b2:	e0a6      	b.n	b602 <_printf_i+0x1b6>
    b4b4:	1c0e      	adds	r6, r1, #0
    b4b6:	681a      	ldr	r2, [r3, #0]
    b4b8:	3642      	adds	r6, #66	; 0x42
    b4ba:	1d11      	adds	r1, r2, #4
    b4bc:	6019      	str	r1, [r3, #0]
    b4be:	6813      	ldr	r3, [r2, #0]
    b4c0:	7033      	strb	r3, [r6, #0]
    b4c2:	e0a1      	b.n	b608 <_printf_i+0x1bc>
    b4c4:	6821      	ldr	r1, [r4, #0]
    b4c6:	681a      	ldr	r2, [r3, #0]
    b4c8:	0608      	lsls	r0, r1, #24
    b4ca:	d406      	bmi.n	b4da <_printf_i+0x8e>
    b4cc:	0649      	lsls	r1, r1, #25
    b4ce:	d504      	bpl.n	b4da <_printf_i+0x8e>
    b4d0:	1d11      	adds	r1, r2, #4
    b4d2:	6019      	str	r1, [r3, #0]
    b4d4:	2300      	movs	r3, #0
    b4d6:	5ed5      	ldrsh	r5, [r2, r3]
    b4d8:	e002      	b.n	b4e0 <_printf_i+0x94>
    b4da:	1d11      	adds	r1, r2, #4
    b4dc:	6019      	str	r1, [r3, #0]
    b4de:	6815      	ldr	r5, [r2, #0]
    b4e0:	2d00      	cmp	r5, #0
    b4e2:	da3b      	bge.n	b55c <_printf_i+0x110>
    b4e4:	232d      	movs	r3, #45	; 0x2d
    b4e6:	9a04      	ldr	r2, [sp, #16]
    b4e8:	426d      	negs	r5, r5
    b4ea:	7013      	strb	r3, [r2, #0]
    b4ec:	e036      	b.n	b55c <_printf_i+0x110>
    b4ee:	6821      	ldr	r1, [r4, #0]
    b4f0:	681a      	ldr	r2, [r3, #0]
    b4f2:	0608      	lsls	r0, r1, #24
    b4f4:	d406      	bmi.n	b504 <_printf_i+0xb8>
    b4f6:	0649      	lsls	r1, r1, #25
    b4f8:	d504      	bpl.n	b504 <_printf_i+0xb8>
    b4fa:	6815      	ldr	r5, [r2, #0]
    b4fc:	1d11      	adds	r1, r2, #4
    b4fe:	6019      	str	r1, [r3, #0]
    b500:	b2ad      	uxth	r5, r5
    b502:	e002      	b.n	b50a <_printf_i+0xbe>
    b504:	1d11      	adds	r1, r2, #4
    b506:	6019      	str	r1, [r3, #0]
    b508:	6815      	ldr	r5, [r2, #0]
    b50a:	4b5a      	ldr	r3, [pc, #360]	; (b674 <_printf_i+0x228>)
    b50c:	7e22      	ldrb	r2, [r4, #24]
    b50e:	9303      	str	r3, [sp, #12]
    b510:	270a      	movs	r7, #10
    b512:	2a6f      	cmp	r2, #111	; 0x6f
    b514:	d11d      	bne.n	b552 <_printf_i+0x106>
    b516:	2708      	movs	r7, #8
    b518:	e01b      	b.n	b552 <_printf_i+0x106>
    b51a:	1c22      	adds	r2, r4, #0
    b51c:	2178      	movs	r1, #120	; 0x78
    b51e:	3245      	adds	r2, #69	; 0x45
    b520:	7011      	strb	r1, [r2, #0]
    b522:	4a55      	ldr	r2, [pc, #340]	; (b678 <_printf_i+0x22c>)
    b524:	6819      	ldr	r1, [r3, #0]
    b526:	9203      	str	r2, [sp, #12]
    b528:	1d08      	adds	r0, r1, #4
    b52a:	6822      	ldr	r2, [r4, #0]
    b52c:	6018      	str	r0, [r3, #0]
    b52e:	680d      	ldr	r5, [r1, #0]
    b530:	0610      	lsls	r0, r2, #24
    b532:	d402      	bmi.n	b53a <_printf_i+0xee>
    b534:	0650      	lsls	r0, r2, #25
    b536:	d500      	bpl.n	b53a <_printf_i+0xee>
    b538:	b2ad      	uxth	r5, r5
    b53a:	07d3      	lsls	r3, r2, #31
    b53c:	d502      	bpl.n	b544 <_printf_i+0xf8>
    b53e:	2320      	movs	r3, #32
    b540:	431a      	orrs	r2, r3
    b542:	6022      	str	r2, [r4, #0]
    b544:	2710      	movs	r7, #16
    b546:	2d00      	cmp	r5, #0
    b548:	d103      	bne.n	b552 <_printf_i+0x106>
    b54a:	2320      	movs	r3, #32
    b54c:	6822      	ldr	r2, [r4, #0]
    b54e:	439a      	bics	r2, r3
    b550:	6022      	str	r2, [r4, #0]
    b552:	1c23      	adds	r3, r4, #0
    b554:	2200      	movs	r2, #0
    b556:	3343      	adds	r3, #67	; 0x43
    b558:	701a      	strb	r2, [r3, #0]
    b55a:	e002      	b.n	b562 <_printf_i+0x116>
    b55c:	270a      	movs	r7, #10
    b55e:	4b45      	ldr	r3, [pc, #276]	; (b674 <_printf_i+0x228>)
    b560:	9303      	str	r3, [sp, #12]
    b562:	6863      	ldr	r3, [r4, #4]
    b564:	60a3      	str	r3, [r4, #8]
    b566:	2b00      	cmp	r3, #0
    b568:	db03      	blt.n	b572 <_printf_i+0x126>
    b56a:	2204      	movs	r2, #4
    b56c:	6821      	ldr	r1, [r4, #0]
    b56e:	4391      	bics	r1, r2
    b570:	6021      	str	r1, [r4, #0]
    b572:	2d00      	cmp	r5, #0
    b574:	d102      	bne.n	b57c <_printf_i+0x130>
    b576:	9e04      	ldr	r6, [sp, #16]
    b578:	2b00      	cmp	r3, #0
    b57a:	d00e      	beq.n	b59a <_printf_i+0x14e>
    b57c:	9e04      	ldr	r6, [sp, #16]
    b57e:	1c28      	adds	r0, r5, #0
    b580:	1c39      	adds	r1, r7, #0
    b582:	f7fb fe45 	bl	7210 <__aeabi_uidivmod>
    b586:	9b03      	ldr	r3, [sp, #12]
    b588:	3e01      	subs	r6, #1
    b58a:	5c5b      	ldrb	r3, [r3, r1]
    b58c:	1c28      	adds	r0, r5, #0
    b58e:	7033      	strb	r3, [r6, #0]
    b590:	1c39      	adds	r1, r7, #0
    b592:	f7fb fdb7 	bl	7104 <__aeabi_uidiv>
    b596:	1e05      	subs	r5, r0, #0
    b598:	d1f1      	bne.n	b57e <_printf_i+0x132>
    b59a:	2f08      	cmp	r7, #8
    b59c:	d109      	bne.n	b5b2 <_printf_i+0x166>
    b59e:	6823      	ldr	r3, [r4, #0]
    b5a0:	07db      	lsls	r3, r3, #31
    b5a2:	d506      	bpl.n	b5b2 <_printf_i+0x166>
    b5a4:	6863      	ldr	r3, [r4, #4]
    b5a6:	6922      	ldr	r2, [r4, #16]
    b5a8:	4293      	cmp	r3, r2
    b5aa:	dc02      	bgt.n	b5b2 <_printf_i+0x166>
    b5ac:	2330      	movs	r3, #48	; 0x30
    b5ae:	3e01      	subs	r6, #1
    b5b0:	7033      	strb	r3, [r6, #0]
    b5b2:	9b04      	ldr	r3, [sp, #16]
    b5b4:	1b9b      	subs	r3, r3, r6
    b5b6:	6123      	str	r3, [r4, #16]
    b5b8:	e02b      	b.n	b612 <_printf_i+0x1c6>
    b5ba:	6809      	ldr	r1, [r1, #0]
    b5bc:	681a      	ldr	r2, [r3, #0]
    b5be:	0608      	lsls	r0, r1, #24
    b5c0:	d407      	bmi.n	b5d2 <_printf_i+0x186>
    b5c2:	0649      	lsls	r1, r1, #25
    b5c4:	d505      	bpl.n	b5d2 <_printf_i+0x186>
    b5c6:	1d11      	adds	r1, r2, #4
    b5c8:	6019      	str	r1, [r3, #0]
    b5ca:	6813      	ldr	r3, [r2, #0]
    b5cc:	8aa2      	ldrh	r2, [r4, #20]
    b5ce:	801a      	strh	r2, [r3, #0]
    b5d0:	e004      	b.n	b5dc <_printf_i+0x190>
    b5d2:	1d11      	adds	r1, r2, #4
    b5d4:	6019      	str	r1, [r3, #0]
    b5d6:	6813      	ldr	r3, [r2, #0]
    b5d8:	6962      	ldr	r2, [r4, #20]
    b5da:	601a      	str	r2, [r3, #0]
    b5dc:	2300      	movs	r3, #0
    b5de:	9e04      	ldr	r6, [sp, #16]
    b5e0:	6123      	str	r3, [r4, #16]
    b5e2:	e016      	b.n	b612 <_printf_i+0x1c6>
    b5e4:	681a      	ldr	r2, [r3, #0]
    b5e6:	1d11      	adds	r1, r2, #4
    b5e8:	6019      	str	r1, [r3, #0]
    b5ea:	6816      	ldr	r6, [r2, #0]
    b5ec:	2100      	movs	r1, #0
    b5ee:	1c30      	adds	r0, r6, #0
    b5f0:	6862      	ldr	r2, [r4, #4]
    b5f2:	f7ff f9e9 	bl	a9c8 <memchr>
    b5f6:	2800      	cmp	r0, #0
    b5f8:	d001      	beq.n	b5fe <_printf_i+0x1b2>
    b5fa:	1b80      	subs	r0, r0, r6
    b5fc:	6060      	str	r0, [r4, #4]
    b5fe:	6863      	ldr	r3, [r4, #4]
    b600:	e003      	b.n	b60a <_printf_i+0x1be>
    b602:	1c26      	adds	r6, r4, #0
    b604:	3642      	adds	r6, #66	; 0x42
    b606:	7032      	strb	r2, [r6, #0]
    b608:	2301      	movs	r3, #1
    b60a:	6123      	str	r3, [r4, #16]
    b60c:	2300      	movs	r3, #0
    b60e:	9a04      	ldr	r2, [sp, #16]
    b610:	7013      	strb	r3, [r2, #0]
    b612:	9b07      	ldr	r3, [sp, #28]
    b614:	9805      	ldr	r0, [sp, #20]
    b616:	9300      	str	r3, [sp, #0]
    b618:	1c21      	adds	r1, r4, #0
    b61a:	9b06      	ldr	r3, [sp, #24]
    b61c:	aa09      	add	r2, sp, #36	; 0x24
    b61e:	f7ff fea7 	bl	b370 <_printf_common>
    b622:	1c43      	adds	r3, r0, #1
    b624:	d102      	bne.n	b62c <_printf_i+0x1e0>
    b626:	2001      	movs	r0, #1
    b628:	4240      	negs	r0, r0
    b62a:	e021      	b.n	b670 <_printf_i+0x224>
    b62c:	6923      	ldr	r3, [r4, #16]
    b62e:	9805      	ldr	r0, [sp, #20]
    b630:	9906      	ldr	r1, [sp, #24]
    b632:	1c32      	adds	r2, r6, #0
    b634:	9d07      	ldr	r5, [sp, #28]
    b636:	47a8      	blx	r5
    b638:	1c43      	adds	r3, r0, #1
    b63a:	d0f4      	beq.n	b626 <_printf_i+0x1da>
    b63c:	6823      	ldr	r3, [r4, #0]
    b63e:	079b      	lsls	r3, r3, #30
    b640:	d405      	bmi.n	b64e <_printf_i+0x202>
    b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b644:	68e0      	ldr	r0, [r4, #12]
    b646:	4298      	cmp	r0, r3
    b648:	da12      	bge.n	b670 <_printf_i+0x224>
    b64a:	1c18      	adds	r0, r3, #0
    b64c:	e010      	b.n	b670 <_printf_i+0x224>
    b64e:	2500      	movs	r5, #0
    b650:	68e3      	ldr	r3, [r4, #12]
    b652:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b654:	1a9b      	subs	r3, r3, r2
    b656:	429d      	cmp	r5, r3
    b658:	daf3      	bge.n	b642 <_printf_i+0x1f6>
    b65a:	1c22      	adds	r2, r4, #0
    b65c:	2301      	movs	r3, #1
    b65e:	9805      	ldr	r0, [sp, #20]
    b660:	9906      	ldr	r1, [sp, #24]
    b662:	3219      	adds	r2, #25
    b664:	9e07      	ldr	r6, [sp, #28]
    b666:	47b0      	blx	r6
    b668:	1c43      	adds	r3, r0, #1
    b66a:	d0dc      	beq.n	b626 <_printf_i+0x1da>
    b66c:	3501      	adds	r5, #1
    b66e:	e7ef      	b.n	b650 <_printf_i+0x204>
    b670:	b00b      	add	sp, #44	; 0x2c
    b672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b674:	000109c9 	.word	0x000109c9
    b678:	000109da 	.word	0x000109da

0000b67c <_scanf_float>:
    b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b67e:	1c15      	adds	r5, r2, #0
    b680:	2200      	movs	r2, #0
    b682:	b08b      	sub	sp, #44	; 0x2c
    b684:	9306      	str	r3, [sp, #24]
    b686:	688b      	ldr	r3, [r1, #8]
    b688:	9205      	str	r2, [sp, #20]
    b68a:	325d      	adds	r2, #93	; 0x5d
    b68c:	1c0e      	adds	r6, r1, #0
    b68e:	32ff      	adds	r2, #255	; 0xff
    b690:	1e59      	subs	r1, r3, #1
    b692:	9002      	str	r0, [sp, #8]
    b694:	4291      	cmp	r1, r2
    b696:	d905      	bls.n	b6a4 <_scanf_float+0x28>
    b698:	3b5e      	subs	r3, #94	; 0x5e
    b69a:	3bff      	subs	r3, #255	; 0xff
    b69c:	9305      	str	r3, [sp, #20]
    b69e:	235e      	movs	r3, #94	; 0x5e
    b6a0:	33ff      	adds	r3, #255	; 0xff
    b6a2:	60b3      	str	r3, [r6, #8]
    b6a4:	23f0      	movs	r3, #240	; 0xf0
    b6a6:	6832      	ldr	r2, [r6, #0]
    b6a8:	00db      	lsls	r3, r3, #3
    b6aa:	4313      	orrs	r3, r2
    b6ac:	6033      	str	r3, [r6, #0]
    b6ae:	1c33      	adds	r3, r6, #0
    b6b0:	2400      	movs	r4, #0
    b6b2:	331c      	adds	r3, #28
    b6b4:	1c1f      	adds	r7, r3, #0
    b6b6:	9304      	str	r3, [sp, #16]
    b6b8:	9403      	str	r4, [sp, #12]
    b6ba:	9409      	str	r4, [sp, #36]	; 0x24
    b6bc:	9408      	str	r4, [sp, #32]
    b6be:	9400      	str	r4, [sp, #0]
    b6c0:	9407      	str	r4, [sp, #28]
    b6c2:	68b2      	ldr	r2, [r6, #8]
    b6c4:	2a00      	cmp	r2, #0
    b6c6:	d100      	bne.n	b6ca <_scanf_float+0x4e>
    b6c8:	e0e1      	b.n	b88e <_scanf_float+0x212>
    b6ca:	682b      	ldr	r3, [r5, #0]
    b6cc:	781b      	ldrb	r3, [r3, #0]
    b6ce:	2b49      	cmp	r3, #73	; 0x49
    b6d0:	d077      	beq.n	b7c2 <_scanf_float+0x146>
    b6d2:	d818      	bhi.n	b706 <_scanf_float+0x8a>
    b6d4:	2b39      	cmp	r3, #57	; 0x39
    b6d6:	d80d      	bhi.n	b6f4 <_scanf_float+0x78>
    b6d8:	2b31      	cmp	r3, #49	; 0x31
    b6da:	d242      	bcs.n	b762 <_scanf_float+0xe6>
    b6dc:	2b2d      	cmp	r3, #45	; 0x2d
    b6de:	d049      	beq.n	b774 <_scanf_float+0xf8>
    b6e0:	d802      	bhi.n	b6e8 <_scanf_float+0x6c>
    b6e2:	2b2b      	cmp	r3, #43	; 0x2b
    b6e4:	d046      	beq.n	b774 <_scanf_float+0xf8>
    b6e6:	e0d2      	b.n	b88e <_scanf_float+0x212>
    b6e8:	2b2e      	cmp	r3, #46	; 0x2e
    b6ea:	d100      	bne.n	b6ee <_scanf_float+0x72>
    b6ec:	e08d      	b.n	b80a <_scanf_float+0x18e>
    b6ee:	2b30      	cmp	r3, #48	; 0x30
    b6f0:	d025      	beq.n	b73e <_scanf_float+0xc2>
    b6f2:	e0cc      	b.n	b88e <_scanf_float+0x212>
    b6f4:	2b45      	cmp	r3, #69	; 0x45
    b6f6:	d100      	bne.n	b6fa <_scanf_float+0x7e>
    b6f8:	e090      	b.n	b81c <_scanf_float+0x1a0>
    b6fa:	2b46      	cmp	r3, #70	; 0x46
    b6fc:	d079      	beq.n	b7f2 <_scanf_float+0x176>
    b6fe:	2b41      	cmp	r3, #65	; 0x41
    b700:	d000      	beq.n	b704 <_scanf_float+0x88>
    b702:	e0c4      	b.n	b88e <_scanf_float+0x212>
    b704:	e058      	b.n	b7b8 <_scanf_float+0x13c>
    b706:	2b65      	cmp	r3, #101	; 0x65
    b708:	d100      	bne.n	b70c <_scanf_float+0x90>
    b70a:	e087      	b.n	b81c <_scanf_float+0x1a0>
    b70c:	d80a      	bhi.n	b724 <_scanf_float+0xa8>
    b70e:	2b54      	cmp	r3, #84	; 0x54
    b710:	d073      	beq.n	b7fa <_scanf_float+0x17e>
    b712:	d802      	bhi.n	b71a <_scanf_float+0x9e>
    b714:	2b4e      	cmp	r3, #78	; 0x4e
    b716:	d035      	beq.n	b784 <_scanf_float+0x108>
    b718:	e0b9      	b.n	b88e <_scanf_float+0x212>
    b71a:	2b59      	cmp	r3, #89	; 0x59
    b71c:	d071      	beq.n	b802 <_scanf_float+0x186>
    b71e:	2b61      	cmp	r3, #97	; 0x61
    b720:	d04a      	beq.n	b7b8 <_scanf_float+0x13c>
    b722:	e0b4      	b.n	b88e <_scanf_float+0x212>
    b724:	2b6e      	cmp	r3, #110	; 0x6e
    b726:	d02d      	beq.n	b784 <_scanf_float+0x108>
    b728:	d804      	bhi.n	b734 <_scanf_float+0xb8>
    b72a:	2b66      	cmp	r3, #102	; 0x66
    b72c:	d061      	beq.n	b7f2 <_scanf_float+0x176>
    b72e:	2b69      	cmp	r3, #105	; 0x69
    b730:	d047      	beq.n	b7c2 <_scanf_float+0x146>
    b732:	e0ac      	b.n	b88e <_scanf_float+0x212>
    b734:	2b74      	cmp	r3, #116	; 0x74
    b736:	d060      	beq.n	b7fa <_scanf_float+0x17e>
    b738:	2b79      	cmp	r3, #121	; 0x79
    b73a:	d062      	beq.n	b802 <_scanf_float+0x186>
    b73c:	e0a7      	b.n	b88e <_scanf_float+0x212>
    b73e:	6831      	ldr	r1, [r6, #0]
    b740:	05c8      	lsls	r0, r1, #23
    b742:	d50e      	bpl.n	b762 <_scanf_float+0xe6>
    b744:	2380      	movs	r3, #128	; 0x80
    b746:	4399      	bics	r1, r3
    b748:	9b00      	ldr	r3, [sp, #0]
    b74a:	6031      	str	r1, [r6, #0]
    b74c:	3301      	adds	r3, #1
    b74e:	9300      	str	r3, [sp, #0]
    b750:	9b05      	ldr	r3, [sp, #20]
    b752:	2b00      	cmp	r3, #0
    b754:	d100      	bne.n	b758 <_scanf_float+0xdc>
    b756:	e082      	b.n	b85e <_scanf_float+0x1e2>
    b758:	3b01      	subs	r3, #1
    b75a:	3201      	adds	r2, #1
    b75c:	9305      	str	r3, [sp, #20]
    b75e:	60b2      	str	r2, [r6, #8]
    b760:	e07d      	b.n	b85e <_scanf_float+0x1e2>
    b762:	9a03      	ldr	r2, [sp, #12]
    b764:	1912      	adds	r2, r2, r4
    b766:	2a00      	cmp	r2, #0
    b768:	d000      	beq.n	b76c <_scanf_float+0xf0>
    b76a:	e090      	b.n	b88e <_scanf_float+0x212>
    b76c:	4ab3      	ldr	r2, [pc, #716]	; (ba3c <_scanf_float+0x3c0>)
    b76e:	6831      	ldr	r1, [r6, #0]
    b770:	400a      	ands	r2, r1
    b772:	e005      	b.n	b780 <_scanf_float+0x104>
    b774:	2180      	movs	r1, #128	; 0x80
    b776:	6832      	ldr	r2, [r6, #0]
    b778:	420a      	tst	r2, r1
    b77a:	d100      	bne.n	b77e <_scanf_float+0x102>
    b77c:	e087      	b.n	b88e <_scanf_float+0x212>
    b77e:	438a      	bics	r2, r1
    b780:	6032      	str	r2, [r6, #0]
    b782:	e06a      	b.n	b85a <_scanf_float+0x1de>
    b784:	9a03      	ldr	r2, [sp, #12]
    b786:	2a00      	cmp	r2, #0
    b788:	d10e      	bne.n	b7a8 <_scanf_float+0x12c>
    b78a:	9a00      	ldr	r2, [sp, #0]
    b78c:	2a00      	cmp	r2, #0
    b78e:	d10e      	bne.n	b7ae <_scanf_float+0x132>
    b790:	6831      	ldr	r1, [r6, #0]
    b792:	22e0      	movs	r2, #224	; 0xe0
    b794:	1c08      	adds	r0, r1, #0
    b796:	00d2      	lsls	r2, r2, #3
    b798:	4010      	ands	r0, r2
    b79a:	4290      	cmp	r0, r2
    b79c:	d107      	bne.n	b7ae <_scanf_float+0x132>
    b79e:	4aa8      	ldr	r2, [pc, #672]	; (ba40 <_scanf_float+0x3c4>)
    b7a0:	400a      	ands	r2, r1
    b7a2:	6032      	str	r2, [r6, #0]
    b7a4:	2201      	movs	r2, #1
    b7a6:	e057      	b.n	b858 <_scanf_float+0x1dc>
    b7a8:	9a03      	ldr	r2, [sp, #12]
    b7aa:	2a02      	cmp	r2, #2
    b7ac:	d053      	beq.n	b856 <_scanf_float+0x1da>
    b7ae:	2c01      	cmp	r4, #1
    b7b0:	d01c      	beq.n	b7ec <_scanf_float+0x170>
    b7b2:	2c04      	cmp	r4, #4
    b7b4:	d01a      	beq.n	b7ec <_scanf_float+0x170>
    b7b6:	e06a      	b.n	b88e <_scanf_float+0x212>
    b7b8:	9a03      	ldr	r2, [sp, #12]
    b7ba:	2a01      	cmp	r2, #1
    b7bc:	d167      	bne.n	b88e <_scanf_float+0x212>
    b7be:	2202      	movs	r2, #2
    b7c0:	e04a      	b.n	b858 <_scanf_float+0x1dc>
    b7c2:	2c00      	cmp	r4, #0
    b7c4:	d10e      	bne.n	b7e4 <_scanf_float+0x168>
    b7c6:	9a00      	ldr	r2, [sp, #0]
    b7c8:	2a00      	cmp	r2, #0
    b7ca:	d163      	bne.n	b894 <_scanf_float+0x218>
    b7cc:	6831      	ldr	r1, [r6, #0]
    b7ce:	22e0      	movs	r2, #224	; 0xe0
    b7d0:	1c08      	adds	r0, r1, #0
    b7d2:	00d2      	lsls	r2, r2, #3
    b7d4:	4010      	ands	r0, r2
    b7d6:	4290      	cmp	r0, r2
    b7d8:	d160      	bne.n	b89c <_scanf_float+0x220>
    b7da:	4a99      	ldr	r2, [pc, #612]	; (ba40 <_scanf_float+0x3c4>)
    b7dc:	3401      	adds	r4, #1
    b7de:	400a      	ands	r2, r1
    b7e0:	6032      	str	r2, [r6, #0]
    b7e2:	e03a      	b.n	b85a <_scanf_float+0x1de>
    b7e4:	21fd      	movs	r1, #253	; 0xfd
    b7e6:	1ee2      	subs	r2, r4, #3
    b7e8:	420a      	tst	r2, r1
    b7ea:	d150      	bne.n	b88e <_scanf_float+0x212>
    b7ec:	3401      	adds	r4, #1
    b7ee:	b2e4      	uxtb	r4, r4
    b7f0:	e033      	b.n	b85a <_scanf_float+0x1de>
    b7f2:	2c02      	cmp	r4, #2
    b7f4:	d14b      	bne.n	b88e <_scanf_float+0x212>
    b7f6:	2403      	movs	r4, #3
    b7f8:	e02f      	b.n	b85a <_scanf_float+0x1de>
    b7fa:	2c06      	cmp	r4, #6
    b7fc:	d147      	bne.n	b88e <_scanf_float+0x212>
    b7fe:	2407      	movs	r4, #7
    b800:	e02b      	b.n	b85a <_scanf_float+0x1de>
    b802:	2c07      	cmp	r4, #7
    b804:	d143      	bne.n	b88e <_scanf_float+0x212>
    b806:	2408      	movs	r4, #8
    b808:	e027      	b.n	b85a <_scanf_float+0x1de>
    b80a:	6831      	ldr	r1, [r6, #0]
    b80c:	058a      	lsls	r2, r1, #22
    b80e:	d53e      	bpl.n	b88e <_scanf_float+0x212>
    b810:	4a8c      	ldr	r2, [pc, #560]	; (ba44 <_scanf_float+0x3c8>)
    b812:	400a      	ands	r2, r1
    b814:	6032      	str	r2, [r6, #0]
    b816:	9a00      	ldr	r2, [sp, #0]
    b818:	9207      	str	r2, [sp, #28]
    b81a:	e01e      	b.n	b85a <_scanf_float+0x1de>
    b81c:	22a0      	movs	r2, #160	; 0xa0
    b81e:	2080      	movs	r0, #128	; 0x80
    b820:	6831      	ldr	r1, [r6, #0]
    b822:	00d2      	lsls	r2, r2, #3
    b824:	400a      	ands	r2, r1
    b826:	00c0      	lsls	r0, r0, #3
    b828:	4282      	cmp	r2, r0
    b82a:	d004      	beq.n	b836 <_scanf_float+0x1ba>
    b82c:	4201      	tst	r1, r0
    b82e:	d02e      	beq.n	b88e <_scanf_float+0x212>
    b830:	9a00      	ldr	r2, [sp, #0]
    b832:	2a00      	cmp	r2, #0
    b834:	d032      	beq.n	b89c <_scanf_float+0x220>
    b836:	058a      	lsls	r2, r1, #22
    b838:	d404      	bmi.n	b844 <_scanf_float+0x1c8>
    b83a:	9a00      	ldr	r2, [sp, #0]
    b83c:	9807      	ldr	r0, [sp, #28]
    b83e:	9709      	str	r7, [sp, #36]	; 0x24
    b840:	1a12      	subs	r2, r2, r0
    b842:	9208      	str	r2, [sp, #32]
    b844:	4a7e      	ldr	r2, [pc, #504]	; (ba40 <_scanf_float+0x3c4>)
    b846:	400a      	ands	r2, r1
    b848:	21c0      	movs	r1, #192	; 0xc0
    b84a:	0049      	lsls	r1, r1, #1
    b84c:	430a      	orrs	r2, r1
    b84e:	6032      	str	r2, [r6, #0]
    b850:	2200      	movs	r2, #0
    b852:	9200      	str	r2, [sp, #0]
    b854:	e001      	b.n	b85a <_scanf_float+0x1de>
    b856:	2203      	movs	r2, #3
    b858:	9203      	str	r2, [sp, #12]
    b85a:	703b      	strb	r3, [r7, #0]
    b85c:	3701      	adds	r7, #1
    b85e:	68b3      	ldr	r3, [r6, #8]
    b860:	3b01      	subs	r3, #1
    b862:	60b3      	str	r3, [r6, #8]
    b864:	6933      	ldr	r3, [r6, #16]
    b866:	3301      	adds	r3, #1
    b868:	6133      	str	r3, [r6, #16]
    b86a:	686b      	ldr	r3, [r5, #4]
    b86c:	3b01      	subs	r3, #1
    b86e:	606b      	str	r3, [r5, #4]
    b870:	2b00      	cmp	r3, #0
    b872:	dd03      	ble.n	b87c <_scanf_float+0x200>
    b874:	682b      	ldr	r3, [r5, #0]
    b876:	3301      	adds	r3, #1
    b878:	602b      	str	r3, [r5, #0]
    b87a:	e722      	b.n	b6c2 <_scanf_float+0x46>
    b87c:	23c0      	movs	r3, #192	; 0xc0
    b87e:	005b      	lsls	r3, r3, #1
    b880:	58f3      	ldr	r3, [r6, r3]
    b882:	9802      	ldr	r0, [sp, #8]
    b884:	1c29      	adds	r1, r5, #0
    b886:	4798      	blx	r3
    b888:	2800      	cmp	r0, #0
    b88a:	d100      	bne.n	b88e <_scanf_float+0x212>
    b88c:	e719      	b.n	b6c2 <_scanf_float+0x46>
    b88e:	9b00      	ldr	r3, [sp, #0]
    b890:	2b00      	cmp	r3, #0
    b892:	d003      	beq.n	b89c <_scanf_float+0x220>
    b894:	6832      	ldr	r2, [r6, #0]
    b896:	4b6c      	ldr	r3, [pc, #432]	; (ba48 <_scanf_float+0x3cc>)
    b898:	4013      	ands	r3, r2
    b89a:	6033      	str	r3, [r6, #0]
    b89c:	9b03      	ldr	r3, [sp, #12]
    b89e:	3b01      	subs	r3, #1
    b8a0:	2b01      	cmp	r3, #1
    b8a2:	d810      	bhi.n	b8c6 <_scanf_float+0x24a>
    b8a4:	9b04      	ldr	r3, [sp, #16]
    b8a6:	429f      	cmp	r7, r3
    b8a8:	d90b      	bls.n	b8c2 <_scanf_float+0x246>
    b8aa:	23be      	movs	r3, #190	; 0xbe
    b8ac:	3f01      	subs	r7, #1
    b8ae:	005b      	lsls	r3, r3, #1
    b8b0:	58f3      	ldr	r3, [r6, r3]
    b8b2:	7839      	ldrb	r1, [r7, #0]
    b8b4:	9802      	ldr	r0, [sp, #8]
    b8b6:	1c2a      	adds	r2, r5, #0
    b8b8:	4798      	blx	r3
    b8ba:	6933      	ldr	r3, [r6, #16]
    b8bc:	3b01      	subs	r3, #1
    b8be:	6133      	str	r3, [r6, #16]
    b8c0:	e7f0      	b.n	b8a4 <_scanf_float+0x228>
    b8c2:	2401      	movs	r4, #1
    b8c4:	e0b7      	b.n	ba36 <_scanf_float+0x3ba>
    b8c6:	1e63      	subs	r3, r4, #1
    b8c8:	2b06      	cmp	r3, #6
    b8ca:	d82a      	bhi.n	b922 <_scanf_float+0x2a6>
    b8cc:	2c02      	cmp	r4, #2
    b8ce:	d919      	bls.n	b904 <_scanf_float+0x288>
    b8d0:	9405      	str	r4, [sp, #20]
    b8d2:	9703      	str	r7, [sp, #12]
    b8d4:	9b05      	ldr	r3, [sp, #20]
    b8d6:	3b01      	subs	r3, #1
    b8d8:	b2db      	uxtb	r3, r3
    b8da:	9305      	str	r3, [sp, #20]
    b8dc:	2b02      	cmp	r3, #2
    b8de:	d00d      	beq.n	b8fc <_scanf_float+0x280>
    b8e0:	9b03      	ldr	r3, [sp, #12]
    b8e2:	9802      	ldr	r0, [sp, #8]
    b8e4:	3b01      	subs	r3, #1
    b8e6:	9303      	str	r3, [sp, #12]
    b8e8:	7819      	ldrb	r1, [r3, #0]
    b8ea:	23be      	movs	r3, #190	; 0xbe
    b8ec:	005b      	lsls	r3, r3, #1
    b8ee:	58f3      	ldr	r3, [r6, r3]
    b8f0:	1c2a      	adds	r2, r5, #0
    b8f2:	4798      	blx	r3
    b8f4:	6933      	ldr	r3, [r6, #16]
    b8f6:	3b01      	subs	r3, #1
    b8f8:	6133      	str	r3, [r6, #16]
    b8fa:	e7eb      	b.n	b8d4 <_scanf_float+0x258>
    b8fc:	3c03      	subs	r4, #3
    b8fe:	b2e4      	uxtb	r4, r4
    b900:	1b3f      	subs	r7, r7, r4
    b902:	e00e      	b.n	b922 <_scanf_float+0x2a6>
    b904:	9b04      	ldr	r3, [sp, #16]
    b906:	429f      	cmp	r7, r3
    b908:	d9db      	bls.n	b8c2 <_scanf_float+0x246>
    b90a:	23be      	movs	r3, #190	; 0xbe
    b90c:	3f01      	subs	r7, #1
    b90e:	005b      	lsls	r3, r3, #1
    b910:	58f3      	ldr	r3, [r6, r3]
    b912:	7839      	ldrb	r1, [r7, #0]
    b914:	9802      	ldr	r0, [sp, #8]
    b916:	1c2a      	adds	r2, r5, #0
    b918:	4798      	blx	r3
    b91a:	6933      	ldr	r3, [r6, #16]
    b91c:	3b01      	subs	r3, #1
    b91e:	6133      	str	r3, [r6, #16]
    b920:	e7f0      	b.n	b904 <_scanf_float+0x288>
    b922:	6833      	ldr	r3, [r6, #0]
    b924:	05da      	lsls	r2, r3, #23
    b926:	d52b      	bpl.n	b980 <_scanf_float+0x304>
    b928:	055b      	lsls	r3, r3, #21
    b92a:	d50e      	bpl.n	b94a <_scanf_float+0x2ce>
    b92c:	9b04      	ldr	r3, [sp, #16]
    b92e:	429f      	cmp	r7, r3
    b930:	d9c7      	bls.n	b8c2 <_scanf_float+0x246>
    b932:	23be      	movs	r3, #190	; 0xbe
    b934:	3f01      	subs	r7, #1
    b936:	005b      	lsls	r3, r3, #1
    b938:	58f3      	ldr	r3, [r6, r3]
    b93a:	7839      	ldrb	r1, [r7, #0]
    b93c:	9802      	ldr	r0, [sp, #8]
    b93e:	1c2a      	adds	r2, r5, #0
    b940:	4798      	blx	r3
    b942:	6933      	ldr	r3, [r6, #16]
    b944:	3b01      	subs	r3, #1
    b946:	6133      	str	r3, [r6, #16]
    b948:	e7f0      	b.n	b92c <_scanf_float+0x2b0>
    b94a:	6933      	ldr	r3, [r6, #16]
    b94c:	1e7c      	subs	r4, r7, #1
    b94e:	7821      	ldrb	r1, [r4, #0]
    b950:	3b01      	subs	r3, #1
    b952:	6133      	str	r3, [r6, #16]
    b954:	2965      	cmp	r1, #101	; 0x65
    b956:	d00c      	beq.n	b972 <_scanf_float+0x2f6>
    b958:	2945      	cmp	r1, #69	; 0x45
    b95a:	d00a      	beq.n	b972 <_scanf_float+0x2f6>
    b95c:	23be      	movs	r3, #190	; 0xbe
    b95e:	005b      	lsls	r3, r3, #1
    b960:	58f3      	ldr	r3, [r6, r3]
    b962:	9802      	ldr	r0, [sp, #8]
    b964:	1c2a      	adds	r2, r5, #0
    b966:	4798      	blx	r3
    b968:	6933      	ldr	r3, [r6, #16]
    b96a:	1ebc      	subs	r4, r7, #2
    b96c:	3b01      	subs	r3, #1
    b96e:	7821      	ldrb	r1, [r4, #0]
    b970:	6133      	str	r3, [r6, #16]
    b972:	23be      	movs	r3, #190	; 0xbe
    b974:	005b      	lsls	r3, r3, #1
    b976:	58f3      	ldr	r3, [r6, r3]
    b978:	9802      	ldr	r0, [sp, #8]
    b97a:	1c2a      	adds	r2, r5, #0
    b97c:	4798      	blx	r3
    b97e:	1c27      	adds	r7, r4, #0
    b980:	2410      	movs	r4, #16
    b982:	6833      	ldr	r3, [r6, #0]
    b984:	401c      	ands	r4, r3
    b986:	d155      	bne.n	ba34 <_scanf_float+0x3b8>
    b988:	23c0      	movs	r3, #192	; 0xc0
    b98a:	703c      	strb	r4, [r7, #0]
    b98c:	6832      	ldr	r2, [r6, #0]
    b98e:	00db      	lsls	r3, r3, #3
    b990:	4013      	ands	r3, r2
    b992:	2280      	movs	r2, #128	; 0x80
    b994:	00d2      	lsls	r2, r2, #3
    b996:	4293      	cmp	r3, r2
    b998:	d106      	bne.n	b9a8 <_scanf_float+0x32c>
    b99a:	9a07      	ldr	r2, [sp, #28]
    b99c:	9b00      	ldr	r3, [sp, #0]
    b99e:	1a9b      	subs	r3, r3, r2
    b9a0:	425a      	negs	r2, r3
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d10d      	bne.n	b9c2 <_scanf_float+0x346>
    b9a6:	e018      	b.n	b9da <_scanf_float+0x35e>
    b9a8:	9b08      	ldr	r3, [sp, #32]
    b9aa:	2b00      	cmp	r3, #0
    b9ac:	d015      	beq.n	b9da <_scanf_float+0x35e>
    b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9b0:	1c22      	adds	r2, r4, #0
    b9b2:	1c59      	adds	r1, r3, #1
    b9b4:	9802      	ldr	r0, [sp, #8]
    b9b6:	230a      	movs	r3, #10
    b9b8:	f001 fb1e 	bl	cff8 <_strtol_r>
    b9bc:	9b08      	ldr	r3, [sp, #32]
    b9be:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b9c0:	1ac2      	subs	r2, r0, r3
    b9c2:	1c33      	adds	r3, r6, #0
    b9c4:	3370      	adds	r3, #112	; 0x70
    b9c6:	33ff      	adds	r3, #255	; 0xff
    b9c8:	429f      	cmp	r7, r3
    b9ca:	d302      	bcc.n	b9d2 <_scanf_float+0x356>
    b9cc:	1c37      	adds	r7, r6, #0
    b9ce:	376f      	adds	r7, #111	; 0x6f
    b9d0:	37ff      	adds	r7, #255	; 0xff
    b9d2:	1c38      	adds	r0, r7, #0
    b9d4:	491d      	ldr	r1, [pc, #116]	; (ba4c <_scanf_float+0x3d0>)
    b9d6:	f000 fbf9 	bl	c1cc <siprintf>
    b9da:	2200      	movs	r2, #0
    b9dc:	9802      	ldr	r0, [sp, #8]
    b9de:	9904      	ldr	r1, [sp, #16]
    b9e0:	f000 fcf0 	bl	c3c4 <_strtod_r>
    b9e4:	9b06      	ldr	r3, [sp, #24]
    b9e6:	6832      	ldr	r2, [r6, #0]
    b9e8:	9000      	str	r0, [sp, #0]
    b9ea:	9101      	str	r1, [sp, #4]
    b9ec:	681b      	ldr	r3, [r3, #0]
    b9ee:	0791      	lsls	r1, r2, #30
    b9f0:	d401      	bmi.n	b9f6 <_scanf_float+0x37a>
    b9f2:	0752      	lsls	r2, r2, #29
    b9f4:	d508      	bpl.n	ba08 <_scanf_float+0x38c>
    b9f6:	9906      	ldr	r1, [sp, #24]
    b9f8:	1d1a      	adds	r2, r3, #4
    b9fa:	600a      	str	r2, [r1, #0]
    b9fc:	681b      	ldr	r3, [r3, #0]
    b9fe:	9900      	ldr	r1, [sp, #0]
    ba00:	9a01      	ldr	r2, [sp, #4]
    ba02:	6019      	str	r1, [r3, #0]
    ba04:	605a      	str	r2, [r3, #4]
    ba06:	e011      	b.n	ba2c <_scanf_float+0x3b0>
    ba08:	9906      	ldr	r1, [sp, #24]
    ba0a:	1d1a      	adds	r2, r3, #4
    ba0c:	600a      	str	r2, [r1, #0]
    ba0e:	9800      	ldr	r0, [sp, #0]
    ba10:	9901      	ldr	r1, [sp, #4]
    ba12:	681d      	ldr	r5, [r3, #0]
    ba14:	f000 fa90 	bl	bf38 <__fpclassifyd>
    ba18:	2800      	cmp	r0, #0
    ba1a:	d102      	bne.n	ba22 <_scanf_float+0x3a6>
    ba1c:	f000 fb88 	bl	c130 <nanf>
    ba20:	e003      	b.n	ba2a <_scanf_float+0x3ae>
    ba22:	9800      	ldr	r0, [sp, #0]
    ba24:	9901      	ldr	r1, [sp, #4]
    ba26:	f7fe faef 	bl	a008 <__aeabi_d2f>
    ba2a:	6028      	str	r0, [r5, #0]
    ba2c:	68f3      	ldr	r3, [r6, #12]
    ba2e:	3301      	adds	r3, #1
    ba30:	60f3      	str	r3, [r6, #12]
    ba32:	e000      	b.n	ba36 <_scanf_float+0x3ba>
    ba34:	2400      	movs	r4, #0
    ba36:	1c20      	adds	r0, r4, #0
    ba38:	b00b      	add	sp, #44	; 0x2c
    ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba3c:	fffffe7f 	.word	0xfffffe7f
    ba40:	fffff87f 	.word	0xfffff87f
    ba44:	fffffd7f 	.word	0xfffffd7f
    ba48:	fffffeff 	.word	0xfffffeff
    ba4c:	000109eb 	.word	0x000109eb

0000ba50 <_scanf_chars>:
    ba50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba52:	1c15      	adds	r5, r2, #0
    ba54:	688a      	ldr	r2, [r1, #8]
    ba56:	9001      	str	r0, [sp, #4]
    ba58:	1c0c      	adds	r4, r1, #0
    ba5a:	2a00      	cmp	r2, #0
    ba5c:	d106      	bne.n	ba6c <_scanf_chars+0x1c>
    ba5e:	698a      	ldr	r2, [r1, #24]
    ba60:	1e51      	subs	r1, r2, #1
    ba62:	418a      	sbcs	r2, r1
    ba64:	2101      	movs	r1, #1
    ba66:	4252      	negs	r2, r2
    ba68:	430a      	orrs	r2, r1
    ba6a:	60a2      	str	r2, [r4, #8]
    ba6c:	6822      	ldr	r2, [r4, #0]
    ba6e:	06d2      	lsls	r2, r2, #27
    ba70:	d403      	bmi.n	ba7a <_scanf_chars+0x2a>
    ba72:	681a      	ldr	r2, [r3, #0]
    ba74:	1d11      	adds	r1, r2, #4
    ba76:	6019      	str	r1, [r3, #0]
    ba78:	6817      	ldr	r7, [r2, #0]
    ba7a:	2600      	movs	r6, #0
    ba7c:	69a0      	ldr	r0, [r4, #24]
    ba7e:	2800      	cmp	r0, #0
    ba80:	d11d      	bne.n	babe <_scanf_chars+0x6e>
    ba82:	6823      	ldr	r3, [r4, #0]
    ba84:	3601      	adds	r6, #1
    ba86:	06db      	lsls	r3, r3, #27
    ba88:	d403      	bmi.n	ba92 <_scanf_chars+0x42>
    ba8a:	682b      	ldr	r3, [r5, #0]
    ba8c:	781b      	ldrb	r3, [r3, #0]
    ba8e:	703b      	strb	r3, [r7, #0]
    ba90:	3701      	adds	r7, #1
    ba92:	682a      	ldr	r2, [r5, #0]
    ba94:	686b      	ldr	r3, [r5, #4]
    ba96:	3201      	adds	r2, #1
    ba98:	602a      	str	r2, [r5, #0]
    ba9a:	68a2      	ldr	r2, [r4, #8]
    ba9c:	3b01      	subs	r3, #1
    ba9e:	3a01      	subs	r2, #1
    baa0:	606b      	str	r3, [r5, #4]
    baa2:	60a2      	str	r2, [r4, #8]
    baa4:	2a00      	cmp	r2, #0
    baa6:	d01f      	beq.n	bae8 <_scanf_chars+0x98>
    baa8:	2b00      	cmp	r3, #0
    baaa:	dce7      	bgt.n	ba7c <_scanf_chars+0x2c>
    baac:	23c0      	movs	r3, #192	; 0xc0
    baae:	005b      	lsls	r3, r3, #1
    bab0:	58e3      	ldr	r3, [r4, r3]
    bab2:	9801      	ldr	r0, [sp, #4]
    bab4:	1c29      	adds	r1, r5, #0
    bab6:	4798      	blx	r3
    bab8:	2800      	cmp	r0, #0
    baba:	d0df      	beq.n	ba7c <_scanf_chars+0x2c>
    babc:	e014      	b.n	bae8 <_scanf_chars+0x98>
    babe:	2801      	cmp	r0, #1
    bac0:	d108      	bne.n	bad4 <_scanf_chars+0x84>
    bac2:	682b      	ldr	r3, [r5, #0]
    bac4:	6962      	ldr	r2, [r4, #20]
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	5cd3      	ldrb	r3, [r2, r3]
    baca:	2b00      	cmp	r3, #0
    bacc:	d1d9      	bne.n	ba82 <_scanf_chars+0x32>
    bace:	2e00      	cmp	r6, #0
    bad0:	d019      	beq.n	bb06 <_scanf_chars+0xb6>
    bad2:	e009      	b.n	bae8 <_scanf_chars+0x98>
    bad4:	2802      	cmp	r0, #2
    bad6:	d107      	bne.n	bae8 <_scanf_chars+0x98>
    bad8:	682b      	ldr	r3, [r5, #0]
    bada:	4a0b      	ldr	r2, [pc, #44]	; (bb08 <_scanf_chars+0xb8>)
    badc:	781b      	ldrb	r3, [r3, #0]
    bade:	6812      	ldr	r2, [r2, #0]
    bae0:	18d3      	adds	r3, r2, r3
    bae2:	785b      	ldrb	r3, [r3, #1]
    bae4:	071b      	lsls	r3, r3, #28
    bae6:	d5cc      	bpl.n	ba82 <_scanf_chars+0x32>
    bae8:	2310      	movs	r3, #16
    baea:	6822      	ldr	r2, [r4, #0]
    baec:	4013      	ands	r3, r2
    baee:	d106      	bne.n	bafe <_scanf_chars+0xae>
    baf0:	68e2      	ldr	r2, [r4, #12]
    baf2:	3201      	adds	r2, #1
    baf4:	60e2      	str	r2, [r4, #12]
    baf6:	69a2      	ldr	r2, [r4, #24]
    baf8:	2a00      	cmp	r2, #0
    bafa:	d000      	beq.n	bafe <_scanf_chars+0xae>
    bafc:	703b      	strb	r3, [r7, #0]
    bafe:	2000      	movs	r0, #0
    bb00:	6923      	ldr	r3, [r4, #16]
    bb02:	199e      	adds	r6, r3, r6
    bb04:	6126      	str	r6, [r4, #16]
    bb06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bb08:	20000138 	.word	0x20000138

0000bb0c <_scanf_i>:
    bb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb0e:	1c0c      	adds	r4, r1, #0
    bb10:	b08b      	sub	sp, #44	; 0x2c
    bb12:	9301      	str	r3, [sp, #4]
    bb14:	4b74      	ldr	r3, [pc, #464]	; (bce8 <_scanf_i+0x1dc>)
    bb16:	9004      	str	r0, [sp, #16]
    bb18:	1c16      	adds	r6, r2, #0
    bb1a:	aa07      	add	r2, sp, #28
    bb1c:	cb23      	ldmia	r3!, {r0, r1, r5}
    bb1e:	c223      	stmia	r2!, {r0, r1, r5}
    bb20:	4b72      	ldr	r3, [pc, #456]	; (bcec <_scanf_i+0x1e0>)
    bb22:	9305      	str	r3, [sp, #20]
    bb24:	69a3      	ldr	r3, [r4, #24]
    bb26:	2b03      	cmp	r3, #3
    bb28:	d001      	beq.n	bb2e <_scanf_i+0x22>
    bb2a:	4b71      	ldr	r3, [pc, #452]	; (bcf0 <_scanf_i+0x1e4>)
    bb2c:	9305      	str	r3, [sp, #20]
    bb2e:	2200      	movs	r2, #0
    bb30:	68a3      	ldr	r3, [r4, #8]
    bb32:	9203      	str	r2, [sp, #12]
    bb34:	325d      	adds	r2, #93	; 0x5d
    bb36:	1e59      	subs	r1, r3, #1
    bb38:	32ff      	adds	r2, #255	; 0xff
    bb3a:	4291      	cmp	r1, r2
    bb3c:	d905      	bls.n	bb4a <_scanf_i+0x3e>
    bb3e:	3b5e      	subs	r3, #94	; 0x5e
    bb40:	3bff      	subs	r3, #255	; 0xff
    bb42:	9303      	str	r3, [sp, #12]
    bb44:	235e      	movs	r3, #94	; 0x5e
    bb46:	33ff      	adds	r3, #255	; 0xff
    bb48:	60a3      	str	r3, [r4, #8]
    bb4a:	1c23      	adds	r3, r4, #0
    bb4c:	331c      	adds	r3, #28
    bb4e:	9300      	str	r3, [sp, #0]
    bb50:	23d0      	movs	r3, #208	; 0xd0
    bb52:	2700      	movs	r7, #0
    bb54:	6822      	ldr	r2, [r4, #0]
    bb56:	011b      	lsls	r3, r3, #4
    bb58:	4313      	orrs	r3, r2
    bb5a:	6023      	str	r3, [r4, #0]
    bb5c:	9b00      	ldr	r3, [sp, #0]
    bb5e:	9302      	str	r3, [sp, #8]
    bb60:	6832      	ldr	r2, [r6, #0]
    bb62:	00bb      	lsls	r3, r7, #2
    bb64:	7811      	ldrb	r1, [r2, #0]
    bb66:	aa07      	add	r2, sp, #28
    bb68:	5898      	ldr	r0, [r3, r2]
    bb6a:	2202      	movs	r2, #2
    bb6c:	f7fe ff2c 	bl	a9c8 <memchr>
    bb70:	2800      	cmp	r0, #0
    bb72:	d039      	beq.n	bbe8 <_scanf_i+0xdc>
    bb74:	2f01      	cmp	r7, #1
    bb76:	d10d      	bne.n	bb94 <_scanf_i+0x88>
    bb78:	6863      	ldr	r3, [r4, #4]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d106      	bne.n	bb8c <_scanf_i+0x80>
    bb7e:	3308      	adds	r3, #8
    bb80:	6822      	ldr	r2, [r4, #0]
    bb82:	6063      	str	r3, [r4, #4]
    bb84:	33f9      	adds	r3, #249	; 0xf9
    bb86:	33ff      	adds	r3, #255	; 0xff
    bb88:	4313      	orrs	r3, r2
    bb8a:	6023      	str	r3, [r4, #0]
    bb8c:	4b59      	ldr	r3, [pc, #356]	; (bcf4 <_scanf_i+0x1e8>)
    bb8e:	6822      	ldr	r2, [r4, #0]
    bb90:	4013      	ands	r3, r2
    bb92:	e00d      	b.n	bbb0 <_scanf_i+0xa4>
    bb94:	2f02      	cmp	r7, #2
    bb96:	d10c      	bne.n	bbb2 <_scanf_i+0xa6>
    bb98:	22c0      	movs	r2, #192	; 0xc0
    bb9a:	2180      	movs	r1, #128	; 0x80
    bb9c:	6823      	ldr	r3, [r4, #0]
    bb9e:	00d2      	lsls	r2, r2, #3
    bba0:	401a      	ands	r2, r3
    bba2:	0089      	lsls	r1, r1, #2
    bba4:	428a      	cmp	r2, r1
    bba6:	d122      	bne.n	bbee <_scanf_i+0xe2>
    bba8:	2210      	movs	r2, #16
    bbaa:	6062      	str	r2, [r4, #4]
    bbac:	32f0      	adds	r2, #240	; 0xf0
    bbae:	4313      	orrs	r3, r2
    bbb0:	6023      	str	r3, [r4, #0]
    bbb2:	68a3      	ldr	r3, [r4, #8]
    bbb4:	1e5a      	subs	r2, r3, #1
    bbb6:	60a2      	str	r2, [r4, #8]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d015      	beq.n	bbe8 <_scanf_i+0xdc>
    bbbc:	9b02      	ldr	r3, [sp, #8]
    bbbe:	1c5d      	adds	r5, r3, #1
    bbc0:	6833      	ldr	r3, [r6, #0]
    bbc2:	1c5a      	adds	r2, r3, #1
    bbc4:	6032      	str	r2, [r6, #0]
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	9a02      	ldr	r2, [sp, #8]
    bbca:	9502      	str	r5, [sp, #8]
    bbcc:	7013      	strb	r3, [r2, #0]
    bbce:	6873      	ldr	r3, [r6, #4]
    bbd0:	3b01      	subs	r3, #1
    bbd2:	6073      	str	r3, [r6, #4]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	dc07      	bgt.n	bbe8 <_scanf_i+0xdc>
    bbd8:	23c0      	movs	r3, #192	; 0xc0
    bbda:	005b      	lsls	r3, r3, #1
    bbdc:	58e3      	ldr	r3, [r4, r3]
    bbde:	9804      	ldr	r0, [sp, #16]
    bbe0:	1c31      	adds	r1, r6, #0
    bbe2:	4798      	blx	r3
    bbe4:	2800      	cmp	r0, #0
    bbe6:	d144      	bne.n	bc72 <_scanf_i+0x166>
    bbe8:	3701      	adds	r7, #1
    bbea:	2f03      	cmp	r7, #3
    bbec:	d1b8      	bne.n	bb60 <_scanf_i+0x54>
    bbee:	6863      	ldr	r3, [r4, #4]
    bbf0:	2b00      	cmp	r3, #0
    bbf2:	d101      	bne.n	bbf8 <_scanf_i+0xec>
    bbf4:	330a      	adds	r3, #10
    bbf6:	6063      	str	r3, [r4, #4]
    bbf8:	2110      	movs	r1, #16
    bbfa:	2700      	movs	r7, #0
    bbfc:	6863      	ldr	r3, [r4, #4]
    bbfe:	6960      	ldr	r0, [r4, #20]
    bc00:	1ac9      	subs	r1, r1, r3
    bc02:	4b3d      	ldr	r3, [pc, #244]	; (bcf8 <_scanf_i+0x1ec>)
    bc04:	18c9      	adds	r1, r1, r3
    bc06:	f000 f9d1 	bl	bfac <__sccl>
    bc0a:	9d02      	ldr	r5, [sp, #8]
    bc0c:	68a3      	ldr	r3, [r4, #8]
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d030      	beq.n	bc74 <_scanf_i+0x168>
    bc12:	6832      	ldr	r2, [r6, #0]
    bc14:	6960      	ldr	r0, [r4, #20]
    bc16:	7811      	ldrb	r1, [r2, #0]
    bc18:	5c40      	ldrb	r0, [r0, r1]
    bc1a:	2800      	cmp	r0, #0
    bc1c:	d02a      	beq.n	bc74 <_scanf_i+0x168>
    bc1e:	2930      	cmp	r1, #48	; 0x30
    bc20:	d10b      	bne.n	bc3a <_scanf_i+0x12e>
    bc22:	6821      	ldr	r1, [r4, #0]
    bc24:	0509      	lsls	r1, r1, #20
    bc26:	d508      	bpl.n	bc3a <_scanf_i+0x12e>
    bc28:	9a03      	ldr	r2, [sp, #12]
    bc2a:	3701      	adds	r7, #1
    bc2c:	2a00      	cmp	r2, #0
    bc2e:	d00b      	beq.n	bc48 <_scanf_i+0x13c>
    bc30:	3a01      	subs	r2, #1
    bc32:	3301      	adds	r3, #1
    bc34:	9203      	str	r2, [sp, #12]
    bc36:	60a3      	str	r3, [r4, #8]
    bc38:	e006      	b.n	bc48 <_scanf_i+0x13c>
    bc3a:	6821      	ldr	r1, [r4, #0]
    bc3c:	4b2f      	ldr	r3, [pc, #188]	; (bcfc <_scanf_i+0x1f0>)
    bc3e:	400b      	ands	r3, r1
    bc40:	6023      	str	r3, [r4, #0]
    bc42:	7813      	ldrb	r3, [r2, #0]
    bc44:	702b      	strb	r3, [r5, #0]
    bc46:	3501      	adds	r5, #1
    bc48:	6873      	ldr	r3, [r6, #4]
    bc4a:	3b01      	subs	r3, #1
    bc4c:	6073      	str	r3, [r6, #4]
    bc4e:	2b00      	cmp	r3, #0
    bc50:	dd03      	ble.n	bc5a <_scanf_i+0x14e>
    bc52:	6833      	ldr	r3, [r6, #0]
    bc54:	3301      	adds	r3, #1
    bc56:	6033      	str	r3, [r6, #0]
    bc58:	e007      	b.n	bc6a <_scanf_i+0x15e>
    bc5a:	23c0      	movs	r3, #192	; 0xc0
    bc5c:	005b      	lsls	r3, r3, #1
    bc5e:	58e3      	ldr	r3, [r4, r3]
    bc60:	9804      	ldr	r0, [sp, #16]
    bc62:	1c31      	adds	r1, r6, #0
    bc64:	4798      	blx	r3
    bc66:	2800      	cmp	r0, #0
    bc68:	d104      	bne.n	bc74 <_scanf_i+0x168>
    bc6a:	68a3      	ldr	r3, [r4, #8]
    bc6c:	3b01      	subs	r3, #1
    bc6e:	60a3      	str	r3, [r4, #8]
    bc70:	e7cc      	b.n	bc0c <_scanf_i+0x100>
    bc72:	2700      	movs	r7, #0
    bc74:	6823      	ldr	r3, [r4, #0]
    bc76:	05db      	lsls	r3, r3, #23
    bc78:	d50e      	bpl.n	bc98 <_scanf_i+0x18c>
    bc7a:	9b00      	ldr	r3, [sp, #0]
    bc7c:	429d      	cmp	r5, r3
    bc7e:	d907      	bls.n	bc90 <_scanf_i+0x184>
    bc80:	23be      	movs	r3, #190	; 0xbe
    bc82:	3d01      	subs	r5, #1
    bc84:	005b      	lsls	r3, r3, #1
    bc86:	7829      	ldrb	r1, [r5, #0]
    bc88:	58e3      	ldr	r3, [r4, r3]
    bc8a:	9804      	ldr	r0, [sp, #16]
    bc8c:	1c32      	adds	r2, r6, #0
    bc8e:	4798      	blx	r3
    bc90:	9b00      	ldr	r3, [sp, #0]
    bc92:	2001      	movs	r0, #1
    bc94:	429d      	cmp	r5, r3
    bc96:	d025      	beq.n	bce4 <_scanf_i+0x1d8>
    bc98:	2210      	movs	r2, #16
    bc9a:	6823      	ldr	r3, [r4, #0]
    bc9c:	401a      	ands	r2, r3
    bc9e:	d11a      	bne.n	bcd6 <_scanf_i+0x1ca>
    bca0:	702a      	strb	r2, [r5, #0]
    bca2:	6863      	ldr	r3, [r4, #4]
    bca4:	9804      	ldr	r0, [sp, #16]
    bca6:	9900      	ldr	r1, [sp, #0]
    bca8:	9e05      	ldr	r6, [sp, #20]
    bcaa:	47b0      	blx	r6
    bcac:	9b01      	ldr	r3, [sp, #4]
    bcae:	6822      	ldr	r2, [r4, #0]
    bcb0:	681b      	ldr	r3, [r3, #0]
    bcb2:	0691      	lsls	r1, r2, #26
    bcb4:	d407      	bmi.n	bcc6 <_scanf_i+0x1ba>
    bcb6:	07d1      	lsls	r1, r2, #31
    bcb8:	d505      	bpl.n	bcc6 <_scanf_i+0x1ba>
    bcba:	9901      	ldr	r1, [sp, #4]
    bcbc:	1d1a      	adds	r2, r3, #4
    bcbe:	600a      	str	r2, [r1, #0]
    bcc0:	681b      	ldr	r3, [r3, #0]
    bcc2:	8018      	strh	r0, [r3, #0]
    bcc4:	e004      	b.n	bcd0 <_scanf_i+0x1c4>
    bcc6:	9901      	ldr	r1, [sp, #4]
    bcc8:	1d1a      	adds	r2, r3, #4
    bcca:	600a      	str	r2, [r1, #0]
    bccc:	681b      	ldr	r3, [r3, #0]
    bcce:	6018      	str	r0, [r3, #0]
    bcd0:	68e3      	ldr	r3, [r4, #12]
    bcd2:	3301      	adds	r3, #1
    bcd4:	60e3      	str	r3, [r4, #12]
    bcd6:	2000      	movs	r0, #0
    bcd8:	9b00      	ldr	r3, [sp, #0]
    bcda:	1aed      	subs	r5, r5, r3
    bcdc:	6923      	ldr	r3, [r4, #16]
    bcde:	19ed      	adds	r5, r5, r7
    bce0:	195d      	adds	r5, r3, r5
    bce2:	6125      	str	r5, [r4, #16]
    bce4:	b00b      	add	sp, #44	; 0x2c
    bce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bce8:	000109f0 	.word	0x000109f0
    bcec:	0000cff9 	.word	0x0000cff9
    bcf0:	0000d119 	.word	0x0000d119
    bcf4:	fffffaff 	.word	0xfffffaff
    bcf8:	000109fc 	.word	0x000109fc
    bcfc:	fffff6ff 	.word	0xfffff6ff

0000bd00 <_open_r>:
    bd00:	b538      	push	{r3, r4, r5, lr}
    bd02:	1c05      	adds	r5, r0, #0
    bd04:	2000      	movs	r0, #0
    bd06:	4c07      	ldr	r4, [pc, #28]	; (bd24 <_open_r+0x24>)
    bd08:	6020      	str	r0, [r4, #0]
    bd0a:	1c08      	adds	r0, r1, #0
    bd0c:	1c11      	adds	r1, r2, #0
    bd0e:	1c1a      	adds	r2, r3, #0
    bd10:	f7f8 fb78 	bl	4404 <_open>
    bd14:	1c43      	adds	r3, r0, #1
    bd16:	d103      	bne.n	bd20 <_open_r+0x20>
    bd18:	6823      	ldr	r3, [r4, #0]
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d000      	beq.n	bd20 <_open_r+0x20>
    bd1e:	602b      	str	r3, [r5, #0]
    bd20:	bd38      	pop	{r3, r4, r5, pc}
    bd22:	46c0      	nop			; (mov r8, r8)
    bd24:	20004518 	.word	0x20004518

0000bd28 <_putc_r>:
    bd28:	b570      	push	{r4, r5, r6, lr}
    bd2a:	1c05      	adds	r5, r0, #0
    bd2c:	1c0e      	adds	r6, r1, #0
    bd2e:	1c14      	adds	r4, r2, #0
    bd30:	2800      	cmp	r0, #0
    bd32:	d004      	beq.n	bd3e <_putc_r+0x16>
    bd34:	6983      	ldr	r3, [r0, #24]
    bd36:	2b00      	cmp	r3, #0
    bd38:	d101      	bne.n	bd3e <_putc_r+0x16>
    bd3a:	f7fe fbeb 	bl	a514 <__sinit>
    bd3e:	4b15      	ldr	r3, [pc, #84]	; (bd94 <_putc_r+0x6c>)
    bd40:	429c      	cmp	r4, r3
    bd42:	d101      	bne.n	bd48 <_putc_r+0x20>
    bd44:	686c      	ldr	r4, [r5, #4]
    bd46:	e008      	b.n	bd5a <_putc_r+0x32>
    bd48:	4b13      	ldr	r3, [pc, #76]	; (bd98 <_putc_r+0x70>)
    bd4a:	429c      	cmp	r4, r3
    bd4c:	d101      	bne.n	bd52 <_putc_r+0x2a>
    bd4e:	68ac      	ldr	r4, [r5, #8]
    bd50:	e003      	b.n	bd5a <_putc_r+0x32>
    bd52:	4b12      	ldr	r3, [pc, #72]	; (bd9c <_putc_r+0x74>)
    bd54:	429c      	cmp	r4, r3
    bd56:	d100      	bne.n	bd5a <_putc_r+0x32>
    bd58:	68ec      	ldr	r4, [r5, #12]
    bd5a:	68a3      	ldr	r3, [r4, #8]
    bd5c:	3b01      	subs	r3, #1
    bd5e:	60a3      	str	r3, [r4, #8]
    bd60:	2b00      	cmp	r3, #0
    bd62:	da10      	bge.n	bd86 <_putc_r+0x5e>
    bd64:	69a2      	ldr	r2, [r4, #24]
    bd66:	4293      	cmp	r3, r2
    bd68:	db07      	blt.n	bd7a <_putc_r+0x52>
    bd6a:	6823      	ldr	r3, [r4, #0]
    bd6c:	701e      	strb	r6, [r3, #0]
    bd6e:	6823      	ldr	r3, [r4, #0]
    bd70:	7819      	ldrb	r1, [r3, #0]
    bd72:	290a      	cmp	r1, #10
    bd74:	d10a      	bne.n	bd8c <_putc_r+0x64>
    bd76:	1c28      	adds	r0, r5, #0
    bd78:	e001      	b.n	bd7e <_putc_r+0x56>
    bd7a:	1c28      	adds	r0, r5, #0
    bd7c:	1c31      	adds	r1, r6, #0
    bd7e:	1c22      	adds	r2, r4, #0
    bd80:	f001 fa8a 	bl	d298 <__swbuf_r>
    bd84:	e005      	b.n	bd92 <_putc_r+0x6a>
    bd86:	6823      	ldr	r3, [r4, #0]
    bd88:	701e      	strb	r6, [r3, #0]
    bd8a:	6823      	ldr	r3, [r4, #0]
    bd8c:	1c5a      	adds	r2, r3, #1
    bd8e:	6022      	str	r2, [r4, #0]
    bd90:	7818      	ldrb	r0, [r3, #0]
    bd92:	bd70      	pop	{r4, r5, r6, pc}
    bd94:	00010940 	.word	0x00010940
    bd98:	00010960 	.word	0x00010960
    bd9c:	00010980 	.word	0x00010980

0000bda0 <lflush>:
    bda0:	2209      	movs	r2, #9
    bda2:	b508      	push	{r3, lr}
    bda4:	8981      	ldrh	r1, [r0, #12]
    bda6:	1c03      	adds	r3, r0, #0
    bda8:	400a      	ands	r2, r1
    bdaa:	2000      	movs	r0, #0
    bdac:	2a09      	cmp	r2, #9
    bdae:	d102      	bne.n	bdb6 <lflush+0x16>
    bdb0:	1c18      	adds	r0, r3, #0
    bdb2:	f7fe fb21 	bl	a3f8 <fflush>
    bdb6:	bd08      	pop	{r3, pc}

0000bdb8 <__srefill_r>:
    bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdba:	1c05      	adds	r5, r0, #0
    bdbc:	1c0c      	adds	r4, r1, #0
    bdbe:	2800      	cmp	r0, #0
    bdc0:	d004      	beq.n	bdcc <__srefill_r+0x14>
    bdc2:	6983      	ldr	r3, [r0, #24]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d101      	bne.n	bdcc <__srefill_r+0x14>
    bdc8:	f7fe fba4 	bl	a514 <__sinit>
    bdcc:	4b3d      	ldr	r3, [pc, #244]	; (bec4 <__srefill_r+0x10c>)
    bdce:	429c      	cmp	r4, r3
    bdd0:	d101      	bne.n	bdd6 <__srefill_r+0x1e>
    bdd2:	686c      	ldr	r4, [r5, #4]
    bdd4:	e008      	b.n	bde8 <__srefill_r+0x30>
    bdd6:	4b3c      	ldr	r3, [pc, #240]	; (bec8 <__srefill_r+0x110>)
    bdd8:	429c      	cmp	r4, r3
    bdda:	d101      	bne.n	bde0 <__srefill_r+0x28>
    bddc:	68ac      	ldr	r4, [r5, #8]
    bdde:	e003      	b.n	bde8 <__srefill_r+0x30>
    bde0:	4b3a      	ldr	r3, [pc, #232]	; (becc <__srefill_r+0x114>)
    bde2:	429c      	cmp	r4, r3
    bde4:	d100      	bne.n	bde8 <__srefill_r+0x30>
    bde6:	68ec      	ldr	r4, [r5, #12]
    bde8:	2300      	movs	r3, #0
    bdea:	89a2      	ldrh	r2, [r4, #12]
    bdec:	6063      	str	r3, [r4, #4]
    bdee:	b293      	uxth	r3, r2
    bdf0:	0699      	lsls	r1, r3, #26
    bdf2:	d463      	bmi.n	bebc <__srefill_r+0x104>
    bdf4:	0759      	lsls	r1, r3, #29
    bdf6:	d41a      	bmi.n	be2e <__srefill_r+0x76>
    bdf8:	06d9      	lsls	r1, r3, #27
    bdfa:	d405      	bmi.n	be08 <__srefill_r+0x50>
    bdfc:	2309      	movs	r3, #9
    bdfe:	602b      	str	r3, [r5, #0]
    be00:	3337      	adds	r3, #55	; 0x37
    be02:	431a      	orrs	r2, r3
    be04:	81a2      	strh	r2, [r4, #12]
    be06:	e059      	b.n	bebc <__srefill_r+0x104>
    be08:	2608      	movs	r6, #8
    be0a:	4233      	tst	r3, r6
    be0c:	d00a      	beq.n	be24 <__srefill_r+0x6c>
    be0e:	1c28      	adds	r0, r5, #0
    be10:	1c21      	adds	r1, r4, #0
    be12:	f7fe fac5 	bl	a3a0 <_fflush_r>
    be16:	2800      	cmp	r0, #0
    be18:	d150      	bne.n	bebc <__srefill_r+0x104>
    be1a:	89a3      	ldrh	r3, [r4, #12]
    be1c:	60a0      	str	r0, [r4, #8]
    be1e:	43b3      	bics	r3, r6
    be20:	81a3      	strh	r3, [r4, #12]
    be22:	61a0      	str	r0, [r4, #24]
    be24:	2204      	movs	r2, #4
    be26:	89a3      	ldrh	r3, [r4, #12]
    be28:	4313      	orrs	r3, r2
    be2a:	81a3      	strh	r3, [r4, #12]
    be2c:	e012      	b.n	be54 <__srefill_r+0x9c>
    be2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    be30:	2900      	cmp	r1, #0
    be32:	d00f      	beq.n	be54 <__srefill_r+0x9c>
    be34:	1c23      	adds	r3, r4, #0
    be36:	3344      	adds	r3, #68	; 0x44
    be38:	4299      	cmp	r1, r3
    be3a:	d002      	beq.n	be42 <__srefill_r+0x8a>
    be3c:	1c28      	adds	r0, r5, #0
    be3e:	f7fe fddf 	bl	aa00 <_free_r>
    be42:	2000      	movs	r0, #0
    be44:	6c23      	ldr	r3, [r4, #64]	; 0x40
    be46:	6360      	str	r0, [r4, #52]	; 0x34
    be48:	6063      	str	r3, [r4, #4]
    be4a:	4283      	cmp	r3, r0
    be4c:	d002      	beq.n	be54 <__srefill_r+0x9c>
    be4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    be50:	6023      	str	r3, [r4, #0]
    be52:	e035      	b.n	bec0 <__srefill_r+0x108>
    be54:	6923      	ldr	r3, [r4, #16]
    be56:	2b00      	cmp	r3, #0
    be58:	d103      	bne.n	be62 <__srefill_r+0xaa>
    be5a:	1c28      	adds	r0, r5, #0
    be5c:	1c21      	adds	r1, r4, #0
    be5e:	f7fe fd47 	bl	a8f0 <__smakebuf_r>
    be62:	89a7      	ldrh	r7, [r4, #12]
    be64:	b2be      	uxth	r6, r7
    be66:	07b3      	lsls	r3, r6, #30
    be68:	d00f      	beq.n	be8a <__srefill_r+0xd2>
    be6a:	2301      	movs	r3, #1
    be6c:	81a3      	strh	r3, [r4, #12]
    be6e:	4b18      	ldr	r3, [pc, #96]	; (bed0 <__srefill_r+0x118>)
    be70:	4918      	ldr	r1, [pc, #96]	; (bed4 <__srefill_r+0x11c>)
    be72:	6818      	ldr	r0, [r3, #0]
    be74:	f7fe fcd8 	bl	a828 <_fwalk>
    be78:	2309      	movs	r3, #9
    be7a:	81a7      	strh	r7, [r4, #12]
    be7c:	4033      	ands	r3, r6
    be7e:	2b09      	cmp	r3, #9
    be80:	d103      	bne.n	be8a <__srefill_r+0xd2>
    be82:	1c28      	adds	r0, r5, #0
    be84:	1c21      	adds	r1, r4, #0
    be86:	f7fe fa01 	bl	a28c <__sflush_r>
    be8a:	6923      	ldr	r3, [r4, #16]
    be8c:	1c28      	adds	r0, r5, #0
    be8e:	1c1a      	adds	r2, r3, #0
    be90:	6023      	str	r3, [r4, #0]
    be92:	6a21      	ldr	r1, [r4, #32]
    be94:	6963      	ldr	r3, [r4, #20]
    be96:	6a65      	ldr	r5, [r4, #36]	; 0x24
    be98:	47a8      	blx	r5
    be9a:	1c02      	adds	r2, r0, #0
    be9c:	6060      	str	r0, [r4, #4]
    be9e:	2000      	movs	r0, #0
    bea0:	4282      	cmp	r2, r0
    bea2:	dc0d      	bgt.n	bec0 <__srefill_r+0x108>
    bea4:	89a3      	ldrh	r3, [r4, #12]
    bea6:	4282      	cmp	r2, r0
    bea8:	d104      	bne.n	beb4 <__srefill_r+0xfc>
    beaa:	2220      	movs	r2, #32
    beac:	4313      	orrs	r3, r2
    beae:	81a3      	strh	r3, [r4, #12]
    beb0:	3801      	subs	r0, #1
    beb2:	e005      	b.n	bec0 <__srefill_r+0x108>
    beb4:	2240      	movs	r2, #64	; 0x40
    beb6:	4313      	orrs	r3, r2
    beb8:	6060      	str	r0, [r4, #4]
    beba:	81a3      	strh	r3, [r4, #12]
    bebc:	2001      	movs	r0, #1
    bebe:	4240      	negs	r0, r0
    bec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bec2:	46c0      	nop			; (mov r8, r8)
    bec4:	00010940 	.word	0x00010940
    bec8:	00010960 	.word	0x00010960
    becc:	00010980 	.word	0x00010980
    bed0:	000109a4 	.word	0x000109a4
    bed4:	0000bda1 	.word	0x0000bda1

0000bed8 <__srget_r>:
    bed8:	b538      	push	{r3, r4, r5, lr}
    beda:	1c05      	adds	r5, r0, #0
    bedc:	1c0c      	adds	r4, r1, #0
    bede:	2800      	cmp	r0, #0
    bee0:	d004      	beq.n	beec <__srget_r+0x14>
    bee2:	6983      	ldr	r3, [r0, #24]
    bee4:	2b00      	cmp	r3, #0
    bee6:	d101      	bne.n	beec <__srget_r+0x14>
    bee8:	f7fe fb14 	bl	a514 <__sinit>
    beec:	4b0f      	ldr	r3, [pc, #60]	; (bf2c <__srget_r+0x54>)
    beee:	429c      	cmp	r4, r3
    bef0:	d101      	bne.n	bef6 <__srget_r+0x1e>
    bef2:	686c      	ldr	r4, [r5, #4]
    bef4:	e008      	b.n	bf08 <__srget_r+0x30>
    bef6:	4b0e      	ldr	r3, [pc, #56]	; (bf30 <__srget_r+0x58>)
    bef8:	429c      	cmp	r4, r3
    befa:	d101      	bne.n	bf00 <__srget_r+0x28>
    befc:	68ac      	ldr	r4, [r5, #8]
    befe:	e003      	b.n	bf08 <__srget_r+0x30>
    bf00:	4b0c      	ldr	r3, [pc, #48]	; (bf34 <__srget_r+0x5c>)
    bf02:	429c      	cmp	r4, r3
    bf04:	d100      	bne.n	bf08 <__srget_r+0x30>
    bf06:	68ec      	ldr	r4, [r5, #12]
    bf08:	1c28      	adds	r0, r5, #0
    bf0a:	1c21      	adds	r1, r4, #0
    bf0c:	f7ff ff54 	bl	bdb8 <__srefill_r>
    bf10:	2800      	cmp	r0, #0
    bf12:	d107      	bne.n	bf24 <__srget_r+0x4c>
    bf14:	6863      	ldr	r3, [r4, #4]
    bf16:	3b01      	subs	r3, #1
    bf18:	6063      	str	r3, [r4, #4]
    bf1a:	6823      	ldr	r3, [r4, #0]
    bf1c:	1c5a      	adds	r2, r3, #1
    bf1e:	6022      	str	r2, [r4, #0]
    bf20:	7818      	ldrb	r0, [r3, #0]
    bf22:	e001      	b.n	bf28 <__srget_r+0x50>
    bf24:	2001      	movs	r0, #1
    bf26:	4240      	negs	r0, r0
    bf28:	bd38      	pop	{r3, r4, r5, pc}
    bf2a:	46c0      	nop			; (mov r8, r8)
    bf2c:	00010940 	.word	0x00010940
    bf30:	00010960 	.word	0x00010960
    bf34:	00010980 	.word	0x00010980

0000bf38 <__fpclassifyd>:
    bf38:	b530      	push	{r4, r5, lr}
    bf3a:	1c0c      	adds	r4, r1, #0
    bf3c:	2302      	movs	r3, #2
    bf3e:	4304      	orrs	r4, r0
    bf40:	d017      	beq.n	bf72 <__fpclassifyd+0x3a>
    bf42:	2480      	movs	r4, #128	; 0x80
    bf44:	0624      	lsls	r4, r4, #24
    bf46:	42a1      	cmp	r1, r4
    bf48:	d101      	bne.n	bf4e <__fpclassifyd+0x16>
    bf4a:	2800      	cmp	r0, #0
    bf4c:	d011      	beq.n	bf72 <__fpclassifyd+0x3a>
    bf4e:	4b0a      	ldr	r3, [pc, #40]	; (bf78 <__fpclassifyd+0x40>)
    bf50:	0049      	lsls	r1, r1, #1
    bf52:	0849      	lsrs	r1, r1, #1
    bf54:	4a09      	ldr	r2, [pc, #36]	; (bf7c <__fpclassifyd+0x44>)
    bf56:	18cc      	adds	r4, r1, r3
    bf58:	2304      	movs	r3, #4
    bf5a:	4294      	cmp	r4, r2
    bf5c:	d909      	bls.n	bf72 <__fpclassifyd+0x3a>
    bf5e:	4a08      	ldr	r2, [pc, #32]	; (bf80 <__fpclassifyd+0x48>)
    bf60:	3b01      	subs	r3, #1
    bf62:	4291      	cmp	r1, r2
    bf64:	d905      	bls.n	bf72 <__fpclassifyd+0x3a>
    bf66:	4a07      	ldr	r2, [pc, #28]	; (bf84 <__fpclassifyd+0x4c>)
    bf68:	2300      	movs	r3, #0
    bf6a:	4291      	cmp	r1, r2
    bf6c:	d101      	bne.n	bf72 <__fpclassifyd+0x3a>
    bf6e:	4243      	negs	r3, r0
    bf70:	4143      	adcs	r3, r0
    bf72:	1c18      	adds	r0, r3, #0
    bf74:	bd30      	pop	{r4, r5, pc}
    bf76:	46c0      	nop			; (mov r8, r8)
    bf78:	fff00000 	.word	0xfff00000
    bf7c:	7fdfffff 	.word	0x7fdfffff
    bf80:	000fffff 	.word	0x000fffff
    bf84:	7ff00000 	.word	0x7ff00000

0000bf88 <_sbrk_r>:
    bf88:	b538      	push	{r3, r4, r5, lr}
    bf8a:	2300      	movs	r3, #0
    bf8c:	4c06      	ldr	r4, [pc, #24]	; (bfa8 <_sbrk_r+0x20>)
    bf8e:	1c05      	adds	r5, r0, #0
    bf90:	1c08      	adds	r0, r1, #0
    bf92:	6023      	str	r3, [r4, #0]
    bf94:	f7f8 fb5e 	bl	4654 <_sbrk>
    bf98:	1c43      	adds	r3, r0, #1
    bf9a:	d103      	bne.n	bfa4 <_sbrk_r+0x1c>
    bf9c:	6823      	ldr	r3, [r4, #0]
    bf9e:	2b00      	cmp	r3, #0
    bfa0:	d000      	beq.n	bfa4 <_sbrk_r+0x1c>
    bfa2:	602b      	str	r3, [r5, #0]
    bfa4:	bd38      	pop	{r3, r4, r5, pc}
    bfa6:	46c0      	nop			; (mov r8, r8)
    bfa8:	20004518 	.word	0x20004518

0000bfac <__sccl>:
    bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfae:	780a      	ldrb	r2, [r1, #0]
    bfb0:	2a5e      	cmp	r2, #94	; 0x5e
    bfb2:	d002      	beq.n	bfba <__sccl+0xe>
    bfb4:	1c4b      	adds	r3, r1, #1
    bfb6:	2400      	movs	r4, #0
    bfb8:	e002      	b.n	bfc0 <__sccl+0x14>
    bfba:	2401      	movs	r4, #1
    bfbc:	784a      	ldrb	r2, [r1, #1]
    bfbe:	1c8b      	adds	r3, r1, #2
    bfc0:	1c01      	adds	r1, r0, #0
    bfc2:	1c45      	adds	r5, r0, #1
    bfc4:	35ff      	adds	r5, #255	; 0xff
    bfc6:	700c      	strb	r4, [r1, #0]
    bfc8:	3101      	adds	r1, #1
    bfca:	42a9      	cmp	r1, r5
    bfcc:	d1fb      	bne.n	bfc6 <__sccl+0x1a>
    bfce:	2a00      	cmp	r2, #0
    bfd0:	d101      	bne.n	bfd6 <__sccl+0x2a>
    bfd2:	1e58      	subs	r0, r3, #1
    bfd4:	e01c      	b.n	c010 <__sccl+0x64>
    bfd6:	2101      	movs	r1, #1
    bfd8:	1b0c      	subs	r4, r1, r4
    bfda:	b2e7      	uxtb	r7, r4
    bfdc:	5487      	strb	r7, [r0, r2]
    bfde:	7819      	ldrb	r1, [r3, #0]
    bfe0:	1c5e      	adds	r6, r3, #1
    bfe2:	292d      	cmp	r1, #45	; 0x2d
    bfe4:	d006      	beq.n	bff4 <__sccl+0x48>
    bfe6:	295d      	cmp	r1, #93	; 0x5d
    bfe8:	d00f      	beq.n	c00a <__sccl+0x5e>
    bfea:	2900      	cmp	r1, #0
    bfec:	d00f      	beq.n	c00e <__sccl+0x62>
    bfee:	1c0a      	adds	r2, r1, #0
    bff0:	1c33      	adds	r3, r6, #0
    bff2:	e7f2      	b.n	bfda <__sccl+0x2e>
    bff4:	785d      	ldrb	r5, [r3, #1]
    bff6:	2d5d      	cmp	r5, #93	; 0x5d
    bff8:	d0f9      	beq.n	bfee <__sccl+0x42>
    bffa:	4295      	cmp	r5, r2
    bffc:	dbf7      	blt.n	bfee <__sccl+0x42>
    bffe:	3302      	adds	r3, #2
    c000:	3201      	adds	r2, #1
    c002:	5487      	strb	r7, [r0, r2]
    c004:	42aa      	cmp	r2, r5
    c006:	dbfb      	blt.n	c000 <__sccl+0x54>
    c008:	e7e9      	b.n	bfde <__sccl+0x32>
    c00a:	1c30      	adds	r0, r6, #0
    c00c:	e000      	b.n	c010 <__sccl+0x64>
    c00e:	1c18      	adds	r0, r3, #0
    c010:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c012 <setbuf>:
    c012:	b508      	push	{r3, lr}
    c014:	424a      	negs	r2, r1
    c016:	414a      	adcs	r2, r1
    c018:	2380      	movs	r3, #128	; 0x80
    c01a:	0052      	lsls	r2, r2, #1
    c01c:	00db      	lsls	r3, r3, #3
    c01e:	f000 f801 	bl	c024 <setvbuf>
    c022:	bd08      	pop	{r3, pc}

0000c024 <setvbuf>:
    c024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c026:	1c1e      	adds	r6, r3, #0
    c028:	4b3c      	ldr	r3, [pc, #240]	; (c11c <setvbuf+0xf8>)
    c02a:	1c04      	adds	r4, r0, #0
    c02c:	681d      	ldr	r5, [r3, #0]
    c02e:	1c0f      	adds	r7, r1, #0
    c030:	9201      	str	r2, [sp, #4]
    c032:	2d00      	cmp	r5, #0
    c034:	d005      	beq.n	c042 <setvbuf+0x1e>
    c036:	69ab      	ldr	r3, [r5, #24]
    c038:	2b00      	cmp	r3, #0
    c03a:	d102      	bne.n	c042 <setvbuf+0x1e>
    c03c:	1c28      	adds	r0, r5, #0
    c03e:	f7fe fa69 	bl	a514 <__sinit>
    c042:	4b37      	ldr	r3, [pc, #220]	; (c120 <setvbuf+0xfc>)
    c044:	429c      	cmp	r4, r3
    c046:	d101      	bne.n	c04c <setvbuf+0x28>
    c048:	686c      	ldr	r4, [r5, #4]
    c04a:	e008      	b.n	c05e <setvbuf+0x3a>
    c04c:	4b35      	ldr	r3, [pc, #212]	; (c124 <setvbuf+0x100>)
    c04e:	429c      	cmp	r4, r3
    c050:	d101      	bne.n	c056 <setvbuf+0x32>
    c052:	68ac      	ldr	r4, [r5, #8]
    c054:	e003      	b.n	c05e <setvbuf+0x3a>
    c056:	4b34      	ldr	r3, [pc, #208]	; (c128 <setvbuf+0x104>)
    c058:	429c      	cmp	r4, r3
    c05a:	d100      	bne.n	c05e <setvbuf+0x3a>
    c05c:	68ec      	ldr	r4, [r5, #12]
    c05e:	9b01      	ldr	r3, [sp, #4]
    c060:	2b02      	cmp	r3, #2
    c062:	d858      	bhi.n	c116 <setvbuf+0xf2>
    c064:	2e00      	cmp	r6, #0
    c066:	db56      	blt.n	c116 <setvbuf+0xf2>
    c068:	1c28      	adds	r0, r5, #0
    c06a:	1c21      	adds	r1, r4, #0
    c06c:	f7fe f998 	bl	a3a0 <_fflush_r>
    c070:	2300      	movs	r3, #0
    c072:	6063      	str	r3, [r4, #4]
    c074:	61a3      	str	r3, [r4, #24]
    c076:	89a3      	ldrh	r3, [r4, #12]
    c078:	061b      	lsls	r3, r3, #24
    c07a:	d503      	bpl.n	c084 <setvbuf+0x60>
    c07c:	1c28      	adds	r0, r5, #0
    c07e:	6921      	ldr	r1, [r4, #16]
    c080:	f7fe fcbe 	bl	aa00 <_free_r>
    c084:	2283      	movs	r2, #131	; 0x83
    c086:	89a3      	ldrh	r3, [r4, #12]
    c088:	4393      	bics	r3, r2
    c08a:	81a3      	strh	r3, [r4, #12]
    c08c:	9b01      	ldr	r3, [sp, #4]
    c08e:	2b02      	cmp	r3, #2
    c090:	d013      	beq.n	c0ba <setvbuf+0x96>
    c092:	2f00      	cmp	r7, #0
    c094:	d125      	bne.n	c0e2 <setvbuf+0xbe>
    c096:	2e00      	cmp	r6, #0
    c098:	d101      	bne.n	c09e <setvbuf+0x7a>
    c09a:	2680      	movs	r6, #128	; 0x80
    c09c:	00f6      	lsls	r6, r6, #3
    c09e:	1c30      	adds	r0, r6, #0
    c0a0:	f7fe fc7e 	bl	a9a0 <malloc>
    c0a4:	1e07      	subs	r7, r0, #0
    c0a6:	d118      	bne.n	c0da <setvbuf+0xb6>
    c0a8:	2080      	movs	r0, #128	; 0x80
    c0aa:	00c0      	lsls	r0, r0, #3
    c0ac:	f7fe fc78 	bl	a9a0 <malloc>
    c0b0:	1e07      	subs	r7, r0, #0
    c0b2:	d110      	bne.n	c0d6 <setvbuf+0xb2>
    c0b4:	2001      	movs	r0, #1
    c0b6:	4240      	negs	r0, r0
    c0b8:	e000      	b.n	c0bc <setvbuf+0x98>
    c0ba:	2000      	movs	r0, #0
    c0bc:	2202      	movs	r2, #2
    c0be:	89a3      	ldrh	r3, [r4, #12]
    c0c0:	4313      	orrs	r3, r2
    c0c2:	81a3      	strh	r3, [r4, #12]
    c0c4:	2300      	movs	r3, #0
    c0c6:	60a3      	str	r3, [r4, #8]
    c0c8:	1c23      	adds	r3, r4, #0
    c0ca:	3347      	adds	r3, #71	; 0x47
    c0cc:	6023      	str	r3, [r4, #0]
    c0ce:	6123      	str	r3, [r4, #16]
    c0d0:	2301      	movs	r3, #1
    c0d2:	6163      	str	r3, [r4, #20]
    c0d4:	e021      	b.n	c11a <setvbuf+0xf6>
    c0d6:	2680      	movs	r6, #128	; 0x80
    c0d8:	00f6      	lsls	r6, r6, #3
    c0da:	2280      	movs	r2, #128	; 0x80
    c0dc:	89a3      	ldrh	r3, [r4, #12]
    c0de:	4313      	orrs	r3, r2
    c0e0:	81a3      	strh	r3, [r4, #12]
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	2b01      	cmp	r3, #1
    c0e6:	d105      	bne.n	c0f4 <setvbuf+0xd0>
    c0e8:	89a3      	ldrh	r3, [r4, #12]
    c0ea:	9a01      	ldr	r2, [sp, #4]
    c0ec:	431a      	orrs	r2, r3
    c0ee:	4273      	negs	r3, r6
    c0f0:	81a2      	strh	r2, [r4, #12]
    c0f2:	61a3      	str	r3, [r4, #24]
    c0f4:	4b0d      	ldr	r3, [pc, #52]	; (c12c <setvbuf+0x108>)
    c0f6:	2000      	movs	r0, #0
    c0f8:	62ab      	str	r3, [r5, #40]	; 0x28
    c0fa:	89a2      	ldrh	r2, [r4, #12]
    c0fc:	6027      	str	r7, [r4, #0]
    c0fe:	6127      	str	r7, [r4, #16]
    c100:	6166      	str	r6, [r4, #20]
    c102:	0713      	lsls	r3, r2, #28
    c104:	d509      	bpl.n	c11a <setvbuf+0xf6>
    c106:	2303      	movs	r3, #3
    c108:	401a      	ands	r2, r3
    c10a:	4253      	negs	r3, r2
    c10c:	4153      	adcs	r3, r2
    c10e:	425b      	negs	r3, r3
    c110:	401e      	ands	r6, r3
    c112:	60a6      	str	r6, [r4, #8]
    c114:	e001      	b.n	c11a <setvbuf+0xf6>
    c116:	2001      	movs	r0, #1
    c118:	4240      	negs	r0, r0
    c11a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c11c:	20000134 	.word	0x20000134
    c120:	00010940 	.word	0x00010940
    c124:	00010960 	.word	0x00010960
    c128:	00010980 	.word	0x00010980
    c12c:	0000a491 	.word	0x0000a491

0000c130 <nanf>:
    c130:	4800      	ldr	r0, [pc, #0]	; (c134 <nanf+0x4>)
    c132:	4770      	bx	lr
    c134:	7fc00000 	.word	0x7fc00000

0000c138 <_raise_r>:
    c138:	b538      	push	{r3, r4, r5, lr}
    c13a:	291f      	cmp	r1, #31
    c13c:	d904      	bls.n	c148 <_raise_r+0x10>
    c13e:	2316      	movs	r3, #22
    c140:	6003      	str	r3, [r0, #0]
    c142:	2001      	movs	r0, #1
    c144:	4240      	negs	r0, r0
    c146:	e020      	b.n	c18a <_raise_r+0x52>
    c148:	6c42      	ldr	r2, [r0, #68]	; 0x44
    c14a:	1c0d      	adds	r5, r1, #0
    c14c:	1c04      	adds	r4, r0, #0
    c14e:	2a00      	cmp	r2, #0
    c150:	d004      	beq.n	c15c <_raise_r+0x24>
    c152:	008b      	lsls	r3, r1, #2
    c154:	18d2      	adds	r2, r2, r3
    c156:	6813      	ldr	r3, [r2, #0]
    c158:	2b00      	cmp	r3, #0
    c15a:	d108      	bne.n	c16e <_raise_r+0x36>
    c15c:	1c20      	adds	r0, r4, #0
    c15e:	f000 f831 	bl	c1c4 <_getpid_r>
    c162:	1c2a      	adds	r2, r5, #0
    c164:	1c01      	adds	r1, r0, #0
    c166:	1c20      	adds	r0, r4, #0
    c168:	f000 f81a 	bl	c1a0 <_kill_r>
    c16c:	e00d      	b.n	c18a <_raise_r+0x52>
    c16e:	2000      	movs	r0, #0
    c170:	2b01      	cmp	r3, #1
    c172:	d00a      	beq.n	c18a <_raise_r+0x52>
    c174:	1c59      	adds	r1, r3, #1
    c176:	d103      	bne.n	c180 <_raise_r+0x48>
    c178:	3317      	adds	r3, #23
    c17a:	6023      	str	r3, [r4, #0]
    c17c:	3001      	adds	r0, #1
    c17e:	e004      	b.n	c18a <_raise_r+0x52>
    c180:	2400      	movs	r4, #0
    c182:	1c28      	adds	r0, r5, #0
    c184:	6014      	str	r4, [r2, #0]
    c186:	4798      	blx	r3
    c188:	1c20      	adds	r0, r4, #0
    c18a:	bd38      	pop	{r3, r4, r5, pc}

0000c18c <raise>:
    c18c:	b508      	push	{r3, lr}
    c18e:	4b03      	ldr	r3, [pc, #12]	; (c19c <raise+0x10>)
    c190:	1c01      	adds	r1, r0, #0
    c192:	6818      	ldr	r0, [r3, #0]
    c194:	f7ff ffd0 	bl	c138 <_raise_r>
    c198:	bd08      	pop	{r3, pc}
    c19a:	46c0      	nop			; (mov r8, r8)
    c19c:	20000134 	.word	0x20000134

0000c1a0 <_kill_r>:
    c1a0:	b538      	push	{r3, r4, r5, lr}
    c1a2:	2300      	movs	r3, #0
    c1a4:	4c06      	ldr	r4, [pc, #24]	; (c1c0 <_kill_r+0x20>)
    c1a6:	1c05      	adds	r5, r0, #0
    c1a8:	1c08      	adds	r0, r1, #0
    c1aa:	1c11      	adds	r1, r2, #0
    c1ac:	6023      	str	r3, [r4, #0]
    c1ae:	f003 fb17 	bl	f7e0 <_kill>
    c1b2:	1c43      	adds	r3, r0, #1
    c1b4:	d103      	bne.n	c1be <_kill_r+0x1e>
    c1b6:	6823      	ldr	r3, [r4, #0]
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	d000      	beq.n	c1be <_kill_r+0x1e>
    c1bc:	602b      	str	r3, [r5, #0]
    c1be:	bd38      	pop	{r3, r4, r5, pc}
    c1c0:	20004518 	.word	0x20004518

0000c1c4 <_getpid_r>:
    c1c4:	b508      	push	{r3, lr}
    c1c6:	f003 fb03 	bl	f7d0 <_getpid>
    c1ca:	bd08      	pop	{r3, pc}

0000c1cc <siprintf>:
    c1cc:	b40e      	push	{r1, r2, r3}
    c1ce:	b510      	push	{r4, lr}
    c1d0:	b09d      	sub	sp, #116	; 0x74
    c1d2:	a902      	add	r1, sp, #8
    c1d4:	9002      	str	r0, [sp, #8]
    c1d6:	6108      	str	r0, [r1, #16]
    c1d8:	480b      	ldr	r0, [pc, #44]	; (c208 <siprintf+0x3c>)
    c1da:	2482      	movs	r4, #130	; 0x82
    c1dc:	6088      	str	r0, [r1, #8]
    c1de:	6148      	str	r0, [r1, #20]
    c1e0:	2001      	movs	r0, #1
    c1e2:	4240      	negs	r0, r0
    c1e4:	ab1f      	add	r3, sp, #124	; 0x7c
    c1e6:	81c8      	strh	r0, [r1, #14]
    c1e8:	4808      	ldr	r0, [pc, #32]	; (c20c <siprintf+0x40>)
    c1ea:	cb04      	ldmia	r3!, {r2}
    c1ec:	00a4      	lsls	r4, r4, #2
    c1ee:	6800      	ldr	r0, [r0, #0]
    c1f0:	9301      	str	r3, [sp, #4]
    c1f2:	818c      	strh	r4, [r1, #12]
    c1f4:	f003 f802 	bl	f1fc <_svfiprintf_r>
    c1f8:	2300      	movs	r3, #0
    c1fa:	9a02      	ldr	r2, [sp, #8]
    c1fc:	7013      	strb	r3, [r2, #0]
    c1fe:	b01d      	add	sp, #116	; 0x74
    c200:	bc10      	pop	{r4}
    c202:	bc08      	pop	{r3}
    c204:	b003      	add	sp, #12
    c206:	4718      	bx	r3
    c208:	7fffffff 	.word	0x7fffffff
    c20c:	20000134 	.word	0x20000134

0000c210 <siscanf>:
    c210:	b40e      	push	{r1, r2, r3}
    c212:	2381      	movs	r3, #129	; 0x81
    c214:	b570      	push	{r4, r5, r6, lr}
    c216:	b09d      	sub	sp, #116	; 0x74
    c218:	ac02      	add	r4, sp, #8
    c21a:	ad21      	add	r5, sp, #132	; 0x84
    c21c:	009b      	lsls	r3, r3, #2
    c21e:	cd40      	ldmia	r5!, {r6}
    c220:	81a3      	strh	r3, [r4, #12]
    c222:	9002      	str	r0, [sp, #8]
    c224:	9006      	str	r0, [sp, #24]
    c226:	f000 f873 	bl	c310 <strlen>
    c22a:	4b0b      	ldr	r3, [pc, #44]	; (c258 <siscanf+0x48>)
    c22c:	6060      	str	r0, [r4, #4]
    c22e:	6263      	str	r3, [r4, #36]	; 0x24
    c230:	2300      	movs	r3, #0
    c232:	6363      	str	r3, [r4, #52]	; 0x34
    c234:	64a3      	str	r3, [r4, #72]	; 0x48
    c236:	3b01      	subs	r3, #1
    c238:	81e3      	strh	r3, [r4, #14]
    c23a:	4b08      	ldr	r3, [pc, #32]	; (c25c <siscanf+0x4c>)
    c23c:	6160      	str	r0, [r4, #20]
    c23e:	1c21      	adds	r1, r4, #0
    c240:	6818      	ldr	r0, [r3, #0]
    c242:	1c32      	adds	r2, r6, #0
    c244:	1c2b      	adds	r3, r5, #0
    c246:	9501      	str	r5, [sp, #4]
    c248:	f003 f92a 	bl	f4a0 <__ssvfiscanf_r>
    c24c:	b01d      	add	sp, #116	; 0x74
    c24e:	bc70      	pop	{r4, r5, r6}
    c250:	bc08      	pop	{r3}
    c252:	b003      	add	sp, #12
    c254:	4718      	bx	r3
    c256:	46c0      	nop			; (mov r8, r8)
    c258:	0000c289 	.word	0x0000c289
    c25c:	20000134 	.word	0x20000134

0000c260 <__sread>:
    c260:	b538      	push	{r3, r4, r5, lr}
    c262:	1c0c      	adds	r4, r1, #0
    c264:	250e      	movs	r5, #14
    c266:	5f49      	ldrsh	r1, [r1, r5]
    c268:	f003 fa92 	bl	f790 <_read_r>
    c26c:	2800      	cmp	r0, #0
    c26e:	db03      	blt.n	c278 <__sread+0x18>
    c270:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c272:	181b      	adds	r3, r3, r0
    c274:	6563      	str	r3, [r4, #84]	; 0x54
    c276:	e003      	b.n	c280 <__sread+0x20>
    c278:	89a2      	ldrh	r2, [r4, #12]
    c27a:	4b02      	ldr	r3, [pc, #8]	; (c284 <__sread+0x24>)
    c27c:	4013      	ands	r3, r2
    c27e:	81a3      	strh	r3, [r4, #12]
    c280:	bd38      	pop	{r3, r4, r5, pc}
    c282:	46c0      	nop			; (mov r8, r8)
    c284:	ffffefff 	.word	0xffffefff

0000c288 <__seofread>:
    c288:	2000      	movs	r0, #0
    c28a:	4770      	bx	lr

0000c28c <__swrite>:
    c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c28e:	1c1e      	adds	r6, r3, #0
    c290:	898b      	ldrh	r3, [r1, #12]
    c292:	1c05      	adds	r5, r0, #0
    c294:	1c0c      	adds	r4, r1, #0
    c296:	1c17      	adds	r7, r2, #0
    c298:	05db      	lsls	r3, r3, #23
    c29a:	d505      	bpl.n	c2a8 <__swrite+0x1c>
    c29c:	230e      	movs	r3, #14
    c29e:	5ec9      	ldrsh	r1, [r1, r3]
    c2a0:	2200      	movs	r2, #0
    c2a2:	2302      	movs	r3, #2
    c2a4:	f002 faea 	bl	e87c <_lseek_r>
    c2a8:	89a2      	ldrh	r2, [r4, #12]
    c2aa:	4b05      	ldr	r3, [pc, #20]	; (c2c0 <__swrite+0x34>)
    c2ac:	1c28      	adds	r0, r5, #0
    c2ae:	4013      	ands	r3, r2
    c2b0:	81a3      	strh	r3, [r4, #12]
    c2b2:	1c3a      	adds	r2, r7, #0
    c2b4:	230e      	movs	r3, #14
    c2b6:	5ee1      	ldrsh	r1, [r4, r3]
    c2b8:	1c33      	adds	r3, r6, #0
    c2ba:	f001 f845 	bl	d348 <_write_r>
    c2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2c0:	ffffefff 	.word	0xffffefff

0000c2c4 <__sseek>:
    c2c4:	b538      	push	{r3, r4, r5, lr}
    c2c6:	1c0c      	adds	r4, r1, #0
    c2c8:	250e      	movs	r5, #14
    c2ca:	5f49      	ldrsh	r1, [r1, r5]
    c2cc:	f002 fad6 	bl	e87c <_lseek_r>
    c2d0:	89a3      	ldrh	r3, [r4, #12]
    c2d2:	1c42      	adds	r2, r0, #1
    c2d4:	d103      	bne.n	c2de <__sseek+0x1a>
    c2d6:	4a05      	ldr	r2, [pc, #20]	; (c2ec <__sseek+0x28>)
    c2d8:	4013      	ands	r3, r2
    c2da:	81a3      	strh	r3, [r4, #12]
    c2dc:	e004      	b.n	c2e8 <__sseek+0x24>
    c2de:	2280      	movs	r2, #128	; 0x80
    c2e0:	0152      	lsls	r2, r2, #5
    c2e2:	4313      	orrs	r3, r2
    c2e4:	81a3      	strh	r3, [r4, #12]
    c2e6:	6560      	str	r0, [r4, #84]	; 0x54
    c2e8:	bd38      	pop	{r3, r4, r5, pc}
    c2ea:	46c0      	nop			; (mov r8, r8)
    c2ec:	ffffefff 	.word	0xffffefff

0000c2f0 <__sclose>:
    c2f0:	b508      	push	{r3, lr}
    c2f2:	230e      	movs	r3, #14
    c2f4:	5ec9      	ldrsh	r1, [r1, r3]
    c2f6:	f001 f8af 	bl	d458 <_close_r>
    c2fa:	bd08      	pop	{r3, pc}

0000c2fc <strcmp>:
    c2fc:	7802      	ldrb	r2, [r0, #0]
    c2fe:	780b      	ldrb	r3, [r1, #0]
    c300:	2a00      	cmp	r2, #0
    c302:	d003      	beq.n	c30c <strcmp+0x10>
    c304:	3001      	adds	r0, #1
    c306:	3101      	adds	r1, #1
    c308:	429a      	cmp	r2, r3
    c30a:	d0f7      	beq.n	c2fc <strcmp>
    c30c:	1ad0      	subs	r0, r2, r3
    c30e:	4770      	bx	lr

0000c310 <strlen>:
    c310:	2300      	movs	r3, #0
    c312:	5cc2      	ldrb	r2, [r0, r3]
    c314:	3301      	adds	r3, #1
    c316:	2a00      	cmp	r2, #0
    c318:	d1fb      	bne.n	c312 <strlen+0x2>
    c31a:	1e58      	subs	r0, r3, #1
    c31c:	4770      	bx	lr

0000c31e <strncmp>:
    c31e:	2300      	movs	r3, #0
    c320:	b530      	push	{r4, r5, lr}
    c322:	429a      	cmp	r2, r3
    c324:	d00d      	beq.n	c342 <strncmp+0x24>
    c326:	3a01      	subs	r2, #1
    c328:	5cc4      	ldrb	r4, [r0, r3]
    c32a:	5ccd      	ldrb	r5, [r1, r3]
    c32c:	42ac      	cmp	r4, r5
    c32e:	d102      	bne.n	c336 <strncmp+0x18>
    c330:	4293      	cmp	r3, r2
    c332:	d102      	bne.n	c33a <strncmp+0x1c>
    c334:	1c25      	adds	r5, r4, #0
    c336:	1b63      	subs	r3, r4, r5
    c338:	e003      	b.n	c342 <strncmp+0x24>
    c33a:	3301      	adds	r3, #1
    c33c:	2c00      	cmp	r4, #0
    c33e:	d1f3      	bne.n	c328 <strncmp+0xa>
    c340:	e7f8      	b.n	c334 <strncmp+0x16>
    c342:	1c18      	adds	r0, r3, #0
    c344:	bd30      	pop	{r4, r5, pc}

0000c346 <strncpy>:
    c346:	1c03      	adds	r3, r0, #0
    c348:	b530      	push	{r4, r5, lr}
    c34a:	2a00      	cmp	r2, #0
    c34c:	d007      	beq.n	c35e <strncpy+0x18>
    c34e:	780c      	ldrb	r4, [r1, #0]
    c350:	3301      	adds	r3, #1
    c352:	1e5d      	subs	r5, r3, #1
    c354:	3a01      	subs	r2, #1
    c356:	702c      	strb	r4, [r5, #0]
    c358:	3101      	adds	r1, #1
    c35a:	2c00      	cmp	r4, #0
    c35c:	d1f5      	bne.n	c34a <strncpy+0x4>
    c35e:	189a      	adds	r2, r3, r2
    c360:	4293      	cmp	r3, r2
    c362:	d003      	beq.n	c36c <strncpy+0x26>
    c364:	2100      	movs	r1, #0
    c366:	7019      	strb	r1, [r3, #0]
    c368:	3301      	adds	r3, #1
    c36a:	e7f9      	b.n	c360 <strncpy+0x1a>
    c36c:	bd30      	pop	{r4, r5, pc}

0000c36e <match>:
    c36e:	b530      	push	{r4, r5, lr}
    c370:	6803      	ldr	r3, [r0, #0]
    c372:	780c      	ldrb	r4, [r1, #0]
    c374:	3301      	adds	r3, #1
    c376:	2c00      	cmp	r4, #0
    c378:	d00a      	beq.n	c390 <match+0x22>
    c37a:	781a      	ldrb	r2, [r3, #0]
    c37c:	1c15      	adds	r5, r2, #0
    c37e:	3d41      	subs	r5, #65	; 0x41
    c380:	2d19      	cmp	r5, #25
    c382:	d800      	bhi.n	c386 <match+0x18>
    c384:	3220      	adds	r2, #32
    c386:	3101      	adds	r1, #1
    c388:	42a2      	cmp	r2, r4
    c38a:	d0f2      	beq.n	c372 <match+0x4>
    c38c:	2000      	movs	r0, #0
    c38e:	e001      	b.n	c394 <match+0x26>
    c390:	6003      	str	r3, [r0, #0]
    c392:	2001      	movs	r0, #1
    c394:	bd30      	pop	{r4, r5, pc}
	...

0000c398 <sulp>:
    c398:	b570      	push	{r4, r5, r6, lr}
    c39a:	1c16      	adds	r6, r2, #0
    c39c:	1c0d      	adds	r5, r1, #0
    c39e:	f002 fd6d 	bl	ee7c <__ulp>
    c3a2:	2e00      	cmp	r6, #0
    c3a4:	d00b      	beq.n	c3be <sulp+0x26>
    c3a6:	226b      	movs	r2, #107	; 0x6b
    c3a8:	006b      	lsls	r3, r5, #1
    c3aa:	0d5b      	lsrs	r3, r3, #21
    c3ac:	1ad3      	subs	r3, r2, r3
    c3ae:	2b00      	cmp	r3, #0
    c3b0:	dd05      	ble.n	c3be <sulp+0x26>
    c3b2:	4d03      	ldr	r5, [pc, #12]	; (c3c0 <sulp+0x28>)
    c3b4:	051c      	lsls	r4, r3, #20
    c3b6:	2200      	movs	r2, #0
    c3b8:	1963      	adds	r3, r4, r5
    c3ba:	f7fc ff19 	bl	91f0 <__aeabi_dmul>
    c3be:	bd70      	pop	{r4, r5, r6, pc}
    c3c0:	3ff00000 	.word	0x3ff00000

0000c3c4 <_strtod_r>:
    c3c4:	2300      	movs	r3, #0
    c3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3c8:	b0a3      	sub	sp, #140	; 0x8c
    c3ca:	931e      	str	r3, [sp, #120]	; 0x78
    c3cc:	2600      	movs	r6, #0
    c3ce:	2700      	movs	r7, #0
    c3d0:	1c0b      	adds	r3, r1, #0
    c3d2:	9003      	str	r0, [sp, #12]
    c3d4:	9106      	str	r1, [sp, #24]
    c3d6:	9219      	str	r2, [sp, #100]	; 0x64
    c3d8:	931d      	str	r3, [sp, #116]	; 0x74
    c3da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c3dc:	781a      	ldrb	r2, [r3, #0]
    c3de:	2a0d      	cmp	r2, #13
    c3e0:	d805      	bhi.n	c3ee <_strtod_r+0x2a>
    c3e2:	2a09      	cmp	r2, #9
    c3e4:	d214      	bcs.n	c410 <_strtod_r+0x4c>
    c3e6:	2a00      	cmp	r2, #0
    c3e8:	d100      	bne.n	c3ec <_strtod_r+0x28>
    c3ea:	e1c3      	b.n	c774 <_strtod_r+0x3b0>
    c3ec:	e012      	b.n	c414 <_strtod_r+0x50>
    c3ee:	2a2b      	cmp	r2, #43	; 0x2b
    c3f0:	d006      	beq.n	c400 <_strtod_r+0x3c>
    c3f2:	2a2d      	cmp	r2, #45	; 0x2d
    c3f4:	d002      	beq.n	c3fc <_strtod_r+0x38>
    c3f6:	2a20      	cmp	r2, #32
    c3f8:	d10c      	bne.n	c414 <_strtod_r+0x50>
    c3fa:	e009      	b.n	c410 <_strtod_r+0x4c>
    c3fc:	2201      	movs	r2, #1
    c3fe:	e000      	b.n	c402 <_strtod_r+0x3e>
    c400:	2200      	movs	r2, #0
    c402:	920d      	str	r2, [sp, #52]	; 0x34
    c404:	1c5a      	adds	r2, r3, #1
    c406:	921d      	str	r2, [sp, #116]	; 0x74
    c408:	785b      	ldrb	r3, [r3, #1]
    c40a:	2b00      	cmp	r3, #0
    c40c:	d104      	bne.n	c418 <_strtod_r+0x54>
    c40e:	e1b1      	b.n	c774 <_strtod_r+0x3b0>
    c410:	3301      	adds	r3, #1
    c412:	e7e1      	b.n	c3d8 <_strtod_r+0x14>
    c414:	2300      	movs	r3, #0
    c416:	930d      	str	r3, [sp, #52]	; 0x34
    c418:	2200      	movs	r2, #0
    c41a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    c41c:	920a      	str	r2, [sp, #40]	; 0x28
    c41e:	782b      	ldrb	r3, [r5, #0]
    c420:	2b30      	cmp	r3, #48	; 0x30
    c422:	d15d      	bne.n	c4e0 <_strtod_r+0x11c>
    c424:	786b      	ldrb	r3, [r5, #1]
    c426:	2b58      	cmp	r3, #88	; 0x58
    c428:	d001      	beq.n	c42e <_strtod_r+0x6a>
    c42a:	2b78      	cmp	r3, #120	; 0x78
    c42c:	d14c      	bne.n	c4c8 <_strtod_r+0x104>
    c42e:	ab1e      	add	r3, sp, #120	; 0x78
    c430:	9300      	str	r3, [sp, #0]
    c432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c434:	9803      	ldr	r0, [sp, #12]
    c436:	9301      	str	r3, [sp, #4]
    c438:	a91d      	add	r1, sp, #116	; 0x74
    c43a:	4ac2      	ldr	r2, [pc, #776]	; (c744 <_strtod_r+0x380>)
    c43c:	ab1f      	add	r3, sp, #124	; 0x7c
    c43e:	f001 ff38 	bl	e2b2 <__gethex>
    c442:	2407      	movs	r4, #7
    c444:	9004      	str	r0, [sp, #16]
    c446:	4004      	ands	r4, r0
    c448:	d101      	bne.n	c44e <_strtod_r+0x8a>
    c44a:	f000 fda7 	bl	cf9c <_strtod_r+0xbd8>
    c44e:	2c06      	cmp	r4, #6
    c450:	d105      	bne.n	c45e <_strtod_r+0x9a>
    c452:	2300      	movs	r3, #0
    c454:	3501      	adds	r5, #1
    c456:	951d      	str	r5, [sp, #116]	; 0x74
    c458:	930d      	str	r3, [sp, #52]	; 0x34
    c45a:	f000 fd9f 	bl	cf9c <_strtod_r+0xbd8>
    c45e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    c460:	2a00      	cmp	r2, #0
    c462:	d007      	beq.n	c474 <_strtod_r+0xb0>
    c464:	a820      	add	r0, sp, #128	; 0x80
    c466:	2135      	movs	r1, #53	; 0x35
    c468:	f002 fdfc 	bl	f064 <__copybits>
    c46c:	9803      	ldr	r0, [sp, #12]
    c46e:	991e      	ldr	r1, [sp, #120]	; 0x78
    c470:	f002 fa64 	bl	e93c <_Bfree>
    c474:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c476:	2c06      	cmp	r4, #6
    c478:	d81c      	bhi.n	c4b4 <_strtod_r+0xf0>
    c47a:	1c20      	adds	r0, r4, #0
    c47c:	f003 f9b8 	bl	f7f0 <__gnu_thumb1_case_uqi>
    c480:	14070a04 	.word	0x14070a04
    c484:	0a17      	.short	0x0a17
    c486:	04          	.byte	0x04
    c487:	00          	.byte	0x00
    c488:	2700      	movs	r7, #0
    c48a:	1c3e      	adds	r6, r7, #0
    c48c:	e012      	b.n	c4b4 <_strtod_r+0xf0>
    c48e:	9e20      	ldr	r6, [sp, #128]	; 0x80
    c490:	9f21      	ldr	r7, [sp, #132]	; 0x84
    c492:	e00f      	b.n	c4b4 <_strtod_r+0xf0>
    c494:	4aac      	ldr	r2, [pc, #688]	; (c748 <_strtod_r+0x384>)
    c496:	9921      	ldr	r1, [sp, #132]	; 0x84
    c498:	189b      	adds	r3, r3, r2
    c49a:	4aac      	ldr	r2, [pc, #688]	; (c74c <_strtod_r+0x388>)
    c49c:	051b      	lsls	r3, r3, #20
    c49e:	400a      	ands	r2, r1
    c4a0:	4313      	orrs	r3, r2
    c4a2:	9e20      	ldr	r6, [sp, #128]	; 0x80
    c4a4:	1c1f      	adds	r7, r3, #0
    c4a6:	e005      	b.n	c4b4 <_strtod_r+0xf0>
    c4a8:	4fa9      	ldr	r7, [pc, #676]	; (c750 <_strtod_r+0x38c>)
    c4aa:	2600      	movs	r6, #0
    c4ac:	e002      	b.n	c4b4 <_strtod_r+0xf0>
    c4ae:	2601      	movs	r6, #1
    c4b0:	4fa8      	ldr	r7, [pc, #672]	; (c754 <_strtod_r+0x390>)
    c4b2:	4276      	negs	r6, r6
    c4b4:	9b04      	ldr	r3, [sp, #16]
    c4b6:	071b      	lsls	r3, r3, #28
    c4b8:	d401      	bmi.n	c4be <_strtod_r+0xfa>
    c4ba:	f000 fd6f 	bl	cf9c <_strtod_r+0xbd8>
    c4be:	2380      	movs	r3, #128	; 0x80
    c4c0:	061b      	lsls	r3, r3, #24
    c4c2:	431f      	orrs	r7, r3
    c4c4:	f000 fd6a 	bl	cf9c <_strtod_r+0xbd8>
    c4c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c4ca:	1c5a      	adds	r2, r3, #1
    c4cc:	921d      	str	r2, [sp, #116]	; 0x74
    c4ce:	785b      	ldrb	r3, [r3, #1]
    c4d0:	2b30      	cmp	r3, #48	; 0x30
    c4d2:	d0f9      	beq.n	c4c8 <_strtod_r+0x104>
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d101      	bne.n	c4dc <_strtod_r+0x118>
    c4d8:	f000 fd60 	bl	cf9c <_strtod_r+0xbd8>
    c4dc:	2301      	movs	r3, #1
    c4de:	930a      	str	r3, [sp, #40]	; 0x28
    c4e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c4e2:	930c      	str	r3, [sp, #48]	; 0x30
    c4e4:	2300      	movs	r3, #0
    c4e6:	9305      	str	r3, [sp, #20]
    c4e8:	9307      	str	r3, [sp, #28]
    c4ea:	9304      	str	r3, [sp, #16]
    c4ec:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    c4ee:	7823      	ldrb	r3, [r4, #0]
    c4f0:	1c1a      	adds	r2, r3, #0
    c4f2:	3a30      	subs	r2, #48	; 0x30
    c4f4:	9308      	str	r3, [sp, #32]
    c4f6:	b2d3      	uxtb	r3, r2
    c4f8:	2b09      	cmp	r3, #9
    c4fa:	d812      	bhi.n	c522 <_strtod_r+0x15e>
    c4fc:	9904      	ldr	r1, [sp, #16]
    c4fe:	230a      	movs	r3, #10
    c500:	2908      	cmp	r1, #8
    c502:	dc04      	bgt.n	c50e <_strtod_r+0x14a>
    c504:	9907      	ldr	r1, [sp, #28]
    c506:	434b      	muls	r3, r1
    c508:	18d3      	adds	r3, r2, r3
    c50a:	9307      	str	r3, [sp, #28]
    c50c:	e003      	b.n	c516 <_strtod_r+0x152>
    c50e:	9905      	ldr	r1, [sp, #20]
    c510:	434b      	muls	r3, r1
    c512:	18d3      	adds	r3, r2, r3
    c514:	9305      	str	r3, [sp, #20]
    c516:	9b04      	ldr	r3, [sp, #16]
    c518:	3401      	adds	r4, #1
    c51a:	3301      	adds	r3, #1
    c51c:	9304      	str	r3, [sp, #16]
    c51e:	941d      	str	r4, [sp, #116]	; 0x74
    c520:	e7e4      	b.n	c4ec <_strtod_r+0x128>
    c522:	9803      	ldr	r0, [sp, #12]
    c524:	f002 f9a6 	bl	e874 <_localeconv_r>
    c528:	6805      	ldr	r5, [r0, #0]
    c52a:	9803      	ldr	r0, [sp, #12]
    c52c:	f002 f9a2 	bl	e874 <_localeconv_r>
    c530:	6800      	ldr	r0, [r0, #0]
    c532:	f7ff feed 	bl	c310 <strlen>
    c536:	1c29      	adds	r1, r5, #0
    c538:	1c02      	adds	r2, r0, #0
    c53a:	1c20      	adds	r0, r4, #0
    c53c:	f7ff feef 	bl	c31e <strncmp>
    c540:	1e05      	subs	r5, r0, #0
    c542:	d005      	beq.n	c550 <_strtod_r+0x18c>
    c544:	2000      	movs	r0, #0
    c546:	9b08      	ldr	r3, [sp, #32]
    c548:	9c04      	ldr	r4, [sp, #16]
    c54a:	1c01      	adds	r1, r0, #0
    c54c:	9008      	str	r0, [sp, #32]
    c54e:	e05a      	b.n	c606 <_strtod_r+0x242>
    c550:	9803      	ldr	r0, [sp, #12]
    c552:	f002 f98f 	bl	e874 <_localeconv_r>
    c556:	6800      	ldr	r0, [r0, #0]
    c558:	f7ff feda 	bl	c310 <strlen>
    c55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c55e:	9a04      	ldr	r2, [sp, #16]
    c560:	1818      	adds	r0, r3, r0
    c562:	901d      	str	r0, [sp, #116]	; 0x74
    c564:	7803      	ldrb	r3, [r0, #0]
    c566:	1e10      	subs	r0, r2, #0
    c568:	d141      	bne.n	c5ee <_strtod_r+0x22a>
    c56a:	2b30      	cmp	r3, #48	; 0x30
    c56c:	d105      	bne.n	c57a <_strtod_r+0x1b6>
    c56e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c570:	3001      	adds	r0, #1
    c572:	1c5a      	adds	r2, r3, #1
    c574:	921d      	str	r2, [sp, #116]	; 0x74
    c576:	785b      	ldrb	r3, [r3, #1]
    c578:	e7f7      	b.n	c56a <_strtod_r+0x1a6>
    c57a:	1c1a      	adds	r2, r3, #0
    c57c:	3a31      	subs	r2, #49	; 0x31
    c57e:	2a08      	cmp	r2, #8
    c580:	d83d      	bhi.n	c5fe <_strtod_r+0x23a>
    c582:	1c01      	adds	r1, r0, #0
    c584:	2000      	movs	r0, #0
    c586:	1c04      	adds	r4, r0, #0
    c588:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c58a:	920c      	str	r2, [sp, #48]	; 0x30
    c58c:	3b30      	subs	r3, #48	; 0x30
    c58e:	1c42      	adds	r2, r0, #1
    c590:	2b00      	cmp	r3, #0
    c592:	d026      	beq.n	c5e2 <_strtod_r+0x21e>
    c594:	1889      	adds	r1, r1, r2
    c596:	1c22      	adds	r2, r4, #0
    c598:	1900      	adds	r0, r0, r4
    c59a:	4282      	cmp	r2, r0
    c59c:	d00f      	beq.n	c5be <_strtod_r+0x1fa>
    c59e:	3201      	adds	r2, #1
    c5a0:	1e54      	subs	r4, r2, #1
    c5a2:	2c08      	cmp	r4, #8
    c5a4:	dc04      	bgt.n	c5b0 <_strtod_r+0x1ec>
    c5a6:	240a      	movs	r4, #10
    c5a8:	9d07      	ldr	r5, [sp, #28]
    c5aa:	4365      	muls	r5, r4
    c5ac:	9507      	str	r5, [sp, #28]
    c5ae:	e7f4      	b.n	c59a <_strtod_r+0x1d6>
    c5b0:	2a10      	cmp	r2, #16
    c5b2:	dcf2      	bgt.n	c59a <_strtod_r+0x1d6>
    c5b4:	240a      	movs	r4, #10
    c5b6:	9d05      	ldr	r5, [sp, #20]
    c5b8:	4365      	muls	r5, r4
    c5ba:	9505      	str	r5, [sp, #20]
    c5bc:	e7ed      	b.n	c59a <_strtod_r+0x1d6>
    c5be:	1c54      	adds	r4, r2, #1
    c5c0:	2a08      	cmp	r2, #8
    c5c2:	dc06      	bgt.n	c5d2 <_strtod_r+0x20e>
    c5c4:	220a      	movs	r2, #10
    c5c6:	9807      	ldr	r0, [sp, #28]
    c5c8:	4342      	muls	r2, r0
    c5ca:	18d3      	adds	r3, r2, r3
    c5cc:	9307      	str	r3, [sp, #28]
    c5ce:	2200      	movs	r2, #0
    c5d0:	e007      	b.n	c5e2 <_strtod_r+0x21e>
    c5d2:	2200      	movs	r2, #0
    c5d4:	2c10      	cmp	r4, #16
    c5d6:	dc04      	bgt.n	c5e2 <_strtod_r+0x21e>
    c5d8:	200a      	movs	r0, #10
    c5da:	9d05      	ldr	r5, [sp, #20]
    c5dc:	4368      	muls	r0, r5
    c5de:	18c3      	adds	r3, r0, r3
    c5e0:	9305      	str	r3, [sp, #20]
    c5e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c5e4:	1c58      	adds	r0, r3, #1
    c5e6:	901d      	str	r0, [sp, #116]	; 0x74
    c5e8:	785b      	ldrb	r3, [r3, #1]
    c5ea:	1c10      	adds	r0, r2, #0
    c5ec:	e002      	b.n	c5f4 <_strtod_r+0x230>
    c5ee:	1c28      	adds	r0, r5, #0
    c5f0:	1c29      	adds	r1, r5, #0
    c5f2:	9c04      	ldr	r4, [sp, #16]
    c5f4:	1c1a      	adds	r2, r3, #0
    c5f6:	3a30      	subs	r2, #48	; 0x30
    c5f8:	2a09      	cmp	r2, #9
    c5fa:	d9c7      	bls.n	c58c <_strtod_r+0x1c8>
    c5fc:	e001      	b.n	c602 <_strtod_r+0x23e>
    c5fe:	2400      	movs	r4, #0
    c600:	1c21      	adds	r1, r4, #0
    c602:	2201      	movs	r2, #1
    c604:	9208      	str	r2, [sp, #32]
    c606:	2220      	movs	r2, #32
    c608:	1c1d      	adds	r5, r3, #0
    c60a:	4395      	bics	r5, r2
    c60c:	2200      	movs	r2, #0
    c60e:	2d45      	cmp	r5, #69	; 0x45
    c610:	d157      	bne.n	c6c2 <_strtod_r+0x2fe>
    c612:	1c23      	adds	r3, r4, #0
    c614:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    c616:	4303      	orrs	r3, r0
    c618:	432b      	orrs	r3, r5
    c61a:	4293      	cmp	r3, r2
    c61c:	d100      	bne.n	c620 <_strtod_r+0x25c>
    c61e:	e0a9      	b.n	c774 <_strtod_r+0x3b0>
    c620:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c622:	9306      	str	r3, [sp, #24]
    c624:	3301      	adds	r3, #1
    c626:	931d      	str	r3, [sp, #116]	; 0x74
    c628:	9b06      	ldr	r3, [sp, #24]
    c62a:	785b      	ldrb	r3, [r3, #1]
    c62c:	2b2b      	cmp	r3, #43	; 0x2b
    c62e:	d006      	beq.n	c63e <_strtod_r+0x27a>
    c630:	2b2d      	cmp	r3, #45	; 0x2d
    c632:	d001      	beq.n	c638 <_strtod_r+0x274>
    c634:	9209      	str	r2, [sp, #36]	; 0x24
    c636:	e008      	b.n	c64a <_strtod_r+0x286>
    c638:	2301      	movs	r3, #1
    c63a:	9309      	str	r3, [sp, #36]	; 0x24
    c63c:	e000      	b.n	c640 <_strtod_r+0x27c>
    c63e:	9209      	str	r2, [sp, #36]	; 0x24
    c640:	9b06      	ldr	r3, [sp, #24]
    c642:	3302      	adds	r3, #2
    c644:	931d      	str	r3, [sp, #116]	; 0x74
    c646:	9b06      	ldr	r3, [sp, #24]
    c648:	789b      	ldrb	r3, [r3, #2]
    c64a:	1c1a      	adds	r2, r3, #0
    c64c:	3a30      	subs	r2, #48	; 0x30
    c64e:	2a09      	cmp	r2, #9
    c650:	d834      	bhi.n	c6bc <_strtod_r+0x2f8>
    c652:	2b30      	cmp	r3, #48	; 0x30
    c654:	d104      	bne.n	c660 <_strtod_r+0x29c>
    c656:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c658:	1c5a      	adds	r2, r3, #1
    c65a:	921d      	str	r2, [sp, #116]	; 0x74
    c65c:	785b      	ldrb	r3, [r3, #1]
    c65e:	e7f8      	b.n	c652 <_strtod_r+0x28e>
    c660:	2531      	movs	r5, #49	; 0x31
    c662:	426d      	negs	r5, r5
    c664:	46ac      	mov	ip, r5
    c666:	449c      	add	ip, r3
    c668:	4665      	mov	r5, ip
    c66a:	2200      	movs	r2, #0
    c66c:	2d08      	cmp	r5, #8
    c66e:	d828      	bhi.n	c6c2 <_strtod_r+0x2fe>
    c670:	3b30      	subs	r3, #48	; 0x30
    c672:	930b      	str	r3, [sp, #44]	; 0x2c
    c674:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c676:	930e      	str	r3, [sp, #56]	; 0x38
    c678:	2530      	movs	r5, #48	; 0x30
    c67a:	426d      	negs	r5, r5
    c67c:	46ac      	mov	ip, r5
    c67e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c680:	1c5a      	adds	r2, r3, #1
    c682:	921d      	str	r2, [sp, #116]	; 0x74
    c684:	785b      	ldrb	r3, [r3, #1]
    c686:	449c      	add	ip, r3
    c688:	4665      	mov	r5, ip
    c68a:	2d09      	cmp	r5, #9
    c68c:	d806      	bhi.n	c69c <_strtod_r+0x2d8>
    c68e:	220a      	movs	r2, #10
    c690:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c692:	436a      	muls	r2, r5
    c694:	18d3      	adds	r3, r2, r3
    c696:	3b30      	subs	r3, #48	; 0x30
    c698:	930b      	str	r3, [sp, #44]	; 0x2c
    c69a:	e7ed      	b.n	c678 <_strtod_r+0x2b4>
    c69c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    c69e:	1b52      	subs	r2, r2, r5
    c6a0:	1e15      	subs	r5, r2, #0
    c6a2:	4a2d      	ldr	r2, [pc, #180]	; (c758 <_strtod_r+0x394>)
    c6a4:	4694      	mov	ip, r2
    c6a6:	2d08      	cmp	r5, #8
    c6a8:	dc03      	bgt.n	c6b2 <_strtod_r+0x2ee>
    c6aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c6ac:	4562      	cmp	r2, ip
    c6ae:	dd00      	ble.n	c6b2 <_strtod_r+0x2ee>
    c6b0:	4662      	mov	r2, ip
    c6b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c6b4:	2d00      	cmp	r5, #0
    c6b6:	d004      	beq.n	c6c2 <_strtod_r+0x2fe>
    c6b8:	4252      	negs	r2, r2
    c6ba:	e002      	b.n	c6c2 <_strtod_r+0x2fe>
    c6bc:	9a06      	ldr	r2, [sp, #24]
    c6be:	921d      	str	r2, [sp, #116]	; 0x74
    c6c0:	2200      	movs	r2, #0
    c6c2:	2c00      	cmp	r4, #0
    c6c4:	d161      	bne.n	c78a <_strtod_r+0x3c6>
    c6c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c6c8:	4310      	orrs	r0, r2
    c6ca:	d001      	beq.n	c6d0 <_strtod_r+0x30c>
    c6cc:	f000 fc66 	bl	cf9c <_strtod_r+0xbd8>
    c6d0:	9a08      	ldr	r2, [sp, #32]
    c6d2:	2a00      	cmp	r2, #0
    c6d4:	d14e      	bne.n	c774 <_strtod_r+0x3b0>
    c6d6:	2b4e      	cmp	r3, #78	; 0x4e
    c6d8:	d01c      	beq.n	c714 <_strtod_r+0x350>
    c6da:	dc02      	bgt.n	c6e2 <_strtod_r+0x31e>
    c6dc:	2b49      	cmp	r3, #73	; 0x49
    c6de:	d005      	beq.n	c6ec <_strtod_r+0x328>
    c6e0:	e048      	b.n	c774 <_strtod_r+0x3b0>
    c6e2:	2b69      	cmp	r3, #105	; 0x69
    c6e4:	d002      	beq.n	c6ec <_strtod_r+0x328>
    c6e6:	2b6e      	cmp	r3, #110	; 0x6e
    c6e8:	d014      	beq.n	c714 <_strtod_r+0x350>
    c6ea:	e043      	b.n	c774 <_strtod_r+0x3b0>
    c6ec:	a81d      	add	r0, sp, #116	; 0x74
    c6ee:	491b      	ldr	r1, [pc, #108]	; (c75c <_strtod_r+0x398>)
    c6f0:	f7ff fe3d 	bl	c36e <match>
    c6f4:	2800      	cmp	r0, #0
    c6f6:	d03d      	beq.n	c774 <_strtod_r+0x3b0>
    c6f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c6fa:	a81d      	add	r0, sp, #116	; 0x74
    c6fc:	3b01      	subs	r3, #1
    c6fe:	4918      	ldr	r1, [pc, #96]	; (c760 <_strtod_r+0x39c>)
    c700:	931d      	str	r3, [sp, #116]	; 0x74
    c702:	f7ff fe34 	bl	c36e <match>
    c706:	2800      	cmp	r0, #0
    c708:	d102      	bne.n	c710 <_strtod_r+0x34c>
    c70a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c70c:	3301      	adds	r3, #1
    c70e:	931d      	str	r3, [sp, #116]	; 0x74
    c710:	4f0f      	ldr	r7, [pc, #60]	; (c750 <_strtod_r+0x38c>)
    c712:	e02c      	b.n	c76e <_strtod_r+0x3aa>
    c714:	a81d      	add	r0, sp, #116	; 0x74
    c716:	4913      	ldr	r1, [pc, #76]	; (c764 <_strtod_r+0x3a0>)
    c718:	f7ff fe29 	bl	c36e <match>
    c71c:	2800      	cmp	r0, #0
    c71e:	d029      	beq.n	c774 <_strtod_r+0x3b0>
    c720:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c722:	781b      	ldrb	r3, [r3, #0]
    c724:	2b28      	cmp	r3, #40	; 0x28
    c726:	d121      	bne.n	c76c <_strtod_r+0x3a8>
    c728:	a81d      	add	r0, sp, #116	; 0x74
    c72a:	490f      	ldr	r1, [pc, #60]	; (c768 <_strtod_r+0x3a4>)
    c72c:	aa20      	add	r2, sp, #128	; 0x80
    c72e:	f001 fff6 	bl	e71e <__hexnan>
    c732:	2805      	cmp	r0, #5
    c734:	d11a      	bne.n	c76c <_strtod_r+0x3a8>
    c736:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c738:	4a05      	ldr	r2, [pc, #20]	; (c750 <_strtod_r+0x38c>)
    c73a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    c73c:	431a      	orrs	r2, r3
    c73e:	1c17      	adds	r7, r2, #0
    c740:	f000 fc2c 	bl	cf9c <_strtod_r+0xbd8>
    c744:	00010a58 	.word	0x00010a58
    c748:	00000433 	.word	0x00000433
    c74c:	ffefffff 	.word	0xffefffff
    c750:	7ff00000 	.word	0x7ff00000
    c754:	7fffffff 	.word	0x7fffffff
    c758:	00004e1f 	.word	0x00004e1f
    c75c:	000109be 	.word	0x000109be
    c760:	00010b70 	.word	0x00010b70
    c764:	000109c6 	.word	0x000109c6
    c768:	00010a18 	.word	0x00010a18
    c76c:	4f92      	ldr	r7, [pc, #584]	; (c9b8 <_strtod_r+0x5f4>)
    c76e:	2600      	movs	r6, #0
    c770:	f000 fc14 	bl	cf9c <_strtod_r+0xbd8>
    c774:	9b06      	ldr	r3, [sp, #24]
    c776:	931d      	str	r3, [sp, #116]	; 0x74
    c778:	2300      	movs	r3, #0
    c77a:	930d      	str	r3, [sp, #52]	; 0x34
    c77c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c77e:	2b00      	cmp	r3, #0
    c780:	d001      	beq.n	c786 <_strtod_r+0x3c2>
    c782:	f000 fc0e 	bl	cfa2 <_strtod_r+0xbde>
    c786:	f000 fc17 	bl	cfb8 <_strtod_r+0xbf4>
    c78a:	1a53      	subs	r3, r2, r1
    c78c:	9309      	str	r3, [sp, #36]	; 0x24
    c78e:	9b04      	ldr	r3, [sp, #16]
    c790:	2b00      	cmp	r3, #0
    c792:	d100      	bne.n	c796 <_strtod_r+0x3d2>
    c794:	9404      	str	r4, [sp, #16]
    c796:	1e25      	subs	r5, r4, #0
    c798:	2d10      	cmp	r5, #16
    c79a:	dd00      	ble.n	c79e <_strtod_r+0x3da>
    c79c:	2510      	movs	r5, #16
    c79e:	9807      	ldr	r0, [sp, #28]
    c7a0:	f7fd fbac 	bl	9efc <__aeabi_ui2d>
    c7a4:	1c06      	adds	r6, r0, #0
    c7a6:	1c0f      	adds	r7, r1, #0
    c7a8:	2d09      	cmp	r5, #9
    c7aa:	dd15      	ble.n	c7d8 <_strtod_r+0x414>
    c7ac:	1c2b      	adds	r3, r5, #0
    c7ae:	4a83      	ldr	r2, [pc, #524]	; (c9bc <_strtod_r+0x5f8>)
    c7b0:	3b09      	subs	r3, #9
    c7b2:	00db      	lsls	r3, r3, #3
    c7b4:	18d3      	adds	r3, r2, r3
    c7b6:	681a      	ldr	r2, [r3, #0]
    c7b8:	685b      	ldr	r3, [r3, #4]
    c7ba:	f7fc fd19 	bl	91f0 <__aeabi_dmul>
    c7be:	1c06      	adds	r6, r0, #0
    c7c0:	9805      	ldr	r0, [sp, #20]
    c7c2:	1c0f      	adds	r7, r1, #0
    c7c4:	f7fd fb9a 	bl	9efc <__aeabi_ui2d>
    c7c8:	1c02      	adds	r2, r0, #0
    c7ca:	1c0b      	adds	r3, r1, #0
    c7cc:	1c30      	adds	r0, r6, #0
    c7ce:	1c39      	adds	r1, r7, #0
    c7d0:	f7fb fda8 	bl	8324 <__aeabi_dadd>
    c7d4:	1c06      	adds	r6, r0, #0
    c7d6:	1c0f      	adds	r7, r1, #0
    c7d8:	2c0f      	cmp	r4, #15
    c7da:	dc37      	bgt.n	c84c <_strtod_r+0x488>
    c7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7de:	2b00      	cmp	r3, #0
    c7e0:	d100      	bne.n	c7e4 <_strtod_r+0x420>
    c7e2:	e3db      	b.n	cf9c <_strtod_r+0xbd8>
    c7e4:	dd24      	ble.n	c830 <_strtod_r+0x46c>
    c7e6:	2b16      	cmp	r3, #22
    c7e8:	dc07      	bgt.n	c7fa <_strtod_r+0x436>
    c7ea:	4974      	ldr	r1, [pc, #464]	; (c9bc <_strtod_r+0x5f8>)
    c7ec:	00da      	lsls	r2, r3, #3
    c7ee:	188a      	adds	r2, r1, r2
    c7f0:	6810      	ldr	r0, [r2, #0]
    c7f2:	6851      	ldr	r1, [r2, #4]
    c7f4:	1c3b      	adds	r3, r7, #0
    c7f6:	1c32      	adds	r2, r6, #0
    c7f8:	e015      	b.n	c826 <_strtod_r+0x462>
    c7fa:	2325      	movs	r3, #37	; 0x25
    c7fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c7fe:	1b1b      	subs	r3, r3, r4
    c800:	429a      	cmp	r2, r3
    c802:	dc23      	bgt.n	c84c <_strtod_r+0x488>
    c804:	220f      	movs	r2, #15
    c806:	4d6d      	ldr	r5, [pc, #436]	; (c9bc <_strtod_r+0x5f8>)
    c808:	1b14      	subs	r4, r2, r4
    c80a:	00e3      	lsls	r3, r4, #3
    c80c:	18eb      	adds	r3, r5, r3
    c80e:	6818      	ldr	r0, [r3, #0]
    c810:	6859      	ldr	r1, [r3, #4]
    c812:	1c32      	adds	r2, r6, #0
    c814:	1c3b      	adds	r3, r7, #0
    c816:	f7fc fceb 	bl	91f0 <__aeabi_dmul>
    c81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c81c:	1b1c      	subs	r4, r3, r4
    c81e:	00e4      	lsls	r4, r4, #3
    c820:	192d      	adds	r5, r5, r4
    c822:	682a      	ldr	r2, [r5, #0]
    c824:	686b      	ldr	r3, [r5, #4]
    c826:	f7fc fce3 	bl	91f0 <__aeabi_dmul>
    c82a:	1c06      	adds	r6, r0, #0
    c82c:	1c0f      	adds	r7, r1, #0
    c82e:	e3b5      	b.n	cf9c <_strtod_r+0xbd8>
    c830:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c832:	3316      	adds	r3, #22
    c834:	db0a      	blt.n	c84c <_strtod_r+0x488>
    c836:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c838:	1c30      	adds	r0, r6, #0
    c83a:	00da      	lsls	r2, r3, #3
    c83c:	4b5f      	ldr	r3, [pc, #380]	; (c9bc <_strtod_r+0x5f8>)
    c83e:	1c39      	adds	r1, r7, #0
    c840:	1a9a      	subs	r2, r3, r2
    c842:	6853      	ldr	r3, [r2, #4]
    c844:	6812      	ldr	r2, [r2, #0]
    c846:	f7fc f895 	bl	8974 <__aeabi_ddiv>
    c84a:	e7ee      	b.n	c82a <_strtod_r+0x466>
    c84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c84e:	1b65      	subs	r5, r4, r5
    c850:	195d      	adds	r5, r3, r5
    c852:	2d00      	cmp	r5, #0
    c854:	dd59      	ble.n	c90a <_strtod_r+0x546>
    c856:	230f      	movs	r3, #15
    c858:	402b      	ands	r3, r5
    c85a:	d00a      	beq.n	c872 <_strtod_r+0x4ae>
    c85c:	4a57      	ldr	r2, [pc, #348]	; (c9bc <_strtod_r+0x5f8>)
    c85e:	00db      	lsls	r3, r3, #3
    c860:	18d3      	adds	r3, r2, r3
    c862:	6818      	ldr	r0, [r3, #0]
    c864:	6859      	ldr	r1, [r3, #4]
    c866:	1c32      	adds	r2, r6, #0
    c868:	1c3b      	adds	r3, r7, #0
    c86a:	f7fc fcc1 	bl	91f0 <__aeabi_dmul>
    c86e:	1c06      	adds	r6, r0, #0
    c870:	1c0f      	adds	r7, r1, #0
    c872:	230f      	movs	r3, #15
    c874:	439d      	bics	r5, r3
    c876:	d100      	bne.n	c87a <_strtod_r+0x4b6>
    c878:	e0b0      	b.n	c9dc <_strtod_r+0x618>
    c87a:	3326      	adds	r3, #38	; 0x26
    c87c:	33ff      	adds	r3, #255	; 0xff
    c87e:	429d      	cmp	r5, r3
    c880:	dd0e      	ble.n	c8a0 <_strtod_r+0x4dc>
    c882:	2300      	movs	r3, #0
    c884:	9304      	str	r3, [sp, #16]
    c886:	9305      	str	r3, [sp, #20]
    c888:	930b      	str	r3, [sp, #44]	; 0x2c
    c88a:	9308      	str	r3, [sp, #32]
    c88c:	2322      	movs	r3, #34	; 0x22
    c88e:	2600      	movs	r6, #0
    c890:	9a03      	ldr	r2, [sp, #12]
    c892:	4f4b      	ldr	r7, [pc, #300]	; (c9c0 <_strtod_r+0x5fc>)
    c894:	6013      	str	r3, [r2, #0]
    c896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c898:	42b3      	cmp	r3, r6
    c89a:	d000      	beq.n	c89e <_strtod_r+0x4da>
    c89c:	e36a      	b.n	cf74 <_strtod_r+0xbb0>
    c89e:	e37d      	b.n	cf9c <_strtod_r+0xbd8>
    c8a0:	2300      	movs	r3, #0
    c8a2:	1c30      	adds	r0, r6, #0
    c8a4:	1c39      	adds	r1, r7, #0
    c8a6:	112d      	asrs	r5, r5, #4
    c8a8:	9305      	str	r3, [sp, #20]
    c8aa:	2d01      	cmp	r5, #1
    c8ac:	dd0e      	ble.n	c8cc <_strtod_r+0x508>
    c8ae:	07eb      	lsls	r3, r5, #31
    c8b0:	d507      	bpl.n	c8c2 <_strtod_r+0x4fe>
    c8b2:	9b05      	ldr	r3, [sp, #20]
    c8b4:	00da      	lsls	r2, r3, #3
    c8b6:	4b43      	ldr	r3, [pc, #268]	; (c9c4 <_strtod_r+0x600>)
    c8b8:	18d3      	adds	r3, r2, r3
    c8ba:	681a      	ldr	r2, [r3, #0]
    c8bc:	685b      	ldr	r3, [r3, #4]
    c8be:	f7fc fc97 	bl	91f0 <__aeabi_dmul>
    c8c2:	9b05      	ldr	r3, [sp, #20]
    c8c4:	106d      	asrs	r5, r5, #1
    c8c6:	3301      	adds	r3, #1
    c8c8:	9305      	str	r3, [sp, #20]
    c8ca:	e7ee      	b.n	c8aa <_strtod_r+0x4e6>
    c8cc:	1c06      	adds	r6, r0, #0
    c8ce:	4b3e      	ldr	r3, [pc, #248]	; (c9c8 <_strtod_r+0x604>)
    c8d0:	18cf      	adds	r7, r1, r3
    c8d2:	9b05      	ldr	r3, [sp, #20]
    c8d4:	00da      	lsls	r2, r3, #3
    c8d6:	4b3b      	ldr	r3, [pc, #236]	; (c9c4 <_strtod_r+0x600>)
    c8d8:	189b      	adds	r3, r3, r2
    c8da:	6818      	ldr	r0, [r3, #0]
    c8dc:	6859      	ldr	r1, [r3, #4]
    c8de:	1c32      	adds	r2, r6, #0
    c8e0:	1c3b      	adds	r3, r7, #0
    c8e2:	f7fc fc85 	bl	91f0 <__aeabi_dmul>
    c8e6:	4b36      	ldr	r3, [pc, #216]	; (c9c0 <_strtod_r+0x5fc>)
    c8e8:	1c0f      	adds	r7, r1, #0
    c8ea:	400b      	ands	r3, r1
    c8ec:	4937      	ldr	r1, [pc, #220]	; (c9cc <_strtod_r+0x608>)
    c8ee:	1c06      	adds	r6, r0, #0
    c8f0:	428b      	cmp	r3, r1
    c8f2:	d8c6      	bhi.n	c882 <_strtod_r+0x4be>
    c8f4:	4936      	ldr	r1, [pc, #216]	; (c9d0 <_strtod_r+0x60c>)
    c8f6:	428b      	cmp	r3, r1
    c8f8:	d903      	bls.n	c902 <_strtod_r+0x53e>
    c8fa:	2601      	movs	r6, #1
    c8fc:	4f35      	ldr	r7, [pc, #212]	; (c9d4 <_strtod_r+0x610>)
    c8fe:	4276      	negs	r6, r6
    c900:	e06c      	b.n	c9dc <_strtod_r+0x618>
    c902:	23d4      	movs	r3, #212	; 0xd4
    c904:	049b      	lsls	r3, r3, #18
    c906:	18ff      	adds	r7, r7, r3
    c908:	e068      	b.n	c9dc <_strtod_r+0x618>
    c90a:	2d00      	cmp	r5, #0
    c90c:	d066      	beq.n	c9dc <_strtod_r+0x618>
    c90e:	230f      	movs	r3, #15
    c910:	426d      	negs	r5, r5
    c912:	402b      	ands	r3, r5
    c914:	d00a      	beq.n	c92c <_strtod_r+0x568>
    c916:	4a29      	ldr	r2, [pc, #164]	; (c9bc <_strtod_r+0x5f8>)
    c918:	00db      	lsls	r3, r3, #3
    c91a:	18d3      	adds	r3, r2, r3
    c91c:	1c30      	adds	r0, r6, #0
    c91e:	681a      	ldr	r2, [r3, #0]
    c920:	685b      	ldr	r3, [r3, #4]
    c922:	1c39      	adds	r1, r7, #0
    c924:	f7fc f826 	bl	8974 <__aeabi_ddiv>
    c928:	1c06      	adds	r6, r0, #0
    c92a:	1c0f      	adds	r7, r1, #0
    c92c:	112d      	asrs	r5, r5, #4
    c92e:	d055      	beq.n	c9dc <_strtod_r+0x618>
    c930:	2d1f      	cmp	r5, #31
    c932:	dd05      	ble.n	c940 <_strtod_r+0x57c>
    c934:	2300      	movs	r3, #0
    c936:	9304      	str	r3, [sp, #16]
    c938:	9305      	str	r3, [sp, #20]
    c93a:	930b      	str	r3, [sp, #44]	; 0x2c
    c93c:	9308      	str	r3, [sp, #32]
    c93e:	e118      	b.n	cb72 <_strtod_r+0x7ae>
    c940:	2300      	movs	r3, #0
    c942:	9306      	str	r3, [sp, #24]
    c944:	06eb      	lsls	r3, r5, #27
    c946:	d501      	bpl.n	c94c <_strtod_r+0x588>
    c948:	236a      	movs	r3, #106	; 0x6a
    c94a:	9306      	str	r3, [sp, #24]
    c94c:	1c39      	adds	r1, r7, #0
    c94e:	1c30      	adds	r0, r6, #0
    c950:	4e21      	ldr	r6, [pc, #132]	; (c9d8 <_strtod_r+0x614>)
    c952:	2d00      	cmp	r5, #0
    c954:	dd08      	ble.n	c968 <_strtod_r+0x5a4>
    c956:	07eb      	lsls	r3, r5, #31
    c958:	d503      	bpl.n	c962 <_strtod_r+0x59e>
    c95a:	6832      	ldr	r2, [r6, #0]
    c95c:	6873      	ldr	r3, [r6, #4]
    c95e:	f7fc fc47 	bl	91f0 <__aeabi_dmul>
    c962:	106d      	asrs	r5, r5, #1
    c964:	3608      	adds	r6, #8
    c966:	e7f4      	b.n	c952 <_strtod_r+0x58e>
    c968:	9b06      	ldr	r3, [sp, #24]
    c96a:	1c06      	adds	r6, r0, #0
    c96c:	1c0f      	adds	r7, r1, #0
    c96e:	2b00      	cmp	r3, #0
    c970:	d019      	beq.n	c9a6 <_strtod_r+0x5e2>
    c972:	226b      	movs	r2, #107	; 0x6b
    c974:	004b      	lsls	r3, r1, #1
    c976:	0d5b      	lsrs	r3, r3, #21
    c978:	1c08      	adds	r0, r1, #0
    c97a:	1ad3      	subs	r3, r2, r3
    c97c:	2b00      	cmp	r3, #0
    c97e:	dd12      	ble.n	c9a6 <_strtod_r+0x5e2>
    c980:	2b1f      	cmp	r3, #31
    c982:	dd0c      	ble.n	c99e <_strtod_r+0x5da>
    c984:	2600      	movs	r6, #0
    c986:	2b34      	cmp	r3, #52	; 0x34
    c988:	dd02      	ble.n	c990 <_strtod_r+0x5cc>
    c98a:	27dc      	movs	r7, #220	; 0xdc
    c98c:	04bf      	lsls	r7, r7, #18
    c98e:	e00a      	b.n	c9a6 <_strtod_r+0x5e2>
    c990:	2201      	movs	r2, #1
    c992:	3b20      	subs	r3, #32
    c994:	4252      	negs	r2, r2
    c996:	409a      	lsls	r2, r3
    c998:	4010      	ands	r0, r2
    c99a:	1c07      	adds	r7, r0, #0
    c99c:	e003      	b.n	c9a6 <_strtod_r+0x5e2>
    c99e:	2201      	movs	r2, #1
    c9a0:	4252      	negs	r2, r2
    c9a2:	409a      	lsls	r2, r3
    c9a4:	4016      	ands	r6, r2
    c9a6:	1c30      	adds	r0, r6, #0
    c9a8:	1c39      	adds	r1, r7, #0
    c9aa:	2200      	movs	r2, #0
    c9ac:	2300      	movs	r3, #0
    c9ae:	f7fa fd3b 	bl	7428 <__aeabi_dcmpeq>
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d1be      	bne.n	c934 <_strtod_r+0x570>
    c9b6:	e013      	b.n	c9e0 <_strtod_r+0x61c>
    c9b8:	fff80000 	.word	0xfff80000
    c9bc:	00010b88 	.word	0x00010b88
    c9c0:	7ff00000 	.word	0x7ff00000
    c9c4:	00010c50 	.word	0x00010c50
    c9c8:	fcb00000 	.word	0xfcb00000
    c9cc:	7ca00000 	.word	0x7ca00000
    c9d0:	7c900000 	.word	0x7c900000
    c9d4:	7fefffff 	.word	0x7fefffff
    c9d8:	00010a30 	.word	0x00010a30
    c9dc:	2300      	movs	r3, #0
    c9de:	9306      	str	r3, [sp, #24]
    c9e0:	9b07      	ldr	r3, [sp, #28]
    c9e2:	9803      	ldr	r0, [sp, #12]
    c9e4:	9300      	str	r3, [sp, #0]
    c9e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    c9e8:	9a04      	ldr	r2, [sp, #16]
    c9ea:	1c23      	adds	r3, r4, #0
    c9ec:	f001 fffb 	bl	e9e6 <__s2b>
    c9f0:	900b      	str	r0, [sp, #44]	; 0x2c
    c9f2:	2800      	cmp	r0, #0
    c9f4:	d100      	bne.n	c9f8 <_strtod_r+0x634>
    c9f6:	e744      	b.n	c882 <_strtod_r+0x4be>
    c9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c9fc:	425b      	negs	r3, r3
    c9fe:	17d2      	asrs	r2, r2, #31
    ca00:	4013      	ands	r3, r2
    ca02:	9313      	str	r3, [sp, #76]	; 0x4c
    ca04:	2300      	movs	r3, #0
    ca06:	9304      	str	r3, [sp, #16]
    ca08:	9305      	str	r3, [sp, #20]
    ca0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca0c:	9803      	ldr	r0, [sp, #12]
    ca0e:	6859      	ldr	r1, [r3, #4]
    ca10:	f001 ff5c 	bl	e8cc <_Balloc>
    ca14:	9008      	str	r0, [sp, #32]
    ca16:	2800      	cmp	r0, #0
    ca18:	d100      	bne.n	ca1c <_strtod_r+0x658>
    ca1a:	e737      	b.n	c88c <_strtod_r+0x4c8>
    ca1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ca20:	691b      	ldr	r3, [r3, #16]
    ca22:	310c      	adds	r1, #12
    ca24:	1c9a      	adds	r2, r3, #2
    ca26:	0092      	lsls	r2, r2, #2
    ca28:	300c      	adds	r0, #12
    ca2a:	9307      	str	r3, [sp, #28]
    ca2c:	f7fd ffd7 	bl	a9de <memcpy>
    ca30:	ab1f      	add	r3, sp, #124	; 0x7c
    ca32:	9300      	str	r3, [sp, #0]
    ca34:	ab20      	add	r3, sp, #128	; 0x80
    ca36:	9301      	str	r3, [sp, #4]
    ca38:	9803      	ldr	r0, [sp, #12]
    ca3a:	1c32      	adds	r2, r6, #0
    ca3c:	1c3b      	adds	r3, r7, #0
    ca3e:	960e      	str	r6, [sp, #56]	; 0x38
    ca40:	970f      	str	r7, [sp, #60]	; 0x3c
    ca42:	f002 fa91 	bl	ef68 <__d2b>
    ca46:	901e      	str	r0, [sp, #120]	; 0x78
    ca48:	2800      	cmp	r0, #0
    ca4a:	d100      	bne.n	ca4e <_strtod_r+0x68a>
    ca4c:	e71e      	b.n	c88c <_strtod_r+0x4c8>
    ca4e:	9803      	ldr	r0, [sp, #12]
    ca50:	2101      	movs	r1, #1
    ca52:	f002 f852 	bl	eafa <__i2b>
    ca56:	9005      	str	r0, [sp, #20]
    ca58:	2800      	cmp	r0, #0
    ca5a:	d100      	bne.n	ca5e <_strtod_r+0x69a>
    ca5c:	e716      	b.n	c88c <_strtod_r+0x4c8>
    ca5e:	2300      	movs	r3, #0
    ca60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca62:	930a      	str	r3, [sp, #40]	; 0x28
    ca64:	4293      	cmp	r3, r2
    ca66:	da00      	bge.n	ca6a <_strtod_r+0x6a6>
    ca68:	920a      	str	r2, [sp, #40]	; 0x28
    ca6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	da00      	bge.n	ca72 <_strtod_r+0x6ae>
    ca70:	e089      	b.n	cb86 <_strtod_r+0x7c2>
    ca72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ca74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ca76:	18d5      	adds	r5, r2, r3
    ca78:	9a06      	ldr	r2, [sp, #24]
    ca7a:	9920      	ldr	r1, [sp, #128]	; 0x80
    ca7c:	1a9b      	subs	r3, r3, r2
    ca7e:	2236      	movs	r2, #54	; 0x36
    ca80:	185b      	adds	r3, r3, r1
    ca82:	1a52      	subs	r2, r2, r1
    ca84:	49c8      	ldr	r1, [pc, #800]	; (cda8 <_strtod_r+0x9e4>)
    ca86:	2001      	movs	r0, #1
    ca88:	428b      	cmp	r3, r1
    ca8a:	db00      	blt.n	ca8e <_strtod_r+0x6ca>
    ca8c:	e085      	b.n	cb9a <_strtod_r+0x7d6>
    ca8e:	1ac9      	subs	r1, r1, r3
    ca90:	1a52      	subs	r2, r2, r1
    ca92:	291f      	cmp	r1, #31
    ca94:	dc7b      	bgt.n	cb8e <_strtod_r+0x7ca>
    ca96:	4088      	lsls	r0, r1
    ca98:	2300      	movs	r3, #0
    ca9a:	9018      	str	r0, [sp, #96]	; 0x60
    ca9c:	9312      	str	r3, [sp, #72]	; 0x48
    ca9e:	18ab      	adds	r3, r5, r2
    caa0:	9307      	str	r3, [sp, #28]
    caa2:	9b06      	ldr	r3, [sp, #24]
    caa4:	18a4      	adds	r4, r4, r2
    caa6:	18e4      	adds	r4, r4, r3
    caa8:	9b07      	ldr	r3, [sp, #28]
    caaa:	42ab      	cmp	r3, r5
    caac:	dd00      	ble.n	cab0 <_strtod_r+0x6ec>
    caae:	1c2b      	adds	r3, r5, #0
    cab0:	42a3      	cmp	r3, r4
    cab2:	dd00      	ble.n	cab6 <_strtod_r+0x6f2>
    cab4:	1c23      	adds	r3, r4, #0
    cab6:	2b00      	cmp	r3, #0
    cab8:	dd04      	ble.n	cac4 <_strtod_r+0x700>
    caba:	9a07      	ldr	r2, [sp, #28]
    cabc:	1ae4      	subs	r4, r4, r3
    cabe:	1ad2      	subs	r2, r2, r3
    cac0:	9207      	str	r2, [sp, #28]
    cac2:	1aed      	subs	r5, r5, r3
    cac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cac6:	2b00      	cmp	r3, #0
    cac8:	d16b      	bne.n	cba2 <_strtod_r+0x7de>
    caca:	9b07      	ldr	r3, [sp, #28]
    cacc:	2b00      	cmp	r3, #0
    cace:	dd00      	ble.n	cad2 <_strtod_r+0x70e>
    cad0:	e080      	b.n	cbd4 <_strtod_r+0x810>
    cad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cad4:	2b00      	cmp	r3, #0
    cad6:	d000      	beq.n	cada <_strtod_r+0x716>
    cad8:	e086      	b.n	cbe8 <_strtod_r+0x824>
    cada:	2c00      	cmp	r4, #0
    cadc:	dd00      	ble.n	cae0 <_strtod_r+0x71c>
    cade:	e08d      	b.n	cbfc <_strtod_r+0x838>
    cae0:	2d00      	cmp	r5, #0
    cae2:	dd00      	ble.n	cae6 <_strtod_r+0x722>
    cae4:	e094      	b.n	cc10 <_strtod_r+0x84c>
    cae6:	9803      	ldr	r0, [sp, #12]
    cae8:	991e      	ldr	r1, [sp, #120]	; 0x78
    caea:	9a08      	ldr	r2, [sp, #32]
    caec:	f002 f95b 	bl	eda6 <__mdiff>
    caf0:	9004      	str	r0, [sp, #16]
    caf2:	2800      	cmp	r0, #0
    caf4:	d100      	bne.n	caf8 <_strtod_r+0x734>
    caf6:	e6c9      	b.n	c88c <_strtod_r+0x4c8>
    caf8:	2200      	movs	r2, #0
    cafa:	68c3      	ldr	r3, [r0, #12]
    cafc:	9905      	ldr	r1, [sp, #20]
    cafe:	60c2      	str	r2, [r0, #12]
    cb00:	930c      	str	r3, [sp, #48]	; 0x30
    cb02:	f002 f935 	bl	ed70 <__mcmp>
    cb06:	2800      	cmp	r0, #0
    cb08:	db00      	blt.n	cb0c <_strtod_r+0x748>
    cb0a:	e091      	b.n	cc30 <_strtod_r+0x86c>
    cb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb0e:	2b00      	cmp	r3, #0
    cb10:	d000      	beq.n	cb14 <_strtod_r+0x750>
    cb12:	e21a      	b.n	cf4a <_strtod_r+0xb86>
    cb14:	2e00      	cmp	r6, #0
    cb16:	d000      	beq.n	cb1a <_strtod_r+0x756>
    cb18:	e217      	b.n	cf4a <_strtod_r+0xb86>
    cb1a:	033b      	lsls	r3, r7, #12
    cb1c:	d000      	beq.n	cb20 <_strtod_r+0x75c>
    cb1e:	e214      	b.n	cf4a <_strtod_r+0xb86>
    cb20:	22d6      	movs	r2, #214	; 0xd6
    cb22:	4ba2      	ldr	r3, [pc, #648]	; (cdac <_strtod_r+0x9e8>)
    cb24:	04d2      	lsls	r2, r2, #19
    cb26:	403b      	ands	r3, r7
    cb28:	4293      	cmp	r3, r2
    cb2a:	d800      	bhi.n	cb2e <_strtod_r+0x76a>
    cb2c:	e20d      	b.n	cf4a <_strtod_r+0xb86>
    cb2e:	9b04      	ldr	r3, [sp, #16]
    cb30:	695b      	ldr	r3, [r3, #20]
    cb32:	9307      	str	r3, [sp, #28]
    cb34:	2b00      	cmp	r3, #0
    cb36:	d075      	beq.n	cc24 <_strtod_r+0x860>
    cb38:	9904      	ldr	r1, [sp, #16]
    cb3a:	9803      	ldr	r0, [sp, #12]
    cb3c:	2201      	movs	r2, #1
    cb3e:	f002 f8c5 	bl	eccc <__lshift>
    cb42:	9905      	ldr	r1, [sp, #20]
    cb44:	9004      	str	r0, [sp, #16]
    cb46:	f002 f913 	bl	ed70 <__mcmp>
    cb4a:	2800      	cmp	r0, #0
    cb4c:	dc00      	bgt.n	cb50 <_strtod_r+0x78c>
    cb4e:	e1fc      	b.n	cf4a <_strtod_r+0xb86>
    cb50:	9a06      	ldr	r2, [sp, #24]
    cb52:	4b96      	ldr	r3, [pc, #600]	; (cdac <_strtod_r+0x9e8>)
    cb54:	2a00      	cmp	r2, #0
    cb56:	d100      	bne.n	cb5a <_strtod_r+0x796>
    cb58:	e09a      	b.n	cc90 <_strtod_r+0x8cc>
    cb5a:	1c1a      	adds	r2, r3, #0
    cb5c:	21d6      	movs	r1, #214	; 0xd6
    cb5e:	403a      	ands	r2, r7
    cb60:	04c9      	lsls	r1, r1, #19
    cb62:	428a      	cmp	r2, r1
    cb64:	dd00      	ble.n	cb68 <_strtod_r+0x7a4>
    cb66:	e093      	b.n	cc90 <_strtod_r+0x8cc>
    cb68:	23dc      	movs	r3, #220	; 0xdc
    cb6a:	049b      	lsls	r3, r3, #18
    cb6c:	429a      	cmp	r2, r3
    cb6e:	dd00      	ble.n	cb72 <_strtod_r+0x7ae>
    cb70:	e1ee      	b.n	cf50 <_strtod_r+0xb8c>
    cb72:	2322      	movs	r3, #34	; 0x22
    cb74:	9a03      	ldr	r2, [sp, #12]
    cb76:	2600      	movs	r6, #0
    cb78:	6013      	str	r3, [r2, #0]
    cb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb7c:	2700      	movs	r7, #0
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d000      	beq.n	cb84 <_strtod_r+0x7c0>
    cb82:	e1f7      	b.n	cf74 <_strtod_r+0xbb0>
    cb84:	e20a      	b.n	cf9c <_strtod_r+0xbd8>
    cb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cb88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    cb8a:	1ad4      	subs	r4, r2, r3
    cb8c:	e774      	b.n	ca78 <_strtod_r+0x6b4>
    cb8e:	4988      	ldr	r1, [pc, #544]	; (cdb0 <_strtod_r+0x9ec>)
    cb90:	1acb      	subs	r3, r1, r3
    cb92:	1c01      	adds	r1, r0, #0
    cb94:	4099      	lsls	r1, r3
    cb96:	9112      	str	r1, [sp, #72]	; 0x48
    cb98:	e001      	b.n	cb9e <_strtod_r+0x7da>
    cb9a:	2300      	movs	r3, #0
    cb9c:	9312      	str	r3, [sp, #72]	; 0x48
    cb9e:	9018      	str	r0, [sp, #96]	; 0x60
    cba0:	e77d      	b.n	ca9e <_strtod_r+0x6da>
    cba2:	1c1a      	adds	r2, r3, #0
    cba4:	9803      	ldr	r0, [sp, #12]
    cba6:	9905      	ldr	r1, [sp, #20]
    cba8:	f002 f83e 	bl	ec28 <__pow5mult>
    cbac:	9005      	str	r0, [sp, #20]
    cbae:	1e03      	subs	r3, r0, #0
    cbb0:	d100      	bne.n	cbb4 <_strtod_r+0x7f0>
    cbb2:	e66b      	b.n	c88c <_strtod_r+0x4c8>
    cbb4:	9803      	ldr	r0, [sp, #12]
    cbb6:	1c19      	adds	r1, r3, #0
    cbb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    cbba:	f001 ffa7 	bl	eb0c <__multiply>
    cbbe:	900c      	str	r0, [sp, #48]	; 0x30
    cbc0:	2800      	cmp	r0, #0
    cbc2:	d100      	bne.n	cbc6 <_strtod_r+0x802>
    cbc4:	e662      	b.n	c88c <_strtod_r+0x4c8>
    cbc6:	9803      	ldr	r0, [sp, #12]
    cbc8:	991e      	ldr	r1, [sp, #120]	; 0x78
    cbca:	f001 feb7 	bl	e93c <_Bfree>
    cbce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbd0:	931e      	str	r3, [sp, #120]	; 0x78
    cbd2:	e77a      	b.n	caca <_strtod_r+0x706>
    cbd4:	9803      	ldr	r0, [sp, #12]
    cbd6:	991e      	ldr	r1, [sp, #120]	; 0x78
    cbd8:	9a07      	ldr	r2, [sp, #28]
    cbda:	f002 f877 	bl	eccc <__lshift>
    cbde:	901e      	str	r0, [sp, #120]	; 0x78
    cbe0:	2800      	cmp	r0, #0
    cbe2:	d000      	beq.n	cbe6 <_strtod_r+0x822>
    cbe4:	e775      	b.n	cad2 <_strtod_r+0x70e>
    cbe6:	e651      	b.n	c88c <_strtod_r+0x4c8>
    cbe8:	9803      	ldr	r0, [sp, #12]
    cbea:	9908      	ldr	r1, [sp, #32]
    cbec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cbee:	f002 f81b 	bl	ec28 <__pow5mult>
    cbf2:	9008      	str	r0, [sp, #32]
    cbf4:	2800      	cmp	r0, #0
    cbf6:	d000      	beq.n	cbfa <_strtod_r+0x836>
    cbf8:	e76f      	b.n	cada <_strtod_r+0x716>
    cbfa:	e647      	b.n	c88c <_strtod_r+0x4c8>
    cbfc:	9803      	ldr	r0, [sp, #12]
    cbfe:	9908      	ldr	r1, [sp, #32]
    cc00:	1c22      	adds	r2, r4, #0
    cc02:	f002 f863 	bl	eccc <__lshift>
    cc06:	9008      	str	r0, [sp, #32]
    cc08:	2800      	cmp	r0, #0
    cc0a:	d000      	beq.n	cc0e <_strtod_r+0x84a>
    cc0c:	e768      	b.n	cae0 <_strtod_r+0x71c>
    cc0e:	e63d      	b.n	c88c <_strtod_r+0x4c8>
    cc10:	9803      	ldr	r0, [sp, #12]
    cc12:	9905      	ldr	r1, [sp, #20]
    cc14:	1c2a      	adds	r2, r5, #0
    cc16:	f002 f859 	bl	eccc <__lshift>
    cc1a:	9005      	str	r0, [sp, #20]
    cc1c:	2800      	cmp	r0, #0
    cc1e:	d000      	beq.n	cc22 <_strtod_r+0x85e>
    cc20:	e761      	b.n	cae6 <_strtod_r+0x722>
    cc22:	e633      	b.n	c88c <_strtod_r+0x4c8>
    cc24:	9b04      	ldr	r3, [sp, #16]
    cc26:	691b      	ldr	r3, [r3, #16]
    cc28:	9307      	str	r3, [sp, #28]
    cc2a:	2b01      	cmp	r3, #1
    cc2c:	dc84      	bgt.n	cb38 <_strtod_r+0x774>
    cc2e:	e18c      	b.n	cf4a <_strtod_r+0xb86>
    cc30:	2800      	cmp	r0, #0
    cc32:	d164      	bne.n	ccfe <_strtod_r+0x93a>
    cc34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc36:	033b      	lsls	r3, r7, #12
    cc38:	2a00      	cmp	r2, #0
    cc3a:	d024      	beq.n	cc86 <_strtod_r+0x8c2>
    cc3c:	4a5d      	ldr	r2, [pc, #372]	; (cdb4 <_strtod_r+0x9f0>)
    cc3e:	1c39      	adds	r1, r7, #0
    cc40:	0b1b      	lsrs	r3, r3, #12
    cc42:	4293      	cmp	r3, r2
    cc44:	d12d      	bne.n	cca2 <_strtod_r+0x8de>
    cc46:	9a06      	ldr	r2, [sp, #24]
    cc48:	3801      	subs	r0, #1
    cc4a:	1c34      	adds	r4, r6, #0
    cc4c:	1c03      	adds	r3, r0, #0
    cc4e:	2a00      	cmp	r2, #0
    cc50:	d00a      	beq.n	cc68 <_strtod_r+0x8a4>
    cc52:	25d4      	movs	r5, #212	; 0xd4
    cc54:	4a55      	ldr	r2, [pc, #340]	; (cdac <_strtod_r+0x9e8>)
    cc56:	04ed      	lsls	r5, r5, #19
    cc58:	403a      	ands	r2, r7
    cc5a:	42aa      	cmp	r2, r5
    cc5c:	d804      	bhi.n	cc68 <_strtod_r+0x8a4>
    cc5e:	336c      	adds	r3, #108	; 0x6c
    cc60:	0d12      	lsrs	r2, r2, #20
    cc62:	1a9a      	subs	r2, r3, r2
    cc64:	1c03      	adds	r3, r0, #0
    cc66:	4093      	lsls	r3, r2
    cc68:	429c      	cmp	r4, r3
    cc6a:	d11a      	bne.n	cca2 <_strtod_r+0x8de>
    cc6c:	4b52      	ldr	r3, [pc, #328]	; (cdb8 <_strtod_r+0x9f4>)
    cc6e:	4299      	cmp	r1, r3
    cc70:	d102      	bne.n	cc78 <_strtod_r+0x8b4>
    cc72:	1c63      	adds	r3, r4, #1
    cc74:	d100      	bne.n	cc78 <_strtod_r+0x8b4>
    cc76:	e609      	b.n	c88c <_strtod_r+0x4c8>
    cc78:	4b4c      	ldr	r3, [pc, #304]	; (cdac <_strtod_r+0x9e8>)
    cc7a:	2600      	movs	r6, #0
    cc7c:	4019      	ands	r1, r3
    cc7e:	2380      	movs	r3, #128	; 0x80
    cc80:	035b      	lsls	r3, r3, #13
    cc82:	18cf      	adds	r7, r1, r3
    cc84:	e161      	b.n	cf4a <_strtod_r+0xb86>
    cc86:	2b00      	cmp	r3, #0
    cc88:	d10b      	bne.n	cca2 <_strtod_r+0x8de>
    cc8a:	2e00      	cmp	r6, #0
    cc8c:	d109      	bne.n	cca2 <_strtod_r+0x8de>
    cc8e:	e75f      	b.n	cb50 <_strtod_r+0x78c>
    cc90:	2601      	movs	r6, #1
    cc92:	4a4a      	ldr	r2, [pc, #296]	; (cdbc <_strtod_r+0x9f8>)
    cc94:	403b      	ands	r3, r7
    cc96:	189b      	adds	r3, r3, r2
    cc98:	4a46      	ldr	r2, [pc, #280]	; (cdb4 <_strtod_r+0x9f0>)
    cc9a:	4276      	negs	r6, r6
    cc9c:	431a      	orrs	r2, r3
    cc9e:	1c17      	adds	r7, r2, #0
    cca0:	e153      	b.n	cf4a <_strtod_r+0xb86>
    cca2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cca4:	2b00      	cmp	r3, #0
    cca6:	d003      	beq.n	ccb0 <_strtod_r+0x8ec>
    cca8:	423b      	tst	r3, r7
    ccaa:	d100      	bne.n	ccae <_strtod_r+0x8ea>
    ccac:	e14d      	b.n	cf4a <_strtod_r+0xb86>
    ccae:	e003      	b.n	ccb8 <_strtod_r+0x8f4>
    ccb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ccb2:	4233      	tst	r3, r6
    ccb4:	d100      	bne.n	ccb8 <_strtod_r+0x8f4>
    ccb6:	e148      	b.n	cf4a <_strtod_r+0xb86>
    ccb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccba:	1c30      	adds	r0, r6, #0
    ccbc:	1c39      	adds	r1, r7, #0
    ccbe:	9a06      	ldr	r2, [sp, #24]
    ccc0:	2b00      	cmp	r3, #0
    ccc2:	d00a      	beq.n	ccda <_strtod_r+0x916>
    ccc4:	f7ff fb68 	bl	c398 <sulp>
    ccc8:	1c02      	adds	r2, r0, #0
    ccca:	1c0b      	adds	r3, r1, #0
    cccc:	980e      	ldr	r0, [sp, #56]	; 0x38
    ccce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ccd0:	f7fb fb28 	bl	8324 <__aeabi_dadd>
    ccd4:	1c06      	adds	r6, r0, #0
    ccd6:	1c0f      	adds	r7, r1, #0
    ccd8:	e137      	b.n	cf4a <_strtod_r+0xb86>
    ccda:	f7ff fb5d 	bl	c398 <sulp>
    ccde:	1c02      	adds	r2, r0, #0
    cce0:	1c0b      	adds	r3, r1, #0
    cce2:	980e      	ldr	r0, [sp, #56]	; 0x38
    cce4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cce6:	f7fc fd1d 	bl	9724 <__aeabi_dsub>
    ccea:	2200      	movs	r2, #0
    ccec:	2300      	movs	r3, #0
    ccee:	1c06      	adds	r6, r0, #0
    ccf0:	1c0f      	adds	r7, r1, #0
    ccf2:	f7fa fb99 	bl	7428 <__aeabi_dcmpeq>
    ccf6:	2800      	cmp	r0, #0
    ccf8:	d000      	beq.n	ccfc <_strtod_r+0x938>
    ccfa:	e73a      	b.n	cb72 <_strtod_r+0x7ae>
    ccfc:	e125      	b.n	cf4a <_strtod_r+0xb86>
    ccfe:	9804      	ldr	r0, [sp, #16]
    cd00:	9905      	ldr	r1, [sp, #20]
    cd02:	f002 f985 	bl	f010 <__ratio>
    cd06:	2380      	movs	r3, #128	; 0x80
    cd08:	2200      	movs	r2, #0
    cd0a:	05db      	lsls	r3, r3, #23
    cd0c:	1c04      	adds	r4, r0, #0
    cd0e:	1c0d      	adds	r5, r1, #0
    cd10:	f7fa fb9a 	bl	7448 <__aeabi_dcmple>
    cd14:	2800      	cmp	r0, #0
    cd16:	d036      	beq.n	cd86 <_strtod_r+0x9c2>
    cd18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	d002      	beq.n	cd24 <_strtod_r+0x960>
    cd1e:	2400      	movs	r4, #0
    cd20:	4d27      	ldr	r5, [pc, #156]	; (cdc0 <_strtod_r+0x9fc>)
    cd22:	e00b      	b.n	cd3c <_strtod_r+0x978>
    cd24:	2e00      	cmp	r6, #0
    cd26:	d102      	bne.n	cd2e <_strtod_r+0x96a>
    cd28:	033b      	lsls	r3, r7, #12
    cd2a:	d105      	bne.n	cd38 <_strtod_r+0x974>
    cd2c:	e00b      	b.n	cd46 <_strtod_r+0x982>
    cd2e:	2e01      	cmp	r6, #1
    cd30:	d102      	bne.n	cd38 <_strtod_r+0x974>
    cd32:	2f00      	cmp	r7, #0
    cd34:	d100      	bne.n	cd38 <_strtod_r+0x974>
    cd36:	e71c      	b.n	cb72 <_strtod_r+0x7ae>
    cd38:	2400      	movs	r4, #0
    cd3a:	4d22      	ldr	r5, [pc, #136]	; (cdc4 <_strtod_r+0xa00>)
    cd3c:	2300      	movs	r3, #0
    cd3e:	9307      	str	r3, [sp, #28]
    cd40:	4b1f      	ldr	r3, [pc, #124]	; (cdc0 <_strtod_r+0x9fc>)
    cd42:	930a      	str	r3, [sp, #40]	; 0x28
    cd44:	e048      	b.n	cdd8 <_strtod_r+0xa14>
    cd46:	1c20      	adds	r0, r4, #0
    cd48:	1c29      	adds	r1, r5, #0
    cd4a:	2200      	movs	r2, #0
    cd4c:	4b1c      	ldr	r3, [pc, #112]	; (cdc0 <_strtod_r+0x9fc>)
    cd4e:	f7fa fb71 	bl	7434 <__aeabi_dcmplt>
    cd52:	2800      	cmp	r0, #0
    cd54:	d108      	bne.n	cd68 <_strtod_r+0x9a4>
    cd56:	1c20      	adds	r0, r4, #0
    cd58:	1c29      	adds	r1, r5, #0
    cd5a:	2200      	movs	r2, #0
    cd5c:	4b1a      	ldr	r3, [pc, #104]	; (cdc8 <_strtod_r+0xa04>)
    cd5e:	f7fc fa47 	bl	91f0 <__aeabi_dmul>
    cd62:	9007      	str	r0, [sp, #28]
    cd64:	910a      	str	r1, [sp, #40]	; 0x28
    cd66:	e003      	b.n	cd70 <_strtod_r+0x9ac>
    cd68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd6a:	9307      	str	r3, [sp, #28]
    cd6c:	4b16      	ldr	r3, [pc, #88]	; (cdc8 <_strtod_r+0xa04>)
    cd6e:	930a      	str	r3, [sp, #40]	; 0x28
    cd70:	2280      	movs	r2, #128	; 0x80
    cd72:	0612      	lsls	r2, r2, #24
    cd74:	4694      	mov	ip, r2
    cd76:	9b07      	ldr	r3, [sp, #28]
    cd78:	931a      	str	r3, [sp, #104]	; 0x68
    cd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd7c:	4463      	add	r3, ip
    cd7e:	931b      	str	r3, [sp, #108]	; 0x6c
    cd80:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    cd82:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    cd84:	e028      	b.n	cdd8 <_strtod_r+0xa14>
    cd86:	4b10      	ldr	r3, [pc, #64]	; (cdc8 <_strtod_r+0xa04>)
    cd88:	1c20      	adds	r0, r4, #0
    cd8a:	1c29      	adds	r1, r5, #0
    cd8c:	2200      	movs	r2, #0
    cd8e:	f7fc fa2f 	bl	91f0 <__aeabi_dmul>
    cd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cd94:	9007      	str	r0, [sp, #28]
    cd96:	910a      	str	r1, [sp, #40]	; 0x28
    cd98:	2b00      	cmp	r3, #0
    cd9a:	d117      	bne.n	cdcc <_strtod_r+0xa08>
    cd9c:	2380      	movs	r3, #128	; 0x80
    cd9e:	061b      	lsls	r3, r3, #24
    cda0:	18cb      	adds	r3, r1, r3
    cda2:	9014      	str	r0, [sp, #80]	; 0x50
    cda4:	9315      	str	r3, [sp, #84]	; 0x54
    cda6:	e015      	b.n	cdd4 <_strtod_r+0xa10>
    cda8:	fffffc03 	.word	0xfffffc03
    cdac:	7ff00000 	.word	0x7ff00000
    cdb0:	fffffbe3 	.word	0xfffffbe3
    cdb4:	000fffff 	.word	0x000fffff
    cdb8:	7fefffff 	.word	0x7fefffff
    cdbc:	fff00000 	.word	0xfff00000
    cdc0:	3ff00000 	.word	0x3ff00000
    cdc4:	bff00000 	.word	0xbff00000
    cdc8:	3fe00000 	.word	0x3fe00000
    cdcc:	9a07      	ldr	r2, [sp, #28]
    cdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdd0:	9214      	str	r2, [sp, #80]	; 0x50
    cdd2:	9315      	str	r3, [sp, #84]	; 0x54
    cdd4:	9c14      	ldr	r4, [sp, #80]	; 0x50
    cdd6:	9d15      	ldr	r5, [sp, #84]	; 0x54
    cdd8:	4b7a      	ldr	r3, [pc, #488]	; (cfc4 <_strtod_r+0xc00>)
    cdda:	403b      	ands	r3, r7
    cddc:	9312      	str	r3, [sp, #72]	; 0x48
    cdde:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cde0:	4b79      	ldr	r3, [pc, #484]	; (cfc8 <_strtod_r+0xc04>)
    cde2:	429a      	cmp	r2, r3
    cde4:	d12b      	bne.n	ce3e <_strtod_r+0xa7a>
    cde6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cde8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cdea:	9210      	str	r2, [sp, #64]	; 0x40
    cdec:	9311      	str	r3, [sp, #68]	; 0x44
    cdee:	4b77      	ldr	r3, [pc, #476]	; (cfcc <_strtod_r+0xc08>)
    cdf0:	1c30      	adds	r0, r6, #0
    cdf2:	18ff      	adds	r7, r7, r3
    cdf4:	1c39      	adds	r1, r7, #0
    cdf6:	f002 f841 	bl	ee7c <__ulp>
    cdfa:	1c02      	adds	r2, r0, #0
    cdfc:	1c0b      	adds	r3, r1, #0
    cdfe:	1c20      	adds	r0, r4, #0
    ce00:	1c29      	adds	r1, r5, #0
    ce02:	f7fc f9f5 	bl	91f0 <__aeabi_dmul>
    ce06:	1c02      	adds	r2, r0, #0
    ce08:	1c0b      	adds	r3, r1, #0
    ce0a:	1c30      	adds	r0, r6, #0
    ce0c:	1c39      	adds	r1, r7, #0
    ce0e:	f7fb fa89 	bl	8324 <__aeabi_dadd>
    ce12:	4b6c      	ldr	r3, [pc, #432]	; (cfc4 <_strtod_r+0xc00>)
    ce14:	4a6e      	ldr	r2, [pc, #440]	; (cfd0 <_strtod_r+0xc0c>)
    ce16:	1c06      	adds	r6, r0, #0
    ce18:	400b      	ands	r3, r1
    ce1a:	4293      	cmp	r3, r2
    ce1c:	d90b      	bls.n	ce36 <_strtod_r+0xa72>
    ce1e:	4b6d      	ldr	r3, [pc, #436]	; (cfd4 <_strtod_r+0xc10>)
    ce20:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce22:	429a      	cmp	r2, r3
    ce24:	d103      	bne.n	ce2e <_strtod_r+0xa6a>
    ce26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ce28:	3301      	adds	r3, #1
    ce2a:	d100      	bne.n	ce2e <_strtod_r+0xa6a>
    ce2c:	e52e      	b.n	c88c <_strtod_r+0x4c8>
    ce2e:	2601      	movs	r6, #1
    ce30:	4f68      	ldr	r7, [pc, #416]	; (cfd4 <_strtod_r+0xc10>)
    ce32:	4276      	negs	r6, r6
    ce34:	e078      	b.n	cf28 <_strtod_r+0xb64>
    ce36:	23d4      	movs	r3, #212	; 0xd4
    ce38:	049b      	lsls	r3, r3, #18
    ce3a:	18cf      	adds	r7, r1, r3
    ce3c:	e040      	b.n	cec0 <_strtod_r+0xafc>
    ce3e:	9b06      	ldr	r3, [sp, #24]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d02b      	beq.n	ce9c <_strtod_r+0xad8>
    ce44:	23d4      	movs	r3, #212	; 0xd4
    ce46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ce48:	04db      	lsls	r3, r3, #19
    ce4a:	429a      	cmp	r2, r3
    ce4c:	d826      	bhi.n	ce9c <_strtod_r+0xad8>
    ce4e:	9807      	ldr	r0, [sp, #28]
    ce50:	990a      	ldr	r1, [sp, #40]	; 0x28
    ce52:	4a61      	ldr	r2, [pc, #388]	; (cfd8 <_strtod_r+0xc14>)
    ce54:	4b61      	ldr	r3, [pc, #388]	; (cfdc <_strtod_r+0xc18>)
    ce56:	f7fa faf7 	bl	7448 <__aeabi_dcmple>
    ce5a:	2800      	cmp	r0, #0
    ce5c:	d019      	beq.n	ce92 <_strtod_r+0xace>
    ce5e:	9807      	ldr	r0, [sp, #28]
    ce60:	990a      	ldr	r1, [sp, #40]	; 0x28
    ce62:	f7fa fb73 	bl	754c <__aeabi_d2uiz>
    ce66:	2800      	cmp	r0, #0
    ce68:	d100      	bne.n	ce6c <_strtod_r+0xaa8>
    ce6a:	3001      	adds	r0, #1
    ce6c:	f7fd f846 	bl	9efc <__aeabi_ui2d>
    ce70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce72:	9007      	str	r0, [sp, #28]
    ce74:	910a      	str	r1, [sp, #40]	; 0x28
    ce76:	2b00      	cmp	r3, #0
    ce78:	d105      	bne.n	ce86 <_strtod_r+0xac2>
    ce7a:	2380      	movs	r3, #128	; 0x80
    ce7c:	061b      	lsls	r3, r3, #24
    ce7e:	18cb      	adds	r3, r1, r3
    ce80:	9016      	str	r0, [sp, #88]	; 0x58
    ce82:	9317      	str	r3, [sp, #92]	; 0x5c
    ce84:	e003      	b.n	ce8e <_strtod_r+0xaca>
    ce86:	9a07      	ldr	r2, [sp, #28]
    ce88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce8a:	9216      	str	r2, [sp, #88]	; 0x58
    ce8c:	9317      	str	r3, [sp, #92]	; 0x5c
    ce8e:	9c16      	ldr	r4, [sp, #88]	; 0x58
    ce90:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    ce92:	23d6      	movs	r3, #214	; 0xd6
    ce94:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ce96:	04db      	lsls	r3, r3, #19
    ce98:	18eb      	adds	r3, r5, r3
    ce9a:	1a9d      	subs	r5, r3, r2
    ce9c:	980e      	ldr	r0, [sp, #56]	; 0x38
    ce9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cea0:	f001 ffec 	bl	ee7c <__ulp>
    cea4:	1c02      	adds	r2, r0, #0
    cea6:	1c0b      	adds	r3, r1, #0
    cea8:	1c20      	adds	r0, r4, #0
    ceaa:	1c29      	adds	r1, r5, #0
    ceac:	f7fc f9a0 	bl	91f0 <__aeabi_dmul>
    ceb0:	1c02      	adds	r2, r0, #0
    ceb2:	1c0b      	adds	r3, r1, #0
    ceb4:	980e      	ldr	r0, [sp, #56]	; 0x38
    ceb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ceb8:	f7fb fa34 	bl	8324 <__aeabi_dadd>
    cebc:	1c06      	adds	r6, r0, #0
    cebe:	1c0f      	adds	r7, r1, #0
    cec0:	9b06      	ldr	r3, [sp, #24]
    cec2:	970e      	str	r7, [sp, #56]	; 0x38
    cec4:	2b00      	cmp	r3, #0
    cec6:	d12f      	bne.n	cf28 <_strtod_r+0xb64>
    cec8:	4b3e      	ldr	r3, [pc, #248]	; (cfc4 <_strtod_r+0xc00>)
    ceca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cecc:	403b      	ands	r3, r7
    cece:	429a      	cmp	r2, r3
    ced0:	d12a      	bne.n	cf28 <_strtod_r+0xb64>
    ced2:	990a      	ldr	r1, [sp, #40]	; 0x28
    ced4:	9807      	ldr	r0, [sp, #28]
    ced6:	f7fc ff9f 	bl	9e18 <__aeabi_d2iz>
    ceda:	f7fc ffd3 	bl	9e84 <__aeabi_i2d>
    cede:	1c0b      	adds	r3, r1, #0
    cee0:	1c02      	adds	r2, r0, #0
    cee2:	990a      	ldr	r1, [sp, #40]	; 0x28
    cee4:	9807      	ldr	r0, [sp, #28]
    cee6:	f7fc fc1d 	bl	9724 <__aeabi_dsub>
    ceea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ceec:	1c04      	adds	r4, r0, #0
    ceee:	1c0d      	adds	r5, r1, #0
    cef0:	2b00      	cmp	r3, #0
    cef2:	d104      	bne.n	cefe <_strtod_r+0xb3a>
    cef4:	2e00      	cmp	r6, #0
    cef6:	d102      	bne.n	cefe <_strtod_r+0xb3a>
    cef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cefa:	031b      	lsls	r3, r3, #12
    cefc:	d00e      	beq.n	cf1c <_strtod_r+0xb58>
    cefe:	1c20      	adds	r0, r4, #0
    cf00:	1c29      	adds	r1, r5, #0
    cf02:	4a37      	ldr	r2, [pc, #220]	; (cfe0 <_strtod_r+0xc1c>)
    cf04:	4b37      	ldr	r3, [pc, #220]	; (cfe4 <_strtod_r+0xc20>)
    cf06:	f7fa fa95 	bl	7434 <__aeabi_dcmplt>
    cf0a:	2800      	cmp	r0, #0
    cf0c:	d132      	bne.n	cf74 <_strtod_r+0xbb0>
    cf0e:	1c20      	adds	r0, r4, #0
    cf10:	1c29      	adds	r1, r5, #0
    cf12:	4a35      	ldr	r2, [pc, #212]	; (cfe8 <_strtod_r+0xc24>)
    cf14:	4b35      	ldr	r3, [pc, #212]	; (cfec <_strtod_r+0xc28>)
    cf16:	f7fa faa1 	bl	745c <__aeabi_dcmpgt>
    cf1a:	e003      	b.n	cf24 <_strtod_r+0xb60>
    cf1c:	4a30      	ldr	r2, [pc, #192]	; (cfe0 <_strtod_r+0xc1c>)
    cf1e:	4b34      	ldr	r3, [pc, #208]	; (cff0 <_strtod_r+0xc2c>)
    cf20:	f7fa fa88 	bl	7434 <__aeabi_dcmplt>
    cf24:	2800      	cmp	r0, #0
    cf26:	d125      	bne.n	cf74 <_strtod_r+0xbb0>
    cf28:	9803      	ldr	r0, [sp, #12]
    cf2a:	991e      	ldr	r1, [sp, #120]	; 0x78
    cf2c:	f001 fd06 	bl	e93c <_Bfree>
    cf30:	9803      	ldr	r0, [sp, #12]
    cf32:	9908      	ldr	r1, [sp, #32]
    cf34:	f001 fd02 	bl	e93c <_Bfree>
    cf38:	9803      	ldr	r0, [sp, #12]
    cf3a:	9905      	ldr	r1, [sp, #20]
    cf3c:	f001 fcfe 	bl	e93c <_Bfree>
    cf40:	9803      	ldr	r0, [sp, #12]
    cf42:	9904      	ldr	r1, [sp, #16]
    cf44:	f001 fcfa 	bl	e93c <_Bfree>
    cf48:	e55f      	b.n	ca0a <_strtod_r+0x646>
    cf4a:	9b06      	ldr	r3, [sp, #24]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d011      	beq.n	cf74 <_strtod_r+0xbb0>
    cf50:	4b28      	ldr	r3, [pc, #160]	; (cff4 <_strtod_r+0xc30>)
    cf52:	1c30      	adds	r0, r6, #0
    cf54:	9311      	str	r3, [sp, #68]	; 0x44
    cf56:	2300      	movs	r3, #0
    cf58:	9310      	str	r3, [sp, #64]	; 0x40
    cf5a:	1c39      	adds	r1, r7, #0
    cf5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cf5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cf60:	f7fc f946 	bl	91f0 <__aeabi_dmul>
    cf64:	1c06      	adds	r6, r0, #0
    cf66:	1e0f      	subs	r7, r1, #0
    cf68:	d104      	bne.n	cf74 <_strtod_r+0xbb0>
    cf6a:	2800      	cmp	r0, #0
    cf6c:	d102      	bne.n	cf74 <_strtod_r+0xbb0>
    cf6e:	2322      	movs	r3, #34	; 0x22
    cf70:	9a03      	ldr	r2, [sp, #12]
    cf72:	6013      	str	r3, [r2, #0]
    cf74:	9803      	ldr	r0, [sp, #12]
    cf76:	991e      	ldr	r1, [sp, #120]	; 0x78
    cf78:	f001 fce0 	bl	e93c <_Bfree>
    cf7c:	9803      	ldr	r0, [sp, #12]
    cf7e:	9908      	ldr	r1, [sp, #32]
    cf80:	f001 fcdc 	bl	e93c <_Bfree>
    cf84:	9803      	ldr	r0, [sp, #12]
    cf86:	9905      	ldr	r1, [sp, #20]
    cf88:	f001 fcd8 	bl	e93c <_Bfree>
    cf8c:	9803      	ldr	r0, [sp, #12]
    cf8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cf90:	f001 fcd4 	bl	e93c <_Bfree>
    cf94:	9803      	ldr	r0, [sp, #12]
    cf96:	9904      	ldr	r1, [sp, #16]
    cf98:	f001 fcd0 	bl	e93c <_Bfree>
    cf9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cf9e:	2b00      	cmp	r3, #0
    cfa0:	d002      	beq.n	cfa8 <_strtod_r+0xbe4>
    cfa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cfa4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    cfa6:	601a      	str	r2, [r3, #0]
    cfa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d004      	beq.n	cfb8 <_strtod_r+0xbf4>
    cfae:	2380      	movs	r3, #128	; 0x80
    cfb0:	061b      	lsls	r3, r3, #24
    cfb2:	1c32      	adds	r2, r6, #0
    cfb4:	18fb      	adds	r3, r7, r3
    cfb6:	e001      	b.n	cfbc <_strtod_r+0xbf8>
    cfb8:	1c32      	adds	r2, r6, #0
    cfba:	1c3b      	adds	r3, r7, #0
    cfbc:	1c10      	adds	r0, r2, #0
    cfbe:	1c19      	adds	r1, r3, #0
    cfc0:	b023      	add	sp, #140	; 0x8c
    cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfc4:	7ff00000 	.word	0x7ff00000
    cfc8:	7fe00000 	.word	0x7fe00000
    cfcc:	fcb00000 	.word	0xfcb00000
    cfd0:	7c9fffff 	.word	0x7c9fffff
    cfd4:	7fefffff 	.word	0x7fefffff
    cfd8:	ffc00000 	.word	0xffc00000
    cfdc:	41dfffff 	.word	0x41dfffff
    cfe0:	94a03595 	.word	0x94a03595
    cfe4:	3fdfffff 	.word	0x3fdfffff
    cfe8:	35afe535 	.word	0x35afe535
    cfec:	3fe00000 	.word	0x3fe00000
    cff0:	3fcfffff 	.word	0x3fcfffff
    cff4:	39500000 	.word	0x39500000

0000cff8 <_strtol_r>:
    cff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cffa:	1c1e      	adds	r6, r3, #0
    cffc:	4b44      	ldr	r3, [pc, #272]	; (d110 <_strtol_r+0x118>)
    cffe:	b087      	sub	sp, #28
    d000:	681b      	ldr	r3, [r3, #0]
    d002:	9005      	str	r0, [sp, #20]
    d004:	9302      	str	r3, [sp, #8]
    d006:	1c0b      	adds	r3, r1, #0
    d008:	9103      	str	r1, [sp, #12]
    d00a:	9201      	str	r2, [sp, #4]
    d00c:	781c      	ldrb	r4, [r3, #0]
    d00e:	9a02      	ldr	r2, [sp, #8]
    d010:	1c5d      	adds	r5, r3, #1
    d012:	1912      	adds	r2, r2, r4
    d014:	7850      	ldrb	r0, [r2, #1]
    d016:	2208      	movs	r2, #8
    d018:	4010      	ands	r0, r2
    d01a:	d001      	beq.n	d020 <_strtol_r+0x28>
    d01c:	1c2b      	adds	r3, r5, #0
    d01e:	e7f5      	b.n	d00c <_strtol_r+0x14>
    d020:	2c2d      	cmp	r4, #45	; 0x2d
    d022:	d104      	bne.n	d02e <_strtol_r+0x36>
    d024:	1c9d      	adds	r5, r3, #2
    d026:	785c      	ldrb	r4, [r3, #1]
    d028:	2301      	movs	r3, #1
    d02a:	9300      	str	r3, [sp, #0]
    d02c:	e004      	b.n	d038 <_strtol_r+0x40>
    d02e:	9000      	str	r0, [sp, #0]
    d030:	2c2b      	cmp	r4, #43	; 0x2b
    d032:	d101      	bne.n	d038 <_strtol_r+0x40>
    d034:	785c      	ldrb	r4, [r3, #1]
    d036:	1c9d      	adds	r5, r3, #2
    d038:	2e00      	cmp	r6, #0
    d03a:	d002      	beq.n	d042 <_strtol_r+0x4a>
    d03c:	2e10      	cmp	r6, #16
    d03e:	d10a      	bne.n	d056 <_strtol_r+0x5e>
    d040:	e060      	b.n	d104 <_strtol_r+0x10c>
    d042:	2c30      	cmp	r4, #48	; 0x30
    d044:	d15c      	bne.n	d100 <_strtol_r+0x108>
    d046:	2220      	movs	r2, #32
    d048:	782b      	ldrb	r3, [r5, #0]
    d04a:	4393      	bics	r3, r2
    d04c:	2b58      	cmp	r3, #88	; 0x58
    d04e:	d152      	bne.n	d0f6 <_strtol_r+0xfe>
    d050:	2610      	movs	r6, #16
    d052:	786c      	ldrb	r4, [r5, #1]
    d054:	3502      	adds	r5, #2
    d056:	9f00      	ldr	r7, [sp, #0]
    d058:	1c31      	adds	r1, r6, #0
    d05a:	1e7b      	subs	r3, r7, #1
    d05c:	419f      	sbcs	r7, r3
    d05e:	4b2d      	ldr	r3, [pc, #180]	; (d114 <_strtol_r+0x11c>)
    d060:	18ff      	adds	r7, r7, r3
    d062:	1c38      	adds	r0, r7, #0
    d064:	f7fa f8d4 	bl	7210 <__aeabi_uidivmod>
    d068:	1c38      	adds	r0, r7, #0
    d06a:	9104      	str	r1, [sp, #16]
    d06c:	1c31      	adds	r1, r6, #0
    d06e:	f7fa f849 	bl	7104 <__aeabi_uidiv>
    d072:	2200      	movs	r2, #0
    d074:	1c07      	adds	r7, r0, #0
    d076:	1c13      	adds	r3, r2, #0
    d078:	9902      	ldr	r1, [sp, #8]
    d07a:	1909      	adds	r1, r1, r4
    d07c:	7849      	ldrb	r1, [r1, #1]
    d07e:	0748      	lsls	r0, r1, #29
    d080:	d501      	bpl.n	d086 <_strtol_r+0x8e>
    d082:	3c30      	subs	r4, #48	; 0x30
    d084:	e007      	b.n	d096 <_strtol_r+0x9e>
    d086:	2003      	movs	r0, #3
    d088:	4008      	ands	r0, r1
    d08a:	d017      	beq.n	d0bc <_strtol_r+0xc4>
    d08c:	2137      	movs	r1, #55	; 0x37
    d08e:	2801      	cmp	r0, #1
    d090:	d000      	beq.n	d094 <_strtol_r+0x9c>
    d092:	3120      	adds	r1, #32
    d094:	1a64      	subs	r4, r4, r1
    d096:	42b4      	cmp	r4, r6
    d098:	da10      	bge.n	d0bc <_strtol_r+0xc4>
    d09a:	1c51      	adds	r1, r2, #1
    d09c:	d00b      	beq.n	d0b6 <_strtol_r+0xbe>
    d09e:	42bb      	cmp	r3, r7
    d0a0:	d807      	bhi.n	d0b2 <_strtol_r+0xba>
    d0a2:	d102      	bne.n	d0aa <_strtol_r+0xb2>
    d0a4:	9a04      	ldr	r2, [sp, #16]
    d0a6:	4294      	cmp	r4, r2
    d0a8:	dc03      	bgt.n	d0b2 <_strtol_r+0xba>
    d0aa:	4373      	muls	r3, r6
    d0ac:	2201      	movs	r2, #1
    d0ae:	18e3      	adds	r3, r4, r3
    d0b0:	e001      	b.n	d0b6 <_strtol_r+0xbe>
    d0b2:	2201      	movs	r2, #1
    d0b4:	4252      	negs	r2, r2
    d0b6:	782c      	ldrb	r4, [r5, #0]
    d0b8:	3501      	adds	r5, #1
    d0ba:	e7dd      	b.n	d078 <_strtol_r+0x80>
    d0bc:	1c18      	adds	r0, r3, #0
    d0be:	1c51      	adds	r1, r2, #1
    d0c0:	d10b      	bne.n	d0da <_strtol_r+0xe2>
    d0c2:	9800      	ldr	r0, [sp, #0]
    d0c4:	9a05      	ldr	r2, [sp, #20]
    d0c6:	1e43      	subs	r3, r0, #1
    d0c8:	4198      	sbcs	r0, r3
    d0ca:	4b12      	ldr	r3, [pc, #72]	; (d114 <_strtol_r+0x11c>)
    d0cc:	18c0      	adds	r0, r0, r3
    d0ce:	2322      	movs	r3, #34	; 0x22
    d0d0:	6013      	str	r3, [r2, #0]
    d0d2:	9b01      	ldr	r3, [sp, #4]
    d0d4:	2b00      	cmp	r3, #0
    d0d6:	d10a      	bne.n	d0ee <_strtol_r+0xf6>
    d0d8:	e017      	b.n	d10a <_strtol_r+0x112>
    d0da:	9900      	ldr	r1, [sp, #0]
    d0dc:	2900      	cmp	r1, #0
    d0de:	d000      	beq.n	d0e2 <_strtol_r+0xea>
    d0e0:	4258      	negs	r0, r3
    d0e2:	9b01      	ldr	r3, [sp, #4]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	d010      	beq.n	d10a <_strtol_r+0x112>
    d0e8:	9b03      	ldr	r3, [sp, #12]
    d0ea:	2a00      	cmp	r2, #0
    d0ec:	d000      	beq.n	d0f0 <_strtol_r+0xf8>
    d0ee:	1e6b      	subs	r3, r5, #1
    d0f0:	9a01      	ldr	r2, [sp, #4]
    d0f2:	6013      	str	r3, [r2, #0]
    d0f4:	e009      	b.n	d10a <_strtol_r+0x112>
    d0f6:	2430      	movs	r4, #48	; 0x30
    d0f8:	2e00      	cmp	r6, #0
    d0fa:	d1ac      	bne.n	d056 <_strtol_r+0x5e>
    d0fc:	2608      	movs	r6, #8
    d0fe:	e7aa      	b.n	d056 <_strtol_r+0x5e>
    d100:	260a      	movs	r6, #10
    d102:	e7a8      	b.n	d056 <_strtol_r+0x5e>
    d104:	2c30      	cmp	r4, #48	; 0x30
    d106:	d1a6      	bne.n	d056 <_strtol_r+0x5e>
    d108:	e79d      	b.n	d046 <_strtol_r+0x4e>
    d10a:	b007      	add	sp, #28
    d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d10e:	46c0      	nop			; (mov r8, r8)
    d110:	20000138 	.word	0x20000138
    d114:	7fffffff 	.word	0x7fffffff

0000d118 <_strtoul_r>:
    d118:	b5f0      	push	{r4, r5, r6, r7, lr}
    d11a:	1c1e      	adds	r6, r3, #0
    d11c:	4b3e      	ldr	r3, [pc, #248]	; (d218 <_strtoul_r+0x100>)
    d11e:	b087      	sub	sp, #28
    d120:	681b      	ldr	r3, [r3, #0]
    d122:	1c17      	adds	r7, r2, #0
    d124:	9302      	str	r3, [sp, #8]
    d126:	1c0b      	adds	r3, r1, #0
    d128:	9005      	str	r0, [sp, #20]
    d12a:	9104      	str	r1, [sp, #16]
    d12c:	781c      	ldrb	r4, [r3, #0]
    d12e:	9a02      	ldr	r2, [sp, #8]
    d130:	1c5d      	adds	r5, r3, #1
    d132:	1912      	adds	r2, r2, r4
    d134:	7851      	ldrb	r1, [r2, #1]
    d136:	2208      	movs	r2, #8
    d138:	400a      	ands	r2, r1
    d13a:	d001      	beq.n	d140 <_strtoul_r+0x28>
    d13c:	1c2b      	adds	r3, r5, #0
    d13e:	e7f5      	b.n	d12c <_strtoul_r+0x14>
    d140:	2c2d      	cmp	r4, #45	; 0x2d
    d142:	d104      	bne.n	d14e <_strtoul_r+0x36>
    d144:	1c9d      	adds	r5, r3, #2
    d146:	785c      	ldrb	r4, [r3, #1]
    d148:	2301      	movs	r3, #1
    d14a:	9301      	str	r3, [sp, #4]
    d14c:	e004      	b.n	d158 <_strtoul_r+0x40>
    d14e:	9201      	str	r2, [sp, #4]
    d150:	2c2b      	cmp	r4, #43	; 0x2b
    d152:	d101      	bne.n	d158 <_strtoul_r+0x40>
    d154:	785c      	ldrb	r4, [r3, #1]
    d156:	1c9d      	adds	r5, r3, #2
    d158:	2e00      	cmp	r6, #0
    d15a:	d002      	beq.n	d162 <_strtoul_r+0x4a>
    d15c:	2e10      	cmp	r6, #16
    d15e:	d10a      	bne.n	d176 <_strtoul_r+0x5e>
    d160:	e054      	b.n	d20c <_strtoul_r+0xf4>
    d162:	2c30      	cmp	r4, #48	; 0x30
    d164:	d150      	bne.n	d208 <_strtoul_r+0xf0>
    d166:	2220      	movs	r2, #32
    d168:	782b      	ldrb	r3, [r5, #0]
    d16a:	4393      	bics	r3, r2
    d16c:	2b58      	cmp	r3, #88	; 0x58
    d16e:	d146      	bne.n	d1fe <_strtoul_r+0xe6>
    d170:	2610      	movs	r6, #16
    d172:	786c      	ldrb	r4, [r5, #1]
    d174:	3502      	adds	r5, #2
    d176:	2001      	movs	r0, #1
    d178:	1c31      	adds	r1, r6, #0
    d17a:	4240      	negs	r0, r0
    d17c:	f7f9 ffc2 	bl	7104 <__aeabi_uidiv>
    d180:	9003      	str	r0, [sp, #12]
    d182:	2001      	movs	r0, #1
    d184:	1c31      	adds	r1, r6, #0
    d186:	4240      	negs	r0, r0
    d188:	f7fa f842 	bl	7210 <__aeabi_uidivmod>
    d18c:	2200      	movs	r2, #0
    d18e:	468c      	mov	ip, r1
    d190:	1c13      	adds	r3, r2, #0
    d192:	9902      	ldr	r1, [sp, #8]
    d194:	1909      	adds	r1, r1, r4
    d196:	7849      	ldrb	r1, [r1, #1]
    d198:	0748      	lsls	r0, r1, #29
    d19a:	d501      	bpl.n	d1a0 <_strtoul_r+0x88>
    d19c:	3c30      	subs	r4, #48	; 0x30
    d19e:	e007      	b.n	d1b0 <_strtoul_r+0x98>
    d1a0:	2003      	movs	r0, #3
    d1a2:	4008      	ands	r0, r1
    d1a4:	d017      	beq.n	d1d6 <_strtoul_r+0xbe>
    d1a6:	2137      	movs	r1, #55	; 0x37
    d1a8:	2801      	cmp	r0, #1
    d1aa:	d000      	beq.n	d1ae <_strtoul_r+0x96>
    d1ac:	3120      	adds	r1, #32
    d1ae:	1a64      	subs	r4, r4, r1
    d1b0:	42b4      	cmp	r4, r6
    d1b2:	da10      	bge.n	d1d6 <_strtoul_r+0xbe>
    d1b4:	1c51      	adds	r1, r2, #1
    d1b6:	d00b      	beq.n	d1d0 <_strtoul_r+0xb8>
    d1b8:	9a03      	ldr	r2, [sp, #12]
    d1ba:	4293      	cmp	r3, r2
    d1bc:	d806      	bhi.n	d1cc <_strtoul_r+0xb4>
    d1be:	d101      	bne.n	d1c4 <_strtoul_r+0xac>
    d1c0:	4564      	cmp	r4, ip
    d1c2:	dc03      	bgt.n	d1cc <_strtoul_r+0xb4>
    d1c4:	4373      	muls	r3, r6
    d1c6:	2201      	movs	r2, #1
    d1c8:	18e3      	adds	r3, r4, r3
    d1ca:	e001      	b.n	d1d0 <_strtoul_r+0xb8>
    d1cc:	2201      	movs	r2, #1
    d1ce:	4252      	negs	r2, r2
    d1d0:	782c      	ldrb	r4, [r5, #0]
    d1d2:	3501      	adds	r5, #1
    d1d4:	e7dd      	b.n	d192 <_strtoul_r+0x7a>
    d1d6:	1c18      	adds	r0, r3, #0
    d1d8:	1c51      	adds	r1, r2, #1
    d1da:	d104      	bne.n	d1e6 <_strtoul_r+0xce>
    d1dc:	2322      	movs	r3, #34	; 0x22
    d1de:	9905      	ldr	r1, [sp, #20]
    d1e0:	1c10      	adds	r0, r2, #0
    d1e2:	600b      	str	r3, [r1, #0]
    d1e4:	e003      	b.n	d1ee <_strtoul_r+0xd6>
    d1e6:	9901      	ldr	r1, [sp, #4]
    d1e8:	2900      	cmp	r1, #0
    d1ea:	d000      	beq.n	d1ee <_strtoul_r+0xd6>
    d1ec:	4258      	negs	r0, r3
    d1ee:	2f00      	cmp	r7, #0
    d1f0:	d00f      	beq.n	d212 <_strtoul_r+0xfa>
    d1f2:	9b04      	ldr	r3, [sp, #16]
    d1f4:	2a00      	cmp	r2, #0
    d1f6:	d000      	beq.n	d1fa <_strtoul_r+0xe2>
    d1f8:	1e6b      	subs	r3, r5, #1
    d1fa:	603b      	str	r3, [r7, #0]
    d1fc:	e009      	b.n	d212 <_strtoul_r+0xfa>
    d1fe:	2430      	movs	r4, #48	; 0x30
    d200:	2e00      	cmp	r6, #0
    d202:	d1b8      	bne.n	d176 <_strtoul_r+0x5e>
    d204:	2608      	movs	r6, #8
    d206:	e7b6      	b.n	d176 <_strtoul_r+0x5e>
    d208:	260a      	movs	r6, #10
    d20a:	e7b4      	b.n	d176 <_strtoul_r+0x5e>
    d20c:	2c30      	cmp	r4, #48	; 0x30
    d20e:	d1b2      	bne.n	d176 <_strtoul_r+0x5e>
    d210:	e7a9      	b.n	d166 <_strtoul_r+0x4e>
    d212:	b007      	add	sp, #28
    d214:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d216:	46c0      	nop			; (mov r8, r8)
    d218:	20000138 	.word	0x20000138

0000d21c <__submore>:
    d21c:	1c0b      	adds	r3, r1, #0
    d21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d220:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    d222:	3344      	adds	r3, #68	; 0x44
    d224:	1c0c      	adds	r4, r1, #0
    d226:	429d      	cmp	r5, r3
    d228:	d11b      	bne.n	d262 <__submore+0x46>
    d22a:	2680      	movs	r6, #128	; 0x80
    d22c:	00f6      	lsls	r6, r6, #3
    d22e:	1c31      	adds	r1, r6, #0
    d230:	f7fd fc2c 	bl	aa8c <_malloc_r>
    d234:	2800      	cmp	r0, #0
    d236:	d102      	bne.n	d23e <__submore+0x22>
    d238:	2001      	movs	r0, #1
    d23a:	4240      	negs	r0, r0
    d23c:	e025      	b.n	d28a <__submore+0x6e>
    d23e:	1c23      	adds	r3, r4, #0
    d240:	6360      	str	r0, [r4, #52]	; 0x34
    d242:	63a6      	str	r6, [r4, #56]	; 0x38
    d244:	3346      	adds	r3, #70	; 0x46
    d246:	781a      	ldrb	r2, [r3, #0]
    d248:	4b10      	ldr	r3, [pc, #64]	; (d28c <__submore+0x70>)
    d24a:	54c2      	strb	r2, [r0, r3]
    d24c:	1c23      	adds	r3, r4, #0
    d24e:	3345      	adds	r3, #69	; 0x45
    d250:	781a      	ldrb	r2, [r3, #0]
    d252:	4b0f      	ldr	r3, [pc, #60]	; (d290 <__submore+0x74>)
    d254:	54c2      	strb	r2, [r0, r3]
    d256:	782a      	ldrb	r2, [r5, #0]
    d258:	4b0e      	ldr	r3, [pc, #56]	; (d294 <__submore+0x78>)
    d25a:	54c2      	strb	r2, [r0, r3]
    d25c:	18c0      	adds	r0, r0, r3
    d25e:	6020      	str	r0, [r4, #0]
    d260:	e012      	b.n	d288 <__submore+0x6c>
    d262:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    d264:	1c29      	adds	r1, r5, #0
    d266:	0073      	lsls	r3, r6, #1
    d268:	1c1a      	adds	r2, r3, #0
    d26a:	9301      	str	r3, [sp, #4]
    d26c:	f001 ff3f 	bl	f0ee <_realloc_r>
    d270:	1e05      	subs	r5, r0, #0
    d272:	d0e1      	beq.n	d238 <__submore+0x1c>
    d274:	1987      	adds	r7, r0, r6
    d276:	1c38      	adds	r0, r7, #0
    d278:	1c29      	adds	r1, r5, #0
    d27a:	1c32      	adds	r2, r6, #0
    d27c:	f7fd fbaf 	bl	a9de <memcpy>
    d280:	9b01      	ldr	r3, [sp, #4]
    d282:	6027      	str	r7, [r4, #0]
    d284:	6365      	str	r5, [r4, #52]	; 0x34
    d286:	63a3      	str	r3, [r4, #56]	; 0x38
    d288:	2000      	movs	r0, #0
    d28a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d28c:	000003ff 	.word	0x000003ff
    d290:	000003fe 	.word	0x000003fe
    d294:	000003fd 	.word	0x000003fd

0000d298 <__swbuf_r>:
    d298:	b570      	push	{r4, r5, r6, lr}
    d29a:	1c05      	adds	r5, r0, #0
    d29c:	1c0e      	adds	r6, r1, #0
    d29e:	1c14      	adds	r4, r2, #0
    d2a0:	2800      	cmp	r0, #0
    d2a2:	d004      	beq.n	d2ae <__swbuf_r+0x16>
    d2a4:	6983      	ldr	r3, [r0, #24]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d101      	bne.n	d2ae <__swbuf_r+0x16>
    d2aa:	f7fd f933 	bl	a514 <__sinit>
    d2ae:	4b23      	ldr	r3, [pc, #140]	; (d33c <__swbuf_r+0xa4>)
    d2b0:	429c      	cmp	r4, r3
    d2b2:	d101      	bne.n	d2b8 <__swbuf_r+0x20>
    d2b4:	686c      	ldr	r4, [r5, #4]
    d2b6:	e008      	b.n	d2ca <__swbuf_r+0x32>
    d2b8:	4b21      	ldr	r3, [pc, #132]	; (d340 <__swbuf_r+0xa8>)
    d2ba:	429c      	cmp	r4, r3
    d2bc:	d101      	bne.n	d2c2 <__swbuf_r+0x2a>
    d2be:	68ac      	ldr	r4, [r5, #8]
    d2c0:	e003      	b.n	d2ca <__swbuf_r+0x32>
    d2c2:	4b20      	ldr	r3, [pc, #128]	; (d344 <__swbuf_r+0xac>)
    d2c4:	429c      	cmp	r4, r3
    d2c6:	d100      	bne.n	d2ca <__swbuf_r+0x32>
    d2c8:	68ec      	ldr	r4, [r5, #12]
    d2ca:	69a3      	ldr	r3, [r4, #24]
    d2cc:	60a3      	str	r3, [r4, #8]
    d2ce:	89a3      	ldrh	r3, [r4, #12]
    d2d0:	071b      	lsls	r3, r3, #28
    d2d2:	d50a      	bpl.n	d2ea <__swbuf_r+0x52>
    d2d4:	6923      	ldr	r3, [r4, #16]
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d007      	beq.n	d2ea <__swbuf_r+0x52>
    d2da:	6823      	ldr	r3, [r4, #0]
    d2dc:	6922      	ldr	r2, [r4, #16]
    d2de:	b2f6      	uxtb	r6, r6
    d2e0:	1a98      	subs	r0, r3, r2
    d2e2:	6963      	ldr	r3, [r4, #20]
    d2e4:	4298      	cmp	r0, r3
    d2e6:	db0f      	blt.n	d308 <__swbuf_r+0x70>
    d2e8:	e008      	b.n	d2fc <__swbuf_r+0x64>
    d2ea:	1c28      	adds	r0, r5, #0
    d2ec:	1c21      	adds	r1, r4, #0
    d2ee:	f000 f83f 	bl	d370 <__swsetup_r>
    d2f2:	2800      	cmp	r0, #0
    d2f4:	d0f1      	beq.n	d2da <__swbuf_r+0x42>
    d2f6:	2001      	movs	r0, #1
    d2f8:	4240      	negs	r0, r0
    d2fa:	e01d      	b.n	d338 <__swbuf_r+0xa0>
    d2fc:	1c28      	adds	r0, r5, #0
    d2fe:	1c21      	adds	r1, r4, #0
    d300:	f7fd f84e 	bl	a3a0 <_fflush_r>
    d304:	2800      	cmp	r0, #0
    d306:	d1f6      	bne.n	d2f6 <__swbuf_r+0x5e>
    d308:	68a3      	ldr	r3, [r4, #8]
    d30a:	3001      	adds	r0, #1
    d30c:	3b01      	subs	r3, #1
    d30e:	60a3      	str	r3, [r4, #8]
    d310:	6823      	ldr	r3, [r4, #0]
    d312:	1c5a      	adds	r2, r3, #1
    d314:	6022      	str	r2, [r4, #0]
    d316:	701e      	strb	r6, [r3, #0]
    d318:	6963      	ldr	r3, [r4, #20]
    d31a:	4298      	cmp	r0, r3
    d31c:	d005      	beq.n	d32a <__swbuf_r+0x92>
    d31e:	89a3      	ldrh	r3, [r4, #12]
    d320:	1c30      	adds	r0, r6, #0
    d322:	07db      	lsls	r3, r3, #31
    d324:	d508      	bpl.n	d338 <__swbuf_r+0xa0>
    d326:	2e0a      	cmp	r6, #10
    d328:	d106      	bne.n	d338 <__swbuf_r+0xa0>
    d32a:	1c28      	adds	r0, r5, #0
    d32c:	1c21      	adds	r1, r4, #0
    d32e:	f7fd f837 	bl	a3a0 <_fflush_r>
    d332:	2800      	cmp	r0, #0
    d334:	d1df      	bne.n	d2f6 <__swbuf_r+0x5e>
    d336:	1c30      	adds	r0, r6, #0
    d338:	bd70      	pop	{r4, r5, r6, pc}
    d33a:	46c0      	nop			; (mov r8, r8)
    d33c:	00010940 	.word	0x00010940
    d340:	00010960 	.word	0x00010960
    d344:	00010980 	.word	0x00010980

0000d348 <_write_r>:
    d348:	b538      	push	{r3, r4, r5, lr}
    d34a:	1c05      	adds	r5, r0, #0
    d34c:	2000      	movs	r0, #0
    d34e:	4c07      	ldr	r4, [pc, #28]	; (d36c <_write_r+0x24>)
    d350:	6020      	str	r0, [r4, #0]
    d352:	1c08      	adds	r0, r1, #0
    d354:	1c11      	adds	r1, r2, #0
    d356:	1c1a      	adds	r2, r3, #0
    d358:	f7f7 f8e6 	bl	4528 <_write>
    d35c:	1c43      	adds	r3, r0, #1
    d35e:	d103      	bne.n	d368 <_write_r+0x20>
    d360:	6823      	ldr	r3, [r4, #0]
    d362:	2b00      	cmp	r3, #0
    d364:	d000      	beq.n	d368 <_write_r+0x20>
    d366:	602b      	str	r3, [r5, #0]
    d368:	bd38      	pop	{r3, r4, r5, pc}
    d36a:	46c0      	nop			; (mov r8, r8)
    d36c:	20004518 	.word	0x20004518

0000d370 <__swsetup_r>:
    d370:	4b35      	ldr	r3, [pc, #212]	; (d448 <__swsetup_r+0xd8>)
    d372:	b570      	push	{r4, r5, r6, lr}
    d374:	681d      	ldr	r5, [r3, #0]
    d376:	1c06      	adds	r6, r0, #0
    d378:	1c0c      	adds	r4, r1, #0
    d37a:	2d00      	cmp	r5, #0
    d37c:	d005      	beq.n	d38a <__swsetup_r+0x1a>
    d37e:	69ab      	ldr	r3, [r5, #24]
    d380:	2b00      	cmp	r3, #0
    d382:	d102      	bne.n	d38a <__swsetup_r+0x1a>
    d384:	1c28      	adds	r0, r5, #0
    d386:	f7fd f8c5 	bl	a514 <__sinit>
    d38a:	4b30      	ldr	r3, [pc, #192]	; (d44c <__swsetup_r+0xdc>)
    d38c:	429c      	cmp	r4, r3
    d38e:	d101      	bne.n	d394 <__swsetup_r+0x24>
    d390:	686c      	ldr	r4, [r5, #4]
    d392:	e008      	b.n	d3a6 <__swsetup_r+0x36>
    d394:	4b2e      	ldr	r3, [pc, #184]	; (d450 <__swsetup_r+0xe0>)
    d396:	429c      	cmp	r4, r3
    d398:	d101      	bne.n	d39e <__swsetup_r+0x2e>
    d39a:	68ac      	ldr	r4, [r5, #8]
    d39c:	e003      	b.n	d3a6 <__swsetup_r+0x36>
    d39e:	4b2d      	ldr	r3, [pc, #180]	; (d454 <__swsetup_r+0xe4>)
    d3a0:	429c      	cmp	r4, r3
    d3a2:	d100      	bne.n	d3a6 <__swsetup_r+0x36>
    d3a4:	68ec      	ldr	r4, [r5, #12]
    d3a6:	89a3      	ldrh	r3, [r4, #12]
    d3a8:	b29a      	uxth	r2, r3
    d3aa:	0711      	lsls	r1, r2, #28
    d3ac:	d423      	bmi.n	d3f6 <__swsetup_r+0x86>
    d3ae:	06d1      	lsls	r1, r2, #27
    d3b0:	d407      	bmi.n	d3c2 <__swsetup_r+0x52>
    d3b2:	2209      	movs	r2, #9
    d3b4:	2001      	movs	r0, #1
    d3b6:	6032      	str	r2, [r6, #0]
    d3b8:	3237      	adds	r2, #55	; 0x37
    d3ba:	4313      	orrs	r3, r2
    d3bc:	81a3      	strh	r3, [r4, #12]
    d3be:	4240      	negs	r0, r0
    d3c0:	e040      	b.n	d444 <__swsetup_r+0xd4>
    d3c2:	0753      	lsls	r3, r2, #29
    d3c4:	d513      	bpl.n	d3ee <__swsetup_r+0x7e>
    d3c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d3c8:	2900      	cmp	r1, #0
    d3ca:	d008      	beq.n	d3de <__swsetup_r+0x6e>
    d3cc:	1c23      	adds	r3, r4, #0
    d3ce:	3344      	adds	r3, #68	; 0x44
    d3d0:	4299      	cmp	r1, r3
    d3d2:	d002      	beq.n	d3da <__swsetup_r+0x6a>
    d3d4:	1c30      	adds	r0, r6, #0
    d3d6:	f7fd fb13 	bl	aa00 <_free_r>
    d3da:	2300      	movs	r3, #0
    d3dc:	6363      	str	r3, [r4, #52]	; 0x34
    d3de:	2224      	movs	r2, #36	; 0x24
    d3e0:	89a3      	ldrh	r3, [r4, #12]
    d3e2:	4393      	bics	r3, r2
    d3e4:	81a3      	strh	r3, [r4, #12]
    d3e6:	2300      	movs	r3, #0
    d3e8:	6063      	str	r3, [r4, #4]
    d3ea:	6923      	ldr	r3, [r4, #16]
    d3ec:	6023      	str	r3, [r4, #0]
    d3ee:	2208      	movs	r2, #8
    d3f0:	89a3      	ldrh	r3, [r4, #12]
    d3f2:	4313      	orrs	r3, r2
    d3f4:	81a3      	strh	r3, [r4, #12]
    d3f6:	6923      	ldr	r3, [r4, #16]
    d3f8:	2b00      	cmp	r3, #0
    d3fa:	d10b      	bne.n	d414 <__swsetup_r+0xa4>
    d3fc:	23a0      	movs	r3, #160	; 0xa0
    d3fe:	89a2      	ldrh	r2, [r4, #12]
    d400:	009b      	lsls	r3, r3, #2
    d402:	4013      	ands	r3, r2
    d404:	2280      	movs	r2, #128	; 0x80
    d406:	0092      	lsls	r2, r2, #2
    d408:	4293      	cmp	r3, r2
    d40a:	d003      	beq.n	d414 <__swsetup_r+0xa4>
    d40c:	1c30      	adds	r0, r6, #0
    d40e:	1c21      	adds	r1, r4, #0
    d410:	f7fd fa6e 	bl	a8f0 <__smakebuf_r>
    d414:	2301      	movs	r3, #1
    d416:	89a2      	ldrh	r2, [r4, #12]
    d418:	4013      	ands	r3, r2
    d41a:	d005      	beq.n	d428 <__swsetup_r+0xb8>
    d41c:	2300      	movs	r3, #0
    d41e:	60a3      	str	r3, [r4, #8]
    d420:	6963      	ldr	r3, [r4, #20]
    d422:	425b      	negs	r3, r3
    d424:	61a3      	str	r3, [r4, #24]
    d426:	e003      	b.n	d430 <__swsetup_r+0xc0>
    d428:	0791      	lsls	r1, r2, #30
    d42a:	d400      	bmi.n	d42e <__swsetup_r+0xbe>
    d42c:	6963      	ldr	r3, [r4, #20]
    d42e:	60a3      	str	r3, [r4, #8]
    d430:	2000      	movs	r0, #0
    d432:	6923      	ldr	r3, [r4, #16]
    d434:	4283      	cmp	r3, r0
    d436:	d105      	bne.n	d444 <__swsetup_r+0xd4>
    d438:	0613      	lsls	r3, r2, #24
    d43a:	d503      	bpl.n	d444 <__swsetup_r+0xd4>
    d43c:	2340      	movs	r3, #64	; 0x40
    d43e:	431a      	orrs	r2, r3
    d440:	81a2      	strh	r2, [r4, #12]
    d442:	3801      	subs	r0, #1
    d444:	bd70      	pop	{r4, r5, r6, pc}
    d446:	46c0      	nop			; (mov r8, r8)
    d448:	20000134 	.word	0x20000134
    d44c:	00010940 	.word	0x00010940
    d450:	00010960 	.word	0x00010960
    d454:	00010980 	.word	0x00010980

0000d458 <_close_r>:
    d458:	b538      	push	{r3, r4, r5, lr}
    d45a:	2300      	movs	r3, #0
    d45c:	4c06      	ldr	r4, [pc, #24]	; (d478 <_close_r+0x20>)
    d45e:	1c05      	adds	r5, r0, #0
    d460:	1c08      	adds	r0, r1, #0
    d462:	6023      	str	r3, [r4, #0]
    d464:	f7f7 f84a 	bl	44fc <_close>
    d468:	1c43      	adds	r3, r0, #1
    d46a:	d103      	bne.n	d474 <_close_r+0x1c>
    d46c:	6823      	ldr	r3, [r4, #0]
    d46e:	2b00      	cmp	r3, #0
    d470:	d000      	beq.n	d474 <_close_r+0x1c>
    d472:	602b      	str	r3, [r5, #0]
    d474:	bd38      	pop	{r3, r4, r5, pc}
    d476:	46c0      	nop			; (mov r8, r8)
    d478:	20004518 	.word	0x20004518

0000d47c <quorem>:
    d47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d47e:	6903      	ldr	r3, [r0, #16]
    d480:	690c      	ldr	r4, [r1, #16]
    d482:	b089      	sub	sp, #36	; 0x24
    d484:	2600      	movs	r6, #0
    d486:	42a3      	cmp	r3, r4
    d488:	db7c      	blt.n	d584 <quorem+0x108>
    d48a:	1c0b      	adds	r3, r1, #0
    d48c:	3c01      	subs	r4, #1
    d48e:	3314      	adds	r3, #20
    d490:	00a5      	lsls	r5, r4, #2
    d492:	9303      	str	r3, [sp, #12]
    d494:	195b      	adds	r3, r3, r5
    d496:	9304      	str	r3, [sp, #16]
    d498:	1c03      	adds	r3, r0, #0
    d49a:	3314      	adds	r3, #20
    d49c:	9301      	str	r3, [sp, #4]
    d49e:	195d      	adds	r5, r3, r5
    d4a0:	9b04      	ldr	r3, [sp, #16]
    d4a2:	9107      	str	r1, [sp, #28]
    d4a4:	681b      	ldr	r3, [r3, #0]
    d4a6:	9002      	str	r0, [sp, #8]
    d4a8:	1c59      	adds	r1, r3, #1
    d4aa:	6828      	ldr	r0, [r5, #0]
    d4ac:	9305      	str	r3, [sp, #20]
    d4ae:	f7f9 fe29 	bl	7104 <__aeabi_uidiv>
    d4b2:	1e07      	subs	r7, r0, #0
    d4b4:	42b7      	cmp	r7, r6
    d4b6:	d035      	beq.n	d524 <quorem+0xa8>
    d4b8:	9b03      	ldr	r3, [sp, #12]
    d4ba:	9801      	ldr	r0, [sp, #4]
    d4bc:	469c      	mov	ip, r3
    d4be:	9605      	str	r6, [sp, #20]
    d4c0:	4663      	mov	r3, ip
    d4c2:	cb04      	ldmia	r3!, {r2}
    d4c4:	b291      	uxth	r1, r2
    d4c6:	4379      	muls	r1, r7
    d4c8:	0c12      	lsrs	r2, r2, #16
    d4ca:	437a      	muls	r2, r7
    d4cc:	1871      	adds	r1, r6, r1
    d4ce:	0c0e      	lsrs	r6, r1, #16
    d4d0:	469c      	mov	ip, r3
    d4d2:	18b3      	adds	r3, r6, r2
    d4d4:	9306      	str	r3, [sp, #24]
    d4d6:	8802      	ldrh	r2, [r0, #0]
    d4d8:	0c1e      	lsrs	r6, r3, #16
    d4da:	9b05      	ldr	r3, [sp, #20]
    d4dc:	b289      	uxth	r1, r1
    d4de:	18d2      	adds	r2, r2, r3
    d4e0:	6803      	ldr	r3, [r0, #0]
    d4e2:	1a52      	subs	r2, r2, r1
    d4e4:	0c19      	lsrs	r1, r3, #16
    d4e6:	466b      	mov	r3, sp
    d4e8:	8b1b      	ldrh	r3, [r3, #24]
    d4ea:	1acb      	subs	r3, r1, r3
    d4ec:	1411      	asrs	r1, r2, #16
    d4ee:	185b      	adds	r3, r3, r1
    d4f0:	1419      	asrs	r1, r3, #16
    d4f2:	b292      	uxth	r2, r2
    d4f4:	041b      	lsls	r3, r3, #16
    d4f6:	431a      	orrs	r2, r3
    d4f8:	9b04      	ldr	r3, [sp, #16]
    d4fa:	9105      	str	r1, [sp, #20]
    d4fc:	c004      	stmia	r0!, {r2}
    d4fe:	4563      	cmp	r3, ip
    d500:	d2de      	bcs.n	d4c0 <quorem+0x44>
    d502:	682b      	ldr	r3, [r5, #0]
    d504:	2b00      	cmp	r3, #0
    d506:	d10d      	bne.n	d524 <quorem+0xa8>
    d508:	1c23      	adds	r3, r4, #0
    d50a:	9a01      	ldr	r2, [sp, #4]
    d50c:	3d04      	subs	r5, #4
    d50e:	4295      	cmp	r5, r2
    d510:	d803      	bhi.n	d51a <quorem+0x9e>
    d512:	9a02      	ldr	r2, [sp, #8]
    d514:	1c1c      	adds	r4, r3, #0
    d516:	6113      	str	r3, [r2, #16]
    d518:	e004      	b.n	d524 <quorem+0xa8>
    d51a:	682a      	ldr	r2, [r5, #0]
    d51c:	2a00      	cmp	r2, #0
    d51e:	d1f8      	bne.n	d512 <quorem+0x96>
    d520:	3b01      	subs	r3, #1
    d522:	e7f2      	b.n	d50a <quorem+0x8e>
    d524:	9802      	ldr	r0, [sp, #8]
    d526:	9907      	ldr	r1, [sp, #28]
    d528:	f001 fc22 	bl	ed70 <__mcmp>
    d52c:	2800      	cmp	r0, #0
    d52e:	db28      	blt.n	d582 <quorem+0x106>
    d530:	2000      	movs	r0, #0
    d532:	9901      	ldr	r1, [sp, #4]
    d534:	9a03      	ldr	r2, [sp, #12]
    d536:	3701      	adds	r7, #1
    d538:	ca20      	ldmia	r2!, {r5}
    d53a:	880b      	ldrh	r3, [r1, #0]
    d53c:	1818      	adds	r0, r3, r0
    d53e:	b2ab      	uxth	r3, r5
    d540:	1ac3      	subs	r3, r0, r3
    d542:	6808      	ldr	r0, [r1, #0]
    d544:	0c2d      	lsrs	r5, r5, #16
    d546:	0c00      	lsrs	r0, r0, #16
    d548:	1b45      	subs	r5, r0, r5
    d54a:	141e      	asrs	r6, r3, #16
    d54c:	19ad      	adds	r5, r5, r6
    d54e:	1428      	asrs	r0, r5, #16
    d550:	b29b      	uxth	r3, r3
    d552:	042d      	lsls	r5, r5, #16
    d554:	432b      	orrs	r3, r5
    d556:	c108      	stmia	r1!, {r3}
    d558:	9b04      	ldr	r3, [sp, #16]
    d55a:	4293      	cmp	r3, r2
    d55c:	d2ec      	bcs.n	d538 <quorem+0xbc>
    d55e:	9a01      	ldr	r2, [sp, #4]
    d560:	00a3      	lsls	r3, r4, #2
    d562:	18d3      	adds	r3, r2, r3
    d564:	681a      	ldr	r2, [r3, #0]
    d566:	2a00      	cmp	r2, #0
    d568:	d10b      	bne.n	d582 <quorem+0x106>
    d56a:	9a01      	ldr	r2, [sp, #4]
    d56c:	3b04      	subs	r3, #4
    d56e:	4293      	cmp	r3, r2
    d570:	d802      	bhi.n	d578 <quorem+0xfc>
    d572:	9b02      	ldr	r3, [sp, #8]
    d574:	611c      	str	r4, [r3, #16]
    d576:	e004      	b.n	d582 <quorem+0x106>
    d578:	681a      	ldr	r2, [r3, #0]
    d57a:	2a00      	cmp	r2, #0
    d57c:	d1f9      	bne.n	d572 <quorem+0xf6>
    d57e:	3c01      	subs	r4, #1
    d580:	e7f3      	b.n	d56a <quorem+0xee>
    d582:	1c3e      	adds	r6, r7, #0
    d584:	1c30      	adds	r0, r6, #0
    d586:	b009      	add	sp, #36	; 0x24
    d588:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000d58c <_dtoa_r>:
    d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d58e:	1c16      	adds	r6, r2, #0
    d590:	1c1f      	adds	r7, r3, #0
    d592:	6a44      	ldr	r4, [r0, #36]	; 0x24
    d594:	b09b      	sub	sp, #108	; 0x6c
    d596:	9008      	str	r0, [sp, #32]
    d598:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    d59a:	9606      	str	r6, [sp, #24]
    d59c:	9707      	str	r7, [sp, #28]
    d59e:	2c00      	cmp	r4, #0
    d5a0:	d108      	bne.n	d5b4 <_dtoa_r+0x28>
    d5a2:	2010      	movs	r0, #16
    d5a4:	f7fd f9fc 	bl	a9a0 <malloc>
    d5a8:	9b08      	ldr	r3, [sp, #32]
    d5aa:	6258      	str	r0, [r3, #36]	; 0x24
    d5ac:	6044      	str	r4, [r0, #4]
    d5ae:	6084      	str	r4, [r0, #8]
    d5b0:	6004      	str	r4, [r0, #0]
    d5b2:	60c4      	str	r4, [r0, #12]
    d5b4:	9b08      	ldr	r3, [sp, #32]
    d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d5b8:	6819      	ldr	r1, [r3, #0]
    d5ba:	2900      	cmp	r1, #0
    d5bc:	d00b      	beq.n	d5d6 <_dtoa_r+0x4a>
    d5be:	685a      	ldr	r2, [r3, #4]
    d5c0:	2301      	movs	r3, #1
    d5c2:	4093      	lsls	r3, r2
    d5c4:	604a      	str	r2, [r1, #4]
    d5c6:	608b      	str	r3, [r1, #8]
    d5c8:	9808      	ldr	r0, [sp, #32]
    d5ca:	f001 f9b7 	bl	e93c <_Bfree>
    d5ce:	2200      	movs	r2, #0
    d5d0:	9b08      	ldr	r3, [sp, #32]
    d5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d5d4:	601a      	str	r2, [r3, #0]
    d5d6:	9b07      	ldr	r3, [sp, #28]
    d5d8:	2b00      	cmp	r3, #0
    d5da:	da05      	bge.n	d5e8 <_dtoa_r+0x5c>
    d5dc:	2301      	movs	r3, #1
    d5de:	602b      	str	r3, [r5, #0]
    d5e0:	007b      	lsls	r3, r7, #1
    d5e2:	085b      	lsrs	r3, r3, #1
    d5e4:	9307      	str	r3, [sp, #28]
    d5e6:	e001      	b.n	d5ec <_dtoa_r+0x60>
    d5e8:	2300      	movs	r3, #0
    d5ea:	602b      	str	r3, [r5, #0]
    d5ec:	9c07      	ldr	r4, [sp, #28]
    d5ee:	4bc6      	ldr	r3, [pc, #792]	; (d908 <_dtoa_r+0x37c>)
    d5f0:	1c22      	adds	r2, r4, #0
    d5f2:	9317      	str	r3, [sp, #92]	; 0x5c
    d5f4:	401a      	ands	r2, r3
    d5f6:	429a      	cmp	r2, r3
    d5f8:	d119      	bne.n	d62e <_dtoa_r+0xa2>
    d5fa:	4bc4      	ldr	r3, [pc, #784]	; (d90c <_dtoa_r+0x380>)
    d5fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d5fe:	6013      	str	r3, [r2, #0]
    d600:	9a06      	ldr	r2, [sp, #24]
    d602:	4bc3      	ldr	r3, [pc, #780]	; (d910 <_dtoa_r+0x384>)
    d604:	2a00      	cmp	r2, #0
    d606:	d102      	bne.n	d60e <_dtoa_r+0x82>
    d608:	0324      	lsls	r4, r4, #12
    d60a:	d100      	bne.n	d60e <_dtoa_r+0x82>
    d60c:	4bc1      	ldr	r3, [pc, #772]	; (d914 <_dtoa_r+0x388>)
    d60e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d610:	1c18      	adds	r0, r3, #0
    d612:	2a00      	cmp	r2, #0
    d614:	d101      	bne.n	d61a <_dtoa_r+0x8e>
    d616:	f000 fdb6 	bl	e186 <_dtoa_r+0xbfa>
    d61a:	78d9      	ldrb	r1, [r3, #3]
    d61c:	1cda      	adds	r2, r3, #3
    d61e:	2900      	cmp	r1, #0
    d620:	d000      	beq.n	d624 <_dtoa_r+0x98>
    d622:	3205      	adds	r2, #5
    d624:	9924      	ldr	r1, [sp, #144]	; 0x90
    d626:	1c18      	adds	r0, r3, #0
    d628:	600a      	str	r2, [r1, #0]
    d62a:	f000 fdac 	bl	e186 <_dtoa_r+0xbfa>
    d62e:	9e06      	ldr	r6, [sp, #24]
    d630:	9f07      	ldr	r7, [sp, #28]
    d632:	2200      	movs	r2, #0
    d634:	1c30      	adds	r0, r6, #0
    d636:	1c39      	adds	r1, r7, #0
    d638:	2300      	movs	r3, #0
    d63a:	f7f9 fef5 	bl	7428 <__aeabi_dcmpeq>
    d63e:	1e05      	subs	r5, r0, #0
    d640:	d00e      	beq.n	d660 <_dtoa_r+0xd4>
    d642:	2301      	movs	r3, #1
    d644:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d646:	6013      	str	r3, [r2, #0]
    d648:	4bb3      	ldr	r3, [pc, #716]	; (d918 <_dtoa_r+0x38c>)
    d64a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d64c:	1c18      	adds	r0, r3, #0
    d64e:	2a00      	cmp	r2, #0
    d650:	d101      	bne.n	d656 <_dtoa_r+0xca>
    d652:	f000 fd98 	bl	e186 <_dtoa_r+0xbfa>
    d656:	4ab1      	ldr	r2, [pc, #708]	; (d91c <_dtoa_r+0x390>)
    d658:	9924      	ldr	r1, [sp, #144]	; 0x90
    d65a:	600a      	str	r2, [r1, #0]
    d65c:	f000 fd93 	bl	e186 <_dtoa_r+0xbfa>
    d660:	ab19      	add	r3, sp, #100	; 0x64
    d662:	9300      	str	r3, [sp, #0]
    d664:	ab18      	add	r3, sp, #96	; 0x60
    d666:	9301      	str	r3, [sp, #4]
    d668:	9808      	ldr	r0, [sp, #32]
    d66a:	1c32      	adds	r2, r6, #0
    d66c:	1c3b      	adds	r3, r7, #0
    d66e:	f001 fc7b 	bl	ef68 <__d2b>
    d672:	0061      	lsls	r1, r4, #1
    d674:	900a      	str	r0, [sp, #40]	; 0x28
    d676:	0d49      	lsrs	r1, r1, #21
    d678:	d009      	beq.n	d68e <_dtoa_r+0x102>
    d67a:	0338      	lsls	r0, r7, #12
    d67c:	4ca8      	ldr	r4, [pc, #672]	; (d920 <_dtoa_r+0x394>)
    d67e:	0b00      	lsrs	r0, r0, #12
    d680:	4304      	orrs	r4, r0
    d682:	48a8      	ldr	r0, [pc, #672]	; (d924 <_dtoa_r+0x398>)
    d684:	1c32      	adds	r2, r6, #0
    d686:	1c23      	adds	r3, r4, #0
    d688:	180e      	adds	r6, r1, r0
    d68a:	9516      	str	r5, [sp, #88]	; 0x58
    d68c:	e01c      	b.n	d6c8 <_dtoa_r+0x13c>
    d68e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d690:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d692:	189e      	adds	r6, r3, r2
    d694:	4ba4      	ldr	r3, [pc, #656]	; (d928 <_dtoa_r+0x39c>)
    d696:	429e      	cmp	r6, r3
    d698:	db09      	blt.n	d6ae <_dtoa_r+0x122>
    d69a:	4ba4      	ldr	r3, [pc, #656]	; (d92c <_dtoa_r+0x3a0>)
    d69c:	18f0      	adds	r0, r6, r3
    d69e:	9b06      	ldr	r3, [sp, #24]
    d6a0:	40c3      	lsrs	r3, r0
    d6a2:	1c18      	adds	r0, r3, #0
    d6a4:	4ba2      	ldr	r3, [pc, #648]	; (d930 <_dtoa_r+0x3a4>)
    d6a6:	1b9b      	subs	r3, r3, r6
    d6a8:	409c      	lsls	r4, r3
    d6aa:	4320      	orrs	r0, r4
    d6ac:	e004      	b.n	d6b8 <_dtoa_r+0x12c>
    d6ae:	48a1      	ldr	r0, [pc, #644]	; (d934 <_dtoa_r+0x3a8>)
    d6b0:	9b06      	ldr	r3, [sp, #24]
    d6b2:	1b80      	subs	r0, r0, r6
    d6b4:	4083      	lsls	r3, r0
    d6b6:	1c18      	adds	r0, r3, #0
    d6b8:	f7fc fc20 	bl	9efc <__aeabi_ui2d>
    d6bc:	4c9e      	ldr	r4, [pc, #632]	; (d938 <_dtoa_r+0x3ac>)
    d6be:	1c02      	adds	r2, r0, #0
    d6c0:	190b      	adds	r3, r1, r4
    d6c2:	2101      	movs	r1, #1
    d6c4:	3e01      	subs	r6, #1
    d6c6:	9116      	str	r1, [sp, #88]	; 0x58
    d6c8:	1c10      	adds	r0, r2, #0
    d6ca:	1c19      	adds	r1, r3, #0
    d6cc:	2200      	movs	r2, #0
    d6ce:	4b9b      	ldr	r3, [pc, #620]	; (d93c <_dtoa_r+0x3b0>)
    d6d0:	f7fc f828 	bl	9724 <__aeabi_dsub>
    d6d4:	4a9a      	ldr	r2, [pc, #616]	; (d940 <_dtoa_r+0x3b4>)
    d6d6:	4b9b      	ldr	r3, [pc, #620]	; (d944 <_dtoa_r+0x3b8>)
    d6d8:	f7fb fd8a 	bl	91f0 <__aeabi_dmul>
    d6dc:	4a9a      	ldr	r2, [pc, #616]	; (d948 <_dtoa_r+0x3bc>)
    d6de:	4b9b      	ldr	r3, [pc, #620]	; (d94c <_dtoa_r+0x3c0>)
    d6e0:	f7fa fe20 	bl	8324 <__aeabi_dadd>
    d6e4:	1c04      	adds	r4, r0, #0
    d6e6:	1c30      	adds	r0, r6, #0
    d6e8:	1c0d      	adds	r5, r1, #0
    d6ea:	f7fc fbcb 	bl	9e84 <__aeabi_i2d>
    d6ee:	4a98      	ldr	r2, [pc, #608]	; (d950 <_dtoa_r+0x3c4>)
    d6f0:	4b98      	ldr	r3, [pc, #608]	; (d954 <_dtoa_r+0x3c8>)
    d6f2:	f7fb fd7d 	bl	91f0 <__aeabi_dmul>
    d6f6:	1c02      	adds	r2, r0, #0
    d6f8:	1c0b      	adds	r3, r1, #0
    d6fa:	1c20      	adds	r0, r4, #0
    d6fc:	1c29      	adds	r1, r5, #0
    d6fe:	f7fa fe11 	bl	8324 <__aeabi_dadd>
    d702:	1c04      	adds	r4, r0, #0
    d704:	1c0d      	adds	r5, r1, #0
    d706:	f7fc fb87 	bl	9e18 <__aeabi_d2iz>
    d70a:	1c29      	adds	r1, r5, #0
    d70c:	9003      	str	r0, [sp, #12]
    d70e:	2200      	movs	r2, #0
    d710:	1c20      	adds	r0, r4, #0
    d712:	2300      	movs	r3, #0
    d714:	f7f9 fe8e 	bl	7434 <__aeabi_dcmplt>
    d718:	2800      	cmp	r0, #0
    d71a:	d00d      	beq.n	d738 <_dtoa_r+0x1ac>
    d71c:	9803      	ldr	r0, [sp, #12]
    d71e:	f7fc fbb1 	bl	9e84 <__aeabi_i2d>
    d722:	1c02      	adds	r2, r0, #0
    d724:	1c0b      	adds	r3, r1, #0
    d726:	1c20      	adds	r0, r4, #0
    d728:	1c29      	adds	r1, r5, #0
    d72a:	f7f9 fe7d 	bl	7428 <__aeabi_dcmpeq>
    d72e:	4243      	negs	r3, r0
    d730:	4143      	adcs	r3, r0
    d732:	9a03      	ldr	r2, [sp, #12]
    d734:	1ad3      	subs	r3, r2, r3
    d736:	9303      	str	r3, [sp, #12]
    d738:	2301      	movs	r3, #1
    d73a:	9313      	str	r3, [sp, #76]	; 0x4c
    d73c:	9b03      	ldr	r3, [sp, #12]
    d73e:	2b16      	cmp	r3, #22
    d740:	d811      	bhi.n	d766 <_dtoa_r+0x1da>
    d742:	4a85      	ldr	r2, [pc, #532]	; (d958 <_dtoa_r+0x3cc>)
    d744:	00db      	lsls	r3, r3, #3
    d746:	18d3      	adds	r3, r2, r3
    d748:	6818      	ldr	r0, [r3, #0]
    d74a:	6859      	ldr	r1, [r3, #4]
    d74c:	9a06      	ldr	r2, [sp, #24]
    d74e:	9b07      	ldr	r3, [sp, #28]
    d750:	f7f9 fe84 	bl	745c <__aeabi_dcmpgt>
    d754:	2800      	cmp	r0, #0
    d756:	d005      	beq.n	d764 <_dtoa_r+0x1d8>
    d758:	9b03      	ldr	r3, [sp, #12]
    d75a:	3b01      	subs	r3, #1
    d75c:	9303      	str	r3, [sp, #12]
    d75e:	2300      	movs	r3, #0
    d760:	9313      	str	r3, [sp, #76]	; 0x4c
    d762:	e000      	b.n	d766 <_dtoa_r+0x1da>
    d764:	9013      	str	r0, [sp, #76]	; 0x4c
    d766:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d768:	1b9e      	subs	r6, r3, r6
    d76a:	2300      	movs	r3, #0
    d76c:	930d      	str	r3, [sp, #52]	; 0x34
    d76e:	3e01      	subs	r6, #1
    d770:	960e      	str	r6, [sp, #56]	; 0x38
    d772:	d504      	bpl.n	d77e <_dtoa_r+0x1f2>
    d774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d776:	425b      	negs	r3, r3
    d778:	930d      	str	r3, [sp, #52]	; 0x34
    d77a:	2300      	movs	r3, #0
    d77c:	930e      	str	r3, [sp, #56]	; 0x38
    d77e:	9b03      	ldr	r3, [sp, #12]
    d780:	2b00      	cmp	r3, #0
    d782:	db08      	blt.n	d796 <_dtoa_r+0x20a>
    d784:	9a03      	ldr	r2, [sp, #12]
    d786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d788:	4694      	mov	ip, r2
    d78a:	4463      	add	r3, ip
    d78c:	930e      	str	r3, [sp, #56]	; 0x38
    d78e:	2300      	movs	r3, #0
    d790:	9212      	str	r2, [sp, #72]	; 0x48
    d792:	930f      	str	r3, [sp, #60]	; 0x3c
    d794:	e007      	b.n	d7a6 <_dtoa_r+0x21a>
    d796:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d798:	9a03      	ldr	r2, [sp, #12]
    d79a:	1a9b      	subs	r3, r3, r2
    d79c:	930d      	str	r3, [sp, #52]	; 0x34
    d79e:	4253      	negs	r3, r2
    d7a0:	930f      	str	r3, [sp, #60]	; 0x3c
    d7a2:	2300      	movs	r3, #0
    d7a4:	9312      	str	r3, [sp, #72]	; 0x48
    d7a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d7a8:	2501      	movs	r5, #1
    d7aa:	2b09      	cmp	r3, #9
    d7ac:	d827      	bhi.n	d7fe <_dtoa_r+0x272>
    d7ae:	2b05      	cmp	r3, #5
    d7b0:	dd02      	ble.n	d7b8 <_dtoa_r+0x22c>
    d7b2:	2500      	movs	r5, #0
    d7b4:	3b04      	subs	r3, #4
    d7b6:	9320      	str	r3, [sp, #128]	; 0x80
    d7b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d7ba:	1e98      	subs	r0, r3, #2
    d7bc:	2803      	cmp	r0, #3
    d7be:	d823      	bhi.n	d808 <_dtoa_r+0x27c>
    d7c0:	f002 f816 	bl	f7f0 <__gnu_thumb1_case_uqi>
    d7c4:	10040e02 	.word	0x10040e02
    d7c8:	2300      	movs	r3, #0
    d7ca:	e000      	b.n	d7ce <_dtoa_r+0x242>
    d7cc:	2301      	movs	r3, #1
    d7ce:	9310      	str	r3, [sp, #64]	; 0x40
    d7d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	dc21      	bgt.n	d81a <_dtoa_r+0x28e>
    d7d6:	2301      	movs	r3, #1
    d7d8:	930b      	str	r3, [sp, #44]	; 0x2c
    d7da:	9309      	str	r3, [sp, #36]	; 0x24
    d7dc:	1c1a      	adds	r2, r3, #0
    d7de:	e01a      	b.n	d816 <_dtoa_r+0x28a>
    d7e0:	2300      	movs	r3, #0
    d7e2:	e000      	b.n	d7e6 <_dtoa_r+0x25a>
    d7e4:	2301      	movs	r3, #1
    d7e6:	9a03      	ldr	r2, [sp, #12]
    d7e8:	9310      	str	r3, [sp, #64]	; 0x40
    d7ea:	4694      	mov	ip, r2
    d7ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d7ee:	4463      	add	r3, ip
    d7f0:	930b      	str	r3, [sp, #44]	; 0x2c
    d7f2:	3301      	adds	r3, #1
    d7f4:	9309      	str	r3, [sp, #36]	; 0x24
    d7f6:	2b00      	cmp	r3, #0
    d7f8:	dc12      	bgt.n	d820 <_dtoa_r+0x294>
    d7fa:	2301      	movs	r3, #1
    d7fc:	e010      	b.n	d820 <_dtoa_r+0x294>
    d7fe:	2300      	movs	r3, #0
    d800:	9510      	str	r5, [sp, #64]	; 0x40
    d802:	9320      	str	r3, [sp, #128]	; 0x80
    d804:	3b01      	subs	r3, #1
    d806:	e002      	b.n	d80e <_dtoa_r+0x282>
    d808:	2301      	movs	r3, #1
    d80a:	9310      	str	r3, [sp, #64]	; 0x40
    d80c:	3b02      	subs	r3, #2
    d80e:	2200      	movs	r2, #0
    d810:	930b      	str	r3, [sp, #44]	; 0x2c
    d812:	9309      	str	r3, [sp, #36]	; 0x24
    d814:	3313      	adds	r3, #19
    d816:	9221      	str	r2, [sp, #132]	; 0x84
    d818:	e002      	b.n	d820 <_dtoa_r+0x294>
    d81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d81c:	930b      	str	r3, [sp, #44]	; 0x2c
    d81e:	9309      	str	r3, [sp, #36]	; 0x24
    d820:	9a08      	ldr	r2, [sp, #32]
    d822:	6a54      	ldr	r4, [r2, #36]	; 0x24
    d824:	2200      	movs	r2, #0
    d826:	6062      	str	r2, [r4, #4]
    d828:	3204      	adds	r2, #4
    d82a:	1c11      	adds	r1, r2, #0
    d82c:	3114      	adds	r1, #20
    d82e:	4299      	cmp	r1, r3
    d830:	d804      	bhi.n	d83c <_dtoa_r+0x2b0>
    d832:	6861      	ldr	r1, [r4, #4]
    d834:	0052      	lsls	r2, r2, #1
    d836:	3101      	adds	r1, #1
    d838:	6061      	str	r1, [r4, #4]
    d83a:	e7f6      	b.n	d82a <_dtoa_r+0x29e>
    d83c:	9808      	ldr	r0, [sp, #32]
    d83e:	6861      	ldr	r1, [r4, #4]
    d840:	f001 f844 	bl	e8cc <_Balloc>
    d844:	9b08      	ldr	r3, [sp, #32]
    d846:	6020      	str	r0, [r4, #0]
    d848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d84a:	681b      	ldr	r3, [r3, #0]
    d84c:	930c      	str	r3, [sp, #48]	; 0x30
    d84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d850:	2b0e      	cmp	r3, #14
    d852:	d900      	bls.n	d856 <_dtoa_r+0x2ca>
    d854:	e188      	b.n	db68 <_dtoa_r+0x5dc>
    d856:	2d00      	cmp	r5, #0
    d858:	d100      	bne.n	d85c <_dtoa_r+0x2d0>
    d85a:	e185      	b.n	db68 <_dtoa_r+0x5dc>
    d85c:	9b06      	ldr	r3, [sp, #24]
    d85e:	9c07      	ldr	r4, [sp, #28]
    d860:	9314      	str	r3, [sp, #80]	; 0x50
    d862:	9415      	str	r4, [sp, #84]	; 0x54
    d864:	9b03      	ldr	r3, [sp, #12]
    d866:	2b00      	cmp	r3, #0
    d868:	dd30      	ble.n	d8cc <_dtoa_r+0x340>
    d86a:	220f      	movs	r2, #15
    d86c:	493a      	ldr	r1, [pc, #232]	; (d958 <_dtoa_r+0x3cc>)
    d86e:	4013      	ands	r3, r2
    d870:	00db      	lsls	r3, r3, #3
    d872:	18cb      	adds	r3, r1, r3
    d874:	685c      	ldr	r4, [r3, #4]
    d876:	681b      	ldr	r3, [r3, #0]
    d878:	9304      	str	r3, [sp, #16]
    d87a:	9405      	str	r4, [sp, #20]
    d87c:	9b03      	ldr	r3, [sp, #12]
    d87e:	2702      	movs	r7, #2
    d880:	111d      	asrs	r5, r3, #4
    d882:	06eb      	lsls	r3, r5, #27
    d884:	d50a      	bpl.n	d89c <_dtoa_r+0x310>
    d886:	9814      	ldr	r0, [sp, #80]	; 0x50
    d888:	9915      	ldr	r1, [sp, #84]	; 0x54
    d88a:	4b34      	ldr	r3, [pc, #208]	; (d95c <_dtoa_r+0x3d0>)
    d88c:	4015      	ands	r5, r2
    d88e:	6a1a      	ldr	r2, [r3, #32]
    d890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d892:	f7fb f86f 	bl	8974 <__aeabi_ddiv>
    d896:	9006      	str	r0, [sp, #24]
    d898:	9107      	str	r1, [sp, #28]
    d89a:	3701      	adds	r7, #1
    d89c:	4c2f      	ldr	r4, [pc, #188]	; (d95c <_dtoa_r+0x3d0>)
    d89e:	2d00      	cmp	r5, #0
    d8a0:	d00d      	beq.n	d8be <_dtoa_r+0x332>
    d8a2:	07eb      	lsls	r3, r5, #31
    d8a4:	d508      	bpl.n	d8b8 <_dtoa_r+0x32c>
    d8a6:	9804      	ldr	r0, [sp, #16]
    d8a8:	9905      	ldr	r1, [sp, #20]
    d8aa:	6822      	ldr	r2, [r4, #0]
    d8ac:	6863      	ldr	r3, [r4, #4]
    d8ae:	f7fb fc9f 	bl	91f0 <__aeabi_dmul>
    d8b2:	9004      	str	r0, [sp, #16]
    d8b4:	9105      	str	r1, [sp, #20]
    d8b6:	3701      	adds	r7, #1
    d8b8:	106d      	asrs	r5, r5, #1
    d8ba:	3408      	adds	r4, #8
    d8bc:	e7ef      	b.n	d89e <_dtoa_r+0x312>
    d8be:	9806      	ldr	r0, [sp, #24]
    d8c0:	9907      	ldr	r1, [sp, #28]
    d8c2:	9a04      	ldr	r2, [sp, #16]
    d8c4:	9b05      	ldr	r3, [sp, #20]
    d8c6:	f7fb f855 	bl	8974 <__aeabi_ddiv>
    d8ca:	e049      	b.n	d960 <_dtoa_r+0x3d4>
    d8cc:	9b03      	ldr	r3, [sp, #12]
    d8ce:	2702      	movs	r7, #2
    d8d0:	425d      	negs	r5, r3
    d8d2:	2d00      	cmp	r5, #0
    d8d4:	d046      	beq.n	d964 <_dtoa_r+0x3d8>
    d8d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    d8d8:	9915      	ldr	r1, [sp, #84]	; 0x54
    d8da:	230f      	movs	r3, #15
    d8dc:	4a1e      	ldr	r2, [pc, #120]	; (d958 <_dtoa_r+0x3cc>)
    d8de:	402b      	ands	r3, r5
    d8e0:	00db      	lsls	r3, r3, #3
    d8e2:	18d3      	adds	r3, r2, r3
    d8e4:	681a      	ldr	r2, [r3, #0]
    d8e6:	685b      	ldr	r3, [r3, #4]
    d8e8:	f7fb fc82 	bl	91f0 <__aeabi_dmul>
    d8ec:	4c1b      	ldr	r4, [pc, #108]	; (d95c <_dtoa_r+0x3d0>)
    d8ee:	112d      	asrs	r5, r5, #4
    d8f0:	2d00      	cmp	r5, #0
    d8f2:	d035      	beq.n	d960 <_dtoa_r+0x3d4>
    d8f4:	07eb      	lsls	r3, r5, #31
    d8f6:	d504      	bpl.n	d902 <_dtoa_r+0x376>
    d8f8:	6822      	ldr	r2, [r4, #0]
    d8fa:	6863      	ldr	r3, [r4, #4]
    d8fc:	3701      	adds	r7, #1
    d8fe:	f7fb fc77 	bl	91f0 <__aeabi_dmul>
    d902:	106d      	asrs	r5, r5, #1
    d904:	3408      	adds	r4, #8
    d906:	e7f3      	b.n	d8f0 <_dtoa_r+0x364>
    d908:	7ff00000 	.word	0x7ff00000
    d90c:	0000270f 	.word	0x0000270f
    d910:	00010b76 	.word	0x00010b76
    d914:	00010b6d 	.word	0x00010b6d
    d918:	00010a12 	.word	0x00010a12
    d91c:	00010a13 	.word	0x00010a13
    d920:	3ff00000 	.word	0x3ff00000
    d924:	fffffc01 	.word	0xfffffc01
    d928:	fffffbef 	.word	0xfffffbef
    d92c:	00000412 	.word	0x00000412
    d930:	fffffc0e 	.word	0xfffffc0e
    d934:	fffffbee 	.word	0xfffffbee
    d938:	fe100000 	.word	0xfe100000
    d93c:	3ff80000 	.word	0x3ff80000
    d940:	636f4361 	.word	0x636f4361
    d944:	3fd287a7 	.word	0x3fd287a7
    d948:	8b60c8b3 	.word	0x8b60c8b3
    d94c:	3fc68a28 	.word	0x3fc68a28
    d950:	509f79fb 	.word	0x509f79fb
    d954:	3fd34413 	.word	0x3fd34413
    d958:	00010b88 	.word	0x00010b88
    d95c:	00010c50 	.word	0x00010c50
    d960:	9006      	str	r0, [sp, #24]
    d962:	9107      	str	r1, [sp, #28]
    d964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d966:	2b00      	cmp	r3, #0
    d968:	d01e      	beq.n	d9a8 <_dtoa_r+0x41c>
    d96a:	9c06      	ldr	r4, [sp, #24]
    d96c:	9d07      	ldr	r5, [sp, #28]
    d96e:	2200      	movs	r2, #0
    d970:	1c20      	adds	r0, r4, #0
    d972:	1c29      	adds	r1, r5, #0
    d974:	4bce      	ldr	r3, [pc, #824]	; (dcb0 <_dtoa_r+0x724>)
    d976:	f7f9 fd5d 	bl	7434 <__aeabi_dcmplt>
    d97a:	2800      	cmp	r0, #0
    d97c:	d014      	beq.n	d9a8 <_dtoa_r+0x41c>
    d97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d980:	2b00      	cmp	r3, #0
    d982:	d011      	beq.n	d9a8 <_dtoa_r+0x41c>
    d984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d986:	2b00      	cmp	r3, #0
    d988:	dc00      	bgt.n	d98c <_dtoa_r+0x400>
    d98a:	e0e9      	b.n	db60 <_dtoa_r+0x5d4>
    d98c:	9b03      	ldr	r3, [sp, #12]
    d98e:	1c29      	adds	r1, r5, #0
    d990:	3b01      	subs	r3, #1
    d992:	9311      	str	r3, [sp, #68]	; 0x44
    d994:	1c20      	adds	r0, r4, #0
    d996:	2200      	movs	r2, #0
    d998:	4bc6      	ldr	r3, [pc, #792]	; (dcb4 <_dtoa_r+0x728>)
    d99a:	f7fb fc29 	bl	91f0 <__aeabi_dmul>
    d99e:	3701      	adds	r7, #1
    d9a0:	9006      	str	r0, [sp, #24]
    d9a2:	9107      	str	r1, [sp, #28]
    d9a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d9a6:	e002      	b.n	d9ae <_dtoa_r+0x422>
    d9a8:	9b03      	ldr	r3, [sp, #12]
    d9aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    d9ac:	9311      	str	r3, [sp, #68]	; 0x44
    d9ae:	1c38      	adds	r0, r7, #0
    d9b0:	9b06      	ldr	r3, [sp, #24]
    d9b2:	9c07      	ldr	r4, [sp, #28]
    d9b4:	9304      	str	r3, [sp, #16]
    d9b6:	9405      	str	r4, [sp, #20]
    d9b8:	f7fc fa64 	bl	9e84 <__aeabi_i2d>
    d9bc:	9a04      	ldr	r2, [sp, #16]
    d9be:	9b05      	ldr	r3, [sp, #20]
    d9c0:	f7fb fc16 	bl	91f0 <__aeabi_dmul>
    d9c4:	2200      	movs	r2, #0
    d9c6:	4bbc      	ldr	r3, [pc, #752]	; (dcb8 <_dtoa_r+0x72c>)
    d9c8:	f7fa fcac 	bl	8324 <__aeabi_dadd>
    d9cc:	9006      	str	r0, [sp, #24]
    d9ce:	9107      	str	r1, [sp, #28]
    d9d0:	9e06      	ldr	r6, [sp, #24]
    d9d2:	9f07      	ldr	r7, [sp, #28]
    d9d4:	9b07      	ldr	r3, [sp, #28]
    d9d6:	4ab9      	ldr	r2, [pc, #740]	; (dcbc <_dtoa_r+0x730>)
    d9d8:	189c      	adds	r4, r3, r2
    d9da:	2d00      	cmp	r5, #0
    d9dc:	d11c      	bne.n	da18 <_dtoa_r+0x48c>
    d9de:	9804      	ldr	r0, [sp, #16]
    d9e0:	9905      	ldr	r1, [sp, #20]
    d9e2:	2200      	movs	r2, #0
    d9e4:	4bb6      	ldr	r3, [pc, #728]	; (dcc0 <_dtoa_r+0x734>)
    d9e6:	f7fb fe9d 	bl	9724 <__aeabi_dsub>
    d9ea:	1c32      	adds	r2, r6, #0
    d9ec:	1c23      	adds	r3, r4, #0
    d9ee:	9004      	str	r0, [sp, #16]
    d9f0:	9105      	str	r1, [sp, #20]
    d9f2:	f7f9 fd33 	bl	745c <__aeabi_dcmpgt>
    d9f6:	2800      	cmp	r0, #0
    d9f8:	d000      	beq.n	d9fc <_dtoa_r+0x470>
    d9fa:	e263      	b.n	dec4 <_dtoa_r+0x938>
    d9fc:	9804      	ldr	r0, [sp, #16]
    d9fe:	9905      	ldr	r1, [sp, #20]
    da00:	1c32      	adds	r2, r6, #0
    da02:	4eb0      	ldr	r6, [pc, #704]	; (dcc4 <_dtoa_r+0x738>)
    da04:	9c07      	ldr	r4, [sp, #28]
    da06:	46b4      	mov	ip, r6
    da08:	4464      	add	r4, ip
    da0a:	1c23      	adds	r3, r4, #0
    da0c:	f7f9 fd12 	bl	7434 <__aeabi_dcmplt>
    da10:	2800      	cmp	r0, #0
    da12:	d000      	beq.n	da16 <_dtoa_r+0x48a>
    da14:	e24c      	b.n	deb0 <_dtoa_r+0x924>
    da16:	e0a3      	b.n	db60 <_dtoa_r+0x5d4>
    da18:	4aab      	ldr	r2, [pc, #684]	; (dcc8 <_dtoa_r+0x73c>)
    da1a:	1e6b      	subs	r3, r5, #1
    da1c:	9910      	ldr	r1, [sp, #64]	; 0x40
    da1e:	00db      	lsls	r3, r3, #3
    da20:	18d3      	adds	r3, r2, r3
    da22:	2900      	cmp	r1, #0
    da24:	d04e      	beq.n	dac4 <_dtoa_r+0x538>
    da26:	681a      	ldr	r2, [r3, #0]
    da28:	685b      	ldr	r3, [r3, #4]
    da2a:	2000      	movs	r0, #0
    da2c:	49a7      	ldr	r1, [pc, #668]	; (dccc <_dtoa_r+0x740>)
    da2e:	f7fa ffa1 	bl	8974 <__aeabi_ddiv>
    da32:	1c32      	adds	r2, r6, #0
    da34:	1c23      	adds	r3, r4, #0
    da36:	f7fb fe75 	bl	9724 <__aeabi_dsub>
    da3a:	9e04      	ldr	r6, [sp, #16]
    da3c:	9f05      	ldr	r7, [sp, #20]
    da3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    da40:	9006      	str	r0, [sp, #24]
    da42:	9107      	str	r1, [sp, #28]
    da44:	9304      	str	r3, [sp, #16]
    da46:	1c39      	adds	r1, r7, #0
    da48:	1c30      	adds	r0, r6, #0
    da4a:	f7fc f9e5 	bl	9e18 <__aeabi_d2iz>
    da4e:	1c04      	adds	r4, r0, #0
    da50:	f7fc fa18 	bl	9e84 <__aeabi_i2d>
    da54:	1c02      	adds	r2, r0, #0
    da56:	1c0b      	adds	r3, r1, #0
    da58:	1c30      	adds	r0, r6, #0
    da5a:	1c39      	adds	r1, r7, #0
    da5c:	f7fb fe62 	bl	9724 <__aeabi_dsub>
    da60:	9b04      	ldr	r3, [sp, #16]
    da62:	3430      	adds	r4, #48	; 0x30
    da64:	3301      	adds	r3, #1
    da66:	9304      	str	r3, [sp, #16]
    da68:	3b01      	subs	r3, #1
    da6a:	701c      	strb	r4, [r3, #0]
    da6c:	9a06      	ldr	r2, [sp, #24]
    da6e:	9b07      	ldr	r3, [sp, #28]
    da70:	1c06      	adds	r6, r0, #0
    da72:	1c0f      	adds	r7, r1, #0
    da74:	f7f9 fcde 	bl	7434 <__aeabi_dcmplt>
    da78:	2800      	cmp	r0, #0
    da7a:	d000      	beq.n	da7e <_dtoa_r+0x4f2>
    da7c:	e361      	b.n	e142 <_dtoa_r+0xbb6>
    da7e:	1c32      	adds	r2, r6, #0
    da80:	1c3b      	adds	r3, r7, #0
    da82:	2000      	movs	r0, #0
    da84:	498a      	ldr	r1, [pc, #552]	; (dcb0 <_dtoa_r+0x724>)
    da86:	f7fb fe4d 	bl	9724 <__aeabi_dsub>
    da8a:	9a06      	ldr	r2, [sp, #24]
    da8c:	9b07      	ldr	r3, [sp, #28]
    da8e:	f7f9 fcd1 	bl	7434 <__aeabi_dcmplt>
    da92:	2800      	cmp	r0, #0
    da94:	d000      	beq.n	da98 <_dtoa_r+0x50c>
    da96:	e0cd      	b.n	dc34 <_dtoa_r+0x6a8>
    da98:	9b04      	ldr	r3, [sp, #16]
    da9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da9c:	1a9b      	subs	r3, r3, r2
    da9e:	42ab      	cmp	r3, r5
    daa0:	da5e      	bge.n	db60 <_dtoa_r+0x5d4>
    daa2:	9806      	ldr	r0, [sp, #24]
    daa4:	9907      	ldr	r1, [sp, #28]
    daa6:	2200      	movs	r2, #0
    daa8:	4b82      	ldr	r3, [pc, #520]	; (dcb4 <_dtoa_r+0x728>)
    daaa:	f7fb fba1 	bl	91f0 <__aeabi_dmul>
    daae:	2200      	movs	r2, #0
    dab0:	9006      	str	r0, [sp, #24]
    dab2:	9107      	str	r1, [sp, #28]
    dab4:	4b7f      	ldr	r3, [pc, #508]	; (dcb4 <_dtoa_r+0x728>)
    dab6:	1c30      	adds	r0, r6, #0
    dab8:	1c39      	adds	r1, r7, #0
    daba:	f7fb fb99 	bl	91f0 <__aeabi_dmul>
    dabe:	1c06      	adds	r6, r0, #0
    dac0:	1c0f      	adds	r7, r1, #0
    dac2:	e7c0      	b.n	da46 <_dtoa_r+0x4ba>
    dac4:	6818      	ldr	r0, [r3, #0]
    dac6:	6859      	ldr	r1, [r3, #4]
    dac8:	1c32      	adds	r2, r6, #0
    daca:	1c23      	adds	r3, r4, #0
    dacc:	f7fb fb90 	bl	91f0 <__aeabi_dmul>
    dad0:	9e04      	ldr	r6, [sp, #16]
    dad2:	9f05      	ldr	r7, [sp, #20]
    dad4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dad6:	9006      	str	r0, [sp, #24]
    dad8:	9107      	str	r1, [sp, #28]
    dada:	1963      	adds	r3, r4, r5
    dadc:	9304      	str	r3, [sp, #16]
    dade:	1c39      	adds	r1, r7, #0
    dae0:	1c30      	adds	r0, r6, #0
    dae2:	f7fc f999 	bl	9e18 <__aeabi_d2iz>
    dae6:	1c05      	adds	r5, r0, #0
    dae8:	f7fc f9cc 	bl	9e84 <__aeabi_i2d>
    daec:	1c0b      	adds	r3, r1, #0
    daee:	1c02      	adds	r2, r0, #0
    daf0:	1c39      	adds	r1, r7, #0
    daf2:	1c30      	adds	r0, r6, #0
    daf4:	f7fb fe16 	bl	9724 <__aeabi_dsub>
    daf8:	3530      	adds	r5, #48	; 0x30
    dafa:	9b04      	ldr	r3, [sp, #16]
    dafc:	7025      	strb	r5, [r4, #0]
    dafe:	3401      	adds	r4, #1
    db00:	1c06      	adds	r6, r0, #0
    db02:	1c0f      	adds	r7, r1, #0
    db04:	42a3      	cmp	r3, r4
    db06:	d124      	bne.n	db52 <_dtoa_r+0x5c6>
    db08:	2200      	movs	r2, #0
    db0a:	9806      	ldr	r0, [sp, #24]
    db0c:	9907      	ldr	r1, [sp, #28]
    db0e:	4b6f      	ldr	r3, [pc, #444]	; (dccc <_dtoa_r+0x740>)
    db10:	f7fa fc08 	bl	8324 <__aeabi_dadd>
    db14:	1c02      	adds	r2, r0, #0
    db16:	1c0b      	adds	r3, r1, #0
    db18:	1c30      	adds	r0, r6, #0
    db1a:	1c39      	adds	r1, r7, #0
    db1c:	f7f9 fc9e 	bl	745c <__aeabi_dcmpgt>
    db20:	2800      	cmp	r0, #0
    db22:	d000      	beq.n	db26 <_dtoa_r+0x59a>
    db24:	e086      	b.n	dc34 <_dtoa_r+0x6a8>
    db26:	9a06      	ldr	r2, [sp, #24]
    db28:	9b07      	ldr	r3, [sp, #28]
    db2a:	2000      	movs	r0, #0
    db2c:	4967      	ldr	r1, [pc, #412]	; (dccc <_dtoa_r+0x740>)
    db2e:	f7fb fdf9 	bl	9724 <__aeabi_dsub>
    db32:	1c02      	adds	r2, r0, #0
    db34:	1c0b      	adds	r3, r1, #0
    db36:	1c30      	adds	r0, r6, #0
    db38:	1c39      	adds	r1, r7, #0
    db3a:	f7f9 fc7b 	bl	7434 <__aeabi_dcmplt>
    db3e:	2800      	cmp	r0, #0
    db40:	d00e      	beq.n	db60 <_dtoa_r+0x5d4>
    db42:	9b04      	ldr	r3, [sp, #16]
    db44:	3b01      	subs	r3, #1
    db46:	781a      	ldrb	r2, [r3, #0]
    db48:	2a30      	cmp	r2, #48	; 0x30
    db4a:	d000      	beq.n	db4e <_dtoa_r+0x5c2>
    db4c:	e2f9      	b.n	e142 <_dtoa_r+0xbb6>
    db4e:	9304      	str	r3, [sp, #16]
    db50:	e7f7      	b.n	db42 <_dtoa_r+0x5b6>
    db52:	2200      	movs	r2, #0
    db54:	4b57      	ldr	r3, [pc, #348]	; (dcb4 <_dtoa_r+0x728>)
    db56:	f7fb fb4b 	bl	91f0 <__aeabi_dmul>
    db5a:	1c06      	adds	r6, r0, #0
    db5c:	1c0f      	adds	r7, r1, #0
    db5e:	e7be      	b.n	dade <_dtoa_r+0x552>
    db60:	9b14      	ldr	r3, [sp, #80]	; 0x50
    db62:	9c15      	ldr	r4, [sp, #84]	; 0x54
    db64:	9306      	str	r3, [sp, #24]
    db66:	9407      	str	r4, [sp, #28]
    db68:	9b19      	ldr	r3, [sp, #100]	; 0x64
    db6a:	2b00      	cmp	r3, #0
    db6c:	da00      	bge.n	db70 <_dtoa_r+0x5e4>
    db6e:	e086      	b.n	dc7e <_dtoa_r+0x6f2>
    db70:	9a03      	ldr	r2, [sp, #12]
    db72:	2a0e      	cmp	r2, #14
    db74:	dd00      	ble.n	db78 <_dtoa_r+0x5ec>
    db76:	e082      	b.n	dc7e <_dtoa_r+0x6f2>
    db78:	00d3      	lsls	r3, r2, #3
    db7a:	4a53      	ldr	r2, [pc, #332]	; (dcc8 <_dtoa_r+0x73c>)
    db7c:	18d3      	adds	r3, r2, r3
    db7e:	681e      	ldr	r6, [r3, #0]
    db80:	685f      	ldr	r7, [r3, #4]
    db82:	9b21      	ldr	r3, [sp, #132]	; 0x84
    db84:	2b00      	cmp	r3, #0
    db86:	da14      	bge.n	dbb2 <_dtoa_r+0x626>
    db88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db8a:	2b00      	cmp	r3, #0
    db8c:	dc11      	bgt.n	dbb2 <_dtoa_r+0x626>
    db8e:	d000      	beq.n	db92 <_dtoa_r+0x606>
    db90:	e190      	b.n	deb4 <_dtoa_r+0x928>
    db92:	1c30      	adds	r0, r6, #0
    db94:	1c39      	adds	r1, r7, #0
    db96:	2200      	movs	r2, #0
    db98:	4b49      	ldr	r3, [pc, #292]	; (dcc0 <_dtoa_r+0x734>)
    db9a:	f7fb fb29 	bl	91f0 <__aeabi_dmul>
    db9e:	9a06      	ldr	r2, [sp, #24]
    dba0:	9b07      	ldr	r3, [sp, #28]
    dba2:	f7f9 fc65 	bl	7470 <__aeabi_dcmpge>
    dba6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    dba8:	1c3e      	adds	r6, r7, #0
    dbaa:	2800      	cmp	r0, #0
    dbac:	d000      	beq.n	dbb0 <_dtoa_r+0x624>
    dbae:	e183      	b.n	deb8 <_dtoa_r+0x92c>
    dbb0:	e18c      	b.n	decc <_dtoa_r+0x940>
    dbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbb4:	9c06      	ldr	r4, [sp, #24]
    dbb6:	9d07      	ldr	r5, [sp, #28]
    dbb8:	9304      	str	r3, [sp, #16]
    dbba:	1c32      	adds	r2, r6, #0
    dbbc:	1c3b      	adds	r3, r7, #0
    dbbe:	1c20      	adds	r0, r4, #0
    dbc0:	1c29      	adds	r1, r5, #0
    dbc2:	f7fa fed7 	bl	8974 <__aeabi_ddiv>
    dbc6:	f7fc f927 	bl	9e18 <__aeabi_d2iz>
    dbca:	9006      	str	r0, [sp, #24]
    dbcc:	f7fc f95a 	bl	9e84 <__aeabi_i2d>
    dbd0:	1c32      	adds	r2, r6, #0
    dbd2:	1c3b      	adds	r3, r7, #0
    dbd4:	f7fb fb0c 	bl	91f0 <__aeabi_dmul>
    dbd8:	1c02      	adds	r2, r0, #0
    dbda:	1c0b      	adds	r3, r1, #0
    dbdc:	1c20      	adds	r0, r4, #0
    dbde:	1c29      	adds	r1, r5, #0
    dbe0:	f7fb fda0 	bl	9724 <__aeabi_dsub>
    dbe4:	1c0b      	adds	r3, r1, #0
    dbe6:	9904      	ldr	r1, [sp, #16]
    dbe8:	1c02      	adds	r2, r0, #0
    dbea:	9806      	ldr	r0, [sp, #24]
    dbec:	3101      	adds	r1, #1
    dbee:	9104      	str	r1, [sp, #16]
    dbf0:	3030      	adds	r0, #48	; 0x30
    dbf2:	3901      	subs	r1, #1
    dbf4:	7008      	strb	r0, [r1, #0]
    dbf6:	980c      	ldr	r0, [sp, #48]	; 0x30
    dbf8:	9904      	ldr	r1, [sp, #16]
    dbfa:	1a09      	subs	r1, r1, r0
    dbfc:	9809      	ldr	r0, [sp, #36]	; 0x24
    dbfe:	4281      	cmp	r1, r0
    dc00:	d12e      	bne.n	dc60 <_dtoa_r+0x6d4>
    dc02:	1c10      	adds	r0, r2, #0
    dc04:	1c19      	adds	r1, r3, #0
    dc06:	f7fa fb8d 	bl	8324 <__aeabi_dadd>
    dc0a:	1c32      	adds	r2, r6, #0
    dc0c:	1c3b      	adds	r3, r7, #0
    dc0e:	1c04      	adds	r4, r0, #0
    dc10:	1c0d      	adds	r5, r1, #0
    dc12:	f7f9 fc23 	bl	745c <__aeabi_dcmpgt>
    dc16:	2800      	cmp	r0, #0
    dc18:	d110      	bne.n	dc3c <_dtoa_r+0x6b0>
    dc1a:	1c20      	adds	r0, r4, #0
    dc1c:	1c29      	adds	r1, r5, #0
    dc1e:	1c32      	adds	r2, r6, #0
    dc20:	1c3b      	adds	r3, r7, #0
    dc22:	f7f9 fc01 	bl	7428 <__aeabi_dcmpeq>
    dc26:	2800      	cmp	r0, #0
    dc28:	d100      	bne.n	dc2c <_dtoa_r+0x6a0>
    dc2a:	e28c      	b.n	e146 <_dtoa_r+0xbba>
    dc2c:	9b06      	ldr	r3, [sp, #24]
    dc2e:	07db      	lsls	r3, r3, #31
    dc30:	d404      	bmi.n	dc3c <_dtoa_r+0x6b0>
    dc32:	e288      	b.n	e146 <_dtoa_r+0xbba>
    dc34:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dc36:	9303      	str	r3, [sp, #12]
    dc38:	e000      	b.n	dc3c <_dtoa_r+0x6b0>
    dc3a:	9304      	str	r3, [sp, #16]
    dc3c:	9b04      	ldr	r3, [sp, #16]
    dc3e:	3b01      	subs	r3, #1
    dc40:	781a      	ldrb	r2, [r3, #0]
    dc42:	2a39      	cmp	r2, #57	; 0x39
    dc44:	d108      	bne.n	dc58 <_dtoa_r+0x6cc>
    dc46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dc48:	4293      	cmp	r3, r2
    dc4a:	d1f6      	bne.n	dc3a <_dtoa_r+0x6ae>
    dc4c:	9b03      	ldr	r3, [sp, #12]
    dc4e:	3301      	adds	r3, #1
    dc50:	9303      	str	r3, [sp, #12]
    dc52:	2330      	movs	r3, #48	; 0x30
    dc54:	7013      	strb	r3, [r2, #0]
    dc56:	1c13      	adds	r3, r2, #0
    dc58:	781a      	ldrb	r2, [r3, #0]
    dc5a:	3201      	adds	r2, #1
    dc5c:	701a      	strb	r2, [r3, #0]
    dc5e:	e272      	b.n	e146 <_dtoa_r+0xbba>
    dc60:	1c10      	adds	r0, r2, #0
    dc62:	1c19      	adds	r1, r3, #0
    dc64:	2200      	movs	r2, #0
    dc66:	4b13      	ldr	r3, [pc, #76]	; (dcb4 <_dtoa_r+0x728>)
    dc68:	f7fb fac2 	bl	91f0 <__aeabi_dmul>
    dc6c:	2200      	movs	r2, #0
    dc6e:	2300      	movs	r3, #0
    dc70:	1c04      	adds	r4, r0, #0
    dc72:	1c0d      	adds	r5, r1, #0
    dc74:	f7f9 fbd8 	bl	7428 <__aeabi_dcmpeq>
    dc78:	2800      	cmp	r0, #0
    dc7a:	d09e      	beq.n	dbba <_dtoa_r+0x62e>
    dc7c:	e263      	b.n	e146 <_dtoa_r+0xbba>
    dc7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dc80:	2a00      	cmp	r2, #0
    dc82:	d044      	beq.n	dd0e <_dtoa_r+0x782>
    dc84:	9a20      	ldr	r2, [sp, #128]	; 0x80
    dc86:	2a01      	cmp	r2, #1
    dc88:	dc0b      	bgt.n	dca2 <_dtoa_r+0x716>
    dc8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
    dc8c:	2a00      	cmp	r2, #0
    dc8e:	d002      	beq.n	dc96 <_dtoa_r+0x70a>
    dc90:	4a0f      	ldr	r2, [pc, #60]	; (dcd0 <_dtoa_r+0x744>)
    dc92:	189b      	adds	r3, r3, r2
    dc94:	e002      	b.n	dc9c <_dtoa_r+0x710>
    dc96:	2336      	movs	r3, #54	; 0x36
    dc98:	9a18      	ldr	r2, [sp, #96]	; 0x60
    dc9a:	1a9b      	subs	r3, r3, r2
    dc9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    dc9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dca0:	e029      	b.n	dcf6 <_dtoa_r+0x76a>
    dca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dca4:	1e5d      	subs	r5, r3, #1
    dca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dca8:	42ab      	cmp	r3, r5
    dcaa:	db13      	blt.n	dcd4 <_dtoa_r+0x748>
    dcac:	1b5d      	subs	r5, r3, r5
    dcae:	e018      	b.n	dce2 <_dtoa_r+0x756>
    dcb0:	3ff00000 	.word	0x3ff00000
    dcb4:	40240000 	.word	0x40240000
    dcb8:	401c0000 	.word	0x401c0000
    dcbc:	fcc00000 	.word	0xfcc00000
    dcc0:	40140000 	.word	0x40140000
    dcc4:	7cc00000 	.word	0x7cc00000
    dcc8:	00010b88 	.word	0x00010b88
    dccc:	3fe00000 	.word	0x3fe00000
    dcd0:	00000433 	.word	0x00000433
    dcd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dcd6:	950f      	str	r5, [sp, #60]	; 0x3c
    dcd8:	1aea      	subs	r2, r5, r3
    dcda:	2500      	movs	r5, #0
    dcdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dcde:	189b      	adds	r3, r3, r2
    dce0:	9312      	str	r3, [sp, #72]	; 0x48
    dce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dce4:	2b00      	cmp	r3, #0
    dce6:	da04      	bge.n	dcf2 <_dtoa_r+0x766>
    dce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dcea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dcec:	1a9c      	subs	r4, r3, r2
    dcee:	2300      	movs	r3, #0
    dcf0:	e001      	b.n	dcf6 <_dtoa_r+0x76a>
    dcf2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dcf8:	9808      	ldr	r0, [sp, #32]
    dcfa:	18d2      	adds	r2, r2, r3
    dcfc:	920d      	str	r2, [sp, #52]	; 0x34
    dcfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd00:	2101      	movs	r1, #1
    dd02:	18d3      	adds	r3, r2, r3
    dd04:	930e      	str	r3, [sp, #56]	; 0x38
    dd06:	f000 fef8 	bl	eafa <__i2b>
    dd0a:	1c06      	adds	r6, r0, #0
    dd0c:	e002      	b.n	dd14 <_dtoa_r+0x788>
    dd0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    dd10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    dd12:	9e10      	ldr	r6, [sp, #64]	; 0x40
    dd14:	2c00      	cmp	r4, #0
    dd16:	d00c      	beq.n	dd32 <_dtoa_r+0x7a6>
    dd18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	dd09      	ble.n	dd32 <_dtoa_r+0x7a6>
    dd1e:	42a3      	cmp	r3, r4
    dd20:	dd00      	ble.n	dd24 <_dtoa_r+0x798>
    dd22:	1c23      	adds	r3, r4, #0
    dd24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dd26:	1ae4      	subs	r4, r4, r3
    dd28:	1ad2      	subs	r2, r2, r3
    dd2a:	920d      	str	r2, [sp, #52]	; 0x34
    dd2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd2e:	1ad3      	subs	r3, r2, r3
    dd30:	930e      	str	r3, [sp, #56]	; 0x38
    dd32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd34:	2b00      	cmp	r3, #0
    dd36:	dd21      	ble.n	dd7c <_dtoa_r+0x7f0>
    dd38:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d018      	beq.n	dd70 <_dtoa_r+0x7e4>
    dd3e:	2d00      	cmp	r5, #0
    dd40:	dd10      	ble.n	dd64 <_dtoa_r+0x7d8>
    dd42:	1c31      	adds	r1, r6, #0
    dd44:	1c2a      	adds	r2, r5, #0
    dd46:	9808      	ldr	r0, [sp, #32]
    dd48:	f000 ff6e 	bl	ec28 <__pow5mult>
    dd4c:	1c06      	adds	r6, r0, #0
    dd4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dd50:	1c31      	adds	r1, r6, #0
    dd52:	9808      	ldr	r0, [sp, #32]
    dd54:	f000 feda 	bl	eb0c <__multiply>
    dd58:	1c07      	adds	r7, r0, #0
    dd5a:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd5c:	9808      	ldr	r0, [sp, #32]
    dd5e:	f000 fded 	bl	e93c <_Bfree>
    dd62:	970a      	str	r7, [sp, #40]	; 0x28
    dd64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd66:	1b5a      	subs	r2, r3, r5
    dd68:	d008      	beq.n	dd7c <_dtoa_r+0x7f0>
    dd6a:	9808      	ldr	r0, [sp, #32]
    dd6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd6e:	e002      	b.n	dd76 <_dtoa_r+0x7ea>
    dd70:	9808      	ldr	r0, [sp, #32]
    dd72:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dd76:	f000 ff57 	bl	ec28 <__pow5mult>
    dd7a:	900a      	str	r0, [sp, #40]	; 0x28
    dd7c:	9808      	ldr	r0, [sp, #32]
    dd7e:	2101      	movs	r1, #1
    dd80:	f000 febb 	bl	eafa <__i2b>
    dd84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dd86:	1c07      	adds	r7, r0, #0
    dd88:	2b00      	cmp	r3, #0
    dd8a:	dd0a      	ble.n	dda2 <_dtoa_r+0x816>
    dd8c:	1c39      	adds	r1, r7, #0
    dd8e:	1c1a      	adds	r2, r3, #0
    dd90:	9808      	ldr	r0, [sp, #32]
    dd92:	f000 ff49 	bl	ec28 <__pow5mult>
    dd96:	9b20      	ldr	r3, [sp, #128]	; 0x80
    dd98:	1c07      	adds	r7, r0, #0
    dd9a:	2500      	movs	r5, #0
    dd9c:	2b01      	cmp	r3, #1
    dd9e:	dc1b      	bgt.n	ddd8 <_dtoa_r+0x84c>
    dda0:	e003      	b.n	ddaa <_dtoa_r+0x81e>
    dda2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    dda4:	2500      	movs	r5, #0
    dda6:	2b01      	cmp	r3, #1
    dda8:	dc12      	bgt.n	ddd0 <_dtoa_r+0x844>
    ddaa:	2500      	movs	r5, #0
    ddac:	9b06      	ldr	r3, [sp, #24]
    ddae:	42ab      	cmp	r3, r5
    ddb0:	d10e      	bne.n	ddd0 <_dtoa_r+0x844>
    ddb2:	9b07      	ldr	r3, [sp, #28]
    ddb4:	031b      	lsls	r3, r3, #12
    ddb6:	42ab      	cmp	r3, r5
    ddb8:	d10a      	bne.n	ddd0 <_dtoa_r+0x844>
    ddba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ddbc:	9a07      	ldr	r2, [sp, #28]
    ddbe:	4213      	tst	r3, r2
    ddc0:	d006      	beq.n	ddd0 <_dtoa_r+0x844>
    ddc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ddc4:	3501      	adds	r5, #1
    ddc6:	3301      	adds	r3, #1
    ddc8:	930d      	str	r3, [sp, #52]	; 0x34
    ddca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddcc:	3301      	adds	r3, #1
    ddce:	930e      	str	r3, [sp, #56]	; 0x38
    ddd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ddd2:	2001      	movs	r0, #1
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d008      	beq.n	ddea <_dtoa_r+0x85e>
    ddd8:	693b      	ldr	r3, [r7, #16]
    ddda:	3303      	adds	r3, #3
    dddc:	009b      	lsls	r3, r3, #2
    ddde:	18fb      	adds	r3, r7, r3
    dde0:	6858      	ldr	r0, [r3, #4]
    dde2:	f000 fe40 	bl	ea66 <__hi0bits>
    dde6:	2320      	movs	r3, #32
    dde8:	1a18      	subs	r0, r3, r0
    ddea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ddec:	18c0      	adds	r0, r0, r3
    ddee:	231f      	movs	r3, #31
    ddf0:	4018      	ands	r0, r3
    ddf2:	d009      	beq.n	de08 <_dtoa_r+0x87c>
    ddf4:	3301      	adds	r3, #1
    ddf6:	1a1b      	subs	r3, r3, r0
    ddf8:	2b04      	cmp	r3, #4
    ddfa:	dd02      	ble.n	de02 <_dtoa_r+0x876>
    ddfc:	231c      	movs	r3, #28
    ddfe:	1a18      	subs	r0, r3, r0
    de00:	e003      	b.n	de0a <_dtoa_r+0x87e>
    de02:	2b04      	cmp	r3, #4
    de04:	d008      	beq.n	de18 <_dtoa_r+0x88c>
    de06:	1c18      	adds	r0, r3, #0
    de08:	301c      	adds	r0, #28
    de0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de0c:	1824      	adds	r4, r4, r0
    de0e:	181b      	adds	r3, r3, r0
    de10:	930d      	str	r3, [sp, #52]	; 0x34
    de12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de14:	181b      	adds	r3, r3, r0
    de16:	930e      	str	r3, [sp, #56]	; 0x38
    de18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de1a:	2b00      	cmp	r3, #0
    de1c:	dd05      	ble.n	de2a <_dtoa_r+0x89e>
    de1e:	9808      	ldr	r0, [sp, #32]
    de20:	990a      	ldr	r1, [sp, #40]	; 0x28
    de22:	1c1a      	adds	r2, r3, #0
    de24:	f000 ff52 	bl	eccc <__lshift>
    de28:	900a      	str	r0, [sp, #40]	; 0x28
    de2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    de2c:	2b00      	cmp	r3, #0
    de2e:	dd05      	ble.n	de3c <_dtoa_r+0x8b0>
    de30:	1c39      	adds	r1, r7, #0
    de32:	9808      	ldr	r0, [sp, #32]
    de34:	1c1a      	adds	r2, r3, #0
    de36:	f000 ff49 	bl	eccc <__lshift>
    de3a:	1c07      	adds	r7, r0, #0
    de3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    de3e:	2b00      	cmp	r3, #0
    de40:	d01e      	beq.n	de80 <_dtoa_r+0x8f4>
    de42:	980a      	ldr	r0, [sp, #40]	; 0x28
    de44:	1c39      	adds	r1, r7, #0
    de46:	f000 ff93 	bl	ed70 <__mcmp>
    de4a:	2800      	cmp	r0, #0
    de4c:	da18      	bge.n	de80 <_dtoa_r+0x8f4>
    de4e:	9b03      	ldr	r3, [sp, #12]
    de50:	9808      	ldr	r0, [sp, #32]
    de52:	3b01      	subs	r3, #1
    de54:	9303      	str	r3, [sp, #12]
    de56:	990a      	ldr	r1, [sp, #40]	; 0x28
    de58:	2300      	movs	r3, #0
    de5a:	220a      	movs	r2, #10
    de5c:	f000 fd87 	bl	e96e <__multadd>
    de60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    de62:	900a      	str	r0, [sp, #40]	; 0x28
    de64:	2b00      	cmp	r3, #0
    de66:	d100      	bne.n	de6a <_dtoa_r+0x8de>
    de68:	e17f      	b.n	e16a <_dtoa_r+0xbde>
    de6a:	1c31      	adds	r1, r6, #0
    de6c:	2300      	movs	r3, #0
    de6e:	9808      	ldr	r0, [sp, #32]
    de70:	220a      	movs	r2, #10
    de72:	f000 fd7c 	bl	e96e <__multadd>
    de76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de78:	1c06      	adds	r6, r0, #0
    de7a:	2b00      	cmp	r3, #0
    de7c:	dc3c      	bgt.n	def8 <_dtoa_r+0x96c>
    de7e:	e17d      	b.n	e17c <_dtoa_r+0xbf0>
    de80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de82:	2b00      	cmp	r3, #0
    de84:	dc2e      	bgt.n	dee4 <_dtoa_r+0x958>
    de86:	9b20      	ldr	r3, [sp, #128]	; 0x80
    de88:	2b02      	cmp	r3, #2
    de8a:	dd2b      	ble.n	dee4 <_dtoa_r+0x958>
    de8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de8e:	930b      	str	r3, [sp, #44]	; 0x2c
    de90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de92:	2b00      	cmp	r3, #0
    de94:	d110      	bne.n	deb8 <_dtoa_r+0x92c>
    de96:	1c39      	adds	r1, r7, #0
    de98:	9808      	ldr	r0, [sp, #32]
    de9a:	2205      	movs	r2, #5
    de9c:	f000 fd67 	bl	e96e <__multadd>
    dea0:	1c07      	adds	r7, r0, #0
    dea2:	980a      	ldr	r0, [sp, #40]	; 0x28
    dea4:	1c39      	adds	r1, r7, #0
    dea6:	f000 ff63 	bl	ed70 <__mcmp>
    deaa:	2800      	cmp	r0, #0
    deac:	dc0e      	bgt.n	decc <_dtoa_r+0x940>
    deae:	e003      	b.n	deb8 <_dtoa_r+0x92c>
    deb0:	1c2f      	adds	r7, r5, #0
    deb2:	e000      	b.n	deb6 <_dtoa_r+0x92a>
    deb4:	2700      	movs	r7, #0
    deb6:	1c3e      	adds	r6, r7, #0
    deb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    deba:	43db      	mvns	r3, r3
    debc:	9303      	str	r3, [sp, #12]
    debe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dec0:	9304      	str	r3, [sp, #16]
    dec2:	e00c      	b.n	dede <_dtoa_r+0x952>
    dec4:	1c2f      	adds	r7, r5, #0
    dec6:	1c2e      	adds	r6, r5, #0
    dec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    deca:	9303      	str	r3, [sp, #12]
    decc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ded0:	3301      	adds	r3, #1
    ded2:	9304      	str	r3, [sp, #16]
    ded4:	2331      	movs	r3, #49	; 0x31
    ded6:	7013      	strb	r3, [r2, #0]
    ded8:	9b03      	ldr	r3, [sp, #12]
    deda:	3301      	adds	r3, #1
    dedc:	9303      	str	r3, [sp, #12]
    dede:	9609      	str	r6, [sp, #36]	; 0x24
    dee0:	2600      	movs	r6, #0
    dee2:	e11a      	b.n	e11a <_dtoa_r+0xb8e>
    dee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dee6:	2b00      	cmp	r3, #0
    dee8:	d104      	bne.n	def4 <_dtoa_r+0x968>
    deea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    deec:	930b      	str	r3, [sp, #44]	; 0x2c
    deee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    def0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    def2:	e0d0      	b.n	e096 <_dtoa_r+0xb0a>
    def4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    def6:	930b      	str	r3, [sp, #44]	; 0x2c
    def8:	2c00      	cmp	r4, #0
    defa:	dd05      	ble.n	df08 <_dtoa_r+0x97c>
    defc:	1c31      	adds	r1, r6, #0
    defe:	9808      	ldr	r0, [sp, #32]
    df00:	1c22      	adds	r2, r4, #0
    df02:	f000 fee3 	bl	eccc <__lshift>
    df06:	1c06      	adds	r6, r0, #0
    df08:	9609      	str	r6, [sp, #36]	; 0x24
    df0a:	2d00      	cmp	r5, #0
    df0c:	d012      	beq.n	df34 <_dtoa_r+0x9a8>
    df0e:	6871      	ldr	r1, [r6, #4]
    df10:	9808      	ldr	r0, [sp, #32]
    df12:	f000 fcdb 	bl	e8cc <_Balloc>
    df16:	1c31      	adds	r1, r6, #0
    df18:	1c04      	adds	r4, r0, #0
    df1a:	6933      	ldr	r3, [r6, #16]
    df1c:	310c      	adds	r1, #12
    df1e:	1c9a      	adds	r2, r3, #2
    df20:	0092      	lsls	r2, r2, #2
    df22:	300c      	adds	r0, #12
    df24:	f7fc fd5b 	bl	a9de <memcpy>
    df28:	9808      	ldr	r0, [sp, #32]
    df2a:	1c21      	adds	r1, r4, #0
    df2c:	2201      	movs	r2, #1
    df2e:	f000 fecd 	bl	eccc <__lshift>
    df32:	9009      	str	r0, [sp, #36]	; 0x24
    df34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    df38:	930e      	str	r3, [sp, #56]	; 0x38
    df3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    df3e:	3b01      	subs	r3, #1
    df40:	18d3      	adds	r3, r2, r3
    df42:	9310      	str	r3, [sp, #64]	; 0x40
    df44:	1c39      	adds	r1, r7, #0
    df46:	1c20      	adds	r0, r4, #0
    df48:	f7ff fa98 	bl	d47c <quorem>
    df4c:	1c03      	adds	r3, r0, #0
    df4e:	900f      	str	r0, [sp, #60]	; 0x3c
    df50:	3330      	adds	r3, #48	; 0x30
    df52:	1c31      	adds	r1, r6, #0
    df54:	1c20      	adds	r0, r4, #0
    df56:	930d      	str	r3, [sp, #52]	; 0x34
    df58:	f000 ff0a 	bl	ed70 <__mcmp>
    df5c:	1c39      	adds	r1, r7, #0
    df5e:	900b      	str	r0, [sp, #44]	; 0x2c
    df60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    df62:	9808      	ldr	r0, [sp, #32]
    df64:	f000 ff1f 	bl	eda6 <__mdiff>
    df68:	2301      	movs	r3, #1
    df6a:	9304      	str	r3, [sp, #16]
    df6c:	68c3      	ldr	r3, [r0, #12]
    df6e:	1c05      	adds	r5, r0, #0
    df70:	2b00      	cmp	r3, #0
    df72:	d104      	bne.n	df7e <_dtoa_r+0x9f2>
    df74:	1c20      	adds	r0, r4, #0
    df76:	1c29      	adds	r1, r5, #0
    df78:	f000 fefa 	bl	ed70 <__mcmp>
    df7c:	9004      	str	r0, [sp, #16]
    df7e:	9808      	ldr	r0, [sp, #32]
    df80:	1c29      	adds	r1, r5, #0
    df82:	f000 fcdb 	bl	e93c <_Bfree>
    df86:	9b04      	ldr	r3, [sp, #16]
    df88:	9a20      	ldr	r2, [sp, #128]	; 0x80
    df8a:	4313      	orrs	r3, r2
    df8c:	d110      	bne.n	dfb0 <_dtoa_r+0xa24>
    df8e:	9a06      	ldr	r2, [sp, #24]
    df90:	3301      	adds	r3, #1
    df92:	4213      	tst	r3, r2
    df94:	d10c      	bne.n	dfb0 <_dtoa_r+0xa24>
    df96:	980d      	ldr	r0, [sp, #52]	; 0x34
    df98:	940a      	str	r4, [sp, #40]	; 0x28
    df9a:	2839      	cmp	r0, #57	; 0x39
    df9c:	d03d      	beq.n	e01a <_dtoa_r+0xa8e>
    df9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dfa0:	2b00      	cmp	r3, #0
    dfa2:	dd01      	ble.n	dfa8 <_dtoa_r+0xa1c>
    dfa4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    dfa6:	3031      	adds	r0, #49	; 0x31
    dfa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dfaa:	3301      	adds	r3, #1
    dfac:	9304      	str	r3, [sp, #16]
    dfae:	e03e      	b.n	e02e <_dtoa_r+0xaa2>
    dfb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dfb2:	2b00      	cmp	r3, #0
    dfb4:	da05      	bge.n	dfc2 <_dtoa_r+0xa36>
    dfb6:	9b04      	ldr	r3, [sp, #16]
    dfb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    dfba:	940a      	str	r4, [sp, #40]	; 0x28
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	dc09      	bgt.n	dfd4 <_dtoa_r+0xa48>
    dfc0:	e01c      	b.n	dffc <_dtoa_r+0xa70>
    dfc2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    dfc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    dfc6:	431d      	orrs	r5, r3
    dfc8:	d11e      	bne.n	e008 <_dtoa_r+0xa7c>
    dfca:	2301      	movs	r3, #1
    dfcc:	9a06      	ldr	r2, [sp, #24]
    dfce:	4213      	tst	r3, r2
    dfd0:	d11a      	bne.n	e008 <_dtoa_r+0xa7c>
    dfd2:	e7f0      	b.n	dfb6 <_dtoa_r+0xa2a>
    dfd4:	1c21      	adds	r1, r4, #0
    dfd6:	9808      	ldr	r0, [sp, #32]
    dfd8:	2201      	movs	r2, #1
    dfda:	f000 fe77 	bl	eccc <__lshift>
    dfde:	1c39      	adds	r1, r7, #0
    dfe0:	900a      	str	r0, [sp, #40]	; 0x28
    dfe2:	f000 fec5 	bl	ed70 <__mcmp>
    dfe6:	2800      	cmp	r0, #0
    dfe8:	dc03      	bgt.n	dff2 <_dtoa_r+0xa66>
    dfea:	d107      	bne.n	dffc <_dtoa_r+0xa70>
    dfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dfee:	07db      	lsls	r3, r3, #31
    dff0:	d504      	bpl.n	dffc <_dtoa_r+0xa70>
    dff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dff4:	2b39      	cmp	r3, #57	; 0x39
    dff6:	d010      	beq.n	e01a <_dtoa_r+0xa8e>
    dff8:	1c1d      	adds	r5, r3, #0
    dffa:	3501      	adds	r5, #1
    dffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dffe:	3301      	adds	r3, #1
    e000:	9304      	str	r3, [sp, #16]
    e002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e004:	701d      	strb	r5, [r3, #0]
    e006:	e088      	b.n	e11a <_dtoa_r+0xb8e>
    e008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e00a:	1c5d      	adds	r5, r3, #1
    e00c:	9b04      	ldr	r3, [sp, #16]
    e00e:	2b00      	cmp	r3, #0
    e010:	dd10      	ble.n	e034 <_dtoa_r+0xaa8>
    e012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e014:	940a      	str	r4, [sp, #40]	; 0x28
    e016:	2b39      	cmp	r3, #57	; 0x39
    e018:	d106      	bne.n	e028 <_dtoa_r+0xa9c>
    e01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e01c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e01e:	3301      	adds	r3, #1
    e020:	9304      	str	r3, [sp, #16]
    e022:	2339      	movs	r3, #57	; 0x39
    e024:	7013      	strb	r3, [r2, #0]
    e026:	e060      	b.n	e0ea <_dtoa_r+0xb5e>
    e028:	980d      	ldr	r0, [sp, #52]	; 0x34
    e02a:	9504      	str	r5, [sp, #16]
    e02c:	3001      	adds	r0, #1
    e02e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e030:	7018      	strb	r0, [r3, #0]
    e032:	e072      	b.n	e11a <_dtoa_r+0xb8e>
    e034:	466a      	mov	r2, sp
    e036:	2134      	movs	r1, #52	; 0x34
    e038:	1852      	adds	r2, r2, r1
    e03a:	7812      	ldrb	r2, [r2, #0]
    e03c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e03e:	9504      	str	r5, [sp, #16]
    e040:	701a      	strb	r2, [r3, #0]
    e042:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e044:	4293      	cmp	r3, r2
    e046:	d03f      	beq.n	e0c8 <_dtoa_r+0xb3c>
    e048:	1c21      	adds	r1, r4, #0
    e04a:	220a      	movs	r2, #10
    e04c:	2300      	movs	r3, #0
    e04e:	9808      	ldr	r0, [sp, #32]
    e050:	f000 fc8d 	bl	e96e <__multadd>
    e054:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e056:	1c04      	adds	r4, r0, #0
    e058:	1c31      	adds	r1, r6, #0
    e05a:	9808      	ldr	r0, [sp, #32]
    e05c:	220a      	movs	r2, #10
    e05e:	429e      	cmp	r6, r3
    e060:	d105      	bne.n	e06e <_dtoa_r+0xae2>
    e062:	2300      	movs	r3, #0
    e064:	f000 fc83 	bl	e96e <__multadd>
    e068:	1c06      	adds	r6, r0, #0
    e06a:	9009      	str	r0, [sp, #36]	; 0x24
    e06c:	e00a      	b.n	e084 <_dtoa_r+0xaf8>
    e06e:	2300      	movs	r3, #0
    e070:	f000 fc7d 	bl	e96e <__multadd>
    e074:	9909      	ldr	r1, [sp, #36]	; 0x24
    e076:	1c06      	adds	r6, r0, #0
    e078:	220a      	movs	r2, #10
    e07a:	9808      	ldr	r0, [sp, #32]
    e07c:	2300      	movs	r3, #0
    e07e:	f000 fc76 	bl	e96e <__multadd>
    e082:	9009      	str	r0, [sp, #36]	; 0x24
    e084:	950e      	str	r5, [sp, #56]	; 0x38
    e086:	e75d      	b.n	df44 <_dtoa_r+0x9b8>
    e088:	1c21      	adds	r1, r4, #0
    e08a:	9808      	ldr	r0, [sp, #32]
    e08c:	220a      	movs	r2, #10
    e08e:	2300      	movs	r3, #0
    e090:	f000 fc6d 	bl	e96e <__multadd>
    e094:	1c04      	adds	r4, r0, #0
    e096:	1c20      	adds	r0, r4, #0
    e098:	1c39      	adds	r1, r7, #0
    e09a:	f7ff f9ef 	bl	d47c <quorem>
    e09e:	2234      	movs	r2, #52	; 0x34
    e0a0:	466b      	mov	r3, sp
    e0a2:	3030      	adds	r0, #48	; 0x30
    e0a4:	189b      	adds	r3, r3, r2
    e0a6:	900d      	str	r0, [sp, #52]	; 0x34
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e0ac:	702b      	strb	r3, [r5, #0]
    e0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e0b0:	3501      	adds	r5, #1
    e0b2:	1aeb      	subs	r3, r5, r3
    e0b4:	4293      	cmp	r3, r2
    e0b6:	dbe7      	blt.n	e088 <_dtoa_r+0xafc>
    e0b8:	1e13      	subs	r3, r2, #0
    e0ba:	dc00      	bgt.n	e0be <_dtoa_r+0xb32>
    e0bc:	2301      	movs	r3, #1
    e0be:	9609      	str	r6, [sp, #36]	; 0x24
    e0c0:	2600      	movs	r6, #0
    e0c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e0c4:	18d3      	adds	r3, r2, r3
    e0c6:	9304      	str	r3, [sp, #16]
    e0c8:	1c21      	adds	r1, r4, #0
    e0ca:	9808      	ldr	r0, [sp, #32]
    e0cc:	2201      	movs	r2, #1
    e0ce:	f000 fdfd 	bl	eccc <__lshift>
    e0d2:	1c39      	adds	r1, r7, #0
    e0d4:	900a      	str	r0, [sp, #40]	; 0x28
    e0d6:	f000 fe4b 	bl	ed70 <__mcmp>
    e0da:	2800      	cmp	r0, #0
    e0dc:	dc05      	bgt.n	e0ea <_dtoa_r+0xb5e>
    e0de:	d115      	bne.n	e10c <_dtoa_r+0xb80>
    e0e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e0e2:	07db      	lsls	r3, r3, #31
    e0e4:	d401      	bmi.n	e0ea <_dtoa_r+0xb5e>
    e0e6:	e011      	b.n	e10c <_dtoa_r+0xb80>
    e0e8:	9304      	str	r3, [sp, #16]
    e0ea:	9b04      	ldr	r3, [sp, #16]
    e0ec:	3b01      	subs	r3, #1
    e0ee:	781a      	ldrb	r2, [r3, #0]
    e0f0:	2a39      	cmp	r2, #57	; 0x39
    e0f2:	d108      	bne.n	e106 <_dtoa_r+0xb7a>
    e0f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e0f6:	4293      	cmp	r3, r2
    e0f8:	d1f6      	bne.n	e0e8 <_dtoa_r+0xb5c>
    e0fa:	9b03      	ldr	r3, [sp, #12]
    e0fc:	3301      	adds	r3, #1
    e0fe:	9303      	str	r3, [sp, #12]
    e100:	2331      	movs	r3, #49	; 0x31
    e102:	7013      	strb	r3, [r2, #0]
    e104:	e009      	b.n	e11a <_dtoa_r+0xb8e>
    e106:	3201      	adds	r2, #1
    e108:	701a      	strb	r2, [r3, #0]
    e10a:	e006      	b.n	e11a <_dtoa_r+0xb8e>
    e10c:	9b04      	ldr	r3, [sp, #16]
    e10e:	3b01      	subs	r3, #1
    e110:	781a      	ldrb	r2, [r3, #0]
    e112:	2a30      	cmp	r2, #48	; 0x30
    e114:	d101      	bne.n	e11a <_dtoa_r+0xb8e>
    e116:	9304      	str	r3, [sp, #16]
    e118:	e7f8      	b.n	e10c <_dtoa_r+0xb80>
    e11a:	9808      	ldr	r0, [sp, #32]
    e11c:	1c39      	adds	r1, r7, #0
    e11e:	f000 fc0d 	bl	e93c <_Bfree>
    e122:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e124:	2b00      	cmp	r3, #0
    e126:	d00e      	beq.n	e146 <_dtoa_r+0xbba>
    e128:	2e00      	cmp	r6, #0
    e12a:	d005      	beq.n	e138 <_dtoa_r+0xbac>
    e12c:	429e      	cmp	r6, r3
    e12e:	d003      	beq.n	e138 <_dtoa_r+0xbac>
    e130:	9808      	ldr	r0, [sp, #32]
    e132:	1c31      	adds	r1, r6, #0
    e134:	f000 fc02 	bl	e93c <_Bfree>
    e138:	9808      	ldr	r0, [sp, #32]
    e13a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e13c:	f000 fbfe 	bl	e93c <_Bfree>
    e140:	e001      	b.n	e146 <_dtoa_r+0xbba>
    e142:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e144:	9303      	str	r3, [sp, #12]
    e146:	9808      	ldr	r0, [sp, #32]
    e148:	990a      	ldr	r1, [sp, #40]	; 0x28
    e14a:	f000 fbf7 	bl	e93c <_Bfree>
    e14e:	2300      	movs	r3, #0
    e150:	9a04      	ldr	r2, [sp, #16]
    e152:	980c      	ldr	r0, [sp, #48]	; 0x30
    e154:	7013      	strb	r3, [r2, #0]
    e156:	9b03      	ldr	r3, [sp, #12]
    e158:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e15a:	3301      	adds	r3, #1
    e15c:	6013      	str	r3, [r2, #0]
    e15e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e160:	2b00      	cmp	r3, #0
    e162:	d010      	beq.n	e186 <_dtoa_r+0xbfa>
    e164:	9a04      	ldr	r2, [sp, #16]
    e166:	601a      	str	r2, [r3, #0]
    e168:	e00d      	b.n	e186 <_dtoa_r+0xbfa>
    e16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e16c:	2b00      	cmp	r3, #0
    e16e:	dd00      	ble.n	e172 <_dtoa_r+0xbe6>
    e170:	e6bd      	b.n	deee <_dtoa_r+0x962>
    e172:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e174:	2b02      	cmp	r3, #2
    e176:	dd00      	ble.n	e17a <_dtoa_r+0xbee>
    e178:	e68a      	b.n	de90 <_dtoa_r+0x904>
    e17a:	e6b8      	b.n	deee <_dtoa_r+0x962>
    e17c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    e17e:	2b02      	cmp	r3, #2
    e180:	dd00      	ble.n	e184 <_dtoa_r+0xbf8>
    e182:	e685      	b.n	de90 <_dtoa_r+0x904>
    e184:	e6b8      	b.n	def8 <_dtoa_r+0x96c>
    e186:	b01b      	add	sp, #108	; 0x6c
    e188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e18a:	46c0      	nop			; (mov r8, r8)

0000e18c <__sflags>:
    e18c:	780b      	ldrb	r3, [r1, #0]
    e18e:	b530      	push	{r4, r5, lr}
    e190:	2b72      	cmp	r3, #114	; 0x72
    e192:	d00e      	beq.n	e1b2 <__sflags+0x26>
    e194:	2b77      	cmp	r3, #119	; 0x77
    e196:	d007      	beq.n	e1a8 <__sflags+0x1c>
    e198:	2b61      	cmp	r3, #97	; 0x61
    e19a:	d10e      	bne.n	e1ba <__sflags+0x2e>
    e19c:	2582      	movs	r5, #130	; 0x82
    e19e:	2084      	movs	r0, #132	; 0x84
    e1a0:	00ad      	lsls	r5, r5, #2
    e1a2:	2301      	movs	r3, #1
    e1a4:	0040      	lsls	r0, r0, #1
    e1a6:	e01b      	b.n	e1e0 <__sflags+0x54>
    e1a8:	25c0      	movs	r5, #192	; 0xc0
    e1aa:	2301      	movs	r3, #1
    e1ac:	00ed      	lsls	r5, r5, #3
    e1ae:	2008      	movs	r0, #8
    e1b0:	e016      	b.n	e1e0 <__sflags+0x54>
    e1b2:	2500      	movs	r5, #0
    e1b4:	2004      	movs	r0, #4
    e1b6:	1c2b      	adds	r3, r5, #0
    e1b8:	e012      	b.n	e1e0 <__sflags+0x54>
    e1ba:	2316      	movs	r3, #22
    e1bc:	6003      	str	r3, [r0, #0]
    e1be:	2000      	movs	r0, #0
    e1c0:	e01b      	b.n	e1fa <__sflags+0x6e>
    e1c2:	2c62      	cmp	r4, #98	; 0x62
    e1c4:	d011      	beq.n	e1ea <__sflags+0x5e>
    e1c6:	2c78      	cmp	r4, #120	; 0x78
    e1c8:	d012      	beq.n	e1f0 <__sflags+0x64>
    e1ca:	2c2b      	cmp	r4, #43	; 0x2b
    e1cc:	d108      	bne.n	e1e0 <__sflags+0x54>
    e1ce:	3c0f      	subs	r4, #15
    e1d0:	43a0      	bics	r0, r4
    e1d2:	3c0c      	subs	r4, #12
    e1d4:	4320      	orrs	r0, r4
    e1d6:	3c0d      	subs	r4, #13
    e1d8:	43a3      	bics	r3, r4
    e1da:	1c1c      	adds	r4, r3, #0
    e1dc:	2302      	movs	r3, #2
    e1de:	4323      	orrs	r3, r4
    e1e0:	3101      	adds	r1, #1
    e1e2:	780c      	ldrb	r4, [r1, #0]
    e1e4:	2c00      	cmp	r4, #0
    e1e6:	d1ec      	bne.n	e1c2 <__sflags+0x36>
    e1e8:	e005      	b.n	e1f6 <__sflags+0x6a>
    e1ea:	2480      	movs	r4, #128	; 0x80
    e1ec:	0264      	lsls	r4, r4, #9
    e1ee:	e7f6      	b.n	e1de <__sflags+0x52>
    e1f0:	2480      	movs	r4, #128	; 0x80
    e1f2:	0124      	lsls	r4, r4, #4
    e1f4:	e7f3      	b.n	e1de <__sflags+0x52>
    e1f6:	432b      	orrs	r3, r5
    e1f8:	6013      	str	r3, [r2, #0]
    e1fa:	bd30      	pop	{r4, r5, pc}

0000e1fc <_fstat_r>:
    e1fc:	b538      	push	{r3, r4, r5, lr}
    e1fe:	2300      	movs	r3, #0
    e200:	4c06      	ldr	r4, [pc, #24]	; (e21c <_fstat_r+0x20>)
    e202:	1c05      	adds	r5, r0, #0
    e204:	1c08      	adds	r0, r1, #0
    e206:	1c11      	adds	r1, r2, #0
    e208:	6023      	str	r3, [r4, #0]
    e20a:	f7f6 fa05 	bl	4618 <_fstat>
    e20e:	1c43      	adds	r3, r0, #1
    e210:	d103      	bne.n	e21a <_fstat_r+0x1e>
    e212:	6823      	ldr	r3, [r4, #0]
    e214:	2b00      	cmp	r3, #0
    e216:	d000      	beq.n	e21a <_fstat_r+0x1e>
    e218:	602b      	str	r3, [r5, #0]
    e21a:	bd38      	pop	{r3, r4, r5, pc}
    e21c:	20004518 	.word	0x20004518

0000e220 <rshift>:
    e220:	b5f0      	push	{r4, r5, r6, r7, lr}
    e222:	1c06      	adds	r6, r0, #0
    e224:	6905      	ldr	r5, [r0, #16]
    e226:	3614      	adds	r6, #20
    e228:	114a      	asrs	r2, r1, #5
    e22a:	1c34      	adds	r4, r6, #0
    e22c:	42aa      	cmp	r2, r5
    e22e:	da25      	bge.n	e27c <rshift+0x5c>
    e230:	231f      	movs	r3, #31
    e232:	00ad      	lsls	r5, r5, #2
    e234:	0092      	lsls	r2, r2, #2
    e236:	4019      	ands	r1, r3
    e238:	1975      	adds	r5, r6, r5
    e23a:	18b2      	adds	r2, r6, r2
    e23c:	1c33      	adds	r3, r6, #0
    e23e:	2900      	cmp	r1, #0
    e240:	d016      	beq.n	e270 <rshift+0x50>
    e242:	1c13      	adds	r3, r2, #0
    e244:	cb04      	ldmia	r3!, {r2}
    e246:	2720      	movs	r7, #32
    e248:	40ca      	lsrs	r2, r1
    e24a:	46b4      	mov	ip, r6
    e24c:	1a7f      	subs	r7, r7, r1
    e24e:	4664      	mov	r4, ip
    e250:	42ab      	cmp	r3, r5
    e252:	d208      	bcs.n	e266 <rshift+0x46>
    e254:	681c      	ldr	r4, [r3, #0]
    e256:	40bc      	lsls	r4, r7
    e258:	4322      	orrs	r2, r4
    e25a:	4664      	mov	r4, ip
    e25c:	c404      	stmia	r4!, {r2}
    e25e:	cb04      	ldmia	r3!, {r2}
    e260:	46a4      	mov	ip, r4
    e262:	40ca      	lsrs	r2, r1
    e264:	e7f3      	b.n	e24e <rshift+0x2e>
    e266:	6022      	str	r2, [r4, #0]
    e268:	2a00      	cmp	r2, #0
    e26a:	d007      	beq.n	e27c <rshift+0x5c>
    e26c:	3404      	adds	r4, #4
    e26e:	e005      	b.n	e27c <rshift+0x5c>
    e270:	1c1c      	adds	r4, r3, #0
    e272:	42aa      	cmp	r2, r5
    e274:	d202      	bcs.n	e27c <rshift+0x5c>
    e276:	ca02      	ldmia	r2!, {r1}
    e278:	c302      	stmia	r3!, {r1}
    e27a:	e7f9      	b.n	e270 <rshift+0x50>
    e27c:	1ba3      	subs	r3, r4, r6
    e27e:	109b      	asrs	r3, r3, #2
    e280:	6103      	str	r3, [r0, #16]
    e282:	d100      	bne.n	e286 <rshift+0x66>
    e284:	6143      	str	r3, [r0, #20]
    e286:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e288 <__hexdig_fun>:
    e288:	1c03      	adds	r3, r0, #0
    e28a:	3b30      	subs	r3, #48	; 0x30
    e28c:	2b09      	cmp	r3, #9
    e28e:	d801      	bhi.n	e294 <__hexdig_fun+0xc>
    e290:	3820      	subs	r0, #32
    e292:	e00b      	b.n	e2ac <__hexdig_fun+0x24>
    e294:	1c03      	adds	r3, r0, #0
    e296:	3b61      	subs	r3, #97	; 0x61
    e298:	2b05      	cmp	r3, #5
    e29a:	d801      	bhi.n	e2a0 <__hexdig_fun+0x18>
    e29c:	3847      	subs	r0, #71	; 0x47
    e29e:	e005      	b.n	e2ac <__hexdig_fun+0x24>
    e2a0:	1c02      	adds	r2, r0, #0
    e2a2:	3a41      	subs	r2, #65	; 0x41
    e2a4:	2300      	movs	r3, #0
    e2a6:	2a05      	cmp	r2, #5
    e2a8:	d801      	bhi.n	e2ae <__hexdig_fun+0x26>
    e2aa:	3827      	subs	r0, #39	; 0x27
    e2ac:	b2c3      	uxtb	r3, r0
    e2ae:	1c18      	adds	r0, r3, #0
    e2b0:	4770      	bx	lr

0000e2b2 <__gethex>:
    e2b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2b4:	b08d      	sub	sp, #52	; 0x34
    e2b6:	9109      	str	r1, [sp, #36]	; 0x24
    e2b8:	9202      	str	r2, [sp, #8]
    e2ba:	930a      	str	r3, [sp, #40]	; 0x28
    e2bc:	9005      	str	r0, [sp, #20]
    e2be:	f000 fad9 	bl	e874 <_localeconv_r>
    e2c2:	6803      	ldr	r3, [r0, #0]
    e2c4:	1c18      	adds	r0, r3, #0
    e2c6:	9307      	str	r3, [sp, #28]
    e2c8:	f7fe f822 	bl	c310 <strlen>
    e2cc:	9b07      	ldr	r3, [sp, #28]
    e2ce:	9004      	str	r0, [sp, #16]
    e2d0:	181b      	adds	r3, r3, r0
    e2d2:	3b01      	subs	r3, #1
    e2d4:	781b      	ldrb	r3, [r3, #0]
    e2d6:	930b      	str	r3, [sp, #44]	; 0x2c
    e2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e2da:	6819      	ldr	r1, [r3, #0]
    e2dc:	1c8a      	adds	r2, r1, #2
    e2de:	9201      	str	r2, [sp, #4]
    e2e0:	9801      	ldr	r0, [sp, #4]
    e2e2:	1a53      	subs	r3, r2, r1
    e2e4:	7800      	ldrb	r0, [r0, #0]
    e2e6:	3b02      	subs	r3, #2
    e2e8:	3201      	adds	r2, #1
    e2ea:	2830      	cmp	r0, #48	; 0x30
    e2ec:	d0f7      	beq.n	e2de <__gethex+0x2c>
    e2ee:	9308      	str	r3, [sp, #32]
    e2f0:	f7ff ffca 	bl	e288 <__hexdig_fun>
    e2f4:	1e06      	subs	r6, r0, #0
    e2f6:	d120      	bne.n	e33a <__gethex+0x88>
    e2f8:	9801      	ldr	r0, [sp, #4]
    e2fa:	9907      	ldr	r1, [sp, #28]
    e2fc:	9a04      	ldr	r2, [sp, #16]
    e2fe:	f7fe f80e 	bl	c31e <strncmp>
    e302:	2800      	cmp	r0, #0
    e304:	d13c      	bne.n	e380 <__gethex+0xce>
    e306:	9b01      	ldr	r3, [sp, #4]
    e308:	9a04      	ldr	r2, [sp, #16]
    e30a:	189c      	adds	r4, r3, r2
    e30c:	7820      	ldrb	r0, [r4, #0]
    e30e:	f7ff ffbb 	bl	e288 <__hexdig_fun>
    e312:	2800      	cmp	r0, #0
    e314:	d037      	beq.n	e386 <__gethex+0xd4>
    e316:	9401      	str	r4, [sp, #4]
    e318:	9b01      	ldr	r3, [sp, #4]
    e31a:	7818      	ldrb	r0, [r3, #0]
    e31c:	2830      	cmp	r0, #48	; 0x30
    e31e:	d103      	bne.n	e328 <__gethex+0x76>
    e320:	9b01      	ldr	r3, [sp, #4]
    e322:	3301      	adds	r3, #1
    e324:	9301      	str	r3, [sp, #4]
    e326:	e7f7      	b.n	e318 <__gethex+0x66>
    e328:	f7ff ffae 	bl	e288 <__hexdig_fun>
    e32c:	4243      	negs	r3, r0
    e32e:	4143      	adcs	r3, r0
    e330:	9303      	str	r3, [sp, #12]
    e332:	2301      	movs	r3, #1
    e334:	1c26      	adds	r6, r4, #0
    e336:	9308      	str	r3, [sp, #32]
    e338:	e002      	b.n	e340 <__gethex+0x8e>
    e33a:	2300      	movs	r3, #0
    e33c:	1c1e      	adds	r6, r3, #0
    e33e:	9303      	str	r3, [sp, #12]
    e340:	9c01      	ldr	r4, [sp, #4]
    e342:	7820      	ldrb	r0, [r4, #0]
    e344:	f7ff ffa0 	bl	e288 <__hexdig_fun>
    e348:	2800      	cmp	r0, #0
    e34a:	d001      	beq.n	e350 <__gethex+0x9e>
    e34c:	3401      	adds	r4, #1
    e34e:	e7f8      	b.n	e342 <__gethex+0x90>
    e350:	1c20      	adds	r0, r4, #0
    e352:	9907      	ldr	r1, [sp, #28]
    e354:	9a04      	ldr	r2, [sp, #16]
    e356:	f7fd ffe2 	bl	c31e <strncmp>
    e35a:	2800      	cmp	r0, #0
    e35c:	d10b      	bne.n	e376 <__gethex+0xc4>
    e35e:	2e00      	cmp	r6, #0
    e360:	d10b      	bne.n	e37a <__gethex+0xc8>
    e362:	9b04      	ldr	r3, [sp, #16]
    e364:	18e6      	adds	r6, r4, r3
    e366:	1c34      	adds	r4, r6, #0
    e368:	7820      	ldrb	r0, [r4, #0]
    e36a:	f7ff ff8d 	bl	e288 <__hexdig_fun>
    e36e:	2800      	cmp	r0, #0
    e370:	d001      	beq.n	e376 <__gethex+0xc4>
    e372:	3401      	adds	r4, #1
    e374:	e7f8      	b.n	e368 <__gethex+0xb6>
    e376:	1e37      	subs	r7, r6, #0
    e378:	d008      	beq.n	e38c <__gethex+0xda>
    e37a:	1b36      	subs	r6, r6, r4
    e37c:	00b7      	lsls	r7, r6, #2
    e37e:	e005      	b.n	e38c <__gethex+0xda>
    e380:	9c01      	ldr	r4, [sp, #4]
    e382:	1c37      	adds	r7, r6, #0
    e384:	e000      	b.n	e388 <__gethex+0xd6>
    e386:	1c07      	adds	r7, r0, #0
    e388:	2301      	movs	r3, #1
    e38a:	9303      	str	r3, [sp, #12]
    e38c:	7823      	ldrb	r3, [r4, #0]
    e38e:	2b50      	cmp	r3, #80	; 0x50
    e390:	d001      	beq.n	e396 <__gethex+0xe4>
    e392:	2b70      	cmp	r3, #112	; 0x70
    e394:	d128      	bne.n	e3e8 <__gethex+0x136>
    e396:	7863      	ldrb	r3, [r4, #1]
    e398:	2b2b      	cmp	r3, #43	; 0x2b
    e39a:	d007      	beq.n	e3ac <__gethex+0xfa>
    e39c:	2b2d      	cmp	r3, #45	; 0x2d
    e39e:	d003      	beq.n	e3a8 <__gethex+0xf6>
    e3a0:	2300      	movs	r3, #0
    e3a2:	1c65      	adds	r5, r4, #1
    e3a4:	9306      	str	r3, [sp, #24]
    e3a6:	e004      	b.n	e3b2 <__gethex+0x100>
    e3a8:	2301      	movs	r3, #1
    e3aa:	e000      	b.n	e3ae <__gethex+0xfc>
    e3ac:	2300      	movs	r3, #0
    e3ae:	9306      	str	r3, [sp, #24]
    e3b0:	1ca5      	adds	r5, r4, #2
    e3b2:	7828      	ldrb	r0, [r5, #0]
    e3b4:	f7ff ff68 	bl	e288 <__hexdig_fun>
    e3b8:	1e43      	subs	r3, r0, #1
    e3ba:	b2db      	uxtb	r3, r3
    e3bc:	2b18      	cmp	r3, #24
    e3be:	d813      	bhi.n	e3e8 <__gethex+0x136>
    e3c0:	3810      	subs	r0, #16
    e3c2:	3501      	adds	r5, #1
    e3c4:	1c06      	adds	r6, r0, #0
    e3c6:	7828      	ldrb	r0, [r5, #0]
    e3c8:	f7ff ff5e 	bl	e288 <__hexdig_fun>
    e3cc:	1e43      	subs	r3, r0, #1
    e3ce:	b2db      	uxtb	r3, r3
    e3d0:	2b18      	cmp	r3, #24
    e3d2:	d803      	bhi.n	e3dc <__gethex+0x12a>
    e3d4:	230a      	movs	r3, #10
    e3d6:	435e      	muls	r6, r3
    e3d8:	1830      	adds	r0, r6, r0
    e3da:	e7f1      	b.n	e3c0 <__gethex+0x10e>
    e3dc:	9b06      	ldr	r3, [sp, #24]
    e3de:	2b00      	cmp	r3, #0
    e3e0:	d000      	beq.n	e3e4 <__gethex+0x132>
    e3e2:	4276      	negs	r6, r6
    e3e4:	19bf      	adds	r7, r7, r6
    e3e6:	e000      	b.n	e3ea <__gethex+0x138>
    e3e8:	1c25      	adds	r5, r4, #0
    e3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3ec:	601d      	str	r5, [r3, #0]
    e3ee:	9b03      	ldr	r3, [sp, #12]
    e3f0:	2b00      	cmp	r3, #0
    e3f2:	d006      	beq.n	e402 <__gethex+0x150>
    e3f4:	2000      	movs	r0, #0
    e3f6:	9b08      	ldr	r3, [sp, #32]
    e3f8:	4283      	cmp	r3, r0
    e3fa:	d000      	beq.n	e3fe <__gethex+0x14c>
    e3fc:	e17b      	b.n	e6f6 <__gethex+0x444>
    e3fe:	3006      	adds	r0, #6
    e400:	e179      	b.n	e6f6 <__gethex+0x444>
    e402:	9b01      	ldr	r3, [sp, #4]
    e404:	9903      	ldr	r1, [sp, #12]
    e406:	1ae3      	subs	r3, r4, r3
    e408:	3b01      	subs	r3, #1
    e40a:	2b07      	cmp	r3, #7
    e40c:	dd02      	ble.n	e414 <__gethex+0x162>
    e40e:	3101      	adds	r1, #1
    e410:	105b      	asrs	r3, r3, #1
    e412:	e7fa      	b.n	e40a <__gethex+0x158>
    e414:	9805      	ldr	r0, [sp, #20]
    e416:	f000 fa59 	bl	e8cc <_Balloc>
    e41a:	1c03      	adds	r3, r0, #0
    e41c:	2600      	movs	r6, #0
    e41e:	1c05      	adds	r5, r0, #0
    e420:	3314      	adds	r3, #20
    e422:	9303      	str	r3, [sp, #12]
    e424:	9308      	str	r3, [sp, #32]
    e426:	9606      	str	r6, [sp, #24]
    e428:	9b01      	ldr	r3, [sp, #4]
    e42a:	429c      	cmp	r4, r3
    e42c:	d92a      	bls.n	e484 <__gethex+0x1d2>
    e42e:	1e63      	subs	r3, r4, #1
    e430:	9309      	str	r3, [sp, #36]	; 0x24
    e432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e434:	781b      	ldrb	r3, [r3, #0]
    e436:	4293      	cmp	r3, r2
    e438:	d009      	beq.n	e44e <__gethex+0x19c>
    e43a:	9b06      	ldr	r3, [sp, #24]
    e43c:	2b20      	cmp	r3, #32
    e43e:	d114      	bne.n	e46a <__gethex+0x1b8>
    e440:	9b08      	ldr	r3, [sp, #32]
    e442:	601e      	str	r6, [r3, #0]
    e444:	2600      	movs	r6, #0
    e446:	3304      	adds	r3, #4
    e448:	9308      	str	r3, [sp, #32]
    e44a:	9606      	str	r6, [sp, #24]
    e44c:	e00d      	b.n	e46a <__gethex+0x1b8>
    e44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e450:	9a04      	ldr	r2, [sp, #16]
    e452:	1a9c      	subs	r4, r3, r2
    e454:	9b01      	ldr	r3, [sp, #4]
    e456:	3401      	adds	r4, #1
    e458:	429c      	cmp	r4, r3
    e45a:	d3ee      	bcc.n	e43a <__gethex+0x188>
    e45c:	1c20      	adds	r0, r4, #0
    e45e:	9907      	ldr	r1, [sp, #28]
    e460:	f7fd ff5d 	bl	c31e <strncmp>
    e464:	2800      	cmp	r0, #0
    e466:	d0df      	beq.n	e428 <__gethex+0x176>
    e468:	e7e7      	b.n	e43a <__gethex+0x188>
    e46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e46c:	7818      	ldrb	r0, [r3, #0]
    e46e:	f7ff ff0b 	bl	e288 <__hexdig_fun>
    e472:	230f      	movs	r3, #15
    e474:	4018      	ands	r0, r3
    e476:	9b06      	ldr	r3, [sp, #24]
    e478:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e47a:	4098      	lsls	r0, r3
    e47c:	3304      	adds	r3, #4
    e47e:	4306      	orrs	r6, r0
    e480:	9306      	str	r3, [sp, #24]
    e482:	e7d1      	b.n	e428 <__gethex+0x176>
    e484:	9c08      	ldr	r4, [sp, #32]
    e486:	9b03      	ldr	r3, [sp, #12]
    e488:	c440      	stmia	r4!, {r6}
    e48a:	1ae4      	subs	r4, r4, r3
    e48c:	10a4      	asrs	r4, r4, #2
    e48e:	612c      	str	r4, [r5, #16]
    e490:	1c30      	adds	r0, r6, #0
    e492:	f000 fae8 	bl	ea66 <__hi0bits>
    e496:	9b02      	ldr	r3, [sp, #8]
    e498:	0164      	lsls	r4, r4, #5
    e49a:	681b      	ldr	r3, [r3, #0]
    e49c:	1a26      	subs	r6, r4, r0
    e49e:	9301      	str	r3, [sp, #4]
    e4a0:	429e      	cmp	r6, r3
    e4a2:	dd25      	ble.n	e4f0 <__gethex+0x23e>
    e4a4:	1af6      	subs	r6, r6, r3
    e4a6:	1c28      	adds	r0, r5, #0
    e4a8:	1c31      	adds	r1, r6, #0
    e4aa:	f000 fdf1 	bl	f090 <__any_on>
    e4ae:	2400      	movs	r4, #0
    e4b0:	42a0      	cmp	r0, r4
    e4b2:	d017      	beq.n	e4e4 <__gethex+0x232>
    e4b4:	231f      	movs	r3, #31
    e4b6:	3401      	adds	r4, #1
    e4b8:	1c20      	adds	r0, r4, #0
    e4ba:	1e72      	subs	r2, r6, #1
    e4bc:	4013      	ands	r3, r2
    e4be:	4098      	lsls	r0, r3
    e4c0:	1c03      	adds	r3, r0, #0
    e4c2:	1151      	asrs	r1, r2, #5
    e4c4:	9803      	ldr	r0, [sp, #12]
    e4c6:	0089      	lsls	r1, r1, #2
    e4c8:	5809      	ldr	r1, [r1, r0]
    e4ca:	4219      	tst	r1, r3
    e4cc:	d00a      	beq.n	e4e4 <__gethex+0x232>
    e4ce:	42a2      	cmp	r2, r4
    e4d0:	dc01      	bgt.n	e4d6 <__gethex+0x224>
    e4d2:	2402      	movs	r4, #2
    e4d4:	e006      	b.n	e4e4 <__gethex+0x232>
    e4d6:	1eb1      	subs	r1, r6, #2
    e4d8:	1c28      	adds	r0, r5, #0
    e4da:	f000 fdd9 	bl	f090 <__any_on>
    e4de:	2800      	cmp	r0, #0
    e4e0:	d0f7      	beq.n	e4d2 <__gethex+0x220>
    e4e2:	2403      	movs	r4, #3
    e4e4:	1c28      	adds	r0, r5, #0
    e4e6:	1c31      	adds	r1, r6, #0
    e4e8:	f7ff fe9a 	bl	e220 <rshift>
    e4ec:	19bf      	adds	r7, r7, r6
    e4ee:	e00e      	b.n	e50e <__gethex+0x25c>
    e4f0:	9b01      	ldr	r3, [sp, #4]
    e4f2:	2400      	movs	r4, #0
    e4f4:	429e      	cmp	r6, r3
    e4f6:	da0a      	bge.n	e50e <__gethex+0x25c>
    e4f8:	1b9e      	subs	r6, r3, r6
    e4fa:	1c29      	adds	r1, r5, #0
    e4fc:	9805      	ldr	r0, [sp, #20]
    e4fe:	1c32      	adds	r2, r6, #0
    e500:	f000 fbe4 	bl	eccc <__lshift>
    e504:	1c03      	adds	r3, r0, #0
    e506:	1c05      	adds	r5, r0, #0
    e508:	3314      	adds	r3, #20
    e50a:	1bbf      	subs	r7, r7, r6
    e50c:	9303      	str	r3, [sp, #12]
    e50e:	9b02      	ldr	r3, [sp, #8]
    e510:	689b      	ldr	r3, [r3, #8]
    e512:	9304      	str	r3, [sp, #16]
    e514:	429f      	cmp	r7, r3
    e516:	dd08      	ble.n	e52a <__gethex+0x278>
    e518:	9805      	ldr	r0, [sp, #20]
    e51a:	1c29      	adds	r1, r5, #0
    e51c:	f000 fa0e 	bl	e93c <_Bfree>
    e520:	2300      	movs	r3, #0
    e522:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e524:	20a3      	movs	r0, #163	; 0xa3
    e526:	6013      	str	r3, [r2, #0]
    e528:	e0e5      	b.n	e6f6 <__gethex+0x444>
    e52a:	9b02      	ldr	r3, [sp, #8]
    e52c:	685e      	ldr	r6, [r3, #4]
    e52e:	42b7      	cmp	r7, r6
    e530:	da5a      	bge.n	e5e8 <__gethex+0x336>
    e532:	9b01      	ldr	r3, [sp, #4]
    e534:	1bf6      	subs	r6, r6, r7
    e536:	429e      	cmp	r6, r3
    e538:	db32      	blt.n	e5a0 <__gethex+0x2ee>
    e53a:	9b02      	ldr	r3, [sp, #8]
    e53c:	68db      	ldr	r3, [r3, #12]
    e53e:	2b02      	cmp	r3, #2
    e540:	d01e      	beq.n	e580 <__gethex+0x2ce>
    e542:	2b03      	cmp	r3, #3
    e544:	d020      	beq.n	e588 <__gethex+0x2d6>
    e546:	2b01      	cmp	r3, #1
    e548:	d121      	bne.n	e58e <__gethex+0x2dc>
    e54a:	9b01      	ldr	r3, [sp, #4]
    e54c:	429e      	cmp	r6, r3
    e54e:	d11e      	bne.n	e58e <__gethex+0x2dc>
    e550:	2b01      	cmp	r3, #1
    e552:	dc0d      	bgt.n	e570 <__gethex+0x2be>
    e554:	9b02      	ldr	r3, [sp, #8]
    e556:	2062      	movs	r0, #98	; 0x62
    e558:	685b      	ldr	r3, [r3, #4]
    e55a:	9301      	str	r3, [sp, #4]
    e55c:	9a01      	ldr	r2, [sp, #4]
    e55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e560:	601a      	str	r2, [r3, #0]
    e562:	2301      	movs	r3, #1
    e564:	9a03      	ldr	r2, [sp, #12]
    e566:	612b      	str	r3, [r5, #16]
    e568:	6013      	str	r3, [r2, #0]
    e56a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e56c:	601d      	str	r5, [r3, #0]
    e56e:	e0c2      	b.n	e6f6 <__gethex+0x444>
    e570:	9901      	ldr	r1, [sp, #4]
    e572:	1c28      	adds	r0, r5, #0
    e574:	3901      	subs	r1, #1
    e576:	f000 fd8b 	bl	f090 <__any_on>
    e57a:	2800      	cmp	r0, #0
    e57c:	d1ea      	bne.n	e554 <__gethex+0x2a2>
    e57e:	e006      	b.n	e58e <__gethex+0x2dc>
    e580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e582:	2b00      	cmp	r3, #0
    e584:	d0e6      	beq.n	e554 <__gethex+0x2a2>
    e586:	e002      	b.n	e58e <__gethex+0x2dc>
    e588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e58a:	2b00      	cmp	r3, #0
    e58c:	d1e2      	bne.n	e554 <__gethex+0x2a2>
    e58e:	9805      	ldr	r0, [sp, #20]
    e590:	1c29      	adds	r1, r5, #0
    e592:	f000 f9d3 	bl	e93c <_Bfree>
    e596:	2300      	movs	r3, #0
    e598:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e59a:	2050      	movs	r0, #80	; 0x50
    e59c:	6013      	str	r3, [r2, #0]
    e59e:	e0aa      	b.n	e6f6 <__gethex+0x444>
    e5a0:	1e77      	subs	r7, r6, #1
    e5a2:	2c00      	cmp	r4, #0
    e5a4:	d107      	bne.n	e5b6 <__gethex+0x304>
    e5a6:	2f00      	cmp	r7, #0
    e5a8:	dd06      	ble.n	e5b8 <__gethex+0x306>
    e5aa:	1c28      	adds	r0, r5, #0
    e5ac:	1c39      	adds	r1, r7, #0
    e5ae:	f000 fd6f 	bl	f090 <__any_on>
    e5b2:	1c04      	adds	r4, r0, #0
    e5b4:	e000      	b.n	e5b8 <__gethex+0x306>
    e5b6:	2401      	movs	r4, #1
    e5b8:	231f      	movs	r3, #31
    e5ba:	117a      	asrs	r2, r7, #5
    e5bc:	401f      	ands	r7, r3
    e5be:	3b1e      	subs	r3, #30
    e5c0:	40bb      	lsls	r3, r7
    e5c2:	1c1f      	adds	r7, r3, #0
    e5c4:	9b03      	ldr	r3, [sp, #12]
    e5c6:	0092      	lsls	r2, r2, #2
    e5c8:	58d3      	ldr	r3, [r2, r3]
    e5ca:	423b      	tst	r3, r7
    e5cc:	d001      	beq.n	e5d2 <__gethex+0x320>
    e5ce:	2302      	movs	r3, #2
    e5d0:	431c      	orrs	r4, r3
    e5d2:	9b01      	ldr	r3, [sp, #4]
    e5d4:	1c31      	adds	r1, r6, #0
    e5d6:	1b9b      	subs	r3, r3, r6
    e5d8:	1c28      	adds	r0, r5, #0
    e5da:	9301      	str	r3, [sp, #4]
    e5dc:	f7ff fe20 	bl	e220 <rshift>
    e5e0:	9b02      	ldr	r3, [sp, #8]
    e5e2:	2602      	movs	r6, #2
    e5e4:	685f      	ldr	r7, [r3, #4]
    e5e6:	e000      	b.n	e5ea <__gethex+0x338>
    e5e8:	2601      	movs	r6, #1
    e5ea:	2c00      	cmp	r4, #0
    e5ec:	d07e      	beq.n	e6ec <__gethex+0x43a>
    e5ee:	9b02      	ldr	r3, [sp, #8]
    e5f0:	68db      	ldr	r3, [r3, #12]
    e5f2:	2b02      	cmp	r3, #2
    e5f4:	d00b      	beq.n	e60e <__gethex+0x35c>
    e5f6:	2b03      	cmp	r3, #3
    e5f8:	d00d      	beq.n	e616 <__gethex+0x364>
    e5fa:	2b01      	cmp	r3, #1
    e5fc:	d174      	bne.n	e6e8 <__gethex+0x436>
    e5fe:	07a2      	lsls	r2, r4, #30
    e600:	d572      	bpl.n	e6e8 <__gethex+0x436>
    e602:	9a03      	ldr	r2, [sp, #12]
    e604:	6812      	ldr	r2, [r2, #0]
    e606:	4314      	orrs	r4, r2
    e608:	421c      	tst	r4, r3
    e60a:	d107      	bne.n	e61c <__gethex+0x36a>
    e60c:	e06c      	b.n	e6e8 <__gethex+0x436>
    e60e:	2301      	movs	r3, #1
    e610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e612:	1a9b      	subs	r3, r3, r2
    e614:	9313      	str	r3, [sp, #76]	; 0x4c
    e616:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e618:	2b00      	cmp	r3, #0
    e61a:	d065      	beq.n	e6e8 <__gethex+0x436>
    e61c:	692c      	ldr	r4, [r5, #16]
    e61e:	00a3      	lsls	r3, r4, #2
    e620:	9303      	str	r3, [sp, #12]
    e622:	1c2b      	adds	r3, r5, #0
    e624:	9a03      	ldr	r2, [sp, #12]
    e626:	3314      	adds	r3, #20
    e628:	1899      	adds	r1, r3, r2
    e62a:	681a      	ldr	r2, [r3, #0]
    e62c:	1c50      	adds	r0, r2, #1
    e62e:	d002      	beq.n	e636 <__gethex+0x384>
    e630:	3201      	adds	r2, #1
    e632:	601a      	str	r2, [r3, #0]
    e634:	e021      	b.n	e67a <__gethex+0x3c8>
    e636:	2200      	movs	r2, #0
    e638:	c304      	stmia	r3!, {r2}
    e63a:	4299      	cmp	r1, r3
    e63c:	d8f5      	bhi.n	e62a <__gethex+0x378>
    e63e:	68ab      	ldr	r3, [r5, #8]
    e640:	429c      	cmp	r4, r3
    e642:	db12      	blt.n	e66a <__gethex+0x3b8>
    e644:	686b      	ldr	r3, [r5, #4]
    e646:	9805      	ldr	r0, [sp, #20]
    e648:	1c59      	adds	r1, r3, #1
    e64a:	f000 f93f 	bl	e8cc <_Balloc>
    e64e:	1c29      	adds	r1, r5, #0
    e650:	692b      	ldr	r3, [r5, #16]
    e652:	9004      	str	r0, [sp, #16]
    e654:	1c9a      	adds	r2, r3, #2
    e656:	310c      	adds	r1, #12
    e658:	0092      	lsls	r2, r2, #2
    e65a:	300c      	adds	r0, #12
    e65c:	f7fc f9bf 	bl	a9de <memcpy>
    e660:	1c29      	adds	r1, r5, #0
    e662:	9805      	ldr	r0, [sp, #20]
    e664:	f000 f96a 	bl	e93c <_Bfree>
    e668:	9d04      	ldr	r5, [sp, #16]
    e66a:	692b      	ldr	r3, [r5, #16]
    e66c:	1c5a      	adds	r2, r3, #1
    e66e:	612a      	str	r2, [r5, #16]
    e670:	2201      	movs	r2, #1
    e672:	3304      	adds	r3, #4
    e674:	009b      	lsls	r3, r3, #2
    e676:	18eb      	adds	r3, r5, r3
    e678:	605a      	str	r2, [r3, #4]
    e67a:	1c2b      	adds	r3, r5, #0
    e67c:	3314      	adds	r3, #20
    e67e:	2e02      	cmp	r6, #2
    e680:	d111      	bne.n	e6a6 <__gethex+0x3f4>
    e682:	9a02      	ldr	r2, [sp, #8]
    e684:	9901      	ldr	r1, [sp, #4]
    e686:	6812      	ldr	r2, [r2, #0]
    e688:	3a01      	subs	r2, #1
    e68a:	4291      	cmp	r1, r2
    e68c:	d12a      	bne.n	e6e4 <__gethex+0x432>
    e68e:	114a      	asrs	r2, r1, #5
    e690:	211f      	movs	r1, #31
    e692:	9801      	ldr	r0, [sp, #4]
    e694:	0092      	lsls	r2, r2, #2
    e696:	4001      	ands	r1, r0
    e698:	2001      	movs	r0, #1
    e69a:	1c04      	adds	r4, r0, #0
    e69c:	408c      	lsls	r4, r1
    e69e:	58d3      	ldr	r3, [r2, r3]
    e6a0:	4223      	tst	r3, r4
    e6a2:	d01f      	beq.n	e6e4 <__gethex+0x432>
    e6a4:	e00c      	b.n	e6c0 <__gethex+0x40e>
    e6a6:	692a      	ldr	r2, [r5, #16]
    e6a8:	42a2      	cmp	r2, r4
    e6aa:	dd0b      	ble.n	e6c4 <__gethex+0x412>
    e6ac:	1c28      	adds	r0, r5, #0
    e6ae:	2101      	movs	r1, #1
    e6b0:	f7ff fdb6 	bl	e220 <rshift>
    e6b4:	9b02      	ldr	r3, [sp, #8]
    e6b6:	3701      	adds	r7, #1
    e6b8:	689b      	ldr	r3, [r3, #8]
    e6ba:	429f      	cmp	r7, r3
    e6bc:	dd00      	ble.n	e6c0 <__gethex+0x40e>
    e6be:	e72b      	b.n	e518 <__gethex+0x266>
    e6c0:	2601      	movs	r6, #1
    e6c2:	e00f      	b.n	e6e4 <__gethex+0x432>
    e6c4:	241f      	movs	r4, #31
    e6c6:	9a01      	ldr	r2, [sp, #4]
    e6c8:	2601      	movs	r6, #1
    e6ca:	4022      	ands	r2, r4
    e6cc:	1e14      	subs	r4, r2, #0
    e6ce:	d009      	beq.n	e6e4 <__gethex+0x432>
    e6d0:	9a03      	ldr	r2, [sp, #12]
    e6d2:	189b      	adds	r3, r3, r2
    e6d4:	3b04      	subs	r3, #4
    e6d6:	6818      	ldr	r0, [r3, #0]
    e6d8:	f000 f9c5 	bl	ea66 <__hi0bits>
    e6dc:	2120      	movs	r1, #32
    e6de:	1b0c      	subs	r4, r1, r4
    e6e0:	42a0      	cmp	r0, r4
    e6e2:	dbe3      	blt.n	e6ac <__gethex+0x3fa>
    e6e4:	2320      	movs	r3, #32
    e6e6:	e000      	b.n	e6ea <__gethex+0x438>
    e6e8:	2310      	movs	r3, #16
    e6ea:	431e      	orrs	r6, r3
    e6ec:	1c30      	adds	r0, r6, #0
    e6ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e6f0:	601d      	str	r5, [r3, #0]
    e6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6f4:	601f      	str	r7, [r3, #0]
    e6f6:	b00d      	add	sp, #52	; 0x34
    e6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e6fa <L_shift>:
    e6fa:	2308      	movs	r3, #8
    e6fc:	b570      	push	{r4, r5, r6, lr}
    e6fe:	2520      	movs	r5, #32
    e700:	1a9a      	subs	r2, r3, r2
    e702:	0092      	lsls	r2, r2, #2
    e704:	1aad      	subs	r5, r5, r2
    e706:	6843      	ldr	r3, [r0, #4]
    e708:	6806      	ldr	r6, [r0, #0]
    e70a:	1c1c      	adds	r4, r3, #0
    e70c:	40ac      	lsls	r4, r5
    e70e:	40d3      	lsrs	r3, r2
    e710:	4334      	orrs	r4, r6
    e712:	6004      	str	r4, [r0, #0]
    e714:	6043      	str	r3, [r0, #4]
    e716:	3004      	adds	r0, #4
    e718:	4288      	cmp	r0, r1
    e71a:	d3f4      	bcc.n	e706 <L_shift+0xc>
    e71c:	bd70      	pop	{r4, r5, r6, pc}

0000e71e <__hexnan>:
    e71e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e720:	b089      	sub	sp, #36	; 0x24
    e722:	9200      	str	r2, [sp, #0]
    e724:	680a      	ldr	r2, [r1, #0]
    e726:	9900      	ldr	r1, [sp, #0]
    e728:	1153      	asrs	r3, r2, #5
    e72a:	009b      	lsls	r3, r3, #2
    e72c:	18cb      	adds	r3, r1, r3
    e72e:	9302      	str	r3, [sp, #8]
    e730:	231f      	movs	r3, #31
    e732:	401a      	ands	r2, r3
    e734:	9007      	str	r0, [sp, #28]
    e736:	9205      	str	r2, [sp, #20]
    e738:	d002      	beq.n	e740 <__hexnan+0x22>
    e73a:	9b02      	ldr	r3, [sp, #8]
    e73c:	3304      	adds	r3, #4
    e73e:	9302      	str	r3, [sp, #8]
    e740:	9b02      	ldr	r3, [sp, #8]
    e742:	2500      	movs	r5, #0
    e744:	1f1e      	subs	r6, r3, #4
    e746:	1c37      	adds	r7, r6, #0
    e748:	1c34      	adds	r4, r6, #0
    e74a:	9b07      	ldr	r3, [sp, #28]
    e74c:	6035      	str	r5, [r6, #0]
    e74e:	681b      	ldr	r3, [r3, #0]
    e750:	9506      	str	r5, [sp, #24]
    e752:	9303      	str	r3, [sp, #12]
    e754:	9501      	str	r5, [sp, #4]
    e756:	9b03      	ldr	r3, [sp, #12]
    e758:	3301      	adds	r3, #1
    e75a:	9303      	str	r3, [sp, #12]
    e75c:	781b      	ldrb	r3, [r3, #0]
    e75e:	9304      	str	r3, [sp, #16]
    e760:	2b00      	cmp	r3, #0
    e762:	d03b      	beq.n	e7dc <__hexnan+0xbe>
    e764:	9804      	ldr	r0, [sp, #16]
    e766:	f7ff fd8f 	bl	e288 <__hexdig_fun>
    e76a:	2800      	cmp	r0, #0
    e76c:	d122      	bne.n	e7b4 <__hexnan+0x96>
    e76e:	9b04      	ldr	r3, [sp, #16]
    e770:	2b20      	cmp	r3, #32
    e772:	d817      	bhi.n	e7a4 <__hexnan+0x86>
    e774:	9b06      	ldr	r3, [sp, #24]
    e776:	9a01      	ldr	r2, [sp, #4]
    e778:	4293      	cmp	r3, r2
    e77a:	daec      	bge.n	e756 <__hexnan+0x38>
    e77c:	42bc      	cmp	r4, r7
    e77e:	d206      	bcs.n	e78e <__hexnan+0x70>
    e780:	2d07      	cmp	r5, #7
    e782:	dc04      	bgt.n	e78e <__hexnan+0x70>
    e784:	1c20      	adds	r0, r4, #0
    e786:	1c39      	adds	r1, r7, #0
    e788:	1c2a      	adds	r2, r5, #0
    e78a:	f7ff ffb6 	bl	e6fa <L_shift>
    e78e:	9b00      	ldr	r3, [sp, #0]
    e790:	2508      	movs	r5, #8
    e792:	429c      	cmp	r4, r3
    e794:	d9df      	bls.n	e756 <__hexnan+0x38>
    e796:	2500      	movs	r5, #0
    e798:	9b01      	ldr	r3, [sp, #4]
    e79a:	1f27      	subs	r7, r4, #4
    e79c:	603d      	str	r5, [r7, #0]
    e79e:	9306      	str	r3, [sp, #24]
    e7a0:	1c3c      	adds	r4, r7, #0
    e7a2:	e7d8      	b.n	e756 <__hexnan+0x38>
    e7a4:	9b04      	ldr	r3, [sp, #16]
    e7a6:	2b29      	cmp	r3, #41	; 0x29
    e7a8:	d14c      	bne.n	e844 <__hexnan+0x126>
    e7aa:	9b03      	ldr	r3, [sp, #12]
    e7ac:	9a07      	ldr	r2, [sp, #28]
    e7ae:	3301      	adds	r3, #1
    e7b0:	6013      	str	r3, [r2, #0]
    e7b2:	e013      	b.n	e7dc <__hexnan+0xbe>
    e7b4:	9b01      	ldr	r3, [sp, #4]
    e7b6:	3501      	adds	r5, #1
    e7b8:	3301      	adds	r3, #1
    e7ba:	9301      	str	r3, [sp, #4]
    e7bc:	2d08      	cmp	r5, #8
    e7be:	dd06      	ble.n	e7ce <__hexnan+0xb0>
    e7c0:	9b00      	ldr	r3, [sp, #0]
    e7c2:	429c      	cmp	r4, r3
    e7c4:	d9c7      	bls.n	e756 <__hexnan+0x38>
    e7c6:	2300      	movs	r3, #0
    e7c8:	2501      	movs	r5, #1
    e7ca:	3c04      	subs	r4, #4
    e7cc:	6023      	str	r3, [r4, #0]
    e7ce:	6823      	ldr	r3, [r4, #0]
    e7d0:	011a      	lsls	r2, r3, #4
    e7d2:	230f      	movs	r3, #15
    e7d4:	4018      	ands	r0, r3
    e7d6:	4310      	orrs	r0, r2
    e7d8:	6020      	str	r0, [r4, #0]
    e7da:	e7bc      	b.n	e756 <__hexnan+0x38>
    e7dc:	9b01      	ldr	r3, [sp, #4]
    e7de:	2b00      	cmp	r3, #0
    e7e0:	d030      	beq.n	e844 <__hexnan+0x126>
    e7e2:	42bc      	cmp	r4, r7
    e7e4:	d206      	bcs.n	e7f4 <__hexnan+0xd6>
    e7e6:	2d07      	cmp	r5, #7
    e7e8:	dc04      	bgt.n	e7f4 <__hexnan+0xd6>
    e7ea:	1c20      	adds	r0, r4, #0
    e7ec:	1c39      	adds	r1, r7, #0
    e7ee:	1c2a      	adds	r2, r5, #0
    e7f0:	f7ff ff83 	bl	e6fa <L_shift>
    e7f4:	9b00      	ldr	r3, [sp, #0]
    e7f6:	429c      	cmp	r4, r3
    e7f8:	d90a      	bls.n	e810 <__hexnan+0xf2>
    e7fa:	3304      	adds	r3, #4
    e7fc:	cc02      	ldmia	r4!, {r1}
    e7fe:	1f1a      	subs	r2, r3, #4
    e800:	6011      	str	r1, [r2, #0]
    e802:	42a6      	cmp	r6, r4
    e804:	d2f9      	bcs.n	e7fa <__hexnan+0xdc>
    e806:	2200      	movs	r2, #0
    e808:	c304      	stmia	r3!, {r2}
    e80a:	429e      	cmp	r6, r3
    e80c:	d2fb      	bcs.n	e806 <__hexnan+0xe8>
    e80e:	e00e      	b.n	e82e <__hexnan+0x110>
    e810:	9b05      	ldr	r3, [sp, #20]
    e812:	2b00      	cmp	r3, #0
    e814:	d00b      	beq.n	e82e <__hexnan+0x110>
    e816:	2220      	movs	r2, #32
    e818:	9905      	ldr	r1, [sp, #20]
    e81a:	9b02      	ldr	r3, [sp, #8]
    e81c:	1a52      	subs	r2, r2, r1
    e81e:	2101      	movs	r1, #1
    e820:	4249      	negs	r1, r1
    e822:	40d1      	lsrs	r1, r2
    e824:	1c0a      	adds	r2, r1, #0
    e826:	3b04      	subs	r3, #4
    e828:	6819      	ldr	r1, [r3, #0]
    e82a:	400a      	ands	r2, r1
    e82c:	601a      	str	r2, [r3, #0]
    e82e:	6833      	ldr	r3, [r6, #0]
    e830:	2b00      	cmp	r3, #0
    e832:	d109      	bne.n	e848 <__hexnan+0x12a>
    e834:	9b00      	ldr	r3, [sp, #0]
    e836:	429e      	cmp	r6, r3
    e838:	d102      	bne.n	e840 <__hexnan+0x122>
    e83a:	2301      	movs	r3, #1
    e83c:	6033      	str	r3, [r6, #0]
    e83e:	e003      	b.n	e848 <__hexnan+0x12a>
    e840:	3e04      	subs	r6, #4
    e842:	e7f4      	b.n	e82e <__hexnan+0x110>
    e844:	2004      	movs	r0, #4
    e846:	e000      	b.n	e84a <__hexnan+0x12c>
    e848:	2005      	movs	r0, #5
    e84a:	b009      	add	sp, #36	; 0x24
    e84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000e850 <_isatty_r>:
    e850:	b538      	push	{r3, r4, r5, lr}
    e852:	2300      	movs	r3, #0
    e854:	4c06      	ldr	r4, [pc, #24]	; (e870 <_isatty_r+0x20>)
    e856:	1c05      	adds	r5, r0, #0
    e858:	1c08      	adds	r0, r1, #0
    e85a:	6023      	str	r3, [r4, #0]
    e85c:	f7f5 feb4 	bl	45c8 <_isatty>
    e860:	1c43      	adds	r3, r0, #1
    e862:	d103      	bne.n	e86c <_isatty_r+0x1c>
    e864:	6823      	ldr	r3, [r4, #0]
    e866:	2b00      	cmp	r3, #0
    e868:	d000      	beq.n	e86c <_isatty_r+0x1c>
    e86a:	602b      	str	r3, [r5, #0]
    e86c:	bd38      	pop	{r3, r4, r5, pc}
    e86e:	46c0      	nop			; (mov r8, r8)
    e870:	20004518 	.word	0x20004518

0000e874 <_localeconv_r>:
    e874:	4800      	ldr	r0, [pc, #0]	; (e878 <_localeconv_r+0x4>)
    e876:	4770      	bx	lr
    e878:	2000013c 	.word	0x2000013c

0000e87c <_lseek_r>:
    e87c:	b538      	push	{r3, r4, r5, lr}
    e87e:	1c05      	adds	r5, r0, #0
    e880:	2000      	movs	r0, #0
    e882:	4c07      	ldr	r4, [pc, #28]	; (e8a0 <_lseek_r+0x24>)
    e884:	6020      	str	r0, [r4, #0]
    e886:	1c08      	adds	r0, r1, #0
    e888:	1c11      	adds	r1, r2, #0
    e88a:	1c1a      	adds	r2, r3, #0
    e88c:	f7f5 feb0 	bl	45f0 <_lseek>
    e890:	1c43      	adds	r3, r0, #1
    e892:	d103      	bne.n	e89c <_lseek_r+0x20>
    e894:	6823      	ldr	r3, [r4, #0]
    e896:	2b00      	cmp	r3, #0
    e898:	d000      	beq.n	e89c <_lseek_r+0x20>
    e89a:	602b      	str	r3, [r5, #0]
    e89c:	bd38      	pop	{r3, r4, r5, pc}
    e89e:	46c0      	nop			; (mov r8, r8)
    e8a0:	20004518 	.word	0x20004518

0000e8a4 <memmove>:
    e8a4:	b510      	push	{r4, lr}
    e8a6:	4281      	cmp	r1, r0
    e8a8:	d208      	bcs.n	e8bc <memmove+0x18>
    e8aa:	188b      	adds	r3, r1, r2
    e8ac:	4298      	cmp	r0, r3
    e8ae:	d205      	bcs.n	e8bc <memmove+0x18>
    e8b0:	1a9b      	subs	r3, r3, r2
    e8b2:	3a01      	subs	r2, #1
    e8b4:	d309      	bcc.n	e8ca <memmove+0x26>
    e8b6:	5c99      	ldrb	r1, [r3, r2]
    e8b8:	5481      	strb	r1, [r0, r2]
    e8ba:	e7fa      	b.n	e8b2 <memmove+0xe>
    e8bc:	2300      	movs	r3, #0
    e8be:	4293      	cmp	r3, r2
    e8c0:	d003      	beq.n	e8ca <memmove+0x26>
    e8c2:	5ccc      	ldrb	r4, [r1, r3]
    e8c4:	54c4      	strb	r4, [r0, r3]
    e8c6:	3301      	adds	r3, #1
    e8c8:	e7f9      	b.n	e8be <memmove+0x1a>
    e8ca:	bd10      	pop	{r4, pc}

0000e8cc <_Balloc>:
    e8cc:	b570      	push	{r4, r5, r6, lr}
    e8ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
    e8d0:	1c04      	adds	r4, r0, #0
    e8d2:	1c0d      	adds	r5, r1, #0
    e8d4:	2e00      	cmp	r6, #0
    e8d6:	d107      	bne.n	e8e8 <_Balloc+0x1c>
    e8d8:	2010      	movs	r0, #16
    e8da:	f7fc f861 	bl	a9a0 <malloc>
    e8de:	6260      	str	r0, [r4, #36]	; 0x24
    e8e0:	6046      	str	r6, [r0, #4]
    e8e2:	6086      	str	r6, [r0, #8]
    e8e4:	6006      	str	r6, [r0, #0]
    e8e6:	60c6      	str	r6, [r0, #12]
    e8e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e8ea:	68f3      	ldr	r3, [r6, #12]
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d009      	beq.n	e904 <_Balloc+0x38>
    e8f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e8f2:	00ab      	lsls	r3, r5, #2
    e8f4:	68d2      	ldr	r2, [r2, #12]
    e8f6:	18d3      	adds	r3, r2, r3
    e8f8:	6818      	ldr	r0, [r3, #0]
    e8fa:	2800      	cmp	r0, #0
    e8fc:	d00e      	beq.n	e91c <_Balloc+0x50>
    e8fe:	6802      	ldr	r2, [r0, #0]
    e900:	601a      	str	r2, [r3, #0]
    e902:	e017      	b.n	e934 <_Balloc+0x68>
    e904:	1c20      	adds	r0, r4, #0
    e906:	2104      	movs	r1, #4
    e908:	2221      	movs	r2, #33	; 0x21
    e90a:	f000 fbe2 	bl	f0d2 <_calloc_r>
    e90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e910:	60f0      	str	r0, [r6, #12]
    e912:	68db      	ldr	r3, [r3, #12]
    e914:	2b00      	cmp	r3, #0
    e916:	d1eb      	bne.n	e8f0 <_Balloc+0x24>
    e918:	2000      	movs	r0, #0
    e91a:	e00e      	b.n	e93a <_Balloc+0x6e>
    e91c:	2101      	movs	r1, #1
    e91e:	1c0e      	adds	r6, r1, #0
    e920:	40ae      	lsls	r6, r5
    e922:	1d72      	adds	r2, r6, #5
    e924:	0092      	lsls	r2, r2, #2
    e926:	1c20      	adds	r0, r4, #0
    e928:	f000 fbd3 	bl	f0d2 <_calloc_r>
    e92c:	2800      	cmp	r0, #0
    e92e:	d0f3      	beq.n	e918 <_Balloc+0x4c>
    e930:	6045      	str	r5, [r0, #4]
    e932:	6086      	str	r6, [r0, #8]
    e934:	2300      	movs	r3, #0
    e936:	6103      	str	r3, [r0, #16]
    e938:	60c3      	str	r3, [r0, #12]
    e93a:	bd70      	pop	{r4, r5, r6, pc}

0000e93c <_Bfree>:
    e93c:	b570      	push	{r4, r5, r6, lr}
    e93e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    e940:	1c06      	adds	r6, r0, #0
    e942:	1c0c      	adds	r4, r1, #0
    e944:	2d00      	cmp	r5, #0
    e946:	d107      	bne.n	e958 <_Bfree+0x1c>
    e948:	2010      	movs	r0, #16
    e94a:	f7fc f829 	bl	a9a0 <malloc>
    e94e:	6270      	str	r0, [r6, #36]	; 0x24
    e950:	6045      	str	r5, [r0, #4]
    e952:	6085      	str	r5, [r0, #8]
    e954:	6005      	str	r5, [r0, #0]
    e956:	60c5      	str	r5, [r0, #12]
    e958:	2c00      	cmp	r4, #0
    e95a:	d007      	beq.n	e96c <_Bfree+0x30>
    e95c:	6a72      	ldr	r2, [r6, #36]	; 0x24
    e95e:	6863      	ldr	r3, [r4, #4]
    e960:	68d2      	ldr	r2, [r2, #12]
    e962:	009b      	lsls	r3, r3, #2
    e964:	18d3      	adds	r3, r2, r3
    e966:	681a      	ldr	r2, [r3, #0]
    e968:	6022      	str	r2, [r4, #0]
    e96a:	601c      	str	r4, [r3, #0]
    e96c:	bd70      	pop	{r4, r5, r6, pc}

0000e96e <__multadd>:
    e96e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e970:	1c1e      	adds	r6, r3, #0
    e972:	2314      	movs	r3, #20
    e974:	469c      	mov	ip, r3
    e976:	1c07      	adds	r7, r0, #0
    e978:	1c0c      	adds	r4, r1, #0
    e97a:	2000      	movs	r0, #0
    e97c:	690d      	ldr	r5, [r1, #16]
    e97e:	448c      	add	ip, r1
    e980:	4663      	mov	r3, ip
    e982:	8819      	ldrh	r1, [r3, #0]
    e984:	681b      	ldr	r3, [r3, #0]
    e986:	4351      	muls	r1, r2
    e988:	0c1b      	lsrs	r3, r3, #16
    e98a:	4353      	muls	r3, r2
    e98c:	1989      	adds	r1, r1, r6
    e98e:	0c0e      	lsrs	r6, r1, #16
    e990:	18f3      	adds	r3, r6, r3
    e992:	b289      	uxth	r1, r1
    e994:	0c1e      	lsrs	r6, r3, #16
    e996:	041b      	lsls	r3, r3, #16
    e998:	185b      	adds	r3, r3, r1
    e99a:	4661      	mov	r1, ip
    e99c:	3001      	adds	r0, #1
    e99e:	c108      	stmia	r1!, {r3}
    e9a0:	468c      	mov	ip, r1
    e9a2:	42a8      	cmp	r0, r5
    e9a4:	dbec      	blt.n	e980 <__multadd+0x12>
    e9a6:	2e00      	cmp	r6, #0
    e9a8:	d01b      	beq.n	e9e2 <__multadd+0x74>
    e9aa:	68a3      	ldr	r3, [r4, #8]
    e9ac:	429d      	cmp	r5, r3
    e9ae:	db12      	blt.n	e9d6 <__multadd+0x68>
    e9b0:	6863      	ldr	r3, [r4, #4]
    e9b2:	1c38      	adds	r0, r7, #0
    e9b4:	1c59      	adds	r1, r3, #1
    e9b6:	f7ff ff89 	bl	e8cc <_Balloc>
    e9ba:	1c21      	adds	r1, r4, #0
    e9bc:	6923      	ldr	r3, [r4, #16]
    e9be:	9001      	str	r0, [sp, #4]
    e9c0:	1c9a      	adds	r2, r3, #2
    e9c2:	310c      	adds	r1, #12
    e9c4:	0092      	lsls	r2, r2, #2
    e9c6:	300c      	adds	r0, #12
    e9c8:	f7fc f809 	bl	a9de <memcpy>
    e9cc:	1c21      	adds	r1, r4, #0
    e9ce:	1c38      	adds	r0, r7, #0
    e9d0:	f7ff ffb4 	bl	e93c <_Bfree>
    e9d4:	9c01      	ldr	r4, [sp, #4]
    e9d6:	1d2b      	adds	r3, r5, #4
    e9d8:	009b      	lsls	r3, r3, #2
    e9da:	18e3      	adds	r3, r4, r3
    e9dc:	3501      	adds	r5, #1
    e9de:	605e      	str	r6, [r3, #4]
    e9e0:	6125      	str	r5, [r4, #16]
    e9e2:	1c20      	adds	r0, r4, #0
    e9e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e9e6 <__s2b>:
    e9e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e9e8:	1c06      	adds	r6, r0, #0
    e9ea:	1c18      	adds	r0, r3, #0
    e9ec:	1c0c      	adds	r4, r1, #0
    e9ee:	3008      	adds	r0, #8
    e9f0:	2109      	movs	r1, #9
    e9f2:	9301      	str	r3, [sp, #4]
    e9f4:	1c15      	adds	r5, r2, #0
    e9f6:	f7f8 fc15 	bl	7224 <__aeabi_idiv>
    e9fa:	2301      	movs	r3, #1
    e9fc:	2100      	movs	r1, #0
    e9fe:	4298      	cmp	r0, r3
    ea00:	dd02      	ble.n	ea08 <__s2b+0x22>
    ea02:	005b      	lsls	r3, r3, #1
    ea04:	3101      	adds	r1, #1
    ea06:	e7fa      	b.n	e9fe <__s2b+0x18>
    ea08:	1c30      	adds	r0, r6, #0
    ea0a:	f7ff ff5f 	bl	e8cc <_Balloc>
    ea0e:	9b08      	ldr	r3, [sp, #32]
    ea10:	1c01      	adds	r1, r0, #0
    ea12:	6143      	str	r3, [r0, #20]
    ea14:	2301      	movs	r3, #1
    ea16:	6103      	str	r3, [r0, #16]
    ea18:	2d09      	cmp	r5, #9
    ea1a:	dd12      	ble.n	ea42 <__s2b+0x5c>
    ea1c:	1c23      	adds	r3, r4, #0
    ea1e:	3309      	adds	r3, #9
    ea20:	1c1f      	adds	r7, r3, #0
    ea22:	9300      	str	r3, [sp, #0]
    ea24:	1964      	adds	r4, r4, r5
    ea26:	783b      	ldrb	r3, [r7, #0]
    ea28:	1c30      	adds	r0, r6, #0
    ea2a:	3b30      	subs	r3, #48	; 0x30
    ea2c:	220a      	movs	r2, #10
    ea2e:	f7ff ff9e 	bl	e96e <__multadd>
    ea32:	3701      	adds	r7, #1
    ea34:	1c01      	adds	r1, r0, #0
    ea36:	42a7      	cmp	r7, r4
    ea38:	d1f5      	bne.n	ea26 <__s2b+0x40>
    ea3a:	9b00      	ldr	r3, [sp, #0]
    ea3c:	195c      	adds	r4, r3, r5
    ea3e:	3c08      	subs	r4, #8
    ea40:	e001      	b.n	ea46 <__s2b+0x60>
    ea42:	2509      	movs	r5, #9
    ea44:	340a      	adds	r4, #10
    ea46:	1c2f      	adds	r7, r5, #0
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	429f      	cmp	r7, r3
    ea4c:	da09      	bge.n	ea62 <__s2b+0x7c>
    ea4e:	1b63      	subs	r3, r4, r5
    ea50:	5ddb      	ldrb	r3, [r3, r7]
    ea52:	1c30      	adds	r0, r6, #0
    ea54:	3b30      	subs	r3, #48	; 0x30
    ea56:	220a      	movs	r2, #10
    ea58:	f7ff ff89 	bl	e96e <__multadd>
    ea5c:	3701      	adds	r7, #1
    ea5e:	1c01      	adds	r1, r0, #0
    ea60:	e7f2      	b.n	ea48 <__s2b+0x62>
    ea62:	1c08      	adds	r0, r1, #0
    ea64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ea66 <__hi0bits>:
    ea66:	2200      	movs	r2, #0
    ea68:	1c03      	adds	r3, r0, #0
    ea6a:	0c01      	lsrs	r1, r0, #16
    ea6c:	4291      	cmp	r1, r2
    ea6e:	d101      	bne.n	ea74 <__hi0bits+0xe>
    ea70:	0403      	lsls	r3, r0, #16
    ea72:	3210      	adds	r2, #16
    ea74:	0e19      	lsrs	r1, r3, #24
    ea76:	d101      	bne.n	ea7c <__hi0bits+0x16>
    ea78:	3208      	adds	r2, #8
    ea7a:	021b      	lsls	r3, r3, #8
    ea7c:	0f19      	lsrs	r1, r3, #28
    ea7e:	d101      	bne.n	ea84 <__hi0bits+0x1e>
    ea80:	3204      	adds	r2, #4
    ea82:	011b      	lsls	r3, r3, #4
    ea84:	0f99      	lsrs	r1, r3, #30
    ea86:	d101      	bne.n	ea8c <__hi0bits+0x26>
    ea88:	3202      	adds	r2, #2
    ea8a:	009b      	lsls	r3, r3, #2
    ea8c:	1c10      	adds	r0, r2, #0
    ea8e:	2b00      	cmp	r3, #0
    ea90:	db03      	blt.n	ea9a <__hi0bits+0x34>
    ea92:	2020      	movs	r0, #32
    ea94:	005b      	lsls	r3, r3, #1
    ea96:	d500      	bpl.n	ea9a <__hi0bits+0x34>
    ea98:	1c50      	adds	r0, r2, #1
    ea9a:	4770      	bx	lr

0000ea9c <__lo0bits>:
    ea9c:	2207      	movs	r2, #7
    ea9e:	6803      	ldr	r3, [r0, #0]
    eaa0:	b510      	push	{r4, lr}
    eaa2:	1c01      	adds	r1, r0, #0
    eaa4:	401a      	ands	r2, r3
    eaa6:	d00c      	beq.n	eac2 <__lo0bits+0x26>
    eaa8:	2401      	movs	r4, #1
    eaaa:	2000      	movs	r0, #0
    eaac:	4223      	tst	r3, r4
    eaae:	d123      	bne.n	eaf8 <__lo0bits+0x5c>
    eab0:	2202      	movs	r2, #2
    eab2:	4213      	tst	r3, r2
    eab4:	d003      	beq.n	eabe <__lo0bits+0x22>
    eab6:	40e3      	lsrs	r3, r4
    eab8:	1c20      	adds	r0, r4, #0
    eaba:	600b      	str	r3, [r1, #0]
    eabc:	e01c      	b.n	eaf8 <__lo0bits+0x5c>
    eabe:	089b      	lsrs	r3, r3, #2
    eac0:	e018      	b.n	eaf4 <__lo0bits+0x58>
    eac2:	b298      	uxth	r0, r3
    eac4:	2800      	cmp	r0, #0
    eac6:	d101      	bne.n	eacc <__lo0bits+0x30>
    eac8:	2210      	movs	r2, #16
    eaca:	0c1b      	lsrs	r3, r3, #16
    eacc:	b2d8      	uxtb	r0, r3
    eace:	2800      	cmp	r0, #0
    ead0:	d101      	bne.n	ead6 <__lo0bits+0x3a>
    ead2:	3208      	adds	r2, #8
    ead4:	0a1b      	lsrs	r3, r3, #8
    ead6:	0718      	lsls	r0, r3, #28
    ead8:	d101      	bne.n	eade <__lo0bits+0x42>
    eada:	3204      	adds	r2, #4
    eadc:	091b      	lsrs	r3, r3, #4
    eade:	0798      	lsls	r0, r3, #30
    eae0:	d101      	bne.n	eae6 <__lo0bits+0x4a>
    eae2:	3202      	adds	r2, #2
    eae4:	089b      	lsrs	r3, r3, #2
    eae6:	07d8      	lsls	r0, r3, #31
    eae8:	d404      	bmi.n	eaf4 <__lo0bits+0x58>
    eaea:	085b      	lsrs	r3, r3, #1
    eaec:	2020      	movs	r0, #32
    eaee:	2b00      	cmp	r3, #0
    eaf0:	d002      	beq.n	eaf8 <__lo0bits+0x5c>
    eaf2:	3201      	adds	r2, #1
    eaf4:	1c10      	adds	r0, r2, #0
    eaf6:	600b      	str	r3, [r1, #0]
    eaf8:	bd10      	pop	{r4, pc}

0000eafa <__i2b>:
    eafa:	b510      	push	{r4, lr}
    eafc:	1c0c      	adds	r4, r1, #0
    eafe:	2101      	movs	r1, #1
    eb00:	f7ff fee4 	bl	e8cc <_Balloc>
    eb04:	2301      	movs	r3, #1
    eb06:	6144      	str	r4, [r0, #20]
    eb08:	6103      	str	r3, [r0, #16]
    eb0a:	bd10      	pop	{r4, pc}

0000eb0c <__multiply>:
    eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb0e:	690b      	ldr	r3, [r1, #16]
    eb10:	1c14      	adds	r4, r2, #0
    eb12:	6912      	ldr	r2, [r2, #16]
    eb14:	b089      	sub	sp, #36	; 0x24
    eb16:	1c0d      	adds	r5, r1, #0
    eb18:	4293      	cmp	r3, r2
    eb1a:	da01      	bge.n	eb20 <__multiply+0x14>
    eb1c:	1c25      	adds	r5, r4, #0
    eb1e:	1c0c      	adds	r4, r1, #0
    eb20:	692f      	ldr	r7, [r5, #16]
    eb22:	6926      	ldr	r6, [r4, #16]
    eb24:	68aa      	ldr	r2, [r5, #8]
    eb26:	19bb      	adds	r3, r7, r6
    eb28:	6869      	ldr	r1, [r5, #4]
    eb2a:	9300      	str	r3, [sp, #0]
    eb2c:	4293      	cmp	r3, r2
    eb2e:	dd00      	ble.n	eb32 <__multiply+0x26>
    eb30:	3101      	adds	r1, #1
    eb32:	f7ff fecb 	bl	e8cc <_Balloc>
    eb36:	1c01      	adds	r1, r0, #0
    eb38:	9b00      	ldr	r3, [sp, #0]
    eb3a:	3114      	adds	r1, #20
    eb3c:	4684      	mov	ip, r0
    eb3e:	0098      	lsls	r0, r3, #2
    eb40:	1c0b      	adds	r3, r1, #0
    eb42:	1808      	adds	r0, r1, r0
    eb44:	4283      	cmp	r3, r0
    eb46:	d202      	bcs.n	eb4e <__multiply+0x42>
    eb48:	2200      	movs	r2, #0
    eb4a:	c304      	stmia	r3!, {r2}
    eb4c:	e7fa      	b.n	eb44 <__multiply+0x38>
    eb4e:	3514      	adds	r5, #20
    eb50:	00bf      	lsls	r7, r7, #2
    eb52:	19eb      	adds	r3, r5, r7
    eb54:	3414      	adds	r4, #20
    eb56:	00b6      	lsls	r6, r6, #2
    eb58:	9304      	str	r3, [sp, #16]
    eb5a:	19a3      	adds	r3, r4, r6
    eb5c:	9502      	str	r5, [sp, #8]
    eb5e:	9306      	str	r3, [sp, #24]
    eb60:	9b06      	ldr	r3, [sp, #24]
    eb62:	429c      	cmp	r4, r3
    eb64:	d256      	bcs.n	ec14 <__multiply+0x108>
    eb66:	8823      	ldrh	r3, [r4, #0]
    eb68:	9303      	str	r3, [sp, #12]
    eb6a:	2b00      	cmp	r3, #0
    eb6c:	d022      	beq.n	ebb4 <__multiply+0xa8>
    eb6e:	1c0e      	adds	r6, r1, #0
    eb70:	2700      	movs	r7, #0
    eb72:	9b02      	ldr	r3, [sp, #8]
    eb74:	9301      	str	r3, [sp, #4]
    eb76:	9b01      	ldr	r3, [sp, #4]
    eb78:	9d03      	ldr	r5, [sp, #12]
    eb7a:	cb04      	ldmia	r3!, {r2}
    eb7c:	9605      	str	r6, [sp, #20]
    eb7e:	9301      	str	r3, [sp, #4]
    eb80:	8833      	ldrh	r3, [r6, #0]
    eb82:	9307      	str	r3, [sp, #28]
    eb84:	b293      	uxth	r3, r2
    eb86:	436b      	muls	r3, r5
    eb88:	9d07      	ldr	r5, [sp, #28]
    eb8a:	0c12      	lsrs	r2, r2, #16
    eb8c:	18eb      	adds	r3, r5, r3
    eb8e:	6835      	ldr	r5, [r6, #0]
    eb90:	19db      	adds	r3, r3, r7
    eb92:	0c2f      	lsrs	r7, r5, #16
    eb94:	9d03      	ldr	r5, [sp, #12]
    eb96:	436a      	muls	r2, r5
    eb98:	18ba      	adds	r2, r7, r2
    eb9a:	0c1f      	lsrs	r7, r3, #16
    eb9c:	19d2      	adds	r2, r2, r7
    eb9e:	0c17      	lsrs	r7, r2, #16
    eba0:	b29b      	uxth	r3, r3
    eba2:	0412      	lsls	r2, r2, #16
    eba4:	4313      	orrs	r3, r2
    eba6:	c608      	stmia	r6!, {r3}
    eba8:	9a01      	ldr	r2, [sp, #4]
    ebaa:	9b04      	ldr	r3, [sp, #16]
    ebac:	429a      	cmp	r2, r3
    ebae:	d3e2      	bcc.n	eb76 <__multiply+0x6a>
    ebb0:	9b05      	ldr	r3, [sp, #20]
    ebb2:	605f      	str	r7, [r3, #4]
    ebb4:	6823      	ldr	r3, [r4, #0]
    ebb6:	0c1b      	lsrs	r3, r3, #16
    ebb8:	9301      	str	r3, [sp, #4]
    ebba:	d021      	beq.n	ec00 <__multiply+0xf4>
    ebbc:	2200      	movs	r2, #0
    ebbe:	1c0d      	adds	r5, r1, #0
    ebc0:	680b      	ldr	r3, [r1, #0]
    ebc2:	9f02      	ldr	r7, [sp, #8]
    ebc4:	9203      	str	r2, [sp, #12]
    ebc6:	883e      	ldrh	r6, [r7, #0]
    ebc8:	9a01      	ldr	r2, [sp, #4]
    ebca:	b29b      	uxth	r3, r3
    ebcc:	4356      	muls	r6, r2
    ebce:	682a      	ldr	r2, [r5, #0]
    ebd0:	9505      	str	r5, [sp, #20]
    ebd2:	0c12      	lsrs	r2, r2, #16
    ebd4:	18b2      	adds	r2, r6, r2
    ebd6:	9e03      	ldr	r6, [sp, #12]
    ebd8:	1992      	adds	r2, r2, r6
    ebda:	0416      	lsls	r6, r2, #16
    ebdc:	4333      	orrs	r3, r6
    ebde:	602b      	str	r3, [r5, #0]
    ebe0:	cf08      	ldmia	r7!, {r3}
    ebe2:	9e01      	ldr	r6, [sp, #4]
    ebe4:	0c1b      	lsrs	r3, r3, #16
    ebe6:	4373      	muls	r3, r6
    ebe8:	88ae      	ldrh	r6, [r5, #4]
    ebea:	0c12      	lsrs	r2, r2, #16
    ebec:	199b      	adds	r3, r3, r6
    ebee:	189b      	adds	r3, r3, r2
    ebf0:	0c1a      	lsrs	r2, r3, #16
    ebf2:	9203      	str	r2, [sp, #12]
    ebf4:	9a04      	ldr	r2, [sp, #16]
    ebf6:	3504      	adds	r5, #4
    ebf8:	42ba      	cmp	r2, r7
    ebfa:	d8e4      	bhi.n	ebc6 <__multiply+0xba>
    ebfc:	9a05      	ldr	r2, [sp, #20]
    ebfe:	6053      	str	r3, [r2, #4]
    ec00:	3404      	adds	r4, #4
    ec02:	3104      	adds	r1, #4
    ec04:	e7ac      	b.n	eb60 <__multiply+0x54>
    ec06:	3804      	subs	r0, #4
    ec08:	6803      	ldr	r3, [r0, #0]
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	d105      	bne.n	ec1a <__multiply+0x10e>
    ec0e:	9b00      	ldr	r3, [sp, #0]
    ec10:	3b01      	subs	r3, #1
    ec12:	9300      	str	r3, [sp, #0]
    ec14:	9b00      	ldr	r3, [sp, #0]
    ec16:	2b00      	cmp	r3, #0
    ec18:	dcf5      	bgt.n	ec06 <__multiply+0xfa>
    ec1a:	4663      	mov	r3, ip
    ec1c:	4660      	mov	r0, ip
    ec1e:	9a00      	ldr	r2, [sp, #0]
    ec20:	611a      	str	r2, [r3, #16]
    ec22:	b009      	add	sp, #36	; 0x24
    ec24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ec28 <__pow5mult>:
    ec28:	2303      	movs	r3, #3
    ec2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ec2c:	4013      	ands	r3, r2
    ec2e:	1c05      	adds	r5, r0, #0
    ec30:	1c0e      	adds	r6, r1, #0
    ec32:	1c14      	adds	r4, r2, #0
    ec34:	2b00      	cmp	r3, #0
    ec36:	d007      	beq.n	ec48 <__pow5mult+0x20>
    ec38:	4a22      	ldr	r2, [pc, #136]	; (ecc4 <__pow5mult+0x9c>)
    ec3a:	3b01      	subs	r3, #1
    ec3c:	009b      	lsls	r3, r3, #2
    ec3e:	589a      	ldr	r2, [r3, r2]
    ec40:	2300      	movs	r3, #0
    ec42:	f7ff fe94 	bl	e96e <__multadd>
    ec46:	1c06      	adds	r6, r0, #0
    ec48:	10a3      	asrs	r3, r4, #2
    ec4a:	9301      	str	r3, [sp, #4]
    ec4c:	d037      	beq.n	ecbe <__pow5mult+0x96>
    ec4e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    ec50:	2c00      	cmp	r4, #0
    ec52:	d107      	bne.n	ec64 <__pow5mult+0x3c>
    ec54:	2010      	movs	r0, #16
    ec56:	f7fb fea3 	bl	a9a0 <malloc>
    ec5a:	6268      	str	r0, [r5, #36]	; 0x24
    ec5c:	6044      	str	r4, [r0, #4]
    ec5e:	6084      	str	r4, [r0, #8]
    ec60:	6004      	str	r4, [r0, #0]
    ec62:	60c4      	str	r4, [r0, #12]
    ec64:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ec66:	68bc      	ldr	r4, [r7, #8]
    ec68:	2c00      	cmp	r4, #0
    ec6a:	d110      	bne.n	ec8e <__pow5mult+0x66>
    ec6c:	1c28      	adds	r0, r5, #0
    ec6e:	4916      	ldr	r1, [pc, #88]	; (ecc8 <__pow5mult+0xa0>)
    ec70:	f7ff ff43 	bl	eafa <__i2b>
    ec74:	2300      	movs	r3, #0
    ec76:	60b8      	str	r0, [r7, #8]
    ec78:	1c04      	adds	r4, r0, #0
    ec7a:	6003      	str	r3, [r0, #0]
    ec7c:	e007      	b.n	ec8e <__pow5mult+0x66>
    ec7e:	9b01      	ldr	r3, [sp, #4]
    ec80:	105b      	asrs	r3, r3, #1
    ec82:	9301      	str	r3, [sp, #4]
    ec84:	d01b      	beq.n	ecbe <__pow5mult+0x96>
    ec86:	6820      	ldr	r0, [r4, #0]
    ec88:	2800      	cmp	r0, #0
    ec8a:	d00f      	beq.n	ecac <__pow5mult+0x84>
    ec8c:	1c04      	adds	r4, r0, #0
    ec8e:	9b01      	ldr	r3, [sp, #4]
    ec90:	07db      	lsls	r3, r3, #31
    ec92:	d5f4      	bpl.n	ec7e <__pow5mult+0x56>
    ec94:	1c31      	adds	r1, r6, #0
    ec96:	1c22      	adds	r2, r4, #0
    ec98:	1c28      	adds	r0, r5, #0
    ec9a:	f7ff ff37 	bl	eb0c <__multiply>
    ec9e:	1c07      	adds	r7, r0, #0
    eca0:	1c31      	adds	r1, r6, #0
    eca2:	1c28      	adds	r0, r5, #0
    eca4:	f7ff fe4a 	bl	e93c <_Bfree>
    eca8:	1c3e      	adds	r6, r7, #0
    ecaa:	e7e8      	b.n	ec7e <__pow5mult+0x56>
    ecac:	1c28      	adds	r0, r5, #0
    ecae:	1c21      	adds	r1, r4, #0
    ecb0:	1c22      	adds	r2, r4, #0
    ecb2:	f7ff ff2b 	bl	eb0c <__multiply>
    ecb6:	2300      	movs	r3, #0
    ecb8:	6020      	str	r0, [r4, #0]
    ecba:	6003      	str	r3, [r0, #0]
    ecbc:	e7e6      	b.n	ec8c <__pow5mult+0x64>
    ecbe:	1c30      	adds	r0, r6, #0
    ecc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ecc2:	46c0      	nop			; (mov r8, r8)
    ecc4:	00010c78 	.word	0x00010c78
    ecc8:	00000271 	.word	0x00000271

0000eccc <__lshift>:
    eccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecce:	1c0c      	adds	r4, r1, #0
    ecd0:	1c17      	adds	r7, r2, #0
    ecd2:	6923      	ldr	r3, [r4, #16]
    ecd4:	1155      	asrs	r5, r2, #5
    ecd6:	b085      	sub	sp, #20
    ecd8:	18eb      	adds	r3, r5, r3
    ecda:	9301      	str	r3, [sp, #4]
    ecdc:	3301      	adds	r3, #1
    ecde:	9300      	str	r3, [sp, #0]
    ece0:	6849      	ldr	r1, [r1, #4]
    ece2:	68a3      	ldr	r3, [r4, #8]
    ece4:	9002      	str	r0, [sp, #8]
    ece6:	9a00      	ldr	r2, [sp, #0]
    ece8:	429a      	cmp	r2, r3
    ecea:	dd02      	ble.n	ecf2 <__lshift+0x26>
    ecec:	3101      	adds	r1, #1
    ecee:	005b      	lsls	r3, r3, #1
    ecf0:	e7f9      	b.n	ece6 <__lshift+0x1a>
    ecf2:	9802      	ldr	r0, [sp, #8]
    ecf4:	f7ff fdea 	bl	e8cc <_Balloc>
    ecf8:	1c02      	adds	r2, r0, #0
    ecfa:	1c06      	adds	r6, r0, #0
    ecfc:	2300      	movs	r3, #0
    ecfe:	3214      	adds	r2, #20
    ed00:	42ab      	cmp	r3, r5
    ed02:	da04      	bge.n	ed0e <__lshift+0x42>
    ed04:	2000      	movs	r0, #0
    ed06:	0099      	lsls	r1, r3, #2
    ed08:	5050      	str	r0, [r2, r1]
    ed0a:	3301      	adds	r3, #1
    ed0c:	e7f8      	b.n	ed00 <__lshift+0x34>
    ed0e:	43eb      	mvns	r3, r5
    ed10:	17db      	asrs	r3, r3, #31
    ed12:	401d      	ands	r5, r3
    ed14:	1c23      	adds	r3, r4, #0
    ed16:	00ad      	lsls	r5, r5, #2
    ed18:	1955      	adds	r5, r2, r5
    ed1a:	6922      	ldr	r2, [r4, #16]
    ed1c:	3314      	adds	r3, #20
    ed1e:	0092      	lsls	r2, r2, #2
    ed20:	189a      	adds	r2, r3, r2
    ed22:	4694      	mov	ip, r2
    ed24:	221f      	movs	r2, #31
    ed26:	4017      	ands	r7, r2
    ed28:	d014      	beq.n	ed54 <__lshift+0x88>
    ed2a:	3201      	adds	r2, #1
    ed2c:	1bd2      	subs	r2, r2, r7
    ed2e:	9203      	str	r2, [sp, #12]
    ed30:	2200      	movs	r2, #0
    ed32:	6819      	ldr	r1, [r3, #0]
    ed34:	1c28      	adds	r0, r5, #0
    ed36:	40b9      	lsls	r1, r7
    ed38:	430a      	orrs	r2, r1
    ed3a:	c504      	stmia	r5!, {r2}
    ed3c:	cb04      	ldmia	r3!, {r2}
    ed3e:	9903      	ldr	r1, [sp, #12]
    ed40:	40ca      	lsrs	r2, r1
    ed42:	459c      	cmp	ip, r3
    ed44:	d8f5      	bhi.n	ed32 <__lshift+0x66>
    ed46:	6042      	str	r2, [r0, #4]
    ed48:	2a00      	cmp	r2, #0
    ed4a:	d007      	beq.n	ed5c <__lshift+0x90>
    ed4c:	9b01      	ldr	r3, [sp, #4]
    ed4e:	3302      	adds	r3, #2
    ed50:	9300      	str	r3, [sp, #0]
    ed52:	e003      	b.n	ed5c <__lshift+0x90>
    ed54:	cb04      	ldmia	r3!, {r2}
    ed56:	c504      	stmia	r5!, {r2}
    ed58:	459c      	cmp	ip, r3
    ed5a:	d8fb      	bhi.n	ed54 <__lshift+0x88>
    ed5c:	9b00      	ldr	r3, [sp, #0]
    ed5e:	9802      	ldr	r0, [sp, #8]
    ed60:	3b01      	subs	r3, #1
    ed62:	6133      	str	r3, [r6, #16]
    ed64:	1c21      	adds	r1, r4, #0
    ed66:	f7ff fde9 	bl	e93c <_Bfree>
    ed6a:	1c30      	adds	r0, r6, #0
    ed6c:	b005      	add	sp, #20
    ed6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ed70 <__mcmp>:
    ed70:	6903      	ldr	r3, [r0, #16]
    ed72:	690a      	ldr	r2, [r1, #16]
    ed74:	b510      	push	{r4, lr}
    ed76:	1a9b      	subs	r3, r3, r2
    ed78:	1c04      	adds	r4, r0, #0
    ed7a:	1e18      	subs	r0, r3, #0
    ed7c:	d112      	bne.n	eda4 <__mcmp+0x34>
    ed7e:	0093      	lsls	r3, r2, #2
    ed80:	3414      	adds	r4, #20
    ed82:	3114      	adds	r1, #20
    ed84:	18e2      	adds	r2, r4, r3
    ed86:	18c9      	adds	r1, r1, r3
    ed88:	3a04      	subs	r2, #4
    ed8a:	3904      	subs	r1, #4
    ed8c:	6813      	ldr	r3, [r2, #0]
    ed8e:	6808      	ldr	r0, [r1, #0]
    ed90:	4283      	cmp	r3, r0
    ed92:	d004      	beq.n	ed9e <__mcmp+0x2e>
    ed94:	4283      	cmp	r3, r0
    ed96:	419b      	sbcs	r3, r3
    ed98:	2001      	movs	r0, #1
    ed9a:	4318      	orrs	r0, r3
    ed9c:	e002      	b.n	eda4 <__mcmp+0x34>
    ed9e:	42a2      	cmp	r2, r4
    eda0:	d8f2      	bhi.n	ed88 <__mcmp+0x18>
    eda2:	2000      	movs	r0, #0
    eda4:	bd10      	pop	{r4, pc}

0000eda6 <__mdiff>:
    eda6:	b5f0      	push	{r4, r5, r6, r7, lr}
    eda8:	1c07      	adds	r7, r0, #0
    edaa:	b085      	sub	sp, #20
    edac:	1c08      	adds	r0, r1, #0
    edae:	1c0c      	adds	r4, r1, #0
    edb0:	1c11      	adds	r1, r2, #0
    edb2:	1c15      	adds	r5, r2, #0
    edb4:	f7ff ffdc 	bl	ed70 <__mcmp>
    edb8:	1e06      	subs	r6, r0, #0
    edba:	d107      	bne.n	edcc <__mdiff+0x26>
    edbc:	1c38      	adds	r0, r7, #0
    edbe:	1c31      	adds	r1, r6, #0
    edc0:	f7ff fd84 	bl	e8cc <_Balloc>
    edc4:	2301      	movs	r3, #1
    edc6:	6146      	str	r6, [r0, #20]
    edc8:	6103      	str	r3, [r0, #16]
    edca:	e055      	b.n	ee78 <__mdiff+0xd2>
    edcc:	2300      	movs	r3, #0
    edce:	9301      	str	r3, [sp, #4]
    edd0:	4298      	cmp	r0, r3
    edd2:	da04      	bge.n	edde <__mdiff+0x38>
    edd4:	1c23      	adds	r3, r4, #0
    edd6:	1c2c      	adds	r4, r5, #0
    edd8:	1c1d      	adds	r5, r3, #0
    edda:	2301      	movs	r3, #1
    eddc:	9301      	str	r3, [sp, #4]
    edde:	1c38      	adds	r0, r7, #0
    ede0:	6861      	ldr	r1, [r4, #4]
    ede2:	f7ff fd73 	bl	e8cc <_Balloc>
    ede6:	9b01      	ldr	r3, [sp, #4]
    ede8:	6926      	ldr	r6, [r4, #16]
    edea:	1c2f      	adds	r7, r5, #0
    edec:	60c3      	str	r3, [r0, #12]
    edee:	3414      	adds	r4, #20
    edf0:	00b3      	lsls	r3, r6, #2
    edf2:	18e3      	adds	r3, r4, r3
    edf4:	1c02      	adds	r2, r0, #0
    edf6:	9302      	str	r3, [sp, #8]
    edf8:	692b      	ldr	r3, [r5, #16]
    edfa:	2500      	movs	r5, #0
    edfc:	3714      	adds	r7, #20
    edfe:	009b      	lsls	r3, r3, #2
    ee00:	18fb      	adds	r3, r7, r3
    ee02:	9303      	str	r3, [sp, #12]
    ee04:	3214      	adds	r2, #20
    ee06:	cc08      	ldmia	r4!, {r3}
    ee08:	4669      	mov	r1, sp
    ee0a:	469c      	mov	ip, r3
    ee0c:	cf08      	ldmia	r7!, {r3}
    ee0e:	3204      	adds	r2, #4
    ee10:	9300      	str	r3, [sp, #0]
    ee12:	4663      	mov	r3, ip
    ee14:	808b      	strh	r3, [r1, #4]
    ee16:	888b      	ldrh	r3, [r1, #4]
    ee18:	195d      	adds	r5, r3, r5
    ee1a:	9b00      	ldr	r3, [sp, #0]
    ee1c:	b29b      	uxth	r3, r3
    ee1e:	1aeb      	subs	r3, r5, r3
    ee20:	4665      	mov	r5, ip
    ee22:	9301      	str	r3, [sp, #4]
    ee24:	9b00      	ldr	r3, [sp, #0]
    ee26:	0c2d      	lsrs	r5, r5, #16
    ee28:	0c19      	lsrs	r1, r3, #16
    ee2a:	9b01      	ldr	r3, [sp, #4]
    ee2c:	1a69      	subs	r1, r5, r1
    ee2e:	141d      	asrs	r5, r3, #16
    ee30:	1f13      	subs	r3, r2, #4
    ee32:	469c      	mov	ip, r3
    ee34:	466b      	mov	r3, sp
    ee36:	1949      	adds	r1, r1, r5
    ee38:	889b      	ldrh	r3, [r3, #4]
    ee3a:	140d      	asrs	r5, r1, #16
    ee3c:	0409      	lsls	r1, r1, #16
    ee3e:	430b      	orrs	r3, r1
    ee40:	4661      	mov	r1, ip
    ee42:	600b      	str	r3, [r1, #0]
    ee44:	9b03      	ldr	r3, [sp, #12]
    ee46:	429f      	cmp	r7, r3
    ee48:	d3dd      	bcc.n	ee06 <__mdiff+0x60>
    ee4a:	9902      	ldr	r1, [sp, #8]
    ee4c:	1c13      	adds	r3, r2, #0
    ee4e:	428c      	cmp	r4, r1
    ee50:	d20b      	bcs.n	ee6a <__mdiff+0xc4>
    ee52:	cc08      	ldmia	r4!, {r3}
    ee54:	b299      	uxth	r1, r3
    ee56:	1949      	adds	r1, r1, r5
    ee58:	140d      	asrs	r5, r1, #16
    ee5a:	0c1b      	lsrs	r3, r3, #16
    ee5c:	18eb      	adds	r3, r5, r3
    ee5e:	141d      	asrs	r5, r3, #16
    ee60:	b289      	uxth	r1, r1
    ee62:	041b      	lsls	r3, r3, #16
    ee64:	430b      	orrs	r3, r1
    ee66:	c208      	stmia	r2!, {r3}
    ee68:	e7ef      	b.n	ee4a <__mdiff+0xa4>
    ee6a:	3b04      	subs	r3, #4
    ee6c:	681a      	ldr	r2, [r3, #0]
    ee6e:	2a00      	cmp	r2, #0
    ee70:	d101      	bne.n	ee76 <__mdiff+0xd0>
    ee72:	3e01      	subs	r6, #1
    ee74:	e7f9      	b.n	ee6a <__mdiff+0xc4>
    ee76:	6106      	str	r6, [r0, #16]
    ee78:	b005      	add	sp, #20
    ee7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ee7c <__ulp>:
    ee7c:	4b0f      	ldr	r3, [pc, #60]	; (eebc <__ulp+0x40>)
    ee7e:	b510      	push	{r4, lr}
    ee80:	4019      	ands	r1, r3
    ee82:	4b0f      	ldr	r3, [pc, #60]	; (eec0 <__ulp+0x44>)
    ee84:	18c9      	adds	r1, r1, r3
    ee86:	2900      	cmp	r1, #0
    ee88:	dd02      	ble.n	ee90 <__ulp+0x14>
    ee8a:	2200      	movs	r2, #0
    ee8c:	1c0b      	adds	r3, r1, #0
    ee8e:	e011      	b.n	eeb4 <__ulp+0x38>
    ee90:	4249      	negs	r1, r1
    ee92:	1509      	asrs	r1, r1, #20
    ee94:	2200      	movs	r2, #0
    ee96:	2300      	movs	r3, #0
    ee98:	2913      	cmp	r1, #19
    ee9a:	dc04      	bgt.n	eea6 <__ulp+0x2a>
    ee9c:	2080      	movs	r0, #128	; 0x80
    ee9e:	0300      	lsls	r0, r0, #12
    eea0:	4108      	asrs	r0, r1
    eea2:	1c03      	adds	r3, r0, #0
    eea4:	e006      	b.n	eeb4 <__ulp+0x38>
    eea6:	2001      	movs	r0, #1
    eea8:	2932      	cmp	r1, #50	; 0x32
    eeaa:	dc02      	bgt.n	eeb2 <__ulp+0x36>
    eeac:	2433      	movs	r4, #51	; 0x33
    eeae:	1a61      	subs	r1, r4, r1
    eeb0:	4088      	lsls	r0, r1
    eeb2:	1c02      	adds	r2, r0, #0
    eeb4:	1c10      	adds	r0, r2, #0
    eeb6:	1c19      	adds	r1, r3, #0
    eeb8:	bd10      	pop	{r4, pc}
    eeba:	46c0      	nop			; (mov r8, r8)
    eebc:	7ff00000 	.word	0x7ff00000
    eec0:	fcc00000 	.word	0xfcc00000

0000eec4 <__b2d>:
    eec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    eec6:	1c06      	adds	r6, r0, #0
    eec8:	6903      	ldr	r3, [r0, #16]
    eeca:	3614      	adds	r6, #20
    eecc:	009b      	lsls	r3, r3, #2
    eece:	18f3      	adds	r3, r6, r3
    eed0:	1f1d      	subs	r5, r3, #4
    eed2:	682c      	ldr	r4, [r5, #0]
    eed4:	1c0f      	adds	r7, r1, #0
    eed6:	1c20      	adds	r0, r4, #0
    eed8:	9301      	str	r3, [sp, #4]
    eeda:	f7ff fdc4 	bl	ea66 <__hi0bits>
    eede:	2320      	movs	r3, #32
    eee0:	1a1b      	subs	r3, r3, r0
    eee2:	603b      	str	r3, [r7, #0]
    eee4:	491f      	ldr	r1, [pc, #124]	; (ef64 <__b2d+0xa0>)
    eee6:	280a      	cmp	r0, #10
    eee8:	dc13      	bgt.n	ef12 <__b2d+0x4e>
    eeea:	230b      	movs	r3, #11
    eeec:	1c27      	adds	r7, r4, #0
    eeee:	1a1b      	subs	r3, r3, r0
    eef0:	40df      	lsrs	r7, r3
    eef2:	4339      	orrs	r1, r7
    eef4:	469c      	mov	ip, r3
    eef6:	1c0b      	adds	r3, r1, #0
    eef8:	2100      	movs	r1, #0
    eefa:	42b5      	cmp	r5, r6
    eefc:	d902      	bls.n	ef04 <__b2d+0x40>
    eefe:	9901      	ldr	r1, [sp, #4]
    ef00:	3908      	subs	r1, #8
    ef02:	6809      	ldr	r1, [r1, #0]
    ef04:	4665      	mov	r5, ip
    ef06:	3015      	adds	r0, #21
    ef08:	40e9      	lsrs	r1, r5
    ef0a:	4084      	lsls	r4, r0
    ef0c:	4321      	orrs	r1, r4
    ef0e:	1c0a      	adds	r2, r1, #0
    ef10:	e024      	b.n	ef5c <__b2d+0x98>
    ef12:	2700      	movs	r7, #0
    ef14:	42b5      	cmp	r5, r6
    ef16:	d902      	bls.n	ef1e <__b2d+0x5a>
    ef18:	9d01      	ldr	r5, [sp, #4]
    ef1a:	3d08      	subs	r5, #8
    ef1c:	682f      	ldr	r7, [r5, #0]
    ef1e:	230b      	movs	r3, #11
    ef20:	425b      	negs	r3, r3
    ef22:	469c      	mov	ip, r3
    ef24:	4484      	add	ip, r0
    ef26:	4663      	mov	r3, ip
    ef28:	2b00      	cmp	r3, #0
    ef2a:	d014      	beq.n	ef56 <__b2d+0x92>
    ef2c:	232b      	movs	r3, #43	; 0x2b
    ef2e:	1a18      	subs	r0, r3, r0
    ef30:	4663      	mov	r3, ip
    ef32:	409c      	lsls	r4, r3
    ef34:	4321      	orrs	r1, r4
    ef36:	1c3c      	adds	r4, r7, #0
    ef38:	40c4      	lsrs	r4, r0
    ef3a:	4321      	orrs	r1, r4
    ef3c:	1c0b      	adds	r3, r1, #0
    ef3e:	2400      	movs	r4, #0
    ef40:	42b5      	cmp	r5, r6
    ef42:	d901      	bls.n	ef48 <__b2d+0x84>
    ef44:	3d04      	subs	r5, #4
    ef46:	682c      	ldr	r4, [r5, #0]
    ef48:	40c4      	lsrs	r4, r0
    ef4a:	4661      	mov	r1, ip
    ef4c:	1c20      	adds	r0, r4, #0
    ef4e:	408f      	lsls	r7, r1
    ef50:	4338      	orrs	r0, r7
    ef52:	1c02      	adds	r2, r0, #0
    ef54:	e002      	b.n	ef5c <__b2d+0x98>
    ef56:	4321      	orrs	r1, r4
    ef58:	1c0b      	adds	r3, r1, #0
    ef5a:	1c3a      	adds	r2, r7, #0
    ef5c:	1c10      	adds	r0, r2, #0
    ef5e:	1c19      	adds	r1, r3, #0
    ef60:	b003      	add	sp, #12
    ef62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef64:	3ff00000 	.word	0x3ff00000

0000ef68 <__d2b>:
    ef68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ef6a:	1c1d      	adds	r5, r3, #0
    ef6c:	2101      	movs	r1, #1
    ef6e:	9f08      	ldr	r7, [sp, #32]
    ef70:	1c14      	adds	r4, r2, #0
    ef72:	f7ff fcab 	bl	e8cc <_Balloc>
    ef76:	032b      	lsls	r3, r5, #12
    ef78:	006d      	lsls	r5, r5, #1
    ef7a:	1c06      	adds	r6, r0, #0
    ef7c:	0b1b      	lsrs	r3, r3, #12
    ef7e:	0d6d      	lsrs	r5, r5, #21
    ef80:	d002      	beq.n	ef88 <__d2b+0x20>
    ef82:	2280      	movs	r2, #128	; 0x80
    ef84:	0352      	lsls	r2, r2, #13
    ef86:	4313      	orrs	r3, r2
    ef88:	9301      	str	r3, [sp, #4]
    ef8a:	2c00      	cmp	r4, #0
    ef8c:	d018      	beq.n	efc0 <__d2b+0x58>
    ef8e:	4668      	mov	r0, sp
    ef90:	9400      	str	r4, [sp, #0]
    ef92:	f7ff fd83 	bl	ea9c <__lo0bits>
    ef96:	9c00      	ldr	r4, [sp, #0]
    ef98:	2800      	cmp	r0, #0
    ef9a:	d009      	beq.n	efb0 <__d2b+0x48>
    ef9c:	2320      	movs	r3, #32
    ef9e:	9a01      	ldr	r2, [sp, #4]
    efa0:	1a19      	subs	r1, r3, r0
    efa2:	1c13      	adds	r3, r2, #0
    efa4:	408b      	lsls	r3, r1
    efa6:	40c2      	lsrs	r2, r0
    efa8:	4323      	orrs	r3, r4
    efaa:	6173      	str	r3, [r6, #20]
    efac:	9201      	str	r2, [sp, #4]
    efae:	e000      	b.n	efb2 <__d2b+0x4a>
    efb0:	6174      	str	r4, [r6, #20]
    efb2:	9c01      	ldr	r4, [sp, #4]
    efb4:	61b4      	str	r4, [r6, #24]
    efb6:	1e63      	subs	r3, r4, #1
    efb8:	419c      	sbcs	r4, r3
    efba:	3401      	adds	r4, #1
    efbc:	6134      	str	r4, [r6, #16]
    efbe:	e007      	b.n	efd0 <__d2b+0x68>
    efc0:	a801      	add	r0, sp, #4
    efc2:	f7ff fd6b 	bl	ea9c <__lo0bits>
    efc6:	2401      	movs	r4, #1
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	6134      	str	r4, [r6, #16]
    efcc:	6173      	str	r3, [r6, #20]
    efce:	3020      	adds	r0, #32
    efd0:	2d00      	cmp	r5, #0
    efd2:	d006      	beq.n	efe2 <__d2b+0x7a>
    efd4:	4b0b      	ldr	r3, [pc, #44]	; (f004 <__d2b+0x9c>)
    efd6:	18ed      	adds	r5, r5, r3
    efd8:	2335      	movs	r3, #53	; 0x35
    efda:	182d      	adds	r5, r5, r0
    efdc:	603d      	str	r5, [r7, #0]
    efde:	1a18      	subs	r0, r3, r0
    efe0:	e00b      	b.n	effa <__d2b+0x92>
    efe2:	4b09      	ldr	r3, [pc, #36]	; (f008 <__d2b+0xa0>)
    efe4:	18c0      	adds	r0, r0, r3
    efe6:	4b09      	ldr	r3, [pc, #36]	; (f00c <__d2b+0xa4>)
    efe8:	6038      	str	r0, [r7, #0]
    efea:	18e3      	adds	r3, r4, r3
    efec:	009b      	lsls	r3, r3, #2
    efee:	18f3      	adds	r3, r6, r3
    eff0:	6958      	ldr	r0, [r3, #20]
    eff2:	f7ff fd38 	bl	ea66 <__hi0bits>
    eff6:	0164      	lsls	r4, r4, #5
    eff8:	1a20      	subs	r0, r4, r0
    effa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    effc:	6018      	str	r0, [r3, #0]
    effe:	1c30      	adds	r0, r6, #0
    f000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f002:	46c0      	nop			; (mov r8, r8)
    f004:	fffffbcd 	.word	0xfffffbcd
    f008:	fffffbce 	.word	0xfffffbce
    f00c:	3fffffff 	.word	0x3fffffff

0000f010 <__ratio>:
    f010:	b5f0      	push	{r4, r5, r6, r7, lr}
    f012:	b087      	sub	sp, #28
    f014:	1c0e      	adds	r6, r1, #0
    f016:	a904      	add	r1, sp, #16
    f018:	1c07      	adds	r7, r0, #0
    f01a:	f7ff ff53 	bl	eec4 <__b2d>
    f01e:	1c04      	adds	r4, r0, #0
    f020:	1c0d      	adds	r5, r1, #0
    f022:	1c30      	adds	r0, r6, #0
    f024:	a905      	add	r1, sp, #20
    f026:	9400      	str	r4, [sp, #0]
    f028:	9501      	str	r5, [sp, #4]
    f02a:	f7ff ff4b 	bl	eec4 <__b2d>
    f02e:	9b04      	ldr	r3, [sp, #16]
    f030:	9a05      	ldr	r2, [sp, #20]
    f032:	693f      	ldr	r7, [r7, #16]
    f034:	1a9a      	subs	r2, r3, r2
    f036:	6933      	ldr	r3, [r6, #16]
    f038:	9002      	str	r0, [sp, #8]
    f03a:	9103      	str	r1, [sp, #12]
    f03c:	1afb      	subs	r3, r7, r3
    f03e:	015b      	lsls	r3, r3, #5
    f040:	18d3      	adds	r3, r2, r3
    f042:	2b00      	cmp	r3, #0
    f044:	dd03      	ble.n	f04e <__ratio+0x3e>
    f046:	051b      	lsls	r3, r3, #20
    f048:	195b      	adds	r3, r3, r5
    f04a:	9301      	str	r3, [sp, #4]
    f04c:	e002      	b.n	f054 <__ratio+0x44>
    f04e:	051b      	lsls	r3, r3, #20
    f050:	1acb      	subs	r3, r1, r3
    f052:	9303      	str	r3, [sp, #12]
    f054:	9800      	ldr	r0, [sp, #0]
    f056:	9901      	ldr	r1, [sp, #4]
    f058:	9a02      	ldr	r2, [sp, #8]
    f05a:	9b03      	ldr	r3, [sp, #12]
    f05c:	f7f9 fc8a 	bl	8974 <__aeabi_ddiv>
    f060:	b007      	add	sp, #28
    f062:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f064 <__copybits>:
    f064:	1c13      	adds	r3, r2, #0
    f066:	3901      	subs	r1, #1
    f068:	b510      	push	{r4, lr}
    f06a:	1149      	asrs	r1, r1, #5
    f06c:	6912      	ldr	r2, [r2, #16]
    f06e:	3101      	adds	r1, #1
    f070:	0089      	lsls	r1, r1, #2
    f072:	3314      	adds	r3, #20
    f074:	0092      	lsls	r2, r2, #2
    f076:	1841      	adds	r1, r0, r1
    f078:	189a      	adds	r2, r3, r2
    f07a:	4293      	cmp	r3, r2
    f07c:	d202      	bcs.n	f084 <__copybits+0x20>
    f07e:	cb10      	ldmia	r3!, {r4}
    f080:	c010      	stmia	r0!, {r4}
    f082:	e7fa      	b.n	f07a <__copybits+0x16>
    f084:	4288      	cmp	r0, r1
    f086:	d202      	bcs.n	f08e <__copybits+0x2a>
    f088:	2300      	movs	r3, #0
    f08a:	c008      	stmia	r0!, {r3}
    f08c:	e7fa      	b.n	f084 <__copybits+0x20>
    f08e:	bd10      	pop	{r4, pc}

0000f090 <__any_on>:
    f090:	b530      	push	{r4, r5, lr}
    f092:	1c04      	adds	r4, r0, #0
    f094:	6902      	ldr	r2, [r0, #16]
    f096:	3414      	adds	r4, #20
    f098:	114b      	asrs	r3, r1, #5
    f09a:	4293      	cmp	r3, r2
    f09c:	dc0c      	bgt.n	f0b8 <__any_on+0x28>
    f09e:	da0c      	bge.n	f0ba <__any_on+0x2a>
    f0a0:	221f      	movs	r2, #31
    f0a2:	4011      	ands	r1, r2
    f0a4:	d009      	beq.n	f0ba <__any_on+0x2a>
    f0a6:	009a      	lsls	r2, r3, #2
    f0a8:	5915      	ldr	r5, [r2, r4]
    f0aa:	2001      	movs	r0, #1
    f0ac:	1c2a      	adds	r2, r5, #0
    f0ae:	40ca      	lsrs	r2, r1
    f0b0:	408a      	lsls	r2, r1
    f0b2:	42aa      	cmp	r2, r5
    f0b4:	d10c      	bne.n	f0d0 <__any_on+0x40>
    f0b6:	e000      	b.n	f0ba <__any_on+0x2a>
    f0b8:	1c13      	adds	r3, r2, #0
    f0ba:	009b      	lsls	r3, r3, #2
    f0bc:	18e3      	adds	r3, r4, r3
    f0be:	42a3      	cmp	r3, r4
    f0c0:	d905      	bls.n	f0ce <__any_on+0x3e>
    f0c2:	3b04      	subs	r3, #4
    f0c4:	681a      	ldr	r2, [r3, #0]
    f0c6:	2a00      	cmp	r2, #0
    f0c8:	d0f9      	beq.n	f0be <__any_on+0x2e>
    f0ca:	2001      	movs	r0, #1
    f0cc:	e000      	b.n	f0d0 <__any_on+0x40>
    f0ce:	2000      	movs	r0, #0
    f0d0:	bd30      	pop	{r4, r5, pc}

0000f0d2 <_calloc_r>:
    f0d2:	434a      	muls	r2, r1
    f0d4:	b538      	push	{r3, r4, r5, lr}
    f0d6:	1c11      	adds	r1, r2, #0
    f0d8:	1c14      	adds	r4, r2, #0
    f0da:	f7fb fcd7 	bl	aa8c <_malloc_r>
    f0de:	1e05      	subs	r5, r0, #0
    f0e0:	d003      	beq.n	f0ea <_calloc_r+0x18>
    f0e2:	2100      	movs	r1, #0
    f0e4:	1c22      	adds	r2, r4, #0
    f0e6:	f7fb fc83 	bl	a9f0 <memset>
    f0ea:	1c28      	adds	r0, r5, #0
    f0ec:	bd38      	pop	{r3, r4, r5, pc}

0000f0ee <_realloc_r>:
    f0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f0f0:	1c06      	adds	r6, r0, #0
    f0f2:	1c0c      	adds	r4, r1, #0
    f0f4:	1c15      	adds	r5, r2, #0
    f0f6:	2900      	cmp	r1, #0
    f0f8:	d104      	bne.n	f104 <_realloc_r+0x16>
    f0fa:	1c11      	adds	r1, r2, #0
    f0fc:	f7fb fcc6 	bl	aa8c <_malloc_r>
    f100:	1c04      	adds	r4, r0, #0
    f102:	e018      	b.n	f136 <_realloc_r+0x48>
    f104:	2a00      	cmp	r2, #0
    f106:	d103      	bne.n	f110 <_realloc_r+0x22>
    f108:	f7fb fc7a 	bl	aa00 <_free_r>
    f10c:	1c2c      	adds	r4, r5, #0
    f10e:	e012      	b.n	f136 <_realloc_r+0x48>
    f110:	f000 fb52 	bl	f7b8 <_malloc_usable_size_r>
    f114:	42a8      	cmp	r0, r5
    f116:	d20e      	bcs.n	f136 <_realloc_r+0x48>
    f118:	1c30      	adds	r0, r6, #0
    f11a:	1c29      	adds	r1, r5, #0
    f11c:	f7fb fcb6 	bl	aa8c <_malloc_r>
    f120:	1e07      	subs	r7, r0, #0
    f122:	d007      	beq.n	f134 <_realloc_r+0x46>
    f124:	1c21      	adds	r1, r4, #0
    f126:	1c2a      	adds	r2, r5, #0
    f128:	f7fb fc59 	bl	a9de <memcpy>
    f12c:	1c30      	adds	r0, r6, #0
    f12e:	1c21      	adds	r1, r4, #0
    f130:	f7fb fc66 	bl	aa00 <_free_r>
    f134:	1c3c      	adds	r4, r7, #0
    f136:	1c20      	adds	r0, r4, #0
    f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000f13c <__ssputs_r>:
    f13c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f13e:	688e      	ldr	r6, [r1, #8]
    f140:	b085      	sub	sp, #20
    f142:	1c07      	adds	r7, r0, #0
    f144:	1c0c      	adds	r4, r1, #0
    f146:	9203      	str	r2, [sp, #12]
    f148:	9301      	str	r3, [sp, #4]
    f14a:	42b3      	cmp	r3, r6
    f14c:	d345      	bcc.n	f1da <__ssputs_r+0x9e>
    f14e:	2390      	movs	r3, #144	; 0x90
    f150:	898a      	ldrh	r2, [r1, #12]
    f152:	00db      	lsls	r3, r3, #3
    f154:	421a      	tst	r2, r3
    f156:	d03d      	beq.n	f1d4 <__ssputs_r+0x98>
    f158:	2503      	movs	r5, #3
    f15a:	6909      	ldr	r1, [r1, #16]
    f15c:	6823      	ldr	r3, [r4, #0]
    f15e:	9801      	ldr	r0, [sp, #4]
    f160:	1a5b      	subs	r3, r3, r1
    f162:	9302      	str	r3, [sp, #8]
    f164:	6963      	ldr	r3, [r4, #20]
    f166:	435d      	muls	r5, r3
    f168:	0feb      	lsrs	r3, r5, #31
    f16a:	195d      	adds	r5, r3, r5
    f16c:	9b02      	ldr	r3, [sp, #8]
    f16e:	106d      	asrs	r5, r5, #1
    f170:	3301      	adds	r3, #1
    f172:	181b      	adds	r3, r3, r0
    f174:	429d      	cmp	r5, r3
    f176:	d200      	bcs.n	f17a <__ssputs_r+0x3e>
    f178:	1c1d      	adds	r5, r3, #0
    f17a:	1c38      	adds	r0, r7, #0
    f17c:	0553      	lsls	r3, r2, #21
    f17e:	d50f      	bpl.n	f1a0 <__ssputs_r+0x64>
    f180:	1c29      	adds	r1, r5, #0
    f182:	f7fb fc83 	bl	aa8c <_malloc_r>
    f186:	1e06      	subs	r6, r0, #0
    f188:	d013      	beq.n	f1b2 <__ssputs_r+0x76>
    f18a:	9a02      	ldr	r2, [sp, #8]
    f18c:	6921      	ldr	r1, [r4, #16]
    f18e:	f7fb fc26 	bl	a9de <memcpy>
    f192:	89a2      	ldrh	r2, [r4, #12]
    f194:	4b18      	ldr	r3, [pc, #96]	; (f1f8 <__ssputs_r+0xbc>)
    f196:	4013      	ands	r3, r2
    f198:	2280      	movs	r2, #128	; 0x80
    f19a:	4313      	orrs	r3, r2
    f19c:	81a3      	strh	r3, [r4, #12]
    f19e:	e011      	b.n	f1c4 <__ssputs_r+0x88>
    f1a0:	1c2a      	adds	r2, r5, #0
    f1a2:	f7ff ffa4 	bl	f0ee <_realloc_r>
    f1a6:	1e06      	subs	r6, r0, #0
    f1a8:	d10c      	bne.n	f1c4 <__ssputs_r+0x88>
    f1aa:	1c38      	adds	r0, r7, #0
    f1ac:	6921      	ldr	r1, [r4, #16]
    f1ae:	f7fb fc27 	bl	aa00 <_free_r>
    f1b2:	230c      	movs	r3, #12
    f1b4:	2240      	movs	r2, #64	; 0x40
    f1b6:	2001      	movs	r0, #1
    f1b8:	603b      	str	r3, [r7, #0]
    f1ba:	89a3      	ldrh	r3, [r4, #12]
    f1bc:	4240      	negs	r0, r0
    f1be:	4313      	orrs	r3, r2
    f1c0:	81a3      	strh	r3, [r4, #12]
    f1c2:	e017      	b.n	f1f4 <__ssputs_r+0xb8>
    f1c4:	9b02      	ldr	r3, [sp, #8]
    f1c6:	6126      	str	r6, [r4, #16]
    f1c8:	18f6      	adds	r6, r6, r3
    f1ca:	6026      	str	r6, [r4, #0]
    f1cc:	6165      	str	r5, [r4, #20]
    f1ce:	9e01      	ldr	r6, [sp, #4]
    f1d0:	1aed      	subs	r5, r5, r3
    f1d2:	60a5      	str	r5, [r4, #8]
    f1d4:	9b01      	ldr	r3, [sp, #4]
    f1d6:	42b3      	cmp	r3, r6
    f1d8:	d200      	bcs.n	f1dc <__ssputs_r+0xa0>
    f1da:	9e01      	ldr	r6, [sp, #4]
    f1dc:	1c32      	adds	r2, r6, #0
    f1de:	6820      	ldr	r0, [r4, #0]
    f1e0:	9903      	ldr	r1, [sp, #12]
    f1e2:	f7ff fb5f 	bl	e8a4 <memmove>
    f1e6:	2000      	movs	r0, #0
    f1e8:	68a3      	ldr	r3, [r4, #8]
    f1ea:	1b9b      	subs	r3, r3, r6
    f1ec:	60a3      	str	r3, [r4, #8]
    f1ee:	6823      	ldr	r3, [r4, #0]
    f1f0:	199e      	adds	r6, r3, r6
    f1f2:	6026      	str	r6, [r4, #0]
    f1f4:	b005      	add	sp, #20
    f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1f8:	fffffb7f 	.word	0xfffffb7f

0000f1fc <_svfiprintf_r>:
    f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1fe:	b09f      	sub	sp, #124	; 0x7c
    f200:	9002      	str	r0, [sp, #8]
    f202:	9305      	str	r3, [sp, #20]
    f204:	898b      	ldrh	r3, [r1, #12]
    f206:	1c0e      	adds	r6, r1, #0
    f208:	1c17      	adds	r7, r2, #0
    f20a:	061b      	lsls	r3, r3, #24
    f20c:	d510      	bpl.n	f230 <_svfiprintf_r+0x34>
    f20e:	690b      	ldr	r3, [r1, #16]
    f210:	2b00      	cmp	r3, #0
    f212:	d10d      	bne.n	f230 <_svfiprintf_r+0x34>
    f214:	2140      	movs	r1, #64	; 0x40
    f216:	f7fb fc39 	bl	aa8c <_malloc_r>
    f21a:	6030      	str	r0, [r6, #0]
    f21c:	6130      	str	r0, [r6, #16]
    f21e:	2800      	cmp	r0, #0
    f220:	d104      	bne.n	f22c <_svfiprintf_r+0x30>
    f222:	230c      	movs	r3, #12
    f224:	9a02      	ldr	r2, [sp, #8]
    f226:	3801      	subs	r0, #1
    f228:	6013      	str	r3, [r2, #0]
    f22a:	e0d0      	b.n	f3ce <_svfiprintf_r+0x1d2>
    f22c:	2340      	movs	r3, #64	; 0x40
    f22e:	6173      	str	r3, [r6, #20]
    f230:	2300      	movs	r3, #0
    f232:	ad06      	add	r5, sp, #24
    f234:	616b      	str	r3, [r5, #20]
    f236:	3320      	adds	r3, #32
    f238:	766b      	strb	r3, [r5, #25]
    f23a:	3310      	adds	r3, #16
    f23c:	76ab      	strb	r3, [r5, #26]
    f23e:	1c3c      	adds	r4, r7, #0
    f240:	7823      	ldrb	r3, [r4, #0]
    f242:	2b00      	cmp	r3, #0
    f244:	d103      	bne.n	f24e <_svfiprintf_r+0x52>
    f246:	1be3      	subs	r3, r4, r7
    f248:	9304      	str	r3, [sp, #16]
    f24a:	d012      	beq.n	f272 <_svfiprintf_r+0x76>
    f24c:	e003      	b.n	f256 <_svfiprintf_r+0x5a>
    f24e:	2b25      	cmp	r3, #37	; 0x25
    f250:	d0f9      	beq.n	f246 <_svfiprintf_r+0x4a>
    f252:	3401      	adds	r4, #1
    f254:	e7f4      	b.n	f240 <_svfiprintf_r+0x44>
    f256:	9b04      	ldr	r3, [sp, #16]
    f258:	9802      	ldr	r0, [sp, #8]
    f25a:	1c31      	adds	r1, r6, #0
    f25c:	1c3a      	adds	r2, r7, #0
    f25e:	f7ff ff6d 	bl	f13c <__ssputs_r>
    f262:	1c43      	adds	r3, r0, #1
    f264:	d100      	bne.n	f268 <_svfiprintf_r+0x6c>
    f266:	e0ac      	b.n	f3c2 <_svfiprintf_r+0x1c6>
    f268:	696a      	ldr	r2, [r5, #20]
    f26a:	9b04      	ldr	r3, [sp, #16]
    f26c:	4694      	mov	ip, r2
    f26e:	4463      	add	r3, ip
    f270:	616b      	str	r3, [r5, #20]
    f272:	7823      	ldrb	r3, [r4, #0]
    f274:	2b00      	cmp	r3, #0
    f276:	d100      	bne.n	f27a <_svfiprintf_r+0x7e>
    f278:	e0a3      	b.n	f3c2 <_svfiprintf_r+0x1c6>
    f27a:	2201      	movs	r2, #1
    f27c:	2300      	movs	r3, #0
    f27e:	4252      	negs	r2, r2
    f280:	606a      	str	r2, [r5, #4]
    f282:	a902      	add	r1, sp, #8
    f284:	3254      	adds	r2, #84	; 0x54
    f286:	1852      	adds	r2, r2, r1
    f288:	3401      	adds	r4, #1
    f28a:	602b      	str	r3, [r5, #0]
    f28c:	60eb      	str	r3, [r5, #12]
    f28e:	60ab      	str	r3, [r5, #8]
    f290:	7013      	strb	r3, [r2, #0]
    f292:	65ab      	str	r3, [r5, #88]	; 0x58
    f294:	4f4f      	ldr	r7, [pc, #316]	; (f3d4 <_svfiprintf_r+0x1d8>)
    f296:	7821      	ldrb	r1, [r4, #0]
    f298:	1c38      	adds	r0, r7, #0
    f29a:	2205      	movs	r2, #5
    f29c:	f7fb fb94 	bl	a9c8 <memchr>
    f2a0:	2800      	cmp	r0, #0
    f2a2:	d008      	beq.n	f2b6 <_svfiprintf_r+0xba>
    f2a4:	1bc0      	subs	r0, r0, r7
    f2a6:	2701      	movs	r7, #1
    f2a8:	4087      	lsls	r7, r0
    f2aa:	1c38      	adds	r0, r7, #0
    f2ac:	682b      	ldr	r3, [r5, #0]
    f2ae:	3401      	adds	r4, #1
    f2b0:	4318      	orrs	r0, r3
    f2b2:	6028      	str	r0, [r5, #0]
    f2b4:	e7ee      	b.n	f294 <_svfiprintf_r+0x98>
    f2b6:	682b      	ldr	r3, [r5, #0]
    f2b8:	06da      	lsls	r2, r3, #27
    f2ba:	d504      	bpl.n	f2c6 <_svfiprintf_r+0xca>
    f2bc:	2253      	movs	r2, #83	; 0x53
    f2be:	2120      	movs	r1, #32
    f2c0:	a802      	add	r0, sp, #8
    f2c2:	1812      	adds	r2, r2, r0
    f2c4:	7011      	strb	r1, [r2, #0]
    f2c6:	071a      	lsls	r2, r3, #28
    f2c8:	d504      	bpl.n	f2d4 <_svfiprintf_r+0xd8>
    f2ca:	2253      	movs	r2, #83	; 0x53
    f2cc:	212b      	movs	r1, #43	; 0x2b
    f2ce:	a802      	add	r0, sp, #8
    f2d0:	1812      	adds	r2, r2, r0
    f2d2:	7011      	strb	r1, [r2, #0]
    f2d4:	7822      	ldrb	r2, [r4, #0]
    f2d6:	2a2a      	cmp	r2, #42	; 0x2a
    f2d8:	d001      	beq.n	f2de <_svfiprintf_r+0xe2>
    f2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f2dc:	e00e      	b.n	f2fc <_svfiprintf_r+0x100>
    f2de:	9a05      	ldr	r2, [sp, #20]
    f2e0:	1d11      	adds	r1, r2, #4
    f2e2:	6812      	ldr	r2, [r2, #0]
    f2e4:	9105      	str	r1, [sp, #20]
    f2e6:	2a00      	cmp	r2, #0
    f2e8:	db01      	blt.n	f2ee <_svfiprintf_r+0xf2>
    f2ea:	9209      	str	r2, [sp, #36]	; 0x24
    f2ec:	e004      	b.n	f2f8 <_svfiprintf_r+0xfc>
    f2ee:	4252      	negs	r2, r2
    f2f0:	60ea      	str	r2, [r5, #12]
    f2f2:	2202      	movs	r2, #2
    f2f4:	4313      	orrs	r3, r2
    f2f6:	602b      	str	r3, [r5, #0]
    f2f8:	3401      	adds	r4, #1
    f2fa:	e009      	b.n	f310 <_svfiprintf_r+0x114>
    f2fc:	7822      	ldrb	r2, [r4, #0]
    f2fe:	3a30      	subs	r2, #48	; 0x30
    f300:	2a09      	cmp	r2, #9
    f302:	d804      	bhi.n	f30e <_svfiprintf_r+0x112>
    f304:	210a      	movs	r1, #10
    f306:	434b      	muls	r3, r1
    f308:	3401      	adds	r4, #1
    f30a:	189b      	adds	r3, r3, r2
    f30c:	e7f6      	b.n	f2fc <_svfiprintf_r+0x100>
    f30e:	9309      	str	r3, [sp, #36]	; 0x24
    f310:	7823      	ldrb	r3, [r4, #0]
    f312:	2b2e      	cmp	r3, #46	; 0x2e
    f314:	d118      	bne.n	f348 <_svfiprintf_r+0x14c>
    f316:	7863      	ldrb	r3, [r4, #1]
    f318:	2b2a      	cmp	r3, #42	; 0x2a
    f31a:	d109      	bne.n	f330 <_svfiprintf_r+0x134>
    f31c:	9b05      	ldr	r3, [sp, #20]
    f31e:	3402      	adds	r4, #2
    f320:	1d1a      	adds	r2, r3, #4
    f322:	681b      	ldr	r3, [r3, #0]
    f324:	9205      	str	r2, [sp, #20]
    f326:	2b00      	cmp	r3, #0
    f328:	da0d      	bge.n	f346 <_svfiprintf_r+0x14a>
    f32a:	2301      	movs	r3, #1
    f32c:	425b      	negs	r3, r3
    f32e:	e00a      	b.n	f346 <_svfiprintf_r+0x14a>
    f330:	2300      	movs	r3, #0
    f332:	3401      	adds	r4, #1
    f334:	7822      	ldrb	r2, [r4, #0]
    f336:	3a30      	subs	r2, #48	; 0x30
    f338:	2a09      	cmp	r2, #9
    f33a:	d804      	bhi.n	f346 <_svfiprintf_r+0x14a>
    f33c:	210a      	movs	r1, #10
    f33e:	434b      	muls	r3, r1
    f340:	3401      	adds	r4, #1
    f342:	189b      	adds	r3, r3, r2
    f344:	e7f6      	b.n	f334 <_svfiprintf_r+0x138>
    f346:	9307      	str	r3, [sp, #28]
    f348:	4f23      	ldr	r7, [pc, #140]	; (f3d8 <_svfiprintf_r+0x1dc>)
    f34a:	7821      	ldrb	r1, [r4, #0]
    f34c:	1c38      	adds	r0, r7, #0
    f34e:	2203      	movs	r2, #3
    f350:	f7fb fb3a 	bl	a9c8 <memchr>
    f354:	2800      	cmp	r0, #0
    f356:	d007      	beq.n	f368 <_svfiprintf_r+0x16c>
    f358:	1bc0      	subs	r0, r0, r7
    f35a:	2740      	movs	r7, #64	; 0x40
    f35c:	4087      	lsls	r7, r0
    f35e:	1c38      	adds	r0, r7, #0
    f360:	682b      	ldr	r3, [r5, #0]
    f362:	3401      	adds	r4, #1
    f364:	4318      	orrs	r0, r3
    f366:	6028      	str	r0, [r5, #0]
    f368:	7821      	ldrb	r1, [r4, #0]
    f36a:	481c      	ldr	r0, [pc, #112]	; (f3dc <_svfiprintf_r+0x1e0>)
    f36c:	2206      	movs	r2, #6
    f36e:	1c67      	adds	r7, r4, #1
    f370:	7629      	strb	r1, [r5, #24]
    f372:	f7fb fb29 	bl	a9c8 <memchr>
    f376:	2800      	cmp	r0, #0
    f378:	d012      	beq.n	f3a0 <_svfiprintf_r+0x1a4>
    f37a:	4b19      	ldr	r3, [pc, #100]	; (f3e0 <_svfiprintf_r+0x1e4>)
    f37c:	2b00      	cmp	r3, #0
    f37e:	d106      	bne.n	f38e <_svfiprintf_r+0x192>
    f380:	2207      	movs	r2, #7
    f382:	9b05      	ldr	r3, [sp, #20]
    f384:	3307      	adds	r3, #7
    f386:	4393      	bics	r3, r2
    f388:	3308      	adds	r3, #8
    f38a:	9305      	str	r3, [sp, #20]
    f38c:	e014      	b.n	f3b8 <_svfiprintf_r+0x1bc>
    f38e:	ab05      	add	r3, sp, #20
    f390:	9300      	str	r3, [sp, #0]
    f392:	9802      	ldr	r0, [sp, #8]
    f394:	1c29      	adds	r1, r5, #0
    f396:	1c32      	adds	r2, r6, #0
    f398:	4b12      	ldr	r3, [pc, #72]	; (f3e4 <_svfiprintf_r+0x1e8>)
    f39a:	f7fb fdab 	bl	aef4 <_printf_float>
    f39e:	e007      	b.n	f3b0 <_svfiprintf_r+0x1b4>
    f3a0:	ab05      	add	r3, sp, #20
    f3a2:	9300      	str	r3, [sp, #0]
    f3a4:	9802      	ldr	r0, [sp, #8]
    f3a6:	1c29      	adds	r1, r5, #0
    f3a8:	1c32      	adds	r2, r6, #0
    f3aa:	4b0e      	ldr	r3, [pc, #56]	; (f3e4 <_svfiprintf_r+0x1e8>)
    f3ac:	f7fc f84e 	bl	b44c <_printf_i>
    f3b0:	9003      	str	r0, [sp, #12]
    f3b2:	9b03      	ldr	r3, [sp, #12]
    f3b4:	3301      	adds	r3, #1
    f3b6:	d004      	beq.n	f3c2 <_svfiprintf_r+0x1c6>
    f3b8:	696b      	ldr	r3, [r5, #20]
    f3ba:	9a03      	ldr	r2, [sp, #12]
    f3bc:	189b      	adds	r3, r3, r2
    f3be:	616b      	str	r3, [r5, #20]
    f3c0:	e73d      	b.n	f23e <_svfiprintf_r+0x42>
    f3c2:	89b3      	ldrh	r3, [r6, #12]
    f3c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f3c6:	065b      	lsls	r3, r3, #25
    f3c8:	d501      	bpl.n	f3ce <_svfiprintf_r+0x1d2>
    f3ca:	2001      	movs	r0, #1
    f3cc:	4240      	negs	r0, r0
    f3ce:	b01f      	add	sp, #124	; 0x7c
    f3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3d2:	46c0      	nop			; (mov r8, r8)
    f3d4:	000109a8 	.word	0x000109a8
    f3d8:	000109ae 	.word	0x000109ae
    f3dc:	000109b2 	.word	0x000109b2
    f3e0:	0000aef5 	.word	0x0000aef5
    f3e4:	0000f13d 	.word	0x0000f13d

0000f3e8 <_sungetc_r>:
    f3e8:	b538      	push	{r3, r4, r5, lr}
    f3ea:	1c14      	adds	r4, r2, #0
    f3ec:	1c4b      	adds	r3, r1, #1
    f3ee:	d102      	bne.n	f3f6 <_sungetc_r+0xe>
    f3f0:	2001      	movs	r0, #1
    f3f2:	4240      	negs	r0, r0
    f3f4:	e034      	b.n	f460 <_sungetc_r+0x78>
    f3f6:	8993      	ldrh	r3, [r2, #12]
    f3f8:	2220      	movs	r2, #32
    f3fa:	4393      	bics	r3, r2
    f3fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
    f3fe:	81a3      	strh	r3, [r4, #12]
    f400:	b2cd      	uxtb	r5, r1
    f402:	6863      	ldr	r3, [r4, #4]
    f404:	2a00      	cmp	r2, #0
    f406:	d00f      	beq.n	f428 <_sungetc_r+0x40>
    f408:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    f40a:	4293      	cmp	r3, r2
    f40c:	da06      	bge.n	f41c <_sungetc_r+0x34>
    f40e:	6823      	ldr	r3, [r4, #0]
    f410:	3b01      	subs	r3, #1
    f412:	6023      	str	r3, [r4, #0]
    f414:	701d      	strb	r5, [r3, #0]
    f416:	6863      	ldr	r3, [r4, #4]
    f418:	3301      	adds	r3, #1
    f41a:	e01f      	b.n	f45c <_sungetc_r+0x74>
    f41c:	1c21      	adds	r1, r4, #0
    f41e:	f7fd fefd 	bl	d21c <__submore>
    f422:	2800      	cmp	r0, #0
    f424:	d0f3      	beq.n	f40e <_sungetc_r+0x26>
    f426:	e7e3      	b.n	f3f0 <_sungetc_r+0x8>
    f428:	6921      	ldr	r1, [r4, #16]
    f42a:	6822      	ldr	r2, [r4, #0]
    f42c:	2900      	cmp	r1, #0
    f42e:	d009      	beq.n	f444 <_sungetc_r+0x5c>
    f430:	428a      	cmp	r2, r1
    f432:	d907      	bls.n	f444 <_sungetc_r+0x5c>
    f434:	1e51      	subs	r1, r2, #1
    f436:	7808      	ldrb	r0, [r1, #0]
    f438:	42a8      	cmp	r0, r5
    f43a:	d103      	bne.n	f444 <_sungetc_r+0x5c>
    f43c:	3301      	adds	r3, #1
    f43e:	6021      	str	r1, [r4, #0]
    f440:	6063      	str	r3, [r4, #4]
    f442:	e00d      	b.n	f460 <_sungetc_r+0x78>
    f444:	6423      	str	r3, [r4, #64]	; 0x40
    f446:	1c23      	adds	r3, r4, #0
    f448:	3344      	adds	r3, #68	; 0x44
    f44a:	6363      	str	r3, [r4, #52]	; 0x34
    f44c:	2303      	movs	r3, #3
    f44e:	63a3      	str	r3, [r4, #56]	; 0x38
    f450:	1c23      	adds	r3, r4, #0
    f452:	3346      	adds	r3, #70	; 0x46
    f454:	63e2      	str	r2, [r4, #60]	; 0x3c
    f456:	701d      	strb	r5, [r3, #0]
    f458:	6023      	str	r3, [r4, #0]
    f45a:	2301      	movs	r3, #1
    f45c:	1c28      	adds	r0, r5, #0
    f45e:	6063      	str	r3, [r4, #4]
    f460:	bd38      	pop	{r3, r4, r5, pc}

0000f462 <__ssrefill_r>:
    f462:	b510      	push	{r4, lr}
    f464:	1c0c      	adds	r4, r1, #0
    f466:	6b49      	ldr	r1, [r1, #52]	; 0x34
    f468:	2900      	cmp	r1, #0
    f46a:	d00e      	beq.n	f48a <__ssrefill_r+0x28>
    f46c:	1c23      	adds	r3, r4, #0
    f46e:	3344      	adds	r3, #68	; 0x44
    f470:	4299      	cmp	r1, r3
    f472:	d001      	beq.n	f478 <__ssrefill_r+0x16>
    f474:	f7fb fac4 	bl	aa00 <_free_r>
    f478:	2000      	movs	r0, #0
    f47a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    f47c:	6360      	str	r0, [r4, #52]	; 0x34
    f47e:	6063      	str	r3, [r4, #4]
    f480:	4283      	cmp	r3, r0
    f482:	d002      	beq.n	f48a <__ssrefill_r+0x28>
    f484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f486:	6023      	str	r3, [r4, #0]
    f488:	e009      	b.n	f49e <__ssrefill_r+0x3c>
    f48a:	6923      	ldr	r3, [r4, #16]
    f48c:	2220      	movs	r2, #32
    f48e:	6023      	str	r3, [r4, #0]
    f490:	2300      	movs	r3, #0
    f492:	2001      	movs	r0, #1
    f494:	6063      	str	r3, [r4, #4]
    f496:	89a3      	ldrh	r3, [r4, #12]
    f498:	4240      	negs	r0, r0
    f49a:	4313      	orrs	r3, r2
    f49c:	81a3      	strh	r3, [r4, #12]
    f49e:	bd10      	pop	{r4, pc}

0000f4a0 <__ssvfiscanf_r>:
    f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4a2:	4cb5      	ldr	r4, [pc, #724]	; (f778 <__ssvfiscanf_r+0x2d8>)
    f4a4:	1c07      	adds	r7, r0, #0
    f4a6:	44a5      	add	sp, r4
    f4a8:	9303      	str	r3, [sp, #12]
    f4aa:	2300      	movs	r3, #0
    f4ac:	2086      	movs	r0, #134	; 0x86
    f4ae:	9348      	str	r3, [sp, #288]	; 0x120
    f4b0:	9349      	str	r3, [sp, #292]	; 0x124
    f4b2:	ab05      	add	r3, sp, #20
    f4b4:	934a      	str	r3, [sp, #296]	; 0x128
    f4b6:	23be      	movs	r3, #190	; 0xbe
    f4b8:	0040      	lsls	r0, r0, #1
    f4ba:	1c0d      	adds	r5, r1, #0
    f4bc:	9201      	str	r2, [sp, #4]
    f4be:	a902      	add	r1, sp, #8
    f4c0:	4aae      	ldr	r2, [pc, #696]	; (f77c <__ssvfiscanf_r+0x2dc>)
    f4c2:	005b      	lsls	r3, r3, #1
    f4c4:	1809      	adds	r1, r1, r0
    f4c6:	50ca      	str	r2, [r1, r3]
    f4c8:	4aad      	ldr	r2, [pc, #692]	; (f780 <__ssvfiscanf_r+0x2e0>)
    f4ca:	a902      	add	r1, sp, #8
    f4cc:	3304      	adds	r3, #4
    f4ce:	1809      	adds	r1, r1, r0
    f4d0:	50ca      	str	r2, [r1, r3]
    f4d2:	9b01      	ldr	r3, [sp, #4]
    f4d4:	781c      	ldrb	r4, [r3, #0]
    f4d6:	2c00      	cmp	r4, #0
    f4d8:	d100      	bne.n	f4dc <__ssvfiscanf_r+0x3c>
    f4da:	e144      	b.n	f766 <__ssvfiscanf_r+0x2c6>
    f4dc:	4ea9      	ldr	r6, [pc, #676]	; (f784 <__ssvfiscanf_r+0x2e4>)
    f4de:	6833      	ldr	r3, [r6, #0]
    f4e0:	191b      	adds	r3, r3, r4
    f4e2:	785a      	ldrb	r2, [r3, #1]
    f4e4:	2308      	movs	r3, #8
    f4e6:	4013      	ands	r3, r2
    f4e8:	d023      	beq.n	f532 <__ssvfiscanf_r+0x92>
    f4ea:	686b      	ldr	r3, [r5, #4]
    f4ec:	2b00      	cmp	r3, #0
    f4ee:	dd10      	ble.n	f512 <__ssvfiscanf_r+0x72>
    f4f0:	682b      	ldr	r3, [r5, #0]
    f4f2:	6831      	ldr	r1, [r6, #0]
    f4f4:	781a      	ldrb	r2, [r3, #0]
    f4f6:	188a      	adds	r2, r1, r2
    f4f8:	7852      	ldrb	r2, [r2, #1]
    f4fa:	0712      	lsls	r2, r2, #28
    f4fc:	d515      	bpl.n	f52a <__ssvfiscanf_r+0x8a>
    f4fe:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f500:	3301      	adds	r3, #1
    f502:	9202      	str	r2, [sp, #8]
    f504:	3201      	adds	r2, #1
    f506:	9249      	str	r2, [sp, #292]	; 0x124
    f508:	686a      	ldr	r2, [r5, #4]
    f50a:	602b      	str	r3, [r5, #0]
    f50c:	3a01      	subs	r2, #1
    f50e:	606a      	str	r2, [r5, #4]
    f510:	e7eb      	b.n	f4ea <__ssvfiscanf_r+0x4a>
    f512:	2186      	movs	r1, #134	; 0x86
    f514:	23c0      	movs	r3, #192	; 0xc0
    f516:	0049      	lsls	r1, r1, #1
    f518:	aa02      	add	r2, sp, #8
    f51a:	1852      	adds	r2, r2, r1
    f51c:	005b      	lsls	r3, r3, #1
    f51e:	58d3      	ldr	r3, [r2, r3]
    f520:	1c38      	adds	r0, r7, #0
    f522:	1c29      	adds	r1, r5, #0
    f524:	4798      	blx	r3
    f526:	2800      	cmp	r0, #0
    f528:	d0e2      	beq.n	f4f0 <__ssvfiscanf_r+0x50>
    f52a:	9e01      	ldr	r6, [sp, #4]
    f52c:	3601      	adds	r6, #1
    f52e:	9601      	str	r6, [sp, #4]
    f530:	e7cf      	b.n	f4d2 <__ssvfiscanf_r+0x32>
    f532:	9a01      	ldr	r2, [sp, #4]
    f534:	1c56      	adds	r6, r2, #1
    f536:	2c25      	cmp	r4, #37	; 0x25
    f538:	d14f      	bne.n	f5da <__ssvfiscanf_r+0x13a>
    f53a:	9347      	str	r3, [sp, #284]	; 0x11c
    f53c:	9345      	str	r3, [sp, #276]	; 0x114
    f53e:	7853      	ldrb	r3, [r2, #1]
    f540:	2b2a      	cmp	r3, #42	; 0x2a
    f542:	d102      	bne.n	f54a <__ssvfiscanf_r+0xaa>
    f544:	3b1a      	subs	r3, #26
    f546:	9345      	str	r3, [sp, #276]	; 0x114
    f548:	3601      	adds	r6, #1
    f54a:	1c34      	adds	r4, r6, #0
    f54c:	7821      	ldrb	r1, [r4, #0]
    f54e:	1c0b      	adds	r3, r1, #0
    f550:	3b30      	subs	r3, #48	; 0x30
    f552:	2b09      	cmp	r3, #9
    f554:	d809      	bhi.n	f56a <__ssvfiscanf_r+0xca>
    f556:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f558:	3401      	adds	r4, #1
    f55a:	9301      	str	r3, [sp, #4]
    f55c:	230a      	movs	r3, #10
    f55e:	9a01      	ldr	r2, [sp, #4]
    f560:	4353      	muls	r3, r2
    f562:	3b30      	subs	r3, #48	; 0x30
    f564:	1859      	adds	r1, r3, r1
    f566:	9147      	str	r1, [sp, #284]	; 0x11c
    f568:	e7f0      	b.n	f54c <__ssvfiscanf_r+0xac>
    f56a:	4e87      	ldr	r6, [pc, #540]	; (f788 <__ssvfiscanf_r+0x2e8>)
    f56c:	2203      	movs	r2, #3
    f56e:	1c30      	adds	r0, r6, #0
    f570:	f7fb fa2a 	bl	a9c8 <memchr>
    f574:	2800      	cmp	r0, #0
    f576:	d008      	beq.n	f58a <__ssvfiscanf_r+0xea>
    f578:	1b80      	subs	r0, r0, r6
    f57a:	2601      	movs	r6, #1
    f57c:	4086      	lsls	r6, r0
    f57e:	1c30      	adds	r0, r6, #0
    f580:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f582:	3401      	adds	r4, #1
    f584:	4318      	orrs	r0, r3
    f586:	9301      	str	r3, [sp, #4]
    f588:	9045      	str	r0, [sp, #276]	; 0x114
    f58a:	1c66      	adds	r6, r4, #1
    f58c:	7824      	ldrb	r4, [r4, #0]
    f58e:	2c67      	cmp	r4, #103	; 0x67
    f590:	d810      	bhi.n	f5b4 <__ssvfiscanf_r+0x114>
    f592:	2c65      	cmp	r4, #101	; 0x65
    f594:	d300      	bcc.n	f598 <__ssvfiscanf_r+0xf8>
    f596:	e084      	b.n	f6a2 <__ssvfiscanf_r+0x202>
    f598:	2c5b      	cmp	r4, #91	; 0x5b
    f59a:	d05a      	beq.n	f652 <__ssvfiscanf_r+0x1b2>
    f59c:	d805      	bhi.n	f5aa <__ssvfiscanf_r+0x10a>
    f59e:	2c00      	cmp	r4, #0
    f5a0:	d100      	bne.n	f5a4 <__ssvfiscanf_r+0x104>
    f5a2:	e0e2      	b.n	f76a <__ssvfiscanf_r+0x2ca>
    f5a4:	2c25      	cmp	r4, #37	; 0x25
    f5a6:	d018      	beq.n	f5da <__ssvfiscanf_r+0x13a>
    f5a8:	e07d      	b.n	f6a6 <__ssvfiscanf_r+0x206>
    f5aa:	2c63      	cmp	r4, #99	; 0x63
    f5ac:	d05f      	beq.n	f66e <__ssvfiscanf_r+0x1ce>
    f5ae:	2c64      	cmp	r4, #100	; 0x64
    f5b0:	d046      	beq.n	f640 <__ssvfiscanf_r+0x1a0>
    f5b2:	e078      	b.n	f6a6 <__ssvfiscanf_r+0x206>
    f5b4:	2c70      	cmp	r4, #112	; 0x70
    f5b6:	d034      	beq.n	f622 <__ssvfiscanf_r+0x182>
    f5b8:	d807      	bhi.n	f5ca <__ssvfiscanf_r+0x12a>
    f5ba:	2c6e      	cmp	r4, #110	; 0x6e
    f5bc:	d05f      	beq.n	f67e <__ssvfiscanf_r+0x1de>
    f5be:	d841      	bhi.n	f644 <__ssvfiscanf_r+0x1a4>
    f5c0:	2c69      	cmp	r4, #105	; 0x69
    f5c2:	d170      	bne.n	f6a6 <__ssvfiscanf_r+0x206>
    f5c4:	2300      	movs	r3, #0
    f5c6:	9346      	str	r3, [sp, #280]	; 0x118
    f5c8:	e041      	b.n	f64e <__ssvfiscanf_r+0x1ae>
    f5ca:	2c75      	cmp	r4, #117	; 0x75
    f5cc:	d038      	beq.n	f640 <__ssvfiscanf_r+0x1a0>
    f5ce:	2c78      	cmp	r4, #120	; 0x78
    f5d0:	d02d      	beq.n	f62e <__ssvfiscanf_r+0x18e>
    f5d2:	2c73      	cmp	r4, #115	; 0x73
    f5d4:	d167      	bne.n	f6a6 <__ssvfiscanf_r+0x206>
    f5d6:	2302      	movs	r3, #2
    f5d8:	e047      	b.n	f66a <__ssvfiscanf_r+0x1ca>
    f5da:	686b      	ldr	r3, [r5, #4]
    f5dc:	2b00      	cmp	r3, #0
    f5de:	dd0e      	ble.n	f5fe <__ssvfiscanf_r+0x15e>
    f5e0:	682b      	ldr	r3, [r5, #0]
    f5e2:	781a      	ldrb	r2, [r3, #0]
    f5e4:	42a2      	cmp	r2, r4
    f5e6:	d000      	beq.n	f5ea <__ssvfiscanf_r+0x14a>
    f5e8:	e0bd      	b.n	f766 <__ssvfiscanf_r+0x2c6>
    f5ea:	3301      	adds	r3, #1
    f5ec:	686a      	ldr	r2, [r5, #4]
    f5ee:	602b      	str	r3, [r5, #0]
    f5f0:	9b49      	ldr	r3, [sp, #292]	; 0x124
    f5f2:	3a01      	subs	r2, #1
    f5f4:	9301      	str	r3, [sp, #4]
    f5f6:	3301      	adds	r3, #1
    f5f8:	606a      	str	r2, [r5, #4]
    f5fa:	9349      	str	r3, [sp, #292]	; 0x124
    f5fc:	e797      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f5fe:	2186      	movs	r1, #134	; 0x86
    f600:	23c0      	movs	r3, #192	; 0xc0
    f602:	0049      	lsls	r1, r1, #1
    f604:	aa02      	add	r2, sp, #8
    f606:	1852      	adds	r2, r2, r1
    f608:	005b      	lsls	r3, r3, #1
    f60a:	58d3      	ldr	r3, [r2, r3]
    f60c:	1c38      	adds	r0, r7, #0
    f60e:	1c29      	adds	r1, r5, #0
    f610:	4798      	blx	r3
    f612:	2800      	cmp	r0, #0
    f614:	d0e4      	beq.n	f5e0 <__ssvfiscanf_r+0x140>
    f616:	9848      	ldr	r0, [sp, #288]	; 0x120
    f618:	2800      	cmp	r0, #0
    f61a:	d000      	beq.n	f61e <__ssvfiscanf_r+0x17e>
    f61c:	e09f      	b.n	f75e <__ssvfiscanf_r+0x2be>
    f61e:	3801      	subs	r0, #1
    f620:	e0a5      	b.n	f76e <__ssvfiscanf_r+0x2ce>
    f622:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f624:	9301      	str	r3, [sp, #4]
    f626:	2320      	movs	r3, #32
    f628:	9a01      	ldr	r2, [sp, #4]
    f62a:	4313      	orrs	r3, r2
    f62c:	9345      	str	r3, [sp, #276]	; 0x114
    f62e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f630:	9301      	str	r3, [sp, #4]
    f632:	2380      	movs	r3, #128	; 0x80
    f634:	9a01      	ldr	r2, [sp, #4]
    f636:	009b      	lsls	r3, r3, #2
    f638:	4313      	orrs	r3, r2
    f63a:	9345      	str	r3, [sp, #276]	; 0x114
    f63c:	2310      	movs	r3, #16
    f63e:	e002      	b.n	f646 <__ssvfiscanf_r+0x1a6>
    f640:	230a      	movs	r3, #10
    f642:	e000      	b.n	f646 <__ssvfiscanf_r+0x1a6>
    f644:	2308      	movs	r3, #8
    f646:	9346      	str	r3, [sp, #280]	; 0x118
    f648:	2304      	movs	r3, #4
    f64a:	2c6e      	cmp	r4, #110	; 0x6e
    f64c:	dc0d      	bgt.n	f66a <__ssvfiscanf_r+0x1ca>
    f64e:	2303      	movs	r3, #3
    f650:	e00b      	b.n	f66a <__ssvfiscanf_r+0x1ca>
    f652:	1c31      	adds	r1, r6, #0
    f654:	a805      	add	r0, sp, #20
    f656:	f7fc fca9 	bl	bfac <__sccl>
    f65a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f65c:	1c06      	adds	r6, r0, #0
    f65e:	9301      	str	r3, [sp, #4]
    f660:	2340      	movs	r3, #64	; 0x40
    f662:	9a01      	ldr	r2, [sp, #4]
    f664:	4313      	orrs	r3, r2
    f666:	9345      	str	r3, [sp, #276]	; 0x114
    f668:	2301      	movs	r3, #1
    f66a:	934b      	str	r3, [sp, #300]	; 0x12c
    f66c:	e01f      	b.n	f6ae <__ssvfiscanf_r+0x20e>
    f66e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f670:	9301      	str	r3, [sp, #4]
    f672:	2340      	movs	r3, #64	; 0x40
    f674:	9a01      	ldr	r2, [sp, #4]
    f676:	4313      	orrs	r3, r2
    f678:	9345      	str	r3, [sp, #276]	; 0x114
    f67a:	2300      	movs	r3, #0
    f67c:	e7f5      	b.n	f66a <__ssvfiscanf_r+0x1ca>
    f67e:	9945      	ldr	r1, [sp, #276]	; 0x114
    f680:	06cb      	lsls	r3, r1, #27
    f682:	d500      	bpl.n	f686 <__ssvfiscanf_r+0x1e6>
    f684:	e753      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f686:	9b03      	ldr	r3, [sp, #12]
    f688:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f68a:	07c8      	lsls	r0, r1, #31
    f68c:	d504      	bpl.n	f698 <__ssvfiscanf_r+0x1f8>
    f68e:	1d19      	adds	r1, r3, #4
    f690:	9103      	str	r1, [sp, #12]
    f692:	681b      	ldr	r3, [r3, #0]
    f694:	801a      	strh	r2, [r3, #0]
    f696:	e74a      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f698:	1d19      	adds	r1, r3, #4
    f69a:	9103      	str	r1, [sp, #12]
    f69c:	681b      	ldr	r3, [r3, #0]
    f69e:	601a      	str	r2, [r3, #0]
    f6a0:	e745      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f6a2:	2305      	movs	r3, #5
    f6a4:	e7e1      	b.n	f66a <__ssvfiscanf_r+0x1ca>
    f6a6:	2303      	movs	r3, #3
    f6a8:	934b      	str	r3, [sp, #300]	; 0x12c
    f6aa:	3307      	adds	r3, #7
    f6ac:	9346      	str	r3, [sp, #280]	; 0x118
    f6ae:	686b      	ldr	r3, [r5, #4]
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	dd04      	ble.n	f6be <__ssvfiscanf_r+0x21e>
    f6b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    f6b6:	9301      	str	r3, [sp, #4]
    f6b8:	065b      	lsls	r3, r3, #25
    f6ba:	d518      	bpl.n	f6ee <__ssvfiscanf_r+0x24e>
    f6bc:	e01f      	b.n	f6fe <__ssvfiscanf_r+0x25e>
    f6be:	2186      	movs	r1, #134	; 0x86
    f6c0:	23c0      	movs	r3, #192	; 0xc0
    f6c2:	0049      	lsls	r1, r1, #1
    f6c4:	aa02      	add	r2, sp, #8
    f6c6:	1852      	adds	r2, r2, r1
    f6c8:	005b      	lsls	r3, r3, #1
    f6ca:	58d3      	ldr	r3, [r2, r3]
    f6cc:	1c38      	adds	r0, r7, #0
    f6ce:	1c29      	adds	r1, r5, #0
    f6d0:	4798      	blx	r3
    f6d2:	2800      	cmp	r0, #0
    f6d4:	d0ee      	beq.n	f6b4 <__ssvfiscanf_r+0x214>
    f6d6:	e79e      	b.n	f616 <__ssvfiscanf_r+0x176>
    f6d8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    f6da:	9201      	str	r2, [sp, #4]
    f6dc:	3201      	adds	r2, #1
    f6de:	9249      	str	r2, [sp, #292]	; 0x124
    f6e0:	686a      	ldr	r2, [r5, #4]
    f6e2:	3a01      	subs	r2, #1
    f6e4:	606a      	str	r2, [r5, #4]
    f6e6:	2a00      	cmp	r2, #0
    f6e8:	dd13      	ble.n	f712 <__ssvfiscanf_r+0x272>
    f6ea:	3301      	adds	r3, #1
    f6ec:	602b      	str	r3, [r5, #0]
    f6ee:	682b      	ldr	r3, [r5, #0]
    f6f0:	4924      	ldr	r1, [pc, #144]	; (f784 <__ssvfiscanf_r+0x2e4>)
    f6f2:	781a      	ldrb	r2, [r3, #0]
    f6f4:	6809      	ldr	r1, [r1, #0]
    f6f6:	188a      	adds	r2, r1, r2
    f6f8:	7852      	ldrb	r2, [r2, #1]
    f6fa:	0712      	lsls	r2, r2, #28
    f6fc:	d4ec      	bmi.n	f6d8 <__ssvfiscanf_r+0x238>
    f6fe:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    f700:	2b02      	cmp	r3, #2
    f702:	dc13      	bgt.n	f72c <__ssvfiscanf_r+0x28c>
    f704:	1c38      	adds	r0, r7, #0
    f706:	a945      	add	r1, sp, #276	; 0x114
    f708:	1c2a      	adds	r2, r5, #0
    f70a:	ab03      	add	r3, sp, #12
    f70c:	f7fc f9a0 	bl	ba50 <_scanf_chars>
    f710:	e01f      	b.n	f752 <__ssvfiscanf_r+0x2b2>
    f712:	2186      	movs	r1, #134	; 0x86
    f714:	23c0      	movs	r3, #192	; 0xc0
    f716:	0049      	lsls	r1, r1, #1
    f718:	aa02      	add	r2, sp, #8
    f71a:	1852      	adds	r2, r2, r1
    f71c:	005b      	lsls	r3, r3, #1
    f71e:	58d3      	ldr	r3, [r2, r3]
    f720:	1c38      	adds	r0, r7, #0
    f722:	1c29      	adds	r1, r5, #0
    f724:	4798      	blx	r3
    f726:	2800      	cmp	r0, #0
    f728:	d0e1      	beq.n	f6ee <__ssvfiscanf_r+0x24e>
    f72a:	e774      	b.n	f616 <__ssvfiscanf_r+0x176>
    f72c:	2b04      	cmp	r3, #4
    f72e:	dc06      	bgt.n	f73e <__ssvfiscanf_r+0x29e>
    f730:	1c38      	adds	r0, r7, #0
    f732:	a945      	add	r1, sp, #276	; 0x114
    f734:	1c2a      	adds	r2, r5, #0
    f736:	ab03      	add	r3, sp, #12
    f738:	f7fc f9e8 	bl	bb0c <_scanf_i>
    f73c:	e009      	b.n	f752 <__ssvfiscanf_r+0x2b2>
    f73e:	4b13      	ldr	r3, [pc, #76]	; (f78c <__ssvfiscanf_r+0x2ec>)
    f740:	2b00      	cmp	r3, #0
    f742:	d100      	bne.n	f746 <__ssvfiscanf_r+0x2a6>
    f744:	e6f3      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f746:	1c38      	adds	r0, r7, #0
    f748:	a945      	add	r1, sp, #276	; 0x114
    f74a:	1c2a      	adds	r2, r5, #0
    f74c:	ab03      	add	r3, sp, #12
    f74e:	f7fb ff95 	bl	b67c <_scanf_float>
    f752:	2801      	cmp	r0, #1
    f754:	d007      	beq.n	f766 <__ssvfiscanf_r+0x2c6>
    f756:	2802      	cmp	r0, #2
    f758:	d000      	beq.n	f75c <__ssvfiscanf_r+0x2bc>
    f75a:	e6e8      	b.n	f52e <__ssvfiscanf_r+0x8e>
    f75c:	e75b      	b.n	f616 <__ssvfiscanf_r+0x176>
    f75e:	89ab      	ldrh	r3, [r5, #12]
    f760:	065b      	lsls	r3, r3, #25
    f762:	d504      	bpl.n	f76e <__ssvfiscanf_r+0x2ce>
    f764:	e001      	b.n	f76a <__ssvfiscanf_r+0x2ca>
    f766:	9848      	ldr	r0, [sp, #288]	; 0x120
    f768:	e001      	b.n	f76e <__ssvfiscanf_r+0x2ce>
    f76a:	2001      	movs	r0, #1
    f76c:	4240      	negs	r0, r0
    f76e:	23a7      	movs	r3, #167	; 0xa7
    f770:	009b      	lsls	r3, r3, #2
    f772:	449d      	add	sp, r3
    f774:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f776:	46c0      	nop			; (mov r8, r8)
    f778:	fffffd64 	.word	0xfffffd64
    f77c:	0000f3e9 	.word	0x0000f3e9
    f780:	0000f463 	.word	0x0000f463
    f784:	20000138 	.word	0x20000138
    f788:	000109ae 	.word	0x000109ae
    f78c:	0000b67d 	.word	0x0000b67d

0000f790 <_read_r>:
    f790:	b538      	push	{r3, r4, r5, lr}
    f792:	1c05      	adds	r5, r0, #0
    f794:	2000      	movs	r0, #0
    f796:	4c07      	ldr	r4, [pc, #28]	; (f7b4 <_read_r+0x24>)
    f798:	6020      	str	r0, [r4, #0]
    f79a:	1c08      	adds	r0, r1, #0
    f79c:	1c11      	adds	r1, r2, #0
    f79e:	1c1a      	adds	r2, r3, #0
    f7a0:	f7f4 feee 	bl	4580 <_read>
    f7a4:	1c43      	adds	r3, r0, #1
    f7a6:	d103      	bne.n	f7b0 <_read_r+0x20>
    f7a8:	6823      	ldr	r3, [r4, #0]
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d000      	beq.n	f7b0 <_read_r+0x20>
    f7ae:	602b      	str	r3, [r5, #0]
    f7b0:	bd38      	pop	{r3, r4, r5, pc}
    f7b2:	46c0      	nop			; (mov r8, r8)
    f7b4:	20004518 	.word	0x20004518

0000f7b8 <_malloc_usable_size_r>:
    f7b8:	1f0b      	subs	r3, r1, #4
    f7ba:	681a      	ldr	r2, [r3, #0]
    f7bc:	1f10      	subs	r0, r2, #4
    f7be:	2a00      	cmp	r2, #0
    f7c0:	da04      	bge.n	f7cc <_malloc_usable_size_r+0x14>
    f7c2:	1889      	adds	r1, r1, r2
    f7c4:	3904      	subs	r1, #4
    f7c6:	680b      	ldr	r3, [r1, #0]
    f7c8:	18d0      	adds	r0, r2, r3
    f7ca:	3804      	subs	r0, #4
    f7cc:	4770      	bx	lr
	...

0000f7d0 <_getpid>:
    f7d0:	2258      	movs	r2, #88	; 0x58
    f7d2:	2001      	movs	r0, #1
    f7d4:	4b01      	ldr	r3, [pc, #4]	; (f7dc <_getpid+0xc>)
    f7d6:	4240      	negs	r0, r0
    f7d8:	601a      	str	r2, [r3, #0]
    f7da:	4770      	bx	lr
    f7dc:	20004518 	.word	0x20004518

0000f7e0 <_kill>:
    f7e0:	2258      	movs	r2, #88	; 0x58
    f7e2:	2001      	movs	r0, #1
    f7e4:	4b01      	ldr	r3, [pc, #4]	; (f7ec <_kill+0xc>)
    f7e6:	4240      	negs	r0, r0
    f7e8:	601a      	str	r2, [r3, #0]
    f7ea:	4770      	bx	lr
    f7ec:	20004518 	.word	0x20004518

0000f7f0 <__gnu_thumb1_case_uqi>:
    f7f0:	b402      	push	{r1}
    f7f2:	4671      	mov	r1, lr
    f7f4:	0849      	lsrs	r1, r1, #1
    f7f6:	0049      	lsls	r1, r1, #1
    f7f8:	5c09      	ldrb	r1, [r1, r0]
    f7fa:	0049      	lsls	r1, r1, #1
    f7fc:	448e      	add	lr, r1
    f7fe:	bc02      	pop	{r1}
    f800:	4770      	bx	lr
    f802:	46c0      	nop			; (mov r8, r8)
    f804:	0000018e 	.word	0x0000018e
    f808:	0000018e 	.word	0x0000018e
    f80c:	0000017c 	.word	0x0000017c
    f810:	0000017c 	.word	0x0000017c
    f814:	0000018e 	.word	0x0000018e
    f818:	0000018e 	.word	0x0000018e
    f81c:	0000018e 	.word	0x0000018e
    f820:	0000018e 	.word	0x0000018e
    f824:	0000018e 	.word	0x0000018e
    f828:	0000018e 	.word	0x0000018e
    f82c:	0000018e 	.word	0x0000018e
    f830:	0000018e 	.word	0x0000018e
    f834:	0000018e 	.word	0x0000018e
    f838:	0000018e 	.word	0x0000018e
    f83c:	0000018e 	.word	0x0000018e
    f840:	0000018e 	.word	0x0000018e
    f844:	0000017c 	.word	0x0000017c
    f848:	0000017c 	.word	0x0000017c
    f84c:	0000018e 	.word	0x0000018e
    f850:	0000017c 	.word	0x0000017c
    f854:	666e6f63 	.word	0x666e6f63
    f858:	48206769 	.word	0x48206769
    f85c:	0d20494d 	.word	0x0d20494d
    f860:	0000000a 	.word	0x0000000a
    f864:	2d6a626f 	.word	0x2d6a626f
    f868:	6e69703e 	.word	0x6e69703e
    f86c:	203d2120 	.word	0x203d2120
    f870:	6e695028 	.word	0x6e695028
    f874:	656d614e 	.word	0x656d614e
    f878:	00434e29 	.word	0x00434e29
    f87c:	2e2f2e2e 	.word	0x2e2f2e2e
    f880:	65626d2f 	.word	0x65626d2f
    f884:	41542f64 	.word	0x41542f64
    f888:	54454752 	.word	0x54454752
    f88c:	4d41535f 	.word	0x4d41535f
    f890:	47313252 	.word	0x47313252
    f894:	2f413831 	.word	0x2f413831
    f898:	47524154 	.word	0x47524154
    f89c:	415f5445 	.word	0x415f5445
    f8a0:	6c656d74 	.word	0x6c656d74
    f8a4:	5241542f 	.word	0x5241542f
    f8a8:	5f544547 	.word	0x5f544547
    f8ac:	5f4d4153 	.word	0x5f4d4153
    f8b0:	74726f43 	.word	0x74726f43
    f8b4:	304d7865 	.word	0x304d7865
    f8b8:	70672f50 	.word	0x70672f50
    f8bc:	6f5f6f69 	.word	0x6f5f6f69
    f8c0:	63656a62 	.word	0x63656a62
    f8c4:	00682e74 	.word	0x00682e74
    f8c8:	65746e69 	.word	0x65746e69
    f8cc:	6c616e72 	.word	0x6c616e72
    f8d0:	6f6c6320 	.word	0x6f6c6320
    f8d4:	63206b63 	.word	0x63206b63
    f8d8:	69666e6f 	.word	0x69666e6f
    f8dc:	000a0d67 	.word	0x000a0d67
    f8e0:	72650909 	.word	0x72650909
    f8e4:	20726f72 	.word	0x20726f72
    f8e8:	3a737070 	.word	0x3a737070
    f8ec:	756c2520 	.word	0x756c2520
    f8f0:	75252073 	.word	0x75252073
    f8f4:	253a7409 	.word	0x253a7409
    f8f8:	0073756c 	.word	0x0073756c
    f8fc:	72650909 	.word	0x72650909
    f900:	20726f72 	.word	0x20726f72
    f904:	3a737070 	.word	0x3a737070
    f908:	6c252d20 	.word	0x6c252d20
    f90c:	25207375 	.word	0x25207375
    f910:	3a740975 	.word	0x3a740975
    f914:	73756c25 	.word	0x73756c25
    f918:	00000000 	.word	0x00000000
    f91c:	666e6f63 	.word	0x666e6f63
    f920:	70206669 	.word	0x70206669
    f924:	0a0d7370 	.word	0x0a0d7370
    f928:	00000000 	.word	0x00000000
    f92c:	666f5309 	.word	0x666f5309
    f930:	72617774 	.word	0x72617774
    f934:	6f432065 	.word	0x6f432065
    f938:	63657272 	.word	0x63657272
    f93c:	6e6f6974 	.word	0x6e6f6974
    f940:	00000020 	.word	0x00000020
    f944:	70750909 	.word	0x70750909
    f948:	65746164 	.word	0x65746164
    f94c:	6d697420 	.word	0x6d697420
    f950:	6f632065 	.word	0x6f632065
    f954:	203a7272 	.word	0x203a7272
    f958:	25286425 	.word	0x25286425
    f95c:	73202964 	.word	0x73202964
    f960:	206e6769 	.word	0x206e6769
    f964:	6425203a 	.word	0x6425203a
    f968:	74697720 	.word	0x74697720
    f96c:	64252068 	.word	0x64252068
    f970:	6d617320 	.word	0x6d617320
    f974:	00656c70 	.word	0x00656c70
    f978:	646e6509 	.word	0x646e6509
    f97c:	666f5320 	.word	0x666f5320
    f980:	72617774 	.word	0x72617774
    f984:	6f632065 	.word	0x6f632065
    f988:	63657272 	.word	0x63657272
    f98c:	6e6f6974 	.word	0x6e6f6974
    f990:	00000000 	.word	0x00000000
    f994:	72614809 	.word	0x72614809
    f998:	72617764 	.word	0x72617764
    f99c:	6f632065 	.word	0x6f632065
    f9a0:	63657272 	.word	0x63657272
    f9a4:	6e6f6974 	.word	0x6e6f6974
    f9a8:	00000000 	.word	0x00000000
    f9ac:	62460909 	.word	0x62460909
    f9b0:	3a747365 	.word	0x3a747365
    f9b4:	20752520 	.word	0x20752520
    f9b8:	202c7a48 	.word	0x202c7a48
    f9bc:	65737546 	.word	0x65737546
    f9c0:	7525203d 	.word	0x7525203d
    f9c4:	207a4820 	.word	0x207a4820
    f9c8:	6e756f63 	.word	0x6e756f63
    f9cc:	64253d74 	.word	0x64253d74
    f9d0:	00000000 	.word	0x00000000
    f9d4:	646e6509 	.word	0x646e6509
    f9d8:	726f6320 	.word	0x726f6320
    f9dc:	74636572 	.word	0x74636572
    f9e0:	006e6f69 	.word	0x006e6f69
    f9e4:	20756c25 	.word	0x20756c25
    f9e8:	75252c73 	.word	0x75252c73
    f9ec:	00000a0d 	.word	0x00000a0d
    f9f0:	756c252d 	.word	0x756c252d
    f9f4:	252c7320 	.word	0x252c7320
    f9f8:	000a0d75 	.word	0x000a0d75
    f9fc:	70750909 	.word	0x70750909
    fa00:	65746164 	.word	0x65746164
    fa04:	6f6c6320 	.word	0x6f6c6320
    fa08:	6f206b63 	.word	0x6f206b63
    fa0c:	65736666 	.word	0x65736666
    fa10:	2b203a74 	.word	0x2b203a74
    fa14:	73756c25 	.word	0x73756c25
    fa18:	646c252c 	.word	0x646c252c
    fa1c:	6c252b5b 	.word	0x6c252b5b
    fa20:	252c7375 	.word	0x252c7375
    fa24:	6d20756c 	.word	0x6d20756c
    fa28:	257e2c73 	.word	0x257e2c73
    fa2c:	7520756c 	.word	0x7520756c
    fa30:	74095d73 	.word	0x74095d73
    fa34:	6c25203a 	.word	0x6c25203a
    fa38:	6c252c75 	.word	0x6c252c75
    fa3c:	00000075 	.word	0x00000075
    fa40:	70750909 	.word	0x70750909
    fa44:	65746164 	.word	0x65746164
    fa48:	6f6c6320 	.word	0x6f6c6320
    fa4c:	6f206b63 	.word	0x6f206b63
    fa50:	65736666 	.word	0x65736666
    fa54:	2d203a74 	.word	0x2d203a74
    fa58:	73756c25 	.word	0x73756c25
    fa5c:	646c252c 	.word	0x646c252c
    fa60:	6c252d5b 	.word	0x6c252d5b
    fa64:	252c7375 	.word	0x252c7375
    fa68:	736d756c 	.word	0x736d756c
    fa6c:	6c257e2c 	.word	0x6c257e2c
    fa70:	73752075 	.word	0x73752075
    fa74:	3a74095d 	.word	0x3a74095d
    fa78:	756c2520 	.word	0x756c2520
    fa7c:	756c252c 	.word	0x756c252c
    fa80:	00000000 	.word	0x00000000
    fa84:	6b636170 	.word	0x6b636170
    fa88:	69537465 	.word	0x69537465
    fa8c:	253a657a 	.word	0x253a657a
    fa90:	000a0d64 	.word	0x000a0d64
    fa94:	25202b74 	.word	0x25202b74
    fa98:	78253a64 	.word	0x78253a64
    fa9c:	00000a0d 	.word	0x00000a0d
    faa0:	6e797309 	.word	0x6e797309
    faa4:	65722063 	.word	0x65722063
    faa8:	76696563 	.word	0x76696563
    faac:	00000065 	.word	0x00000065
    fab0:	6e797309 	.word	0x6e797309
    fab4:	6f632063 	.word	0x6f632063
    fab8:	656c706d 	.word	0x656c706d
    fabc:	00646574 	.word	0x00646574
    fac0:	6c656409 	.word	0x6c656409
    fac4:	72207961 	.word	0x72207961
    fac8:	6f707365 	.word	0x6f707365
    facc:	2065736e 	.word	0x2065736e
    fad0:	65636572 	.word	0x65636572
    fad4:	00657669 	.word	0x00657669
    fad8:	70750909 	.word	0x70750909
    fadc:	65746164 	.word	0x65746164
    fae0:	6c656420 	.word	0x6c656420
    fae4:	203a7961 	.word	0x203a7961
    fae8:	756c252b 	.word	0x756c252b
    faec:	75252c73 	.word	0x75252c73
    faf0:	2c736d20 	.word	0x2c736d20
    faf4:	756c257e 	.word	0x756c257e
    faf8:	00737520 	.word	0x00737520
    fafc:	70750909 	.word	0x70750909
    fb00:	65746164 	.word	0x65746164
    fb04:	6c656420 	.word	0x6c656420
    fb08:	203a7961 	.word	0x203a7961
    fb0c:	756c252d 	.word	0x756c252d
    fb10:	75252c73 	.word	0x75252c73
    fb14:	2c736d20 	.word	0x2c736d20
    fb18:	756c257e 	.word	0x756c257e
    fb1c:	00737520 	.word	0x00737520
    fb20:	6c656409 	.word	0x6c656409
    fb24:	72207961 	.word	0x72207961
    fb28:	6f707365 	.word	0x6f707365
    fb2c:	2065736e 	.word	0x2065736e
    fb30:	706d6f63 	.word	0x706d6f63
    fb34:	6574656c 	.word	0x6574656c
    fb38:	00000064 	.word	0x00000064
    fb3c:	6c656409 	.word	0x6c656409
    fb40:	72207961 	.word	0x72207961
    fb44:	6f707365 	.word	0x6f707365
    fb48:	2065736e 	.word	0x2065736e
    fb4c:	20746f6e 	.word	0x20746f6e
    fb50:	20726f66 	.word	0x20726f66
    fb54:	0000656d 	.word	0x0000656d
    fb58:	72724509 	.word	0x72724509
    fb5c:	20727565 	.word	0x20727565
    fb60:	65707974 	.word	0x65707974
    fb64:	6b6e7520 	.word	0x6b6e7520
    fb68:	00776f6e 	.word	0x00776f6e
    fb6c:	6e6f7277 	.word	0x6e6f7277
    fb70:	79742067 	.word	0x79742067
    fb74:	00006570 	.word	0x00006570
    fb78:	6f727265 	.word	0x6f727265
    fb7c:	52432072 	.word	0x52432072
    fb80:	21212143 	.word	0x21212143
    fb84:	21212121 	.word	0x21212121
    fb88:	21212121 	.word	0x21212121
    fb8c:	21212121 	.word	0x21212121
    fb90:	21212121 	.word	0x21212121
    fb94:	21212121 	.word	0x21212121
    fb98:	21212121 	.word	0x21212121
    fb9c:	00000a0d 	.word	0x00000a0d
    fba0:	676e656c 	.word	0x676e656c
    fba4:	25206874 	.word	0x25206874
    fba8:	000a0d64 	.word	0x000a0d64
    fbac:	66667562 	.word	0x66667562
    fbb0:	25207265 	.word	0x25207265
    fbb4:	25203a64 	.word	0x25203a64
    fbb8:	000a0d78 	.word	0x000a0d78
    fbbc:	6c656409 	.word	0x6c656409
    fbc0:	72207961 	.word	0x72207961
    fbc4:	65757165 	.word	0x65757165
    fbc8:	73207473 	.word	0x73207473
    fbcc:	00646e65 	.word	0x00646e65
    fbd0:	54494d48 	.word	0x54494d48
    fbd4:	006b7361 	.word	0x006b7361
    fbd8:	72616d53 	.word	0x72616d53
    fbdc:	74654d74 	.word	0x74654d74
    fbe0:	61547265 	.word	0x61547265
    fbe4:	00006b73 	.word	0x00006b73
    fbe8:	656d6974 	.word	0x656d6974
    fbec:	00000000 	.word	0x00000000
    fbf0:	454c4449 	.word	0x454c4449
    fbf4:	00000000 	.word	0x00000000
    fbf8:	0a0d0a0d 	.word	0x0a0d0a0d
    fbfc:	2a2a2a2a 	.word	0x2a2a2a2a
    fc00:	2a2a2a2a 	.word	0x2a2a2a2a
    fc04:	2a2a2a2a 	.word	0x2a2a2a2a
    fc08:	2a2a2a2a 	.word	0x2a2a2a2a
    fc0c:	2a2a2a2a 	.word	0x2a2a2a2a
    fc10:	2a2a2a2a 	.word	0x2a2a2a2a
    fc14:	2a2a2a2a 	.word	0x2a2a2a2a
    fc18:	2a2a2a2a 	.word	0x2a2a2a2a
    fc1c:	2a2a2a2a 	.word	0x2a2a2a2a
    fc20:	2a2a2a2a 	.word	0x2a2a2a2a
    fc24:	2a2a2a2a 	.word	0x2a2a2a2a
    fc28:	2a2a2a2a 	.word	0x2a2a2a2a
    fc2c:	2a2a2a2a 	.word	0x2a2a2a2a
    fc30:	2a2a2a2a 	.word	0x2a2a2a2a
    fc34:	2a2a2a2a 	.word	0x2a2a2a2a
    fc38:	2a2a2a2a 	.word	0x2a2a2a2a
    fc3c:	2a2a2a2a 	.word	0x2a2a2a2a
    fc40:	0a0d2a2a 	.word	0x0a0d2a2a
    fc44:	00000000 	.word	0x00000000
    fc48:	6b636974 	.word	0x6b636974
    fc4c:	6d697420 	.word	0x6d697420
    fc50:	25203a65 	.word	0x25203a65
    fc54:	6d20756c 	.word	0x6d20756c
    fc58:	000a0d73 	.word	0x000a0d73
    fc5c:	76616c53 	.word	0x76616c53
    fc60:	6c432065 	.word	0x6c432065
    fc64:	206b636f 	.word	0x206b636f
    fc68:	00000a0d 	.word	0x00000a0d
    fc6c:	20646e65 	.word	0x20646e65
    fc70:	666e6f63 	.word	0x666e6f63
    fc74:	61206769 	.word	0x61206769
    fc78:	696c7070 	.word	0x696c7070
    fc7c:	69746163 	.word	0x69746163
    fc80:	62206e6f 	.word	0x62206e6f
    fc84:	6e696765 	.word	0x6e696765
    fc88:	00000a0d 	.word	0x00000a0d
    fc8c:	2a2a0a0d 	.word	0x2a2a0a0d
    fc90:	2a2a2a2a 	.word	0x2a2a2a2a
    fc94:	2a2a2a2a 	.word	0x2a2a2a2a
    fc98:	2a2a2a2a 	.word	0x2a2a2a2a
    fc9c:	2a2a2a2a 	.word	0x2a2a2a2a
    fca0:	2a2a2a2a 	.word	0x2a2a2a2a
    fca4:	2a2a2a2a 	.word	0x2a2a2a2a
    fca8:	2a2a2a2a 	.word	0x2a2a2a2a
    fcac:	2a2a2a2a 	.word	0x2a2a2a2a
    fcb0:	2a2a2a2a 	.word	0x2a2a2a2a
    fcb4:	2a2a2a2a 	.word	0x2a2a2a2a
    fcb8:	2a2a2a2a 	.word	0x2a2a2a2a
    fcbc:	2a2a2a2a 	.word	0x2a2a2a2a
    fcc0:	2a2a2a2a 	.word	0x2a2a2a2a
    fcc4:	2a2a2a2a 	.word	0x2a2a2a2a
    fcc8:	2a2a2a2a 	.word	0x2a2a2a2a
    fccc:	2a2a2a2a 	.word	0x2a2a2a2a
    fcd0:	2a2a2a2a 	.word	0x2a2a2a2a
    fcd4:	0a0d0a0d 	.word	0x0a0d0a0d
    fcd8:	00000000 	.word	0x00000000
    fcdc:	70617274 	.word	0x70617274
    fce0:	21212121 	.word	0x21212121
    fce4:	21212121 	.word	0x21212121
    fce8:	21212121 	.word	0x21212121
    fcec:	21212121 	.word	0x21212121
    fcf0:	21212121 	.word	0x21212121
    fcf4:	21212121 	.word	0x21212121
    fcf8:	21212121 	.word	0x21212121
    fcfc:	21212121 	.word	0x21212121
    fd00:	21212121 	.word	0x21212121
    fd04:	21212121 	.word	0x21212121
    fd08:	0a0d2121 	.word	0x0a0d2121
    fd0c:	00000000 	.word	0x00000000
    fd10:	00003738 	.word	0x00003738
    fd14:	00003758 	.word	0x00003758
    fd18:	00003748 	.word	0x00003748
    fd1c:	00003778 	.word	0x00003778
    fd20:	00003768 	.word	0x00003768
    fd24:	00003788 	.word	0x00003788
    fd28:	0000397e 	.word	0x0000397e
    fd2c:	00003a46 	.word	0x00003a46
    fd30:	000039a0 	.word	0x000039a0
    fd34:	000039e6 	.word	0x000039e6
    fd38:	000039c8 	.word	0x000039c8
    fd3c:	000039f0 	.word	0x000039f0
    fd40:	00003a04 	.word	0x00003a04
    fd44:	00003a18 	.word	0x00003a18
    fd48:	00003a38 	.word	0x00003a38

0000fd4c <_ZZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_tE8pwrtable>:
    fd4c:	0f0f0f0f 0e0e0e0f 0c0c0d0d 08090a0b     ................
    fd5c:	02040607 00000000 00000000              ............

0000fd68 <_ZTV12ChannelRadio>:
	...
    fd70:	00003d7d 00003d99 00003db5 00003d01     }=...=...=...=..
    fd80:	00003cfd 00003e65 00003df1 00003d39     .<..e>...=..9=..
    fd90:	00003d4d 00003d65                       M=..e=..

0000fd98 <_ZTV13ChannelSerial>:
	...
    fda0:	00003fd9 0000400d 00004029 00004039     .?...@..)@..9@..
    fdb0:	00004049 00000052                       I@..R...

0000fdb8 <_ZTV5Relay>:
	...
    fdc0:	000040c1 00004281 000040c5 000040b5     .@...B...@...@..
    fdd0:	000040b9 000040bd                       .@...@..

0000fdd8 <_ZTV20RelayBufferedTaskCLP>:
	...
    fde0:	00004291 00004295 00004181 000040b5     .B...B...A...@..
    fdf0:	000040b9 000040bd 00004125 00004179     .@...@..%A..yA..

0000fe00 <_ZTV13RelayBuffered>:
	...
    fe08:	0000427d 000042a5 000040e1 000040b5     }B...B...@...@..
    fe18:	000040b9 000040bd 00004125 00004179     .@...@..%A..yA..

0000fe28 <__stdin_name>:
    fe28:	6474732f 00006e69                       /stdin..

0000fe30 <__stderr_name>:
    fe30:	6474732f 00727265                       /stderr.

0000fe38 <__stdout_name>:
    fe38:	6474732f 0074756f                       /stdout.

0000fe40 <_ZTVN4mbed10FileHandleE>:
	...
    fe48:	00004639 00004639 00004639 00004639     9F..9F..9F..9F..
    fe58:	00004639 00004639 0000438d 00000000     9F..9F...C......
    fe68:	00000000 0070253a 65637845 6f697470     ....:%p.Exceptio
    fe78:	0000006e                                n...

0000fe7c <CSWTCH.41>:
    fe7c:	00100000 00200000 00300000 006a626f     ...... ...0.obj.
    fe8c:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    fe9c:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    feac:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    febc:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    fecc:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    fedc:	6f435f4d 78657472 5c50304d 69726573     M_CortexM0P\seri
    feec:	615f6c61 632e6970 00000000 75616228     al_api.c....(bau
    fefc:	74617264 3d3d2065 30313120 7c7c2029     drate == 110) ||
    ff0c:	61622820 61726475 3d206574 3531203d      (baudrate == 15
    ff1c:	7c202930 6228207c 72647561 20657461     0) || (baudrate 
    ff2c:	33203d3d 20293030 28207c7c 64756162     == 300) || (baud
    ff3c:	65746172 203d3d20 30303231 7c7c2029     rate == 1200) ||
    ff4c:	61622820 61726475 3d206574 3432203d      (baudrate == 24
    ff5c:	20293030 28207c7c 64756162 65746172     00) || (baudrate
    ff6c:	203d3d20 30303834 7c7c2029 61622820      == 4800) || (ba
    ff7c:	61726475 3d206574 3639203d 20293030     udrate == 9600) 
    ff8c:	28207c7c 64756162 65746172 203d3d20     || (baudrate == 
    ff9c:	30323931 7c202930 6228207c 72647561     19200) || (baudr
    ffac:	20657461 33203d3d 30303438 7c7c2029     ate == 38400) ||
    ffbc:	61622820 61726475 3d206574 3735203d      (baudrate == 57
    ffcc:	29303036 207c7c20 75616228 74617264     600) || (baudrat
    ffdc:	3d3d2065 35313120 29303032 207c7c20     e == 115200) || 
    ffec:	75616228 74617264 3d3d2065 30333220     (baudrate == 230
    fffc:	29303034 207c7c20 75616228 74617264     400) || (baudrat
   1000c:	3d3d2065 30363420 29303038 207c7c20     e == 460800) || 
   1001c:	75616228 74617264 3d3d2065 31323920     (baudrate == 921
   1002c:	29303036 00000000 6f747328 69625f70     600)....(stop_bi
   1003c:	3d207374 2931203d 207c7c20 6f747328     ts == 1) || (sto
   1004c:	69625f70 3d207374 2932203d 00000000     p_bits == 2)....
   1005c:	72617028 20797469 50203d3d 74697261     (parity == Parit
   1006c:	6e6f4e79 7c202965 7028207c 74697261     yNone) || (parit
   1007c:	3d3d2079 72615020 4f797469 20296464     y == ParityOdd) 
   1008c:	28207c7c 69726170 3d207974 6150203d     || (parity == Pa
   1009c:	79746972 6e657645 00000029 74616428     rityEven)...(dat
   100ac:	69625f61 3d207374 2935203d 207c7c20     a_bits == 5) || 
   100bc:	74616428 69625f61 3d207374 2936203d     (data_bits == 6)
   100cc:	207c7c20 74616428 69625f61 3d207374      || (data_bits =
   100dc:	2937203d 207c7c20 74616428 69625f61     = 7) || (data_bi
   100ec:	3d207374 2938203d 00000000 21207874     ts == 8)....tx !
   100fc:	7628203d 2a64696f 00003029 74646977     = (void*)0..widt
   1010c:	3d3d2068 00003820 21207872 7628203d     h == 8..rx != (v
   1011c:	2a64696f 00003029 00000000              oid*)0......

00010128 <_ZTVN4mbed3SPIE>:
	...
   10130:	00005711 000055a1 000055d1 00000000     .W...U...U......

00010140 <_ZTVN4mbed6SerialE>:
	...
   10148:	000004d5 000005e1 00005725 0000573d     ........%W..=W..
   10158:	ffffff24 00000000 000058b5 000058b1     $........X...X..
   10168:	000058e1 00005911 0000590d 00005915     .X...Y...Y...Y..
   10178:	00005919 000004fd 00000615 00005745     .Y..........EW..
   10188:	0000572d ffffff20 00000000 0000050d     -W.. ...........
   10198:	00000625 00000000                       %.......

000101a0 <_ZTVN4mbed10SerialBaseE>:
	...
   101a8:	000004d1 0000051d                       ........

000101b0 <_ZTVN4mbed6StreamE>:
	...
   101b8:	000058b5 000058b1 000058e1 00005911     .X...X...X...Y..
   101c8:	0000590d 00005915 00005919 00000000     .Y...Y...Y......
   101d8:	00000000 00004639 00004639 fffffffc     ....9F..9F......
	...
   101f4:	00002b77 6465626d 73736120 61747265     w+..mbed asserta
   10204:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
   10214:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
   10224:	0a206425 00000000 4a5c3a43 696b6e65     %d .....C:\Jenki
   10234:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
   10244:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
   10254:	622e5c79 646c6975 65626d5c 41545c64     y\.build\mbed\TA
   10264:	54454752 4d41535f 47313252 5c413831     RGET_SAMR21G18A\
   10274:	47524154 415f5445 6c656d74 5241545c     TARGET_Atmel\TAR
   10284:	5f544547 5f4d4153 74726f43 304d7865     GET_SAM_CortexM0
   10294:	70672f50 6f5f6f69 63656a62 00682e74     P/gpio_object.h.
   102a4:	6c756f63 6f6e2064 69702074 74756f6e     could not pinout
   102b4:	00000000 6d6e6970 6d207061 6d2d7369     ....pinmap mis-m
   102c4:	68637461 00000000 6d6e6970 6e207061     atch....pinmap n
   102d4:	6620746f 646e756f 726f6620 72657020     ot found for per
   102e4:	65687069 006c6172 6d6e6970 6e207061     ipheral.pinmap n
   102f4:	6620746f 646e756f 726f6620 6e756620     ot found for fun
   10304:	6f697463 0000006e                       ction...

0001030c <PinMap_SERCOM_PADEx>:
   1030c:	00000008 00000002 00000003 00000009     ................
   1031c:	00000012 00000003 00000010 00000003     ................
   1032c:	00000003 00000011 00000013 00000003     ................
   1033c:	00000012 00000023 00000003 00000013     ....#...........
   1034c:	00000033 00000003 00000016 00000005     3...............
   1035c:	00000003 00000017 00000015 00000003     ................
   1036c:	00000018 00000025 00000003 00000019     ....%...........
   1037c:	00000035 00000003 000000ff ffffffff     5...............
   1038c:	ffffffff                                ....

00010390 <PinMap_SERCOM_PAD>:
   10390:	00000000 00000001 00000003 00000001     ................
   103a0:	00000011 00000003 00000004 00000000     ................
   103b0:	00000003 00000005 00000010 00000003     ................
   103c0:	00000006 00000020 00000003 00000007     .... ...........
   103d0:	00000030 00000003 00000008 00000000     0...............
   103e0:	00000002 00000009 00000010 00000002     ................
   103f0:	0000000c 00000002 00000002 0000000d     ................
   10400:	00000012 00000002 0000000e 00000022     ............"...
   10410:	00000002 0000000f 00000032 00000002     ........2.......
   10420:	00000010 00000001 00000002 00000011     ................
   10430:	00000011 00000002 00000012 00000021     ............!...
   10440:	00000002 00000013 00000031 00000002     ........1.......
   10450:	00000016 00000003 00000002 00000017     ................
   10460:	00000013 00000002 00000018 00000023     ............#...
   10470:	00000002 00000019 00000033 00000002     ........3.......
   10480:	0000001b 00000003 00000005 0000001c     ................
   10490:	00000013 00000005 0000001e 00000021     ............!...
   104a0:	00000003 0000001f 00000031 00000003     ........1.......
   104b0:	00000022 00000005 00000003 00000023     "...........#...
   104c0:	00000015 00000003 00000036 00000025     ........6...%...
   104d0:	00000003 00000037 00000035 00000003     ....7...5.......
   104e0:	0000003e 00000024 00000005 0000003f     >...$.......?...
   104f0:	00000014 00000005 00000052 00000034     ........R...4...
   10500:	00000005 00000053 00000004 00000005     ....S...........
   10510:	000000ff ffffffff ffffffff 42000800     ...............B
   10520:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   10530:	42001c00 00005d50 00005d68 00005d68     ...BP]..h]..h]..
   10540:	00005d16 00005d16 00005d1c 00005d22     .]...]...].."]..
   10550:	00005d32 00005d56 00005e0c 00005e1a     2]..V]...^...^..
   10560:	00005e1a 00005d9e 00005da2 00005db0     .^...]...]...]..
   10570:	00005dbe 00005dcc 00005dfc 206e6970     .]...]...]..pin 
   10580:	28203d21 4e6e6950 29656d61 0000434e     != (PinName)NC..
   10590:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
   105a0:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
   105b0:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
   105c0:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
   105d0:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
   105e0:	6f435f4d 78657472 5c50304d 6f697067     M_CortexM0P\gpio
   105f0:	6970615f 0000632e 4a5c3a43 696b6e65     _api.c..C:\Jenki
   10600:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
   10610:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
   10620:	61685c79 61745c6c 74656772 61685c73     y\hal\targets\ha
   10630:	41545c6c 54454752 6d74415f 545c6c65     l\TARGET_Atmel\T
   10640:	45475241 41535f54 6f435f4d 78657472     ARGET_SAM_Cortex
   10650:	5c50304d 6d6e6970 632e7061 00000000     M0P\pinmap.c....
   10660:	74726f70 00000000 42000800 42000c00     port.......B...B
   10670:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   10680:	6c637963 705f7365 755f7265 203e2073     cycles_per_us > 
   10690:	00000030 4a5c3a43 696b6e65 775c736e     0...C:\Jenkins\w
   106a0:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
   106b0:	6c697562 696c2d64 72617262 61685c79     build-library\ha
   106c0:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
   106d0:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
   106e0:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
   106f0:	745f7375 656b6369 00632e72 75646f6d     us_ticker.c.modu
   10700:	0000656c                                le..

00010704 <tc_interrupt_vectors.12802>:
   10704:	00141312 4a5c3a43 696b6e65 775c736e     ....C:\Jenkins\w
   10714:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
   10724:	6c697562 696c2d64 72617262 61685c79     build-library\ha
   10734:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
   10744:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
   10754:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
   10764:	5f697073 2e697061 00000063 6b6c6373     spi_api.c...sclk
   10774:	203d2120 0000434e 00000000               != NC......

00010780 <_ZTVN4mbed8FileBaseE>:
	...
   10788:	00006b01 00006b35                       .k..5k..

00010790 <_ZTVN4mbed8FileLikeE>:
	...
   10798:	00004639 00004639 00004639 00004639     9F..9F..9F..9F..
   107a8:	00004639 00004639 0000438d 00000000     9F..9F...C......
   107b8:	00000000 fffffffc 00000000 00000000     ................
   107c8:	00000000                                ....

000107cc <us_interface>:
   107cc:	00006425 00006439 000064c1 000064e5     %d..9d...d...d..
   107dc:	00006459                                Yd..

000107e0 <us_data>:
   107e0:	000107cc 20004450 42002c00 42003000     ....PD. .,.B.0.B
   107f0:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
   10800:	000079d6 0000799e 000079ba 00007992     .y...y...y...y..
   10810:	000079ba 000078fe 000079ba 00007992     .y...x...y...y..
   10820:	0000799e 0000799e 000078fe 00007992     .y...y...x...y..
   10830:	00007a3c 00007a3c 00007a3c 000079c0     <z..<z..<z...y..
   10840:	0000799e 0000799e 00007a86 00007990     .y...y...z...y..
   10850:	00007a86 000078fe 00007a86 00007990     .z...x...z...y..
   10860:	0000799e 0000799e 000078fe 00007990     .y...y...x...y..
   10870:	00007a3c 00007a3c 00007a3c 00007a6a     <z..<z..<z..jz..
   10880:	00007d9e 00007d96 00007d96 00007d8e     .}...}...}...}..
   10890:	00007ce0 00007ce0 00007d84 00007d8e     .|...|...}...}..
   108a0:	00007ce0 00007d84 00007ce0 00007d8e     .|...}...|...}..
   108b0:	00007ce2 00007ce2 00007ce2 00007e28     .|...|...|..(~..
   108c0:	00008b48 00008a36 00008b1c 00008a22     H...6......."...
   108d0:	00008b1c 00008b26 00008b1c 00008a22     ....&......."...
   108e0:	00008a36 00008a36 00008b26 00008a22     6...6...&..."...
   108f0:	00008a2c 00008a2c 00008a2c 00008d8e     ,...,...,.......
   10900:	000093dc 000093ba 000093ba 000093ae     ................
   10910:	000092a2 000092a2 000093a2 000093ae     ................
   10920:	000092a2 000093a2 000092a2 000093ae     ................
   10930:	000092a6 000092a6 000092a6 000095bc     ................

00010940 <__sf_fake_stdin>:
	...

00010960 <__sf_fake_stdout>:
	...

00010980 <__sf_fake_stderr>:
	...
   109a0:	00000043                                C...

000109a4 <_global_impure_ptr>:
   109a4:	200000d4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
   109b4:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
   109c4:	6e616e00 32313000 36353433 41393837     .nan.0123456789A
   109d4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   109e4:	64636261 65006665 00646c25 00010a0e     abcdef.e%ld.....
   109f4:	00010a11 00010a14 61462d41 3938662d     ........A-Fa-f89
   10a04:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
   10a14:	00005878                                xX..

00010a18 <fpinan.5315>:
   10a18:	00000034 fffffbce 000003cb 00000001     4...............
	...

00010a30 <tinytens>:
   10a30:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   10a40:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   10a50:	64ac6f43 11680628                       Co.d(.h.

00010a58 <fpi.5279>:
   10a58:	00000035 fffffbce 000003cb 00000001     5...............
   10a68:	00000000                                ....

00010a6c <_ctype_>:
   10a6c:	20202000 20202020 28282020 20282828     .         ((((( 
   10a7c:	20202020 20202020 20202020 20202020                     
   10a8c:	10108820 10101010 10101010 10101010      ...............
   10a9c:	04040410 04040404 10040404 10101010     ................
   10aac:	41411010 41414141 01010101 01010101     ..AAAAAA........
   10abc:	01010101 01010101 01010101 10101010     ................
   10acc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   10adc:	02020202 02020202 02020202 10101010     ................
   10aec:	00000020 00000000 00000000 00000000      ...............
	...
   10b6c:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
   10b7c:	00584953 0000002e 00000000              SIX.........

00010b88 <__mprec_tens>:
   10b88:	00000000 3ff00000 00000000 40240000     .......?......$@
   10b98:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   10ba8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   10bb8:	00000000 412e8480 00000000 416312d0     .......A......cA
   10bc8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   10bd8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   10be8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   10bf8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   10c08:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   10c18:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   10c28:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   10c38:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   10c48:	79d99db4 44ea7843                       ...yCx.D

00010c50 <__mprec_bigtens>:
   10c50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   10c60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   10c70:	7f73bf3c 75154fdd                       <.s..O.u

00010c78 <p05.5314>:
   10c78:	00000005 00000019 0000007d              ........}...

00010c84 <_init>:
   10c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c86:	46c0      	nop			; (mov r8, r8)
   10c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10c8a:	bc08      	pop	{r3}
   10c8c:	469e      	mov	lr, r3
   10c8e:	4770      	bx	lr

00010c90 <__init_array_start>:
   10c90:	000000dd 	.word	0x000000dd
   10c94:	00000635 	.word	0x00000635
   10c98:	00000b21 	.word	0x00000b21

00010c9c <_fini>:
   10c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c9e:	46c0      	nop			; (mov r8, r8)
   10ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10ca2:	bc08      	pop	{r3}
   10ca4:	469e      	mov	lr, r3
   10ca6:	4770      	bx	lr

00010ca8 <__fini_array_start>:
   10ca8:	000000b5 	.word	0x000000b5

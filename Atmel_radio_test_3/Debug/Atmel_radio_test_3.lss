
Atmel_radio_test_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f61c  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000c4  200000b0  0000f61c  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000042ec  20000174  0000f6e0  00018174  2**2
                  ALLOC
  3 .heap         00001ba0  20004460  000139cc  00018174  2**0
                  ALLOC
  4 .stack        00002000  20006000  0001556c  00018174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00018174  2**0
                  CONTENTS, READONLY
  6 .comment      000000cb  00000000  00000000  0001819c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004af26  00000000  00000000  00018267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00007d2b  00000000  00000000  0006318d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a1d2  00000000  00000000  0006aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c98  00000000  00000000  0007508a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bc0  00000000  00000000  00075d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025809  00000000  00000000  000768e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002307d  00000000  00000000  0009c0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00089183  00000000  00000000  000bf168  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000038e4  00000000  00000000  001482ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stab         0000003c  00000000  00000000  0014bbd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      00000076  00000000  00000000  0014bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20008000 	.word	0x20008000
       4:	0000402d 	.word	0x0000402d
       8:	00004029 	.word	0x00004029
       c:	00004029 	.word	0x00004029
	...
      2c:	000024f9 	.word	0x000024f9
	...
      38:	00002565 	.word	0x00002565
      3c:	000025a9 	.word	0x000025a9
      40:	00004029 	.word	0x00004029
      44:	00004029 	.word	0x00004029
      48:	00004029 	.word	0x00004029
      4c:	00000a5d 	.word	0x00000a5d
      50:	000040ed 	.word	0x000040ed
      54:	00004029 	.word	0x00004029
      58:	00004029 	.word	0x00004029
      5c:	00000000 	.word	0x00000000
      60:	00004029 	.word	0x00004029
      64:	00004029 	.word	0x00004029
      68:	00004029 	.word	0x00004029
      6c:	00004029 	.word	0x00004029
      70:	00004029 	.word	0x00004029
	...
      7c:	00004029 	.word	0x00004029
      80:	00004029 	.word	0x00004029
      84:	00004029 	.word	0x00004029
      88:	0000669d 	.word	0x0000669d
      8c:	000066a9 	.word	0x000066a9
      90:	000066b5 	.word	0x000066b5
	...
      ac:	00004029 	.word	0x00004029
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	0000f61c 	.word	0x0000f61c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000f61c 	.word	0x0000f61c
     108:	20000178 	.word	0x20000178
     10c:	0000f61c 	.word	0x0000f61c
     110:	00000000 	.word	0x00000000

00000114 <CLP_GenerateExtendedCommand>:
  pos += 3;
  memcpy(data.relay_hardware, buffer + pos, 3);
  pos += 3;
  memcpy(data.lcd_map, buffer + pos, 20);
  pos += 20;
  memcpy(data.output_state, buffer + pos, 16);
     114:	b510      	push	{r4, lr}
     116:	2800      	cmp	r0, #0
  pos += 16;
}
     118:	d103      	bne.n	122 <CLP_GenerateExtendedCommand+0xe>
     11a:	2201      	movs	r2, #1
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <CLP_GenerateExtendedCommand+0x34>)
     11e:	601a      	str	r2, [r3, #0]
     120:	e010      	b.n	144 <CLP_GenerateExtendedCommand+0x30>
     122:	1c04      	adds	r4, r0, #0
     124:	2345      	movs	r3, #69	; 0x45
     126:	7003      	strb	r3, [r0, #0]
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    return 0;
  }

  buffer[0] = CLP_COMMAND_EXTENDED;
  (*(uint32_t*)&buffer[1]) = _byteswap_ulong(ext.dest);
     128:	680b      	ldr	r3, [r1, #0]
     12a:	ba1b      	rev	r3, r3
     12c:	1c42      	adds	r2, r0, #1
     12e:	6013      	str	r3, [r2, #0]
  (*(uint32_t*)&buffer[5]) = _byteswap_ulong(ext.src);
     130:	684b      	ldr	r3, [r1, #4]
     132:	ba1b      	rev	r3, r3
     134:	1d42      	adds	r2, r0, #5
     136:	6013      	str	r3, [r2, #0]
  (*(uint16_t*)&buffer[9]) = _byteswap_ushort(ext.frame);
     138:	8908      	ldrh	r0, [r1, #8]
     13a:	4b04      	ldr	r3, [pc, #16]	; (14c <CLP_GenerateExtendedCommand+0x38>)
     13c:	4798      	blx	r3
     13e:	3409      	adds	r4, #9
     140:	8020      	strh	r0, [r4, #0]

  return 11;
     142:	200b      	movs	r0, #11
}
     144:	bd10      	pop	{r4, pc}
     146:	46c0      	nop			; (mov r8, r8)
     148:	20000190 	.word	0x20000190
     14c:	000004c1 	.word	0x000004c1

00000150 <CLP_GenerateEscape>:

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	b0cd      	sub	sp, #308	; 0x134
  if(!buffer)
     154:	2800      	cmp	r0, #0
     156:	d004      	beq.n	162 <CLP_GenerateEscape+0x12>

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     158:	2300      	movs	r3, #0
     15a:	2200      	movs	r2, #0
     15c:	2900      	cmp	r1, #0
     15e:	d105      	bne.n	16c <CLP_GenerateEscape+0x1c>
     160:	e01b      	b.n	19a <CLP_GenerateEscape+0x4a>

size_t CLP_GenerateEscape(uint8_t* buffer, size_t length)
{
  if(!buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     162:	2201      	movs	r2, #1
     164:	4b11      	ldr	r3, [pc, #68]	; (1ac <CLP_GenerateEscape+0x5c>)
     166:	601a      	str	r2, [r3, #0]
    return 0;
     168:	2400      	movs	r4, #0
     16a:	e01b      	b.n	1a4 <CLP_GenerateEscape+0x54>
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     16c:	4e10      	ldr	r6, [pc, #64]	; (1b0 <CLP_GenerateEscape+0x60>)
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     16e:	2710      	movs	r7, #16
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
  {
    switch(buffer[i])
     170:	5cc4      	ldrb	r4, [r0, r3]
     172:	2c13      	cmp	r4, #19
     174:	d80b      	bhi.n	18e <CLP_GenerateEscape+0x3e>
     176:	00a5      	lsls	r5, r4, #2
     178:	5975      	ldr	r5, [r6, r5]
     17a:	46af      	mov	pc, r5
      case CLP_ESCAPE_ETX:
      case CLP_ESCAPE_XON:
      case CLP_ESCAPE_XOFF:
      case CLP_ESCAPE_DLE:
      {
        temp[i + count] = CLP_ESCAPE_DLE;
     17c:	ad01      	add	r5, sp, #4
     17e:	18ad      	adds	r5, r5, r2
     180:	54ef      	strb	r7, [r5, r3]
        ++count;
     182:	3201      	adds	r2, #1
        temp[i + count] = buffer[i] + 0x40;
     184:	ad01      	add	r5, sp, #4
     186:	18ad      	adds	r5, r5, r2
     188:	3440      	adds	r4, #64	; 0x40
     18a:	54ec      	strb	r4, [r5, r3]
      }
      break;
     18c:	e002      	b.n	194 <CLP_GenerateEscape+0x44>
      default: temp[i + count] = buffer[i];
     18e:	ad01      	add	r5, sp, #4
     190:	18ad      	adds	r5, r5, r2
     192:	54ec      	strb	r4, [r5, r3]

  uint8_t temp[CLP_UTILITY_MAX_PACKET_SIZE];
//  uint8_t* temp = new uint8_t[length + count];
//  count = 0;

  for(size_t i = 0; i < length; ++i)
     194:	3301      	adds	r3, #1
     196:	428b      	cmp	r3, r1
     198:	d1ea      	bne.n	170 <CLP_GenerateEscape+0x20>
      break;
      default: temp[i + count] = buffer[i];
    }
  }

  memcpy(buffer, temp, length + count);
     19a:	1854      	adds	r4, r2, r1
     19c:	a901      	add	r1, sp, #4
     19e:	1c22      	adds	r2, r4, #0
     1a0:	4b04      	ldr	r3, [pc, #16]	; (1b4 <CLP_GenerateEscape+0x64>)
     1a2:	4798      	blx	r3
//  delete[] temp;

  return length + count;
}
     1a4:	1c20      	adds	r0, r4, #0
     1a6:	b04d      	add	sp, #308	; 0x134
     1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	20000190 	.word	0x20000190
     1b0:	0000e2fc 	.word	0x0000e2fc
     1b4:	000094d7 	.word	0x000094d7

000001b8 <CLP_ParsePacketEscape>:

  return count;
}

size_t CLP_ParsePacketEscape(const uint8_t* packet, uint8_t* buffer)
{
     1b8:	b510      	push	{r4, lr}
  if(!packet || !buffer)
     1ba:	2800      	cmp	r0, #0
     1bc:	d007      	beq.n	1ce <CLP_ParsePacketEscape+0x16>
     1be:	2900      	cmp	r1, #0
     1c0:	d005      	beq.n	1ce <CLP_ParsePacketEscape+0x16>
  }

  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
     1c2:	7802      	ldrb	r2, [r0, #0]
     1c4:	2300      	movs	r3, #0
     1c6:	2400      	movs	r4, #0
     1c8:	2a03      	cmp	r2, #3
     1ca:	d105      	bne.n	1d8 <CLP_ParsePacketEscape+0x20>
     1cc:	e011      	b.n	1f2 <CLP_ParsePacketEscape+0x3a>

size_t CLP_ParsePacketEscape(const uint8_t* packet, uint8_t* buffer)
{
  if(!packet || !buffer)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     1ce:	2201      	movs	r2, #1
     1d0:	4b0a      	ldr	r3, [pc, #40]	; (1fc <CLP_ParsePacketEscape+0x44>)
     1d2:	601a      	str	r2, [r3, #0]
    return 0;
     1d4:	2000      	movs	r0, #0
     1d6:	e00f      	b.n	1f8 <CLP_ParsePacketEscape+0x40>
  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
  {
    if(packet[i] == CLP_ESCAPE_DLE)
     1d8:	2a10      	cmp	r2, #16
     1da:	d104      	bne.n	1e6 <CLP_ParsePacketEscape+0x2e>
    {
      buffer[count] = packet[++i] - 0x40;
     1dc:	3301      	adds	r3, #1
     1de:	5cc2      	ldrb	r2, [r0, r3]
     1e0:	3a40      	subs	r2, #64	; 0x40
     1e2:	550a      	strb	r2, [r1, r4]
     1e4:	e000      	b.n	1e8 <CLP_ParsePacketEscape+0x30>
    }
    else
    {
      buffer[count] = packet[i];
     1e6:	550a      	strb	r2, [r1, r4]
    }

    ++i;
     1e8:	3301      	adds	r3, #1
    ++count;
     1ea:	3401      	adds	r4, #1
  }

  size_t count = 0;
  size_t i = 0;

  while(packet[i] != CLP_ESCAPE_ETX)
     1ec:	5cc2      	ldrb	r2, [r0, r3]
     1ee:	2a03      	cmp	r2, #3
     1f0:	d1f2      	bne.n	1d8 <CLP_ParsePacketEscape+0x20>

    ++i;
    ++count;
  }

  buffer[count] = packet[i];
     1f2:	2303      	movs	r3, #3
     1f4:	550b      	strb	r3, [r1, r4]

  return count+1;
     1f6:	1c60      	adds	r0, r4, #1
}
     1f8:	bd10      	pop	{r4, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	20000190 	.word	0x20000190

00000200 <CLP_CheckPacketCRCFail>:

  return 9;
}

bool CLP_CheckPacketCRCFail(const uint8_t* packet, size_t length, bool escape)
{
     200:	b570      	push	{r4, r5, r6, lr}
     202:	b0cc      	sub	sp, #304	; 0x130
  if(!packet)
     204:	2800      	cmp	r0, #0
     206:	d103      	bne.n	210 <CLP_CheckPacketCRCFail+0x10>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     208:	2201      	movs	r2, #1
     20a:	4b15      	ldr	r3, [pc, #84]	; (260 <CLP_CheckPacketCRCFail+0x60>)
     20c:	601a      	str	r2, [r3, #0]
    return 0;
     20e:	e025      	b.n	25c <CLP_CheckPacketCRCFail+0x5c>
     210:	1c0d      	adds	r5, r1, #0
     212:	1c04      	adds	r4, r0, #0
  }
  
  bool crcfail = false;

  if(escape)
     214:	2a00      	cmp	r2, #0
     216:	d011      	beq.n	23c <CLP_CheckPacketCRCFail+0x3c>
  {
    uint8_t clpbuffer[CLP_UTILITY_MAX_PACKET_SIZE];
    size_t clplength = CLP_ParsePacketEscape(packet, clpbuffer);
     218:	ad01      	add	r5, sp, #4
     21a:	1c29      	adds	r1, r5, #0
     21c:	4b11      	ldr	r3, [pc, #68]	; (264 <CLP_CheckPacketCRCFail+0x64>)
     21e:	4798      	blx	r3

    uint16_t crc = CalculateBufferCRC16(clpbuffer, clplength - 3, 0x0000);
     220:	1ec4      	subs	r4, r0, #3
     222:	1c28      	adds	r0, r5, #0
     224:	1c21      	adds	r1, r4, #0
     226:	2200      	movs	r2, #0
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <CLP_CheckPacketCRCFail+0x68>)
     22a:	4798      	blx	r3

    crcfail = (*(uint16_t*)&clpbuffer[clplength - 3]) != _byteswap_ushort(crc);
     22c:	5b2c      	ldrh	r4, [r5, r4]
     22e:	4b0f      	ldr	r3, [pc, #60]	; (26c <CLP_CheckPacketCRCFail+0x6c>)
     230:	4798      	blx	r3
     232:	1a20      	subs	r0, r4, r0
     234:	1e44      	subs	r4, r0, #1
     236:	41a0      	sbcs	r0, r4
     238:	b2c0      	uxtb	r0, r0
     23a:	e00f      	b.n	25c <CLP_CheckPacketCRCFail+0x5c>
  }
  else
  {
    uint16_t crc = CalculateBufferCRC16(packet, length - 3, 0x0000);
     23c:	1ece      	subs	r6, r1, #3
     23e:	1c31      	adds	r1, r6, #0
     240:	2200      	movs	r2, #0
     242:	4b09      	ldr	r3, [pc, #36]	; (268 <CLP_CheckPacketCRCFail+0x68>)
     244:	4798      	blx	r3
	uint16_t packetcrc = (packet[length - 2] << 8) + packet[length - 3];
     246:	1961      	adds	r1, r4, r5
     248:	3902      	subs	r1, #2
     24a:	780b      	ldrb	r3, [r1, #0]
     24c:	021b      	lsls	r3, r3, #8
     24e:	5da2      	ldrb	r2, [r4, r6]
     250:	18d3      	adds	r3, r2, r3
	crcfail = crc != packetcrc;
     252:	b29b      	uxth	r3, r3
     254:	1ac0      	subs	r0, r0, r3
     256:	1e43      	subs	r3, r0, #1
     258:	4198      	sbcs	r0, r3
     25a:	b2c0      	uxtb	r0, r0
//    crcfail = (*(uint16_t*)&packet[length - 3]) != _byteswap_ushort(crc);
  }
  
  return crcfail;
}
     25c:	b04c      	add	sp, #304	; 0x130
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	20000190 	.word	0x20000190
     264:	000001b9 	.word	0x000001b9
     268:	000004a1 	.word	0x000004a1
     26c:	000004c1 	.word	0x000004c1

00000270 <CLP_IsPacket>:
  }
}

bool CLP_IsPacket(const uint8_t* packet)
{
  if(!packet)
     270:	2800      	cmp	r0, #0
     272:	d103      	bne.n	27c <CLP_IsPacket+0xc>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     274:	2201      	movs	r2, #1
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <CLP_IsPacket+0x18>)
     278:	601a      	str	r2, [r3, #0]
    return false;
     27a:	e004      	b.n	286 <CLP_IsPacket+0x16>
  }

  return (packet[0] == CLP_ESCAPE_STX);
     27c:	7800      	ldrb	r0, [r0, #0]
     27e:	3802      	subs	r0, #2
     280:	4243      	negs	r3, r0
     282:	4158      	adcs	r0, r3
     284:	b2c0      	uxtb	r0, r0
}
     286:	4770      	bx	lr
     288:	20000190 	.word	0x20000190

0000028c <CLP_IsExtendedPacket>:

bool CLP_IsExtendedPacket(const uint8_t* packet)
{
  if(!packet)
     28c:	2800      	cmp	r0, #0
     28e:	d103      	bne.n	298 <CLP_IsExtendedPacket+0xc>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     290:	2201      	movs	r2, #1
     292:	4b04      	ldr	r3, [pc, #16]	; (2a4 <CLP_IsExtendedPacket+0x18>)
     294:	601a      	str	r2, [r3, #0]
    return false;
     296:	e004      	b.n	2a2 <CLP_IsExtendedPacket+0x16>
  }

  return (packet[1] == CLP_COMMAND_EXTENDED);
     298:	7840      	ldrb	r0, [r0, #1]
     29a:	3845      	subs	r0, #69	; 0x45
     29c:	4243      	negs	r3, r0
     29e:	4158      	adcs	r0, r3
     2a0:	b2c0      	uxtb	r0, r0
}
     2a2:	4770      	bx	lr
     2a4:	20000190 	.word	0x20000190

000002a8 <CLP_IsPacketType>:

bool CLP_IsPacketType(const uint8_t* packet, uint8_t type)
{
     2a8:	b570      	push	{r4, r5, r6, lr}
     2aa:	1c06      	adds	r6, r0, #0
     2ac:	1c0d      	adds	r5, r1, #0
  if(!CLP_IsPacket(packet)) return false;
     2ae:	4b0a      	ldr	r3, [pc, #40]	; (2d8 <CLP_IsPacketType+0x30>)
     2b0:	4798      	blx	r3
     2b2:	1e04      	subs	r4, r0, #0
     2b4:	d00e      	beq.n	2d4 <CLP_IsPacketType+0x2c>

  bool isext = CLP_IsExtendedPacket(packet);
     2b6:	1c30      	adds	r0, r6, #0
     2b8:	4b08      	ldr	r3, [pc, #32]	; (2dc <CLP_IsPacketType+0x34>)
     2ba:	4798      	blx	r3
  if(isext && (type == CLP_COMMAND_EXTENDED)) return true;
     2bc:	2800      	cmp	r0, #0
     2be:	d003      	beq.n	2c8 <CLP_IsPacketType+0x20>
     2c0:	2d45      	cmp	r5, #69	; 0x45
     2c2:	d007      	beq.n	2d4 <CLP_IsPacketType+0x2c>

  size_t start = isext ? 12 : 1;
     2c4:	230c      	movs	r3, #12
     2c6:	e000      	b.n	2ca <CLP_IsPacketType+0x22>
     2c8:	2301      	movs	r3, #1

  return (packet[start] == type);
     2ca:	5cf4      	ldrb	r4, [r6, r3]
     2cc:	1b64      	subs	r4, r4, r5
     2ce:	4260      	negs	r0, r4
     2d0:	4144      	adcs	r4, r0
     2d2:	b2e4      	uxtb	r4, r4
}
     2d4:	1c20      	adds	r0, r4, #0
     2d6:	bd70      	pop	{r4, r5, r6, pc}
     2d8:	00000271 	.word	0x00000271
     2dc:	0000028d 	.word	0x0000028d

000002e0 <CLP_ConvertPacketExtendedToValues>:

  return 0;
}

void CLP_ConvertPacketExtendedToValues(const uint8_t* packet, CLP_Extended* ext)
{
     2e0:	b538      	push	{r3, r4, r5, lr}
     2e2:	1c04      	adds	r4, r0, #0
     2e4:	1c0d      	adds	r5, r1, #0
  if(!CLP_IsPacket(packet)) return;
     2e6:	4b0c      	ldr	r3, [pc, #48]	; (318 <CLP_ConvertPacketExtendedToValues+0x38>)
     2e8:	4798      	blx	r3
     2ea:	2800      	cmp	r0, #0
     2ec:	d012      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>

  if((ext != 0) && CLP_IsExtendedPacket(packet))
     2ee:	2d00      	cmp	r5, #0
     2f0:	d010      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>
     2f2:	1c20      	adds	r0, r4, #0
     2f4:	4b09      	ldr	r3, [pc, #36]	; (31c <CLP_ConvertPacketExtendedToValues+0x3c>)
     2f6:	4798      	blx	r3
     2f8:	2800      	cmp	r0, #0
     2fa:	d00b      	beq.n	314 <CLP_ConvertPacketExtendedToValues+0x34>
  {
    ext->dest = _byteswap_ulong(*(uint32_t*)&packet[2]);
     2fc:	1ca3      	adds	r3, r4, #2
     2fe:	681b      	ldr	r3, [r3, #0]
     300:	ba1b      	rev	r3, r3
     302:	602b      	str	r3, [r5, #0]
    ext->src = _byteswap_ulong(*(uint32_t*)&packet[6]);
     304:	1da3      	adds	r3, r4, #6
     306:	681b      	ldr	r3, [r3, #0]
     308:	ba1b      	rev	r3, r3
     30a:	606b      	str	r3, [r5, #4]
    ext->frame = _byteswap_ushort(*(uint16_t*)&packet[10]);
     30c:	8960      	ldrh	r0, [r4, #10]
     30e:	4b04      	ldr	r3, [pc, #16]	; (320 <CLP_ConvertPacketExtendedToValues+0x40>)
     310:	4798      	blx	r3
     312:	8128      	strh	r0, [r5, #8]
  }
}
     314:	bd38      	pop	{r3, r4, r5, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000271 	.word	0x00000271
     31c:	0000028d 	.word	0x0000028d
     320:	000004c1 	.word	0x000004c1

00000324 <CLP_GetLastError>:
}


int CLP_GetLastError()
{
  return CLP_G_ERROR_VAL;
     324:	4b01      	ldr	r3, [pc, #4]	; (32c <CLP_GetLastError+0x8>)
     326:	6818      	ldr	r0, [r3, #0]
}
     328:	4770      	bx	lr
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000190 	.word	0x20000190

00000330 <CLP_EXTENSION_GenerateTimeSyncCommand>:
#include <string.h>

extern int CLP_G_ERROR_VAL;

size_t CLP_EXTENSION_GenerateTimeSyncCommand(uint8_t* buffer, const uint8_t* data, size_t datalength)
{
     330:	b510      	push	{r4, lr}
     332:	1c14      	adds	r4, r2, #0
  if(!buffer)
     334:	2800      	cmp	r0, #0
     336:	d103      	bne.n	340 <CLP_EXTENSION_GenerateTimeSyncCommand+0x10>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     338:	2201      	movs	r2, #1
     33a:	4b0a      	ldr	r3, [pc, #40]	; (364 <CLP_EXTENSION_GenerateTimeSyncCommand+0x34>)
     33c:	601a      	str	r2, [r3, #0]
    return 0;
     33e:	e00f      	b.n	360 <CLP_EXTENSION_GenerateTimeSyncCommand+0x30>
  }

  if(!data)
     340:	2900      	cmp	r1, #0
     342:	d107      	bne.n	354 <CLP_EXTENSION_GenerateTimeSyncCommand+0x24>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
     344:	2203      	movs	r2, #3
     346:	4b07      	ldr	r3, [pc, #28]	; (364 <CLP_EXTENSION_GenerateTimeSyncCommand+0x34>)
     348:	601a      	str	r2, [r3, #0]
    datalength = 0;
  }

  buffer[0] = CLP_EXTENSION_COMMAND_TIME_SYNC;
     34a:	2354      	movs	r3, #84	; 0x54
     34c:	7003      	strb	r3, [r0, #0]
  }

  if(!data)
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
     34e:	2400      	movs	r4, #0
  if(data)
  {
    memcpy(buffer + 1, data, datalength);
  }

  return 1 + datalength;
     350:	1c60      	adds	r0, r4, #1
     352:	e005      	b.n	360 <CLP_EXTENSION_GenerateTimeSyncCommand+0x30>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_PARAM_NOT_GIVEN;
    datalength = 0;
  }

  buffer[0] = CLP_EXTENSION_COMMAND_TIME_SYNC;
     354:	2354      	movs	r3, #84	; 0x54
     356:	7003      	strb	r3, [r0, #0]

  if(data)
  {
    memcpy(buffer + 1, data, datalength);
     358:	3001      	adds	r0, #1
     35a:	4b03      	ldr	r3, [pc, #12]	; (368 <CLP_EXTENSION_GenerateTimeSyncCommand+0x38>)
     35c:	4798      	blx	r3
     35e:	e7f7      	b.n	350 <CLP_EXTENSION_GenerateTimeSyncCommand+0x20>
  }

  return 1 + datalength;
}
     360:	bd10      	pop	{r4, pc}
     362:	46c0      	nop			; (mov r8, r8)
     364:	20000190 	.word	0x20000190
     368:	000094d7 	.word	0x000094d7

0000036c <CLP_EXTENSION_GenerateTimeSyncPacket>:

#include "hmi.h"
size_t CLP_EXTENSION_GenerateTimeSyncPacket(uint8_t* buffer, CLP_Extended* ext, const uint8_t* data, size_t datalength)
{
     36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(!buffer)
     36e:	2800      	cmp	r0, #0
     370:	d103      	bne.n	37a <CLP_EXTENSION_GenerateTimeSyncPacket+0xe>
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     372:	2201      	movs	r2, #1
     374:	4b13      	ldr	r3, [pc, #76]	; (3c4 <CLP_EXTENSION_GenerateTimeSyncPacket+0x58>)
     376:	601a      	str	r2, [r3, #0]
    return 0;
     378:	e022      	b.n	3c0 <CLP_EXTENSION_GenerateTimeSyncPacket+0x54>
     37a:	1c1e      	adds	r6, r3, #0
     37c:	1c17      	adds	r7, r2, #0
     37e:	1c04      	adds	r4, r0, #0
  }

  buffer[0] = CLP_ESCAPE_STX;
     380:	2302      	movs	r3, #2
     382:	7003      	strb	r3, [r0, #0]
  size_t length = 1;
  if(ext != 0)
     384:	2900      	cmp	r1, #0
     386:	d004      	beq.n	392 <CLP_EXTENSION_GenerateTimeSyncPacket+0x26>
  {
    length += CLP_GenerateExtendedCommand(buffer + length, (*ext));
     388:	3001      	adds	r0, #1
     38a:	4b0f      	ldr	r3, [pc, #60]	; (3c8 <CLP_EXTENSION_GenerateTimeSyncPacket+0x5c>)
     38c:	4798      	blx	r3
     38e:	1c45      	adds	r5, r0, #1
     390:	e000      	b.n	394 <CLP_EXTENSION_GenerateTimeSyncPacket+0x28>
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    return 0;
  }

  buffer[0] = CLP_ESCAPE_STX;
  size_t length = 1;
     392:	2501      	movs	r5, #1
  if(ext != 0)
  {
    length += CLP_GenerateExtendedCommand(buffer + length, (*ext));
  }
  length += CLP_EXTENSION_GenerateTimeSyncCommand(buffer + length, data, datalength);
     394:	1960      	adds	r0, r4, r5
     396:	1c39      	adds	r1, r7, #0
     398:	1c32      	adds	r2, r6, #0
     39a:	4b0c      	ldr	r3, [pc, #48]	; (3cc <CLP_EXTENSION_GenerateTimeSyncPacket+0x60>)
     39c:	4798      	blx	r3
     39e:	1945      	adds	r5, r0, r5
  uint16_t crc = CalculateBufferCRC16(buffer, length, 0x0000);
     3a0:	1c20      	adds	r0, r4, #0
     3a2:	1c29      	adds	r1, r5, #0
     3a4:	2200      	movs	r2, #0
     3a6:	4b0a      	ldr	r3, [pc, #40]	; (3d0 <CLP_EXTENSION_GenerateTimeSyncPacket+0x64>)
     3a8:	4798      	blx	r3
  
  //  (*(uint16_t*)&buffer[length]) = _byteswap_ushort(crc);
  buffer[length] = crc & 0xff;
     3aa:	5560      	strb	r0, [r4, r5]
  buffer[length + 1] = (crc >> 8) & 0xff;
     3ac:	1963      	adds	r3, r4, r5
     3ae:	0a00      	lsrs	r0, r0, #8
     3b0:	7058      	strb	r0, [r3, #1]
  length += 2;
     3b2:	1ca9      	adds	r1, r5, #2
  
  length = CLP_GenerateEscape(buffer + 1, length);
     3b4:	1c60      	adds	r0, r4, #1
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <CLP_EXTENSION_GenerateTimeSyncPacket+0x68>)
     3b8:	4798      	blx	r3

  buffer[length] = CLP_ESCAPE_ETX;
     3ba:	2303      	movs	r3, #3
     3bc:	5423      	strb	r3, [r4, r0]
  
  length += 1;
     3be:	3001      	adds	r0, #1

  return length;
}
     3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	20000190 	.word	0x20000190
     3c8:	00000115 	.word	0x00000115
     3cc:	00000331 	.word	0x00000331
     3d0:	000004a1 	.word	0x000004a1
     3d4:	00000151 	.word	0x00000151

000003d8 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw>:

size_t CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw(const uint8_t* packet, size_t packetlength, uint8_t* buffer, CLP_Extended* ext)
{
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	b083      	sub	sp, #12
     3dc:	1c04      	adds	r4, r0, #0
     3de:	9101      	str	r1, [sp, #4]
     3e0:	1c17      	adds	r7, r2, #0
     3e2:	1c1e      	adds	r6, r3, #0
  if(!CLP_IsPacket(packet)) return 0;
     3e4:	4b16      	ldr	r3, [pc, #88]	; (440 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x68>)
     3e6:	4798      	blx	r3
     3e8:	2500      	movs	r5, #0
     3ea:	2800      	cmp	r0, #0
     3ec:	d024      	beq.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>

  size_t start = CLP_IsExtendedPacket(packet) ? 12 : 1;
     3ee:	1c20      	adds	r0, r4, #0
     3f0:	4b14      	ldr	r3, [pc, #80]	; (444 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x6c>)
     3f2:	4798      	blx	r3
     3f4:	350c      	adds	r5, #12
     3f6:	2800      	cmp	r0, #0
     3f8:	d100      	bne.n	3fc <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x24>
     3fa:	3d0b      	subs	r5, #11

  if(ext != 0)
     3fc:	2e00      	cmp	r6, #0
     3fe:	d003      	beq.n	408 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x30>
  {
    CLP_ConvertPacketExtendedToValues(packet, ext);
     400:	1c20      	adds	r0, r4, #0
     402:	1c31      	adds	r1, r6, #0
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x70>)
     406:	4798      	blx	r3
  }

  if(packet[start] == CLP_EXTENSION_COMMAND_TIME_SYNC)
     408:	5d63      	ldrb	r3, [r4, r5]
     40a:	2b54      	cmp	r3, #84	; 0x54
     40c:	d110      	bne.n	430 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x58>
  {
    if(buffer)
     40e:	2f00      	cmp	r7, #0
     410:	d009      	beq.n	426 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x4e>
    {
      start += 1;
     412:	1c69      	adds	r1, r5, #1
     414:	9d01      	ldr	r5, [sp, #4]
     416:	3d03      	subs	r5, #3

      memcpy(buffer, packet + start, packetlength - start - 3);
     418:	1a6d      	subs	r5, r5, r1
     41a:	1861      	adds	r1, r4, r1
     41c:	1c38      	adds	r0, r7, #0
     41e:	1c2a      	adds	r2, r5, #0
     420:	4b0a      	ldr	r3, [pc, #40]	; (44c <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x74>)
     422:	4798      	blx	r3
	  
	  return packetlength - start - 3;
     424:	e008      	b.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>
    }
    else
    {
      CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
     426:	2201      	movs	r2, #1
     428:	4b09      	ldr	r3, [pc, #36]	; (450 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x78>)
     42a:	601a      	str	r2, [r3, #0]
  else
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_INVALID_REG_TYPE;
  }
  
  return 0;
     42c:	2500      	movs	r5, #0
     42e:	e003      	b.n	438 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x60>
      CLP_G_ERROR_VAL = CLP_LIB_ERROR_BUFFER_NOT_GIVEN;
    }
  }
  else
  {
    CLP_G_ERROR_VAL = CLP_LIB_ERROR_INVALID_REG_TYPE;
     430:	2204      	movs	r2, #4
     432:	4b07      	ldr	r3, [pc, #28]	; (450 <CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw+0x78>)
     434:	601a      	str	r2, [r3, #0]
  }
  
  return 0;
     436:	2500      	movs	r5, #0
}
     438:	1c28      	adds	r0, r5, #0
     43a:	b003      	add	sp, #12
     43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     43e:	46c0      	nop			; (mov r8, r8)
     440:	00000271 	.word	0x00000271
     444:	0000028d 	.word	0x0000028d
     448:	000002e1 	.word	0x000002e1
     44c:	000094d7 	.word	0x000094d7
     450:	20000190 	.word	0x20000190

00000454 <_Z9gencrc_16t>:
// Purpose: Functions to generate CRC16-CCITT parity values.

#include "crc.h"

uint16_t gencrc_16(uint16_t i)
{
     454:	b510      	push	{r4, lr}
  uint16_t j;
  uint16_t k;
  uint16_t crc;

  k = i<<8;
     456:	0200      	lsls	r0, r0, #8
     458:	b283      	uxth	r3, r0
     45a:	2208      	movs	r2, #8
  crc = 0;
     45c:	2000      	movs	r0, #0

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
    {
      crc = (crc<<1)^0x1021;
     45e:	4c09      	ldr	r4, [pc, #36]	; (484 <_Z9gencrc_16t+0x30>)
  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
  {
    if((crc ^ k)&0x8000)
     460:	1c01      	adds	r1, r0, #0
     462:	4059      	eors	r1, r3
     464:	b209      	sxth	r1, r1
     466:	2900      	cmp	r1, #0
     468:	da03      	bge.n	472 <_Z9gencrc_16t+0x1e>
    {
      crc = (crc<<1)^0x1021;
     46a:	0040      	lsls	r0, r0, #1
     46c:	4060      	eors	r0, r4
     46e:	b280      	uxth	r0, r0
     470:	e001      	b.n	476 <_Z9gencrc_16t+0x22>
    }
    else
    {
      crc <<= 1;
     472:	0040      	lsls	r0, r0, #1
     474:	b280      	uxth	r0, r0
    }
    k <<= 1;
     476:	005b      	lsls	r3, r3, #1
     478:	b29b      	uxth	r3, r3
     47a:	3a01      	subs	r2, #1
     47c:	b292      	uxth	r2, r2
  uint16_t crc;

  k = i<<8;
  crc = 0;

  for(j = 0; j < 8; j++)
     47e:	2a00      	cmp	r2, #0
     480:	d1ee      	bne.n	460 <_Z9gencrc_16t+0xc>
    }
    k <<= 1;
  }

  return(crc);
}
     482:	bd10      	pop	{r4, pc}
     484:	00001021 	.word	0x00001021

00000488 <_Z23CalculateCharacterCRC16th>:

uint16_t CalculateCharacterCRC16(uint16_t crc, uint8_t c)
{
     488:	b510      	push	{r4, lr}
     48a:	1c04      	adds	r4, r0, #0
  return ((crc<<8)^gencrc_16((crc>>8)^c));
     48c:	1200      	asrs	r0, r0, #8
     48e:	4048      	eors	r0, r1
     490:	4b02      	ldr	r3, [pc, #8]	; (49c <_Z23CalculateCharacterCRC16th+0x14>)
     492:	4798      	blx	r3
     494:	0224      	lsls	r4, r4, #8
     496:	4060      	eors	r0, r4
     498:	b280      	uxth	r0, r0
}
     49a:	bd10      	pop	{r4, pc}
     49c:	00000455 	.word	0x00000455

000004a0 <_Z20CalculateBufferCRC16PKhjt>:

uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
     4a0:	b570      	push	{r4, r5, r6, lr}
     4a2:	1c05      	adds	r5, r0, #0
     4a4:	1c10      	adds	r0, r2, #0
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     4a6:	2900      	cmp	r1, #0
     4a8:	d007      	beq.n	4ba <_Z20CalculateBufferCRC16PKhjt+0x1a>
     4aa:	1c2c      	adds	r4, r5, #0
     4ac:	186d      	adds	r5, r5, r1
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
     4ae:	4e03      	ldr	r6, [pc, #12]	; (4bc <_Z20CalculateBufferCRC16PKhjt+0x1c>)
     4b0:	7821      	ldrb	r1, [r4, #0]
     4b2:	47b0      	blx	r6
     4b4:	3401      	adds	r4, #1
uint16_t CalculateBufferCRC16(const uint8_t* buffer, size_t length, uint16_t start = 0x1D0F)
{
  uint16_t crc = start;
//  uint16_t crc = 0xFFFF;

  for(size_t i = 0; i < length; ++i)
     4b6:	42ac      	cmp	r4, r5
     4b8:	d1fa      	bne.n	4b0 <_Z20CalculateBufferCRC16PKhjt+0x10>
  {
    crc = CalculateCharacterCRC16(crc, buffer[i]);
  }
  return crc;
}
     4ba:	bd70      	pop	{r4, r5, r6, pc}
     4bc:	00000489 	.word	0x00000489

000004c0 <_Z16_byteswap_ushortt>:
  unsigned char c1, c2;

  c1 = i & 255;
  c2 = (i >> 8) & 255;

  return ((short)c1 << 8) + c2;
     4c0:	23ff      	movs	r3, #255	; 0xff
     4c2:	4003      	ands	r3, r0
     4c4:	021b      	lsls	r3, r3, #8
uint16_t _byteswap_ushort(uint16_t i)
{
  unsigned char c1, c2;

  c1 = i & 255;
  c2 = (i >> 8) & 255;
     4c6:	0a00      	lsrs	r0, r0, #8

  return ((short)c1 << 8) + c2;
     4c8:	1818      	adds	r0, r3, r0
     4ca:	b280      	uxth	r0, r0
}
     4cc:	4770      	bx	lr
     4ce:	46c0      	nop			; (mov r8, r8)

000004d0 <_ZN4mbed10SerialBaseD1Ev>:
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
    }
     4d0:	4770      	bx	lr
     4d2:	46c0      	nop			; (mov r8, r8)

000004d4 <_ZN4mbed6SerialD1Ev>:
 * int main() {
 *     pc.printf("Hello World\n");
 * }
 * @endcode
 */
class Serial : public SerialBase, public Stream {
     4d4:	b510      	push	{r4, lr}
     4d6:	1c04      	adds	r4, r0, #0
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <_ZN4mbed6SerialD1Ev+0x20>)
     4da:	6003      	str	r3, [r0, #0]
     4dc:	1c19      	adds	r1, r3, #0
     4de:	3118      	adds	r1, #24
     4e0:	22dc      	movs	r2, #220	; 0xdc
     4e2:	5081      	str	r1, [r0, r2]
     4e4:	334c      	adds	r3, #76	; 0x4c
     4e6:	3204      	adds	r2, #4
     4e8:	5083      	str	r3, [r0, r2]
     4ea:	30dc      	adds	r0, #220	; 0xdc
     4ec:	4b02      	ldr	r3, [pc, #8]	; (4f8 <_ZN4mbed6SerialD1Ev+0x24>)
     4ee:	4798      	blx	r3
     4f0:	1c20      	adds	r0, r4, #0
     4f2:	bd10      	pop	{r4, pc}
     4f4:	0000eb78 	.word	0x0000eb78
     4f8:	00005311 	.word	0x00005311

000004fc <_ZThn220_N4mbed6SerialD1Ev>:
     4fc:	b408      	push	{r3}
     4fe:	4b02      	ldr	r3, [pc, #8]	; (508 <_ZThn220_N4mbed6SerialD1Ev+0xc>)
     500:	469c      	mov	ip, r3
     502:	38dc      	subs	r0, #220	; 0xdc
     504:	bc08      	pop	{r3}
     506:	4760      	bx	ip
     508:	000004d5 	.word	0x000004d5

0000050c <_ZThn224_N4mbed6SerialD1Ev>:
     50c:	b408      	push	{r3}
     50e:	4b02      	ldr	r3, [pc, #8]	; (518 <_ZThn224_N4mbed6SerialD1Ev+0xc>)
     510:	469c      	mov	ip, r3
     512:	38e0      	subs	r0, #224	; 0xe0
     514:	bc08      	pop	{r3}
     516:	4760      	bx	ip
     518:	000004d5 	.word	0x000004d5

0000051c <_ZN4mbed10SerialBaseD0Ev>:
    void interrupt_handler_asynch(void);
#endif

protected:
    SerialBase(PinName tx, PinName rx);
    virtual ~SerialBase() {
     51c:	b510      	push	{r4, lr}
     51e:	1c04      	adds	r4, r0, #0
    }
     520:	4b01      	ldr	r3, [pc, #4]	; (528 <_ZN4mbed10SerialBaseD0Ev+0xc>)
     522:	4798      	blx	r3
     524:	1c20      	adds	r0, r4, #0
     526:	bd10      	pop	{r4, pc}
     528:	00006a7b 	.word	0x00006a7b

0000052c <_Z12configureHMIv>:
	Serial hmi(USBTX,USBRX);
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/
void configureHMI(void){
     52c:	b508      	push	{r3, lr}
	hmi.printf("config HMI \r\n");
     52e:	4803      	ldr	r0, [pc, #12]	; (53c <_Z12configureHMIv+0x10>)
     530:	30dc      	adds	r0, #220	; 0xdc
     532:	4903      	ldr	r1, [pc, #12]	; (540 <_Z12configureHMIv+0x14>)
     534:	4b03      	ldr	r3, [pc, #12]	; (544 <_Z12configureHMIv+0x18>)
     536:	4798      	blx	r3
}
     538:	bd08      	pop	{r3, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000194 	.word	0x20000194
     540:	0000e34c 	.word	0x0000e34c
     544:	00005361 	.word	0x00005361

00000548 <_Z7HMITaskv>:
void HMITask(){
     548:	b5f0      	push	{r4, r5, r6, r7, lr}
     54a:	b083      	sub	sp, #12
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );
     54c:	2032      	movs	r0, #50	; 0x32
     54e:	2104      	movs	r1, #4
     550:	2200      	movs	r2, #0
     552:	4b10      	ldr	r3, [pc, #64]	; (594 <_Z7HMITaskv+0x4c>)
     554:	4798      	blx	r3
     556:	4b10      	ldr	r3, [pc, #64]	; (598 <_Z7HMITaskv+0x50>)
     558:	6018      	str	r0, [r3, #0]

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
     55a:	1c1f      	adds	r7, r3, #0
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
     55c:	4d0f      	ldr	r5, [pc, #60]	; (59c <_Z7HMITaskv+0x54>)
     55e:	35dc      	adds	r5, #220	; 0xdc
	//Can receive up to 10 char[50]
	uartQueue = xQueueCreate( LENGTH_QUEUE, sizeof( char* ) );

	while(1){
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
     560:	683b      	ldr	r3, [r7, #0]
     562:	2b00      	cmp	r3, #0
     564:	d108      	bne.n	578 <_Z7HMITaskv+0x30>
     566:	e010      	b.n	58a <_Z7HMITaskv+0x42>
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
			 {			
				 hmi.printf(receive);
     568:	1c28      	adds	r0, r5, #0
     56a:	9901      	ldr	r1, [sp, #4]
     56c:	4c0c      	ldr	r4, [pc, #48]	; (5a0 <_Z7HMITaskv+0x58>)
     56e:	47a0      	blx	r4
				 hmi.printf("\r\n");
     570:	1c28      	adds	r0, r5, #0
     572:	490c      	ldr	r1, [pc, #48]	; (5a4 <_Z7HMITaskv+0x5c>)
     574:	47a0      	blx	r4
     576:	e000      	b.n	57a <_Z7HMITaskv+0x32>
		//pc.printf("HMI task\r\n");
		 if( uartQueue != 0 )
		 {
			 char* receive;
			 // Receive a message on the created queue.
			 while( xQueueReceive( uartQueue, &( receive ), (  portTickType ) 0) )
     578:	4e07      	ldr	r6, [pc, #28]	; (598 <_Z7HMITaskv+0x50>)
     57a:	6830      	ldr	r0, [r6, #0]
     57c:	a901      	add	r1, sp, #4
     57e:	2200      	movs	r2, #0
     580:	2300      	movs	r3, #0
     582:	4c09      	ldr	r4, [pc, #36]	; (5a8 <_Z7HMITaskv+0x60>)
     584:	47a0      	blx	r4
     586:	2800      	cmp	r0, #0
     588:	d1ee      	bne.n	568 <_Z7HMITaskv+0x20>
			//printf("						t: %lus,%u\r\n",timeCopy.second,(unsigned int)timeCopy.halfmillis/2);
			//printf("timecor : %d\r\n",ti);
			//printf("corhms : %d\r\n",to);
		 }
		 // pc.printf("test");
        vTaskDelay(500/portTICK_RATE_MS);
     58a:	20fa      	movs	r0, #250	; 0xfa
     58c:	0040      	lsls	r0, r0, #1
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_Z7HMITaskv+0x64>)
     590:	4798      	blx	r3
	}
     592:	e7e5      	b.n	560 <_Z7HMITaskv+0x18>
     594:	000018bd 	.word	0x000018bd
     598:	20000288 	.word	0x20000288
     59c:	20000194 	.word	0x20000194
     5a0:	00005361 	.word	0x00005361
     5a4:	0000e5b8 	.word	0x0000e5b8
     5a8:	00001a9d 	.word	0x00001a9d
     5ac:	0000219d 	.word	0x0000219d

000005b0 <_Z7sendHMIPKc>:
}
bool sendHMI(const char send[]){
     5b0:	b510      	push	{r4, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	9001      	str	r0, [sp, #4]
			if( uartQueue != 0 )
     5b6:	4b08      	ldr	r3, [pc, #32]	; (5d8 <_Z7sendHMIPKc+0x28>)
     5b8:	6818      	ldr	r0, [r3, #0]
     5ba:	2800      	cmp	r0, #0
     5bc:	d009      	beq.n	5d2 <_Z7sendHMIPKc+0x22>
			{
				if( xQueueSendToBack( uartQueue,( void * ) &send,(  portTickType ) 0 ) == pdPASS )
     5be:	a901      	add	r1, sp, #4
     5c0:	2200      	movs	r2, #0
     5c2:	2300      	movs	r3, #0
     5c4:	4c05      	ldr	r4, [pc, #20]	; (5dc <_Z7sendHMIPKc+0x2c>)
     5c6:	47a0      	blx	r4
     5c8:	3801      	subs	r0, #1
     5ca:	4243      	negs	r3, r0
     5cc:	4158      	adcs	r0, r3
     5ce:	b2c0      	uxtb	r0, r0
     5d0:	e000      	b.n	5d4 <_Z7sendHMIPKc+0x24>
				
				/* Failed to post the message. */
				
			}
			
				return false;
     5d2:	2000      	movs	r0, #0
			
     5d4:	b002      	add	sp, #8
     5d6:	bd10      	pop	{r4, pc}
     5d8:	20000288 	.word	0x20000288
     5dc:	0000190d 	.word	0x0000190d

000005e0 <_ZN4mbed6SerialD0Ev>:
     5e0:	b510      	push	{r4, lr}
     5e2:	1c04      	adds	r4, r0, #0
     5e4:	4b08      	ldr	r3, [pc, #32]	; (608 <_ZN4mbed6SerialD0Ev+0x28>)
     5e6:	6003      	str	r3, [r0, #0]
     5e8:	1c19      	adds	r1, r3, #0
     5ea:	3118      	adds	r1, #24
     5ec:	22dc      	movs	r2, #220	; 0xdc
     5ee:	5081      	str	r1, [r0, r2]
     5f0:	334c      	adds	r3, #76	; 0x4c
     5f2:	3204      	adds	r2, #4
     5f4:	5083      	str	r3, [r0, r2]
     5f6:	30dc      	adds	r0, #220	; 0xdc
     5f8:	4b04      	ldr	r3, [pc, #16]	; (60c <_ZN4mbed6SerialD0Ev+0x2c>)
     5fa:	4798      	blx	r3
     5fc:	1c20      	adds	r0, r4, #0
     5fe:	4b04      	ldr	r3, [pc, #16]	; (610 <_ZN4mbed6SerialD0Ev+0x30>)
     600:	4798      	blx	r3
     602:	1c20      	adds	r0, r4, #0
     604:	bd10      	pop	{r4, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	0000eb78 	.word	0x0000eb78
     60c:	00005311 	.word	0x00005311
     610:	00006a7b 	.word	0x00006a7b

00000614 <_ZThn220_N4mbed6SerialD0Ev>:
     614:	b408      	push	{r3}
     616:	4b02      	ldr	r3, [pc, #8]	; (620 <_ZThn220_N4mbed6SerialD0Ev+0xc>)
     618:	469c      	mov	ip, r3
     61a:	38dc      	subs	r0, #220	; 0xdc
     61c:	bc08      	pop	{r3}
     61e:	4760      	bx	ip
     620:	000005e1 	.word	0x000005e1

00000624 <_ZThn224_N4mbed6SerialD0Ev>:
     624:	b408      	push	{r3}
     626:	4b02      	ldr	r3, [pc, #8]	; (630 <_ZThn224_N4mbed6SerialD0Ev+0xc>)
     628:	469c      	mov	ip, r3
     62a:	38e0      	subs	r0, #224	; 0xe0
     62c:	bc08      	pop	{r3}
     62e:	4760      	bx	ip
     630:	000005e1 	.word	0x000005e1

00000634 <_GLOBAL__sub_I_uartQueue>:
     634:	b538      	push	{r3, r4, r5, lr}
/************************************************************************/
/* GLOBAL                                                               */
/************************************************************************/
xQueueHandle uartQueue;
#ifdef MASTERMODE
	Serial hmi(PA22,PA23);
     636:	4c06      	ldr	r4, [pc, #24]	; (650 <_GLOBAL__sub_I_uartQueue+0x1c>)
     638:	1c20      	adds	r0, r4, #0
     63a:	2116      	movs	r1, #22
     63c:	2217      	movs	r2, #23
     63e:	2300      	movs	r3, #0
     640:	4d04      	ldr	r5, [pc, #16]	; (654 <_GLOBAL__sub_I_uartQueue+0x20>)
     642:	47a8      	blx	r5
     644:	1c20      	adds	r0, r4, #0
     646:	4904      	ldr	r1, [pc, #16]	; (658 <_GLOBAL__sub_I_uartQueue+0x24>)
     648:	4a04      	ldr	r2, [pc, #16]	; (65c <_GLOBAL__sub_I_uartQueue+0x28>)
     64a:	4b05      	ldr	r3, [pc, #20]	; (660 <_GLOBAL__sub_I_uartQueue+0x2c>)
     64c:	4798      	blx	r3
				
			}
			
				return false;
			
     64e:	bd38      	pop	{r3, r4, r5, pc}
     650:	20000194 	.word	0x20000194
     654:	00005105 	.word	0x00005105
     658:	000004d5 	.word	0x000004d5
     65c:	200000b0 	.word	0x200000b0
     660:	00006a6d 	.word	0x00006a6d

00000664 <_Z14smartMeterTaskv>:
	}
}

//extern xSemaphoreHandle timeProt.synchroTimeReceive;

void smartMeterTask(void){
     664:	b5f0      	push	{r4, r5, r6, r7, lr}
     666:	465f      	mov	r7, fp
     668:	4656      	mov	r6, sl
     66a:	464d      	mov	r5, r9
     66c:	4644      	mov	r4, r8
     66e:	b4f0      	push	{r4, r5, r6, r7}
     670:	b083      	sub	sp, #12
	
	xSemaphoreHandle synchroSmartMeter;
	vSemaphoreCreateBinary(synchroSmartMeter);
     672:	2001      	movs	r0, #1
     674:	2100      	movs	r1, #0
     676:	2203      	movs	r2, #3
     678:	4b47      	ldr	r3, [pc, #284]	; (798 <_Z14smartMeterTaskv+0x134>)
     67a:	4798      	blx	r3
     67c:	1e04      	subs	r4, r0, #0
     67e:	d004      	beq.n	68a <_Z14smartMeterTaskv+0x26>
     680:	2100      	movs	r1, #0
     682:	2200      	movs	r2, #0
     684:	2300      	movs	r3, #0
     686:	4d45      	ldr	r5, [pc, #276]	; (79c <_Z14smartMeterTaskv+0x138>)
     688:	47a8      	blx	r5
	
	Channel* pc = new ChannelSerialDebug;
     68a:	2580      	movs	r5, #128	; 0x80
     68c:	006d      	lsls	r5, r5, #1
     68e:	1c28      	adds	r0, r5, #0
     690:	4f43      	ldr	r7, [pc, #268]	; (7a0 <_Z14smartMeterTaskv+0x13c>)
     692:	47b8      	blx	r7
     694:	4680      	mov	r8, r0
     696:	2104      	movs	r1, #4
     698:	2205      	movs	r2, #5
     69a:	4e42      	ldr	r6, [pc, #264]	; (7a4 <_Z14smartMeterTaskv+0x140>)
     69c:	47b0      	blx	r6
	Channel* s1 = new ChannelSerialSercom1;
     69e:	1c28      	adds	r0, r5, #0
     6a0:	47b8      	blx	r7
     6a2:	1c05      	adds	r5, r0, #0
     6a4:	2110      	movs	r1, #16
     6a6:	2211      	movs	r2, #17
     6a8:	47b0      	blx	r6
	ChannelCallback* relaytos1 = new Relay(s1);
     6aa:	2008      	movs	r0, #8
     6ac:	47b8      	blx	r7
     6ae:	1c29      	adds	r1, r5, #0
     6b0:	4e3d      	ldr	r6, [pc, #244]	; (7a8 <_Z14smartMeterTaskv+0x144>)
     6b2:	47b0      	blx	r6
	ChannelCallback* relaytopc = new Relay(pc);
     6b4:	2008      	movs	r0, #8
     6b6:	47b8      	blx	r7
     6b8:	4641      	mov	r1, r8
     6ba:	47b0      	blx	r6
	RelayBuffered* relaybtopc = new RelayBufferedTaskCLP(pc,synchroSmartMeter,timeProt.synchroTimeReceive);
     6bc:	20a4      	movs	r0, #164	; 0xa4
     6be:	0040      	lsls	r0, r0, #1
     6c0:	47b8      	blx	r7
     6c2:	4a3a      	ldr	r2, [pc, #232]	; (7ac <_Z14smartMeterTaskv+0x148>)
     6c4:	4693      	mov	fp, r2
     6c6:	2294      	movs	r2, #148	; 0x94
     6c8:	4692      	mov	sl, r2
     6ca:	9001      	str	r0, [sp, #4]
     6cc:	4643      	mov	r3, r8
     6ce:	9300      	str	r3, [sp, #0]
     6d0:	4641      	mov	r1, r8
     6d2:	1c22      	adds	r2, r4, #0
     6d4:	465b      	mov	r3, fp
     6d6:	4656      	mov	r6, sl
     6d8:	599b      	ldr	r3, [r3, r6]
     6da:	4e35      	ldr	r6, [pc, #212]	; (7b0 <_Z14smartMeterTaskv+0x14c>)
     6dc:	46b1      	mov	r9, r6
     6de:	47b0      	blx	r6
	RelayBuffered* relaybtos1 = new RelayBufferedTaskCLP(s1,synchroSmartMeter,timeProt.synchroTimeReceive);
     6e0:	20a4      	movs	r0, #164	; 0xa4
     6e2:	0040      	lsls	r0, r0, #1
     6e4:	47b8      	blx	r7
     6e6:	4680      	mov	r8, r0
     6e8:	1c29      	adds	r1, r5, #0
     6ea:	1c22      	adds	r2, r4, #0
     6ec:	465e      	mov	r6, fp
     6ee:	4653      	mov	r3, sl
     6f0:	58f3      	ldr	r3, [r6, r3]
     6f2:	47c8      	blx	r9
	
	ChannelRadio* radio = ChannelRadio::GetChannel();
     6f4:	4b2f      	ldr	r3, [pc, #188]	; (7b4 <_Z14smartMeterTaskv+0x150>)
     6f6:	4798      	blx	r3
     6f8:	1c06      	adds	r6, r0, #0
	cMxRadio* r = radio->GetRadio();
     6fa:	4b2f      	ldr	r3, [pc, #188]	; (7b8 <_Z14smartMeterTaskv+0x154>)
     6fc:	4798      	blx	r3
	// Radio Config
	r->begin(CHANNEL_RADIO);
     6fe:	210c      	movs	r1, #12
     700:	4b2e      	ldr	r3, [pc, #184]	; (7bc <_Z14smartMeterTaskv+0x158>)
     702:	4798      	blx	r3
	
	RelayBuffered* relaybtoradio = new RelayBufferedTaskCLP(radio,synchroSmartMeter,timeProt.synchroTimeReceive);
     704:	20a4      	movs	r0, #164	; 0xa4
     706:	0040      	lsls	r0, r0, #1
     708:	47b8      	blx	r7
     70a:	1c07      	adds	r7, r0, #0
     70c:	465a      	mov	r2, fp
     70e:	4651      	mov	r1, sl
     710:	5853      	ldr	r3, [r2, r1]
     712:	1c31      	adds	r1, r6, #0
     714:	1c22      	adds	r2, r4, #0
     716:	47c8      	blx	r9
	
	pc->SetCallback(relaybtoradio);
     718:	9800      	ldr	r0, [sp, #0]
     71a:	6803      	ldr	r3, [r0, #0]
     71c:	691b      	ldr	r3, [r3, #16]
     71e:	1c39      	adds	r1, r7, #0
     720:	4798      	blx	r3
#ifdef MASTERMODE
	radio->SetCallback(relaybtopc);
     722:	6833      	ldr	r3, [r6, #0]
     724:	691b      	ldr	r3, [r3, #16]
     726:	1c30      	adds	r0, r6, #0
     728:	9e01      	ldr	r6, [sp, #4]
     72a:	1c31      	adds	r1, r6, #0
     72c:	4798      	blx	r3
#else
	radio->SetCallback(relaybtos1);
#endif
	s1->SetCallback(relaybtoradio);
     72e:	682b      	ldr	r3, [r5, #0]
     730:	691b      	ldr	r3, [r3, #16]
     732:	1c28      	adds	r0, r5, #0
     734:	1c39      	adds	r1, r7, #0
     736:	4798      	blx	r3
	//PrintBuffer(pc,"RESET\r\n");
    while(1)
	{
		if(synchroSmartMeter!=NULL)
		{
			if( xSemaphoreTake(synchroSmartMeter,portMAX_DELAY) == pdTRUE )
     738:	4d21      	ldr	r5, [pc, #132]	; (7c0 <_Z14smartMeterTaskv+0x15c>)
     73a:	1c3b      	adds	r3, r7, #0
     73c:	4647      	mov	r7, r8
     73e:	4698      	mov	r8, r3
#endif
	s1->SetCallback(relaybtoradio);
	//PrintBuffer(pc,"RESET\r\n");
    while(1)
	{
		if(synchroSmartMeter!=NULL)
     740:	2c00      	cmp	r4, #0
     742:	d100      	bne.n	746 <_Z14smartMeterTaskv+0xe2>
     744:	e7fe      	b.n	744 <_Z14smartMeterTaskv+0xe0>
		{
			if( xSemaphoreTake(synchroSmartMeter,portMAX_DELAY) == pdTRUE )
     746:	1c20      	adds	r0, r4, #0
     748:	2100      	movs	r1, #0
     74a:	2201      	movs	r2, #1
     74c:	4252      	negs	r2, r2
     74e:	2300      	movs	r3, #0
     750:	47a8      	blx	r5
     752:	2801      	cmp	r0, #1
     754:	d1f4      	bne.n	740 <_Z14smartMeterTaskv+0xdc>
			{//stay here until sync request
				if(relaybtopc->HasNewData())
     756:	6833      	ldr	r3, [r6, #0]
     758:	69db      	ldr	r3, [r3, #28]
     75a:	1c30      	adds	r0, r6, #0
     75c:	4798      	blx	r3
     75e:	2800      	cmp	r0, #0
     760:	d003      	beq.n	76a <_Z14smartMeterTaskv+0x106>
				{
					relaybtopc->PushData();
     762:	6833      	ldr	r3, [r6, #0]
     764:	699b      	ldr	r3, [r3, #24]
     766:	1c30      	adds	r0, r6, #0
     768:	4798      	blx	r3
				}
		
				if(relaybtos1->HasNewData())
     76a:	683b      	ldr	r3, [r7, #0]
     76c:	69db      	ldr	r3, [r3, #28]
     76e:	1c38      	adds	r0, r7, #0
     770:	4798      	blx	r3
     772:	2800      	cmp	r0, #0
     774:	d003      	beq.n	77e <_Z14smartMeterTaskv+0x11a>
				{
					relaybtos1->PushData();
     776:	683b      	ldr	r3, [r7, #0]
     778:	699b      	ldr	r3, [r3, #24]
     77a:	1c38      	adds	r0, r7, #0
     77c:	4798      	blx	r3
				}
		
				if(relaybtoradio->HasNewData())
     77e:	4643      	mov	r3, r8
     780:	681b      	ldr	r3, [r3, #0]
     782:	69db      	ldr	r3, [r3, #28]
     784:	4640      	mov	r0, r8
     786:	4798      	blx	r3
     788:	2800      	cmp	r0, #0
     78a:	d0d9      	beq.n	740 <_Z14smartMeterTaskv+0xdc>
				{
					relaybtoradio->PushData();
     78c:	4643      	mov	r3, r8
     78e:	681b      	ldr	r3, [r3, #0]
     790:	699b      	ldr	r3, [r3, #24]
     792:	4640      	mov	r0, r8
     794:	4798      	blx	r3
     796:	e7d3      	b.n	740 <_Z14smartMeterTaskv+0xdc>
     798:	000018bd 	.word	0x000018bd
     79c:	0000190d 	.word	0x0000190d
     7a0:	00006a83 	.word	0x00006a83
     7a4:	00003a15 	.word	0x00003a15
     7a8:	00003c3d 	.word	0x00003c3d
     7ac:	20000398 	.word	0x20000398
     7b0:	00003c89 	.word	0x00003c89
     7b4:	00003895 	.word	0x00003895
     7b8:	0000381d 	.word	0x0000381d
     7bc:	00002b09 	.word	0x00002b09
     7c0:	00001a9d 	.word	0x00001a9d

000007c4 <_Z9readClockP11structClock>:
volatile int timeCorr;
volatile bool stateLed=false;
DigitalOut led(LED1);
//struct rtc_module rtc_instance;

uint32_t  readClock(Clock* timeClock){
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	1c04      	adds	r4, r0, #0
	//rtc_count_disable(&rtc_instance);
//	Disable_global_interrupt();
	uint32_t timeCounter=0;
	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//disable timer
     7c8:	4a13      	ldr	r2, [pc, #76]	; (818 <_Z9readClockP11structClock+0x54>)
     7ca:	8813      	ldrh	r3, [r2, #0]
     7cc:	2102      	movs	r1, #2
     7ce:	438b      	bics	r3, r1
     7d0:	8013      	strh	r3, [r2, #0]
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
     7d2:	7a93      	ldrb	r3, [r2, #10]
     7d4:	09db      	lsrs	r3, r3, #7
     7d6:	d1fc      	bne.n	7d2 <_Z9readClockP11structClock+0xe>
	
	timeCounter=RTC->MODE0.COUNT.reg; 
     7d8:	4b0f      	ldr	r3, [pc, #60]	; (818 <_Z9readClockP11structClock+0x54>)
     7da:	691e      	ldr	r6, [r3, #16]
	timeClock->second=timeManage.second;	
     7dc:	4a0f      	ldr	r2, [pc, #60]	; (81c <_Z9readClockP11structClock+0x58>)
     7de:	6811      	ldr	r1, [r2, #0]
     7e0:	6021      	str	r1, [r4, #0]
	timeClock->halfmillis=timeManage.halfmillis;	
     7e2:	6852      	ldr	r2, [r2, #4]
     7e4:	6062      	str	r2, [r4, #4]
	//timeCounter=0;
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
     7e6:	8819      	ldrh	r1, [r3, #0]
     7e8:	2202      	movs	r2, #2
     7ea:	430a      	orrs	r2, r1
     7ec:	801a      	strh	r2, [r3, #0]

	//Enable_global_interrupt();
	timeClock->sign=true;	
     7ee:	2301      	movs	r3, #1
     7f0:	7223      	strb	r3, [r4, #8]

	timeClock->halfmillis+=timeCounter;
     7f2:	6863      	ldr	r3, [r4, #4]
     7f4:	199b      	adds	r3, r3, r6
     7f6:	6063      	str	r3, [r4, #4]
	timeClock->second+=timeClock->halfmillis/RTC_FREQ;
     7f8:	6860      	ldr	r0, [r4, #4]
     7fa:	6825      	ldr	r5, [r4, #0]
     7fc:	21fa      	movs	r1, #250	; 0xfa
     7fe:	01c9      	lsls	r1, r1, #7
     800:	4b07      	ldr	r3, [pc, #28]	; (820 <_Z9readClockP11structClock+0x5c>)
     802:	4798      	blx	r3
     804:	1945      	adds	r5, r0, r5
     806:	6025      	str	r5, [r4, #0]
	timeClock->halfmillis=timeClock->halfmillis%RTC_FREQ;
     808:	6860      	ldr	r0, [r4, #4]
     80a:	21fa      	movs	r1, #250	; 0xfa
     80c:	01c9      	lsls	r1, r1, #7
     80e:	4b05      	ldr	r3, [pc, #20]	; (824 <_Z9readClockP11structClock+0x60>)
     810:	4798      	blx	r3
     812:	6061      	str	r1, [r4, #4]
	return timeCounter;
}
     814:	1c30      	adds	r0, r6, #0
     816:	bd70      	pop	{r4, r5, r6, pc}
     818:	40001400 	.word	0x40001400
     81c:	200000b8 	.word	0x200000b8
     820:	00006ab5 	.word	0x00006ab5
     824:	00006bc1 	.word	0x00006bc1

00000828 <_Z10writeClock11structClock>:
void writeClock(Clock clk){
     828:	b5f0      	push	{r4, r5, r6, r7, lr}
     82a:	4647      	mov	r7, r8
     82c:	b480      	push	{r7}
     82e:	b084      	sub	sp, #16
     830:	9001      	str	r0, [sp, #4]
     832:	9102      	str	r1, [sp, #8]
     834:	9203      	str	r2, [sp, #12]
	//rtc_count_disable(&rtc_instance);
	//Disable_global_interrupt();

	RTC->MODE0.CTRL.reg &=  0b1111111111111101;//stop timer
     836:	4a18      	ldr	r2, [pc, #96]	; (898 <_Z10writeClock11structClock+0x70>)
     838:	8813      	ldrh	r3, [r2, #0]
     83a:	2102      	movs	r1, #2
     83c:	438b      	bics	r3, r1
     83e:	8013      	strh	r3, [r2, #0]
	
	while(RTC->MODE0.STATUS.bit.SYNCBUSY==1);
     840:	7a93      	ldrb	r3, [r2, #10]
     842:	09db      	lsrs	r3, r3, #7
     844:	d1fc      	bne.n	840 <_Z10writeClock11structClock+0x18>
	RTC->MODE0.COUNT.reg=clk.halfmillis%VALUE_TIMER;
     846:	9802      	ldr	r0, [sp, #8]
     848:	4f14      	ldr	r7, [pc, #80]	; (89c <_Z10writeClock11structClock+0x74>)
     84a:	21fa      	movs	r1, #250	; 0xfa
     84c:	0089      	lsls	r1, r1, #2
     84e:	47b8      	blx	r7
     850:	4d11      	ldr	r5, [pc, #68]	; (898 <_Z10writeClock11structClock+0x70>)
     852:	6129      	str	r1, [r5, #16]
	timeManage.second=clk.second;
     854:	9b01      	ldr	r3, [sp, #4]
     856:	4c12      	ldr	r4, [pc, #72]	; (8a0 <_Z10writeClock11structClock+0x78>)
     858:	6023      	str	r3, [r4, #0]
	timeManage.halfmillis=(int)(clk.halfmillis/VALUE_TIMER)*VALUE_TIMER;
     85a:	9802      	ldr	r0, [sp, #8]
     85c:	4b11      	ldr	r3, [pc, #68]	; (8a4 <_Z10writeClock11structClock+0x7c>)
     85e:	4698      	mov	r8, r3
     860:	21fa      	movs	r1, #250	; 0xfa
     862:	0089      	lsls	r1, r1, #2
     864:	4798      	blx	r3
     866:	23fa      	movs	r3, #250	; 0xfa
     868:	009b      	lsls	r3, r3, #2
     86a:	4358      	muls	r0, r3
     86c:	6060      	str	r0, [r4, #4]
	timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     86e:	6860      	ldr	r0, [r4, #4]
     870:	6826      	ldr	r6, [r4, #0]
     872:	21fa      	movs	r1, #250	; 0xfa
     874:	01c9      	lsls	r1, r1, #7
     876:	47c0      	blx	r8
     878:	1986      	adds	r6, r0, r6
     87a:	6026      	str	r6, [r4, #0]
	timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     87c:	6860      	ldr	r0, [r4, #4]
     87e:	21fa      	movs	r1, #250	; 0xfa
     880:	01c9      	lsls	r1, r1, #7
     882:	47b8      	blx	r7
     884:	6061      	str	r1, [r4, #4]
	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE; //enable timer
     886:	882a      	ldrh	r2, [r5, #0]
     888:	2302      	movs	r3, #2
     88a:	4313      	orrs	r3, r2
     88c:	802b      	strh	r3, [r5, #0]

	

	
	
}
     88e:	b004      	add	sp, #16
     890:	bc04      	pop	{r2}
     892:	4690      	mov	r8, r2
     894:	bdf0      	pop	{r4, r5, r6, r7, pc}
     896:	46c0      	nop			; (mov r8, r8)
     898:	40001400 	.word	0x40001400
     89c:	00006bc1 	.word	0x00006bc1
     8a0:	200000b8 	.word	0x200000b8
     8a4:	00006ab5 	.word	0x00006ab5

000008a8 <_Z15isrInternalClokv>:
void isrInternalClok(void){
     8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8aa:	b08d      	sub	sp, #52	; 0x34
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     8ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     8ae:	f3bf 8f5f 	dmb	sy
			Disable_global_interrupt();
     8b2:	2200      	movs	r2, #0
     8b4:	4b59      	ldr	r3, [pc, #356]	; (a1c <_Z15isrInternalClokv+0x174>)
     8b6:	701a      	strb	r2, [r3, #0]
			//printf("+");
			static bool state;
			
			

			timeManage.halfmillis+=VALUE_TIMER;
     8b8:	4b59      	ldr	r3, [pc, #356]	; (a20 <_Z15isrInternalClokv+0x178>)
     8ba:	685a      	ldr	r2, [r3, #4]
     8bc:	21fa      	movs	r1, #250	; 0xfa
     8be:	0089      	lsls	r1, r1, #2
     8c0:	468c      	mov	ip, r1
     8c2:	4462      	add	r2, ip
     8c4:	605a      	str	r2, [r3, #4]

			state=stateLed;
     8c6:	4a57      	ldr	r2, [pc, #348]	; (a24 <_Z15isrInternalClokv+0x17c>)
     8c8:	7811      	ldrb	r1, [r2, #0]
     8ca:	4a57      	ldr	r2, [pc, #348]	; (a28 <_Z15isrInternalClokv+0x180>)
     8cc:	7011      	strb	r1, [r2, #0]
			if(timeManage.halfmillis<(RTC_FREQ/2)){//all 500ms
     8ce:	685a      	ldr	r2, [r3, #4]
     8d0:	4b56      	ldr	r3, [pc, #344]	; (a2c <_Z15isrInternalClokv+0x184>)
     8d2:	429a      	cmp	r2, r3
     8d4:	d803      	bhi.n	8de <_Z15isrInternalClokv+0x36>
				stateLed=LOW;
     8d6:	2200      	movs	r2, #0
     8d8:	4b52      	ldr	r3, [pc, #328]	; (a24 <_Z15isrInternalClokv+0x17c>)
     8da:	701a      	strb	r2, [r3, #0]
     8dc:	e002      	b.n	8e4 <_Z15isrInternalClokv+0x3c>
			}
			else{
				stateLed=HIGH;
     8de:	2201      	movs	r2, #1
     8e0:	4b50      	ldr	r3, [pc, #320]	; (a24 <_Z15isrInternalClokv+0x17c>)
     8e2:	701a      	strb	r2, [r3, #0]
			}
			if(state!=stateLed){
     8e4:	4b4f      	ldr	r3, [pc, #316]	; (a24 <_Z15isrInternalClokv+0x17c>)
     8e6:	781b      	ldrb	r3, [r3, #0]
     8e8:	b2db      	uxtb	r3, r3
     8ea:	4a4f      	ldr	r2, [pc, #316]	; (a28 <_Z15isrInternalClokv+0x180>)
     8ec:	7812      	ldrb	r2, [r2, #0]
     8ee:	429a      	cmp	r2, r3
     8f0:	d017      	beq.n	922 <_Z15isrInternalClokv+0x7a>
				led = stateLed;
     8f2:	4b4c      	ldr	r3, [pc, #304]	; (a24 <_Z15isrInternalClokv+0x17c>)
     8f4:	781c      	ldrb	r4, [r3, #0]
     8f6:	b2e4      	uxtb	r4, r4
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
     8f8:	4b4d      	ldr	r3, [pc, #308]	; (a30 <_Z15isrInternalClokv+0x188>)
     8fa:	781b      	ldrb	r3, [r3, #0]
     8fc:	b25b      	sxtb	r3, r3
     8fe:	3301      	adds	r3, #1
     900:	d104      	bne.n	90c <_Z15isrInternalClokv+0x64>
     902:	484c      	ldr	r0, [pc, #304]	; (a34 <_Z15isrInternalClokv+0x18c>)
     904:	494c      	ldr	r1, [pc, #304]	; (a38 <_Z15isrInternalClokv+0x190>)
     906:	2228      	movs	r2, #40	; 0x28
     908:	4b4c      	ldr	r3, [pc, #304]	; (a3c <_Z15isrInternalClokv+0x194>)
     90a:	4798      	blx	r3
    if (value)
     90c:	2c00      	cmp	r4, #0
     90e:	d004      	beq.n	91a <_Z15isrInternalClokv+0x72>
        *obj->OUTSET = obj->mask;
     910:	4b47      	ldr	r3, [pc, #284]	; (a30 <_Z15isrInternalClokv+0x188>)
     912:	691a      	ldr	r2, [r3, #16]
     914:	685b      	ldr	r3, [r3, #4]
     916:	6013      	str	r3, [r2, #0]
     918:	e003      	b.n	922 <_Z15isrInternalClokv+0x7a>
    else
        *obj->OUTCLR = obj->mask;
     91a:	4b45      	ldr	r3, [pc, #276]	; (a30 <_Z15isrInternalClokv+0x188>)
     91c:	68da      	ldr	r2, [r3, #12]
     91e:	685b      	ldr	r3, [r3, #4]
     920:	6013      	str	r3, [r2, #0]
				//		xSemaphoreGiveFromISR( synchroLed,NULL);
				//	}
			}

			
			timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     922:	4c3f      	ldr	r4, [pc, #252]	; (a20 <_Z15isrInternalClokv+0x178>)
     924:	6860      	ldr	r0, [r4, #4]
     926:	6825      	ldr	r5, [r4, #0]
     928:	21fa      	movs	r1, #250	; 0xfa
     92a:	01c9      	lsls	r1, r1, #7
     92c:	4b44      	ldr	r3, [pc, #272]	; (a40 <_Z15isrInternalClokv+0x198>)
     92e:	4798      	blx	r3
     930:	1945      	adds	r5, r0, r5
     932:	6025      	str	r5, [r4, #0]
			timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     934:	6860      	ldr	r0, [r4, #4]
     936:	21fa      	movs	r1, #250	; 0xfa
     938:	01c9      	lsls	r1, r1, #7
     93a:	4b42      	ldr	r3, [pc, #264]	; (a44 <_Z15isrInternalClokv+0x19c>)
     93c:	4798      	blx	r3
     93e:	6061      	str	r1, [r4, #4]
			if((valueCor!=0)){
     940:	4b41      	ldr	r3, [pc, #260]	; (a48 <_Z15isrInternalClokv+0x1a0>)
     942:	681b      	ldr	r3, [r3, #0]
     944:	2b00      	cmp	r3, #0
     946:	d060      	beq.n	a0a <_Z15isrInternalClokv+0x162>
				if (timeCorr==0){
     948:	4b40      	ldr	r3, [pc, #256]	; (a4c <_Z15isrInternalClokv+0x1a4>)
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	2b00      	cmp	r3, #0
     94e:	d13c      	bne.n	9ca <_Z15isrInternalClokv+0x122>
					timeCorr=timeCorrection;
     950:	4b3f      	ldr	r3, [pc, #252]	; (a50 <_Z15isrInternalClokv+0x1a8>)
     952:	681a      	ldr	r2, [r3, #0]
     954:	4b3d      	ldr	r3, [pc, #244]	; (a4c <_Z15isrInternalClokv+0x1a4>)
     956:	601a      	str	r2, [r3, #0]
					Clock off;
					off.second=(unsigned int )abs(valueCor)/RTC_FREQ;
     958:	4c3b      	ldr	r4, [pc, #236]	; (a48 <_Z15isrInternalClokv+0x1a0>)
     95a:	6820      	ldr	r0, [r4, #0]
     95c:	17c3      	asrs	r3, r0, #31
     95e:	18c0      	adds	r0, r0, r3
     960:	4058      	eors	r0, r3
     962:	21fa      	movs	r1, #250	; 0xfa
     964:	01c9      	lsls	r1, r1, #7
     966:	4b36      	ldr	r3, [pc, #216]	; (a40 <_Z15isrInternalClokv+0x198>)
     968:	4798      	blx	r3
     96a:	9009      	str	r0, [sp, #36]	; 0x24
					off.halfmillis=(unsigned int)abs(valueCor)%RTC_FREQ;
     96c:	6820      	ldr	r0, [r4, #0]
     96e:	17c3      	asrs	r3, r0, #31
     970:	18c0      	adds	r0, r0, r3
     972:	4058      	eors	r0, r3
     974:	21fa      	movs	r1, #250	; 0xfa
     976:	01c9      	lsls	r1, r1, #7
     978:	4b32      	ldr	r3, [pc, #200]	; (a44 <_Z15isrInternalClokv+0x19c>)
     97a:	4798      	blx	r3
     97c:	910a      	str	r1, [sp, #40]	; 0x28
					if(valueCor<0){
     97e:	6823      	ldr	r3, [r4, #0]
     980:	2b00      	cmp	r3, #0
     982:	da03      	bge.n	98c <_Z15isrInternalClokv+0xe4>
						off.sign=false;
     984:	2200      	movs	r2, #0
     986:	ab09      	add	r3, sp, #36	; 0x24
     988:	721a      	strb	r2, [r3, #8]
     98a:	e002      	b.n	992 <_Z15isrInternalClokv+0xea>
					}
					else{
						off.sign=true;
     98c:	2201      	movs	r2, #1
     98e:	ab09      	add	r3, sp, #36	; 0x24
     990:	721a      	strb	r2, [r3, #8]
					}
					//change the time
					timeManage=sumClock(timeManage,off);
     992:	4e23      	ldr	r6, [pc, #140]	; (a20 <_Z15isrInternalClokv+0x178>)
     994:	ac04      	add	r4, sp, #16
     996:	ad09      	add	r5, sp, #36	; 0x24
     998:	466b      	mov	r3, sp
     99a:	1c2a      	adds	r2, r5, #0
     99c:	ca83      	ldmia	r2!, {r0, r1, r7}
     99e:	c383      	stmia	r3!, {r0, r1, r7}
     9a0:	1c20      	adds	r0, r4, #0
     9a2:	6831      	ldr	r1, [r6, #0]
     9a4:	6872      	ldr	r2, [r6, #4]
     9a6:	68b3      	ldr	r3, [r6, #8]
     9a8:	4f2a      	ldr	r7, [pc, #168]	; (a54 <_Z15isrInternalClokv+0x1ac>)
     9aa:	47b8      	blx	r7
     9ac:	1c23      	adds	r3, r4, #0
     9ae:	cb07      	ldmia	r3!, {r0, r1, r2}
     9b0:	c607      	stmia	r6!, {r0, r1, r2}
					//change the correction offset
					sumOffset=sumClock(sumOffset,off);//ok
     9b2:	4e29      	ldr	r6, [pc, #164]	; (a58 <_Z15isrInternalClokv+0x1b0>)
     9b4:	466b      	mov	r3, sp
     9b6:	cd07      	ldmia	r5!, {r0, r1, r2}
     9b8:	c307      	stmia	r3!, {r0, r1, r2}
     9ba:	1c20      	adds	r0, r4, #0
     9bc:	6831      	ldr	r1, [r6, #0]
     9be:	6872      	ldr	r2, [r6, #4]
     9c0:	68b3      	ldr	r3, [r6, #8]
     9c2:	47b8      	blx	r7
     9c4:	cc0e      	ldmia	r4!, {r1, r2, r3}
     9c6:	c60e      	stmia	r6!, {r1, r2, r3}
     9c8:	e003      	b.n	9d2 <_Z15isrInternalClokv+0x12a>
				}
				else{
					timeCorr--;
     9ca:	4a20      	ldr	r2, [pc, #128]	; (a4c <_Z15isrInternalClokv+0x1a4>)
     9cc:	6813      	ldr	r3, [r2, #0]
     9ce:	3b01      	subs	r3, #1
     9d0:	6013      	str	r3, [r2, #0]
				}	
				sumOffset.second+=sumOffset.halfmillis/RTC_FREQ;
     9d2:	4c21      	ldr	r4, [pc, #132]	; (a58 <_Z15isrInternalClokv+0x1b0>)
     9d4:	6860      	ldr	r0, [r4, #4]
     9d6:	6825      	ldr	r5, [r4, #0]
     9d8:	4f19      	ldr	r7, [pc, #100]	; (a40 <_Z15isrInternalClokv+0x198>)
     9da:	21fa      	movs	r1, #250	; 0xfa
     9dc:	01c9      	lsls	r1, r1, #7
     9de:	47b8      	blx	r7
     9e0:	1945      	adds	r5, r0, r5
     9e2:	6025      	str	r5, [r4, #0]
				sumOffset.halfmillis=sumOffset.halfmillis%RTC_FREQ;
     9e4:	6860      	ldr	r0, [r4, #4]
     9e6:	4e17      	ldr	r6, [pc, #92]	; (a44 <_Z15isrInternalClokv+0x19c>)
     9e8:	21fa      	movs	r1, #250	; 0xfa
     9ea:	01c9      	lsls	r1, r1, #7
     9ec:	47b0      	blx	r6
     9ee:	6061      	str	r1, [r4, #4]
				timeManage.second+=timeManage.halfmillis/RTC_FREQ;
     9f0:	4c0b      	ldr	r4, [pc, #44]	; (a20 <_Z15isrInternalClokv+0x178>)
     9f2:	6860      	ldr	r0, [r4, #4]
     9f4:	6825      	ldr	r5, [r4, #0]
     9f6:	21fa      	movs	r1, #250	; 0xfa
     9f8:	01c9      	lsls	r1, r1, #7
     9fa:	47b8      	blx	r7
     9fc:	1945      	adds	r5, r0, r5
     9fe:	6025      	str	r5, [r4, #0]
				timeManage.halfmillis=timeManage.halfmillis%RTC_FREQ;
     a00:	6860      	ldr	r0, [r4, #4]
     a02:	21fa      	movs	r1, #250	; 0xfa
     a04:	01c9      	lsls	r1, r1, #7
     a06:	47b0      	blx	r6
     a08:	6061      	str	r1, [r4, #4]
			
			}
			

			
	Enable_global_interrupt();
     a0a:	2201      	movs	r2, #1
     a0c:	4b03      	ldr	r3, [pc, #12]	; (a1c <_Z15isrInternalClokv+0x174>)
     a0e:	701a      	strb	r2, [r3, #0]
     a10:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     a14:	b662      	cpsie	i
}
     a16:	b00d      	add	sp, #52	; 0x34
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	200000d0 	.word	0x200000d0
     a20:	200000b8 	.word	0x200000b8
     a24:	20000294 	.word	0x20000294
     a28:	2000028c 	.word	0x2000028c
     a2c:	00003e7f 	.word	0x00003e7f
     a30:	2000029c 	.word	0x2000029c
     a34:	0000e35c 	.word	0x0000e35c
     a38:	0000e374 	.word	0x0000e374
     a3c:	00005389 	.word	0x00005389
     a40:	00006ab5 	.word	0x00006ab5
     a44:	00006bc1 	.word	0x00006bc1
     a48:	200002b8 	.word	0x200002b8
     a4c:	20000298 	.word	0x20000298
     a50:	20000290 	.word	0x20000290
     a54:	00000da1 	.word	0x00000da1
     a58:	2000038c 	.word	0x2000038c

00000a5c <RTC_Handler>:
void RTC_Handler( void ){
     a5c:	b508      	push	{r3, lr}
	//pc.printf("ISR");
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     a5e:	4b06      	ldr	r3, [pc, #24]	; (a78 <RTC_Handler+0x1c>)
     a60:	7a19      	ldrb	r1, [r3, #8]
     a62:	2201      	movs	r2, #1
     a64:	430a      	orrs	r2, r1
     a66:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     a68:	7a1a      	ldrb	r2, [r3, #8]
     a6a:	2180      	movs	r1, #128	; 0x80
     a6c:	4249      	negs	r1, r1
     a6e:	430a      	orrs	r2, r1
     a70:	721a      	strb	r2, [r3, #8]
	isrInternalClok();
     a72:	4b02      	ldr	r3, [pc, #8]	; (a7c <RTC_Handler+0x20>)
     a74:	4798      	blx	r3
}
     a76:	bd08      	pop	{r3, pc}
     a78:	40001400 	.word	0x40001400
     a7c:	000008a9 	.word	0x000008a9

00000a80 <_Z22configureInternalClockv>:

void configureInternalClock(void){
     a80:	b508      	push	{r3, lr}
	hmi.printf("internal clock config\r\n");
     a82:	4821      	ldr	r0, [pc, #132]	; (b08 <_Z22configureInternalClockv+0x88>)
     a84:	4921      	ldr	r1, [pc, #132]	; (b0c <_Z22configureInternalClockv+0x8c>)
     a86:	4b22      	ldr	r3, [pc, #136]	; (b10 <_Z22configureInternalClockv+0x90>)
     a88:	4798      	blx	r3
	//gENERIC CLOCK GENRERATOR
	GCLK->GENCTRL.reg=0b00000000000000010000010000000010;
     a8a:	4b22      	ldr	r3, [pc, #136]	; (b14 <_Z22configureInternalClockv+0x94>)
     a8c:	4a22      	ldr	r2, [pc, #136]	; (b18 <_Z22configureInternalClockv+0x98>)
     a8e:	605a      	str	r2, [r3, #4]
	//Generic Clock Generator Division
	GCLK->GENDIV.reg= 0b00000000000000000000000100000010;
     a90:	2281      	movs	r2, #129	; 0x81
     a92:	0052      	lsls	r2, r2, #1
     a94:	609a      	str	r2, [r3, #8]
	GCLK->CLKCTRL.reg=0x4204;
     a96:	4a21      	ldr	r2, [pc, #132]	; (b1c <_Z22configureInternalClockv+0x9c>)
     a98:	805a      	strh	r2, [r3, #2]
	//peripheral configuration
	
	RTC->MODE0.CTRL.bit.PRESCALER=0x0;	//prescaller at 0
     a9a:	4b21      	ldr	r3, [pc, #132]	; (b20 <_Z22configureInternalClockv+0xa0>)
     a9c:	8819      	ldrh	r1, [r3, #0]
     a9e:	4a21      	ldr	r2, [pc, #132]	; (b24 <_Z22configureInternalClockv+0xa4>)
     aa0:	400a      	ands	r2, r1
     aa2:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MODE=0x0;			//mode 0 : 32 bit counter
     aa4:	881a      	ldrh	r2, [r3, #0]
     aa6:	210c      	movs	r1, #12
     aa8:	438a      	bics	r2, r1
     aaa:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.SWRST=0;			//no software reset
     aac:	881a      	ldrh	r2, [r3, #0]
     aae:	390b      	subs	r1, #11
     ab0:	438a      	bics	r2, r1
     ab2:	801a      	strh	r2, [r3, #0]
	RTC->MODE0.CTRL.bit.MATCHCLR=1;			//automatic reset counter
     ab4:	8819      	ldrh	r1, [r3, #0]
     ab6:	2280      	movs	r2, #128	; 0x80
     ab8:	430a      	orrs	r2, r1
     aba:	801a      	strh	r2, [r3, #0]
	
	//event configuration
	RTC->MODE0.INTENSET.bit.OVF=1;		//enable the event overflow
     abc:	79d9      	ldrb	r1, [r3, #7]
     abe:	2080      	movs	r0, #128	; 0x80
     ac0:	4240      	negs	r0, r0
     ac2:	4301      	orrs	r1, r0
     ac4:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTENSET.bit.CMP0=1;		//enable the event compare
     ac6:	79d9      	ldrb	r1, [r3, #7]
     ac8:	2201      	movs	r2, #1
     aca:	4311      	orrs	r1, r2
     acc:	71d9      	strb	r1, [r3, #7]
	RTC->MODE0.INTFLAG.bit.CMP0=1;		//disable the flag COMPARE
     ace:	7a19      	ldrb	r1, [r3, #8]
     ad0:	430a      	orrs	r2, r1
     ad2:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.INTFLAG.bit.OVF=1;		//disable the flag COMPARE
     ad4:	7a1a      	ldrb	r2, [r3, #8]
     ad6:	4302      	orrs	r2, r0
     ad8:	721a      	strb	r2, [r3, #8]
	RTC->MODE0.COUNT.bit.COUNT=0;			//set the RTC value
     ada:	2200      	movs	r2, #0
     adc:	611a      	str	r2, [r3, #16]
	RTC->MODE0.COMP[0].reg = count_set_period;
     ade:	4a12      	ldr	r2, [pc, #72]	; (b28 <_Z22configureInternalClockv+0xa8>)
     ae0:	6812      	ldr	r2, [r2, #0]
     ae2:	619a      	str	r2, [r3, #24]

	RTC->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     ae4:	8819      	ldrh	r1, [r3, #0]
     ae6:	2202      	movs	r2, #2
     ae8:	430a      	orrs	r2, r1
     aea:	801a      	strh	r2, [r3, #0]
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     aec:	4a0f      	ldr	r2, [pc, #60]	; (b2c <_Z22configureInternalClockv+0xac>)
     aee:	21c0      	movs	r1, #192	; 0xc0
     af0:	0089      	lsls	r1, r1, #2
     af2:	5853      	ldr	r3, [r2, r1]
     af4:	021b      	lsls	r3, r3, #8
     af6:	0a1b      	lsrs	r3, r3, #8
     af8:	20c0      	movs	r0, #192	; 0xc0
     afa:	0600      	lsls	r0, r0, #24
     afc:	4303      	orrs	r3, r0
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
     afe:	5053      	str	r3, [r2, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     b00:	2308      	movs	r3, #8
     b02:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
	NVIC_EnableIRQ(RTC_IRQn);
	
     b04:	bd08      	pop	{r3, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	20000270 	.word	0x20000270
     b0c:	0000e3c0 	.word	0x0000e3c0
     b10:	00005361 	.word	0x00005361
     b14:	40000c00 	.word	0x40000c00
     b18:	00010402 	.word	0x00010402
     b1c:	00004204 	.word	0x00004204
     b20:	40001400 	.word	0x40001400
     b24:	fffff0ff 	.word	0xfffff0ff
     b28:	200000b4 	.word	0x200000b4
     b2c:	e000e100 	.word	0xe000e100

00000b30 <_GLOBAL__sub_I_count_set_period>:
     b30:	b508      	push	{r3, lr}
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
     b32:	4807      	ldr	r0, [pc, #28]	; (b50 <_GLOBAL__sub_I_count_set_period+0x20>)
     b34:	2300      	movs	r3, #0
     b36:	7003      	strb	r3, [r0, #0]
     b38:	6043      	str	r3, [r0, #4]
     b3a:	7203      	strb	r3, [r0, #8]
     b3c:	7243      	strb	r3, [r0, #9]
     b3e:	7283      	strb	r3, [r0, #10]
     b40:	60c3      	str	r3, [r0, #12]
     b42:	6103      	str	r3, [r0, #16]
     b44:	6143      	str	r3, [r0, #20]
     b46:	6183      	str	r3, [r0, #24]
        gpio_init_out(&gpio, pin);
     b48:	2113      	movs	r1, #19
     b4a:	4b02      	ldr	r3, [pc, #8]	; (b54 <_GLOBAL__sub_I_count_set_period+0x24>)
     b4c:	4798      	blx	r3
     b4e:	bd08      	pop	{r3, pc}
     b50:	2000029c 	.word	0x2000029c
     b54:	000053ad 	.word	0x000053ad

00000b58 <_Z6ppsISRv>:
/** Callback function for the EXTINT driver, called when an external interrupt
 *  detection occurs.
 */

void ppsISR(void)
{	
     b58:	b530      	push	{r4, r5, lr}
     b5a:	b08f      	sub	sp, #60	; 0x3c
	}	
	else{
		nPPS++;
	}*/
	//Disable_global_interrupt();
	Clock timeCopy={0,0,true};
     b5c:	ad08      	add	r5, sp, #32
     b5e:	2300      	movs	r3, #0
     b60:	9308      	str	r3, [sp, #32]
     b62:	9309      	str	r3, [sp, #36]	; 0x24
     b64:	2201      	movs	r2, #1
     b66:	722a      	strb	r2, [r5, #8]
	//Disable_global_interrupt();
	Clock timeMaster={0,0,true};
     b68:	ac0b      	add	r4, sp, #44	; 0x2c
     b6a:	930b      	str	r3, [sp, #44]	; 0x2c
     b6c:	930c      	str	r3, [sp, #48]	; 0x30
     b6e:	7222      	strb	r2, [r4, #8]
	readClock(&timeCopy);
     b70:	1c28      	adds	r0, r5, #0
     b72:	4b11      	ldr	r3, [pc, #68]	; (bb8 <_Z6ppsISRv+0x60>)
     b74:	4798      	blx	r3
	//Enable_global_interrupt();
	timeMaster.second=timeCopy.second;
     b76:	9b08      	ldr	r3, [sp, #32]
     b78:	930b      	str	r3, [sp, #44]	; 0x2c
	timeMaster.halfmillis=timeCopy.halfmillis;
     b7a:	686b      	ldr	r3, [r5, #4]
     b7c:	6063      	str	r3, [r4, #4]
	if(timeMaster.halfmillis>=RTC_FREQ/2){//for the accurate 500ms
     b7e:	6862      	ldr	r2, [r4, #4]
     b80:	4b0e      	ldr	r3, [pc, #56]	; (bbc <_Z6ppsISRv+0x64>)
     b82:	429a      	cmp	r2, r3
     b84:	d902      	bls.n	b8c <_Z6ppsISRv+0x34>
		timeMaster.second++;
     b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b88:	3301      	adds	r3, #1
     b8a:	930b      	str	r3, [sp, #44]	; 0x2c
	}
	timeMaster.halfmillis=0;
     b8c:	2300      	movs	r3, #0
     b8e:	930c      	str	r3, [sp, #48]	; 0x30
	if((timeCopy.halfmillis>RTC_FREQ)||(timeCopy.halfmillis<0)){
		printf("timeCopypps:'");
		printfClock(timeCopy);
	}
	*/
	timeProt.offset=subClock(timeMaster,timeCopy);
     b90:	ac04      	add	r4, sp, #16
     b92:	ab08      	add	r3, sp, #32
     b94:	466a      	mov	r2, sp
     b96:	cb23      	ldmia	r3!, {r0, r1, r5}
     b98:	c223      	stmia	r2!, {r0, r1, r5}
     b9a:	1c20      	adds	r0, r4, #0
     b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
     b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
     ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ba2:	4d07      	ldr	r5, [pc, #28]	; (bc0 <_Z6ppsISRv+0x68>)
     ba4:	47a8      	blx	r5
     ba6:	4b07      	ldr	r3, [pc, #28]	; (bc4 <_Z6ppsISRv+0x6c>)
     ba8:	3398      	adds	r3, #152	; 0x98
     baa:	cc07      	ldmia	r4!, {r0, r1, r2}
     bac:	c307      	stmia	r3!, {r0, r1, r2}
	//timeProt.offset.second=0;
	#ifdef MASTERMODE
		updateClock();
     bae:	4b06      	ldr	r3, [pc, #24]	; (bc8 <_Z6ppsISRv+0x70>)
     bb0:	4798      	blx	r3
		}
		sendHMI(messageHMIError);
	#endif
	
//	Enable_global_interrupt();
}
     bb2:	b00f      	add	sp, #60	; 0x3c
     bb4:	bd30      	pop	{r4, r5, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	000007c5 	.word	0x000007c5
     bbc:	00003e7f 	.word	0x00003e7f
     bc0:	00000c9d 	.word	0x00000c9d
     bc4:	20000398 	.word	0x20000398
     bc8:	00000f69 	.word	0x00000f69

00000bcc <_Z16configurationPPSv>:

void configurationPPS(void){
     bcc:	b510      	push	{r4, lr}
     bce:	b084      	sub	sp, #16
		hmi.printf("confif pps\r\n");
     bd0:	480e      	ldr	r0, [pc, #56]	; (c0c <_Z16configurationPPSv+0x40>)
     bd2:	490f      	ldr	r1, [pc, #60]	; (c10 <_Z16configurationPPSv+0x44>)
     bd4:	4b0f      	ldr	r3, [pc, #60]	; (c14 <_Z16configurationPPSv+0x48>)
     bd6:	4798      	blx	r3
	//	pps.rise(ppsISR);
		struct extint_chan_conf eint_chan_conf;
		extint_chan_get_config_defaults(&eint_chan_conf);
     bd8:	ac01      	add	r4, sp, #4
     bda:	1c20      	adds	r0, r4, #0
     bdc:	4b0e      	ldr	r3, [pc, #56]	; (c18 <_Z16configurationPPSv+0x4c>)
     bde:	4798      	blx	r3
		// put the button as EXTINT
		eint_chan_conf.gpio_pin           = PIN_PA28A_EIC_EXTINT8;
     be0:	231c      	movs	r3, #28
     be2:	9301      	str	r3, [sp, #4]
		eint_chan_conf.gpio_pin_mux       = MUX_PA28A_EIC_EXTINT8;
     be4:	2300      	movs	r3, #0
     be6:	6063      	str	r3, [r4, #4]
		eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
     be8:	2201      	movs	r2, #1
     bea:	72e2      	strb	r2, [r4, #11]
		eint_chan_conf.filter_input_signal = false;
     bec:	72a3      	strb	r3, [r4, #10]
		
		extint_chan_set_config(8, &eint_chan_conf);
     bee:	2008      	movs	r0, #8
     bf0:	1c21      	adds	r1, r4, #0
     bf2:	4b0a      	ldr	r3, [pc, #40]	; (c1c <_Z16configurationPPSv+0x50>)
     bf4:	4798      	blx	r3
		//configuration callback
		extint_register_callback(&ppsISR,8,EXTINT_CALLBACK_TYPE_DETECT);
     bf6:	480a      	ldr	r0, [pc, #40]	; (c20 <_Z16configurationPPSv+0x54>)
     bf8:	2108      	movs	r1, #8
     bfa:	2200      	movs	r2, #0
     bfc:	4b09      	ldr	r3, [pc, #36]	; (c24 <_Z16configurationPPSv+0x58>)
     bfe:	4798      	blx	r3
		//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
		//ppsIsrr.attach(&ppsISR);
		//activation callback
		extint_chan_enable_callback(8,EXTINT_CALLBACK_TYPE_DETECT);		
     c00:	2008      	movs	r0, #8
     c02:	2100      	movs	r1, #0
     c04:	4b08      	ldr	r3, [pc, #32]	; (c28 <_Z16configurationPPSv+0x5c>)
     c06:	4798      	blx	r3
		
		
     c08:	b004      	add	sp, #16
     c0a:	bd10      	pop	{r4, pc}
     c0c:	20000270 	.word	0x20000270
     c10:	0000e3d8 	.word	0x0000e3d8
     c14:	00005361 	.word	0x00005361
     c18:	000041a5 	.word	0x000041a5
     c1c:	000041b9 	.word	0x000041b9
     c20:	00000b59 	.word	0x00000b59
     c24:	000040a5 	.word	0x000040a5
     c28:	000040cd 	.word	0x000040cd

00000c2c <_Z3sup11structClockS_>:



Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
     c2c:	b082      	sub	sp, #8
     c2e:	b084      	sub	sp, #16
     c30:	9001      	str	r0, [sp, #4]
     c32:	9102      	str	r1, [sp, #8]
     c34:	9203      	str	r2, [sp, #12]
     c36:	9305      	str	r3, [sp, #20]
		if(clock1.second>clock2.second){//clock1>clock2
     c38:	9a01      	ldr	r2, [sp, #4]
     c3a:	9b05      	ldr	r3, [sp, #20]
			return true;
     c3c:	2001      	movs	r0, #1


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
     c3e:	429a      	cmp	r2, r3
     c40:	d809      	bhi.n	c56 <_Z3sup11structClockS_+0x2a>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     c42:	9a01      	ldr	r2, [sp, #4]
     c44:	9b05      	ldr	r3, [sp, #20]
				return false;
     c46:	2000      	movs	r0, #0
bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     c48:	429a      	cmp	r2, r3
     c4a:	d304      	bcc.n	c56 <_Z3sup11structClockS_+0x2a>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
     c4c:	9802      	ldr	r0, [sp, #8]
     c4e:	9b06      	ldr	r3, [sp, #24]
     c50:	4283      	cmp	r3, r0
     c52:	4180      	sbcs	r0, r0
     c54:	4240      	negs	r0, r0
					return false;
				}
			}
		}

}
     c56:	b004      	add	sp, #16
     c58:	b002      	add	sp, #8
     c5a:	4770      	bx	lr

00000c5c <_Z11subClockPos11structClockS_>:
	}

	
	return ret;
}
Clock subClockPos(Clock clock1,Clock clock2 ){
     c5c:	b084      	sub	sp, #16
     c5e:	9101      	str	r1, [sp, #4]
     c60:	9202      	str	r2, [sp, #8]
     c62:	9303      	str	r3, [sp, #12]
	Clock ret={0,0,true};
     c64:	2300      	movs	r3, #0
     c66:	6003      	str	r3, [r0, #0]
     c68:	6043      	str	r3, [r0, #4]
     c6a:	3301      	adds	r3, #1
     c6c:	7203      	strb	r3, [r0, #8]
	//clock1.second+=clock1.halfmillis/RTC_FREQ;
	//clock1.halfmillis=clock1.halfmillis%RTC_FREQ;	
		
	//clock2.second+=clock2.halfmillis/RTC_FREQ;
	//clock2.halfmillis=clock2.halfmillis%RTC_FREQ;
	long int halfmillis=clock2.halfmillis;
     c6e:	9905      	ldr	r1, [sp, #20]
	ret.second=clock1.second-clock2.second;
     c70:	9a01      	ldr	r2, [sp, #4]
     c72:	9b04      	ldr	r3, [sp, #16]
     c74:	1ad2      	subs	r2, r2, r3
     c76:	6002      	str	r2, [r0, #0]
	halfmillis=(long int)clock1.halfmillis-halfmillis;
     c78:	9b02      	ldr	r3, [sp, #8]
     c7a:	1a5b      	subs	r3, r3, r1
	
	
	
	if(halfmillis<0){
     c7c:	d50b      	bpl.n	c96 <_Z11subClockPos11structClockS_+0x3a>
		
		if(ret.second!=0){
     c7e:	6802      	ldr	r2, [r0, #0]
     c80:	2a00      	cmp	r2, #0
     c82:	d009      	beq.n	c98 <_Z11subClockPos11structClockS_+0x3c>
				pc.printf("c1:%ld,%ld",clock1.second,clock1.halfmillis);
				pc.printf("c2:%ld,%ld",clock2.second,clock2.halfmillis);*/
				//sendHMI("error clock");
			}
			
			ret.second--;
     c84:	6802      	ldr	r2, [r0, #0]
     c86:	3a01      	subs	r2, #1
     c88:	6002      	str	r2, [r0, #0]
			ret.halfmillis=(unsigned int)(halfmillis+RTC_FREQ);
     c8a:	22fa      	movs	r2, #250	; 0xfa
     c8c:	01d2      	lsls	r2, r2, #7
     c8e:	4694      	mov	ip, r2
     c90:	4463      	add	r3, ip
     c92:	6043      	str	r3, [r0, #4]
     c94:	e000      	b.n	c98 <_Z11subClockPos11structClockS_+0x3c>
		}
	}
	else{
		ret.halfmillis=halfmillis;
     c96:	6043      	str	r3, [r0, #4]
	}
			
	return ret;
     c98:	b004      	add	sp, #16
     c9a:	4770      	bx	lr

00000c9c <_Z8subClock11structClockS_>:
	if(clk.sign==false){
		clk.sign=true;
	}
	return clk;
}
Clock subClock(Clock clock1,Clock clock2 ){
     c9c:	b570      	push	{r4, r5, r6, lr}
     c9e:	b08e      	sub	sp, #56	; 0x38
     ca0:	1c04      	adds	r4, r0, #0
     ca2:	a805      	add	r0, sp, #20
     ca4:	9105      	str	r1, [sp, #20]
     ca6:	9206      	str	r2, [sp, #24]
     ca8:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
     caa:	2300      	movs	r3, #0
     cac:	6023      	str	r3, [r4, #0]
     cae:	6063      	str	r3, [r4, #4]
     cb0:	3301      	adds	r3, #1
     cb2:	7223      	strb	r3, [r4, #8]
	if(clock1.sign!=clock2.sign){
     cb4:	7a03      	ldrb	r3, [r0, #8]
     cb6:	aa12      	add	r2, sp, #72	; 0x48
     cb8:	7a12      	ldrb	r2, [r2, #8]
     cba:	b2db      	uxtb	r3, r3
     cbc:	4293      	cmp	r3, r2
     cbe:	d020      	beq.n	d02 <_Z8subClock11structClockS_+0x66>
		if(clock1.sign==true){// + - -
     cc0:	7a03      	ldrb	r3, [r0, #8]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d00d      	beq.n	ce2 <_Z8subClock11structClockS_+0x46>
			clock2.sign=true;
     cc6:	2201      	movs	r2, #1
     cc8:	ab12      	add	r3, sp, #72	; 0x48
     cca:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
     ccc:	466b      	mov	r3, sp
     cce:	aa12      	add	r2, sp, #72	; 0x48
     cd0:	ca23      	ldmia	r2!, {r0, r1, r5}
     cd2:	c323      	stmia	r3!, {r0, r1, r5}
     cd4:	1c20      	adds	r0, r4, #0
     cd6:	9905      	ldr	r1, [sp, #20]
     cd8:	9a06      	ldr	r2, [sp, #24]
     cda:	9b07      	ldr	r3, [sp, #28]
     cdc:	4d2e      	ldr	r5, [pc, #184]	; (d98 <_Z8subClock11structClockS_+0xfc>)
     cde:	47a8      	blx	r5
     ce0:	e056      	b.n	d90 <_Z8subClock11structClockS_+0xf4>
		}
		else{// - - +
			clock1.sign=true;
     ce2:	ab05      	add	r3, sp, #20
     ce4:	2201      	movs	r2, #1
     ce6:	721a      	strb	r2, [r3, #8]
			ret=sumClock(clock1,clock2);
     ce8:	466a      	mov	r2, sp
     cea:	a912      	add	r1, sp, #72	; 0x48
     cec:	c961      	ldmia	r1!, {r0, r5, r6}
     cee:	c261      	stmia	r2!, {r0, r5, r6}
     cf0:	1c20      	adds	r0, r4, #0
     cf2:	9905      	ldr	r1, [sp, #20]
     cf4:	9a06      	ldr	r2, [sp, #24]
     cf6:	9b07      	ldr	r3, [sp, #28]
     cf8:	4d27      	ldr	r5, [pc, #156]	; (d98 <_Z8subClock11structClockS_+0xfc>)
     cfa:	47a8      	blx	r5
			ret.sign=false;
     cfc:	2300      	movs	r3, #0
     cfe:	7223      	strb	r3, [r4, #8]
     d00:	e046      	b.n	d90 <_Z8subClock11structClockS_+0xf4>
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
     d02:	ab05      	add	r3, sp, #20
     d04:	7a1b      	ldrb	r3, [r3, #8]
     d06:	2b00      	cmp	r3, #0
     d08:	d02b      	beq.n	d62 <_Z8subClock11structClockS_+0xc6>
     d0a:	aa08      	add	r2, sp, #32
     d0c:	ab05      	add	r3, sp, #20
     d0e:	cb23      	ldmia	r3!, {r0, r1, r5}
     d10:	c223      	stmia	r2!, {r0, r1, r5}
     d12:	ab0b      	add	r3, sp, #44	; 0x2c
     d14:	aa12      	add	r2, sp, #72	; 0x48
     d16:	ca23      	ldmia	r2!, {r0, r1, r5}
     d18:	c323      	stmia	r3!, {r0, r1, r5}


Clock timeManage={0,0,true};

bool sup(Clock clock1,Clock clock2){
		if(clock1.second>clock2.second){//clock1>clock2
     d1a:	9a08      	ldr	r2, [sp, #32]
     d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d1e:	429a      	cmp	r2, r3
     d20:	d807      	bhi.n	d32 <_Z8subClock11structClockS_+0x96>
			return true;
		}
		else{
			if(clock1.second<clock2.second){
     d22:	9a08      	ldr	r2, [sp, #32]
     d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     d26:	429a      	cmp	r2, r3
     d28:	d30e      	bcc.n	d48 <_Z8subClock11structClockS_+0xac>
				return false;
			}
			else{//egual
				if(clock1.halfmillis>clock2.halfmillis){
     d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			ret.sign=false;
		}
	}
	else{
		if(clock1.sign==true){ //+ - +
			if(sup(clock1,clock2)){//clock1>Clock2
     d2e:	429a      	cmp	r2, r3
     d30:	d90a      	bls.n	d48 <_Z8subClock11structClockS_+0xac>
				
				ret=subClockPos(clock1,clock2);
     d32:	466b      	mov	r3, sp
     d34:	aa12      	add	r2, sp, #72	; 0x48
     d36:	ca23      	ldmia	r2!, {r0, r1, r5}
     d38:	c323      	stmia	r3!, {r0, r1, r5}
     d3a:	1c20      	adds	r0, r4, #0
     d3c:	9905      	ldr	r1, [sp, #20]
     d3e:	9a06      	ldr	r2, [sp, #24]
     d40:	9b07      	ldr	r3, [sp, #28]
     d42:	4d16      	ldr	r5, [pc, #88]	; (d9c <_Z8subClock11structClockS_+0x100>)
     d44:	47a8      	blx	r5
     d46:	e023      	b.n	d90 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret=subClockPos(clock2,clock1);
     d48:	ab05      	add	r3, sp, #20
     d4a:	466a      	mov	r2, sp
     d4c:	cb23      	ldmia	r3!, {r0, r1, r5}
     d4e:	c223      	stmia	r2!, {r0, r1, r5}
     d50:	1c20      	adds	r0, r4, #0
     d52:	9912      	ldr	r1, [sp, #72]	; 0x48
     d54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
     d58:	4d10      	ldr	r5, [pc, #64]	; (d9c <_Z8subClock11structClockS_+0x100>)
     d5a:	47a8      	blx	r5
				ret.sign=false;
     d5c:	2300      	movs	r3, #0
     d5e:	7223      	strb	r3, [r4, #8]
     d60:	e016      	b.n	d90 <_Z8subClock11structClockS_+0xf4>
			}
		}
		else{// - - - 
			clock2.sign=true;
     d62:	2201      	movs	r2, #1
     d64:	ab12      	add	r3, sp, #72	; 0x48
     d66:	721a      	strb	r2, [r3, #8]
			clock1.sign=true;	
     d68:	ab05      	add	r3, sp, #20
     d6a:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
     d6c:	466a      	mov	r2, sp
     d6e:	a912      	add	r1, sp, #72	; 0x48
     d70:	c961      	ldmia	r1!, {r0, r5, r6}
     d72:	c261      	stmia	r2!, {r0, r5, r6}
     d74:	1c20      	adds	r0, r4, #0
     d76:	9905      	ldr	r1, [sp, #20]
     d78:	9a06      	ldr	r2, [sp, #24]
     d7a:	9b07      	ldr	r3, [sp, #28]
     d7c:	f7ff ff8e 	bl	c9c <_Z8subClock11structClockS_>
			if(ret.sign==true){
     d80:	7a23      	ldrb	r3, [r4, #8]
     d82:	2b00      	cmp	r3, #0
     d84:	d002      	beq.n	d8c <_Z8subClock11structClockS_+0xf0>
				ret.sign=false;
     d86:	2300      	movs	r3, #0
     d88:	7223      	strb	r3, [r4, #8]
     d8a:	e001      	b.n	d90 <_Z8subClock11structClockS_+0xf4>
			}
			else{
				ret.sign=true;
     d8c:	2301      	movs	r3, #1
     d8e:	7223      	strb	r3, [r4, #8]
		}
	}

	
	return ret;
}
     d90:	1c20      	adds	r0, r4, #0
     d92:	b00e      	add	sp, #56	; 0x38
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000da1 	.word	0x00000da1
     d9c:	00000c5d 	.word	0x00000c5d

00000da0 <_Z8sumClock11structClockS_>:
	ret.second=ret.second+(halfmillis/RTC_FREQ);
	ret.halfmillis=halfmillis%RTC_FREQ;
	return ret;
	
}
Clock sumClock(Clock clock1,Clock clock2 ){
     da0:	b5f0      	push	{r4, r5, r6, r7, lr}
     da2:	4647      	mov	r7, r8
     da4:	b480      	push	{r7}
     da6:	b09a      	sub	sp, #104	; 0x68
     da8:	1c04      	adds	r4, r0, #0
     daa:	a805      	add	r0, sp, #20
     dac:	9105      	str	r1, [sp, #20]
     dae:	9206      	str	r2, [sp, #24]
     db0:	9307      	str	r3, [sp, #28]
	Clock ret={0,0,true};
     db2:	2300      	movs	r3, #0
     db4:	6023      	str	r3, [r4, #0]
     db6:	6063      	str	r3, [r4, #4]
     db8:	3301      	adds	r3, #1
     dba:	7223      	strb	r3, [r4, #8]
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
     dbc:	7a03      	ldrb	r3, [r0, #8]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d013      	beq.n	dea <_Z8sumClock11structClockS_+0x4a>
     dc2:	ab20      	add	r3, sp, #128	; 0x80
     dc4:	7a1b      	ldrb	r3, [r3, #8]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d114      	bne.n	df4 <_Z8sumClock11structClockS_+0x54>
     dca:	e00e      	b.n	dea <_Z8sumClock11structClockS_+0x4a>
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
     dcc:	ab20      	add	r3, sp, #128	; 0x80
     dce:	7a1b      	ldrb	r3, [r3, #8]
     dd0:	2b00      	cmp	r3, #0
     dd2:	d146      	bne.n	e62 <_Z8sumClock11structClockS_+0xc2>
     dd4:	e037      	b.n	e46 <_Z8sumClock11structClockS_+0xa6>
			clock2.sign=true;
			ret=subClock(clock1,clock2);
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
     dd6:	ab20      	add	r3, sp, #128	; 0x80
     dd8:	7a1b      	ldrb	r3, [r3, #8]
     dda:	2b00      	cmp	r3, #0
     ddc:	d146      	bne.n	e6c <_Z8sumClock11structClockS_+0xcc>
     dde:	e052      	b.n	e86 <_Z8sumClock11structClockS_+0xe6>
						clock1.sign=true;
						ret=subClock(clock2,clock1);
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
     de0:	ab20      	add	r3, sp, #128	; 0x80
     de2:	7a1b      	ldrb	r3, [r3, #8]
     de4:	2b00      	cmp	r3, #0
     de6:	d053      	beq.n	e90 <_Z8sumClock11structClockS_+0xf0>
     de8:	e081      	b.n	eee <_Z8sumClock11structClockS_+0x14e>
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
     dea:	ab05      	add	r3, sp, #20
     dec:	7a1b      	ldrb	r3, [r3, #8]
     dee:	2b00      	cmp	r3, #0
     df0:	d1ec      	bne.n	dcc <_Z8sumClock11structClockS_+0x2c>
     df2:	e036      	b.n	e62 <_Z8sumClock11structClockS_+0xc2>
     df4:	aa08      	add	r2, sp, #32
     df6:	ab05      	add	r3, sp, #20
     df8:	1c11      	adds	r1, r2, #0
     dfa:	cb61      	ldmia	r3!, {r0, r5, r6}
     dfc:	c161      	stmia	r1!, {r0, r5, r6}
     dfe:	ab0b      	add	r3, sp, #44	; 0x2c
     e00:	1c19      	adds	r1, r3, #0
     e02:	a820      	add	r0, sp, #128	; 0x80
     e04:	c8e0      	ldmia	r0!, {r5, r6, r7}
     e06:	c1e0      	stmia	r1!, {r5, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
     e08:	ad14      	add	r5, sp, #80	; 0x50
     e0a:	2100      	movs	r1, #0
     e0c:	9114      	str	r1, [sp, #80]	; 0x50
     e0e:	9115      	str	r1, [sp, #84]	; 0x54
     e10:	3101      	adds	r1, #1
     e12:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
     e14:	9909      	ldr	r1, [sp, #36]	; 0x24
	ret.second=clock1.second+clock2.second;
     e16:	9a08      	ldr	r2, [sp, #32]
     e18:	980b      	ldr	r0, [sp, #44]	; 0x2c
     e1a:	1882      	adds	r2, r0, r2
     e1c:	9214      	str	r2, [sp, #80]	; 0x50
	halfmillis=halfmillis+clock2.halfmillis;
     e1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     e20:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
     e22:	9f14      	ldr	r7, [sp, #80]	; 0x50
     e24:	1c30      	adds	r0, r6, #0
     e26:	21fa      	movs	r1, #250	; 0xfa
     e28:	01c9      	lsls	r1, r1, #7
     e2a:	4b3a      	ldr	r3, [pc, #232]	; (f14 <_Z8sumClock11structClockS_+0x174>)
     e2c:	4798      	blx	r3
     e2e:	19c7      	adds	r7, r0, r7
     e30:	9714      	str	r7, [sp, #80]	; 0x50
	ret.halfmillis=halfmillis%RTC_FREQ;
     e32:	1c30      	adds	r0, r6, #0
     e34:	21fa      	movs	r1, #250	; 0xfa
     e36:	01c9      	lsls	r1, r1, #7
     e38:	4b37      	ldr	r3, [pc, #220]	; (f18 <_Z8sumClock11structClockS_+0x178>)
     e3a:	4798      	blx	r3
     e3c:	6069      	str	r1, [r5, #4]
}
Clock sumClock(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
		
	if((clock1.sign==true)&&(clock2.sign==true)){// + + +
		ret=sumClockPos(clock1,clock2);
     e3e:	1c23      	adds	r3, r4, #0
     e40:	cd07      	ldmia	r5!, {r0, r1, r2}
     e42:	c307      	stmia	r3!, {r0, r1, r2}
     e44:	e053      	b.n	eee <_Z8sumClock11structClockS_+0x14e>
	}
	else{
		if((clock1.sign==true)&&(clock2.sign==false)){ // + + -
			clock2.sign=true;
     e46:	2201      	movs	r2, #1
     e48:	ab20      	add	r3, sp, #128	; 0x80
     e4a:	721a      	strb	r2, [r3, #8]
			ret=subClock(clock1,clock2);
     e4c:	466b      	mov	r3, sp
     e4e:	aa20      	add	r2, sp, #128	; 0x80
     e50:	ca23      	ldmia	r2!, {r0, r1, r5}
     e52:	c323      	stmia	r3!, {r0, r1, r5}
     e54:	1c20      	adds	r0, r4, #0
     e56:	9905      	ldr	r1, [sp, #20]
     e58:	9a06      	ldr	r2, [sp, #24]
     e5a:	9b07      	ldr	r3, [sp, #28]
     e5c:	4d2f      	ldr	r5, [pc, #188]	; (f1c <_Z8sumClock11structClockS_+0x17c>)
     e5e:	47a8      	blx	r5
     e60:	e045      	b.n	eee <_Z8sumClock11structClockS_+0x14e>
		}
		else{
					if((clock1.sign==false)&&(clock2.sign==true)){ // - + + 
     e62:	ab05      	add	r3, sp, #20
     e64:	7a1b      	ldrb	r3, [r3, #8]
     e66:	2b00      	cmp	r3, #0
     e68:	d10d      	bne.n	e86 <_Z8sumClock11structClockS_+0xe6>
     e6a:	e7b4      	b.n	dd6 <_Z8sumClock11structClockS_+0x36>
						clock1.sign=true;
     e6c:	ab05      	add	r3, sp, #20
     e6e:	2201      	movs	r2, #1
     e70:	721a      	strb	r2, [r3, #8]
						ret=subClock(clock2,clock1);
     e72:	466a      	mov	r2, sp
     e74:	cb23      	ldmia	r3!, {r0, r1, r5}
     e76:	c223      	stmia	r2!, {r0, r1, r5}
     e78:	1c20      	adds	r0, r4, #0
     e7a:	9920      	ldr	r1, [sp, #128]	; 0x80
     e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
     e7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
     e80:	4d26      	ldr	r5, [pc, #152]	; (f1c <_Z8sumClock11structClockS_+0x17c>)
     e82:	47a8      	blx	r5
     e84:	e033      	b.n	eee <_Z8sumClock11structClockS_+0x14e>
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
     e86:	ab05      	add	r3, sp, #20
     e88:	7a1b      	ldrb	r3, [r3, #8]
     e8a:	2b00      	cmp	r3, #0
     e8c:	d12f      	bne.n	eee <_Z8sumClock11structClockS_+0x14e>
     e8e:	e7a7      	b.n	de0 <_Z8sumClock11structClockS_+0x40>
							clock1.sign=true;
     e90:	ab05      	add	r3, sp, #20
     e92:	2101      	movs	r1, #1
     e94:	7219      	strb	r1, [r3, #8]
							clock2.sign=true;
     e96:	aa20      	add	r2, sp, #128	; 0x80
     e98:	7211      	strb	r1, [r2, #8]
     e9a:	aa0e      	add	r2, sp, #56	; 0x38
     e9c:	1c10      	adds	r0, r2, #0
     e9e:	cbe0      	ldmia	r3!, {r5, r6, r7}
     ea0:	c0e0      	stmia	r0!, {r5, r6, r7}
     ea2:	ab11      	add	r3, sp, #68	; 0x44
     ea4:	469c      	mov	ip, r3
     ea6:	1c18      	adds	r0, r3, #0
     ea8:	ad20      	add	r5, sp, #128	; 0x80
     eaa:	cdc8      	ldmia	r5!, {r3, r6, r7}
     eac:	c0c8      	stmia	r0!, {r3, r6, r7}
			}
		}

}
Clock sumClockPos(Clock clock1,Clock clock2 ){
	Clock ret={0,0,true};
     eae:	ad17      	add	r5, sp, #92	; 0x5c
     eb0:	2700      	movs	r7, #0
     eb2:	9717      	str	r7, [sp, #92]	; 0x5c
     eb4:	9718      	str	r7, [sp, #96]	; 0x60
     eb6:	7229      	strb	r1, [r5, #8]
	unsigned long int halfmillis=clock1.halfmillis;
     eb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
	ret.second=clock1.second+clock2.second;
     eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     ebc:	9811      	ldr	r0, [sp, #68]	; 0x44
     ebe:	1882      	adds	r2, r0, r2
     ec0:	9217      	str	r2, [sp, #92]	; 0x5c
	halfmillis=halfmillis+clock2.halfmillis;
     ec2:	4663      	mov	r3, ip
     ec4:	685e      	ldr	r6, [r3, #4]
     ec6:	1876      	adds	r6, r6, r1
	ret.second=ret.second+(halfmillis/RTC_FREQ);
     ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     eca:	4698      	mov	r8, r3
     ecc:	1c30      	adds	r0, r6, #0
     ece:	21fa      	movs	r1, #250	; 0xfa
     ed0:	01c9      	lsls	r1, r1, #7
     ed2:	4b10      	ldr	r3, [pc, #64]	; (f14 <_Z8sumClock11structClockS_+0x174>)
     ed4:	4798      	blx	r3
     ed6:	4440      	add	r0, r8
     ed8:	9017      	str	r0, [sp, #92]	; 0x5c
	ret.halfmillis=halfmillis%RTC_FREQ;
     eda:	1c30      	adds	r0, r6, #0
     edc:	21fa      	movs	r1, #250	; 0xfa
     ede:	01c9      	lsls	r1, r1, #7
     ee0:	4b0d      	ldr	r3, [pc, #52]	; (f18 <_Z8sumClock11structClockS_+0x178>)
     ee2:	4798      	blx	r3
     ee4:	6069      	str	r1, [r5, #4]
					}
					else{
						if((clock1.sign==false)&&(clock2.sign==false)){ // - + -
							clock1.sign=true;
							clock2.sign=true;
							ret=sumClockPos(clock1,clock2);
     ee6:	1c23      	adds	r3, r4, #0
     ee8:	cd07      	ldmia	r5!, {r0, r1, r2}
     eea:	c307      	stmia	r3!, {r0, r1, r2}
							ret.sign=false;
     eec:	7227      	strb	r7, [r4, #8]
						}
					}
		}
		
	}
	ret.second+=ret.halfmillis/RTC_FREQ;
     eee:	6860      	ldr	r0, [r4, #4]
     ef0:	6825      	ldr	r5, [r4, #0]
     ef2:	21fa      	movs	r1, #250	; 0xfa
     ef4:	01c9      	lsls	r1, r1, #7
     ef6:	4b07      	ldr	r3, [pc, #28]	; (f14 <_Z8sumClock11structClockS_+0x174>)
     ef8:	4798      	blx	r3
     efa:	1945      	adds	r5, r0, r5
     efc:	6025      	str	r5, [r4, #0]
	ret.halfmillis=ret.halfmillis%RTC_FREQ;
     efe:	6860      	ldr	r0, [r4, #4]
     f00:	21fa      	movs	r1, #250	; 0xfa
     f02:	01c9      	lsls	r1, r1, #7
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <_Z8sumClock11structClockS_+0x178>)
     f06:	4798      	blx	r3
     f08:	6061      	str	r1, [r4, #4]
	return ret;
}
     f0a:	1c20      	adds	r0, r4, #0
     f0c:	b01a      	add	sp, #104	; 0x68
     f0e:	bc04      	pop	{r2}
     f10:	4690      	mov	r8, r2
     f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f14:	00006ab5 	.word	0x00006ab5
     f18:	00006bc1 	.word	0x00006bc1
     f1c:	00000c9d 	.word	0x00000c9d

00000f20 <_Z10correctionv>:
#endif
/************************************************************************/
/* FUNCTION                                                             */
/************************************************************************/

void correction(void){
     f20:	b508      	push	{r3, lr}
	

	if(xTaskGetTickCount()-saveCorrection>(TIME_CORRECTION/portTICK_RATE_MS)){
     f22:	4b05      	ldr	r3, [pc, #20]	; (f38 <_Z10correctionv+0x18>)
     f24:	4798      	blx	r3
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <_Z10correctionv+0x1c>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	1ac0      	subs	r0, r0, r3
     f2c:	4b04      	ldr	r3, [pc, #16]	; (f40 <_Z10correctionv+0x20>)
     f2e:	4298      	cmp	r0, r3
     f30:	d900      	bls.n	f34 <_Z10correctionv+0x14>
     f32:	e7fe      	b.n	f32 <_Z10correctionv+0x12>
			}
			
		
	}
	
}
     f34:	bd08      	pop	{r3, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00001f69 	.word	0x00001f69
     f3c:	200002bc 	.word	0x200002bc
     f40:	000186a0 	.word	0x000186a0

00000f44 <_Z24resetSofftwareCorrectionv>:
	return a;
}

void resetSofftwareCorrection(void){

		sumOffset.second=0;
     f44:	4a06      	ldr	r2, [pc, #24]	; (f60 <_Z24resetSofftwareCorrectionv+0x1c>)
     f46:	2300      	movs	r3, #0
     f48:	6013      	str	r3, [r2, #0]
		sumOffset.halfmillis=0;
     f4a:	6053      	str	r3, [r2, #4]
		timeProt.correction.nbCorrection=0;
     f4c:	4a05      	ldr	r2, [pc, #20]	; (f64 <_Z24resetSofftwareCorrectionv+0x20>)
     f4e:	21a4      	movs	r1, #164	; 0xa4
     f50:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.second=0;
     f52:	3120      	adds	r1, #32
     f54:	5053      	str	r3, [r2, r1]
		timeProt.correction.sumTime.halfmillis=0;
     f56:	3104      	adds	r1, #4
     f58:	5053      	str	r3, [r2, r1]
		timeProt.correction.currentTimeOffsetSync.second=0;// to not take the first value
     f5a:	3910      	subs	r1, #16
     f5c:	5053      	str	r3, [r2, r1]
}
     f5e:	4770      	bx	lr
     f60:	2000038c 	.word	0x2000038c
     f64:	20000398 	.word	0x20000398

00000f68 <_Z11updateClockv>:
			}
			else{
				hmi.printf("-%lu s,%u\r\n",clock.second,(unsigned int)clock.halfmillis);
			}
}
void updateClock(void){
     f68:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6a:	4647      	mov	r7, r8
     f6c:	b480      	push	{r7}
     f6e:	b090      	sub	sp, #64	; 0x40
		Clock diff;
		if(timeProt.correction.previousSignOffset==timeProt.offset.sign){
     f70:	4a5f      	ldr	r2, [pc, #380]	; (10f0 <_Z11updateClockv+0x188>)
     f72:	23a0      	movs	r3, #160	; 0xa0
     f74:	5cd3      	ldrb	r3, [r2, r3]
     f76:	b2db      	uxtb	r3, r3
     f78:	2191      	movs	r1, #145	; 0x91
     f7a:	0049      	lsls	r1, r1, #1
     f7c:	5c52      	ldrb	r2, [r2, r1]
     f7e:	429a      	cmp	r2, r3
     f80:	d15a      	bne.n	1038 <_Z11updateClockv+0xd0>
			timeProt.correction.previousSignOffset=timeProt.offset.sign;
     f82:	4c5b      	ldr	r4, [pc, #364]	; (10f0 <_Z11updateClockv+0x188>)
     f84:	23a0      	movs	r3, #160	; 0xa0
     f86:	5ce2      	ldrb	r2, [r4, r3]
     f88:	1c0b      	adds	r3, r1, #0
     f8a:	5462      	strb	r2, [r4, r1]
			timeProt.correction.previoustimeOffset.second=timeProt.correction.currentTimeOffsetSync.second;
     f8c:	3b6a      	subs	r3, #106	; 0x6a
     f8e:	58e3      	ldr	r3, [r4, r3]
     f90:	25ac      	movs	r5, #172	; 0xac
     f92:	5163      	str	r3, [r4, r5]
			timeProt.correction.previoustimeOffset.halfmillis=timeProt.correction.currentTimeOffsetSync.halfmillis;
     f94:	23bc      	movs	r3, #188	; 0xbc
     f96:	58e2      	ldr	r2, [r4, r3]
     f98:	3b0c      	subs	r3, #12
     f9a:	50e2      	str	r2, [r4, r3]
			readClock(&timeProt.correction.currentTimeOffsetSync);
     f9c:	1c20      	adds	r0, r4, #0
     f9e:	30b8      	adds	r0, #184	; 0xb8
     fa0:	4b54      	ldr	r3, [pc, #336]	; (10f4 <_Z11updateClockv+0x18c>)
     fa2:	4798      	blx	r3
			if(timeProt.correction.previoustimeOffset.second!=0){
     fa4:	5963      	ldr	r3, [r4, r5]
     fa6:	2b00      	cmp	r3, #0
     fa8:	d048      	beq.n	103c <_Z11updateClockv+0xd4>
				if(sup(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset)){
     faa:	4a51      	ldr	r2, [pc, #324]	; (10f0 <_Z11updateClockv+0x188>)
     fac:	1c13      	adds	r3, r2, #0
     fae:	33b0      	adds	r3, #176	; 0xb0
     fb0:	4669      	mov	r1, sp
     fb2:	cb11      	ldmia	r3!, {r0, r4}
     fb4:	c111      	stmia	r1!, {r0, r4}
     fb6:	23ac      	movs	r3, #172	; 0xac
     fb8:	58d3      	ldr	r3, [r2, r3]
     fba:	21b8      	movs	r1, #184	; 0xb8
     fbc:	5850      	ldr	r0, [r2, r1]
     fbe:	32b8      	adds	r2, #184	; 0xb8
     fc0:	6851      	ldr	r1, [r2, #4]
     fc2:	6892      	ldr	r2, [r2, #8]
     fc4:	4c4c      	ldr	r4, [pc, #304]	; (10f8 <_Z11updateClockv+0x190>)
     fc6:	47a0      	blx	r4
     fc8:	2800      	cmp	r0, #0
     fca:	d032      	beq.n	1032 <_Z11updateClockv+0xca>
												
					diff=subClock(timeProt.correction.currentTimeOffsetSync,timeProt.correction.previoustimeOffset);
     fcc:	ae0a      	add	r6, sp, #40	; 0x28
     fce:	4d48      	ldr	r5, [pc, #288]	; (10f0 <_Z11updateClockv+0x188>)
     fd0:	1c2b      	adds	r3, r5, #0
     fd2:	33ac      	adds	r3, #172	; 0xac
     fd4:	466a      	mov	r2, sp
     fd6:	cb13      	ldmia	r3!, {r0, r1, r4}
     fd8:	c213      	stmia	r2!, {r0, r1, r4}
     fda:	1c30      	adds	r0, r6, #0
     fdc:	23b8      	movs	r3, #184	; 0xb8
     fde:	58e9      	ldr	r1, [r5, r3]
     fe0:	1c2b      	adds	r3, r5, #0
     fe2:	33b8      	adds	r3, #184	; 0xb8
     fe4:	685a      	ldr	r2, [r3, #4]
     fe6:	689b      	ldr	r3, [r3, #8]
     fe8:	4c44      	ldr	r4, [pc, #272]	; (10fc <_Z11updateClockv+0x194>)
     fea:	47a0      	blx	r4
					//printf("diff: ");
					//printfClock(diff);
					timeProt.correction.sumTime=sumClock(timeProt.correction.sumTime,diff);
     fec:	ac06      	add	r4, sp, #24
     fee:	466b      	mov	r3, sp
     ff0:	ce07      	ldmia	r6!, {r0, r1, r2}
     ff2:	c307      	stmia	r3!, {r0, r1, r2}
     ff4:	1c20      	adds	r0, r4, #0
     ff6:	23c4      	movs	r3, #196	; 0xc4
     ff8:	58e9      	ldr	r1, [r5, r3]
     ffa:	1c2e      	adds	r6, r5, #0
     ffc:	36c4      	adds	r6, #196	; 0xc4
     ffe:	6872      	ldr	r2, [r6, #4]
    1000:	68b3      	ldr	r3, [r6, #8]
    1002:	4f3f      	ldr	r7, [pc, #252]	; (1100 <_Z11updateClockv+0x198>)
    1004:	46b8      	mov	r8, r7
    1006:	47b8      	blx	r7
    1008:	1c23      	adds	r3, r4, #0
    100a:	cb07      	ldmia	r3!, {r0, r1, r2}
    100c:	c607      	stmia	r6!, {r0, r1, r2}
					sumOffset=sumClock(sumOffset,timeProt.offset);
    100e:	4e3d      	ldr	r6, [pc, #244]	; (1104 <_Z11updateClockv+0x19c>)
    1010:	1c2b      	adds	r3, r5, #0
    1012:	3398      	adds	r3, #152	; 0x98
    1014:	466a      	mov	r2, sp
    1016:	cb83      	ldmia	r3!, {r0, r1, r7}
    1018:	c283      	stmia	r2!, {r0, r1, r7}
    101a:	1c20      	adds	r0, r4, #0
    101c:	6831      	ldr	r1, [r6, #0]
    101e:	6872      	ldr	r2, [r6, #4]
    1020:	68b3      	ldr	r3, [r6, #8]
    1022:	47c0      	blx	r8
    1024:	cc0e      	ldmia	r4!, {r1, r2, r3}
    1026:	c60e      	stmia	r6!, {r1, r2, r3}
					printf("sumClock: ");
					printfClock(timeProt.correction.sumTime);
					
					printf("nb corrr  : %d",timeProt.correction.nbCorrection);
					*/
					timeProt.correction.nbCorrection++;
    1028:	22a4      	movs	r2, #164	; 0xa4
    102a:	58ab      	ldr	r3, [r5, r2]
    102c:	3301      	adds	r3, #1
    102e:	50ab      	str	r3, [r5, r2]
    1030:	e004      	b.n	103c <_Z11updateClockv+0xd4>
				}
				else{
					resetSofftwareCorrection();
    1032:	4b35      	ldr	r3, [pc, #212]	; (1108 <_Z11updateClockv+0x1a0>)
    1034:	4798      	blx	r3
    1036:	e001      	b.n	103c <_Z11updateClockv+0xd4>
				}
			}
		}
		else{
			resetSofftwareCorrection();
    1038:	4b33      	ldr	r3, [pc, #204]	; (1108 <_Z11updateClockv+0x1a0>)
    103a:	4798      	blx	r3
		}
		timeProt.correction.previousSignOffset=timeProt.offset.sign;
    103c:	4e2c      	ldr	r6, [pc, #176]	; (10f0 <_Z11updateClockv+0x188>)
    103e:	23a0      	movs	r3, #160	; 0xa0
    1040:	4698      	mov	r8, r3
    1042:	5cf2      	ldrb	r2, [r6, r3]
    1044:	3382      	adds	r3, #130	; 0x82
    1046:	54f2      	strb	r2, [r6, r3]
		Clock timeCopy;
		readClock(&timeCopy);
    1048:	ad0d      	add	r5, sp, #52	; 0x34
    104a:	1c28      	adds	r0, r5, #0
    104c:	4b29      	ldr	r3, [pc, #164]	; (10f4 <_Z11updateClockv+0x18c>)
    104e:	4798      	blx	r3


		
		timeCopy=sumClock(timeCopy,timeProt.offset);//add offset
    1050:	ac06      	add	r4, sp, #24
    1052:	1c33      	adds	r3, r6, #0
    1054:	3398      	adds	r3, #152	; 0x98
    1056:	466a      	mov	r2, sp
    1058:	cb83      	ldmia	r3!, {r0, r1, r7}
    105a:	c283      	stmia	r2!, {r0, r1, r7}
    105c:	1c20      	adds	r0, r4, #0
    105e:	990d      	ldr	r1, [sp, #52]	; 0x34
    1060:	686a      	ldr	r2, [r5, #4]
    1062:	68ab      	ldr	r3, [r5, #8]
    1064:	4f26      	ldr	r7, [pc, #152]	; (1100 <_Z11updateClockv+0x198>)
    1066:	47b8      	blx	r7
    1068:	1c23      	adds	r3, r4, #0
    106a:	cb07      	ldmia	r3!, {r0, r1, r2}
    106c:	c507      	stmia	r5!, {r0, r1, r2}
		writeClock(timeCopy);
    106e:	980d      	ldr	r0, [sp, #52]	; 0x34
    1070:	6861      	ldr	r1, [r4, #4]
    1072:	68a2      	ldr	r2, [r4, #8]
    1074:	4b25      	ldr	r3, [pc, #148]	; (110c <_Z11updateClockv+0x1a4>)
    1076:	4798      	blx	r3
		
		if(timeProt.offset.sign==true){
    1078:	4643      	mov	r3, r8
    107a:	5cf3      	ldrb	r3, [r6, r3]
    107c:	2b00      	cmp	r3, #0
    107e:	d018      	beq.n	10b2 <_Z11updateClockv+0x14a>
			sprintf(messageHMIOffset,"		update clock offset: +%lus,%ld[+%lus,%lu ms,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    1080:	491b      	ldr	r1, [pc, #108]	; (10f0 <_Z11updateClockv+0x188>)
    1082:	2098      	movs	r0, #152	; 0x98
    1084:	580a      	ldr	r2, [r1, r0]
    1086:	249c      	movs	r4, #156	; 0x9c
    1088:	590b      	ldr	r3, [r1, r4]
    108a:	580e      	ldr	r6, [r1, r0]
    108c:	5908      	ldr	r0, [r1, r4]
    108e:	5909      	ldr	r1, [r1, r4]
    1090:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    1092:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    1094:	9600      	str	r6, [sp, #0]
    1096:	0940      	lsrs	r0, r0, #5
    1098:	9001      	str	r0, [sp, #4]
    109a:	201f      	movs	r0, #31
    109c:	4001      	ands	r1, r0
    109e:	0148      	lsls	r0, r1, #5
    10a0:	1a41      	subs	r1, r0, r1
    10a2:	9102      	str	r1, [sp, #8]
    10a4:	9503      	str	r5, [sp, #12]
    10a6:	9404      	str	r4, [sp, #16]
    10a8:	4819      	ldr	r0, [pc, #100]	; (1110 <_Z11updateClockv+0x1a8>)
    10aa:	491a      	ldr	r1, [pc, #104]	; (1114 <_Z11updateClockv+0x1ac>)
    10ac:	4c1a      	ldr	r4, [pc, #104]	; (1118 <_Z11updateClockv+0x1b0>)
    10ae:	47a0      	blx	r4
    10b0:	e017      	b.n	10e2 <_Z11updateClockv+0x17a>
		}
		else{
			sprintf(messageHMIOffset,"		update clock offset: -%lus,%ld[-%lus,%lums,~%lu us]	t: %lu,%lu",timeProt.offset.second,(long unsigned int)timeProt.offset.halfmillis,timeProt.offset.second,timeProt.offset.halfmillis/32,(timeProt.offset.halfmillis%32)*31,timeCopy.second,timeCopy.halfmillis);
    10b2:	490f      	ldr	r1, [pc, #60]	; (10f0 <_Z11updateClockv+0x188>)
    10b4:	2098      	movs	r0, #152	; 0x98
    10b6:	580a      	ldr	r2, [r1, r0]
    10b8:	249c      	movs	r4, #156	; 0x9c
    10ba:	590b      	ldr	r3, [r1, r4]
    10bc:	580e      	ldr	r6, [r1, r0]
    10be:	5908      	ldr	r0, [r1, r4]
    10c0:	5909      	ldr	r1, [r1, r4]
    10c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    10c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    10c6:	9600      	str	r6, [sp, #0]
    10c8:	0940      	lsrs	r0, r0, #5
    10ca:	9001      	str	r0, [sp, #4]
    10cc:	201f      	movs	r0, #31
    10ce:	4001      	ands	r1, r0
    10d0:	0148      	lsls	r0, r1, #5
    10d2:	1a41      	subs	r1, r0, r1
    10d4:	9102      	str	r1, [sp, #8]
    10d6:	9503      	str	r5, [sp, #12]
    10d8:	9404      	str	r4, [sp, #16]
    10da:	480d      	ldr	r0, [pc, #52]	; (1110 <_Z11updateClockv+0x1a8>)
    10dc:	490f      	ldr	r1, [pc, #60]	; (111c <_Z11updateClockv+0x1b4>)
    10de:	4c0e      	ldr	r4, [pc, #56]	; (1118 <_Z11updateClockv+0x1b0>)
    10e0:	47a0      	blx	r4
		}
		sendHMI(messageHMIOffset);
    10e2:	480b      	ldr	r0, [pc, #44]	; (1110 <_Z11updateClockv+0x1a8>)
    10e4:	4b0e      	ldr	r3, [pc, #56]	; (1120 <_Z11updateClockv+0x1b8>)
    10e6:	4798      	blx	r3
}
    10e8:	b010      	add	sp, #64	; 0x40
    10ea:	bc04      	pop	{r2}
    10ec:	4690      	mov	r8, r2
    10ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f0:	20000398 	.word	0x20000398
    10f4:	000007c5 	.word	0x000007c5
    10f8:	00000c2d 	.word	0x00000c2d
    10fc:	00000c9d 	.word	0x00000c9d
    1100:	00000da1 	.word	0x00000da1
    1104:	2000038c 	.word	0x2000038c
    1108:	00000f45 	.word	0x00000f45
    110c:	00000829 	.word	0x00000829
    1110:	200002c0 	.word	0x200002c0
    1114:	0000e4b8 	.word	0x0000e4b8
    1118:	0000acc5 	.word	0x0000acc5
    111c:	0000e4fc 	.word	0x0000e4fc
    1120:	000005b1 	.word	0x000005b1

00001124 <_Z8receiverv>:
void receiver(){
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	b099      	sub	sp, #100	; 0x64
	Data data;
	//uint8_t count=0;
	
	

	hmi.printf("packetSize:%d\r\n",timeProt.length);
    1128:	4d2f      	ldr	r5, [pc, #188]	; (11e8 <_Z8receiverv+0xc4>)
    112a:	2484      	movs	r4, #132	; 0x84
    112c:	5d2a      	ldrb	r2, [r5, r4]
    112e:	482f      	ldr	r0, [pc, #188]	; (11ec <_Z8receiverv+0xc8>)
    1130:	492f      	ldr	r1, [pc, #188]	; (11f0 <_Z8receiverv+0xcc>)
    1132:	4b30      	ldr	r3, [pc, #192]	; (11f4 <_Z8receiverv+0xd0>)
    1134:	4798      	blx	r3
	for(int i=0;i<timeProt.length;i++){
    1136:	5d29      	ldrb	r1, [r5, r4]
    1138:	2900      	cmp	r1, #0
    113a:	dd10      	ble.n	115e <_Z8receiverv+0x3a>
    113c:	2400      	movs	r4, #0
		
		hmi.printf("t+ %d:%x\r\n",i,timeProt.receive[i]);
    113e:	4e2b      	ldr	r6, [pc, #172]	; (11ec <_Z8receiverv+0xc8>)
    1140:	4f29      	ldr	r7, [pc, #164]	; (11e8 <_Z8receiverv+0xc4>)
    1142:	1c23      	adds	r3, r4, #0
    1144:	3325      	adds	r3, #37	; 0x25
    1146:	33ff      	adds	r3, #255	; 0xff
    1148:	5cfb      	ldrb	r3, [r7, r3]
    114a:	1c30      	adds	r0, r6, #0
    114c:	492a      	ldr	r1, [pc, #168]	; (11f8 <_Z8receiverv+0xd4>)
    114e:	1c22      	adds	r2, r4, #0
    1150:	4d28      	ldr	r5, [pc, #160]	; (11f4 <_Z8receiverv+0xd0>)
    1152:	47a8      	blx	r5
	//uint8_t count=0;
	
	

	hmi.printf("packetSize:%d\r\n",timeProt.length);
	for(int i=0;i<timeProt.length;i++){
    1154:	3401      	adds	r4, #1
    1156:	2384      	movs	r3, #132	; 0x84
    1158:	5cf9      	ldrb	r1, [r7, r3]
    115a:	42a1      	cmp	r1, r4
    115c:	dcf1      	bgt.n	1142 <_Z8receiverv+0x1e>
		
		hmi.printf("t+ %d:%x\r\n",i,timeProt.receive[i]);
	}
	//vTaskDelay(21/portTICK_RATE_MS);
	if(!CLP_CheckPacketCRCFail(timeProt.receive, timeProt.length, false))
    115e:	4822      	ldr	r0, [pc, #136]	; (11e8 <_Z8receiverv+0xc4>)
    1160:	3025      	adds	r0, #37	; 0x25
    1162:	30ff      	adds	r0, #255	; 0xff
    1164:	2200      	movs	r2, #0
    1166:	4b25      	ldr	r3, [pc, #148]	; (11fc <_Z8receiverv+0xd8>)
    1168:	4798      	blx	r3
    116a:	2800      	cmp	r0, #0
    116c:	d135      	bne.n	11da <_Z8receiverv+0xb6>
	{
		size_t datalength = CLP_EXTENSION_ConvertPacketTimeSyncResponseToRaw(timeProt.receive, timeProt.length, data.noParse);
    116e:	4b1e      	ldr	r3, [pc, #120]	; (11e8 <_Z8receiverv+0xc4>)
    1170:	1c18      	adds	r0, r3, #0
    1172:	3025      	adds	r0, #37	; 0x25
    1174:	30ff      	adds	r0, #255	; 0xff
    1176:	2284      	movs	r2, #132	; 0x84
    1178:	5c99      	ldrb	r1, [r3, r2]
    117a:	3a62      	subs	r2, #98	; 0x62
    117c:	446a      	add	r2, sp
    117e:	2300      	movs	r3, #0
    1180:	4c1f      	ldr	r4, [pc, #124]	; (1200 <_Z8receiverv+0xdc>)
    1182:	47a0      	blx	r4
		if(CLP_GetLastError() == CLP_LIB_ERROR_NONE)
    1184:	4b1f      	ldr	r3, [pc, #124]	; (1204 <_Z8receiverv+0xe0>)
    1186:	4798      	blx	r3
    1188:	2800      	cmp	r0, #0
    118a:	d121      	bne.n	11d0 <_Z8receiverv+0xac>
	}*/

			
			uint8_t indice=1;
			
			data.id=data.noParse[indice++];
    118c:	2323      	movs	r3, #35	; 0x23
    118e:	466a      	mov	r2, sp
    1190:	5cd3      	ldrb	r3, [r2, r3]
    1192:	7053      	strb	r3, [r2, #1]
			data.type=(Type)data.noParse[indice++];
    1194:	2224      	movs	r2, #36	; 0x24
    1196:	4669      	mov	r1, sp
    1198:	5c8a      	ldrb	r2, [r1, r2]
    119a:	700a      	strb	r2, [r1, #0]
			switch (data.type){
    119c:	2a02      	cmp	r2, #2
    119e:	d113      	bne.n	11c8 <_Z8receiverv+0xa4>
					break;
									
				#else
					case DELAYREQUEST:
									
						data.crc=data.noParse[indice++];
    11a0:	3223      	adds	r2, #35	; 0x23
    11a2:	5c89      	ldrb	r1, [r1, r2]
    11a4:	3a04      	subs	r2, #4
    11a6:	4668      	mov	r0, sp
    11a8:	5481      	strb	r1, [r0, r2]
						timeProt.saveTime[data.id].second=timeProt.saveTime[0].second;
    11aa:	4a0f      	ldr	r2, [pc, #60]	; (11e8 <_Z8receiverv+0xc4>)
    11ac:	6814      	ldr	r4, [r2, #0]
    11ae:	0058      	lsls	r0, r3, #1
    11b0:	18c1      	adds	r1, r0, r3
    11b2:	0089      	lsls	r1, r1, #2
    11b4:	508c      	str	r4, [r1, r2]
						timeProt.saveTime[data.id].halfmillis=timeProt.saveTime[0].halfmillis;
    11b6:	6851      	ldr	r1, [r2, #4]
    11b8:	18c3      	adds	r3, r0, r3
    11ba:	009b      	lsls	r3, r3, #2
    11bc:	18d3      	adds	r3, r2, r3
    11be:	6059      	str	r1, [r3, #4]
						sendHMI("	delay request receive");		
    11c0:	4811      	ldr	r0, [pc, #68]	; (1208 <_Z8receiverv+0xe4>)
    11c2:	4b12      	ldr	r3, [pc, #72]	; (120c <_Z8receiverv+0xe8>)
    11c4:	4798      	blx	r3
														
					break;
    11c6:	e00c      	b.n	11e2 <_Z8receiverv+0xbe>
				#endif
				default:
					sendHMI("	Erreur type unknow");
    11c8:	4811      	ldr	r0, [pc, #68]	; (1210 <_Z8receiverv+0xec>)
    11ca:	4b10      	ldr	r3, [pc, #64]	; (120c <_Z8receiverv+0xe8>)
    11cc:	4798      	blx	r3
    11ce:	e008      	b.n	11e2 <_Z8receiverv+0xbe>
					
									
			}		
		}
		else{
			hmi.printf("wrong type");
    11d0:	4806      	ldr	r0, [pc, #24]	; (11ec <_Z8receiverv+0xc8>)
    11d2:	4910      	ldr	r1, [pc, #64]	; (1214 <_Z8receiverv+0xf0>)
    11d4:	4b07      	ldr	r3, [pc, #28]	; (11f4 <_Z8receiverv+0xd0>)
    11d6:	4798      	blx	r3
    11d8:	e003      	b.n	11e2 <_Z8receiverv+0xbe>
		}
			
	}
	else{
		hmi.printf("error CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");	
    11da:	4804      	ldr	r0, [pc, #16]	; (11ec <_Z8receiverv+0xc8>)
    11dc:	490e      	ldr	r1, [pc, #56]	; (1218 <_Z8receiverv+0xf4>)
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <_Z8receiverv+0xd0>)
    11e0:	4798      	blx	r3
	}
}
    11e2:	b019      	add	sp, #100	; 0x64
    11e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	20000398 	.word	0x20000398
    11ec:	20000270 	.word	0x20000270
    11f0:	0000e540 	.word	0x0000e540
    11f4:	00005361 	.word	0x00005361
    11f8:	0000e550 	.word	0x0000e550
    11fc:	00000201 	.word	0x00000201
    1200:	000003d9 	.word	0x000003d9
    1204:	00000325 	.word	0x00000325
    1208:	0000e55c 	.word	0x0000e55c
    120c:	000005b1 	.word	0x000005b1
    1210:	0000e574 	.word	0x0000e574
    1214:	0000e588 	.word	0x0000e588
    1218:	0000e594 	.word	0x0000e594

0000121c <_Z11calculCRCID8enumTypehPKhh>:

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
	return calculCRCID(type,length,data,IDDEVICE);
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
    121c:	18cb      	adds	r3, r1, r3
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
    121e:	18c0      	adds	r0, r0, r3
    1220:	b2c0      	uxtb	r0, r0
	for(i=0;i<length;i++){
    1222:	2900      	cmp	r1, #0
    1224:	d00a      	beq.n	123c <_Z11calculCRCID8enumTypehPKhh+0x20>
    1226:	1c13      	adds	r3, r2, #0
    1228:	3901      	subs	r1, #1
    122a:	b2c9      	uxtb	r1, r1
    122c:	3101      	adds	r1, #1
    122e:	1852      	adds	r2, r2, r1
		crc=crc+data[i];
    1230:	7819      	ldrb	r1, [r3, #0]
    1232:	1840      	adds	r0, r0, r1
    1234:	b2c0      	uxtb	r0, r0
    1236:	3301      	adds	r3, #1
}
uint8_t calculCRCID(const Type type,const uint8_t length,const uint8_t* data,const uint8_t id){
	uint8_t crc;
	uint8_t i;
	crc=type+length+id;
	for(i=0;i<length;i++){
    1238:	4293      	cmp	r3, r2
    123a:	d1f9      	bne.n	1230 <_Z11calculCRCID8enumTypehPKhh+0x14>
		crc=crc+data[i];
	}
	
	return crc;
    123c:	4770      	bx	lr
    123e:	46c0      	nop			; (mov r8, r8)

00001240 <_Z9calculCRC8enumTypehPKh>:
		for(i=0;i<packetsize;i++){
			radio->putc(packet[i]);
		}

}
uint8_t calculCRC(const Type type,const uint8_t length,const uint8_t* data){
    1240:	b510      	push	{r4, lr}
	return calculCRCID(type,length,data,IDDEVICE);
    1242:	2300      	movs	r3, #0
    1244:	4c01      	ldr	r4, [pc, #4]	; (124c <_Z9calculCRC8enumTypehPKh+0xc>)
    1246:	47a0      	blx	r4
}
    1248:	bd10      	pop	{r4, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	0000121d 	.word	0x0000121d

00001250 <_Z4send8enumTypehPKh>:

	
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
    1250:	b5f0      	push	{r4, r5, r6, r7, lr}
    1252:	4657      	mov	r7, sl
    1254:	4646      	mov	r6, r8
    1256:	b4c0      	push	{r6, r7}
    1258:	b0cd      	sub	sp, #308	; 0x134
    125a:	af00      	add	r7, sp, #0
    125c:	1c0c      	adds	r4, r1, #0
		uint8_t i;
		uint8_t j=0;
		uint8_t send[length+4];//to complete
    125e:	1c0b      	adds	r3, r1, #0
    1260:	330b      	adds	r3, #11
    1262:	08db      	lsrs	r3, r3, #3
    1264:	00db      	lsls	r3, r3, #3
    1266:	4669      	mov	r1, sp
    1268:	1acb      	subs	r3, r1, r3
    126a:	469d      	mov	sp, r3
    126c:	466d      	mov	r5, sp
		send[0]=HEADER;
    126e:	2310      	movs	r3, #16
    1270:	702b      	strb	r3, [r5, #0]
		send[1]=IDDEVICE;	
    1272:	2300      	movs	r3, #0
    1274:	706b      	strb	r3, [r5, #1]
		send[2]=type;
    1276:	70a8      	strb	r0, [r5, #2]
		if(length!=0){
    1278:	2c00      	cmp	r4, #0
    127a:	d00c      	beq.n	1296 <_Z4send8enumTypehPKh+0x46>
			send[3]=length;//length data
    127c:	70ec      	strb	r4, [r5, #3]
    127e:	2100      	movs	r1, #0
    1280:	186b      	adds	r3, r5, r1
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
    1282:	5c56      	ldrb	r6, [r2, r1]
    1284:	711e      	strb	r6, [r3, #4]
    1286:	3101      	adds	r1, #1
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
		}
		for(i=0;i<length;i++){
    1288:	b2cb      	uxtb	r3, r1
    128a:	429c      	cmp	r4, r3
    128c:	d8f8      	bhi.n	1280 <_Z4send8enumTypehPKh+0x30>
    128e:	1c23      	adds	r3, r4, #0
		send[0]=HEADER;
		send[1]=IDDEVICE;	
		send[2]=type;
		if(length!=0){
			send[3]=length;//length data
			j=1;
    1290:	2101      	movs	r1, #1
    1292:	4688      	mov	r8, r1
    1294:	e001      	b.n	129a <_Z4send8enumTypehPKh+0x4a>
	sendHMI("	delay request send");
}
#endif
void send(const Type type,const uint8_t length,const uint8_t* data){
		uint8_t i;
		uint8_t j=0;
    1296:	2300      	movs	r3, #0
    1298:	4698      	mov	r8, r3
			j=1;
		}
		for(i=0;i<length;i++){
			send[3+i+j]=data[i];
		}
		send[3+i+j]=calculCRC(type,length,data);
    129a:	3303      	adds	r3, #3
    129c:	4443      	add	r3, r8
    129e:	1c1e      	adds	r6, r3, #0
    12a0:	1c21      	adds	r1, r4, #0
    12a2:	4b1a      	ldr	r3, [pc, #104]	; (130c <_Z4send8enumTypehPKh+0xbc>)
    12a4:	4798      	blx	r3
    12a6:	55a8      	strb	r0, [r5, r6]

		ChannelRadio* radio = ChannelRadio::GetChannel();
    12a8:	4b19      	ldr	r3, [pc, #100]	; (1310 <_Z4send8enumTypehPKh+0xc0>)
    12aa:	4798      	blx	r3
    12ac:	1c06      	adds	r6, r0, #0
		/*hmi.printf("length %d\r\n",length+4+j );
		for(i=0;i<length+4+j;i++){	
			hmi.printf("send %d: %x\r\n",i,send[i]);
		}
		*/
		size_t packetsize = CLP_EXTENSION_GenerateTimeSyncPacket(packet, NULL, send, length+4+j);
    12ae:	3404      	adds	r4, #4
    12b0:	1c23      	adds	r3, r4, #0
    12b2:	4443      	add	r3, r8
    12b4:	1d38      	adds	r0, r7, #4
    12b6:	2100      	movs	r1, #0
    12b8:	1c2a      	adds	r2, r5, #0
    12ba:	4c16      	ldr	r4, [pc, #88]	; (1314 <_Z4send8enumTypehPKh+0xc4>)
    12bc:	47a0      	blx	r4
    12be:	1c05      	adds	r5, r0, #0
		
		hmi.printf("length %d\r\n",packetsize );
    12c0:	4815      	ldr	r0, [pc, #84]	; (1318 <_Z4send8enumTypehPKh+0xc8>)
    12c2:	4916      	ldr	r1, [pc, #88]	; (131c <_Z4send8enumTypehPKh+0xcc>)
    12c4:	1c2a      	adds	r2, r5, #0
    12c6:	4b16      	ldr	r3, [pc, #88]	; (1320 <_Z4send8enumTypehPKh+0xd0>)
    12c8:	4798      	blx	r3
		for(i=0;i<packetsize;i++){	
    12ca:	2d00      	cmp	r5, #0
    12cc:	d017      	beq.n	12fe <_Z4send8enumTypehPKh+0xae>
    12ce:	2400      	movs	r4, #0
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
    12d0:	4b13      	ldr	r3, [pc, #76]	; (1320 <_Z4send8enumTypehPKh+0xd0>)
    12d2:	469a      	mov	sl, r3
    12d4:	1d3b      	adds	r3, r7, #4
    12d6:	5d1b      	ldrb	r3, [r3, r4]
    12d8:	480f      	ldr	r0, [pc, #60]	; (1318 <_Z4send8enumTypehPKh+0xc8>)
    12da:	4912      	ldr	r1, [pc, #72]	; (1324 <_Z4send8enumTypehPKh+0xd4>)
    12dc:	1c22      	adds	r2, r4, #0
    12de:	47d0      	blx	sl
		}
		*/
		size_t packetsize = CLP_EXTENSION_GenerateTimeSyncPacket(packet, NULL, send, length+4+j);
		
		hmi.printf("length %d\r\n",packetsize );
		for(i=0;i<packetsize;i++){	
    12e0:	3401      	adds	r4, #1
    12e2:	b2e4      	uxtb	r4, r4
    12e4:	42a5      	cmp	r5, r4
    12e6:	d8f5      	bhi.n	12d4 <_Z4send8enumTypehPKh+0x84>
    12e8:	2400      	movs	r4, #0
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
		}
		//vTaskDelay(100/portTICK_RATE_MS);
		for(i=0;i<packetsize;i++){
			radio->putc(packet[i]);
    12ea:	6833      	ldr	r3, [r6, #0]
    12ec:	1d3a      	adds	r2, r7, #4
    12ee:	5d11      	ldrb	r1, [r2, r4]
    12f0:	689b      	ldr	r3, [r3, #8]
    12f2:	1c30      	adds	r0, r6, #0
    12f4:	4798      	blx	r3
		hmi.printf("length %d\r\n",packetsize );
		for(i=0;i<packetsize;i++){	
			hmi.printf("buffer %d: %x\r\n",i,packet[i]);
		}
		//vTaskDelay(100/portTICK_RATE_MS);
		for(i=0;i<packetsize;i++){
    12f6:	3401      	adds	r4, #1
    12f8:	b2e4      	uxtb	r4, r4
    12fa:	42a5      	cmp	r5, r4
    12fc:	d8f5      	bhi.n	12ea <_Z4send8enumTypehPKh+0x9a>
			radio->putc(packet[i]);
		}

}
    12fe:	46bd      	mov	sp, r7
    1300:	b04d      	add	sp, #308	; 0x134
    1302:	bc0c      	pop	{r2, r3}
    1304:	4690      	mov	r8, r2
    1306:	469a      	mov	sl, r3
    1308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	00001241 	.word	0x00001241
    1310:	00003895 	.word	0x00003895
    1314:	0000036d 	.word	0x0000036d
    1318:	20000270 	.word	0x20000270
    131c:	0000e5bc 	.word	0x0000e5bc
    1320:	00005361 	.word	0x00005361
    1324:	0000e5c8 	.word	0x0000e5c8

00001328 <_Z4syncv>:
	else{
		hmi.printf("error CRC!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");	
	}
}
#ifdef MASTERMODE
void sync(void){
    1328:	b500      	push	{lr}
    132a:	b085      	sub	sp, #20
	uint8_t sendP[4];
	Type type=SYNC;
	Clock timeSave;
	readClock(&timeSave);
    132c:	a801      	add	r0, sp, #4
    132e:	4b0b      	ldr	r3, [pc, #44]	; (135c <_Z4syncv+0x34>)
    1330:	4798      	blx	r3
	sendP[0]=(uint8_t)(timeSave.second&0x00FF);
    1332:	9b01      	ldr	r3, [sp, #4]
    1334:	466a      	mov	r2, sp
    1336:	7013      	strb	r3, [r2, #0]
	sendP[1]=(uint8_t)((timeSave.second>>8)&0x00FF);
    1338:	9b01      	ldr	r3, [sp, #4]
    133a:	0a1b      	lsrs	r3, r3, #8
    133c:	7053      	strb	r3, [r2, #1]
	sendP[2]=(uint8_t)(timeSave.halfmillis&0x00FF);
    133e:	9b02      	ldr	r3, [sp, #8]
    1340:	7093      	strb	r3, [r2, #2]
	sendP[3]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    1342:	9b02      	ldr	r3, [sp, #8]
    1344:	0a1b      	lsrs	r3, r3, #8
    1346:	70d3      	strb	r3, [r2, #3]
	send(type,4,sendP);
    1348:	2001      	movs	r0, #1
    134a:	2104      	movs	r1, #4
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <_Z4syncv+0x38>)
    134e:	4798      	blx	r3
	sendHMI("	sync send");
    1350:	4804      	ldr	r0, [pc, #16]	; (1364 <_Z4syncv+0x3c>)
    1352:	4b05      	ldr	r3, [pc, #20]	; (1368 <_Z4syncv+0x40>)
    1354:	4798      	blx	r3
}
    1356:	b005      	add	sp, #20
    1358:	bd00      	pop	{pc}
    135a:	46c0      	nop			; (mov r8, r8)
    135c:	000007c5 	.word	0x000007c5
    1360:	00001251 	.word	0x00001251
    1364:	0000e5d8 	.word	0x0000e5d8
    1368:	000005b1 	.word	0x000005b1

0000136c <_Z13delayResponseh>:
void delayResponse(uint8_t id){
    136c:	b530      	push	{r4, r5, lr}
    136e:	b087      	sub	sp, #28
    1370:	1c04      	adds	r4, r0, #0

	//vTaskDelay(1000/portTICK_RATE_MS);
	Type type=DELAYRESPONSE;
	uint8_t sendP[9];
	
	sendP[0]=id;
    1372:	466b      	mov	r3, sp
    1374:	7018      	strb	r0, [r3, #0]
	sendP[1]=(uint8_t)(timeProt.saveTime[id].second&0x00FF);
    1376:	491d      	ldr	r1, [pc, #116]	; (13ec <_Z13delayResponseh+0x80>)
    1378:	0043      	lsls	r3, r0, #1
    137a:	181a      	adds	r2, r3, r0
    137c:	0092      	lsls	r2, r2, #2
    137e:	5852      	ldr	r2, [r2, r1]
    1380:	4668      	mov	r0, sp
    1382:	7042      	strb	r2, [r0, #1]
	sendP[2]=(uint8_t)((timeProt.saveTime[id].second>>8)&0x00FF);
    1384:	191a      	adds	r2, r3, r4
    1386:	0092      	lsls	r2, r2, #2
    1388:	5852      	ldr	r2, [r2, r1]
    138a:	0a12      	lsrs	r2, r2, #8
    138c:	7082      	strb	r2, [r0, #2]
	sendP[3]=(uint8_t)(timeProt.saveTime[id].halfmillis&0x00FF);
    138e:	191a      	adds	r2, r3, r4
    1390:	0092      	lsls	r2, r2, #2
    1392:	188a      	adds	r2, r1, r2
    1394:	6850      	ldr	r0, [r2, #4]
    1396:	466d      	mov	r5, sp
    1398:	70e8      	strb	r0, [r5, #3]
	sendP[4]=(uint8_t)((timeProt.saveTime[id].halfmillis>>8)&0x00FF);
    139a:	6852      	ldr	r2, [r2, #4]
    139c:	0a12      	lsrs	r2, r2, #8
    139e:	712a      	strb	r2, [r5, #4]
	timeProt.saveTime[id].second=0;
    13a0:	191b      	adds	r3, r3, r4
    13a2:	009b      	lsls	r3, r3, #2
    13a4:	2200      	movs	r2, #0
    13a6:	505a      	str	r2, [r3, r1]
	Clock timeSave={timeManage.second,timeManage.halfmillis,true};
    13a8:	ab03      	add	r3, sp, #12
    13aa:	3201      	adds	r2, #1
    13ac:	721a      	strb	r2, [r3, #8]
    13ae:	4a10      	ldr	r2, [pc, #64]	; (13f0 <_Z13delayResponseh+0x84>)
    13b0:	6811      	ldr	r1, [r2, #0]
    13b2:	9103      	str	r1, [sp, #12]
    13b4:	6852      	ldr	r2, [r2, #4]
    13b6:	9204      	str	r2, [sp, #16]
	sendP[5]=(uint8_t)(timeSave.second&0x00FF);
    13b8:	9a03      	ldr	r2, [sp, #12]
    13ba:	716a      	strb	r2, [r5, #5]
	sendP[6]=(uint8_t)((timeSave.second>>8)&0x00FF);
    13bc:	9a03      	ldr	r2, [sp, #12]
    13be:	0a12      	lsrs	r2, r2, #8
    13c0:	71aa      	strb	r2, [r5, #6]
	sendP[7]=(uint8_t)(timeSave.halfmillis&0x00FF);
    13c2:	9a04      	ldr	r2, [sp, #16]
    13c4:	71ea      	strb	r2, [r5, #7]
	sendP[8]=(uint8_t)((timeSave.halfmillis>>8)&0x00FF);
    13c6:	9b04      	ldr	r3, [sp, #16]
    13c8:	0a1b      	lsrs	r3, r3, #8
    13ca:	466a      	mov	r2, sp
    13cc:	722b      	strb	r3, [r5, #8]
	
	send(type,9,sendP);
    13ce:	2003      	movs	r0, #3
    13d0:	2109      	movs	r1, #9
    13d2:	4b08      	ldr	r3, [pc, #32]	; (13f4 <_Z13delayResponseh+0x88>)
    13d4:	4798      	blx	r3
	sprintf(messageHMI,"	delay response send (id: %d)",id);
    13d6:	4d08      	ldr	r5, [pc, #32]	; (13f8 <_Z13delayResponseh+0x8c>)
    13d8:	1c28      	adds	r0, r5, #0
    13da:	4908      	ldr	r1, [pc, #32]	; (13fc <_Z13delayResponseh+0x90>)
    13dc:	1c22      	adds	r2, r4, #0
    13de:	4b08      	ldr	r3, [pc, #32]	; (1400 <_Z13delayResponseh+0x94>)
    13e0:	4798      	blx	r3
	sendHMI(messageHMI);
    13e2:	1c28      	adds	r0, r5, #0
    13e4:	4b07      	ldr	r3, [pc, #28]	; (1404 <_Z13delayResponseh+0x98>)
    13e6:	4798      	blx	r3
}
    13e8:	b007      	add	sp, #28
    13ea:	bd30      	pop	{r4, r5, pc}
    13ec:	20000398 	.word	0x20000398
    13f0:	200000b8 	.word	0x200000b8
    13f4:	00001251 	.word	0x00001251
    13f8:	200005e8 	.word	0x200005e8
    13fc:	0000e5e4 	.word	0x0000e5e4
    1400:	0000acc5 	.word	0x0000acc5
    1404:	000005b1 	.word	0x000005b1

00001408 <_Z6senderv>:
	}
}



void sender(void){
    1408:	b570      	push	{r4, r5, r6, lr}
    140a:	2401      	movs	r4, #1
	#ifdef MASTERMODE
	uint8_t i;
	for(i=1;i<=MAX_SLAVE_CLOCK;i++){
		//taskENTER_CRITICAL();
		unsigned long int timeSender=timeProt.saveTime[i].second;
    140c:	4e0d      	ldr	r6, [pc, #52]	; (1444 <_Z6senderv+0x3c>)
		//taskEXIT_CRITICAL();
		if(timeSender!=0){
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
    140e:	4d0e      	ldr	r5, [pc, #56]	; (1448 <_Z6senderv+0x40>)
    1410:	b2e0      	uxtb	r0, r4
void sender(void){
	#ifdef MASTERMODE
	uint8_t i;
	for(i=1;i<=MAX_SLAVE_CLOCK;i++){
		//taskENTER_CRITICAL();
		unsigned long int timeSender=timeProt.saveTime[i].second;
    1412:	0063      	lsls	r3, r4, #1
    1414:	191b      	adds	r3, r3, r4
    1416:	009b      	lsls	r3, r3, #2
    1418:	599b      	ldr	r3, [r3, r6]
		//taskEXIT_CRITICAL();
		if(timeSender!=0){
    141a:	2b00      	cmp	r3, #0
    141c:	d000      	beq.n	1420 <_Z6senderv+0x18>
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
    141e:	47a8      	blx	r5
    1420:	3401      	adds	r4, #1


void sender(void){
	#ifdef MASTERMODE
	uint8_t i;
	for(i=1;i<=MAX_SLAVE_CLOCK;i++){
    1422:	2c0b      	cmp	r4, #11
    1424:	d1f4      	bne.n	1410 <_Z6senderv+0x8>
		if(timeSender!=0){
			//printf("id : %d  , delay response time second : %lu",i,timeSender);
			delayResponse(i);
		}
	}
	if(xTaskGetTickCount()-saveSync>(TIMESYNC/portTICK_RATE_MS)){
    1426:	4b09      	ldr	r3, [pc, #36]	; (144c <_Z6senderv+0x44>)
    1428:	4798      	blx	r3
    142a:	4b09      	ldr	r3, [pc, #36]	; (1450 <_Z6senderv+0x48>)
    142c:	681b      	ldr	r3, [r3, #0]
    142e:	1ac0      	subs	r0, r0, r3
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <_Z6senderv+0x4c>)
    1432:	4298      	cmp	r0, r3
    1434:	d905      	bls.n	1442 <_Z6senderv+0x3a>
		saveSync=xTaskGetTickCount();
    1436:	4b05      	ldr	r3, [pc, #20]	; (144c <_Z6senderv+0x44>)
    1438:	4798      	blx	r3
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <_Z6senderv+0x48>)
    143c:	6018      	str	r0, [r3, #0]
		sync();
    143e:	4b06      	ldr	r3, [pc, #24]	; (1458 <_Z6senderv+0x50>)
    1440:	4798      	blx	r3
		saveDRequest=xTaskGetTickCount();
		delayRequest();
	}
	#endif

}
    1442:	bd70      	pop	{r4, r5, r6, pc}
    1444:	20000398 	.word	0x20000398
    1448:	0000136d 	.word	0x0000136d
    144c:	00001f69 	.word	0x00001f69
    1450:	20000388 	.word	0x20000388
    1454:	00002710 	.word	0x00002710
    1458:	00001329 	.word	0x00001329

0000145c <_Z16timeProtocolTaskv>:
		
	}
	return false;	
}

void timeProtocolTask(void){
    145c:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    145e:	b672      	cpsid	i
    1460:	f3bf 8f5f 	dmb	sy
			}
			correction();	
	}	 
	vTaskDelay(500/portTICK_RATE_MS);
	*/
Disable_global_interrupt();
    1464:	2200      	movs	r2, #0
    1466:	4b27      	ldr	r3, [pc, #156]	; (1504 <_Z16timeProtocolTaskv+0xa8>)
    1468:	701a      	strb	r2, [r3, #0]
    146a:	2300      	movs	r3, #0
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
			timeProt.saveTime[i].second=0;
    146c:	4826      	ldr	r0, [pc, #152]	; (1508 <_Z16timeProtocolTaskv+0xac>)
    146e:	2100      	movs	r1, #0
    1470:	005a      	lsls	r2, r3, #1
    1472:	18d2      	adds	r2, r2, r3
    1474:	0092      	lsls	r2, r2, #2
    1476:	5011      	str	r1, [r2, r0]
    1478:	3301      	adds	r3, #1
	*/
Disable_global_interrupt();
		
	#ifdef MASTERMODE
		uint8_t i ;
		for(i=0;i<=MAX_SLAVE_CLOCK;i++){
    147a:	2b0b      	cmp	r3, #11
    147c:	d1f8      	bne.n	1470 <_Z16timeProtocolTaskv+0x14>
	timeProt.rx.sign=true;
	timeProt.rxDelay.sign=true;
	timeProt.rxSync.sign=true;
	timeProt.tx.sign=true;
	#endif
	timeProt.correction.nbCorrection=0;
    147e:	4b22      	ldr	r3, [pc, #136]	; (1508 <_Z16timeProtocolTaskv+0xac>)
    1480:	2200      	movs	r2, #0
    1482:	21a4      	movs	r1, #164	; 0xa4
    1484:	505a      	str	r2, [r3, r1]

	
	sumOffset.second=0;
    1486:	4921      	ldr	r1, [pc, #132]	; (150c <_Z16timeProtocolTaskv+0xb0>)
    1488:	600a      	str	r2, [r1, #0]
	sumOffset.halfmillis=0;
    148a:	604a      	str	r2, [r1, #4]
	sumOffset.sign=true;
    148c:	2401      	movs	r4, #1
    148e:	720c      	strb	r4, [r1, #8]
	
	
	timeProt.correction.currentTimeOffsetSync.second=0;
    1490:	21b8      	movs	r1, #184	; 0xb8
    1492:	505a      	str	r2, [r3, r1]
	timeProt.correction.currentTimeOffsetSync.halfmillis=0;
    1494:	3104      	adds	r1, #4
    1496:	505a      	str	r2, [r3, r1]
	timeProt.correction.currentTimeOffsetSync.sign=true;
    1498:	3104      	adds	r1, #4
    149a:	545c      	strb	r4, [r3, r1]
	
	
	timeProt.correction.previoustimeOffset.second=0;
    149c:	3914      	subs	r1, #20
    149e:	505a      	str	r2, [r3, r1]
	timeProt.correction.previoustimeOffset.halfmillis=0;
    14a0:	3104      	adds	r1, #4
    14a2:	505a      	str	r2, [r3, r1]
	timeProt.correction.previoustimeOffset.sign=true;
    14a4:	3104      	adds	r1, #4
    14a6:	545c      	strb	r4, [r3, r1]
	
	
	//timeProt.correction.timeSoftCor=0;
	timeProt.correction.indiceMoySoftCor=0;
    14a8:	316c      	adds	r1, #108	; 0x6c
    14aa:	545a      	strb	r2, [r3, r1]
	timeProt.correction.indiceFull=0;
    14ac:	2122      	movs	r1, #34	; 0x22
    14ae:	31ff      	adds	r1, #255	; 0xff
    14b0:	545a      	strb	r2, [r3, r1]


	timeProt.delay.second=0;
    14b2:	3999      	subs	r1, #153	; 0x99
    14b4:	505a      	str	r2, [r3, r1]
	timeProt.delay.halfmillis=0;
    14b6:	3104      	adds	r1, #4
    14b8:	505a      	str	r2, [r3, r1]
	timeProt.delay.sign=true;
    14ba:	3104      	adds	r1, #4
    14bc:	545c      	strb	r4, [r3, r1]
	timeProt.waitIdentifier=false;
    14be:	390b      	subs	r1, #11
    14c0:	545a      	strb	r2, [r3, r1]
	xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS);
    14c2:	3294      	adds	r2, #148	; 0x94
    14c4:	5898      	ldr	r0, [r3, r2]
    14c6:	2100      	movs	r1, #0
    14c8:	3261      	adds	r2, #97	; 0x61
    14ca:	32ff      	adds	r2, #255	; 0xff
    14cc:	2300      	movs	r3, #0
    14ce:	4d10      	ldr	r5, [pc, #64]	; (1510 <_Z16timeProtocolTaskv+0xb4>)
    14d0:	47a8      	blx	r5
	Enable_global_interrupt();
    14d2:	4b0c      	ldr	r3, [pc, #48]	; (1504 <_Z16timeProtocolTaskv+0xa8>)
    14d4:	701c      	strb	r4, [r3, #0]
    14d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    14da:	b662      	cpsie	i
	while(1){
		sender();
    14dc:	4d0d      	ldr	r5, [pc, #52]	; (1514 <_Z16timeProtocolTaskv+0xb8>)
		if(timeProt.synchroTimeReceive!=NULL){
    14de:	4c0a      	ldr	r4, [pc, #40]	; (1508 <_Z16timeProtocolTaskv+0xac>)
				if( xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS) == pdTRUE ){
    14e0:	4e0b      	ldr	r6, [pc, #44]	; (1510 <_Z16timeProtocolTaskv+0xb4>)
	timeProt.delay.sign=true;
	timeProt.waitIdentifier=false;
	xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS);
	Enable_global_interrupt();
	while(1){
		sender();
    14e2:	47a8      	blx	r5
		if(timeProt.synchroTimeReceive!=NULL){
    14e4:	2394      	movs	r3, #148	; 0x94
    14e6:	58e0      	ldr	r0, [r4, r3]
    14e8:	2800      	cmp	r0, #0
    14ea:	d008      	beq.n	14fe <_Z16timeProtocolTaskv+0xa2>
				if( xSemaphoreTake(timeProt.synchroTimeReceive,500/portTICK_RATE_MS) == pdTRUE ){
    14ec:	2100      	movs	r1, #0
    14ee:	22fa      	movs	r2, #250	; 0xfa
    14f0:	0052      	lsls	r2, r2, #1
    14f2:	2300      	movs	r3, #0
    14f4:	47b0      	blx	r6
    14f6:	2801      	cmp	r0, #1
    14f8:	d101      	bne.n	14fe <_Z16timeProtocolTaskv+0xa2>
					receiver();
    14fa:	4b07      	ldr	r3, [pc, #28]	; (1518 <_Z16timeProtocolTaskv+0xbc>)
    14fc:	4798      	blx	r3
				}		
		}
		correction();
    14fe:	4b07      	ldr	r3, [pc, #28]	; (151c <_Z16timeProtocolTaskv+0xc0>)
    1500:	4798      	blx	r3
	}
    1502:	e7ee      	b.n	14e2 <_Z16timeProtocolTaskv+0x86>
    1504:	200000d0 	.word	0x200000d0
    1508:	20000398 	.word	0x20000398
    150c:	2000038c 	.word	0x2000038c
    1510:	00001a9d 	.word	0x00001a9d
    1514:	00001409 	.word	0x00001409
    1518:	00001125 	.word	0x00001125
    151c:	00000f21 	.word	0x00000f21

00001520 <_Z12kernelConfigv>:
 * Created: 13/05/2016 16:34:52
 *  Author: MORAND Baptiste
 */ 
#include "utask.h"

void kernelConfig(void){	
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
    1522:	b085      	sub	sp, #20
	// tasks creations
	timeProt.synchroTimeReceive=NULL;
    1524:	4d1a      	ldr	r5, [pc, #104]	; (1590 <_Z12kernelConfigv+0x70>)
    1526:	2494      	movs	r4, #148	; 0x94
    1528:	2300      	movs	r3, #0
    152a:	512b      	str	r3, [r5, r4]
	vSemaphoreCreateBinary(timeProt.synchroTimeReceive);
    152c:	2001      	movs	r0, #1
    152e:	2100      	movs	r1, #0
    1530:	2203      	movs	r2, #3
    1532:	4b18      	ldr	r3, [pc, #96]	; (1594 <_Z12kernelConfigv+0x74>)
    1534:	4798      	blx	r3
    1536:	5128      	str	r0, [r5, r4]
    1538:	2800      	cmp	r0, #0
    153a:	d004      	beq.n	1546 <_Z12kernelConfigv+0x26>
    153c:	2100      	movs	r1, #0
    153e:	2200      	movs	r2, #0
    1540:	2300      	movs	r3, #0
    1542:	4c15      	ldr	r4, [pc, #84]	; (1598 <_Z12kernelConfigv+0x78>)
    1544:	47a0      	blx	r4
	xTaskCreate((pdTASK_CODE)HMITask,(const signed char*)"HMITask",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    1546:	2696      	movs	r6, #150	; 0x96
    1548:	0076      	lsls	r6, r6, #1
    154a:	2701      	movs	r7, #1
    154c:	9700      	str	r7, [sp, #0]
    154e:	2400      	movs	r4, #0
    1550:	9401      	str	r4, [sp, #4]
    1552:	9402      	str	r4, [sp, #8]
    1554:	9403      	str	r4, [sp, #12]
    1556:	4811      	ldr	r0, [pc, #68]	; (159c <_Z12kernelConfigv+0x7c>)
    1558:	4911      	ldr	r1, [pc, #68]	; (15a0 <_Z12kernelConfigv+0x80>)
    155a:	1c32      	adds	r2, r6, #0
    155c:	2300      	movs	r3, #0
    155e:	4d11      	ldr	r5, [pc, #68]	; (15a4 <_Z12kernelConfigv+0x84>)
    1560:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)smartMeterTask,(const signed char*)"SmartMeterTask",configMINIMAL_STACK_SIZE,NULL, tskIDLE_PRIORITY +1, NULL);
    1562:	9700      	str	r7, [sp, #0]
    1564:	9401      	str	r4, [sp, #4]
    1566:	9402      	str	r4, [sp, #8]
    1568:	9403      	str	r4, [sp, #12]
    156a:	480f      	ldr	r0, [pc, #60]	; (15a8 <_Z12kernelConfigv+0x88>)
    156c:	490f      	ldr	r1, [pc, #60]	; (15ac <_Z12kernelConfigv+0x8c>)
    156e:	1c32      	adds	r2, r6, #0
    1570:	2300      	movs	r3, #0
    1572:	47a8      	blx	r5
	xTaskCreate((pdTASK_CODE)timeProtocolTask,(const signed char*)"time",configMINIMAL_STACK_SIZE+600,NULL, tskIDLE_PRIORITY +3, NULL);
    1574:	2303      	movs	r3, #3
    1576:	9300      	str	r3, [sp, #0]
    1578:	9401      	str	r4, [sp, #4]
    157a:	9402      	str	r4, [sp, #8]
    157c:	9403      	str	r4, [sp, #12]
    157e:	480c      	ldr	r0, [pc, #48]	; (15b0 <_Z12kernelConfigv+0x90>)
    1580:	490c      	ldr	r1, [pc, #48]	; (15b4 <_Z12kernelConfigv+0x94>)
    1582:	22e1      	movs	r2, #225	; 0xe1
    1584:	0092      	lsls	r2, r2, #2
    1586:	2300      	movs	r3, #0
    1588:	47a8      	blx	r5
}
    158a:	b005      	add	sp, #20
    158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000398 	.word	0x20000398
    1594:	000018bd 	.word	0x000018bd
    1598:	0000190d 	.word	0x0000190d
    159c:	00000549 	.word	0x00000549
    15a0:	0000e604 	.word	0x0000e604
    15a4:	00001d15 	.word	0x00001d15
    15a8:	00000665 	.word	0x00000665
    15ac:	0000e60c 	.word	0x0000e60c
    15b0:	0000145d 	.word	0x0000145d
    15b4:	0000e61c 	.word	0x0000e61c

000015b8 <vApplicationIdleHook>:
 *
 * Created: 08/07/2016 11:28:31
 *  Author: Time Syn Project
 */ 
#include <wdt_config.h>
void vApplicationIdleHook( void ){
    15b8:	b508      	push	{r3, lr}
	
	wdt_clear();
    15ba:	4b01      	ldr	r3, [pc, #4]	; (15c0 <vApplicationIdleHook+0x8>)
    15bc:	4798      	blx	r3
    15be:	bd08      	pop	{r3, pc}
    15c0:	00001705 	.word	0x00001705

000015c4 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
    15c4:	b510      	push	{r4, lr}
    15c6:	b082      	sub	sp, #8
    const enum system_clock_apb_bus bus,
    const uint32_t mask)
{
    switch (bus) {
        case SYSTEM_CLOCK_APB_APBA:
                    PM->APBAMASK.reg |= mask;
    15c8:	4a38      	ldr	r2, [pc, #224]	; (16ac <wdt_set_config+0xe8>)
    15ca:	6991      	ldr	r1, [r2, #24]
    15cc:	2310      	movs	r3, #16
    15ce:	430b      	orrs	r3, r1
    15d0:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
    15d2:	4b37      	ldr	r3, [pc, #220]	; (16b0 <wdt_set_config+0xec>)
    15d4:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    15d6:	09db      	lsrs	r3, r3, #7
		return STATUS_ERR_IO;
    15d8:	2210      	movs	r2, #16

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
    15da:	2b00      	cmp	r3, #0
    15dc:	d162      	bne.n	16a4 <wdt_set_config+0xe0>
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    15de:	78c3      	ldrb	r3, [r0, #3]
		return STATUS_ERR_INVALID_ARG;
    15e0:	3207      	adds	r2, #7
	if (wdt_is_locked()) {
		return STATUS_ERR_IO;
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
    15e2:	2b00      	cmp	r3, #0
    15e4:	d05e      	beq.n	16a4 <wdt_set_config+0xe0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Make sure the Window and Early Warning periods are not more than the
	 * reset period, abort if either is invalid */
	if ((config->timeout_period < config->window_period) ||
    15e6:	7901      	ldrb	r1, [r0, #4]
    15e8:	4299      	cmp	r1, r3
    15ea:	d85b      	bhi.n	16a4 <wdt_set_config+0xe0>
    15ec:	7941      	ldrb	r1, [r0, #5]
    15ee:	4299      	cmp	r1, r3
    15f0:	d858      	bhi.n	16a4 <wdt_set_config+0xe0>
			(config->timeout_period < config->early_warning_period)) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Disable the Watchdog module */
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
    15f2:	4a2f      	ldr	r2, [pc, #188]	; (16b0 <wdt_set_config+0xec>)
    15f4:	7813      	ldrb	r3, [r2, #0]
    15f6:	2102      	movs	r1, #2
    15f8:	438b      	bics	r3, r1
    15fa:	7013      	strb	r3, [r2, #0]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21)
	if (WDT_module->SYNCBUSY.reg) {
#else
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
    15fc:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    15fe:	b25b      	sxtb	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	dbfb      	blt.n	15fc <wdt_set_config+0x38>
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1604:	7843      	ldrb	r3, [r0, #1]
		return STATUS_OK;
    1606:	2200      	movs	r2, #0

	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	if(config->enable == false) {
    1608:	2b00      	cmp	r3, #0
    160a:	d04b      	beq.n	16a4 <wdt_set_config+0xe0>
    160c:	1c04      	adds	r4, r0, #0
		return STATUS_OK;
	}

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	gclk_chan_conf.source_generator = config->clock_source;
    160e:	a901      	add	r1, sp, #4
    1610:	7883      	ldrb	r3, [r0, #2]
    1612:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
    1614:	2003      	movs	r0, #3
    1616:	4b27      	ldr	r3, [pc, #156]	; (16b4 <wdt_set_config+0xf0>)
    1618:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
    161a:	2003      	movs	r0, #3
    161c:	4b26      	ldr	r3, [pc, #152]	; (16b8 <wdt_set_config+0xf4>)
    161e:	4798      	blx	r3
	if (config->always_on) {
    1620:	7823      	ldrb	r3, [r4, #0]
    1622:	2b00      	cmp	r3, #0
    1624:	d002      	beq.n	162c <wdt_set_config+0x68>
		system_gclk_chan_lock(WDT_GCLK_ID);
    1626:	2003      	movs	r0, #3
    1628:	4b24      	ldr	r3, [pc, #144]	; (16bc <wdt_set_config+0xf8>)
    162a:	4798      	blx	r3
	}

	uint32_t new_config = 0;

	/* Update the timeout period value with the requested period */
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
    162c:	78e3      	ldrb	r3, [r4, #3]
    162e:	3b01      	subs	r3, #1

	/* Check if the user has requested a reset window period */
	if (config->window_period != WDT_PERIOD_NONE) {
    1630:	7922      	ldrb	r2, [r4, #4]
    1632:	2a00      	cmp	r2, #0
    1634:	d009      	beq.n	164a <wdt_set_config+0x86>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
    1636:	491e      	ldr	r1, [pc, #120]	; (16b0 <wdt_set_config+0xec>)
    1638:	7808      	ldrb	r0, [r1, #0]
    163a:	2204      	movs	r2, #4
    163c:	4302      	orrs	r2, r0
    163e:	700a      	strb	r2, [r1, #0]

		/* Update and enable the timeout period value */
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
    1640:	7922      	ldrb	r2, [r4, #4]
    1642:	3a01      	subs	r2, #1
    1644:	0112      	lsls	r2, r2, #4
    1646:	4313      	orrs	r3, r2
    1648:	e004      	b.n	1654 <wdt_set_config+0x90>
	} else {
		/* Ensure the window enable control flag is cleared */
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
    164a:	4919      	ldr	r1, [pc, #100]	; (16b0 <wdt_set_config+0xec>)
    164c:	780a      	ldrb	r2, [r1, #0]
    164e:	2004      	movs	r0, #4
    1650:	4382      	bics	r2, r0
    1652:	700a      	strb	r2, [r1, #0]
    1654:	4916      	ldr	r1, [pc, #88]	; (16b0 <wdt_set_config+0xec>)
    1656:	79ca      	ldrb	r2, [r1, #7]
	}

	while (wdt_is_syncing()) {
    1658:	b252      	sxtb	r2, r2
    165a:	2a00      	cmp	r2, #0
    165c:	dbfb      	blt.n	1656 <wdt_set_config+0x92>
		/* Wait for all hardware modules to complete synchronization */
	}

	/* Write the new Watchdog configuration */
	WDT_module->CONFIG.reg = new_config;
    165e:	b2db      	uxtb	r3, r3
    1660:	4a13      	ldr	r2, [pc, #76]	; (16b0 <wdt_set_config+0xec>)
    1662:	7053      	strb	r3, [r2, #1]

	/* Check if the user has requested an early warning period */
	if (config->early_warning_period != WDT_PERIOD_NONE) {
    1664:	7963      	ldrb	r3, [r4, #5]
    1666:	2b00      	cmp	r3, #0
    1668:	d008      	beq.n	167c <wdt_set_config+0xb8>
    166a:	1c11      	adds	r1, r2, #0
    166c:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
    166e:	b252      	sxtb	r2, r2
    1670:	2a00      	cmp	r2, #0
    1672:	dbfb      	blt.n	166c <wdt_set_config+0xa8>
			/* Wait for all hardware modules to complete synchronization */
		}

		/* Set the Early Warning period */
		WDT_module->EWCTRL.reg
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
    1674:	3b01      	subs	r3, #1
    1676:	b2db      	uxtb	r3, r3
    1678:	4a0d      	ldr	r2, [pc, #52]	; (16b0 <wdt_set_config+0xec>)
    167a:	7093      	strb	r3, [r2, #2]
	}

	/* Either enable or lock-enable the Watchdog timer depending on the user
	 * settings */
	if (config->always_on) {
    167c:	7823      	ldrb	r3, [r4, #0]
    167e:	2b00      	cmp	r3, #0
    1680:	d005      	beq.n	168e <wdt_set_config+0xca>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
    1682:	4a0b      	ldr	r2, [pc, #44]	; (16b0 <wdt_set_config+0xec>)
    1684:	7811      	ldrb	r1, [r2, #0]
    1686:	2380      	movs	r3, #128	; 0x80
    1688:	430b      	orrs	r3, r1
    168a:	7013      	strb	r3, [r2, #0]
    168c:	e004      	b.n	1698 <wdt_set_config+0xd4>
	} else {
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
    168e:	4a08      	ldr	r2, [pc, #32]	; (16b0 <wdt_set_config+0xec>)
    1690:	7811      	ldrb	r1, [r2, #0]
    1692:	2302      	movs	r3, #2
    1694:	430b      	orrs	r3, r1
    1696:	7013      	strb	r3, [r2, #0]
    1698:	4a05      	ldr	r2, [pc, #20]	; (16b0 <wdt_set_config+0xec>)
    169a:	79d3      	ldrb	r3, [r2, #7]
	}

	while (wdt_is_syncing()) {
    169c:	b25b      	sxtb	r3, r3
    169e:	2b00      	cmp	r3, #0
    16a0:	dbfb      	blt.n	169a <wdt_set_config+0xd6>
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
    16a2:	2200      	movs	r2, #0
}
    16a4:	1c10      	adds	r0, r2, #0
    16a6:	b002      	add	sp, #8
    16a8:	bd10      	pop	{r4, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	40000400 	.word	0x40000400
    16b0:	40001000 	.word	0x40001000
    16b4:	000044f1 	.word	0x000044f1
    16b8:	00004475 	.word	0x00004475
    16bc:	00004509 	.word	0x00004509

000016c0 <wdt_reset_count>:
void wdt_reset_count(void)
{
	Wdt *const WDT_module = WDT;

	/* Disable the Watchdog module */
	WDT_module->CLEAR.reg = WDT_CLEAR_CLEAR_KEY;
    16c0:	22a5      	movs	r2, #165	; 0xa5
    16c2:	4b04      	ldr	r3, [pc, #16]	; (16d4 <wdt_reset_count+0x14>)
    16c4:	721a      	strb	r2, [r3, #8]
    16c6:	1c1a      	adds	r2, r3, #0
    16c8:	79d3      	ldrb	r3, [r2, #7]

	while (wdt_is_syncing()) {
    16ca:	b25b      	sxtb	r3, r3
    16cc:	2b00      	cmp	r3, #0
    16ce:	dbfb      	blt.n	16c8 <wdt_reset_count+0x8>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    16d0:	4770      	bx	lr
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	40001000 	.word	0x40001000

000016d8 <_Z10wdt_configv>:
 *
 * Created: 08/07/2016 10:52:22
 *  Author: Time Syn Project
 */ 
#include "wdt_config.h"
void wdt_config(void){
    16d8:	b500      	push	{lr}
    16da:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->always_on            = false;
    16dc:	2300      	movs	r3, #0
    16de:	466a      	mov	r2, sp
    16e0:	7013      	strb	r3, [r2, #0]
	config->enable               = true;
    16e2:	2201      	movs	r2, #1
    16e4:	4669      	mov	r1, sp
    16e6:	704a      	strb	r2, [r1, #1]
#if !(SAML21) && !(SAML22) && !(SAMC20) && !(SAMC21)
	config->clock_source         = GCLK_GENERATOR_4;
#endif
	config->timeout_period       = WDT_PERIOD_16384CLK;
    16e8:	320b      	adds	r2, #11
    16ea:	70ca      	strb	r2, [r1, #3]
	config->window_period        = WDT_PERIOD_NONE;
    16ec:	710b      	strb	r3, [r1, #4]
	config->early_warning_period = WDT_PERIOD_NONE;
    16ee:	714b      	strb	r3, [r1, #5]

	/* Set the Watchdog configuration settings */
	//! [setup_3]
	config_wdt.always_on            = false;
#if !((SAML21) || (SAMC21) || (SAML22))
	config_wdt.clock_source         = GCLK_GENERATOR_2;
    16f0:	3302      	adds	r3, #2
    16f2:	708b      	strb	r3, [r1, #2]
	config_wdt.timeout_period       = WDT_PERIOD_16384CLK;
	//! [setup_3]

	/* Initialize and enable the Watchdog with the user settings */
	//! [setup_4]
	wdt_set_config(&config_wdt);
    16f4:	4668      	mov	r0, sp
    16f6:	4b02      	ldr	r3, [pc, #8]	; (1700 <_Z10wdt_configv+0x28>)
    16f8:	4798      	blx	r3
	//! [setup_4]	
	//hmi.printf("config wdt\r\n");
	
	
	
}
    16fa:	b003      	add	sp, #12
    16fc:	bd00      	pop	{pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	000015c5 	.word	0x000015c5

00001704 <wdt_clear>:
void wdt_clear(void){
    1704:	b508      	push	{r3, lr}
	wdt_reset_count();
    1706:	4b01      	ldr	r3, [pc, #4]	; (170c <wdt_clear+0x8>)
    1708:	4798      	blx	r3
	
	
    170a:	bd08      	pop	{r3, pc}
    170c:	000016c1 	.word	0x000016c1

00001710 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    1710:	b510      	push	{r4, lr}
    1712:	1c04      	adds	r4, r0, #0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    1714:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1716:	2b00      	cmp	r3, #0
    1718:	d108      	bne.n	172c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    171a:	6803      	ldr	r3, [r0, #0]
    171c:	2b00      	cmp	r3, #0
    171e:	d126      	bne.n	176e <prvCopyDataToQueue+0x5e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    1720:	6840      	ldr	r0, [r0, #4]
    1722:	4b15      	ldr	r3, [pc, #84]	; (1778 <prvCopyDataToQueue+0x68>)
    1724:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    1726:	2300      	movs	r3, #0
    1728:	6063      	str	r3, [r4, #4]
    172a:	e020      	b.n	176e <prvCopyDataToQueue+0x5e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    172c:	2a00      	cmp	r2, #0
    172e:	d10e      	bne.n	174e <prvCopyDataToQueue+0x3e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    1730:	6880      	ldr	r0, [r0, #8]
    1732:	1c1a      	adds	r2, r3, #0
    1734:	4b11      	ldr	r3, [pc, #68]	; (177c <prvCopyDataToQueue+0x6c>)
    1736:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1738:	68a3      	ldr	r3, [r4, #8]
    173a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    173c:	4694      	mov	ip, r2
    173e:	4463      	add	r3, ip
    1740:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    1742:	6862      	ldr	r2, [r4, #4]
    1744:	4293      	cmp	r3, r2
    1746:	d312      	bcc.n	176e <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1748:	6823      	ldr	r3, [r4, #0]
    174a:	60a3      	str	r3, [r4, #8]
    174c:	e00f      	b.n	176e <prvCopyDataToQueue+0x5e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
    174e:	68c0      	ldr	r0, [r0, #12]
    1750:	1c1a      	adds	r2, r3, #0
    1752:	4b0a      	ldr	r3, [pc, #40]	; (177c <prvCopyDataToQueue+0x6c>)
    1754:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    1756:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1758:	425b      	negs	r3, r3
    175a:	68e2      	ldr	r2, [r4, #12]
    175c:	18d2      	adds	r2, r2, r3
    175e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    1760:	6821      	ldr	r1, [r4, #0]
    1762:	428a      	cmp	r2, r1
    1764:	d203      	bcs.n	176e <prvCopyDataToQueue+0x5e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1766:	6862      	ldr	r2, [r4, #4]
    1768:	4694      	mov	ip, r2
    176a:	4463      	add	r3, ip
    176c:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    176e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1770:	3301      	adds	r3, #1
    1772:	63a3      	str	r3, [r4, #56]	; 0x38
}
    1774:	bd10      	pop	{r4, pc}
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	00002471 	.word	0x00002471
    177c:	000094d7 	.word	0x000094d7

00001780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    1780:	b538      	push	{r3, r4, r5, lr}
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    1782:	6804      	ldr	r4, [r0, #0]
    1784:	2c00      	cmp	r4, #0
    1786:	d00c      	beq.n	17a2 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    1788:	6c02      	ldr	r2, [r0, #64]	; 0x40
    178a:	68c3      	ldr	r3, [r0, #12]
    178c:	189b      	adds	r3, r3, r2
    178e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    1790:	6845      	ldr	r5, [r0, #4]
    1792:	42ab      	cmp	r3, r5
    1794:	d300      	bcc.n	1798 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    1796:	60c4      	str	r4, [r0, #12]
    1798:	1c0b      	adds	r3, r1, #0
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( size_t ) pxQueue->uxItemSize );
    179a:	68c1      	ldr	r1, [r0, #12]
    179c:	1c18      	adds	r0, r3, #0
    179e:	4b01      	ldr	r3, [pc, #4]	; (17a4 <prvCopyDataFromQueue+0x24>)
    17a0:	4798      	blx	r3
	}
}
    17a2:	bd38      	pop	{r3, r4, r5, pc}
    17a4:	000094d7 	.word	0x000094d7

000017a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
    17a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17aa:	1c04      	adds	r4, r0, #0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    17ac:	4b21      	ldr	r3, [pc, #132]	; (1834 <prvUnlockQueue+0x8c>)
    17ae:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    17b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17b2:	2b00      	cmp	r3, #0
    17b4:	dd16      	ble.n	17e4 <prvUnlockQueue+0x3c>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17b8:	2b00      	cmp	r3, #0
    17ba:	d104      	bne.n	17c6 <prvUnlockQueue+0x1e>
    17bc:	e012      	b.n	17e4 <prvUnlockQueue+0x3c>
    17be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    17c0:	2b00      	cmp	r3, #0
    17c2:	d104      	bne.n	17ce <prvUnlockQueue+0x26>
    17c4:	e00e      	b.n	17e4 <prvUnlockQueue+0x3c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17c6:	1c25      	adds	r5, r4, #0
    17c8:	3524      	adds	r5, #36	; 0x24
    17ca:	4f1b      	ldr	r7, [pc, #108]	; (1838 <prvUnlockQueue+0x90>)
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    17cc:	4e1b      	ldr	r6, [pc, #108]	; (183c <prvUnlockQueue+0x94>)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17ce:	1c28      	adds	r0, r5, #0
    17d0:	47b8      	blx	r7
    17d2:	2800      	cmp	r0, #0
    17d4:	d000      	beq.n	17d8 <prvUnlockQueue+0x30>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
    17d6:	47b0      	blx	r6
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
    17d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17da:	3b01      	subs	r3, #1
    17dc:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    17de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    17e0:	2b00      	cmp	r3, #0
    17e2:	dcec      	bgt.n	17be <prvUnlockQueue+0x16>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
    17e4:	2301      	movs	r3, #1
    17e6:	425b      	negs	r3, r3
    17e8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    17ea:	4b15      	ldr	r3, [pc, #84]	; (1840 <prvUnlockQueue+0x98>)
    17ec:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    17ee:	4b11      	ldr	r3, [pc, #68]	; (1834 <prvUnlockQueue+0x8c>)
    17f0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    17f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    17f4:	2b00      	cmp	r3, #0
    17f6:	dd16      	ble.n	1826 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17f8:	6923      	ldr	r3, [r4, #16]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d104      	bne.n	1808 <prvUnlockQueue+0x60>
    17fe:	e012      	b.n	1826 <prvUnlockQueue+0x7e>
    1800:	6923      	ldr	r3, [r4, #16]
    1802:	2b00      	cmp	r3, #0
    1804:	d104      	bne.n	1810 <prvUnlockQueue+0x68>
    1806:	e00e      	b.n	1826 <prvUnlockQueue+0x7e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1808:	1c25      	adds	r5, r4, #0
    180a:	3510      	adds	r5, #16
    180c:	4f0a      	ldr	r7, [pc, #40]	; (1838 <prvUnlockQueue+0x90>)
				{
					vTaskMissedYield();
    180e:	4e0b      	ldr	r6, [pc, #44]	; (183c <prvUnlockQueue+0x94>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1810:	1c28      	adds	r0, r5, #0
    1812:	47b8      	blx	r7
    1814:	2800      	cmp	r0, #0
    1816:	d000      	beq.n	181a <prvUnlockQueue+0x72>
				{
					vTaskMissedYield();
    1818:	47b0      	blx	r6
				}

				--( pxQueue->xRxLock );
    181a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    181c:	3b01      	subs	r3, #1
    181e:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    1820:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1822:	2b00      	cmp	r3, #0
    1824:	dcec      	bgt.n	1800 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    1826:	2301      	movs	r3, #1
    1828:	425b      	negs	r3, r3
    182a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    182c:	4b04      	ldr	r3, [pc, #16]	; (1840 <prvUnlockQueue+0x98>)
    182e:	4798      	blx	r3
}
    1830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	00002539 	.word	0x00002539
    1838:	000022d1 	.word	0x000022d1
    183c:	000023dd 	.word	0x000023dd
    1840:	00002551 	.word	0x00002551

00001844 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
    1844:	b538      	push	{r3, r4, r5, lr}
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1846:	2800      	cmp	r0, #0
    1848:	d101      	bne.n	184e <xQueueGenericReset+0xa>
    184a:	b672      	cpsid	i
    184c:	e7fe      	b.n	184c <xQueueGenericReset+0x8>
    184e:	1c0d      	adds	r5, r1, #0
    1850:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    1852:	4b15      	ldr	r3, [pc, #84]	; (18a8 <xQueueGenericReset+0x64>)
    1854:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1856:	6822      	ldr	r2, [r4, #0]
    1858:	6c21      	ldr	r1, [r4, #64]	; 0x40
    185a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    185c:	434b      	muls	r3, r1
    185e:	18d0      	adds	r0, r2, r3
    1860:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1862:	2000      	movs	r0, #0
    1864:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1866:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    1868:	1a5b      	subs	r3, r3, r1
    186a:	18d3      	adds	r3, r2, r3
    186c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    186e:	2301      	movs	r3, #1
    1870:	425b      	negs	r3, r3
    1872:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    1874:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
    1876:	2d00      	cmp	r5, #0
    1878:	d10b      	bne.n	1892 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    187a:	6923      	ldr	r3, [r4, #16]
    187c:	2b00      	cmp	r3, #0
    187e:	d00f      	beq.n	18a0 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1880:	1c20      	adds	r0, r4, #0
    1882:	3010      	adds	r0, #16
    1884:	4b09      	ldr	r3, [pc, #36]	; (18ac <xQueueGenericReset+0x68>)
    1886:	4798      	blx	r3
    1888:	2801      	cmp	r0, #1
    188a:	d109      	bne.n	18a0 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
    188c:	4b08      	ldr	r3, [pc, #32]	; (18b0 <xQueueGenericReset+0x6c>)
    188e:	4798      	blx	r3
    1890:	e006      	b.n	18a0 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1892:	1c20      	adds	r0, r4, #0
    1894:	3010      	adds	r0, #16
    1896:	4d07      	ldr	r5, [pc, #28]	; (18b4 <xQueueGenericReset+0x70>)
    1898:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    189a:	1c20      	adds	r0, r4, #0
    189c:	3024      	adds	r0, #36	; 0x24
    189e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <xQueueGenericReset+0x74>)
    18a2:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    18a4:	2001      	movs	r0, #1
    18a6:	bd38      	pop	{r3, r4, r5, pc}
    18a8:	00002539 	.word	0x00002539
    18ac:	000022d1 	.word	0x000022d1
    18b0:	00002521 	.word	0x00002521
    18b4:	00001c0d 	.word	0x00001c0d
    18b8:	00002551 	.word	0x00002551

000018bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    18bc:	b570      	push	{r4, r5, r6, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    18be:	2800      	cmp	r0, #0
    18c0:	d013      	beq.n	18ea <xQueueGenericCreate+0x2e>
    18c2:	1c0e      	adds	r6, r1, #0
    18c4:	1c05      	adds	r5, r0, #0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    18c6:	204c      	movs	r0, #76	; 0x4c
    18c8:	4b0d      	ldr	r3, [pc, #52]	; (1900 <xQueueGenericCreate+0x44>)
    18ca:	4798      	blx	r3
    18cc:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    18ce:	d00c      	beq.n	18ea <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    18d0:	1c30      	adds	r0, r6, #0
    18d2:	4368      	muls	r0, r5
    18d4:	3001      	adds	r0, #1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    18d6:	4b0a      	ldr	r3, [pc, #40]	; (1900 <xQueueGenericCreate+0x44>)
    18d8:	4798      	blx	r3
    18da:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
    18dc:	2800      	cmp	r0, #0
    18de:	d106      	bne.n	18ee <xQueueGenericCreate+0x32>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    18e0:	1c20      	adds	r0, r4, #0
    18e2:	4b08      	ldr	r3, [pc, #32]	; (1904 <xQueueGenericCreate+0x48>)
    18e4:	4798      	blx	r3
    18e6:	e000      	b.n	18ea <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
    18e8:	e7fe      	b.n	18e8 <xQueueGenericCreate+0x2c>
    18ea:	b672      	cpsid	i
    18ec:	e7fc      	b.n	18e8 <xQueueGenericCreate+0x2c>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    18ee:	63e5      	str	r5, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    18f0:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    18f2:	1c20      	adds	r0, r4, #0
    18f4:	2101      	movs	r1, #1
    18f6:	4b04      	ldr	r3, [pc, #16]	; (1908 <xQueueGenericCreate+0x4c>)
    18f8:	4798      	blx	r3
	}

	configASSERT( xReturn );

	return xReturn;
}
    18fa:	1c20      	adds	r0, r4, #0
    18fc:	bd70      	pop	{r4, r5, r6, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	0000262d 	.word	0x0000262d
    1904:	00002695 	.word	0x00002695
    1908:	00001845 	.word	0x00001845

0000190c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    190c:	b5f0      	push	{r4, r5, r6, r7, lr}
    190e:	4657      	mov	r7, sl
    1910:	b480      	push	{r7}
    1912:	b086      	sub	sp, #24
    1914:	9203      	str	r2, [sp, #12]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1916:	2800      	cmp	r0, #0
    1918:	d101      	bne.n	191e <xQueueGenericSend+0x12>
    191a:	b672      	cpsid	i
    191c:	e7fe      	b.n	191c <xQueueGenericSend+0x10>
    191e:	2700      	movs	r7, #0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    1920:	2900      	cmp	r1, #0
    1922:	d105      	bne.n	1930 <xQueueGenericSend+0x24>
    1924:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1926:	2a00      	cmp	r2, #0
    1928:	d001      	beq.n	192e <xQueueGenericSend+0x22>
    192a:	b672      	cpsid	i
    192c:	e7fe      	b.n	192c <xQueueGenericSend+0x20>
    192e:	2700      	movs	r7, #0
    1930:	9302      	str	r3, [sp, #8]
    1932:	9101      	str	r1, [sp, #4]
    1934:	1c04      	adds	r4, r0, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1936:	4d33      	ldr	r5, [pc, #204]	; (1a04 <xQueueGenericSend+0xf8>)
    1938:	47a8      	blx	r5
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    193a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    193c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    193e:	4293      	cmp	r3, r2
    1940:	d213      	bcs.n	196a <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1942:	1c20      	adds	r0, r4, #0
    1944:	9901      	ldr	r1, [sp, #4]
    1946:	9a02      	ldr	r2, [sp, #8]
    1948:	4b2f      	ldr	r3, [pc, #188]	; (1a08 <xQueueGenericSend+0xfc>)
    194a:	4798      	blx	r3
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    194c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    194e:	2b00      	cmp	r3, #0
    1950:	d007      	beq.n	1962 <xQueueGenericSend+0x56>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1952:	1c20      	adds	r0, r4, #0
    1954:	3024      	adds	r0, #36	; 0x24
    1956:	4b2d      	ldr	r3, [pc, #180]	; (1a0c <xQueueGenericSend+0x100>)
    1958:	4798      	blx	r3
    195a:	2801      	cmp	r0, #1
    195c:	d101      	bne.n	1962 <xQueueGenericSend+0x56>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
    195e:	4b2c      	ldr	r3, [pc, #176]	; (1a10 <xQueueGenericSend+0x104>)
    1960:	4798      	blx	r3
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1962:	4b2c      	ldr	r3, [pc, #176]	; (1a14 <xQueueGenericSend+0x108>)
    1964:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1966:	2001      	movs	r0, #1
    1968:	e048      	b.n	19fc <xQueueGenericSend+0xf0>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    196a:	9b03      	ldr	r3, [sp, #12]
    196c:	2b00      	cmp	r3, #0
    196e:	d103      	bne.n	1978 <xQueueGenericSend+0x6c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1970:	4b28      	ldr	r3, [pc, #160]	; (1a14 <xQueueGenericSend+0x108>)
    1972:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1974:	2000      	movs	r0, #0
    1976:	e041      	b.n	19fc <xQueueGenericSend+0xf0>
				}
				else if( xEntryTimeSet == pdFALSE )
    1978:	2f00      	cmp	r7, #0
    197a:	d103      	bne.n	1984 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    197c:	a804      	add	r0, sp, #16
    197e:	4b26      	ldr	r3, [pc, #152]	; (1a18 <xQueueGenericSend+0x10c>)
    1980:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1982:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
    1984:	4b23      	ldr	r3, [pc, #140]	; (1a14 <xQueueGenericSend+0x108>)
    1986:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1988:	4b24      	ldr	r3, [pc, #144]	; (1a1c <xQueueGenericSend+0x110>)
    198a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    198c:	4b1d      	ldr	r3, [pc, #116]	; (1a04 <xQueueGenericSend+0xf8>)
    198e:	4798      	blx	r3
    1990:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1992:	3301      	adds	r3, #1
    1994:	d101      	bne.n	199a <xQueueGenericSend+0x8e>
    1996:	2300      	movs	r3, #0
    1998:	6463      	str	r3, [r4, #68]	; 0x44
    199a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    199c:	3301      	adds	r3, #1
    199e:	d101      	bne.n	19a4 <xQueueGenericSend+0x98>
    19a0:	2300      	movs	r3, #0
    19a2:	64a3      	str	r3, [r4, #72]	; 0x48
    19a4:	4b1b      	ldr	r3, [pc, #108]	; (1a14 <xQueueGenericSend+0x108>)
    19a6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    19a8:	a804      	add	r0, sp, #16
    19aa:	a903      	add	r1, sp, #12
    19ac:	4b1c      	ldr	r3, [pc, #112]	; (1a20 <xQueueGenericSend+0x114>)
    19ae:	4798      	blx	r3
    19b0:	2800      	cmp	r0, #0
    19b2:	d11d      	bne.n	19f0 <xQueueGenericSend+0xe4>

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    19b4:	4b13      	ldr	r3, [pc, #76]	; (1a04 <xQueueGenericSend+0xf8>)
    19b6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    19b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    19ba:	469a      	mov	sl, r3
    19bc:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    19be:	4b15      	ldr	r3, [pc, #84]	; (1a14 <xQueueGenericSend+0x108>)
    19c0:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    19c2:	45b2      	cmp	sl, r6
    19c4:	d10e      	bne.n	19e4 <xQueueGenericSend+0xd8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    19c6:	1c20      	adds	r0, r4, #0
    19c8:	3010      	adds	r0, #16
    19ca:	9903      	ldr	r1, [sp, #12]
    19cc:	4b15      	ldr	r3, [pc, #84]	; (1a24 <xQueueGenericSend+0x118>)
    19ce:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    19d0:	1c20      	adds	r0, r4, #0
    19d2:	4b15      	ldr	r3, [pc, #84]	; (1a28 <xQueueGenericSend+0x11c>)
    19d4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    19d6:	4b15      	ldr	r3, [pc, #84]	; (1a2c <xQueueGenericSend+0x120>)
    19d8:	4798      	blx	r3
    19da:	2800      	cmp	r0, #0
    19dc:	d1ac      	bne.n	1938 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    19de:	4b0c      	ldr	r3, [pc, #48]	; (1a10 <xQueueGenericSend+0x104>)
    19e0:	4798      	blx	r3
    19e2:	e7a9      	b.n	1938 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    19e4:	1c20      	adds	r0, r4, #0
    19e6:	4b10      	ldr	r3, [pc, #64]	; (1a28 <xQueueGenericSend+0x11c>)
    19e8:	4798      	blx	r3
				( void ) xTaskResumeAll();
    19ea:	4b10      	ldr	r3, [pc, #64]	; (1a2c <xQueueGenericSend+0x120>)
    19ec:	4798      	blx	r3
    19ee:	e7a3      	b.n	1938 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    19f0:	1c20      	adds	r0, r4, #0
    19f2:	4b0d      	ldr	r3, [pc, #52]	; (1a28 <xQueueGenericSend+0x11c>)
    19f4:	4798      	blx	r3
			( void ) xTaskResumeAll();
    19f6:	4b0d      	ldr	r3, [pc, #52]	; (1a2c <xQueueGenericSend+0x120>)
    19f8:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    19fa:	2000      	movs	r0, #0
		}
	}
}
    19fc:	b006      	add	sp, #24
    19fe:	bc04      	pop	{r2}
    1a00:	4692      	mov	sl, r2
    1a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a04:	00002539 	.word	0x00002539
    1a08:	00001711 	.word	0x00001711
    1a0c:	000022d1 	.word	0x000022d1
    1a10:	00002521 	.word	0x00002521
    1a14:	00002551 	.word	0x00002551
    1a18:	0000234d 	.word	0x0000234d
    1a1c:	00001f59 	.word	0x00001f59
    1a20:	0000236d 	.word	0x0000236d
    1a24:	00002291 	.word	0x00002291
    1a28:	000017a9 	.word	0x000017a9
    1a2c:	000020a5 	.word	0x000020a5

00001a30 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1a30:	b570      	push	{r4, r5, r6, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1a32:	2800      	cmp	r0, #0
    1a34:	d101      	bne.n	1a3a <xQueueGenericSendFromISR+0xa>
    1a36:	b672      	cpsid	i
    1a38:	e7fe      	b.n	1a38 <xQueueGenericSendFromISR+0x8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    1a3a:	2900      	cmp	r1, #0
    1a3c:	d104      	bne.n	1a48 <xQueueGenericSendFromISR+0x18>
    1a3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    1a40:	2c00      	cmp	r4, #0
    1a42:	d001      	beq.n	1a48 <xQueueGenericSendFromISR+0x18>
    1a44:	b672      	cpsid	i
    1a46:	e7fe      	b.n	1a46 <xQueueGenericSendFromISR+0x16>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1a48:	b672      	cpsid	i
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1a4a:	6b84      	ldr	r4, [r0, #56]	; 0x38
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1a4c:	2500      	movs	r5, #0
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1a4e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    1a50:	42b4      	cmp	r4, r6
    1a52:	d21c      	bcs.n	1a8e <xQueueGenericSendFromISR+0x5e>
    1a54:	1c16      	adds	r6, r2, #0
    1a56:	1c04      	adds	r4, r0, #0
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1a58:	1c1a      	adds	r2, r3, #0
    1a5a:	4b0e      	ldr	r3, [pc, #56]	; (1a94 <xQueueGenericSendFromISR+0x64>)
    1a5c:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1a5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1a60:	3301      	adds	r3, #1
    1a62:	d10e      	bne.n	1a82 <xQueueGenericSendFromISR+0x52>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a64:	6a63      	ldr	r3, [r4, #36]	; 0x24
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1a66:	3501      	adds	r5, #1
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a68:	2b00      	cmp	r3, #0
    1a6a:	d010      	beq.n	1a8e <xQueueGenericSendFromISR+0x5e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a6c:	1c20      	adds	r0, r4, #0
    1a6e:	3024      	adds	r0, #36	; 0x24
    1a70:	4b09      	ldr	r3, [pc, #36]	; (1a98 <xQueueGenericSendFromISR+0x68>)
    1a72:	4798      	blx	r3
    1a74:	2800      	cmp	r0, #0
    1a76:	d00a      	beq.n	1a8e <xQueueGenericSendFromISR+0x5e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1a78:	2e00      	cmp	r6, #0
    1a7a:	d007      	beq.n	1a8c <xQueueGenericSendFromISR+0x5c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1a7c:	2301      	movs	r3, #1
    1a7e:	6033      	str	r3, [r6, #0]
    1a80:	e005      	b.n	1a8e <xQueueGenericSendFromISR+0x5e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1a82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1a84:	3301      	adds	r3, #1
    1a86:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
    1a88:	2501      	movs	r5, #1
    1a8a:	e000      	b.n	1a8e <xQueueGenericSendFromISR+0x5e>
    1a8c:	2501      	movs	r5, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    1a8e:	b662      	cpsie	i

	return xReturn;
}
    1a90:	1c28      	adds	r0, r5, #0
    1a92:	bd70      	pop	{r4, r5, r6, pc}
    1a94:	00001711 	.word	0x00001711
    1a98:	000022d1 	.word	0x000022d1

00001a9c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9e:	464f      	mov	r7, r9
    1aa0:	b480      	push	{r7}
    1aa2:	b084      	sub	sp, #16
    1aa4:	9201      	str	r2, [sp, #4]
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE *pxQueue;

	pxQueue = ( xQUEUE * ) xQueue;
	configASSERT( pxQueue );
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d101      	bne.n	1aae <xQueueGenericReceive+0x12>
    1aaa:	b672      	cpsid	i
    1aac:	e7fe      	b.n	1aac <xQueueGenericReceive+0x10>
    1aae:	2700      	movs	r7, #0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
    1ab0:	2900      	cmp	r1, #0
    1ab2:	d105      	bne.n	1ac0 <xQueueGenericReceive+0x24>
    1ab4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1ab6:	2a00      	cmp	r2, #0
    1ab8:	d001      	beq.n	1abe <xQueueGenericReceive+0x22>
    1aba:	b672      	cpsid	i
    1abc:	e7fe      	b.n	1abc <xQueueGenericReceive+0x20>
    1abe:	2700      	movs	r7, #0
    1ac0:	1c1d      	adds	r5, r3, #0
    1ac2:	9100      	str	r1, [sp, #0]
    1ac4:	1c04      	adds	r4, r0, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1ac6:	4e44      	ldr	r6, [pc, #272]	; (1bd8 <xQueueGenericReceive+0x13c>)
    1ac8:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1aca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1acc:	2b00      	cmp	r3, #0
    1ace:	d02b      	beq.n	1b28 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1ad0:	68e7      	ldr	r7, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1ad2:	1c20      	adds	r0, r4, #0
    1ad4:	9900      	ldr	r1, [sp, #0]
    1ad6:	4b41      	ldr	r3, [pc, #260]	; (1bdc <xQueueGenericReceive+0x140>)
    1ad8:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    1ada:	2d00      	cmp	r5, #0
    1adc:	d114      	bne.n	1b08 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1ae0:	3b01      	subs	r3, #1
    1ae2:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1ae4:	6823      	ldr	r3, [r4, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d102      	bne.n	1af0 <xQueueGenericReceive+0x54>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1aea:	4b3d      	ldr	r3, [pc, #244]	; (1be0 <xQueueGenericReceive+0x144>)
    1aec:	4798      	blx	r3
    1aee:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1af0:	6923      	ldr	r3, [r4, #16]
    1af2:	2b00      	cmp	r3, #0
    1af4:	d014      	beq.n	1b20 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1af6:	1c20      	adds	r0, r4, #0
    1af8:	3010      	adds	r0, #16
    1afa:	4b3a      	ldr	r3, [pc, #232]	; (1be4 <xQueueGenericReceive+0x148>)
    1afc:	4798      	blx	r3
    1afe:	2801      	cmp	r0, #1
    1b00:	d10e      	bne.n	1b20 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
    1b02:	4b39      	ldr	r3, [pc, #228]	; (1be8 <xQueueGenericReceive+0x14c>)
    1b04:	4798      	blx	r3
    1b06:	e00b      	b.n	1b20 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1b08:	60e7      	str	r7, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d007      	beq.n	1b20 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1b10:	1c20      	adds	r0, r4, #0
    1b12:	3024      	adds	r0, #36	; 0x24
    1b14:	4b33      	ldr	r3, [pc, #204]	; (1be4 <xQueueGenericReceive+0x148>)
    1b16:	4798      	blx	r3
    1b18:	2800      	cmp	r0, #0
    1b1a:	d001      	beq.n	1b20 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1b1c:	4b32      	ldr	r3, [pc, #200]	; (1be8 <xQueueGenericReceive+0x14c>)
    1b1e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
    1b20:	4b32      	ldr	r3, [pc, #200]	; (1bec <xQueueGenericReceive+0x150>)
    1b22:	4798      	blx	r3
				return pdPASS;
    1b24:	2001      	movs	r0, #1
    1b26:	e052      	b.n	1bce <xQueueGenericReceive+0x132>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1b28:	9b01      	ldr	r3, [sp, #4]
    1b2a:	2b00      	cmp	r3, #0
    1b2c:	d103      	bne.n	1b36 <xQueueGenericReceive+0x9a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1b2e:	4b2f      	ldr	r3, [pc, #188]	; (1bec <xQueueGenericReceive+0x150>)
    1b30:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1b32:	2000      	movs	r0, #0
    1b34:	e04b      	b.n	1bce <xQueueGenericReceive+0x132>
				}
				else if( xEntryTimeSet == pdFALSE )
    1b36:	2f00      	cmp	r7, #0
    1b38:	d103      	bne.n	1b42 <xQueueGenericReceive+0xa6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1b3a:	a802      	add	r0, sp, #8
    1b3c:	4b2c      	ldr	r3, [pc, #176]	; (1bf0 <xQueueGenericReceive+0x154>)
    1b3e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    1b40:	3701      	adds	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
    1b42:	4b2a      	ldr	r3, [pc, #168]	; (1bec <xQueueGenericReceive+0x150>)
    1b44:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1b46:	4b2b      	ldr	r3, [pc, #172]	; (1bf4 <xQueueGenericReceive+0x158>)
    1b48:	4798      	blx	r3
		prvLockQueue( pxQueue );
    1b4a:	4b23      	ldr	r3, [pc, #140]	; (1bd8 <xQueueGenericReceive+0x13c>)
    1b4c:	4798      	blx	r3
    1b4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1b50:	3301      	adds	r3, #1
    1b52:	d101      	bne.n	1b58 <xQueueGenericReceive+0xbc>
    1b54:	2300      	movs	r3, #0
    1b56:	6463      	str	r3, [r4, #68]	; 0x44
    1b58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1b5a:	3301      	adds	r3, #1
    1b5c:	d101      	bne.n	1b62 <xQueueGenericReceive+0xc6>
    1b5e:	2300      	movs	r3, #0
    1b60:	64a3      	str	r3, [r4, #72]	; 0x48
    1b62:	4b22      	ldr	r3, [pc, #136]	; (1bec <xQueueGenericReceive+0x150>)
    1b64:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1b66:	a802      	add	r0, sp, #8
    1b68:	a901      	add	r1, sp, #4
    1b6a:	4b23      	ldr	r3, [pc, #140]	; (1bf8 <xQueueGenericReceive+0x15c>)
    1b6c:	4798      	blx	r3
    1b6e:	2800      	cmp	r0, #0
    1b70:	d127      	bne.n	1bc2 <xQueueGenericReceive+0x126>

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1b72:	4b19      	ldr	r3, [pc, #100]	; (1bd8 <xQueueGenericReceive+0x13c>)
    1b74:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == 0 )
    1b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1b78:	4699      	mov	r9, r3
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1b7a:	4b1c      	ldr	r3, [pc, #112]	; (1bec <xQueueGenericReceive+0x150>)
    1b7c:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b7e:	464b      	mov	r3, r9
    1b80:	2b00      	cmp	r3, #0
    1b82:	d118      	bne.n	1bb6 <xQueueGenericReceive+0x11a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1b84:	6823      	ldr	r3, [r4, #0]
    1b86:	2b00      	cmp	r3, #0
    1b88:	d106      	bne.n	1b98 <xQueueGenericReceive+0xfc>
					{
						portENTER_CRITICAL();
    1b8a:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <xQueueGenericReceive+0x13c>)
    1b8c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1b8e:	6860      	ldr	r0, [r4, #4]
    1b90:	4b1a      	ldr	r3, [pc, #104]	; (1bfc <xQueueGenericReceive+0x160>)
    1b92:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
    1b94:	4b15      	ldr	r3, [pc, #84]	; (1bec <xQueueGenericReceive+0x150>)
    1b96:	4798      	blx	r3
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1b98:	1c20      	adds	r0, r4, #0
    1b9a:	3024      	adds	r0, #36	; 0x24
    1b9c:	9901      	ldr	r1, [sp, #4]
    1b9e:	4b18      	ldr	r3, [pc, #96]	; (1c00 <xQueueGenericReceive+0x164>)
    1ba0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    1ba2:	1c20      	adds	r0, r4, #0
    1ba4:	4b17      	ldr	r3, [pc, #92]	; (1c04 <xQueueGenericReceive+0x168>)
    1ba6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    1ba8:	4b17      	ldr	r3, [pc, #92]	; (1c08 <xQueueGenericReceive+0x16c>)
    1baa:	4798      	blx	r3
    1bac:	2800      	cmp	r0, #0
    1bae:	d18b      	bne.n	1ac8 <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    1bb0:	4b0d      	ldr	r3, [pc, #52]	; (1be8 <xQueueGenericReceive+0x14c>)
    1bb2:	4798      	blx	r3
    1bb4:	e788      	b.n	1ac8 <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1bb6:	1c20      	adds	r0, r4, #0
    1bb8:	4b12      	ldr	r3, [pc, #72]	; (1c04 <xQueueGenericReceive+0x168>)
    1bba:	4798      	blx	r3
				( void ) xTaskResumeAll();
    1bbc:	4b12      	ldr	r3, [pc, #72]	; (1c08 <xQueueGenericReceive+0x16c>)
    1bbe:	4798      	blx	r3
    1bc0:	e782      	b.n	1ac8 <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1bc2:	1c20      	adds	r0, r4, #0
    1bc4:	4b0f      	ldr	r3, [pc, #60]	; (1c04 <xQueueGenericReceive+0x168>)
    1bc6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    1bc8:	4b0f      	ldr	r3, [pc, #60]	; (1c08 <xQueueGenericReceive+0x16c>)
    1bca:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1bcc:	2000      	movs	r0, #0
		}
	}
}
    1bce:	b004      	add	sp, #16
    1bd0:	bc04      	pop	{r2}
    1bd2:	4691      	mov	r9, r2
    1bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	00002539 	.word	0x00002539
    1bdc:	00001781 	.word	0x00001781
    1be0:	000023e9 	.word	0x000023e9
    1be4:	000022d1 	.word	0x000022d1
    1be8:	00002521 	.word	0x00002521
    1bec:	00002551 	.word	0x00002551
    1bf0:	0000234d 	.word	0x0000234d
    1bf4:	00001f59 	.word	0x00001f59
    1bf8:	0000236d 	.word	0x0000236d
    1bfc:	000023f5 	.word	0x000023f5
    1c00:	00002291 	.word	0x00002291
    1c04:	000017a9 	.word	0x000017a9
    1c08:	000020a5 	.word	0x000020a5

00001c0c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1c0c:	1c03      	adds	r3, r0, #0
    1c0e:	3308      	adds	r3, #8
    1c10:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1c12:	2201      	movs	r2, #1
    1c14:	4252      	negs	r2, r2
    1c16:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1c18:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1c1a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    1c1c:	2300      	movs	r3, #0
    1c1e:	6003      	str	r3, [r0, #0]
}
    1c20:	4770      	bx	lr
    1c22:	46c0      	nop			; (mov r8, r8)

00001c24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1c24:	2300      	movs	r3, #0
    1c26:	6103      	str	r3, [r0, #16]
}
    1c28:	4770      	bx	lr
    1c2a:	46c0      	nop			; (mov r8, r8)

00001c2c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    1c2c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
    1c2e:	685a      	ldr	r2, [r3, #4]
    1c30:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    1c32:	6842      	ldr	r2, [r0, #4]
    1c34:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1c36:	685a      	ldr	r2, [r3, #4]
    1c38:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    1c3a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    1c3c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1c3e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1c40:	6803      	ldr	r3, [r0, #0]
    1c42:	3301      	adds	r3, #1
    1c44:	6003      	str	r3, [r0, #0]
}
    1c46:	4770      	bx	lr

00001c48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1c48:	b510      	push	{r4, lr}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1c4a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1c4c:	1c63      	adds	r3, r4, #1
    1c4e:	d101      	bne.n	1c54 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1c50:	6903      	ldr	r3, [r0, #16]
    1c52:	e00a      	b.n	1c6a <vListInsert+0x22>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1c54:	1c03      	adds	r3, r0, #0
    1c56:	3308      	adds	r3, #8
    1c58:	68c2      	ldr	r2, [r0, #12]
    1c5a:	6812      	ldr	r2, [r2, #0]
    1c5c:	4294      	cmp	r4, r2
    1c5e:	d304      	bcc.n	1c6a <vListInsert+0x22>
    1c60:	685b      	ldr	r3, [r3, #4]
    1c62:	685a      	ldr	r2, [r3, #4]
    1c64:	6812      	ldr	r2, [r2, #0]
    1c66:	4294      	cmp	r4, r2
    1c68:	d2fa      	bcs.n	1c60 <vListInsert+0x18>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1c6a:	685a      	ldr	r2, [r3, #4]
    1c6c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    1c6e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
    1c70:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    1c72:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1c74:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    1c76:	6803      	ldr	r3, [r0, #0]
    1c78:	3301      	adds	r3, #1
    1c7a:	6003      	str	r3, [r0, #0]
}
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)

00001c80 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1c80:	6843      	ldr	r3, [r0, #4]
    1c82:	6882      	ldr	r2, [r0, #8]
    1c84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1c86:	6883      	ldr	r3, [r0, #8]
    1c88:	6842      	ldr	r2, [r0, #4]
    1c8a:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    1c8c:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1c8e:	685a      	ldr	r2, [r3, #4]
    1c90:	4282      	cmp	r2, r0
    1c92:	d101      	bne.n	1c98 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1c94:	6882      	ldr	r2, [r0, #8]
    1c96:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    1c98:	2200      	movs	r2, #0
    1c9a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    1c9c:	681a      	ldr	r2, [r3, #0]
    1c9e:	3a01      	subs	r2, #1
    1ca0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    1ca2:	6818      	ldr	r0, [r3, #0]
}
    1ca4:	4770      	bx	lr
    1ca6:	46c0      	nop			; (mov r8, r8)

00001ca8 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    1ca8:	b510      	push	{r4, lr}
    1caa:	1e04      	subs	r4, r0, #0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1cac:	4b0e      	ldr	r3, [pc, #56]	; (1ce8 <prvAddCurrentTaskToDelayedList+0x40>)
    1cae:	681b      	ldr	r3, [r3, #0]
    1cb0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
    1cb2:	4b0e      	ldr	r3, [pc, #56]	; (1cec <prvAddCurrentTaskToDelayedList+0x44>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	429c      	cmp	r4, r3
    1cb8:	d207      	bcs.n	1cca <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1cba:	4b0d      	ldr	r3, [pc, #52]	; (1cf0 <prvAddCurrentTaskToDelayedList+0x48>)
    1cbc:	6818      	ldr	r0, [r3, #0]
    1cbe:	4b0a      	ldr	r3, [pc, #40]	; (1ce8 <prvAddCurrentTaskToDelayedList+0x40>)
    1cc0:	6819      	ldr	r1, [r3, #0]
    1cc2:	3104      	adds	r1, #4
    1cc4:	4b0b      	ldr	r3, [pc, #44]	; (1cf4 <prvAddCurrentTaskToDelayedList+0x4c>)
    1cc6:	4798      	blx	r3
    1cc8:	e00c      	b.n	1ce4 <prvAddCurrentTaskToDelayedList+0x3c>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1cca:	4b0b      	ldr	r3, [pc, #44]	; (1cf8 <prvAddCurrentTaskToDelayedList+0x50>)
    1ccc:	6818      	ldr	r0, [r3, #0]
    1cce:	4b06      	ldr	r3, [pc, #24]	; (1ce8 <prvAddCurrentTaskToDelayedList+0x40>)
    1cd0:	6819      	ldr	r1, [r3, #0]
    1cd2:	3104      	adds	r1, #4
    1cd4:	4b07      	ldr	r3, [pc, #28]	; (1cf4 <prvAddCurrentTaskToDelayedList+0x4c>)
    1cd6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1cd8:	4b08      	ldr	r3, [pc, #32]	; (1cfc <prvAddCurrentTaskToDelayedList+0x54>)
    1cda:	681b      	ldr	r3, [r3, #0]
    1cdc:	429c      	cmp	r4, r3
    1cde:	d201      	bcs.n	1ce4 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1ce0:	4b06      	ldr	r3, [pc, #24]	; (1cfc <prvAddCurrentTaskToDelayedList+0x54>)
    1ce2:	601c      	str	r4, [r3, #0]
		}
	}
}
    1ce4:	bd10      	pop	{r4, pc}
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	20000750 	.word	0x20000750
    1cec:	20000768 	.word	0x20000768
    1cf0:	2000076c 	.word	0x2000076c
    1cf4:	00001c49 	.word	0x00001c49
    1cf8:	200006b4 	.word	0x200006b4
    1cfc:	200000c4 	.word	0x200000c4

00001d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    1d00:	b538      	push	{r3, r4, r5, lr}
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    1d02:	4d02      	ldr	r5, [pc, #8]	; (1d0c <prvIdleTask+0xc>)
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1d04:	4c02      	ldr	r4, [pc, #8]	; (1d10 <prvIdleTask+0x10>)
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    1d06:	47a8      	blx	r5
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1d08:	47a0      	blx	r4
				}
				xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    1d0a:	e7fc      	b.n	1d06 <prvIdleTask+0x6>
    1d0c:	00002521 	.word	0x00002521
    1d10:	000015b9 	.word	0x000015b9

00001d14 <xTaskGenericCreate>:
#endif

/*lint +e956 */

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d16:	464f      	mov	r7, r9
    1d18:	4646      	mov	r6, r8
    1d1a:	b4c0      	push	{r6, r7}
    1d1c:	b085      	sub	sp, #20
    1d1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
    1d20:	2800      	cmp	r0, #0
    1d22:	d101      	bne.n	1d28 <xTaskGenericCreate+0x14>
    1d24:	b672      	cpsid	i
    1d26:	e7fe      	b.n	1d26 <xTaskGenericCreate+0x12>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
    1d28:	2c05      	cmp	r4, #5
    1d2a:	d901      	bls.n	1d30 <xTaskGenericCreate+0x1c>
    1d2c:	b672      	cpsid	i
    1d2e:	e7fe      	b.n	1d2e <xTaskGenericCreate+0x1a>
    1d30:	9303      	str	r3, [sp, #12]
    1d32:	1c16      	adds	r6, r2, #0
    1d34:	1c0f      	adds	r7, r1, #0
    1d36:	9002      	str	r0, [sp, #8]
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    1d38:	2040      	movs	r0, #64	; 0x40
    1d3a:	4b59      	ldr	r3, [pc, #356]	; (1ea0 <xTaskGenericCreate+0x18c>)
    1d3c:	4798      	blx	r3
    1d3e:	1e05      	subs	r5, r0, #0

	if( pxNewTCB != NULL )
    1d40:	d100      	bne.n	1d44 <xTaskGenericCreate+0x30>
    1d42:	e0a5      	b.n	1e90 <xTaskGenericCreate+0x17c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1d46:	2b00      	cmp	r3, #0
    1d48:	d000      	beq.n	1d4c <xTaskGenericCreate+0x38>
    1d4a:	e09d      	b.n	1e88 <xTaskGenericCreate+0x174>
    1d4c:	00b0      	lsls	r0, r6, #2
    1d4e:	4b54      	ldr	r3, [pc, #336]	; (1ea0 <xTaskGenericCreate+0x18c>)
    1d50:	4798      	blx	r3
    1d52:	6328      	str	r0, [r5, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    1d54:	2800      	cmp	r0, #0
    1d56:	d103      	bne.n	1d60 <xTaskGenericCreate+0x4c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    1d58:	1c28      	adds	r0, r5, #0
    1d5a:	4b52      	ldr	r3, [pc, #328]	; (1ea4 <xTaskGenericCreate+0x190>)
    1d5c:	4798      	blx	r3
    1d5e:	e097      	b.n	1e90 <xTaskGenericCreate+0x17c>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    1d60:	00b2      	lsls	r2, r6, #2
    1d62:	21a5      	movs	r1, #165	; 0xa5
    1d64:	4b50      	ldr	r3, [pc, #320]	; (1ea8 <xTaskGenericCreate+0x194>)
    1d66:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1d68:	4b50      	ldr	r3, [pc, #320]	; (1eac <xTaskGenericCreate+0x198>)
    1d6a:	18f3      	adds	r3, r6, r3
    1d6c:	009b      	lsls	r3, r3, #2
    1d6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    1d70:	4694      	mov	ip, r2
    1d72:	4463      	add	r3, ip
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    1d74:	2207      	movs	r2, #7
    1d76:	4393      	bics	r3, r2
    1d78:	4698      	mov	r8, r3
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    1d7a:	1c28      	adds	r0, r5, #0
    1d7c:	3034      	adds	r0, #52	; 0x34
    1d7e:	1c39      	adds	r1, r7, #0
    1d80:	3201      	adds	r2, #1
    1d82:	4b4b      	ldr	r3, [pc, #300]	; (1eb0 <xTaskGenericCreate+0x19c>)
    1d84:	4798      	blx	r3
	}
	#endif /* configMAX_TASK_NAME_LEN */
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    1d86:	2200      	movs	r2, #0
    1d88:	233b      	movs	r3, #59	; 0x3b
    1d8a:	54ea      	strb	r2, [r5, r3]
    1d8c:	1e27      	subs	r7, r4, #0
    1d8e:	2f05      	cmp	r7, #5
    1d90:	d900      	bls.n	1d94 <xTaskGenericCreate+0x80>
    1d92:	2705      	movs	r7, #5
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    1d94:	62ef      	str	r7, [r5, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1d96:	63ef      	str	r7, [r5, #60]	; 0x3c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1d98:	1d2b      	adds	r3, r5, #4
    1d9a:	9301      	str	r3, [sp, #4]
    1d9c:	1c18      	adds	r0, r3, #0
    1d9e:	4e45      	ldr	r6, [pc, #276]	; (1eb4 <xTaskGenericCreate+0x1a0>)
    1da0:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1da2:	1c28      	adds	r0, r5, #0
    1da4:	3018      	adds	r0, #24
    1da6:	47b0      	blx	r6

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1da8:	612d      	str	r5, [r5, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    1daa:	2306      	movs	r3, #6
    1dac:	1bdb      	subs	r3, r3, r7
    1dae:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1db0:	626d      	str	r5, [r5, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1db2:	4640      	mov	r0, r8
    1db4:	9902      	ldr	r1, [sp, #8]
    1db6:	9a03      	ldr	r2, [sp, #12]
    1db8:	4b3f      	ldr	r3, [pc, #252]	; (1eb8 <xTaskGenericCreate+0x1a4>)
    1dba:	4798      	blx	r3
    1dbc:	6028      	str	r0, [r5, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    1dbe:	0743      	lsls	r3, r0, #29
    1dc0:	d001      	beq.n	1dc6 <xTaskGenericCreate+0xb2>
    1dc2:	b672      	cpsid	i
    1dc4:	e7fe      	b.n	1dc4 <xTaskGenericCreate+0xb0>

		if( ( void * ) pxCreatedTask != NULL )
    1dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d000      	beq.n	1dce <xTaskGenericCreate+0xba>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1dcc:	601d      	str	r5, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1dce:	4b3b      	ldr	r3, [pc, #236]	; (1ebc <xTaskGenericCreate+0x1a8>)
    1dd0:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
    1dd2:	4a3b      	ldr	r2, [pc, #236]	; (1ec0 <xTaskGenericCreate+0x1ac>)
    1dd4:	6813      	ldr	r3, [r2, #0]
    1dd6:	3301      	adds	r3, #1
    1dd8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
    1dda:	4b3a      	ldr	r3, [pc, #232]	; (1ec4 <xTaskGenericCreate+0x1b0>)
    1ddc:	681b      	ldr	r3, [r3, #0]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d11e      	bne.n	1e20 <xTaskGenericCreate+0x10c>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1de2:	4b38      	ldr	r3, [pc, #224]	; (1ec4 <xTaskGenericCreate+0x1b0>)
    1de4:	601d      	str	r5, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    1de6:	6813      	ldr	r3, [r2, #0]
    1de8:	2b01      	cmp	r3, #1
    1dea:	d124      	bne.n	1e36 <xTaskGenericCreate+0x122>
    1dec:	4e36      	ldr	r6, [pc, #216]	; (1ec8 <xTaskGenericCreate+0x1b4>)
    1dee:	3377      	adds	r3, #119	; 0x77
    1df0:	4699      	mov	r9, r3
    1df2:	44b1      	add	r9, r6
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    1df4:	4f35      	ldr	r7, [pc, #212]	; (1ecc <xTaskGenericCreate+0x1b8>)
    1df6:	1c30      	adds	r0, r6, #0
    1df8:	47b8      	blx	r7
    1dfa:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    1dfc:	454e      	cmp	r6, r9
    1dfe:	d1fa      	bne.n	1df6 <xTaskGenericCreate+0xe2>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    1e00:	4b33      	ldr	r3, [pc, #204]	; (1ed0 <xTaskGenericCreate+0x1bc>)
    1e02:	4699      	mov	r9, r3
    1e04:	1c18      	adds	r0, r3, #0
    1e06:	4e31      	ldr	r6, [pc, #196]	; (1ecc <xTaskGenericCreate+0x1b8>)
    1e08:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    1e0a:	4f32      	ldr	r7, [pc, #200]	; (1ed4 <xTaskGenericCreate+0x1c0>)
    1e0c:	1c38      	adds	r0, r7, #0
    1e0e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
    1e10:	4831      	ldr	r0, [pc, #196]	; (1ed8 <xTaskGenericCreate+0x1c4>)
    1e12:	47b0      	blx	r6
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1e14:	4b31      	ldr	r3, [pc, #196]	; (1edc <xTaskGenericCreate+0x1c8>)
    1e16:	464a      	mov	r2, r9
    1e18:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1e1a:	4b31      	ldr	r3, [pc, #196]	; (1ee0 <xTaskGenericCreate+0x1cc>)
    1e1c:	601f      	str	r7, [r3, #0]
    1e1e:	e00a      	b.n	1e36 <xTaskGenericCreate+0x122>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1e20:	4b30      	ldr	r3, [pc, #192]	; (1ee4 <xTaskGenericCreate+0x1d0>)
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	2b00      	cmp	r3, #0
    1e26:	d106      	bne.n	1e36 <xTaskGenericCreate+0x122>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    1e28:	4b26      	ldr	r3, [pc, #152]	; (1ec4 <xTaskGenericCreate+0x1b0>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e2e:	429c      	cmp	r4, r3
    1e30:	d301      	bcc.n	1e36 <xTaskGenericCreate+0x122>
					{
						pxCurrentTCB = pxNewTCB;
    1e32:	4b24      	ldr	r3, [pc, #144]	; (1ec4 <xTaskGenericCreate+0x1b0>)
    1e34:	601d      	str	r5, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1e36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    1e38:	4a2b      	ldr	r2, [pc, #172]	; (1ee8 <xTaskGenericCreate+0x1d4>)
    1e3a:	6812      	ldr	r2, [r2, #0]
    1e3c:	4293      	cmp	r3, r2
    1e3e:	d901      	bls.n	1e44 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1e40:	4a29      	ldr	r2, [pc, #164]	; (1ee8 <xTaskGenericCreate+0x1d4>)
    1e42:	6013      	str	r3, [r2, #0]
			}

			uxTaskNumber++;
    1e44:	4929      	ldr	r1, [pc, #164]	; (1eec <xTaskGenericCreate+0x1d8>)
    1e46:	680a      	ldr	r2, [r1, #0]
    1e48:	3201      	adds	r2, #1
    1e4a:	600a      	str	r2, [r1, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyQueue( pxNewTCB );
    1e4c:	4a28      	ldr	r2, [pc, #160]	; (1ef0 <xTaskGenericCreate+0x1dc>)
    1e4e:	6812      	ldr	r2, [r2, #0]
    1e50:	4293      	cmp	r3, r2
    1e52:	d901      	bls.n	1e58 <xTaskGenericCreate+0x144>
    1e54:	4a26      	ldr	r2, [pc, #152]	; (1ef0 <xTaskGenericCreate+0x1dc>)
    1e56:	6013      	str	r3, [r2, #0]
    1e58:	0098      	lsls	r0, r3, #2
    1e5a:	18c3      	adds	r3, r0, r3
    1e5c:	009b      	lsls	r3, r3, #2
    1e5e:	481a      	ldr	r0, [pc, #104]	; (1ec8 <xTaskGenericCreate+0x1b4>)
    1e60:	18c0      	adds	r0, r0, r3
    1e62:	9901      	ldr	r1, [sp, #4]
    1e64:	4b23      	ldr	r3, [pc, #140]	; (1ef4 <xTaskGenericCreate+0x1e0>)
    1e66:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1e68:	4b23      	ldr	r3, [pc, #140]	; (1ef8 <xTaskGenericCreate+0x1e4>)
    1e6a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1e6c:	4b1d      	ldr	r3, [pc, #116]	; (1ee4 <xTaskGenericCreate+0x1d0>)
    1e6e:	681b      	ldr	r3, [r3, #0]
    1e70:	2001      	movs	r0, #1
    1e72:	2b00      	cmp	r3, #0
    1e74:	d00e      	beq.n	1e94 <xTaskGenericCreate+0x180>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1e76:	4b13      	ldr	r3, [pc, #76]	; (1ec4 <xTaskGenericCreate+0x1b0>)
    1e78:	681b      	ldr	r3, [r3, #0]
    1e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e7c:	429c      	cmp	r4, r3
    1e7e:	d909      	bls.n	1e94 <xTaskGenericCreate+0x180>
			{
				portYIELD_WITHIN_API();
    1e80:	4b1e      	ldr	r3, [pc, #120]	; (1efc <xTaskGenericCreate+0x1e8>)
    1e82:	4798      	blx	r3
    1e84:	2001      	movs	r0, #1
    1e86:	e005      	b.n	1e94 <xTaskGenericCreate+0x180>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    1e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1e8a:	6303      	str	r3, [r0, #48]	; 0x30
    1e8c:	1c18      	adds	r0, r3, #0
    1e8e:	e767      	b.n	1d60 <xTaskGenericCreate+0x4c>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1e90:	2001      	movs	r0, #1
    1e92:	4240      	negs	r0, r0
			}
		}
	}

	return xReturn;
}
    1e94:	b005      	add	sp, #20
    1e96:	bc0c      	pop	{r2, r3}
    1e98:	4690      	mov	r8, r2
    1e9a:	4699      	mov	r9, r3
    1e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	0000262d 	.word	0x0000262d
    1ea4:	00002695 	.word	0x00002695
    1ea8:	000094e9 	.word	0x000094e9
    1eac:	3fffffff 	.word	0x3fffffff
    1eb0:	0000ae3f 	.word	0x0000ae3f
    1eb4:	00001c25 	.word	0x00001c25
    1eb8:	000024e1 	.word	0x000024e1
    1ebc:	00002539 	.word	0x00002539
    1ec0:	20000790 	.word	0x20000790
    1ec4:	20000750 	.word	0x20000750
    1ec8:	200006d4 	.word	0x200006d4
    1ecc:	00001c0d 	.word	0x00001c0d
    1ed0:	20000778 	.word	0x20000778
    1ed4:	200006c0 	.word	0x200006c0
    1ed8:	20000754 	.word	0x20000754
    1edc:	200006b4 	.word	0x200006b4
    1ee0:	2000076c 	.word	0x2000076c
    1ee4:	200006b8 	.word	0x200006b8
    1ee8:	20000794 	.word	0x20000794
    1eec:	20000774 	.word	0x20000774
    1ef0:	20000770 	.word	0x20000770
    1ef4:	00001c2d 	.word	0x00001c2d
    1ef8:	00002551 	.word	0x00002551
    1efc:	00002521 	.word	0x00002521

00001f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    1f00:	b510      	push	{r4, lr}
    1f02:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    1f04:	2300      	movs	r3, #0
    1f06:	9300      	str	r3, [sp, #0]
    1f08:	9301      	str	r3, [sp, #4]
    1f0a:	9302      	str	r3, [sp, #8]
    1f0c:	9303      	str	r3, [sp, #12]
    1f0e:	480c      	ldr	r0, [pc, #48]	; (1f40 <vTaskStartScheduler+0x40>)
    1f10:	490c      	ldr	r1, [pc, #48]	; (1f44 <vTaskStartScheduler+0x44>)
    1f12:	2296      	movs	r2, #150	; 0x96
    1f14:	0052      	lsls	r2, r2, #1
    1f16:	4c0c      	ldr	r4, [pc, #48]	; (1f48 <vTaskStartScheduler+0x48>)
    1f18:	47a0      	blx	r4
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1f1a:	2801      	cmp	r0, #1
    1f1c:	d109      	bne.n	1f32 <vTaskStartScheduler+0x32>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1f1e:	b672      	cpsid	i

		xSchedulerRunning = pdTRUE;
    1f20:	2201      	movs	r2, #1
    1f22:	4b0a      	ldr	r3, [pc, #40]	; (1f4c <vTaskStartScheduler+0x4c>)
    1f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    1f26:	2200      	movs	r2, #0
    1f28:	4b09      	ldr	r3, [pc, #36]	; (1f50 <vTaskStartScheduler+0x50>)
    1f2a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1f2c:	4b09      	ldr	r3, [pc, #36]	; (1f54 <vTaskStartScheduler+0x54>)
    1f2e:	4798      	blx	r3
    1f30:	e003      	b.n	1f3a <vTaskStartScheduler+0x3a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
    1f32:	2800      	cmp	r0, #0
    1f34:	d101      	bne.n	1f3a <vTaskStartScheduler+0x3a>
    1f36:	b672      	cpsid	i
    1f38:	e7fe      	b.n	1f38 <vTaskStartScheduler+0x38>
	}
}
    1f3a:	b004      	add	sp, #16
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001d01 	.word	0x00001d01
    1f44:	0000e624 	.word	0x0000e624
    1f48:	00001d15 	.word	0x00001d15
    1f4c:	200006b8 	.word	0x200006b8
    1f50:	20000768 	.word	0x20000768
    1f54:	000025f1 	.word	0x000025f1

00001f58 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1f58:	4a02      	ldr	r2, [pc, #8]	; (1f64 <vTaskSuspendAll+0xc>)
    1f5a:	6813      	ldr	r3, [r2, #0]
    1f5c:	3301      	adds	r3, #1
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	4770      	bx	lr
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	2000074c 	.word	0x2000074c

00001f68 <xTaskGetTickCount>:
	return xAlreadyYielded;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
    1f68:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1f6a:	4b04      	ldr	r3, [pc, #16]	; (1f7c <xTaskGetTickCount+0x14>)
    1f6c:	4798      	blx	r3
	{
		xTicks = xTickCount;
    1f6e:	4b04      	ldr	r3, [pc, #16]	; (1f80 <xTaskGetTickCount+0x18>)
    1f70:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
    1f72:	4b04      	ldr	r3, [pc, #16]	; (1f84 <xTaskGetTickCount+0x1c>)
    1f74:	4798      	blx	r3

	return xTicks;
}
    1f76:	1c20      	adds	r0, r4, #0
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	00002539 	.word	0x00002539
    1f80:	20000768 	.word	0x20000768
    1f84:	00002551 	.word	0x00002551

00001f88 <vTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1f8a:	4b3b      	ldr	r3, [pc, #236]	; (2078 <STACK_SIZE+0x78>)
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d16d      	bne.n	206e <STACK_SIZE+0x6e>
	{
		++xTickCount;
    1f92:	4b3a      	ldr	r3, [pc, #232]	; (207c <STACK_SIZE+0x7c>)
    1f94:	681a      	ldr	r2, [r3, #0]
    1f96:	3201      	adds	r2, #1
    1f98:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    1f9a:	681b      	ldr	r3, [r3, #0]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d120      	bne.n	1fe2 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
    1fa0:	4b37      	ldr	r3, [pc, #220]	; (2080 <STACK_SIZE+0x80>)
    1fa2:	681b      	ldr	r3, [r3, #0]
    1fa4:	681b      	ldr	r3, [r3, #0]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d001      	beq.n	1fae <vTaskIncrementTick+0x26>
    1faa:	b672      	cpsid	i
    1fac:	e7fe      	b.n	1fac <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
    1fae:	4b34      	ldr	r3, [pc, #208]	; (2080 <STACK_SIZE+0x80>)
    1fb0:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    1fb2:	4a34      	ldr	r2, [pc, #208]	; (2084 <STACK_SIZE+0x84>)
    1fb4:	6810      	ldr	r0, [r2, #0]
    1fb6:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    1fb8:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
    1fba:	4933      	ldr	r1, [pc, #204]	; (2088 <STACK_SIZE+0x88>)
    1fbc:	680a      	ldr	r2, [r1, #0]
    1fbe:	3201      	adds	r2, #1
    1fc0:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1fc2:	681b      	ldr	r3, [r3, #0]
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d104      	bne.n	1fd4 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    1fca:	2201      	movs	r2, #1
    1fcc:	4252      	negs	r2, r2
    1fce:	4b2f      	ldr	r3, [pc, #188]	; (208c <STACK_SIZE+0x8c>)
    1fd0:	601a      	str	r2, [r3, #0]
    1fd2:	e006      	b.n	1fe2 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1fd4:	4b2a      	ldr	r3, [pc, #168]	; (2080 <STACK_SIZE+0x80>)
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	68db      	ldr	r3, [r3, #12]
    1fda:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1fdc:	685a      	ldr	r2, [r3, #4]
    1fde:	4b2b      	ldr	r3, [pc, #172]	; (208c <STACK_SIZE+0x8c>)
    1fe0:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1fe2:	4b26      	ldr	r3, [pc, #152]	; (207c <STACK_SIZE+0x7c>)
    1fe4:	681a      	ldr	r2, [r3, #0]
    1fe6:	4b29      	ldr	r3, [pc, #164]	; (208c <STACK_SIZE+0x8c>)
    1fe8:	681b      	ldr	r3, [r3, #0]
    1fea:	429a      	cmp	r2, r3
    1fec:	d343      	bcc.n	2076 <STACK_SIZE+0x76>
    1fee:	4b24      	ldr	r3, [pc, #144]	; (2080 <STACK_SIZE+0x80>)
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d00b      	beq.n	2010 <STACK_SIZE+0x10>
    1ff8:	4b21      	ldr	r3, [pc, #132]	; (2080 <STACK_SIZE+0x80>)
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	68db      	ldr	r3, [r3, #12]
    1ffe:	68dd      	ldr	r5, [r3, #12]
    2000:	686b      	ldr	r3, [r5, #4]
    2002:	4a1e      	ldr	r2, [pc, #120]	; (207c <STACK_SIZE+0x7c>)
    2004:	6812      	ldr	r2, [r2, #0]
    2006:	4293      	cmp	r3, r2
    2008:	d810      	bhi.n	202c <STACK_SIZE+0x2c>
    200a:	4f21      	ldr	r7, [pc, #132]	; (2090 <STACK_SIZE+0x90>)
    200c:	4e21      	ldr	r6, [pc, #132]	; (2094 <STACK_SIZE+0x94>)
    200e:	e010      	b.n	2032 <STACK_SIZE+0x32>
    2010:	2201      	movs	r2, #1
    2012:	4252      	negs	r2, r2
    2014:	4b1d      	ldr	r3, [pc, #116]	; (208c <STACK_SIZE+0x8c>)
    2016:	601a      	str	r2, [r3, #0]
    2018:	e02d      	b.n	2076 <STACK_SIZE+0x76>
    201a:	4b19      	ldr	r3, [pc, #100]	; (2080 <STACK_SIZE+0x80>)
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	68db      	ldr	r3, [r3, #12]
    2020:	68dd      	ldr	r5, [r3, #12]
    2022:	686b      	ldr	r3, [r5, #4]
    2024:	4a15      	ldr	r2, [pc, #84]	; (207c <STACK_SIZE+0x7c>)
    2026:	6812      	ldr	r2, [r2, #0]
    2028:	4293      	cmp	r3, r2
    202a:	d902      	bls.n	2032 <STACK_SIZE+0x32>
    202c:	4a17      	ldr	r2, [pc, #92]	; (208c <STACK_SIZE+0x8c>)
    202e:	6013      	str	r3, [r2, #0]
    2030:	e021      	b.n	2076 <STACK_SIZE+0x76>
    2032:	1d2c      	adds	r4, r5, #4
    2034:	1c20      	adds	r0, r4, #0
    2036:	47b8      	blx	r7
    2038:	6aab      	ldr	r3, [r5, #40]	; 0x28
    203a:	2b00      	cmp	r3, #0
    203c:	d003      	beq.n	2046 <STACK_SIZE+0x46>
    203e:	1c28      	adds	r0, r5, #0
    2040:	3018      	adds	r0, #24
    2042:	4b13      	ldr	r3, [pc, #76]	; (2090 <STACK_SIZE+0x90>)
    2044:	4798      	blx	r3
    2046:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    2048:	6832      	ldr	r2, [r6, #0]
    204a:	4293      	cmp	r3, r2
    204c:	d901      	bls.n	2052 <STACK_SIZE+0x52>
    204e:	4a11      	ldr	r2, [pc, #68]	; (2094 <STACK_SIZE+0x94>)
    2050:	6013      	str	r3, [r2, #0]
    2052:	0098      	lsls	r0, r3, #2
    2054:	18c3      	adds	r3, r0, r3
    2056:	009b      	lsls	r3, r3, #2
    2058:	480f      	ldr	r0, [pc, #60]	; (2098 <STACK_SIZE+0x98>)
    205a:	18c0      	adds	r0, r0, r3
    205c:	1c21      	adds	r1, r4, #0
    205e:	4b0f      	ldr	r3, [pc, #60]	; (209c <STACK_SIZE+0x9c>)
    2060:	4798      	blx	r3
    2062:	4b07      	ldr	r3, [pc, #28]	; (2080 <STACK_SIZE+0x80>)
    2064:	681b      	ldr	r3, [r3, #0]
    2066:	681b      	ldr	r3, [r3, #0]
    2068:	2b00      	cmp	r3, #0
    206a:	d1d6      	bne.n	201a <STACK_SIZE+0x1a>
    206c:	e7d0      	b.n	2010 <STACK_SIZE+0x10>
	}
	else
	{
		++uxMissedTicks;
    206e:	4a0c      	ldr	r2, [pc, #48]	; (20a0 <STACK_SIZE+0xa0>)
    2070:	6813      	ldr	r3, [r2, #0]
    2072:	3301      	adds	r3, #1
    2074:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif /* configUSE_TICK_HOOK */
}
    2076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2078:	2000074c 	.word	0x2000074c
    207c:	20000768 	.word	0x20000768
    2080:	200006b4 	.word	0x200006b4
    2084:	2000076c 	.word	0x2000076c
    2088:	200006bc 	.word	0x200006bc
    208c:	200000c4 	.word	0x200000c4
    2090:	00001c81 	.word	0x00001c81
    2094:	20000770 	.word	0x20000770
    2098:	200006d4 	.word	0x200006d4
    209c:	00001c2d 	.word	0x00001c2d
    20a0:	200006b0 	.word	0x200006b0

000020a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    20a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    20a6:	4b2f      	ldr	r3, [pc, #188]	; (2164 <xTaskResumeAll+0xc0>)
    20a8:	681b      	ldr	r3, [r3, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d101      	bne.n	20b2 <xTaskResumeAll+0xe>
    20ae:	b672      	cpsid	i
    20b0:	e7fe      	b.n	20b0 <xTaskResumeAll+0xc>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    20b2:	4b2d      	ldr	r3, [pc, #180]	; (2168 <xTaskResumeAll+0xc4>)
    20b4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    20b6:	4b2b      	ldr	r3, [pc, #172]	; (2164 <xTaskResumeAll+0xc0>)
    20b8:	681a      	ldr	r2, [r3, #0]
    20ba:	3a01      	subs	r2, #1
    20bc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    20be:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    20c0:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    20c2:	2b00      	cmp	r3, #0
    20c4:	d149      	bne.n	215a <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    20c6:	4b29      	ldr	r3, [pc, #164]	; (216c <xTaskResumeAll+0xc8>)
    20c8:	681b      	ldr	r3, [r3, #0]
    20ca:	2600      	movs	r6, #0
    20cc:	2b00      	cmp	r3, #0
    20ce:	d122      	bne.n	2116 <xTaskResumeAll+0x72>
    20d0:	e043      	b.n	215a <xTaskResumeAll+0xb6>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    20d2:	4b27      	ldr	r3, [pc, #156]	; (2170 <xTaskResumeAll+0xcc>)
    20d4:	68db      	ldr	r3, [r3, #12]
    20d6:	68df      	ldr	r7, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
    20d8:	1c38      	adds	r0, r7, #0
    20da:	3018      	adds	r0, #24
    20dc:	4b25      	ldr	r3, [pc, #148]	; (2174 <xTaskResumeAll+0xd0>)
    20de:	4798      	blx	r3
					uxListRemove( &( pxTCB->xGenericListItem ) );
    20e0:	1d3d      	adds	r5, r7, #4
    20e2:	1c28      	adds	r0, r5, #0
    20e4:	4b23      	ldr	r3, [pc, #140]	; (2174 <xTaskResumeAll+0xd0>)
    20e6:	4798      	blx	r3
					prvAddTaskToReadyQueue( pxTCB );
    20e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    20ea:	4a23      	ldr	r2, [pc, #140]	; (2178 <xTaskResumeAll+0xd4>)
    20ec:	6812      	ldr	r2, [r2, #0]
    20ee:	4293      	cmp	r3, r2
    20f0:	d901      	bls.n	20f6 <xTaskResumeAll+0x52>
    20f2:	4a21      	ldr	r2, [pc, #132]	; (2178 <xTaskResumeAll+0xd4>)
    20f4:	6013      	str	r3, [r2, #0]
    20f6:	0098      	lsls	r0, r3, #2
    20f8:	18c3      	adds	r3, r0, r3
    20fa:	009b      	lsls	r3, r3, #2
    20fc:	481f      	ldr	r0, [pc, #124]	; (217c <xTaskResumeAll+0xd8>)
    20fe:	18c0      	adds	r0, r0, r3
    2100:	1c29      	adds	r1, r5, #0
    2102:	4b1f      	ldr	r3, [pc, #124]	; (2180 <xTaskResumeAll+0xdc>)
    2104:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2106:	4b1f      	ldr	r3, [pc, #124]	; (2184 <xTaskResumeAll+0xe0>)
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    210e:	429a      	cmp	r2, r3
    2110:	d302      	bcc.n	2118 <xTaskResumeAll+0x74>
					{
						xYieldRequired = pdTRUE;
    2112:	2601      	movs	r6, #1
    2114:	e000      	b.n	2118 <xTaskResumeAll+0x74>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2116:	4c16      	ldr	r4, [pc, #88]	; (2170 <xTaskResumeAll+0xcc>)
    2118:	6823      	ldr	r3, [r4, #0]
    211a:	2b00      	cmp	r3, #0
    211c:	d1d9      	bne.n	20d2 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    211e:	4b1a      	ldr	r3, [pc, #104]	; (2188 <xTaskResumeAll+0xe4>)
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d00c      	beq.n	2140 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2126:	4b18      	ldr	r3, [pc, #96]	; (2188 <xTaskResumeAll+0xe4>)
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d008      	beq.n	2140 <xTaskResumeAll+0x9c>
					{
						vTaskIncrementTick();
    212e:	4d17      	ldr	r5, [pc, #92]	; (218c <xTaskResumeAll+0xe8>)
						--uxMissedTicks;
    2130:	4c15      	ldr	r4, [pc, #84]	; (2188 <xTaskResumeAll+0xe4>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2132:	47a8      	blx	r5
						--uxMissedTicks;
    2134:	6823      	ldr	r3, [r4, #0]
    2136:	3b01      	subs	r3, #1
    2138:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    213a:	6823      	ldr	r3, [r4, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d1f8      	bne.n	2132 <xTaskResumeAll+0x8e>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2140:	2e01      	cmp	r6, #1
    2142:	d004      	beq.n	214e <xTaskResumeAll+0xaa>
    2144:	4b12      	ldr	r3, [pc, #72]	; (2190 <xTaskResumeAll+0xec>)
    2146:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    2148:	2400      	movs	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    214a:	2b01      	cmp	r3, #1
    214c:	d105      	bne.n	215a <xTaskResumeAll+0xb6>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    214e:	2200      	movs	r2, #0
    2150:	4b0f      	ldr	r3, [pc, #60]	; (2190 <xTaskResumeAll+0xec>)
    2152:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    2154:	4b0f      	ldr	r3, [pc, #60]	; (2194 <xTaskResumeAll+0xf0>)
    2156:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    2158:	2401      	movs	r4, #1
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    215a:	4b0f      	ldr	r3, [pc, #60]	; (2198 <xTaskResumeAll+0xf4>)
    215c:	4798      	blx	r3

	return xAlreadyYielded;
}
    215e:	1c20      	adds	r0, r4, #0
    2160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	2000074c 	.word	0x2000074c
    2168:	00002539 	.word	0x00002539
    216c:	20000790 	.word	0x20000790
    2170:	20000754 	.word	0x20000754
    2174:	00001c81 	.word	0x00001c81
    2178:	20000770 	.word	0x20000770
    217c:	200006d4 	.word	0x200006d4
    2180:	00001c2d 	.word	0x00001c2d
    2184:	20000750 	.word	0x20000750
    2188:	200006b0 	.word	0x200006b0
    218c:	00001f89 	.word	0x00001f89
    2190:	2000078c 	.word	0x2000078c
    2194:	00002521 	.word	0x00002521
    2198:	00002551 	.word	0x00002551

0000219c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    219c:	b510      	push	{r4, lr}
    219e:	1e04      	subs	r4, r0, #0
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    21a0:	d010      	beq.n	21c4 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
    21a2:	4b0a      	ldr	r3, [pc, #40]	; (21cc <vTaskDelay+0x30>)
    21a4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    21a6:	4b0a      	ldr	r3, [pc, #40]	; (21d0 <vTaskDelay+0x34>)
    21a8:	681b      	ldr	r3, [r3, #0]
    21aa:	18e4      	adds	r4, r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    21ac:	4b09      	ldr	r3, [pc, #36]	; (21d4 <vTaskDelay+0x38>)
    21ae:	6818      	ldr	r0, [r3, #0]
    21b0:	3004      	adds	r0, #4
    21b2:	4b09      	ldr	r3, [pc, #36]	; (21d8 <vTaskDelay+0x3c>)
    21b4:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    21b6:	1c20      	adds	r0, r4, #0
    21b8:	4b08      	ldr	r3, [pc, #32]	; (21dc <vTaskDelay+0x40>)
    21ba:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    21bc:	4b08      	ldr	r3, [pc, #32]	; (21e0 <vTaskDelay+0x44>)
    21be:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    21c0:	2800      	cmp	r0, #0
    21c2:	d101      	bne.n	21c8 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
    21c4:	4b07      	ldr	r3, [pc, #28]	; (21e4 <vTaskDelay+0x48>)
    21c6:	4798      	blx	r3
		}
	}
    21c8:	bd10      	pop	{r4, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	00001f59 	.word	0x00001f59
    21d0:	20000768 	.word	0x20000768
    21d4:	20000750 	.word	0x20000750
    21d8:	00001c81 	.word	0x00001c81
    21dc:	00001ca9 	.word	0x00001ca9
    21e0:	000020a5 	.word	0x000020a5
    21e4:	00002521 	.word	0x00002521

000021e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    21e8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    21ea:	4b24      	ldr	r3, [pc, #144]	; (227c <vTaskSwitchContext+0x94>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	2b00      	cmp	r3, #0
    21f0:	d110      	bne.n	2214 <vTaskSwitchContext+0x2c>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    21f2:	4b23      	ldr	r3, [pc, #140]	; (2280 <vTaskSwitchContext+0x98>)
    21f4:	681b      	ldr	r3, [r3, #0]
    21f6:	009a      	lsls	r2, r3, #2
    21f8:	18d3      	adds	r3, r2, r3
    21fa:	009b      	lsls	r3, r3, #2
    21fc:	4a21      	ldr	r2, [pc, #132]	; (2284 <vTaskSwitchContext+0x9c>)
    21fe:	589b      	ldr	r3, [r3, r2]
    2200:	2b00      	cmp	r3, #0
    2202:	d11a      	bne.n	223a <vTaskSwitchContext+0x52>
    2204:	4b1e      	ldr	r3, [pc, #120]	; (2280 <vTaskSwitchContext+0x98>)
    2206:	681b      	ldr	r3, [r3, #0]
    2208:	2b00      	cmp	r3, #0
    220a:	d00a      	beq.n	2222 <vTaskSwitchContext+0x3a>
    220c:	4a1c      	ldr	r2, [pc, #112]	; (2280 <vTaskSwitchContext+0x98>)
    220e:	4c1d      	ldr	r4, [pc, #116]	; (2284 <vTaskSwitchContext+0x9c>)
    2210:	1c10      	adds	r0, r2, #0
    2212:	e008      	b.n	2226 <vTaskSwitchContext+0x3e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2214:	2201      	movs	r2, #1
    2216:	4b1c      	ldr	r3, [pc, #112]	; (2288 <vTaskSwitchContext+0xa0>)
    2218:	601a      	str	r2, [r3, #0]
    221a:	e02d      	b.n	2278 <vTaskSwitchContext+0x90>
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    221c:	6803      	ldr	r3, [r0, #0]
    221e:	2b00      	cmp	r3, #0
    2220:	d101      	bne.n	2226 <vTaskSwitchContext+0x3e>
    2222:	b672      	cpsid	i
    2224:	e7fe      	b.n	2224 <vTaskSwitchContext+0x3c>
    2226:	6813      	ldr	r3, [r2, #0]
    2228:	3b01      	subs	r3, #1
    222a:	6013      	str	r3, [r2, #0]
    222c:	6813      	ldr	r3, [r2, #0]
    222e:	0099      	lsls	r1, r3, #2
    2230:	18cb      	adds	r3, r1, r3
    2232:	009b      	lsls	r3, r3, #2
    2234:	591b      	ldr	r3, [r3, r4]
    2236:	2b00      	cmp	r3, #0
    2238:	d0f0      	beq.n	221c <vTaskSwitchContext+0x34>
    223a:	4b11      	ldr	r3, [pc, #68]	; (2280 <vTaskSwitchContext+0x98>)
    223c:	681b      	ldr	r3, [r3, #0]
    223e:	4c11      	ldr	r4, [pc, #68]	; (2284 <vTaskSwitchContext+0x9c>)
    2240:	009a      	lsls	r2, r3, #2
    2242:	18d1      	adds	r1, r2, r3
    2244:	0089      	lsls	r1, r1, #2
    2246:	1861      	adds	r1, r4, r1
    2248:	6848      	ldr	r0, [r1, #4]
    224a:	6840      	ldr	r0, [r0, #4]
    224c:	6048      	str	r0, [r1, #4]
    224e:	18d2      	adds	r2, r2, r3
    2250:	0092      	lsls	r2, r2, #2
    2252:	3208      	adds	r2, #8
    2254:	18a2      	adds	r2, r4, r2
    2256:	4290      	cmp	r0, r2
    2258:	d105      	bne.n	2266 <vTaskSwitchContext+0x7e>
    225a:	6841      	ldr	r1, [r0, #4]
    225c:	009a      	lsls	r2, r3, #2
    225e:	18d2      	adds	r2, r2, r3
    2260:	0092      	lsls	r2, r2, #2
    2262:	18a2      	adds	r2, r4, r2
    2264:	6051      	str	r1, [r2, #4]
    2266:	009a      	lsls	r2, r3, #2
    2268:	18d3      	adds	r3, r2, r3
    226a:	009b      	lsls	r3, r3, #2
    226c:	4a05      	ldr	r2, [pc, #20]	; (2284 <vTaskSwitchContext+0x9c>)
    226e:	18d3      	adds	r3, r2, r3
    2270:	685b      	ldr	r3, [r3, #4]
    2272:	68da      	ldr	r2, [r3, #12]
    2274:	4b05      	ldr	r3, [pc, #20]	; (228c <vTaskSwitchContext+0xa4>)
    2276:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();
	}
}
    2278:	bd10      	pop	{r4, pc}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	2000074c 	.word	0x2000074c
    2280:	20000770 	.word	0x20000770
    2284:	200006d4 	.word	0x200006d4
    2288:	2000078c 	.word	0x2000078c
    228c:	20000750 	.word	0x20000750

00002290 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2290:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
    2292:	2800      	cmp	r0, #0
    2294:	d101      	bne.n	229a <vTaskPlaceOnEventList+0xa>
    2296:	b672      	cpsid	i
    2298:	e7fe      	b.n	2298 <vTaskPlaceOnEventList+0x8>
    229a:	1c0c      	adds	r4, r1, #0
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    229c:	4d07      	ldr	r5, [pc, #28]	; (22bc <vTaskPlaceOnEventList+0x2c>)
    229e:	6829      	ldr	r1, [r5, #0]
    22a0:	3118      	adds	r1, #24
    22a2:	4b07      	ldr	r3, [pc, #28]	; (22c0 <vTaskPlaceOnEventList+0x30>)
    22a4:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    22a6:	6828      	ldr	r0, [r5, #0]
    22a8:	3004      	adds	r0, #4
    22aa:	4b06      	ldr	r3, [pc, #24]	; (22c4 <vTaskPlaceOnEventList+0x34>)
    22ac:	4798      	blx	r3
	}
	#else /* INCLUDE_vTaskSuspend */
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    22ae:	4b06      	ldr	r3, [pc, #24]	; (22c8 <vTaskPlaceOnEventList+0x38>)
    22b0:	6818      	ldr	r0, [r3, #0]
    22b2:	1820      	adds	r0, r4, r0
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    22b4:	4b05      	ldr	r3, [pc, #20]	; (22cc <vTaskPlaceOnEventList+0x3c>)
    22b6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    22b8:	bd38      	pop	{r3, r4, r5, pc}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	20000750 	.word	0x20000750
    22c0:	00001c49 	.word	0x00001c49
    22c4:	00001c81 	.word	0x00001c81
    22c8:	20000768 	.word	0x20000768
    22cc:	00001ca9 	.word	0x00001ca9

000022d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    22d0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    22d2:	68c3      	ldr	r3, [r0, #12]
    22d4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
    22d6:	2d00      	cmp	r5, #0
    22d8:	d101      	bne.n	22de <xTaskRemoveFromEventList+0xe>
    22da:	b672      	cpsid	i
    22dc:	e7fe      	b.n	22dc <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    22de:	1c2c      	adds	r4, r5, #0
    22e0:	3418      	adds	r4, #24
    22e2:	1c20      	adds	r0, r4, #0
    22e4:	4b12      	ldr	r3, [pc, #72]	; (2330 <xTaskRemoveFromEventList+0x60>)
    22e6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    22e8:	4b12      	ldr	r3, [pc, #72]	; (2334 <xTaskRemoveFromEventList+0x64>)
    22ea:	681b      	ldr	r3, [r3, #0]
    22ec:	2b00      	cmp	r3, #0
    22ee:	d113      	bne.n	2318 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    22f0:	1d2c      	adds	r4, r5, #4
    22f2:	1c20      	adds	r0, r4, #0
    22f4:	4b0e      	ldr	r3, [pc, #56]	; (2330 <xTaskRemoveFromEventList+0x60>)
    22f6:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    22f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    22fa:	4a0f      	ldr	r2, [pc, #60]	; (2338 <xTaskRemoveFromEventList+0x68>)
    22fc:	6812      	ldr	r2, [r2, #0]
    22fe:	4293      	cmp	r3, r2
    2300:	d901      	bls.n	2306 <xTaskRemoveFromEventList+0x36>
    2302:	4a0d      	ldr	r2, [pc, #52]	; (2338 <xTaskRemoveFromEventList+0x68>)
    2304:	6013      	str	r3, [r2, #0]
    2306:	0098      	lsls	r0, r3, #2
    2308:	18c3      	adds	r3, r0, r3
    230a:	009b      	lsls	r3, r3, #2
    230c:	480b      	ldr	r0, [pc, #44]	; (233c <xTaskRemoveFromEventList+0x6c>)
    230e:	18c0      	adds	r0, r0, r3
    2310:	1c21      	adds	r1, r4, #0
    2312:	4b0b      	ldr	r3, [pc, #44]	; (2340 <xTaskRemoveFromEventList+0x70>)
    2314:	4798      	blx	r3
    2316:	e003      	b.n	2320 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2318:	480a      	ldr	r0, [pc, #40]	; (2344 <xTaskRemoveFromEventList+0x74>)
    231a:	1c21      	adds	r1, r4, #0
    231c:	4b08      	ldr	r3, [pc, #32]	; (2340 <xTaskRemoveFromEventList+0x70>)
    231e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2320:	4b09      	ldr	r3, [pc, #36]	; (2348 <xTaskRemoveFromEventList+0x78>)
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2328:	2000      	movs	r0, #0
    232a:	429a      	cmp	r2, r3
    232c:	4140      	adcs	r0, r0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    232e:	bd38      	pop	{r3, r4, r5, pc}
    2330:	00001c81 	.word	0x00001c81
    2334:	2000074c 	.word	0x2000074c
    2338:	20000770 	.word	0x20000770
    233c:	200006d4 	.word	0x200006d4
    2340:	00001c2d 	.word	0x00001c2d
    2344:	20000754 	.word	0x20000754
    2348:	20000750 	.word	0x20000750

0000234c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
    234c:	2800      	cmp	r0, #0
    234e:	d101      	bne.n	2354 <vTaskSetTimeOutState+0x8>
    2350:	b672      	cpsid	i
    2352:	e7fe      	b.n	2352 <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2354:	4b03      	ldr	r3, [pc, #12]	; (2364 <vTaskSetTimeOutState+0x18>)
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    235a:	4b03      	ldr	r3, [pc, #12]	; (2368 <vTaskSetTimeOutState+0x1c>)
    235c:	681b      	ldr	r3, [r3, #0]
    235e:	6043      	str	r3, [r0, #4]
}
    2360:	4770      	bx	lr
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	200006bc 	.word	0x200006bc
    2368:	20000768 	.word	0x20000768

0000236c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    236c:	b570      	push	{r4, r5, r6, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
    236e:	2800      	cmp	r0, #0
    2370:	d101      	bne.n	2376 <xTaskCheckForTimeOut+0xa>
    2372:	b672      	cpsid	i
    2374:	e7fe      	b.n	2374 <xTaskCheckForTimeOut+0x8>
	configASSERT( pxTicksToWait );
    2376:	2900      	cmp	r1, #0
    2378:	d101      	bne.n	237e <xTaskCheckForTimeOut+0x12>
    237a:	b672      	cpsid	i
    237c:	e7fe      	b.n	237c <xTaskCheckForTimeOut+0x10>
    237e:	1c0d      	adds	r5, r1, #0
    2380:	1c04      	adds	r4, r0, #0

	taskENTER_CRITICAL();
    2382:	4b11      	ldr	r3, [pc, #68]	; (23c8 <xTaskCheckForTimeOut+0x5c>)
    2384:	4798      	blx	r3
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2386:	4b11      	ldr	r3, [pc, #68]	; (23cc <xTaskCheckForTimeOut+0x60>)
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	6822      	ldr	r2, [r4, #0]
    238c:	429a      	cmp	r2, r3
    238e:	d005      	beq.n	239c <xTaskCheckForTimeOut+0x30>
    2390:	4b0f      	ldr	r3, [pc, #60]	; (23d0 <xTaskCheckForTimeOut+0x64>)
    2392:	681b      	ldr	r3, [r3, #0]
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2394:	2601      	movs	r6, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2396:	6862      	ldr	r2, [r4, #4]
    2398:	429a      	cmp	r2, r3
    239a:	d910      	bls.n	23be <xTaskCheckForTimeOut+0x52>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    239c:	4b0c      	ldr	r3, [pc, #48]	; (23d0 <xTaskCheckForTimeOut+0x64>)
    239e:	6819      	ldr	r1, [r3, #0]
    23a0:	6860      	ldr	r0, [r4, #4]
    23a2:	682b      	ldr	r3, [r5, #0]
    23a4:	1a09      	subs	r1, r1, r0
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    23a6:	2601      	movs	r6, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    23a8:	4299      	cmp	r1, r3
    23aa:	d208      	bcs.n	23be <xTaskCheckForTimeOut+0x52>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    23ac:	4a08      	ldr	r2, [pc, #32]	; (23d0 <xTaskCheckForTimeOut+0x64>)
    23ae:	6812      	ldr	r2, [r2, #0]
    23b0:	1a12      	subs	r2, r2, r0
    23b2:	1a9b      	subs	r3, r3, r2
    23b4:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
    23b6:	1c20      	adds	r0, r4, #0
    23b8:	4b06      	ldr	r3, [pc, #24]	; (23d4 <xTaskCheckForTimeOut+0x68>)
    23ba:	4798      	blx	r3
			xReturn = pdFALSE;
    23bc:	2600      	movs	r6, #0
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
    23be:	4b06      	ldr	r3, [pc, #24]	; (23d8 <xTaskCheckForTimeOut+0x6c>)
    23c0:	4798      	blx	r3

	return xReturn;
}
    23c2:	1c30      	adds	r0, r6, #0
    23c4:	bd70      	pop	{r4, r5, r6, pc}
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	00002539 	.word	0x00002539
    23cc:	200006bc 	.word	0x200006bc
    23d0:	20000768 	.word	0x20000768
    23d4:	0000234d 	.word	0x0000234d
    23d8:	00002551 	.word	0x00002551

000023dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    23dc:	2201      	movs	r2, #1
    23de:	4b01      	ldr	r3, [pc, #4]	; (23e4 <vTaskMissedYield+0x8>)
    23e0:	601a      	str	r2, [r3, #0]
}
    23e2:	4770      	bx	lr
    23e4:	2000078c 	.word	0x2000078c

000023e8 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    23e8:	4b01      	ldr	r3, [pc, #4]	; (23f0 <xTaskGetCurrentTaskHandle+0x8>)
    23ea:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
    23ec:	4770      	bx	lr
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	20000750 	.word	0x20000750

000023f4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    23f4:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    23f6:	2800      	cmp	r0, #0
    23f8:	d02f      	beq.n	245a <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    23fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    23fc:	4a17      	ldr	r2, [pc, #92]	; (245c <vTaskPriorityInherit+0x68>)
    23fe:	6812      	ldr	r2, [r2, #0]
    2400:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    2402:	4293      	cmp	r3, r2
    2404:	d229      	bcs.n	245a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    2406:	4a15      	ldr	r2, [pc, #84]	; (245c <vTaskPriorityInherit+0x68>)
    2408:	6812      	ldr	r2, [r2, #0]
    240a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    240c:	2206      	movs	r2, #6
    240e:	1a52      	subs	r2, r2, r1
    2410:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    2412:	009a      	lsls	r2, r3, #2
    2414:	18d3      	adds	r3, r2, r3
    2416:	009b      	lsls	r3, r3, #2
    2418:	4a11      	ldr	r2, [pc, #68]	; (2460 <vTaskPriorityInherit+0x6c>)
    241a:	18d3      	adds	r3, r2, r3
    241c:	6942      	ldr	r2, [r0, #20]
    241e:	429a      	cmp	r2, r3
    2420:	d117      	bne.n	2452 <vTaskPriorityInherit+0x5e>
    2422:	1c05      	adds	r5, r0, #0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    2424:	1d04      	adds	r4, r0, #4
    2426:	1c20      	adds	r0, r4, #0
    2428:	4b0e      	ldr	r3, [pc, #56]	; (2464 <vTaskPriorityInherit+0x70>)
    242a:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    242c:	4b0b      	ldr	r3, [pc, #44]	; (245c <vTaskPriorityInherit+0x68>)
    242e:	681b      	ldr	r3, [r3, #0]
    2430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2432:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
    2434:	4a0c      	ldr	r2, [pc, #48]	; (2468 <vTaskPriorityInherit+0x74>)
    2436:	6812      	ldr	r2, [r2, #0]
    2438:	4293      	cmp	r3, r2
    243a:	d901      	bls.n	2440 <vTaskPriorityInherit+0x4c>
    243c:	4a0a      	ldr	r2, [pc, #40]	; (2468 <vTaskPriorityInherit+0x74>)
    243e:	6013      	str	r3, [r2, #0]
    2440:	0098      	lsls	r0, r3, #2
    2442:	18c0      	adds	r0, r0, r3
    2444:	0083      	lsls	r3, r0, #2
    2446:	4806      	ldr	r0, [pc, #24]	; (2460 <vTaskPriorityInherit+0x6c>)
    2448:	18c0      	adds	r0, r0, r3
    244a:	1c21      	adds	r1, r4, #0
    244c:	4b07      	ldr	r3, [pc, #28]	; (246c <vTaskPriorityInherit+0x78>)
    244e:	4798      	blx	r3
    2450:	e003      	b.n	245a <vTaskPriorityInherit+0x66>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    2452:	4b02      	ldr	r3, [pc, #8]	; (245c <vTaskPriorityInherit+0x68>)
    2454:	681b      	ldr	r3, [r3, #0]
    2456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2458:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    245a:	bd38      	pop	{r3, r4, r5, pc}
    245c:	20000750 	.word	0x20000750
    2460:	200006d4 	.word	0x200006d4
    2464:	00001c81 	.word	0x00001c81
    2468:	20000770 	.word	0x20000770
    246c:	00001c2d 	.word	0x00001c2d

00002470 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    2470:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2472:	2800      	cmp	r0, #0
    2474:	d01b      	beq.n	24ae <vTaskPriorityDisinherit+0x3e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2478:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    247a:	4293      	cmp	r3, r2
    247c:	d017      	beq.n	24ae <vTaskPriorityDisinherit+0x3e>
    247e:	1c04      	adds	r4, r0, #0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    2480:	1d05      	adds	r5, r0, #4
    2482:	1c28      	adds	r0, r5, #0
    2484:	4b0a      	ldr	r3, [pc, #40]	; (24b0 <vTaskPriorityDisinherit+0x40>)
    2486:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    248a:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    248c:	2206      	movs	r2, #6
    248e:	1ad2      	subs	r2, r2, r3
    2490:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
    2492:	4a08      	ldr	r2, [pc, #32]	; (24b4 <vTaskPriorityDisinherit+0x44>)
    2494:	6812      	ldr	r2, [r2, #0]
    2496:	4293      	cmp	r3, r2
    2498:	d901      	bls.n	249e <vTaskPriorityDisinherit+0x2e>
    249a:	4a06      	ldr	r2, [pc, #24]	; (24b4 <vTaskPriorityDisinherit+0x44>)
    249c:	6013      	str	r3, [r2, #0]
    249e:	0098      	lsls	r0, r3, #2
    24a0:	18c0      	adds	r0, r0, r3
    24a2:	0083      	lsls	r3, r0, #2
    24a4:	4804      	ldr	r0, [pc, #16]	; (24b8 <vTaskPriorityDisinherit+0x48>)
    24a6:	18c0      	adds	r0, r0, r3
    24a8:	1c29      	adds	r1, r5, #0
    24aa:	4b04      	ldr	r3, [pc, #16]	; (24bc <vTaskPriorityDisinherit+0x4c>)
    24ac:	4798      	blx	r3
			}
		}
	}
    24ae:	bd38      	pop	{r3, r4, r5, pc}
    24b0:	00001c81 	.word	0x00001c81
    24b4:	20000770 	.word	0x20000770
    24b8:	200006d4 	.word	0x200006d4
    24bc:	00001c2d 	.word	0x00001c2d

000024c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    24c0:	4a06      	ldr	r2, [pc, #24]	; (24dc <pxCurrentTCBConst3>)
    24c2:	6813      	ldr	r3, [r2, #0]
    24c4:	6818      	ldr	r0, [r3, #0]
    24c6:	3020      	adds	r0, #32
    24c8:	f380 8809 	msr	PSP, r0
    24cc:	2002      	movs	r0, #2
    24ce:	f380 8814 	msr	CONTROL, r0
    24d2:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    24d4:	46ae      	mov	lr, r5
    24d6:	b662      	cpsie	i
    24d8:	bd00      	pop	{pc}
    24da:	46c0      	nop			; (mov r8, r8)

000024dc <pxCurrentTCBConst3>:
    24dc:	20000750 	.word	0x20000750

000024e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    24e0:	b510      	push	{r4, lr}
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    24e2:	1f03      	subs	r3, r0, #4
    24e4:	2480      	movs	r4, #128	; 0x80
    24e6:	0464      	lsls	r4, r4, #17
    24e8:	601c      	str	r4, [r3, #0]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    24ea:	3b04      	subs	r3, #4
    24ec:	6019      	str	r1, [r3, #0]
	pxTopOfStack -= 6;	/* LR, R12, R3..R1 */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    24ee:	3b18      	subs	r3, #24
    24f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    24f2:	3840      	subs	r0, #64	; 0x40

	return pxTopOfStack;
}
    24f4:	bd10      	pop	{r4, pc}
    24f6:	46c0      	nop			; (mov r8, r8)

000024f8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    24f8:	4b08      	ldr	r3, [pc, #32]	; (251c <pxCurrentTCBConst2>)
    24fa:	6819      	ldr	r1, [r3, #0]
    24fc:	6808      	ldr	r0, [r1, #0]
    24fe:	3010      	adds	r0, #16
    2500:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2502:	46a0      	mov	r8, r4
    2504:	46a9      	mov	r9, r5
    2506:	46b2      	mov	sl, r6
    2508:	46bb      	mov	fp, r7
    250a:	f380 8809 	msr	PSP, r0
    250e:	3820      	subs	r0, #32
    2510:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2512:	4671      	mov	r1, lr
    2514:	200d      	movs	r0, #13
    2516:	4301      	orrs	r1, r0
    2518:	4708      	bx	r1
    251a:	46c0      	nop			; (mov r8, r8)

0000251c <pxCurrentTCBConst2>:
    251c:	20000750 	.word	0x20000750

00002520 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    2520:	2280      	movs	r2, #128	; 0x80
    2522:	0552      	lsls	r2, r2, #21
    2524:	4b03      	ldr	r3, [pc, #12]	; (2534 <vPortYield+0x14>)
    2526:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    2528:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    252c:	f3bf 8f6f 	isb	sy
}
    2530:	4770      	bx	lr
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	e000ed04 	.word	0xe000ed04

00002538 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    2538:	b672      	cpsid	i
    uxCriticalNesting++;
    253a:	4a04      	ldr	r2, [pc, #16]	; (254c <vPortEnterCritical+0x14>)
    253c:	6813      	ldr	r3, [r2, #0]
    253e:	3301      	adds	r3, #1
    2540:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
    2542:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    2546:	f3bf 8f6f 	isb	sy
}
    254a:	4770      	bx	lr
    254c:	200000c8 	.word	0x200000c8

00002550 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    uxCriticalNesting--;
    2550:	4a03      	ldr	r2, [pc, #12]	; (2560 <vPortExitCritical+0x10>)
    2552:	6813      	ldr	r3, [r2, #0]
    2554:	3b01      	subs	r3, #1
    2556:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    2558:	2b00      	cmp	r3, #0
    255a:	d100      	bne.n	255e <vPortExitCritical+0xe>
    {
        portENABLE_INTERRUPTS();
    255c:	b662      	cpsie	i
    }
}
    255e:	4770      	bx	lr
    2560:	200000c8 	.word	0x200000c8

00002564 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    2564:	f3ef 8009 	mrs	r0, PSP
    2568:	4b0e      	ldr	r3, [pc, #56]	; (25a4 <pxCurrentTCBConst>)
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	3820      	subs	r0, #32
    256e:	6010      	str	r0, [r2, #0]
    2570:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    2572:	4644      	mov	r4, r8
    2574:	464d      	mov	r5, r9
    2576:	4656      	mov	r6, sl
    2578:	465f      	mov	r7, fp
    257a:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    257c:	b508      	push	{r3, lr}
    257e:	b672      	cpsid	i
    2580:	f7ff fe32 	bl	21e8 <vTaskSwitchContext>
    2584:	b662      	cpsie	i
    2586:	bc0c      	pop	{r2, r3}
    2588:	6811      	ldr	r1, [r2, #0]
    258a:	6808      	ldr	r0, [r1, #0]
    258c:	3010      	adds	r0, #16
    258e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    2590:	46a0      	mov	r8, r4
    2592:	46a9      	mov	r9, r5
    2594:	46b2      	mov	sl, r6
    2596:	46bb      	mov	fp, r7
    2598:	f380 8809 	msr	PSP, r0
    259c:	3820      	subs	r0, #32
    259e:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    25a0:	4718      	bx	r3
    25a2:	46c0      	nop			; (mov r8, r8)

000025a4 <pxCurrentTCBConst>:
    25a4:	20000750 	.word	0x20000750

000025a8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    25a8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    25aa:	b672      	cpsid	i
	{
		vTaskIncrementTick();
    25ac:	4b01      	ldr	r3, [pc, #4]	; (25b4 <SysTick_Handler+0xc>)
    25ae:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    25b0:	b662      	cpsie	i
}
    25b2:	bd08      	pop	{r3, pc}
    25b4:	00001f89 	.word	0x00001f89

000025b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    25b8:	b508      	push	{r3, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_VAL)  = 0; /* Load the SysTick Counter Value */
    25ba:	2200      	movs	r2, #0
    25bc:	4b07      	ldr	r3, [pc, #28]	; (25dc <vPortSetupTimerInterrupt+0x24>)
    25be:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    25c0:	2000      	movs	r0, #0
    25c2:	4b07      	ldr	r3, [pc, #28]	; (25e0 <vPortSetupTimerInterrupt+0x28>)
    25c4:	4798      	blx	r3
    25c6:	21fa      	movs	r1, #250	; 0xfa
    25c8:	0089      	lsls	r1, r1, #2
    25ca:	4b06      	ldr	r3, [pc, #24]	; (25e4 <vPortSetupTimerInterrupt+0x2c>)
    25cc:	4798      	blx	r3
    25ce:	3801      	subs	r0, #1
    25d0:	4b05      	ldr	r3, [pc, #20]	; (25e8 <vPortSetupTimerInterrupt+0x30>)
    25d2:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    25d4:	2207      	movs	r2, #7
    25d6:	4b05      	ldr	r3, [pc, #20]	; (25ec <vPortSetupTimerInterrupt+0x34>)
    25d8:	601a      	str	r2, [r3, #0]
}
    25da:	bd08      	pop	{r3, pc}
    25dc:	e000e018 	.word	0xe000e018
    25e0:	000043fd 	.word	0x000043fd
    25e4:	00006ab5 	.word	0x00006ab5
    25e8:	e000e014 	.word	0xe000e014
    25ec:	e000e010 	.word	0xe000e010

000025f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    25f0:	b508      	push	{r3, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    25f2:	4b0a      	ldr	r3, [pc, #40]	; (261c <xPortStartScheduler+0x2c>)
    25f4:	681a      	ldr	r2, [r3, #0]
    25f6:	21ff      	movs	r1, #255	; 0xff
    25f8:	0409      	lsls	r1, r1, #16
    25fa:	430a      	orrs	r2, r1
    25fc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    25fe:	681a      	ldr	r2, [r3, #0]
    2600:	21ff      	movs	r1, #255	; 0xff
    2602:	0609      	lsls	r1, r1, #24
    2604:	430a      	orrs	r2, r1
    2606:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    2608:	4b05      	ldr	r3, [pc, #20]	; (2620 <xPortStartScheduler+0x30>)
    260a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    260c:	2200      	movs	r2, #0
    260e:	4b05      	ldr	r3, [pc, #20]	; (2624 <xPortStartScheduler+0x34>)
    2610:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    2612:	4b05      	ldr	r3, [pc, #20]	; (2628 <xPortStartScheduler+0x38>)
    2614:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
    2616:	2000      	movs	r0, #0
    2618:	bd08      	pop	{r3, pc}
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	e000ed20 	.word	0xe000ed20
    2620:	000025b9 	.word	0x000025b9
    2624:	200000c8 	.word	0x200000c8
    2628:	000024c1 	.word	0x000024c1

0000262c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    262c:	b538      	push	{r3, r4, r5, lr}
    262e:	1c04      	adds	r4, r0, #0
void *pvReturn = NULL;
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    2630:	0743      	lsls	r3, r0, #29
    2632:	d002      	beq.n	263a <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    2634:	2307      	movs	r3, #7
    2636:	439c      	bics	r4, r3
    2638:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
    263a:	4b10      	ldr	r3, [pc, #64]	; (267c <pvPortMalloc+0x50>)
    263c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    263e:	4b10      	ldr	r3, [pc, #64]	; (2680 <pvPortMalloc+0x54>)
    2640:	681b      	ldr	r3, [r3, #0]
    2642:	2b00      	cmp	r3, #0
    2644:	d105      	bne.n	2652 <pvPortMalloc+0x26>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    2646:	2207      	movs	r2, #7
    2648:	4b0e      	ldr	r3, [pc, #56]	; (2684 <pvPortMalloc+0x58>)
    264a:	3308      	adds	r3, #8
    264c:	4393      	bics	r3, r2
    264e:	4a0c      	ldr	r2, [pc, #48]	; (2680 <pvPortMalloc+0x54>)
    2650:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2652:	4b0d      	ldr	r3, [pc, #52]	; (2688 <pvPortMalloc+0x5c>)
    2654:	681b      	ldr	r3, [r3, #0]
    2656:	18e4      	adds	r4, r4, r3
    2658:	4a0c      	ldr	r2, [pc, #48]	; (268c <pvPortMalloc+0x60>)
    265a:	4294      	cmp	r4, r2
    265c:	d807      	bhi.n	266e <pvPortMalloc+0x42>
    265e:	42a3      	cmp	r3, r4
    2660:	d207      	bcs.n	2672 <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2662:	4a07      	ldr	r2, [pc, #28]	; (2680 <pvPortMalloc+0x54>)
    2664:	6815      	ldr	r5, [r2, #0]
    2666:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    2668:	4b07      	ldr	r3, [pc, #28]	; (2688 <pvPortMalloc+0x5c>)
    266a:	601c      	str	r4, [r3, #0]
    266c:	e002      	b.n	2674 <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    266e:	2500      	movs	r5, #0
    2670:	e000      	b.n	2674 <pvPortMalloc+0x48>
    2672:	2500      	movs	r5, #0
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
    2674:	4b06      	ldr	r3, [pc, #24]	; (2690 <pvPortMalloc+0x64>)
    2676:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    2678:	1c28      	adds	r0, r5, #0
    267a:	bd38      	pop	{r3, r4, r5, pc}
    267c:	00001f59 	.word	0x00001f59
    2680:	20004234 	.word	0x20004234
    2684:	2000079c 	.word	0x2000079c
    2688:	20000798 	.word	0x20000798
    268c:	00003a8f 	.word	0x00003a8f
    2690:	000020a5 	.word	0x000020a5

00002694 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    2694:	2800      	cmp	r0, #0
    2696:	d001      	beq.n	269c <vPortFree+0x8>
    2698:	b672      	cpsid	i
    269a:	e7fe      	b.n	269a <vPortFree+0x6>
}
    269c:	4770      	bx	lr
    269e:	46c0      	nop			; (mov r8, r8)

000026a0 <main>:




int main()
{
    26a0:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    26a2:	b672      	cpsid	i
    26a4:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    cpu_irq_disable();
    26a8:	4c16      	ldr	r4, [pc, #88]	; (2704 <main+0x64>)
    26aa:	2300      	movs	r3, #0
    26ac:	7023      	strb	r3, [r4, #0]
	system_interrupt_disable_global();
	
	//configureHMI 
	configureHMI();
    26ae:	4b16      	ldr	r3, [pc, #88]	; (2708 <main+0x68>)
    26b0:	4798      	blx	r3
	//wdt cofnig
	wdt_config();
    26b2:	4b16      	ldr	r3, [pc, #88]	; (270c <main+0x6c>)
    26b4:	4798      	blx	r3
    //RTC configure
   configureInternalClock();
    26b6:	4b16      	ldr	r3, [pc, #88]	; (2710 <main+0x70>)
    26b8:	4798      	blx	r3
    //configure external intrerrupt for pps
    configurationPPS();
    26ba:	4b16      	ldr	r3, [pc, #88]	; (2714 <main+0x74>)
    26bc:	4798      	blx	r3
    //create your task
    kernelConfig();
    26be:	4b16      	ldr	r3, [pc, #88]	; (2718 <main+0x78>)
    26c0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    cpu_irq_enable();
    26c2:	2301      	movs	r3, #1
    26c4:	7023      	strb	r3, [r4, #0]
    26c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    26ca:	b662      	cpsie	i
    //demask global interrupt
    system_interrupt_enable_global();
    hmi.printf("\r\n\r\n**********************************************************************\r\n");
    26cc:	4d13      	ldr	r5, [pc, #76]	; (271c <main+0x7c>)
    26ce:	1c28      	adds	r0, r5, #0
    26d0:	4913      	ldr	r1, [pc, #76]	; (2720 <main+0x80>)
    26d2:	4c14      	ldr	r4, [pc, #80]	; (2724 <main+0x84>)
    26d4:	47a0      	blx	r4
    hmi.printf("tick time: %lu ms\r\n",portTICK_RATE_MS);   
    26d6:	1c28      	adds	r0, r5, #0
    26d8:	4913      	ldr	r1, [pc, #76]	; (2728 <main+0x88>)
    26da:	2201      	movs	r2, #1
    26dc:	47a0      	blx	r4
    #ifdef MASTERMODE
        hmi.printf("Master clock\r\n");
    26de:	1c28      	adds	r0, r5, #0
    26e0:	4912      	ldr	r1, [pc, #72]	; (272c <main+0x8c>)
    26e2:	47a0      	blx	r4
    #else
        hmi.printf("Slave Clock \r\n");
    #endif
    hmi.printf("end config application begin\r\n");
    26e4:	1c28      	adds	r0, r5, #0
    26e6:	4912      	ldr	r1, [pc, #72]	; (2730 <main+0x90>)
    26e8:	47a0      	blx	r4
    hmi.printf("\r\n**********************************************************************\r\n\r\n");
    26ea:	1c28      	adds	r0, r5, #0
    26ec:	4911      	ldr	r1, [pc, #68]	; (2734 <main+0x94>)
    26ee:	47a0      	blx	r4
    //start the scheduler
    vTaskStartScheduler();
    26f0:	4b11      	ldr	r3, [pc, #68]	; (2738 <main+0x98>)
    26f2:	4798      	blx	r3
    while(1){//trap
		hmi.printf("trap!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
    26f4:	4e09      	ldr	r6, [pc, #36]	; (271c <main+0x7c>)
    26f6:	4d11      	ldr	r5, [pc, #68]	; (273c <main+0x9c>)
    26f8:	4c0a      	ldr	r4, [pc, #40]	; (2724 <main+0x84>)
    26fa:	1c30      	adds	r0, r6, #0
    26fc:	1c29      	adds	r1, r5, #0
    26fe:	47a0      	blx	r4
#include <wdt_config.h>




int main()
    2700:	e7fb      	b.n	26fa <main+0x5a>
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	200000d0 	.word	0x200000d0
    2708:	0000052d 	.word	0x0000052d
    270c:	000016d9 	.word	0x000016d9
    2710:	00000a81 	.word	0x00000a81
    2714:	00000bcd 	.word	0x00000bcd
    2718:	00001521 	.word	0x00001521
    271c:	20000270 	.word	0x20000270
    2720:	0000e62c 	.word	0x0000e62c
    2724:	00005361 	.word	0x00005361
    2728:	0000e67c 	.word	0x0000e67c
    272c:	0000e690 	.word	0x0000e690
    2730:	0000e6a0 	.word	0x0000e6a0
    2734:	0000e6c0 	.word	0x0000e6c0
    2738:	00001f01 	.word	0x00001f01
    273c:	0000e710 	.word	0x0000e710

00002740 <_ZN8cMxRadio23zr_attach_receive_frameEMS_FPhhS0_hahE>:
{
	user_radio_irq = funct;
}

void cMxRadio::zr_attach_receive_frame(uint8_t* (cMxRadio::*funct)(uint8_t, uint8_t*, uint8_t, int8_t, uint8_t))
{
    2740:	b082      	sub	sp, #8
    2742:	466b      	mov	r3, sp
    2744:	9100      	str	r1, [sp, #0]
    2746:	9201      	str	r2, [sp, #4]
	user_radio_receive_frame = funct;
    2748:	22a6      	movs	r2, #166	; 0xa6
    274a:	0092      	lsls	r2, r2, #2
    274c:	4694      	mov	ip, r2
    274e:	4460      	add	r0, ip
    2750:	cb06      	ldmia	r3!, {r1, r2}
    2752:	c006      	stmia	r0!, {r1, r2}
}
    2754:	b002      	add	sp, #8
    2756:	4770      	bx	lr

00002758 <_ZN8cMxRadio17zr_attach_tx_doneEMS_Fv15radio_tx_done_tE>:

void cMxRadio::zr_attach_tx_done(void (cMxRadio::*funct)(radio_tx_done_t))
{
    2758:	b082      	sub	sp, #8
    275a:	466b      	mov	r3, sp
    275c:	9100      	str	r1, [sp, #0]
    275e:	9201      	str	r2, [sp, #4]
	user_radio_tx_done = funct;
    2760:	22a8      	movs	r2, #168	; 0xa8
    2762:	0092      	lsls	r2, r2, #2
    2764:	4694      	mov	ip, r2
    2766:	4460      	add	r0, ip
    2768:	cb06      	ldmia	r3!, {r1, r2}
    276a:	c006      	stmia	r0!, {r1, r2}
}
    276c:	b002      	add	sp, #8
    276e:	4770      	bx	lr

00002770 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t>:
void cMxRadio::usr_radio_error(radio_error_t err)
{
    2770:	b508      	push	{r3, lr}
	if (user_radio_error) user_radio_error(err);
    2772:	23a4      	movs	r3, #164	; 0xa4
    2774:	009b      	lsls	r3, r3, #2
    2776:	58c3      	ldr	r3, [r0, r3]
    2778:	2b00      	cmp	r3, #0
    277a:	d001      	beq.n	2780 <_ZN8cMxRadio15usr_radio_errorE13radio_error_t+0x10>
    277c:	1c08      	adds	r0, r1, #0
    277e:	4798      	blx	r3
}
    2780:	bd08      	pop	{r3, pc}
    2782:	46c0      	nop			; (mov r8, r8)

00002784 <_ZN8cMxRadio13usr_radio_irqEh>:

void cMxRadio::usr_radio_irq(uint8_t cause)
{
    2784:	b508      	push	{r3, lr}
	if (user_radio_irq) user_radio_irq(cause);
    2786:	23a5      	movs	r3, #165	; 0xa5
    2788:	009b      	lsls	r3, r3, #2
    278a:	58c3      	ldr	r3, [r0, r3]
    278c:	2b00      	cmp	r3, #0
    278e:	d001      	beq.n	2794 <_ZN8cMxRadio13usr_radio_irqEh+0x10>
    2790:	1c08      	adds	r0, r1, #0
    2792:	4798      	blx	r3
}
    2794:	bd08      	pop	{r3, pc}
    2796:	46c0      	nop			; (mov r8, r8)

00002798 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah>:

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    2798:	b5f0      	push	{r4, r5, r6, r7, lr}
    279a:	b085      	sub	sp, #20
    279c:	9303      	str	r3, [sp, #12]
    279e:	ac0a      	add	r4, sp, #40	; 0x28
    27a0:	2700      	movs	r7, #0
    27a2:	57e7      	ldrsb	r7, [r4, r7]
    27a4:	ac0b      	add	r4, sp, #44	; 0x2c
    27a6:	7826      	ldrb	r6, [r4, #0]
	if (user_radio_receive_frame)
    27a8:	24a6      	movs	r4, #166	; 0xa6
    27aa:	00a4      	lsls	r4, r4, #2
    27ac:	5905      	ldr	r5, [r0, r4]
    27ae:	2d00      	cmp	r5, #0
    27b0:	d105      	bne.n	27be <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x26>
    27b2:	3404      	adds	r4, #4
    27b4:	5904      	ldr	r4, [r0, r4]
    27b6:	07e3      	lsls	r3, r4, #31
    27b8:	d406      	bmi.n	27c8 <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x30>
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
	else return frm;
    27ba:	1c10      	adds	r0, r2, #0
    27bc:	e00d      	b.n	27da <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x42>
}

uint8_t* cMxRadio::usr_radio_receive_frame(uint8_t len, uint8_t *frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
	if (user_radio_receive_frame)
		return (this->*user_radio_receive_frame)(len, frm, lqi,ed, crc_fail);
    27be:	24a7      	movs	r4, #167	; 0xa7
    27c0:	00a4      	lsls	r4, r4, #2
    27c2:	5904      	ldr	r4, [r0, r4]
    27c4:	07e3      	lsls	r3, r4, #31
    27c6:	d502      	bpl.n	27ce <_ZN8cMxRadio23usr_radio_receive_frameEhPhhah+0x36>
    27c8:	1063      	asrs	r3, r4, #1
    27ca:	58c3      	ldr	r3, [r0, r3]
    27cc:	595d      	ldr	r5, [r3, r5]
    27ce:	9b03      	ldr	r3, [sp, #12]
    27d0:	1064      	asrs	r4, r4, #1
    27d2:	1900      	adds	r0, r0, r4
    27d4:	9700      	str	r7, [sp, #0]
    27d6:	9601      	str	r6, [sp, #4]
    27d8:	47a8      	blx	r5
	else return frm;
}
    27da:	b005      	add	sp, #20
    27dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27de:	46c0      	nop			; (mov r8, r8)

000027e0 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t>:

void cMxRadio::usr_radio_tx_done(radio_tx_done_t status)
{
    27e0:	b510      	push	{r4, lr}
	if (user_radio_tx_done) (this->*user_radio_tx_done)(status);
    27e2:	23a8      	movs	r3, #168	; 0xa8
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	58c2      	ldr	r2, [r0, r3]
    27e8:	2a00      	cmp	r2, #0
    27ea:	d104      	bne.n	27f6 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x16>
    27ec:	3304      	adds	r3, #4
    27ee:	58c3      	ldr	r3, [r0, r3]
    27f0:	07dc      	lsls	r4, r3, #31
    27f2:	d405      	bmi.n	2800 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x20>
    27f4:	e00a      	b.n	280c <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x2c>
    27f6:	23a9      	movs	r3, #169	; 0xa9
    27f8:	009b      	lsls	r3, r3, #2
    27fa:	58c3      	ldr	r3, [r0, r3]
    27fc:	07dc      	lsls	r4, r3, #31
    27fe:	d502      	bpl.n	2806 <_ZN8cMxRadio17usr_radio_tx_doneE15radio_tx_done_t+0x26>
    2800:	105c      	asrs	r4, r3, #1
    2802:	5904      	ldr	r4, [r0, r4]
    2804:	58a2      	ldr	r2, [r4, r2]
    2806:	105b      	asrs	r3, r3, #1
    2808:	18c0      	adds	r0, r0, r3
    280a:	4790      	blx	r2
}
    280c:	bd10      	pop	{r4, pc}
    280e:	46c0      	nop			; (mov r8, r8)

00002810 <_ZN8cMxRadio14onReceiveFrameEhPhhah>:
 * @param frm array containing frame data
 * @param lqi link quality indicator
 * @param crc_fail boolean indicating whether the received frame failed FCS verification, not used
 */
uint8_t* cMxRadio::onReceiveFrame(uint8_t len, uint8_t* frm, uint8_t lqi, int8_t ed,uint8_t crc_fail)
{
    2810:	b5f0      	push	{r4, r5, r6, r7, lr}
    2812:	4657      	mov	r7, sl
    2814:	464e      	mov	r6, r9
    2816:	4645      	mov	r5, r8
    2818:	b4e0      	push	{r5, r6, r7}
    281a:	b082      	sub	sp, #8
    281c:	ac0a      	add	r4, sp, #40	; 0x28
    281e:	2500      	movs	r5, #0
    2820:	5765      	ldrsb	r5, [r4, r5]
    2822:	ac0b      	add	r4, sp, #44	; 0x2c
    2824:	7824      	ldrb	r4, [r4, #0]
	if (crc_fail)
    2826:	2c00      	cmp	r4, #0
    2828:	d002      	beq.n	2830 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x20>
		return rxRingBuffer;
    282a:	307c      	adds	r0, #124	; 0x7c
    282c:	30ff      	adds	r0, #255	; 0xff
    282e:	e06b      	b.n	2908 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	lastLqi = lqi;
    2830:	4c38      	ldr	r4, [pc, #224]	; (2914 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x104>)
    2832:	5503      	strb	r3, [r0, r4]
	//lastRssi=ed;
	if (hasAttachedRxEvent == 0)
    2834:	4c38      	ldr	r4, [pc, #224]	; (2918 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x108>)
    2836:	5d04      	ldrb	r4, [r0, r4]
    2838:	2c00      	cmp	r4, #0
    283a:	d15b      	bne.n	28f4 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xe4>
	{
		// no event handler, so write it into the FIFO

		if (len >= HeadSize-1)
    283c:	2907      	cmp	r1, #7
    283e:	d817      	bhi.n	2870 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x60>
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    2840:	2900      	cmp	r1, #0
    2842:	d054      	beq.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2844:	23fc      	movs	r3, #252	; 0xfc
    2846:	33ff      	adds	r3, #255	; 0xff
    2848:	5cc3      	ldrb	r3, [r0, r3]
    284a:	1c5c      	adds	r4, r3, #1
    284c:	257f      	movs	r5, #127	; 0x7f
    284e:	402c      	ands	r4, r5
				if (j != rxRingBufferTail)
    2850:	357e      	adds	r5, #126	; 0x7e
    2852:	35ff      	adds	r5, #255	; 0xff
    2854:	5d45      	ldrb	r5, [r0, r5]
    2856:	42a5      	cmp	r5, r4
    2858:	d049      	beq.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
    285a:	1c17      	adds	r7, r2, #0
    285c:	3901      	subs	r1, #1
    285e:	b2c9      	uxtb	r1, r1
    2860:	1852      	adds	r2, r2, r1
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    2862:	21fc      	movs	r1, #252	; 0xfc
    2864:	31ff      	adds	r1, #255	; 0xff
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2866:	257f      	movs	r5, #127	; 0x7f
    2868:	46ac      	mov	ip, r5
				if (j != rxRingBufferTail)
    286a:	26fe      	movs	r6, #254	; 0xfe
    286c:	0076      	lsls	r6, r6, #1
    286e:	e035      	b.n	28dc <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xcc>
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    2870:	1e8e      	subs	r6, r1, #2
    2872:	2e09      	cmp	r6, #9
    2874:	dd3b      	ble.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2876:	23fc      	movs	r3, #252	; 0xfc
    2878:	33ff      	adds	r3, #255	; 0xff
    287a:	5cc4      	ldrb	r4, [r0, r3]
    287c:	1c63      	adds	r3, r4, #1
    287e:	217f      	movs	r1, #127	; 0x7f
    2880:	400b      	ands	r3, r1
				if (j != rxRingBufferTail)
    2882:	317e      	adds	r1, #126	; 0x7e
    2884:	31ff      	adds	r1, #255	; 0xff
    2886:	5c41      	ldrb	r1, [r0, r1]
    2888:	2509      	movs	r5, #9
    288a:	4299      	cmp	r1, r3
    288c:	d10a      	bne.n	28a4 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x94>
    288e:	e02e      	b.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    2890:	4647      	mov	r7, r8
    2892:	403b      	ands	r3, r7
    2894:	3301      	adds	r3, #1
    2896:	4667      	mov	r7, ip
    2898:	403b      	ands	r3, r7
				if (j != rxRingBufferTail)
    289a:	4657      	mov	r7, sl
    289c:	5dc7      	ldrb	r7, [r0, r7]
    289e:	429f      	cmp	r7, r3
    28a0:	d109      	bne.n	28b6 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xa6>
    28a2:	e024      	b.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
					rxRingBufferHead = j;
    28a4:	21fc      	movs	r1, #252	; 0xfc
    28a6:	31ff      	adds	r1, #255	; 0xff
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    28a8:	27ff      	movs	r7, #255	; 0xff
    28aa:	46b8      	mov	r8, r7
    28ac:	3f80      	subs	r7, #128	; 0x80
    28ae:	46bc      	mov	ip, r7
				if (j != rxRingBufferTail)
    28b0:	377e      	adds	r7, #126	; 0x7e
    28b2:	37ff      	adds	r7, #255	; 0xff
    28b4:	46ba      	mov	sl, r7
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    28b6:	5d57      	ldrb	r7, [r2, r5]
    28b8:	1904      	adds	r4, r0, r4
    28ba:	3479      	adds	r4, #121	; 0x79
    28bc:	34ff      	adds	r4, #255	; 0xff
    28be:	70e7      	strb	r7, [r4, #3]
					rxRingBufferHead = j;
    28c0:	b2dc      	uxtb	r4, r3
    28c2:	5444      	strb	r4, [r0, r1]
		if (len >= HeadSize-1)
		{
			// frame header exists
			// copy only payload

			for (uint8_t i = HeadSize; i < len - 2; i++)
    28c4:	3501      	adds	r5, #1
    28c6:	b2ed      	uxtb	r5, r5
    28c8:	42b5      	cmp	r5, r6
    28ca:	dbe1      	blt.n	2890 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0x80>
    28cc:	e00f      	b.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
			{
				uint16_t j = ((uint16_t)((uint16_t)rxRingBufferHead + 1)) % ZR_FIFO_SIZE;
    28ce:	3401      	adds	r4, #1
    28d0:	4665      	mov	r5, ip
    28d2:	402c      	ands	r4, r5
    28d4:	3701      	adds	r7, #1
				if (j != rxRingBufferTail)
    28d6:	5d85      	ldrb	r5, [r0, r6]
    28d8:	42a5      	cmp	r5, r4
    28da:	d008      	beq.n	28ee <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xde>
				{
					// push into FIFO
					rxRingBuffer[rxRingBufferHead] = frm[i];
    28dc:	783d      	ldrb	r5, [r7, #0]
    28de:	18c3      	adds	r3, r0, r3
    28e0:	3379      	adds	r3, #121	; 0x79
    28e2:	33ff      	adds	r3, #255	; 0xff
    28e4:	70dd      	strb	r5, [r3, #3]
					rxRingBufferHead = j;
    28e6:	b2e3      	uxtb	r3, r4
    28e8:	5443      	strb	r3, [r0, r1]
		else
		{
			// frame header does not exist
			// copy everything

			for (uint8_t i = 0; i < len; i++)
    28ea:	4297      	cmp	r7, r2
    28ec:	d1ef      	bne.n	28ce <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xbe>
					break;
				}
			}
		}

		return rxRingBuffer;
    28ee:	307c      	adds	r0, #124	; 0x7c
    28f0:	30ff      	adds	r0, #255	; 0xff
    28f2:	e009      	b.n	2908 <_ZN8cMxRadio14onReceiveFrameEhPhhah+0xf8>
	}
	else
	{
		// user event is attached so call it
		return zrEventReceiveFrame(len, frm, lqi, ed,crc_fail);
    28f4:	2400      	movs	r4, #0
    28f6:	9400      	str	r4, [sp, #0]
    28f8:	24a1      	movs	r4, #161	; 0xa1
    28fa:	00a4      	lsls	r4, r4, #2
    28fc:	5904      	ldr	r4, [r0, r4]
    28fe:	1c08      	adds	r0, r1, #0
    2900:	1c11      	adds	r1, r2, #0
    2902:	1c1a      	adds	r2, r3, #0
    2904:	1c2b      	adds	r3, r5, #0
    2906:	47a0      	blx	r4
	}
}
    2908:	b002      	add	sp, #8
    290a:	bc1c      	pop	{r2, r3, r4}
    290c:	4690      	mov	r8, r2
    290e:	4699      	mov	r9, r3
    2910:	46a2      	mov	sl, r4
    2912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2914:	0000027d 	.word	0x0000027d
    2918:	0000027f 	.word	0x0000027f

0000291c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t>:
 * this should not be called by the user
 *
 * @param x one of the radio_tx_done_t enumerations indicating transmission success
 */
void cMxRadio::onTxDone(radio_tx_done_t x)
{
    291c:	b510      	push	{r4, lr}
    291e:	1c04      	adds	r4, r0, #0
	if (hasAttachedTxEvent)
    2920:	23a0      	movs	r3, #160	; 0xa0
    2922:	009b      	lsls	r3, r3, #2
    2924:	5cc3      	ldrb	r3, [r0, r3]
    2926:	2b00      	cmp	r3, #0
    2928:	d004      	beq.n	2934 <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x18>
	{
		zrEventTxDone(x);
    292a:	23a2      	movs	r3, #162	; 0xa2
    292c:	009b      	lsls	r3, r3, #2
    292e:	58c3      	ldr	r3, [r0, r3]
    2930:	1c08      	adds	r0, r1, #0
    2932:	4798      	blx	r3
	}

	txIsBusy = 0;
    2934:	2200      	movs	r2, #0
    2936:	4b01      	ldr	r3, [pc, #4]	; (293c <_ZN8cMxRadio8onTxDoneE15radio_tx_done_t+0x20>)
    2938:	54e2      	strb	r2, [r4, r3]
}
    293a:	bd10      	pop	{r4, pc}
    293c:	00000282 	.word	0x00000282

00002940 <_ZN8cMxRadioD1Ev>:
volatile uint8_t txIsBusy = 0;


cMxRadio::~cMxRadio()
{
}
    2940:	4770      	bx	lr
    2942:	46c0      	nop			; (mov r8, r8)

00002944 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_>:
// empty constructor, should not be called by user
cMxRadio::cMxRadio(PinName mosi, PinName miso, PinName sclk, PinName cs, PinName rst, PinName slp, PinName irq)
    2944:	b5f0      	push	{r4, r5, r6, r7, lr}
    2946:	4647      	mov	r7, r8
    2948:	b480      	push	{r7}
    294a:	b086      	sub	sp, #24
    294c:	1c05      	adds	r5, r0, #0
    294e:	a80c      	add	r0, sp, #48	; 0x30
    2950:	2600      	movs	r6, #0
    2952:	5786      	ldrsb	r6, [r0, r6]
    2954:	a80d      	add	r0, sp, #52	; 0x34
    2956:	2700      	movs	r7, #0
    2958:	57c7      	ldrsb	r7, [r0, r7]
    295a:	a80e      	add	r0, sp, #56	; 0x38
    295c:	7800      	ldrb	r0, [r0, #0]
    295e:	b240      	sxtb	r0, r0
    2960:	4680      	mov	r8, r0
:m_spi(mosi, miso, sclk), m_cs(cs), reset_pin(rst), sleep_pin(slp)//,irq_pin(irq)
    2962:	1c28      	adds	r0, r5, #0
    2964:	3014      	adds	r0, #20
    2966:	2401      	movs	r4, #1
    2968:	4264      	negs	r4, r4
    296a:	9400      	str	r4, [sp, #0]
    296c:	4c2c      	ldr	r4, [pc, #176]	; (2a20 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xdc>)
    296e:	47a0      	blx	r4
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    2970:	2400      	movs	r4, #0
    2972:	23a8      	movs	r3, #168	; 0xa8
    2974:	54ec      	strb	r4, [r5, r3]
    2976:	1c28      	adds	r0, r5, #0
    2978:	30a8      	adds	r0, #168	; 0xa8
    297a:	6044      	str	r4, [r0, #4]
    297c:	7204      	strb	r4, [r0, #8]
    297e:	7244      	strb	r4, [r0, #9]
    2980:	7284      	strb	r4, [r0, #10]
    2982:	60c4      	str	r4, [r0, #12]
    2984:	6104      	str	r4, [r0, #16]
    2986:	6144      	str	r4, [r0, #20]
    2988:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    298a:	1c31      	adds	r1, r6, #0
    298c:	4e25      	ldr	r6, [pc, #148]	; (2a24 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe0>)
    298e:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    2990:	23c4      	movs	r3, #196	; 0xc4
    2992:	54ec      	strb	r4, [r5, r3]
    2994:	1c28      	adds	r0, r5, #0
    2996:	30c4      	adds	r0, #196	; 0xc4
    2998:	6044      	str	r4, [r0, #4]
    299a:	7204      	strb	r4, [r0, #8]
    299c:	7244      	strb	r4, [r0, #9]
    299e:	7284      	strb	r4, [r0, #10]
    29a0:	60c4      	str	r4, [r0, #12]
    29a2:	6104      	str	r4, [r0, #16]
    29a4:	6144      	str	r4, [r0, #20]
    29a6:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    29a8:	1c39      	adds	r1, r7, #0
    29aa:	47b0      	blx	r6
public:
    /** Create a DigitalOut connected to the specified pin
     *
     *  @param pin DigitalOut pin to connect to
     */
    DigitalOut(PinName pin) : gpio() {
    29ac:	23e0      	movs	r3, #224	; 0xe0
    29ae:	54ec      	strb	r4, [r5, r3]
    29b0:	1c28      	adds	r0, r5, #0
    29b2:	30e0      	adds	r0, #224	; 0xe0
    29b4:	6044      	str	r4, [r0, #4]
    29b6:	7204      	strb	r4, [r0, #8]
    29b8:	7244      	strb	r4, [r0, #9]
    29ba:	7284      	strb	r4, [r0, #10]
    29bc:	60c4      	str	r4, [r0, #12]
    29be:	6104      	str	r4, [r0, #16]
    29c0:	6144      	str	r4, [r0, #20]
    29c2:	6184      	str	r4, [r0, #24]
        gpio_init_out(&gpio, pin);
    29c4:	4641      	mov	r1, r8
    29c6:	47b0      	blx	r6
{
	// default event handlers
	
	zrEventTxDone=0;
    29c8:	23a2      	movs	r3, #162	; 0xa2
    29ca:	009b      	lsls	r3, r3, #2
    29cc:	50ec      	str	r4, [r5, r3]
	zrEventReceiveFrame=0;
    29ce:	3b04      	subs	r3, #4
    29d0:	50ec      	str	r4, [r5, r3]
	temprssi=0;
    29d2:	702c      	strb	r4, [r5, #0]
	setautotx=false;
    29d4:	3308      	adds	r3, #8
    29d6:	54ec      	strb	r4, [r5, r3]
	setautorx=false;
    29d8:	4b13      	ldr	r3, [pc, #76]	; (2a28 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe4>)
    29da:	54ec      	strb	r4, [r5, r3]
	needack=false;
    29dc:	4b13      	ldr	r3, [pc, #76]	; (2a2c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xe8>)
    29de:	54ec      	strb	r4, [r5, r3]
	usedBeginTransmission = 0;
    29e0:	4b13      	ldr	r3, [pc, #76]	; (2a30 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xec>)
    29e2:	54ec      	strb	r4, [r5, r3]
	hasAttachedTxEvent = 0;
    29e4:	3b01      	subs	r3, #1
    29e6:	54ec      	strb	r4, [r5, r3]
	hasAttachedRxEvent = 0;
    29e8:	4b12      	ldr	r3, [pc, #72]	; (2a34 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf0>)
    29ea:	54ec      	strb	r4, [r5, r3]
	lastLqi = 0;
    29ec:	4b12      	ldr	r3, [pc, #72]	; (2a38 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf4>)
    29ee:	54ec      	strb	r4, [r5, r3]
	lastRssi = 0;
    29f0:	4b12      	ldr	r3, [pc, #72]	; (2a3c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xf8>)
    29f2:	54ec      	strb	r4, [r5, r3]
	txTmpBufferLength = 0;
    29f4:	3b02      	subs	r3, #2
    29f6:	54ec      	strb	r4, [r5, r3]
	rxRingBufferHead = 0;
    29f8:	23fc      	movs	r3, #252	; 0xfc
    29fa:	33ff      	adds	r3, #255	; 0xff
    29fc:	54ec      	strb	r4, [r5, r3]
	rxRingBufferTail = 0;
    29fe:	3301      	adds	r3, #1
    2a00:	54ec      	strb	r4, [r5, r3]
	user_radio_tx_done=0;
	user_radio_receive_frame=0;
	user_radio_irq=0;
	user_radio_error=0;
	*/
	zr_attach_receive_frame(&cMxRadio::onReceiveFrame);
    2a02:	1c28      	adds	r0, r5, #0
    2a04:	490e      	ldr	r1, [pc, #56]	; (2a40 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0xfc>)
    2a06:	2200      	movs	r2, #0
    2a08:	4b0e      	ldr	r3, [pc, #56]	; (2a44 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x100>)
    2a0a:	4798      	blx	r3
	zr_attach_tx_done(&cMxRadio::onTxDone);
    2a0c:	1c28      	adds	r0, r5, #0
    2a0e:	490e      	ldr	r1, [pc, #56]	; (2a48 <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x104>)
    2a10:	2200      	movs	r2, #0
    2a12:	4b0e      	ldr	r3, [pc, #56]	; (2a4c <_ZN8cMxRadioC1E7PinNameS0_S0_S0_S0_S0_S0_+0x108>)
    2a14:	4798      	blx	r3

}
    2a16:	1c28      	adds	r0, r5, #0
    2a18:	b006      	add	sp, #24
    2a1a:	bc04      	pop	{r2}
    2a1c:	4690      	mov	r8, r2
    2a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a20:	00004f8d 	.word	0x00004f8d
    2a24:	000053ad 	.word	0x000053ad
    2a28:	0000028d 	.word	0x0000028d
    2a2c:	0000028e 	.word	0x0000028e
    2a30:	00000281 	.word	0x00000281
    2a34:	0000027f 	.word	0x0000027f
    2a38:	0000027d 	.word	0x0000027d
    2a3c:	0000027e 	.word	0x0000027e
    2a40:	00002811 	.word	0x00002811
    2a44:	00002741 	.word	0x00002741
    2a48:	0000291d 	.word	0x0000291d
    2a4c:	00002759 	.word	0x00002759

00002a50 <_ZN8cMxRadio5beginEaPh>:
 *
 * @param chan channel number for the radio to use, 11 to 26
 * @param frameHeader HeadSize byte custom frame header
 */
void cMxRadio::begin(channel_t chan, uint8_t* frameHeader)
{
    2a50:	b570      	push	{r4, r5, r6, lr}
    2a52:	1c06      	adds	r6, r0, #0
    2a54:	1c0d      	adds	r5, r1, #0
    2a56:	1c14      	adds	r4, r2, #0
	radio_init(rxFrameBuffer, MAX_FRAME_SIZE);
    2a58:	1c01      	adds	r1, r0, #0
    2a5a:	31fc      	adds	r1, #252	; 0xfc
    2a5c:	227f      	movs	r2, #127	; 0x7f
    2a5e:	4b20      	ldr	r3, [pc, #128]	; (2ae0 <_ZN8cMxRadio5beginEaPh+0x90>)
    2a60:	4798      	blx	r3

	if (frameHeader)
    2a62:	2c00      	cmp	r4, #0
    2a64:	d00c      	beq.n	2a80 <_ZN8cMxRadio5beginEaPh+0x30>
    2a66:	1c22      	adds	r2, r4, #0
    2a68:	1c33      	adds	r3, r6, #0
    2a6a:	33fe      	adds	r3, #254	; 0xfe
    2a6c:	33ff      	adds	r3, #255	; 0xff
    2a6e:	491d      	ldr	r1, [pc, #116]	; (2ae4 <_ZN8cMxRadio5beginEaPh+0x94>)
    2a70:	1870      	adds	r0, r6, r1
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
			txTmpBuffer[i] = frameHeader[i];
    2a72:	7811      	ldrb	r1, [r2, #0]
    2a74:	7019      	strb	r1, [r3, #0]
    2a76:	3201      	adds	r2, #1
    2a78:	3301      	adds	r3, #1

	if (frameHeader)
	{
		// copy custom frame header
		int i;
		for (i = 0; i < HeadSize; i++)
    2a7a:	4283      	cmp	r3, r0
    2a7c:	d1f9      	bne.n	2a72 <_ZN8cMxRadio5beginEaPh+0x22>
    2a7e:	e01b      	b.n	2ab8 <_ZN8cMxRadio5beginEaPh+0x68>
			txTmpBuffer[i] = frameHeader[i];
	}
	else
	{
		txTmpBuffer[0] = 0x41;
    2a80:	2241      	movs	r2, #65	; 0x41
    2a82:	23fe      	movs	r3, #254	; 0xfe
    2a84:	33ff      	adds	r3, #255	; 0xff
    2a86:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[1] = 0x88;
    2a88:	3247      	adds	r2, #71	; 0x47
    2a8a:	3301      	adds	r3, #1
    2a8c:	54f2      	strb	r2, [r6, r3]
		txTmpBuffer[2] =  0;
    2a8e:	2300      	movs	r3, #0
    2a90:	4a15      	ldr	r2, [pc, #84]	; (2ae8 <_ZN8cMxRadio5beginEaPh+0x98>)
    2a92:	54b3      	strb	r3, [r6, r2]
		txTmpBuffer[3]=0xCD;
    2a94:	21cd      	movs	r1, #205	; 0xcd
    2a96:	3201      	adds	r2, #1
    2a98:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[4]=0xAB;
    2a9a:	3922      	subs	r1, #34	; 0x22
    2a9c:	4a13      	ldr	r2, [pc, #76]	; (2aec <_ZN8cMxRadio5beginEaPh+0x9c>)
    2a9e:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[5] = 0xFF; //dest address low byte
    2aa0:	3a03      	subs	r2, #3
    2aa2:	3aff      	subs	r2, #255	; 0xff
    2aa4:	4912      	ldr	r1, [pc, #72]	; (2af0 <_ZN8cMxRadio5beginEaPh+0xa0>)
    2aa6:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[6] = 0xFF; //dest address hight byte
    2aa8:	4912      	ldr	r1, [pc, #72]	; (2af4 <_ZN8cMxRadio5beginEaPh+0xa4>)
    2aaa:	5472      	strb	r2, [r6, r1]
		txTmpBuffer[7] = 0x01;;
    2aac:	2101      	movs	r1, #1
    2aae:	3206      	adds	r2, #6
    2ab0:	32ff      	adds	r2, #255	; 0xff
    2ab2:	54b1      	strb	r1, [r6, r2]
		txTmpBuffer[8] = 0x00;;
    2ab4:	4a10      	ldr	r2, [pc, #64]	; (2af8 <_ZN8cMxRadio5beginEaPh+0xa8>)
    2ab6:	54b3      	strb	r3, [r6, r2]
 */
typedef union radio_param_t
{
#if defined __cplusplus
public:
    radio_param_t(int8_t c) { channel = c; } /* also used for txpwr_t */
    2ab8:	b2ea      	uxtb	r2, r5
	}

	// set the channel
	radio_set_param(RP_CHANNEL(chan));
    2aba:	1c30      	adds	r0, r6, #0
    2abc:	2100      	movs	r1, #0
    2abe:	4b0f      	ldr	r3, [pc, #60]	; (2afc <_ZN8cMxRadio5beginEaPh+0xac>)
    2ac0:	4798      	blx	r3

	// default to receiver
	if (setautorx)
    2ac2:	4b0f      	ldr	r3, [pc, #60]	; (2b00 <_ZN8cMxRadio5beginEaPh+0xb0>)
    2ac4:	5cf3      	ldrb	r3, [r6, r3]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d004      	beq.n	2ad4 <_ZN8cMxRadio5beginEaPh+0x84>
		radio_set_state(STATE_RXAUTO);
    2aca:	1c30      	adds	r0, r6, #0
    2acc:	2104      	movs	r1, #4
    2ace:	4b0d      	ldr	r3, [pc, #52]	; (2b04 <_ZN8cMxRadio5beginEaPh+0xb4>)
    2ad0:	4798      	blx	r3
    2ad2:	e003      	b.n	2adc <_ZN8cMxRadio5beginEaPh+0x8c>
	else
		radio_set_state(STATE_RX);
    2ad4:	1c30      	adds	r0, r6, #0
    2ad6:	2102      	movs	r1, #2
    2ad8:	4b0a      	ldr	r3, [pc, #40]	; (2b04 <_ZN8cMxRadio5beginEaPh+0xb4>)
    2ada:	4798      	blx	r3

#ifdef ENABLE_DIG3_DIG4
	trx_bit_write(SR_PA_EXT_EN, 1);
#endif

}
    2adc:	bd70      	pop	{r4, r5, r6, pc}
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	00002fb1 	.word	0x00002fb1
    2ae4:	00000206 	.word	0x00000206
    2ae8:	000001ff 	.word	0x000001ff
    2aec:	00000201 	.word	0x00000201
    2af0:	00000202 	.word	0x00000202
    2af4:	00000203 	.word	0x00000203
    2af8:	00000205 	.word	0x00000205
    2afc:	000032f1 	.word	0x000032f1
    2b00:	0000028d 	.word	0x0000028d
    2b04:	000030a1 	.word	0x000030a1

00002b08 <_ZN8cMxRadio5beginEa>:
 * Then it sets the channel number and defaults to RX state.
 *
 * @param chan the channel number for the radio to use, 11 to 26
 */
void cMxRadio::begin(channel_t chan)
{
    2b08:	b508      	push	{r3, lr}
	begin(chan, 0);
    2b0a:	2200      	movs	r2, #0
    2b0c:	4b01      	ldr	r3, [pc, #4]	; (2b14 <_ZN8cMxRadio5beginEa+0xc>)
    2b0e:	4798      	blx	r3
}
    2b10:	bd08      	pop	{r3, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	00002a51 	.word	0x00002a51

00002b18 <_ZN8cMxRadio11attachErrorEPFv13radio_error_tE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachError(void (*funct)(radio_error_t))
{
	user_radio_error = funct;
    2b18:	23a4      	movs	r3, #164	; 0xa4
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	50c1      	str	r1, [r0, r3]
}
    2b1e:	4770      	bx	lr

00002b20 <_ZN8cMxRadio9attachIrqEPFvhE>:
 *
 * @param funct the function pointer to the event handler
 */
void cMxRadio::attachIrq(void (*funct)(uint8_t))
{
	user_radio_irq = funct;
    2b20:	23a5      	movs	r3, #165	; 0xa5
    2b22:	009b      	lsls	r3, r3, #2
    2b24:	50c1      	str	r1, [r0, r3]
}
    2b26:	4770      	bx	lr

00002b28 <_ZN8cMxRadio5flushEv>:
 *
 * Flush the RX FIFO ring buffer
 */
void cMxRadio::flush()
{
	rxRingBufferHead = rxRingBufferTail;
    2b28:	23fe      	movs	r3, #254	; 0xfe
    2b2a:	005b      	lsls	r3, r3, #1
    2b2c:	5cc2      	ldrb	r2, [r0, r3]
    2b2e:	23fc      	movs	r3, #252	; 0xfc
    2b30:	33ff      	adds	r3, #255	; 0xff
    2b32:	54c2      	strb	r2, [r0, r3]
}
    2b34:	4770      	bx	lr
    2b36:	46c0      	nop			; (mov r8, r8)

00002b38 <_ZN8cMxRadio4readEv>:
 * @return the next byte, or -1 if buffer is empty
 */
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
    2b38:	23fe      	movs	r3, #254	; 0xfe
    2b3a:	005b      	lsls	r3, r3, #1
    2b3c:	5cc3      	ldrb	r3, [r0, r3]
    2b3e:	22fc      	movs	r2, #252	; 0xfc
    2b40:	32ff      	adds	r2, #255	; 0xff
    2b42:	5c82      	ldrb	r2, [r0, r2]
    2b44:	429a      	cmp	r2, r3
    2b46:	d00b      	beq.n	2b60 <_ZN8cMxRadio4readEv+0x28>
	{
		return -1;
	}
	else
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
    2b48:	18c2      	adds	r2, r0, r3
    2b4a:	3279      	adds	r2, #121	; 0x79
    2b4c:	32ff      	adds	r2, #255	; 0xff
    2b4e:	78d2      	ldrb	r2, [r2, #3]
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
    2b50:	3301      	adds	r3, #1
    2b52:	217f      	movs	r1, #127	; 0x7f
    2b54:	400b      	ands	r3, r1
    2b56:	317e      	adds	r1, #126	; 0x7e
    2b58:	31ff      	adds	r1, #255	; 0xff
    2b5a:	5443      	strb	r3, [r0, r1]
		return c;
    2b5c:	b290      	uxth	r0, r2
    2b5e:	e000      	b.n	2b62 <_ZN8cMxRadio4readEv+0x2a>
int16_t cMxRadio::read()
{
	// if the head isn't ahead of the tail, we don't have any characters
	if (rxRingBufferHead == rxRingBufferTail)
	{
		return -1;
    2b60:	4801      	ldr	r0, [pc, #4]	; (2b68 <_ZN8cMxRadio4readEv+0x30>)
    2b62:	b200      	sxth	r0, r0
	{
		uint8_t c = rxRingBuffer[rxRingBufferTail];
		rxRingBufferTail = (rxRingBufferTail + 1) % ZR_FIFO_SIZE; // pop
		return c;
	}
}
    2b64:	4770      	bx	lr
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	0000ffff 	.word	0x0000ffff

00002b6c <_ZN8cMxRadio9availableEv>:
 *
 * @return how many bytes are in the RX FIFO ring buffer
 */
int8_t cMxRadio::available()
{
	return ((int16_t)((int16_t)ZR_FIFO_SIZE + (int16_t)rxRingBufferHead - (int16_t)rxRingBufferTail)) % ZR_FIFO_SIZE;
    2b6c:	23fc      	movs	r3, #252	; 0xfc
    2b6e:	33ff      	adds	r3, #255	; 0xff
    2b70:	5cc3      	ldrb	r3, [r0, r3]
    2b72:	3380      	adds	r3, #128	; 0x80
    2b74:	22fe      	movs	r2, #254	; 0xfe
    2b76:	0052      	lsls	r2, r2, #1
    2b78:	5c80      	ldrb	r0, [r0, r2]
    2b7a:	1a1b      	subs	r3, r3, r0
    2b7c:	17d8      	asrs	r0, r3, #31
    2b7e:	0e42      	lsrs	r2, r0, #25
    2b80:	189b      	adds	r3, r3, r2
    2b82:	207f      	movs	r0, #127	; 0x7f
    2b84:	4003      	ands	r3, r0
    2b86:	1a98      	subs	r0, r3, r2
    2b88:	b240      	sxtb	r0, r0
}
    2b8a:	4770      	bx	lr

00002b8c <_ZN8cMxRadio17beginTransmissionEv>:
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    2b8c:	2201      	movs	r2, #1
    2b8e:	4b07      	ldr	r3, [pc, #28]	; (2bac <_ZN8cMxRadio17beginTransmissionEv+0x20>)
    2b90:	54c2      	strb	r2, [r0, r3]
	txTmpBuffer[5]= 0xFF;
    2b92:	3b83      	subs	r3, #131	; 0x83
    2b94:	3bff      	subs	r3, #255	; 0xff
    2b96:	4a06      	ldr	r2, [pc, #24]	; (2bb0 <_ZN8cMxRadio17beginTransmissionEv+0x24>)
    2b98:	5483      	strb	r3, [r0, r2]
	txTmpBuffer[6]= 0XFF;
    2b9a:	4a06      	ldr	r2, [pc, #24]	; (2bb4 <_ZN8cMxRadio17beginTransmissionEv+0x28>)
    2b9c:	5483      	strb	r3, [r0, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    2b9e:	3afb      	subs	r2, #251	; 0xfb
    2ba0:	3aff      	subs	r2, #255	; 0xff
    2ba2:	337e      	adds	r3, #126	; 0x7e
    2ba4:	33ff      	adds	r3, #255	; 0xff
    2ba6:	54c2      	strb	r2, [r0, r3]
}
    2ba8:	4770      	bx	lr
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	00000281 	.word	0x00000281
    2bb0:	00000202 	.word	0x00000202
    2bb4:	00000203 	.word	0x00000203

00002bb8 <_ZN8cMxRadio10waitTxDoneEt>:
 * waits until the last transmission is complete, or timed out
 *
 * @param timeout iterations to countdown before timeout
 */
void cMxRadio::waitTxDone(uint16_t timeout)
{
    2bb8:	b510      	push	{r4, lr}
    2bba:	b082      	sub	sp, #8
	volatile uint16_t cnt = timeout;
    2bbc:	466b      	mov	r3, sp
    2bbe:	80d9      	strh	r1, [r3, #6]
	while (txIsBusy && cnt--);
    2bc0:	4c07      	ldr	r4, [pc, #28]	; (2be0 <_ZN8cMxRadio10waitTxDoneEt+0x28>)
    2bc2:	466b      	mov	r3, sp
    2bc4:	1d99      	adds	r1, r3, #6
    2bc6:	5d03      	ldrb	r3, [r0, r4]
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d006      	beq.n	2bda <_ZN8cMxRadio10waitTxDoneEt+0x22>
    2bcc:	880b      	ldrh	r3, [r1, #0]
    2bce:	b29b      	uxth	r3, r3
    2bd0:	1e5a      	subs	r2, r3, #1
    2bd2:	b292      	uxth	r2, r2
    2bd4:	800a      	strh	r2, [r1, #0]
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d1f5      	bne.n	2bc6 <_ZN8cMxRadio10waitTxDoneEt+0xe>
}
    2bda:	b002      	add	sp, #8
    2bdc:	bd10      	pop	{r4, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	00000282 	.word	0x00000282

00002be4 <_ZN8cMxRadio15endTransmissionEv>:
 *
 * Finalize the payload and transmits it when ready
 *
 */
void cMxRadio::endTransmission()
{
    2be4:	b538      	push	{r3, r4, r5, lr}
    2be6:	1c04      	adds	r4, r0, #0
	usedBeginTransmission = 0;
    2be8:	2200      	movs	r2, #0
    2bea:	4b28      	ldr	r3, [pc, #160]	; (2c8c <_ZN8cMxRadio15endTransmissionEv+0xa8>)
    2bec:	54c2      	strb	r2, [r0, r3]

	// empty FCS field
	txTmpBufferLength += 2;
    2bee:	229f      	movs	r2, #159	; 0x9f
    2bf0:	0092      	lsls	r2, r2, #2
    2bf2:	5c83      	ldrb	r3, [r0, r2]
    2bf4:	3302      	adds	r3, #2
    2bf6:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
	waitTxDone(0xFFFF);
    2bf8:	4925      	ldr	r1, [pc, #148]	; (2c90 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    2bfa:	4b26      	ldr	r3, [pc, #152]	; (2c94 <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    2bfc:	4798      	blx	r3
#endif
	txIsBusy = 1;
    2bfe:	2201      	movs	r2, #1
    2c00:	4b25      	ldr	r3, [pc, #148]	; (2c98 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    2c02:	54e2      	strb	r2, [r4, r3]
	if (setautotx)
    2c04:	330a      	adds	r3, #10
    2c06:	5ce3      	ldrb	r3, [r4, r3]
    2c08:	2b00      	cmp	r3, #0
    2c0a:	d004      	beq.n	2c16 <_ZN8cMxRadio15endTransmissionEv+0x32>
		radio_set_state(STATE_TXAUTO);
    2c0c:	1c20      	adds	r0, r4, #0
    2c0e:	2103      	movs	r1, #3
    2c10:	4b22      	ldr	r3, [pc, #136]	; (2c9c <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2c12:	4798      	blx	r3
    2c14:	e003      	b.n	2c1e <_ZN8cMxRadio15endTransmissionEv+0x3a>
	else
		radio_set_state(STATE_TX);
    2c16:	1c20      	adds	r0, r4, #0
    2c18:	2101      	movs	r1, #1
    2c1a:	4b20      	ldr	r3, [pc, #128]	; (2c9c <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2c1c:	4798      	blx	r3
	ZR_RFTX_LED_ON();
	//if broadcase ,cant need ack
	if(txTmpBuffer[5]==0xff && txTmpBuffer[5]==0xff)
    2c1e:	4b20      	ldr	r3, [pc, #128]	; (2ca0 <_ZN8cMxRadio15endTransmissionEv+0xbc>)
    2c20:	5ce3      	ldrb	r3, [r4, r3]
    2c22:	2bff      	cmp	r3, #255	; 0xff
    2c24:	d106      	bne.n	2c34 <_ZN8cMxRadio15endTransmissionEv+0x50>
		txTmpBuffer[0]=txTmpBuffer[0]&0xdf;
    2c26:	22fe      	movs	r2, #254	; 0xfe
    2c28:	32ff      	adds	r2, #255	; 0xff
    2c2a:	5ca3      	ldrb	r3, [r4, r2]
    2c2c:	2120      	movs	r1, #32
    2c2e:	438b      	bics	r3, r1
    2c30:	54a3      	strb	r3, [r4, r2]
    2c32:	e00c      	b.n	2c4e <_ZN8cMxRadio15endTransmissionEv+0x6a>
	else
	{
		if(!needack)
    2c34:	4b1b      	ldr	r3, [pc, #108]	; (2ca4 <_ZN8cMxRadio15endTransmissionEv+0xc0>)
    2c36:	5ce3      	ldrb	r3, [r4, r3]
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d104      	bne.n	2c46 <_ZN8cMxRadio15endTransmissionEv+0x62>
			txTmpBuffer[0] = 0x41;
    2c3c:	2241      	movs	r2, #65	; 0x41
    2c3e:	23fe      	movs	r3, #254	; 0xfe
    2c40:	33ff      	adds	r3, #255	; 0xff
    2c42:	54e2      	strb	r2, [r4, r3]
    2c44:	e003      	b.n	2c4e <_ZN8cMxRadio15endTransmissionEv+0x6a>
		else
			txTmpBuffer[0] = 0x61; //ack required
    2c46:	2261      	movs	r2, #97	; 0x61
    2c48:	23fe      	movs	r3, #254	; 0xfe
    2c4a:	33ff      	adds	r3, #255	; 0xff
    2c4c:	54e2      	strb	r2, [r4, r3]
	}
	radio_send_frame(txTmpBufferLength, txTmpBuffer, 0);
    2c4e:	239f      	movs	r3, #159	; 0x9f
    2c50:	009b      	lsls	r3, r3, #2
    2c52:	5ce1      	ldrb	r1, [r4, r3]
    2c54:	1c20      	adds	r0, r4, #0
    2c56:	1c22      	adds	r2, r4, #0
    2c58:	32fe      	adds	r2, #254	; 0xfe
    2c5a:	32ff      	adds	r2, #255	; 0xff
    2c5c:	2300      	movs	r3, #0
    2c5e:	4d12      	ldr	r5, [pc, #72]	; (2ca8 <_ZN8cMxRadio15endTransmissionEv+0xc4>)
    2c60:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
	waitTxDone(0xFFFF);
    2c62:	1c20      	adds	r0, r4, #0
    2c64:	490a      	ldr	r1, [pc, #40]	; (2c90 <_ZN8cMxRadio15endTransmissionEv+0xac>)
    2c66:	4b0b      	ldr	r3, [pc, #44]	; (2c94 <_ZN8cMxRadio15endTransmissionEv+0xb0>)
    2c68:	4798      	blx	r3
	if (setautorx)
    2c6a:	4b10      	ldr	r3, [pc, #64]	; (2cac <_ZN8cMxRadio15endTransmissionEv+0xc8>)
    2c6c:	5ce3      	ldrb	r3, [r4, r3]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d004      	beq.n	2c7c <_ZN8cMxRadio15endTransmissionEv+0x98>
		radio_set_state(STATE_RXAUTO);
    2c72:	1c20      	adds	r0, r4, #0
    2c74:	2104      	movs	r1, #4
    2c76:	4b09      	ldr	r3, [pc, #36]	; (2c9c <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2c78:	4798      	blx	r3
    2c7a:	e003      	b.n	2c84 <_ZN8cMxRadio15endTransmissionEv+0xa0>
	else
		radio_set_state(STATE_RX);
    2c7c:	1c20      	adds	r0, r4, #0
    2c7e:	2102      	movs	r1, #2
    2c80:	4b06      	ldr	r3, [pc, #24]	; (2c9c <_ZN8cMxRadio15endTransmissionEv+0xb8>)
    2c82:	4798      	blx	r3
	txIsBusy = 0;
    2c84:	2200      	movs	r2, #0
    2c86:	4b04      	ldr	r3, [pc, #16]	; (2c98 <_ZN8cMxRadio15endTransmissionEv+0xb4>)
    2c88:	54e2      	strb	r2, [r4, r3]
#endif
}
    2c8a:	bd38      	pop	{r3, r4, r5, pc}
    2c8c:	00000281 	.word	0x00000281
    2c90:	0000ffff 	.word	0x0000ffff
    2c94:	00002bb9 	.word	0x00002bb9
    2c98:	00000282 	.word	0x00000282
    2c9c:	000030a1 	.word	0x000030a1
    2ca0:	00000202 	.word	0x00000202
    2ca4:	0000028e 	.word	0x0000028e
    2ca8:	000033f5 	.word	0x000033f5
    2cac:	0000028d 	.word	0x0000028d

00002cb0 <_ZN8cMxRadio5writeEh>:
 * If "beginTrasmission" was not used, then it transmits the single byte immediately (slower for multiple bytes)
 *
 * @param c character to be sent
 */
void cMxRadio::write(uint8_t c)
{
    2cb0:	b538      	push	{r3, r4, r5, lr}
    2cb2:	1c04      	adds	r4, r0, #0
	if (usedBeginTransmission)
    2cb4:	4b2d      	ldr	r3, [pc, #180]	; (2d6c <_ZN8cMxRadio5writeEh+0xbc>)
    2cb6:	5cc3      	ldrb	r3, [r0, r3]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d020      	beq.n	2cfe <_ZN8cMxRadio5writeEh+0x4e>
	{
		if (txTmpBufferLength < ZR_TXTMPBUFF_SIZE - 2)
    2cbc:	239f      	movs	r3, #159	; 0x9f
    2cbe:	009b      	lsls	r3, r3, #2
    2cc0:	5cc3      	ldrb	r3, [r0, r3]
    2cc2:	2b7c      	cmp	r3, #124	; 0x7c
    2cc4:	d851      	bhi.n	2d6a <_ZN8cMxRadio5writeEh+0xba>
		{
			txTmpBuffer[txTmpBufferLength] = c;
    2cc6:	18c2      	adds	r2, r0, r3
    2cc8:	32f9      	adds	r2, #249	; 0xf9
    2cca:	32ff      	adds	r2, #255	; 0xff
    2ccc:	7151      	strb	r1, [r2, #5]
			txTmpBufferLength++;
    2cce:	3301      	adds	r3, #1
    2cd0:	b2db      	uxtb	r3, r3
    2cd2:	229f      	movs	r2, #159	; 0x9f
    2cd4:	0092      	lsls	r2, r2, #2
    2cd6:	5483      	strb	r3, [r0, r2]

			if (txTmpBufferLength >= ZR_TXTMPBUFF_SIZE - 2)
    2cd8:	2b7c      	cmp	r3, #124	; 0x7c
    2cda:	d946      	bls.n	2d6a <_ZN8cMxRadio5writeEh+0xba>
			{
				// buffer is now full
				// just send it all out so we have more room
				endTransmission();
    2cdc:	4b24      	ldr	r3, [pc, #144]	; (2d70 <_ZN8cMxRadio5writeEh+0xc0>)
    2cde:	4798      	blx	r3
 * Non-immediate mode sends multiple bytes per frame
 *
 */
void cMxRadio::beginTransmission()
{
	usedBeginTransmission = 1;
    2ce0:	2201      	movs	r2, #1
    2ce2:	4b22      	ldr	r3, [pc, #136]	; (2d6c <_ZN8cMxRadio5writeEh+0xbc>)
    2ce4:	54e2      	strb	r2, [r4, r3]
	txTmpBuffer[5]= 0xFF;
    2ce6:	3b83      	subs	r3, #131	; 0x83
    2ce8:	3bff      	subs	r3, #255	; 0xff
    2cea:	4a22      	ldr	r2, [pc, #136]	; (2d74 <_ZN8cMxRadio5writeEh+0xc4>)
    2cec:	54a3      	strb	r3, [r4, r2]
	txTmpBuffer[6]= 0XFF;
    2cee:	4a22      	ldr	r2, [pc, #136]	; (2d78 <_ZN8cMxRadio5writeEh+0xc8>)
    2cf0:	54a3      	strb	r3, [r4, r2]
	// add frame header
	txTmpBufferLength = HeadSize;
    2cf2:	3afb      	subs	r2, #251	; 0xfb
    2cf4:	3aff      	subs	r2, #255	; 0xff
    2cf6:	337e      	adds	r3, #126	; 0x7e
    2cf8:	33ff      	adds	r3, #255	; 0xff
    2cfa:	54e2      	strb	r2, [r4, r3]
    2cfc:	e035      	b.n	2d6a <_ZN8cMxRadio5writeEh+0xba>
			}
		}
	}
	else
	{
		txTmpBuffer[HeadSize] = c; // set payload
    2cfe:	4b1f      	ldr	r3, [pc, #124]	; (2d7c <_ZN8cMxRadio5writeEh+0xcc>)
    2d00:	54c1      	strb	r1, [r0, r3]
		txTmpBuffer[HeadSize+1] = 0; // empty FCS
    2d02:	2300      	movs	r3, #0
    2d04:	4a1e      	ldr	r2, [pc, #120]	; (2d80 <_ZN8cMxRadio5writeEh+0xd0>)
    2d06:	5483      	strb	r3, [r0, r2]
		txTmpBuffer[HeadSize+2] = 0; // empty FCS
    2d08:	3201      	adds	r2, #1
    2d0a:	5483      	strb	r3, [r0, r2]

#ifdef ZR_TXWAIT_BEFORE
		waitTxDone(0xFFFF);
    2d0c:	491d      	ldr	r1, [pc, #116]	; (2d84 <_ZN8cMxRadio5writeEh+0xd4>)
    2d0e:	4b1e      	ldr	r3, [pc, #120]	; (2d88 <_ZN8cMxRadio5writeEh+0xd8>)
    2d10:	4798      	blx	r3
#endif
		txIsBusy = 1;
    2d12:	2201      	movs	r2, #1
    2d14:	4b1d      	ldr	r3, [pc, #116]	; (2d8c <_ZN8cMxRadio5writeEh+0xdc>)
    2d16:	54e2      	strb	r2, [r4, r3]
		if (setautotx)
    2d18:	330a      	adds	r3, #10
    2d1a:	5ce3      	ldrb	r3, [r4, r3]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d004      	beq.n	2d2a <_ZN8cMxRadio5writeEh+0x7a>
			radio_set_state(STATE_TXAUTO);
    2d20:	1c20      	adds	r0, r4, #0
    2d22:	2103      	movs	r1, #3
    2d24:	4b1a      	ldr	r3, [pc, #104]	; (2d90 <_ZN8cMxRadio5writeEh+0xe0>)
    2d26:	4798      	blx	r3
    2d28:	e003      	b.n	2d32 <_ZN8cMxRadio5writeEh+0x82>
		else
			radio_set_state(STATE_TX);
    2d2a:	1c20      	adds	r0, r4, #0
    2d2c:	2101      	movs	r1, #1
    2d2e:	4b18      	ldr	r3, [pc, #96]	; (2d90 <_ZN8cMxRadio5writeEh+0xe0>)
    2d30:	4798      	blx	r3
		ZR_RFTX_LED_ON();
		radio_send_frame(10, txTmpBuffer, 0);
    2d32:	1c20      	adds	r0, r4, #0
    2d34:	210a      	movs	r1, #10
    2d36:	1c22      	adds	r2, r4, #0
    2d38:	32fe      	adds	r2, #254	; 0xfe
    2d3a:	32ff      	adds	r2, #255	; 0xff
    2d3c:	2300      	movs	r3, #0
    2d3e:	4d15      	ldr	r5, [pc, #84]	; (2d94 <_ZN8cMxRadio5writeEh+0xe4>)
    2d40:	47a8      	blx	r5
#ifdef ZR_TXWAIT_AFTER
		waitTxDone(0xFFFF);
    2d42:	1c20      	adds	r0, r4, #0
    2d44:	490f      	ldr	r1, [pc, #60]	; (2d84 <_ZN8cMxRadio5writeEh+0xd4>)
    2d46:	4b10      	ldr	r3, [pc, #64]	; (2d88 <_ZN8cMxRadio5writeEh+0xd8>)
    2d48:	4798      	blx	r3
		if (setautorx)
    2d4a:	4b13      	ldr	r3, [pc, #76]	; (2d98 <_ZN8cMxRadio5writeEh+0xe8>)
    2d4c:	5ce3      	ldrb	r3, [r4, r3]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d004      	beq.n	2d5c <_ZN8cMxRadio5writeEh+0xac>
			radio_set_state(STATE_RXAUTO);
    2d52:	1c20      	adds	r0, r4, #0
    2d54:	2104      	movs	r1, #4
    2d56:	4b0e      	ldr	r3, [pc, #56]	; (2d90 <_ZN8cMxRadio5writeEh+0xe0>)
    2d58:	4798      	blx	r3
    2d5a:	e003      	b.n	2d64 <_ZN8cMxRadio5writeEh+0xb4>
		else
			radio_set_state(STATE_RX);
    2d5c:	1c20      	adds	r0, r4, #0
    2d5e:	2102      	movs	r1, #2
    2d60:	4b0b      	ldr	r3, [pc, #44]	; (2d90 <_ZN8cMxRadio5writeEh+0xe0>)
    2d62:	4798      	blx	r3
		txIsBusy = 0;
    2d64:	2200      	movs	r2, #0
    2d66:	4b09      	ldr	r3, [pc, #36]	; (2d8c <_ZN8cMxRadio5writeEh+0xdc>)
    2d68:	54e2      	strb	r2, [r4, r3]
#endif
	}
}
    2d6a:	bd38      	pop	{r3, r4, r5, pc}
    2d6c:	00000281 	.word	0x00000281
    2d70:	00002be5 	.word	0x00002be5
    2d74:	00000202 	.word	0x00000202
    2d78:	00000203 	.word	0x00000203
    2d7c:	00000206 	.word	0x00000206
    2d80:	00000207 	.word	0x00000207
    2d84:	0000ffff 	.word	0x0000ffff
    2d88:	00002bb9 	.word	0x00002bb9
    2d8c:	00000282 	.word	0x00000282
    2d90:	000030a1 	.word	0x000030a1
    2d94:	000033f5 	.word	0x000033f5
    2d98:	0000028d 	.word	0x0000028d

00002d9c <_ZN8cMxRadio5writeEPhh>:
 *
 * @param arr data array to be sent
 * @param len length of data array
 */
void cMxRadio::write(uint8_t* arr, uint8_t len)
{
    2d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i;
	for (i = 0; i < len; i++)
    2d9e:	2a00      	cmp	r2, #0
    2da0:	d00c      	beq.n	2dbc <_ZN8cMxRadio5writeEPhh+0x20>
    2da2:	1c06      	adds	r6, r0, #0
    2da4:	1c0c      	adds	r4, r1, #0
    2da6:	1e55      	subs	r5, r2, #1
    2da8:	b2ed      	uxtb	r5, r5
    2daa:	3501      	adds	r5, #1
    2dac:	194d      	adds	r5, r1, r5
		write(arr[i]);
    2dae:	4f04      	ldr	r7, [pc, #16]	; (2dc0 <_ZN8cMxRadio5writeEPhh+0x24>)
    2db0:	7821      	ldrb	r1, [r4, #0]
    2db2:	1c30      	adds	r0, r6, #0
    2db4:	47b8      	blx	r7
    2db6:	3401      	adds	r4, #1
 * @param len length of data array
 */
void cMxRadio::write(uint8_t* arr, uint8_t len)
{
	uint8_t i;
	for (i = 0; i < len; i++)
    2db8:	42ac      	cmp	r4, r5
    2dba:	d1f9      	bne.n	2db0 <_ZN8cMxRadio5writeEPhh+0x14>
		write(arr[i]);
}
    2dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	00002cb1 	.word	0x00002cb1

00002dc4 <_Z8IRQradiov>:
/* === Includes ============================================================ */
#include <MxRadio.h>

cMxRadio* gRadio = NULL;

void IRQradio(void){
    2dc4:	b508      	push	{r3, lr}
	gRadio->rf_irq_callback();
    2dc6:	4b02      	ldr	r3, [pc, #8]	; (2dd0 <_Z8IRQradiov+0xc>)
    2dc8:	6818      	ldr	r0, [r3, #0]
    2dca:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <_Z8IRQradiov+0x10>)
    2dcc:	4798      	blx	r3
}
    2dce:	bd08      	pop	{r3, pc}
    2dd0:	20004238 	.word	0x20004238
    2dd4:	000034cd 	.word	0x000034cd

00002dd8 <_ZN8cMxRadio11trx_io_initEi>:
/* === external functions =================================================== */
void cMxRadio::trx_io_init (int spirate)
{
    2dd8:	b570      	push	{r4, r5, r6, lr}
    2dda:	b084      	sub	sp, #16
    2ddc:	1c05      	adds	r5, r0, #0
    2dde:	1c0e      	adds	r6, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2de0:	23a8      	movs	r3, #168	; 0xa8
    2de2:	56c3      	ldrsb	r3, [r0, r3]
    2de4:	3301      	adds	r3, #1
    2de6:	d104      	bne.n	2df2 <_ZN8cMxRadio11trx_io_initEi+0x1a>
    2de8:	4818      	ldr	r0, [pc, #96]	; (2e4c <_ZN8cMxRadio11trx_io_initEi+0x74>)
    2dea:	4919      	ldr	r1, [pc, #100]	; (2e50 <_ZN8cMxRadio11trx_io_initEi+0x78>)
    2dec:	2228      	movs	r2, #40	; 0x28
    2dee:	4b19      	ldr	r3, [pc, #100]	; (2e54 <_ZN8cMxRadio11trx_io_initEi+0x7c>)
    2df0:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2df2:	1c2b      	adds	r3, r5, #0
    2df4:	33a8      	adds	r3, #168	; 0xa8
    2df6:	691a      	ldr	r2, [r3, #16]
    2df8:	685b      	ldr	r3, [r3, #4]
    2dfa:	6013      	str	r3, [r2, #0]

	m_cs = 1;
	m_spi.format(8, 0);
    2dfc:	1c2c      	adds	r4, r5, #0
    2dfe:	3414      	adds	r4, #20
    2e00:	1c20      	adds	r0, r4, #0
    2e02:	2108      	movs	r1, #8
    2e04:	2200      	movs	r2, #0
    2e06:	4b14      	ldr	r3, [pc, #80]	; (2e58 <_ZN8cMxRadio11trx_io_initEi+0x80>)
    2e08:	4798      	blx	r3
	m_spi.frequency(spirate);
    2e0a:	1c20      	adds	r0, r4, #0
    2e0c:	1c31      	adds	r1, r6, #0
    2e0e:	4b13      	ldr	r3, [pc, #76]	; (2e5c <_ZN8cMxRadio11trx_io_initEi+0x84>)
    2e10:	4798      	blx	r3
	/////////////////////////////////////////////////////////////////////
	/////modification BM irq_pin.rise(this,&cMxRadio::rf_irq_callback);
	//////////////////////////////////////////////////////////////////////
	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    2e12:	ac01      	add	r4, sp, #4
    2e14:	1c20      	adds	r0, r4, #0
    2e16:	4b12      	ldr	r3, [pc, #72]	; (2e60 <_ZN8cMxRadio11trx_io_initEi+0x88>)
    2e18:	4798      	blx	r3
	// put the button as EXTINT
	eint_chan_conf.gpio_pin           = PIN_PB00A_EIC_EXTINT0;
    2e1a:	2320      	movs	r3, #32
    2e1c:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = MUX_PB00A_EIC_EXTINT0 ;
    2e1e:	2300      	movs	r3, #0
    2e20:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_RISING;
    2e22:	2201      	movs	r2, #1
    2e24:	72e2      	strb	r2, [r4, #11]
	eint_chan_conf.filter_input_signal = false;
    2e26:	72a3      	strb	r3, [r4, #10]
		
	extint_chan_set_config(0, &eint_chan_conf);
    2e28:	2000      	movs	r0, #0
    2e2a:	1c21      	adds	r1, r4, #0
    2e2c:	4b0d      	ldr	r3, [pc, #52]	; (2e64 <_ZN8cMxRadio11trx_io_initEi+0x8c>)
    2e2e:	4798      	blx	r3
	//configuration callback
	gRadio = this;
    2e30:	4b0d      	ldr	r3, [pc, #52]	; (2e68 <_ZN8cMxRadio11trx_io_initEi+0x90>)
    2e32:	601d      	str	r5, [r3, #0]
	extint_register_callback(&IRQradio,0,EXTINT_CALLBACK_TYPE_DETECT);
    2e34:	480d      	ldr	r0, [pc, #52]	; (2e6c <_ZN8cMxRadio11trx_io_initEi+0x94>)
    2e36:	2100      	movs	r1, #0
    2e38:	2200      	movs	r2, #0
    2e3a:	4b0d      	ldr	r3, [pc, #52]	; (2e70 <_ZN8cMxRadio11trx_io_initEi+0x98>)
    2e3c:	4798      	blx	r3
	//InterruptManager::get()->add_handler(ppsISR, EIC_IRQn);
	//ppsIsrr.attach(&ppsISR);
	//activation callback
		extint_chan_enable_callback(0,EXTINT_CALLBACK_TYPE_DETECT);		
    2e3e:	2000      	movs	r0, #0
    2e40:	2100      	movs	r1, #0
    2e42:	4b0c      	ldr	r3, [pc, #48]	; (2e74 <_ZN8cMxRadio11trx_io_initEi+0x9c>)
    2e44:	4798      	blx	r3
	TRX_SLPTR_INIT();
	SPI_INIT(spirate);
	TRX_IRQ_INIT();
	EI_TRX_IRQ();
	*/
}
    2e46:	b004      	add	sp, #16
    2e48:	bd70      	pop	{r4, r5, r6, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	0000e35c 	.word	0x0000e35c
    2e50:	0000e374 	.word	0x0000e374
    2e54:	00005389 	.word	0x00005389
    2e58:	0000508d 	.word	0x0000508d
    2e5c:	000050a9 	.word	0x000050a9
    2e60:	000041a5 	.word	0x000041a5
    2e64:	000041b9 	.word	0x000041b9
    2e68:	20004238 	.word	0x20004238
    2e6c:	00002dc5 	.word	0x00002dc5
    2e70:	000040a5 	.word	0x000040a5
    2e74:	000040cd 	.word	0x000040cd

00002e78 <_ZN8cMxRadio13trx_reg_writeEhh>:

void cMxRadio::trx_reg_write(uint8_t addr, trx_regval_t val)
{
    2e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e7a:	1c04      	adds	r4, r0, #0
    2e7c:	1c17      	adds	r7, r2, #0

	addr = TRX_CMD_RW | (TRX_CMD_RADDR_MASK & addr);
    2e7e:	23c0      	movs	r3, #192	; 0xc0
    2e80:	4319      	orrs	r1, r3
    2e82:	1c0d      	adds	r5, r1, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2e84:	3b18      	subs	r3, #24
    2e86:	56c3      	ldrsb	r3, [r0, r3]
    2e88:	3301      	adds	r3, #1
    2e8a:	d104      	bne.n	2e96 <_ZN8cMxRadio13trx_reg_writeEhh+0x1e>
    2e8c:	4810      	ldr	r0, [pc, #64]	; (2ed0 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    2e8e:	4911      	ldr	r1, [pc, #68]	; (2ed4 <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    2e90:	2228      	movs	r2, #40	; 0x28
    2e92:	4b11      	ldr	r3, [pc, #68]	; (2ed8 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    2e94:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2e96:	1c23      	adds	r3, r4, #0
    2e98:	33a8      	adds	r3, #168	; 0xa8
    2e9a:	68da      	ldr	r2, [r3, #12]
    2e9c:	685b      	ldr	r3, [r3, #4]
    2e9e:	6013      	str	r3, [r2, #0]

	m_cs = 0;//SPI_SELN_LOW();
	m_spi.write(addr);//SPI_DATA_REG = addr;
    2ea0:	1c26      	adds	r6, r4, #0
    2ea2:	3614      	adds	r6, #20
    2ea4:	1c30      	adds	r0, r6, #0
    2ea6:	1c29      	adds	r1, r5, #0
    2ea8:	4d0c      	ldr	r5, [pc, #48]	; (2edc <_ZN8cMxRadio13trx_reg_writeEhh+0x64>)
    2eaa:	47a8      	blx	r5
	//SPI_WAITFOR();
	m_spi.write(val);//SPI_DATA_REG = val;
    2eac:	1c30      	adds	r0, r6, #0
    2eae:	1c39      	adds	r1, r7, #0
    2eb0:	47a8      	blx	r5
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2eb2:	23a8      	movs	r3, #168	; 0xa8
    2eb4:	56e3      	ldrsb	r3, [r4, r3]
    2eb6:	3301      	adds	r3, #1
    2eb8:	d104      	bne.n	2ec4 <_ZN8cMxRadio13trx_reg_writeEhh+0x4c>
    2eba:	4805      	ldr	r0, [pc, #20]	; (2ed0 <_ZN8cMxRadio13trx_reg_writeEhh+0x58>)
    2ebc:	4905      	ldr	r1, [pc, #20]	; (2ed4 <_ZN8cMxRadio13trx_reg_writeEhh+0x5c>)
    2ebe:	2228      	movs	r2, #40	; 0x28
    2ec0:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <_ZN8cMxRadio13trx_reg_writeEhh+0x60>)
    2ec2:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2ec4:	34a8      	adds	r4, #168	; 0xa8
    2ec6:	6923      	ldr	r3, [r4, #16]
    2ec8:	6862      	ldr	r2, [r4, #4]
    2eca:	601a      	str	r2, [r3, #0]
	//SPI_WAITFOR();
	m_cs = 1;//SPI_SELN_HIGH();
}
    2ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	0000e35c 	.word	0x0000e35c
    2ed4:	0000e374 	.word	0x0000e374
    2ed8:	00005389 	.word	0x00005389
    2edc:	000050c1 	.word	0x000050c1

00002ee0 <_ZN8cMxRadio12trx_reg_readEh>:

trx_regval_t cMxRadio::trx_reg_read(uint8_t addr)
{
    2ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee2:	1c04      	adds	r4, r0, #0

	uint8_t val;

	addr=TRX_CMD_RR | (TRX_CMD_RADDR_MASK & addr);
    2ee4:	253f      	movs	r5, #63	; 0x3f
    2ee6:	4029      	ands	r1, r5
    2ee8:	3541      	adds	r5, #65	; 0x41
    2eea:	430d      	orrs	r5, r1
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2eec:	23a8      	movs	r3, #168	; 0xa8
    2eee:	56c3      	ldrsb	r3, [r0, r3]
    2ef0:	3301      	adds	r3, #1
    2ef2:	d104      	bne.n	2efe <_ZN8cMxRadio12trx_reg_readEh+0x1e>
    2ef4:	4811      	ldr	r0, [pc, #68]	; (2f3c <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2ef6:	4912      	ldr	r1, [pc, #72]	; (2f40 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2ef8:	2228      	movs	r2, #40	; 0x28
    2efa:	4b12      	ldr	r3, [pc, #72]	; (2f44 <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2efc:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2efe:	1c23      	adds	r3, r4, #0
    2f00:	33a8      	adds	r3, #168	; 0xa8
    2f02:	68da      	ldr	r2, [r3, #12]
    2f04:	685b      	ldr	r3, [r3, #4]
    2f06:	6013      	str	r3, [r2, #0]

	// Select transceiver
	m_cs = 0;//SPI_SELN_LOW();

	m_spi.write(addr);//SPI_DATA_REG = addr;
    2f08:	1c27      	adds	r7, r4, #0
    2f0a:	3714      	adds	r7, #20
    2f0c:	1c38      	adds	r0, r7, #0
    2f0e:	1c29      	adds	r1, r5, #0
    2f10:	4e0d      	ldr	r6, [pc, #52]	; (2f48 <_ZN8cMxRadio12trx_reg_readEh+0x68>)
    2f12:	47b0      	blx	r6
	//SPI_WAITFOR();
	val=m_spi.write(addr);//SPI_DATA_REG = addr;        /* dummy out */
    2f14:	1c38      	adds	r0, r7, #0
    2f16:	1c29      	adds	r1, r5, #0
    2f18:	47b0      	blx	r6
    2f1a:	b2c5      	uxtb	r5, r0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2f1c:	23a8      	movs	r3, #168	; 0xa8
    2f1e:	56e3      	ldrsb	r3, [r4, r3]
    2f20:	3301      	adds	r3, #1
    2f22:	d104      	bne.n	2f2e <_ZN8cMxRadio12trx_reg_readEh+0x4e>
    2f24:	4805      	ldr	r0, [pc, #20]	; (2f3c <_ZN8cMxRadio12trx_reg_readEh+0x5c>)
    2f26:	4906      	ldr	r1, [pc, #24]	; (2f40 <_ZN8cMxRadio12trx_reg_readEh+0x60>)
    2f28:	2228      	movs	r2, #40	; 0x28
    2f2a:	4b06      	ldr	r3, [pc, #24]	; (2f44 <_ZN8cMxRadio12trx_reg_readEh+0x64>)
    2f2c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    2f2e:	34a8      	adds	r4, #168	; 0xa8
    2f30:	6923      	ldr	r3, [r4, #16]
    2f32:	6862      	ldr	r2, [r4, #4]
    2f34:	601a      	str	r2, [r3, #0]
	//val = SPI_DATA_REG;

	m_cs=1;//SPI_SELN_HIGH();

	return (trx_regval_t)val;
}
    2f36:	1c28      	adds	r0, r5, #0
    2f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	0000e35c 	.word	0x0000e35c
    2f40:	0000e374 	.word	0x0000e374
    2f44:	00005389 	.word	0x00005389
    2f48:	000050c1 	.word	0x000050c1

00002f4c <_ZN8cMxRadio19radio_receive_frameEv>:
/**
 * @brief Frame reception
 *
 */
void cMxRadio::radio_receive_frame(void)
{
    2f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4e:	b087      	sub	sp, #28
    2f50:	1c04      	adds	r4, r0, #0

	uint8_t len, lqi, crc_fail;
	int8_t ed;

	/* @todo add RSSI_BASE_VALUE to get a dBm value */
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
    2f52:	2107      	movs	r1, #7
    2f54:	4b12      	ldr	r3, [pc, #72]	; (2fa0 <_ZN8cMxRadio19radio_receive_frameEv+0x54>)
    2f56:	4798      	blx	r3
    2f58:	9003      	str	r0, [sp, #12]
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
    2f5a:	7c22      	ldrb	r2, [r4, #16]
    2f5c:	270f      	movs	r7, #15
    2f5e:	ab02      	add	r3, sp, #8
    2f60:	469c      	mov	ip, r3
    2f62:	4467      	add	r7, ip
    2f64:	1c20      	adds	r0, r4, #0
    2f66:	68e1      	ldr	r1, [r4, #12]
    2f68:	1c3b      	adds	r3, r7, #0
    2f6a:	4d0e      	ldr	r5, [pc, #56]	; (2fa4 <_ZN8cMxRadio19radio_receive_frameEv+0x58>)
    2f6c:	47a8      	blx	r5
    2f6e:	1c05      	adds	r5, r0, #0
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    2f70:	1c20      	adds	r0, r4, #0
    2f72:	2106      	movs	r1, #6
    2f74:	2280      	movs	r2, #128	; 0x80
    2f76:	2307      	movs	r3, #7
    2f78:	4e0b      	ldr	r6, [pc, #44]	; (2fa8 <_ZN8cMxRadio19radio_receive_frameEv+0x5c>)
    2f7a:	47b0      	blx	r6
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    2f7c:	217f      	movs	r1, #127	; 0x7f
    2f7e:	4029      	ands	r1, r5
    2f80:	783b      	ldrb	r3, [r7, #0]
    2f82:	466a      	mov	r2, sp
    2f84:	260c      	movs	r6, #12
    2f86:	5796      	ldrsb	r6, [r2, r6]
    2f88:	9600      	str	r6, [sp, #0]
	ed = (int8_t)trx_reg_read(RG_PHY_ED_LEVEL);
	len = trx_frame_read(radiostatus.rxframe, radiostatus.rxframesz, &lqi);
	len &= ~0x80;

#if defined(SR_RX_CRC_VALID)
	crc_fail = trx_bit_read(SR_RX_CRC_VALID) ? 0 : 1;
    2f8a:	4242      	negs	r2, r0
    2f8c:	4142      	adcs	r2, r0
		crc = CRC_CCITT_UPDATE(crc, *frm++);
	}
	crc_fail = (crc == 0)? 0: 1;
#endif
radiostatus.rxframe = usr_radio_receive_frame(len, radiostatus.rxframe,
		lqi, ed, crc_fail);
    2f8e:	9201      	str	r2, [sp, #4]
    2f90:	1c20      	adds	r0, r4, #0
    2f92:	68e2      	ldr	r2, [r4, #12]
    2f94:	4d05      	ldr	r5, [pc, #20]	; (2fac <_ZN8cMxRadio19radio_receive_frameEv+0x60>)
    2f96:	47a8      	blx	r5
    2f98:	60e0      	str	r0, [r4, #12]
}
    2f9a:	b007      	add	sp, #28
    2f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	00002ee1 	.word	0x00002ee1
    2fa4:	000035c9 	.word	0x000035c9
    2fa8:	00003459 	.word	0x00003459
    2fac:	00002799 	.word	0x00002799

00002fb0 <_ZN8cMxRadio10radio_initEPhh>:


/* === external functions ====================================================*/

void cMxRadio::radio_init(uint8_t * rxbuf, uint8_t rxbufsz)
{
    2fb0:	b530      	push	{r4, r5, lr}
    2fb2:	b083      	sub	sp, #12
    2fb4:	1c04      	adds	r4, r0, #0
	trx_regval_t status;
	/* init cpu peripherals and global IRQ enable */
	radiostatus.rxframe = rxbuf;
    2fb6:	60c1      	str	r1, [r0, #12]
	radiostatus.rxframesz = rxbufsz;
    2fb8:	7402      	strb	r2, [r0, #16]
	trx_io_init(1000000);
    2fba:	492f      	ldr	r1, [pc, #188]	; (3078 <_ZN8cMxRadio10radio_initEPhh+0xc8>)
    2fbc:	4b2f      	ldr	r3, [pc, #188]	; (307c <_ZN8cMxRadio10radio_initEPhh+0xcc>)
    2fbe:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2fc0:	23c4      	movs	r3, #196	; 0xc4
    2fc2:	56e3      	ldrsb	r3, [r4, r3]
    2fc4:	3301      	adds	r3, #1
    2fc6:	d104      	bne.n	2fd2 <_ZN8cMxRadio10radio_initEPhh+0x22>
    2fc8:	482d      	ldr	r0, [pc, #180]	; (3080 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2fca:	492e      	ldr	r1, [pc, #184]	; (3084 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2fcc:	2228      	movs	r2, #40	; 0x28
    2fce:	4b2e      	ldr	r3, [pc, #184]	; (3088 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2fd0:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2fd2:	1c23      	adds	r3, r4, #0
    2fd4:	33c4      	adds	r3, #196	; 0xc4
    2fd6:	68da      	ldr	r2, [r3, #12]
    2fd8:	685b      	ldr	r3, [r3, #4]
    2fda:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2fdc:	23e0      	movs	r3, #224	; 0xe0
    2fde:	56e3      	ldrsb	r3, [r4, r3]
    2fe0:	3301      	adds	r3, #1
    2fe2:	d104      	bne.n	2fee <_ZN8cMxRadio10radio_initEPhh+0x3e>
    2fe4:	4826      	ldr	r0, [pc, #152]	; (3080 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    2fe6:	4927      	ldr	r1, [pc, #156]	; (3084 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    2fe8:	2228      	movs	r2, #40	; 0x28
    2fea:	4b27      	ldr	r3, [pc, #156]	; (3088 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    2fec:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    2fee:	1c23      	adds	r3, r4, #0
    2ff0:	33e0      	adds	r3, #224	; 0xe0
    2ff2:	68da      	ldr	r2, [r3, #12]
    2ff4:	685b      	ldr	r3, [r3, #4]
    2ff6:	6013      	str	r3, [r2, #0]
	/* transceiver initialization */

	reset_pin=0;//TRX_RESET_LOW();
	sleep_pin=0;//TRX_SLPTR_LOW();
	DELAY_US(TRX_RESET_TIME_US);
    2ff8:	2006      	movs	r0, #6
    2ffa:	4b24      	ldr	r3, [pc, #144]	; (308c <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    2ffc:	4798      	blx	r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    2ffe:	23c4      	movs	r3, #196	; 0xc4
    3000:	56e3      	ldrsb	r3, [r4, r3]
    3002:	3301      	adds	r3, #1
    3004:	d104      	bne.n	3010 <_ZN8cMxRadio10radio_initEPhh+0x60>
    3006:	481e      	ldr	r0, [pc, #120]	; (3080 <_ZN8cMxRadio10radio_initEPhh+0xd0>)
    3008:	491e      	ldr	r1, [pc, #120]	; (3084 <_ZN8cMxRadio10radio_initEPhh+0xd4>)
    300a:	2228      	movs	r2, #40	; 0x28
    300c:	4b1e      	ldr	r3, [pc, #120]	; (3088 <_ZN8cMxRadio10radio_initEPhh+0xd8>)
    300e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3010:	1c23      	adds	r3, r4, #0
    3012:	33c4      	adds	r3, #196	; 0xc4
    3014:	691a      	ldr	r2, [r3, #16]
    3016:	685b      	ldr	r3, [r3, #4]
    3018:	6013      	str	r3, [r2, #0]


//	if (trx_reg_read(RG_MAN_ID_0)==31) //atmel
//		m_myled=0;
	/* disable IRQ and clear any pending IRQs */
	trx_reg_write(RG_IRQ_MASK, 0);
    301a:	1c20      	adds	r0, r4, #0
    301c:	210e      	movs	r1, #14
    301e:	2200      	movs	r2, #0
    3020:	4b1b      	ldr	r3, [pc, #108]	; (3090 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    3022:	4798      	blx	r3

	trx_reg_read(RG_IRQ_STATUS);
    3024:	1c20      	adds	r0, r4, #0
    3026:	210f      	movs	r1, #15
    3028:	4b1a      	ldr	r3, [pc, #104]	; (3094 <_ZN8cMxRadio10radio_initEPhh+0xe4>)
    302a:	4798      	blx	r3
	DELAY_US(510);
#endif
	trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
	DELAY_US(510);
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
    302c:	2308      	movs	r3, #8
    302e:	9300      	str	r3, [sp, #0]
    3030:	1c20      	adds	r0, r4, #0
    3032:	2102      	movs	r1, #2
    3034:	221f      	movs	r2, #31
    3036:	2300      	movs	r3, #0
    3038:	4d17      	ldr	r5, [pc, #92]	; (3098 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    303a:	47a8      	blx	r5
	DELAY_US(510);
    303c:	20ff      	movs	r0, #255	; 0xff
    303e:	0040      	lsls	r0, r0, #1
    3040:	4b12      	ldr	r3, [pc, #72]	; (308c <_ZN8cMxRadio10radio_initEPhh+0xdc>)
    3042:	4798      	blx	r3
#endif

	do
	{
		status = trx_bit_read(SR_TRX_STATUS);
    3044:	4d15      	ldr	r5, [pc, #84]	; (309c <_ZN8cMxRadio10radio_initEPhh+0xec>)
    3046:	1c20      	adds	r0, r4, #0
    3048:	2101      	movs	r1, #1
    304a:	221f      	movs	r2, #31
    304c:	2300      	movs	r3, #0
    304e:	47a8      	blx	r5
#else
	trx_bit_write(SR_TRX_CMD, CMD_TRX_OFF);
	DELAY_US(510);
#endif

	do
    3050:	2808      	cmp	r0, #8
    3052:	d1f8      	bne.n	3046 <_ZN8cMxRadio10radio_initEPhh+0x96>
	{
		status = trx_bit_read(SR_TRX_STATUS);
	}
	while (status != TRX_OFF);
	trx_bit_write(SR_TX_AUTO_CRC_ON, 1);
    3054:	2301      	movs	r3, #1
    3056:	9300      	str	r3, [sp, #0]
    3058:	1c20      	adds	r0, r4, #0
    305a:	2104      	movs	r1, #4
    305c:	2220      	movs	r2, #32
    305e:	3304      	adds	r3, #4
    3060:	4d0d      	ldr	r5, [pc, #52]	; (3098 <_ZN8cMxRadio10radio_initEPhh+0xe8>)
    3062:	47a8      	blx	r5
	trx_reg_write(RG_IRQ_MASK, TRX_IRQ_RX_START | TRX_IRQ_TRX_END);
    3064:	1c20      	adds	r0, r4, #0
    3066:	210e      	movs	r1, #14
    3068:	220c      	movs	r2, #12
    306a:	4b09      	ldr	r3, [pc, #36]	; (3090 <_ZN8cMxRadio10radio_initEPhh+0xe0>)
    306c:	4798      	blx	r3

	radiostatus.state = STATE_OFF;
    306e:	2300      	movs	r3, #0
    3070:	71e3      	strb	r3, [r4, #7]
	radiostatus.idle_state = STATE_OFF;
    3072:	7223      	strb	r3, [r4, #8]
}
    3074:	b003      	add	sp, #12
    3076:	bd30      	pop	{r4, r5, pc}
    3078:	000f4240 	.word	0x000f4240
    307c:	00002dd9 	.word	0x00002dd9
    3080:	0000e35c 	.word	0x0000e35c
    3084:	0000e374 	.word	0x0000e374
    3088:	00005389 	.word	0x00005389
    308c:	00005469 	.word	0x00005469
    3090:	00002e79 	.word	0x00002e79
    3094:	00002ee1 	.word	0x00002ee1
    3098:	0000350d 	.word	0x0000350d
    309c:	00003459 	.word	0x00003459

000030a0 <_ZN8cMxRadio15radio_set_stateEh>:
	trx_bit_write(SR_TRX_CMD, CMD_FORCE_TRX_OFF);
	radio_set_state(state);
}

void cMxRadio::radio_set_state(volatile radio_state_t state)
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	464f      	mov	r7, r9
    30a4:	b480      	push	{r7}
    30a6:	b086      	sub	sp, #24
    30a8:	9002      	str	r0, [sp, #8]
    30aa:	230f      	movs	r3, #15
    30ac:	446b      	add	r3, sp
    30ae:	7019      	strb	r1, [r3, #0]
	volatile trx_regval_t cmd, expstatus, currstatus;
	uint8_t retries;
	bool do_sleep = false;

	switch(state)
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	b2db      	uxtb	r3, r3
    30b4:	2b05      	cmp	r3, #5
    30b6:	d83b      	bhi.n	3130 <_ZN8cMxRadio15radio_set_stateEh+0x90>
    30b8:	009b      	lsls	r3, r3, #2
    30ba:	4a65      	ldr	r2, [pc, #404]	; (3250 <_ZN8cMxRadio15radio_set_stateEh+0x1b0>)
    30bc:	58d3      	ldr	r3, [r2, r3]
    30be:	469f      	mov	pc, r3
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    30c0:	2308      	movs	r3, #8
    30c2:	2216      	movs	r2, #22
    30c4:	446a      	add	r2, sp
    30c6:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    30c8:	2215      	movs	r2, #21
    30ca:	446a      	add	r2, sp
    30cc:	7013      	strb	r3, [r2, #0]
		break;
    30ce:	e0b4      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		if (radiostatus.rx_lna)
		{
			TRX_RX_LNA_EI();
		}
#endif
expstatus = RX_ON;
    30d0:	2306      	movs	r3, #6
    30d2:	2216      	movs	r2, #22
    30d4:	446a      	add	r2, sp
    30d6:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_ON;
    30d8:	2215      	movs	r2, #21
    30da:	446a      	add	r2, sp
    30dc:	7013      	strb	r3, [r2, #0]
break;
    30de:	e0ac      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TX:
		expstatus = PLL_ON;
    30e0:	2309      	movs	r3, #9
    30e2:	2216      	movs	r2, #22
    30e4:	446a      	add	r2, sp
    30e6:	7013      	strb	r3, [r2, #0]
		cmd = CMD_PLL_ON;
    30e8:	2215      	movs	r2, #21
    30ea:	446a      	add	r2, sp
    30ec:	7013      	strb	r3, [r2, #0]
		break;
    30ee:	e0a4      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
if (radiostatus.rx_lna)
{
	TRX_RX_LNA_EI();
}
#endif
expstatus = RX_AACK_ON;
    30f0:	2316      	movs	r3, #22
    30f2:	2216      	movs	r2, #22
    30f4:	446a      	add	r2, sp
    30f6:	7013      	strb	r3, [r2, #0]
cmd = CMD_RX_AACK_ON;
    30f8:	2215      	movs	r2, #21
    30fa:	446a      	add	r2, sp
    30fc:	7013      	strb	r3, [r2, #0]
break;
    30fe:	e09c      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>

	case STATE_TXAUTO:
		expstatus = TX_ARET_ON;
    3100:	2319      	movs	r3, #25
    3102:	2216      	movs	r2, #22
    3104:	446a      	add	r2, sp
    3106:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TX_ARET_ON;
    3108:	2215      	movs	r2, #21
    310a:	446a      	add	r2, sp
    310c:	7013      	strb	r3, [r2, #0]
		break;
    310e:	e094      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
		TRX_TX_PA_DI();
#endif
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
    3110:	2208      	movs	r2, #8
    3112:	2316      	movs	r3, #22
    3114:	446b      	add	r3, sp
    3116:	701a      	strb	r2, [r3, #0]
		cmd = CMD_FORCE_TRX_OFF;
    3118:	3a05      	subs	r2, #5
    311a:	2315      	movs	r3, #21
    311c:	446b      	add	r3, sp
    311e:	701a      	strb	r2, [r3, #0]
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    3120:	9b02      	ldr	r3, [sp, #8]
    3122:	79db      	ldrb	r3, [r3, #7]
    3124:	2b05      	cmp	r3, #5
    3126:	d100      	bne.n	312a <_ZN8cMxRadio15radio_set_stateEh+0x8a>
    3128:	e08e      	b.n	3248 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
#ifdef TRX_RX_LNA_EI
		TRX_RX_LNA_DI();
#endif
		expstatus = TRX_OFF;
		cmd = CMD_FORCE_TRX_OFF;
		do_sleep = true;
    312a:	2301      	movs	r3, #1
    312c:	4699      	mov	r9, r3
    312e:	e03d      	b.n	31ac <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3130:	9802      	ldr	r0, [sp, #8]
    3132:	2104      	movs	r1, #4
    3134:	4b47      	ldr	r3, [pc, #284]	; (3254 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    3136:	4798      	blx	r3
		do_sleep = true;
		break;

	default:
		radio_error(GENERAL_ERROR);
		expstatus = TRX_OFF;
    3138:	2308      	movs	r3, #8
    313a:	2216      	movs	r2, #22
    313c:	446a      	add	r2, sp
    313e:	7013      	strb	r3, [r2, #0]
		cmd = CMD_TRX_OFF;
    3140:	2215      	movs	r2, #21
    3142:	446a      	add	r2, sp
    3144:	7013      	strb	r3, [r2, #0]
		break;
    3146:	e078      	b.n	323a <_ZN8cMxRadio15radio_set_stateEh+0x19a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3148:	23e0      	movs	r3, #224	; 0xe0
    314a:	9a02      	ldr	r2, [sp, #8]
    314c:	56d3      	ldrsb	r3, [r2, r3]
    314e:	3301      	adds	r3, #1
    3150:	d104      	bne.n	315c <_ZN8cMxRadio15radio_set_stateEh+0xbc>
    3152:	4841      	ldr	r0, [pc, #260]	; (3258 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    3154:	4941      	ldr	r1, [pc, #260]	; (325c <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    3156:	2228      	movs	r2, #40	; 0x28
    3158:	4b41      	ldr	r3, [pc, #260]	; (3260 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    315a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    315c:	9b02      	ldr	r3, [sp, #8]
    315e:	33e0      	adds	r3, #224	; 0xe0
    3160:	68da      	ldr	r2, [r3, #12]
    3162:	685b      	ldr	r3, [r3, #4]
    3164:	6013      	str	r3, [r2, #0]
		 * be polled.  The state reads as 0b0011111 ("state transition
		 * in progress") while the transceiver is still in its startup
		 * phase, which does not match any of the "expstatus" values,
		 * so polling just continues.
		 */
		DELAY_US(500);
    3166:	20fa      	movs	r0, #250	; 0xfa
    3168:	0040      	lsls	r0, r0, #1
    316a:	4b3e      	ldr	r3, [pc, #248]	; (3264 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
    316c:	4798      	blx	r3
    316e:	2464      	movs	r4, #100	; 0x64
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    3170:	4f3d      	ldr	r7, [pc, #244]	; (3268 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    3172:	2517      	movs	r5, #23
    3174:	446d      	add	r5, sp
			 */
			if (TRX_OFF == currstatus)
			{
				break;
			}
			DELAY_US(50);
    3176:	4e3b      	ldr	r6, [pc, #236]	; (3264 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
		{
			currstatus = trx_bit_read(SR_TRX_STATUS);
    3178:	9802      	ldr	r0, [sp, #8]
    317a:	2101      	movs	r1, #1
    317c:	221f      	movs	r2, #31
    317e:	2300      	movs	r3, #0
    3180:	47b8      	blx	r7
    3182:	7028      	strb	r0, [r5, #0]
			/*
			 * Sleep could only be entered from TRX_OFF, so that's
			 * what is expected again.
			 */
			if (TRX_OFF == currstatus)
    3184:	782b      	ldrb	r3, [r5, #0]
    3186:	2b08      	cmp	r3, #8
    3188:	d005      	beq.n	3196 <_ZN8cMxRadio15radio_set_stateEh+0xf6>
			{
				break;
			}
			DELAY_US(50);
    318a:	2032      	movs	r0, #50	; 0x32
    318c:	47b0      	blx	r6
    318e:	3c01      	subs	r4, #1
    3190:	b2e4      	uxtb	r4, r4
		 * to be charged by the voltage regulator.  Give the crystal
		 * oscillator some time to start up.  5 ms (100 * 50 us) ought
		 * to be enough under all circumstances.
		 */
		retries = 100;
		do
    3192:	2c00      	cmp	r4, #0
    3194:	d1f0      	bne.n	3178 <_ZN8cMxRadio15radio_set_stateEh+0xd8>
			}
			DELAY_US(50);
		}
		while (--retries);

		if (currstatus != TRX_OFF)
    3196:	2317      	movs	r3, #23
    3198:	446b      	add	r3, sp
    319a:	781b      	ldrb	r3, [r3, #0]
    319c:	2200      	movs	r2, #0
    319e:	4691      	mov	r9, r2
    31a0:	2b08      	cmp	r3, #8
    31a2:	d003      	beq.n	31ac <_ZN8cMxRadio15radio_set_stateEh+0x10c>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    31a4:	9802      	ldr	r0, [sp, #8]
    31a6:	2101      	movs	r1, #1
    31a8:	4b2a      	ldr	r3, [pc, #168]	; (3254 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    31aa:	4798      	blx	r3
		{
			/* radio didn't wake up */
			radio_error(STATE_SET_FAILED);
		}
	}
	trx_bit_write(SR_TRX_CMD, cmd);
    31ac:	2315      	movs	r3, #21
    31ae:	446b      	add	r3, sp
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	9300      	str	r3, [sp, #0]
    31b4:	9802      	ldr	r0, [sp, #8]
    31b6:	2102      	movs	r1, #2
    31b8:	221f      	movs	r2, #31
    31ba:	2300      	movs	r3, #0
    31bc:	4c2b      	ldr	r4, [pc, #172]	; (326c <_ZN8cMxRadio15radio_set_stateEh+0x1cc>)
    31be:	47a0      	blx	r4
    31c0:	248c      	movs	r4, #140	; 0x8c

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    31c2:	4f29      	ldr	r7, [pc, #164]	; (3268 <_ZN8cMxRadio15radio_set_stateEh+0x1c8>)
    31c4:	2517      	movs	r5, #23
    31c6:	446d      	add	r5, sp
		if (expstatus == currstatus)
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    31c8:	4e26      	ldr	r6, [pc, #152]	; (3264 <_ZN8cMxRadio15radio_set_stateEh+0x1c4>)

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
	{
		currstatus = trx_bit_read(SR_TRX_STATUS);
    31ca:	9802      	ldr	r0, [sp, #8]
    31cc:	2101      	movs	r1, #1
    31ce:	221f      	movs	r2, #31
    31d0:	2300      	movs	r3, #0
    31d2:	47b8      	blx	r7
    31d4:	7028      	strb	r0, [r5, #0]
		if (expstatus == currstatus)
    31d6:	2316      	movs	r3, #22
    31d8:	446b      	add	r3, sp
    31da:	781b      	ldrb	r3, [r3, #0]
    31dc:	782a      	ldrb	r2, [r5, #0]
    31de:	b2db      	uxtb	r3, r3
    31e0:	4293      	cmp	r3, r2
    31e2:	d005      	beq.n	31f0 <_ZN8cMxRadio15radio_set_stateEh+0x150>
		{
			break;
		}
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
    31e4:	2020      	movs	r0, #32
    31e6:	47b0      	blx	r6
    31e8:	3c01      	subs	r4, #1
    31ea:	b2e4      	uxtb	r4, r4
	}
	trx_bit_write(SR_TRX_CMD, cmd);

	retries = 140;              /* enough to await an ongoing frame
	 * reception */
	do
    31ec:	2c00      	cmp	r4, #0
    31ee:	d1ec      	bne.n	31ca <_ZN8cMxRadio15radio_set_stateEh+0x12a>
		/** @todo must wait longer for 790/868/900 MHz radios */
		DELAY_US(32);
	}
	while (--retries);

	if (expstatus != currstatus)
    31f0:	2316      	movs	r3, #22
    31f2:	446b      	add	r3, sp
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2217      	movs	r2, #23
    31f8:	446a      	add	r2, sp
    31fa:	7812      	ldrb	r2, [r2, #0]
    31fc:	b2db      	uxtb	r3, r3
    31fe:	4293      	cmp	r3, r2
    3200:	d003      	beq.n	320a <_ZN8cMxRadio15radio_set_stateEh+0x16a>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3202:	9802      	ldr	r0, [sp, #8]
    3204:	2101      	movs	r1, #1
    3206:	4b13      	ldr	r3, [pc, #76]	; (3254 <_ZN8cMxRadio15radio_set_stateEh+0x1b4>)
    3208:	4798      	blx	r3
	if (expstatus != currstatus)
	{
		radio_error(STATE_SET_FAILED);
	}

	if (do_sleep)
    320a:	464b      	mov	r3, r9
    320c:	2b00      	cmp	r3, #0
    320e:	d00e      	beq.n	322e <_ZN8cMxRadio15radio_set_stateEh+0x18e>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3210:	23e0      	movs	r3, #224	; 0xe0
    3212:	9a02      	ldr	r2, [sp, #8]
    3214:	56d3      	ldrsb	r3, [r2, r3]
    3216:	3301      	adds	r3, #1
    3218:	d104      	bne.n	3224 <_ZN8cMxRadio15radio_set_stateEh+0x184>
    321a:	480f      	ldr	r0, [pc, #60]	; (3258 <_ZN8cMxRadio15radio_set_stateEh+0x1b8>)
    321c:	490f      	ldr	r1, [pc, #60]	; (325c <_ZN8cMxRadio15radio_set_stateEh+0x1bc>)
    321e:	2228      	movs	r2, #40	; 0x28
    3220:	4b0f      	ldr	r3, [pc, #60]	; (3260 <_ZN8cMxRadio15radio_set_stateEh+0x1c0>)
    3222:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3224:	9b02      	ldr	r3, [sp, #8]
    3226:	33e0      	adds	r3, #224	; 0xe0
    3228:	691a      	ldr	r2, [r3, #16]
    322a:	685b      	ldr	r3, [r3, #4]
    322c:	6013      	str	r3, [r2, #0]
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
    322e:	230f      	movs	r3, #15
    3230:	446b      	add	r3, sp
    3232:	781b      	ldrb	r3, [r3, #0]
    3234:	9a02      	ldr	r2, [sp, #8]
    3236:	71d3      	strb	r3, [r2, #7]
    3238:	e006      	b.n	3248 <_ZN8cMxRadio15radio_set_stateEh+0x1a8>
		cmd = CMD_TRX_OFF;
		break;

	}

	if (STATE_SLEEP == radiostatus.state)
    323a:	9b02      	ldr	r3, [sp, #8]
    323c:	79db      	ldrb	r3, [r3, #7]
    323e:	2b05      	cmp	r3, #5
    3240:	d082      	beq.n	3148 <_ZN8cMxRadio15radio_set_stateEh+0xa8>
    3242:	2300      	movs	r3, #0
    3244:	4699      	mov	r9, r3
    3246:	e7b1      	b.n	31ac <_ZN8cMxRadio15radio_set_stateEh+0x10c>
	{
		sleep_pin=1;//TRX_SLPTR_HIGH();
	}

	radiostatus.state = state;
}
    3248:	b006      	add	sp, #24
    324a:	bc04      	pop	{r2}
    324c:	4691      	mov	r9, r2
    324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3250:	0000e744 	.word	0x0000e744
    3254:	00002771 	.word	0x00002771
    3258:	0000e35c 	.word	0x0000e35c
    325c:	0000e374 	.word	0x0000e374
    3260:	00005389 	.word	0x00005389
    3264:	00005469 	.word	0x00005469
    3268:	00003459 	.word	0x00003459
    326c:	0000350d 	.word	0x0000350d

00003270 <_ZN8cMxRadio17radio_irq_handlerEh>:
 *
 * @parm cause  value of the interrupt status register
 *
 */
void cMxRadio::radio_irq_handler(uint8_t cause)
{
    3270:	b570      	push	{r4, r5, r6, lr}
    3272:	1c04      	adds	r4, r0, #0
    3274:	1c0d      	adds	r5, r1, #0
	if (cause & TRX_IRQ_TRX_END)
    3276:	070b      	lsls	r3, r1, #28
    3278:	d52b      	bpl.n	32d2 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
	{
		if (STATE_RX == radiostatus.state ||
    327a:	79c3      	ldrb	r3, [r0, #7]
    327c:	1e99      	subs	r1, r3, #2
    327e:	22fd      	movs	r2, #253	; 0xfd
    3280:	4211      	tst	r1, r2
    3282:	d102      	bne.n	328a <_ZN8cMxRadio17radio_irq_handlerEh+0x1a>
				STATE_RXAUTO == radiostatus.state)
		{
			radio_receive_frame();
    3284:	4b15      	ldr	r3, [pc, #84]	; (32dc <_ZN8cMxRadio17radio_irq_handlerEh+0x6c>)
    3286:	4798      	blx	r3
    3288:	e023      	b.n	32d2 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TX == radiostatus.state)
    328a:	2b01      	cmp	r3, #1
    328c:	d107      	bne.n	329e <_ZN8cMxRadio17radio_irq_handlerEh+0x2e>
		{
#ifdef TRX_TX_PA_EI
TRX_TX_PA_DI();
#endif
usr_radio_tx_done(TX_OK);
    328e:	2100      	movs	r1, #0
    3290:	4b13      	ldr	r3, [pc, #76]	; (32e0 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    3292:	4798      	blx	r3
radio_set_state(radiostatus.idle_state);
    3294:	7a21      	ldrb	r1, [r4, #8]
    3296:	1c20      	adds	r0, r4, #0
    3298:	4b12      	ldr	r3, [pc, #72]	; (32e4 <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    329a:	4798      	blx	r3
    329c:	e019      	b.n	32d2 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		}
		else if (STATE_TXAUTO == radiostatus.state)
    329e:	2b03      	cmp	r3, #3
    32a0:	d117      	bne.n	32d2 <_ZN8cMxRadio17radio_irq_handlerEh+0x62>
		{
#ifdef TRX_TX_PA_EI
			TRX_TX_PA_DI();
#endif
			uint8_t trac_status = trx_bit_read(SR_TRAC_STATUS);
    32a2:	2102      	movs	r1, #2
    32a4:	22e0      	movs	r2, #224	; 0xe0
    32a6:	3302      	adds	r3, #2
    32a8:	4e0f      	ldr	r6, [pc, #60]	; (32e8 <_ZN8cMxRadio17radio_irq_handlerEh+0x78>)
    32aa:	47b0      	blx	r6
			radio_tx_done_t result;
			switch (trac_status)
    32ac:	2803      	cmp	r0, #3
    32ae:	d006      	beq.n	32be <_ZN8cMxRadio17radio_irq_handlerEh+0x4e>
    32b0:	d307      	bcc.n	32c2 <_ZN8cMxRadio17radio_irq_handlerEh+0x52>
			case TRAC_NO_ACK:
				result = TX_NO_ACK;
				break;

			default:
				result = TX_FAIL;
    32b2:	3805      	subs	r0, #5
    32b4:	4243      	negs	r3, r0
    32b6:	4143      	adcs	r3, r0
    32b8:	2103      	movs	r1, #3
    32ba:	1ac9      	subs	r1, r1, r3
    32bc:	e002      	b.n	32c4 <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
#endif
				result = TX_OK;
				break;

			case TRAC_CHANNEL_ACCESS_FAILURE:
				result = TX_CCA_FAIL;
    32be:	2101      	movs	r1, #1
    32c0:	e000      	b.n	32c4 <_ZN8cMxRadio17radio_irq_handlerEh+0x54>
			case TRAC_SUCCESS_DATA_PENDING:
#endif
#if defined TRAC_SUCCESS_WAIT_FOR_ACK
			case TRAC_SUCCESS_WAIT_FOR_ACK:
#endif
				result = TX_OK;
    32c2:	2100      	movs	r1, #0
				break;

			default:
				result = TX_FAIL;
			}
			usr_radio_tx_done(result);
    32c4:	1c20      	adds	r0, r4, #0
    32c6:	4b06      	ldr	r3, [pc, #24]	; (32e0 <_ZN8cMxRadio17radio_irq_handlerEh+0x70>)
    32c8:	4798      	blx	r3
			radio_set_state(radiostatus.idle_state);
    32ca:	7a21      	ldrb	r1, [r4, #8]
    32cc:	1c20      	adds	r0, r4, #0
    32ce:	4b05      	ldr	r3, [pc, #20]	; (32e4 <_ZN8cMxRadio17radio_irq_handlerEh+0x74>)
    32d0:	4798      	blx	r3
		}
	}
	usr_radio_irq(cause);
    32d2:	1c20      	adds	r0, r4, #0
    32d4:	1c29      	adds	r1, r5, #0
    32d6:	4b05      	ldr	r3, [pc, #20]	; (32ec <_ZN8cMxRadio17radio_irq_handlerEh+0x7c>)
    32d8:	4798      	blx	r3
}
    32da:	bd70      	pop	{r4, r5, r6, pc}
    32dc:	00002f4d 	.word	0x00002f4d
    32e0:	000027e1 	.word	0x000027e1
    32e4:	000030a1 	.word	0x000030a1
    32e8:	00003459 	.word	0x00003459
    32ec:	00002785 	.word	0x00002785

000032f0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t>:

	radiostatus.state = state;
}

void cMxRadio::radio_set_param(radio_attribute_t attr, radio_param_t parm)
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	4647      	mov	r7, r8
    32f4:	b480      	push	{r7}
    32f6:	b082      	sub	sp, #8
    32f8:	1c05      	adds	r5, r0, #0
	switch (attr)
    32fa:	2908      	cmp	r1, #8
    32fc:	d864      	bhi.n	33c8 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xd8>
    32fe:	0089      	lsls	r1, r1, #2
    3300:	4b35      	ldr	r3, [pc, #212]	; (33d8 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xe8>)
    3302:	585b      	ldr	r3, [r3, r1]
    3304:	469f      	mov	pc, r3
	{
	case phyCurrentChannel:
		if (((int)parm.channel >= TRX_MIN_CHANNEL) &&
    3306:	b2d4      	uxtb	r4, r2
    3308:	1c23      	adds	r3, r4, #0
    330a:	3b0b      	subs	r3, #11
    330c:	2b0f      	cmp	r3, #15
    330e:	d807      	bhi.n	3320 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x30>
		{
#ifdef CHINABAND
			trx_reg_write(RG_CC_CTRL_1, CCBAND);
			trx_reg_write(RG_CC_CTRL_0, parm.channel*2+CCNUMBER);
#else
			trx_bit_write(SR_CHANNEL, parm.channel);
    3310:	9400      	str	r4, [sp, #0]
    3312:	2108      	movs	r1, #8
    3314:	221f      	movs	r2, #31
    3316:	2300      	movs	r3, #0
    3318:	4e30      	ldr	r6, [pc, #192]	; (33dc <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    331a:	47b0      	blx	r6
#endif
			radiostatus.channel = parm.channel;
    331c:	712c      	strb	r4, [r5, #4]
    331e:	e056      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3320:	2102      	movs	r1, #2
    3322:	4b2f      	ldr	r3, [pc, #188]	; (33e0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    3324:	4798      	blx	r3
    3326:	e052      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		{
			radio_error(SET_PARM_FAILED);
		}
#endif//chinaband
#else
		if (parm.tx_pwr >= -17 && parm.tx_pwr <= 3)
    3328:	b2d2      	uxtb	r2, r2
    332a:	1c13      	adds	r3, r2, #0
    332c:	3311      	adds	r3, #17
    332e:	b2db      	uxtb	r3, r3
    3330:	2b14      	cmp	r3, #20
    3332:	d809      	bhi.n	3348 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x58>
					0x06,                         /* 0 dBm */
					0x04,                         /* 1 dBm */
					0x02,                         /* 2 dBm */
					0x00                          /* 3 dBm */
			};
			radiostatus.tx_pwr = parm.tx_pwr;
    3334:	7142      	strb	r2, [r0, #5]
			uint8_t idx = parm.tx_pwr + 17;
			uint8_t pwrval = pwrtable[idx];
    3336:	4a2b      	ldr	r2, [pc, #172]	; (33e4 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf4>)
			trx_bit_write(SR_TX_PWR, pwrval);
    3338:	5cd3      	ldrb	r3, [r2, r3]
    333a:	9300      	str	r3, [sp, #0]
    333c:	2105      	movs	r1, #5
    333e:	220f      	movs	r2, #15
    3340:	2300      	movs	r3, #0
    3342:	4c26      	ldr	r4, [pc, #152]	; (33dc <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    3344:	47a0      	blx	r4
    3346:	e042      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3348:	2102      	movs	r1, #2
    334a:	4b25      	ldr	r3, [pc, #148]	; (33e0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    334c:	4798      	blx	r3
    334e:	e03e      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		}

#endif//rf212
		break;
	case phyCCAMode:
		if (parm.cca_mode <= 3)
    3350:	b2d2      	uxtb	r2, r2
    3352:	2a03      	cmp	r2, #3
    3354:	d807      	bhi.n	3366 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x76>
		{
			radiostatus.cca_mode = parm.cca_mode;
    3356:	7182      	strb	r2, [r0, #6]
			trx_bit_write(SR_CCA_MODE, radiostatus.cca_mode);
    3358:	9200      	str	r2, [sp, #0]
    335a:	2108      	movs	r1, #8
    335c:	2260      	movs	r2, #96	; 0x60
    335e:	2305      	movs	r3, #5
    3360:	4c1e      	ldr	r4, [pc, #120]	; (33dc <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xec>)
    3362:	47a0      	blx	r4
    3364:	e033      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    3366:	2102      	movs	r1, #2
    3368:	4b1d      	ldr	r3, [pc, #116]	; (33e0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    336a:	4798      	blx	r3
    336c:	e02f      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			radio_error(SET_PARM_FAILED);
		}
		break;

	case phyIdleState:
		radiostatus.idle_state = parm.idle_state;
    336e:	b2d1      	uxtb	r1, r2
    3370:	7201      	strb	r1, [r0, #8]
		radio_set_state(parm.idle_state);
    3372:	4b1d      	ldr	r3, [pc, #116]	; (33e8 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf8>)
    3374:	4798      	blx	r3
		break;
    3376:	e02a      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>

	case phyChannelsSupported:
		break;

	case phyPanId:
		trx_set_panid(parm.pan_id);
    3378:	b294      	uxth	r4, r2
	/**
	 * @brief Write the PANID to the address filter registers
	 */
	 inline void trx_set_panid(uint16_t panid)
	{
	    trx_reg_write(RG_PAN_ID_0,(panid&0xff));
    337a:	b2e2      	uxtb	r2, r4
    337c:	2122      	movs	r1, #34	; 0x22
    337e:	4e1b      	ldr	r6, [pc, #108]	; (33ec <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    3380:	47b0      	blx	r6
	    trx_reg_write(RG_PAN_ID_1,(panid>>8));
    3382:	0a22      	lsrs	r2, r4, #8
    3384:	1c28      	adds	r0, r5, #0
    3386:	2123      	movs	r1, #35	; 0x23
    3388:	47b0      	blx	r6
    338a:	e020      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyShortAddr:
		trx_set_shortaddr(parm.short_addr);
    338c:	b294      	uxth	r4, r2
	 * @brief Write the 16 bit short address to the
	 * address filter registers
	 */
	 inline void trx_set_shortaddr(uint16_t shortaddr)
	{
	    trx_reg_write(RG_SHORT_ADDR_0,(shortaddr&0xff));
    338e:	b2e2      	uxtb	r2, r4
    3390:	2120      	movs	r1, #32
    3392:	4e16      	ldr	r6, [pc, #88]	; (33ec <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    3394:	47b0      	blx	r6
	    trx_reg_write(RG_SHORT_ADDR_1,(shortaddr>>8));
    3396:	0a22      	lsrs	r2, r4, #8
    3398:	1c28      	adds	r0, r5, #0
    339a:	2121      	movs	r1, #33	; 0x21
    339c:	47b0      	blx	r6
    339e:	e016      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    33a0:	1c17      	adds	r7, r2, #0
    33a2:	3208      	adds	r2, #8
    33a4:	1c14      	adds	r4, r2, #0
    33a6:	2624      	movs	r6, #36	; 0x24
				regno <= RG_IEEE_ADDR_7;
				regno++, ap++)
			trx_reg_write(regno, *ap);
    33a8:	4b10      	ldr	r3, [pc, #64]	; (33ec <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xfc>)
    33aa:	4698      	mov	r8, r3
    33ac:	783a      	ldrb	r2, [r7, #0]
    33ae:	1c28      	adds	r0, r5, #0
    33b0:	1c31      	adds	r1, r6, #0
    33b2:	47c0      	blx	r8
		break;

	case phyLongAddr:
	{
		uint8_t regno, *ap;
		for (regno = RG_IEEE_ADDR_0, ap = (uint8_t *)parm.long_addr;
    33b4:	3601      	adds	r6, #1
    33b6:	b2f6      	uxtb	r6, r6
    33b8:	3701      	adds	r7, #1
    33ba:	42a7      	cmp	r7, r4
    33bc:	d1f6      	bne.n	33ac <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xbc>
    33be:	e006      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
			trx_reg_write(regno, *ap);
		break;
	}

	case phyDataRate:
		trx_set_datarate(parm.data_rate);
    33c0:	b2d1      	uxtb	r1, r2
    33c2:	4b0b      	ldr	r3, [pc, #44]	; (33f0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0x100>)
    33c4:	4798      	blx	r3
		break;
    33c6:	e002      	b.n	33ce <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xde>
 * @ingroup grpRadio
 */

void cMxRadio::radio_error(radio_error_t err)
{
	usr_radio_error(err);
    33c8:	2102      	movs	r1, #2
    33ca:	4b05      	ldr	r3, [pc, #20]	; (33e0 <_ZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_t+0xf0>)
    33cc:	4798      	blx	r3

	default:
		radio_error(SET_PARM_FAILED);
		break;
	}
}
    33ce:	b002      	add	sp, #8
    33d0:	bc04      	pop	{r2}
    33d2:	4690      	mov	r8, r2
    33d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	0000e75c 	.word	0x0000e75c
    33dc:	0000350d 	.word	0x0000350d
    33e0:	00002771 	.word	0x00002771
    33e4:	0000e780 	.word	0x0000e780
    33e8:	000030a1 	.word	0x000030a1
    33ec:	00002e79 	.word	0x00002e79
    33f0:	00003471 	.word	0x00003471

000033f4 <_ZN8cMxRadio16radio_send_frameEhPhh>:


void cMxRadio::radio_send_frame(uint8_t len, uint8_t *frm, uint8_t compcrc)
{
    33f4:	b570      	push	{r4, r5, r6, lr}
    33f6:	1c04      	adds	r4, r0, #0
    33f8:	1c0e      	adds	r6, r1, #0
    33fa:	1c15      	adds	r5, r2, #0
	{
		TRX_TX_PA_EI();
	}
#endif
/* this block should be made atomic */
	frm[2]++;
    33fc:	7893      	ldrb	r3, [r2, #2]
    33fe:	3301      	adds	r3, #1
    3400:	7093      	strb	r3, [r2, #2]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3402:	23e0      	movs	r3, #224	; 0xe0
    3404:	56c3      	ldrsb	r3, [r0, r3]
    3406:	3301      	adds	r3, #1
    3408:	d104      	bne.n	3414 <_ZN8cMxRadio16radio_send_frameEhPhh+0x20>
    340a:	480f      	ldr	r0, [pc, #60]	; (3448 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    340c:	490f      	ldr	r1, [pc, #60]	; (344c <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    340e:	2228      	movs	r2, #40	; 0x28
    3410:	4b0f      	ldr	r3, [pc, #60]	; (3450 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    3412:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    3414:	1c23      	adds	r3, r4, #0
    3416:	33e0      	adds	r3, #224	; 0xe0
    3418:	691a      	ldr	r2, [r3, #16]
    341a:	685b      	ldr	r3, [r3, #4]
    341c:	6013      	str	r3, [r2, #0]
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    341e:	23e0      	movs	r3, #224	; 0xe0
    3420:	56e3      	ldrsb	r3, [r4, r3]
    3422:	3301      	adds	r3, #1
    3424:	d104      	bne.n	3430 <_ZN8cMxRadio16radio_send_frameEhPhh+0x3c>
    3426:	4808      	ldr	r0, [pc, #32]	; (3448 <_ZN8cMxRadio16radio_send_frameEhPhh+0x54>)
    3428:	4908      	ldr	r1, [pc, #32]	; (344c <_ZN8cMxRadio16radio_send_frameEhPhh+0x58>)
    342a:	2228      	movs	r2, #40	; 0x28
    342c:	4b08      	ldr	r3, [pc, #32]	; (3450 <_ZN8cMxRadio16radio_send_frameEhPhh+0x5c>)
    342e:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    3430:	1c23      	adds	r3, r4, #0
    3432:	33e0      	adds	r3, #224	; 0xe0
    3434:	68da      	ldr	r2, [r3, #12]
    3436:	685b      	ldr	r3, [r3, #4]
    3438:	6013      	str	r3, [r2, #0]
	sleep_pin=1;//TRX_SLPTR_HIGH();
	sleep_pin=0;//TRX_SLPTR_LOW();
	trx_frame_write(len, frm);
    343a:	1c20      	adds	r0, r4, #0
    343c:	1c31      	adds	r1, r6, #0
    343e:	1c2a      	adds	r2, r5, #0
    3440:	4b04      	ldr	r3, [pc, #16]	; (3454 <_ZN8cMxRadio16radio_send_frameEhPhh+0x60>)
    3442:	4798      	blx	r3
	/***********************************/
}
    3444:	bd70      	pop	{r4, r5, r6, pc}
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	0000e35c 	.word	0x0000e35c
    344c:	0000e374 	.word	0x0000e374
    3450:	00005389 	.word	0x00005389
    3454:	00003541 	.word	0x00003541

00003458 <_ZN8cMxRadio12trx_bit_readEhhh>:
#include <MxRadio.h>


/* === functions ========================================= */
trx_regval_t cMxRadio::trx_bit_read(uint8_t addr, trx_regval_t mask, uint8_t pos)
{
    3458:	b538      	push	{r3, r4, r5, lr}
    345a:	1c15      	adds	r5, r2, #0
    345c:	1c1c      	adds	r4, r3, #0
trx_regval_t data;
    data = trx_reg_read(addr);
    345e:	4b03      	ldr	r3, [pc, #12]	; (346c <_ZN8cMxRadio12trx_bit_readEhhh+0x14>)
    3460:	4798      	blx	r3
    data &= mask;
    data >>= pos;
    3462:	4028      	ands	r0, r5
    3464:	4120      	asrs	r0, r4
    return data;
    3466:	b2c0      	uxtb	r0, r0
}
    3468:	bd38      	pop	{r3, r4, r5, pc}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	00002ee1 	.word	0x00002ee1

00003470 <_ZN8cMxRadio16trx_set_datarateEh>:
}

#elif RADIO_TYPE == RADIO_AT86RF231

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
    3470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3472:	1c06      	adds	r6, r0, #0
    3474:	1e0c      	subs	r4, r1, #0
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    3476:	2c34      	cmp	r4, #52	; 0x34
    3478:	d00f      	beq.n	349a <_ZN8cMxRadio16trx_set_datarateEh+0x2a>
    347a:	2934      	cmp	r1, #52	; 0x34
    347c:	d803      	bhi.n	3486 <_ZN8cMxRadio16trx_set_datarateEh+0x16>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
    347e:	2500      	movs	r5, #0

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    3480:	2933      	cmp	r1, #51	; 0x33
    3482:	d00b      	beq.n	349c <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    3484:	e007      	b.n	3496 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    3486:	2954      	cmp	r1, #84	; 0x54
    3488:	d003      	beq.n	3492 <_ZN8cMxRadio16trx_set_datarateEh+0x22>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
    348a:	2501      	movs	r5, #1

uint8_t cMxRadio::trx_set_datarate(uint8_t rate_type)
{
trx_regval_t regval = TRX_NONE;

    switch(rate_type)
    348c:	2994      	cmp	r1, #148	; 0x94
    348e:	d005      	beq.n	349c <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
    3490:	e001      	b.n	3496 <_ZN8cMxRadio16trx_set_datarateEh+0x26>
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
        case OQPSK2000: regval = TRX_OQPSK2000; break;
    3492:	2503      	movs	r5, #3
    3494:	e002      	b.n	349c <_ZN8cMxRadio16trx_set_datarateEh+0x2c>
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
        trx_reg_write(RG_TRX_CTRL_2, regval);
    }
    else
    {
        rate_type = TRX_NONE;
    3496:	24ff      	movs	r4, #255	; 0xff
    3498:	e011      	b.n	34be <_ZN8cMxRadio16trx_set_datarateEh+0x4e>

    switch(rate_type)
    {
        case OQPSK250: regval = TRX_OQPSK250; break;
        case OQPSK500: regval = TRX_OQPSK500; break;
        case OQPSK1000: regval = TRX_OQPSK1000; break;
    349a:	2502      	movs	r5, #2
        case OQPSK2000: regval = TRX_OQPSK2000; break;
        default: break;
    }
    if (regval != TRX_NONE)
    {
        trx_reg_write(RG_TRX_STATE, CMD_FORCE_TRX_OFF);
    349c:	1c30      	adds	r0, r6, #0
    349e:	2102      	movs	r1, #2
    34a0:	2203      	movs	r2, #3
    34a2:	4f08      	ldr	r7, [pc, #32]	; (34c4 <_ZN8cMxRadio16trx_set_datarateEh+0x54>)
    34a4:	47b8      	blx	r7
        regval |=  trx_reg_read(RG_TRX_CTRL_2) & 0xfc ;
    34a6:	1c30      	adds	r0, r6, #0
    34a8:	210c      	movs	r1, #12
    34aa:	4b07      	ldr	r3, [pc, #28]	; (34c8 <_ZN8cMxRadio16trx_set_datarateEh+0x58>)
    34ac:	4798      	blx	r3
    34ae:	2303      	movs	r3, #3
    34b0:	1c02      	adds	r2, r0, #0
    34b2:	439a      	bics	r2, r3
    34b4:	4315      	orrs	r5, r2
        trx_reg_write(RG_TRX_CTRL_2, regval);
    34b6:	b2ea      	uxtb	r2, r5
    34b8:	1c30      	adds	r0, r6, #0
    34ba:	210c      	movs	r1, #12
    34bc:	47b8      	blx	r7
    else
    {
        rate_type = TRX_NONE;
    }
    return rate_type;
}
    34be:	1c20      	adds	r0, r4, #0
    34c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	00002e79 	.word	0x00002e79
    34c8:	00002ee1 	.word	0x00002ee1

000034cc <_ZN8cMxRadio15rf_irq_callbackEv>:


/* === globals ============================================================= */

void cMxRadio::rf_irq_callback()
{
    34cc:	b538      	push	{r3, r4, r5, lr}
    34ce:	1c04      	adds	r4, r0, #0

uint8_t cause;
    //DI_TRX_IRQ();
    //sei();
    cause = trx_reg_read(RG_IRQ_STATUS);
    34d0:	210f      	movs	r1, #15
    34d2:	4b0c      	ldr	r3, [pc, #48]	; (3504 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    34d4:	4798      	blx	r3
    34d6:	1c05      	adds	r5, r0, #0

    if (cause & TRX_IRQ_RX_START)
    34d8:	0743      	lsls	r3, r0, #29
    34da:	d504      	bpl.n	34e6 <_ZN8cMxRadio15rf_irq_callbackEv+0x1a>
    {
    	temprssi = trx_reg_read(RG_PHY_RSSI);
    34dc:	1c20      	adds	r0, r4, #0
    34de:	2106      	movs	r1, #6
    34e0:	4b08      	ldr	r3, [pc, #32]	; (3504 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    34e2:	4798      	blx	r3
    34e4:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }

    if (cause & TRX_IRQ_TRX_END)
    34e6:	072b      	lsls	r3, r5, #28
    34e8:	d507      	bpl.n	34fa <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    {
    	if (temprssi==0)
    34ea:	7823      	ldrb	r3, [r4, #0]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d104      	bne.n	34fa <_ZN8cMxRadio15rf_irq_callbackEv+0x2e>
    		temprssi = trx_reg_read(RG_PHY_RSSI);
    34f0:	1c20      	adds	r0, r4, #0
    34f2:	2106      	movs	r1, #6
    34f4:	4b03      	ldr	r3, [pc, #12]	; (3504 <_ZN8cMxRadio15rf_irq_callbackEv+0x38>)
    34f6:	4798      	blx	r3
    34f8:	7020      	strb	r0, [r4, #0]
    	//temped = trx_reg_read(RG_PHY_ED_LEVEL);
    }
    radio_irq_handler(cause);
    34fa:	1c20      	adds	r0, r4, #0
    34fc:	1c29      	adds	r1, r5, #0
    34fe:	4b02      	ldr	r3, [pc, #8]	; (3508 <_ZN8cMxRadio15rf_irq_callbackEv+0x3c>)
    3500:	4798      	blx	r3
    //cli();
    //EI_TRX_IRQ();
}
    3502:	bd38      	pop	{r3, r4, r5, pc}
    3504:	00002ee1 	.word	0x00002ee1
    3508:	00003271 	.word	0x00003271

0000350c <_ZN8cMxRadio13trx_bit_writeEhhhh>:

#include <MxRadio.h>

/* === functions ========================================= */
void cMxRadio::trx_bit_write(uint8_t addr, trx_regval_t mask, uint8_t pos, trx_regval_t value)
{
    350c:	b5f0      	push	{r4, r5, r6, r7, lr}
    350e:	b083      	sub	sp, #12
    3510:	1c05      	adds	r5, r0, #0
    3512:	1c16      	adds	r6, r2, #0
    3514:	1c1c      	adds	r4, r3, #0
    3516:	ab08      	add	r3, sp, #32
    3518:	781f      	ldrb	r7, [r3, #0]

trx_regval_t tmp;
    tmp = trx_reg_read(addr);
    351a:	9101      	str	r1, [sp, #4]
    351c:	4b06      	ldr	r3, [pc, #24]	; (3538 <_ZN8cMxRadio13trx_bit_writeEhhhh+0x2c>)
    351e:	4798      	blx	r3
    tmp &= ~mask;
    3520:	43b0      	bics	r0, r6
    3522:	b2c0      	uxtb	r0, r0
    value <<= pos;
    3524:	1c3a      	adds	r2, r7, #0
    3526:	40a2      	lsls	r2, r4
    value &=mask;
    3528:	4032      	ands	r2, r6
    value |= tmp;
    trx_reg_write(addr, value);
    352a:	4302      	orrs	r2, r0
    352c:	1c28      	adds	r0, r5, #0
    352e:	9901      	ldr	r1, [sp, #4]
    3530:	4b02      	ldr	r3, [pc, #8]	; (353c <_ZN8cMxRadio13trx_bit_writeEhhhh+0x30>)
    3532:	4798      	blx	r3
    return;
}
    3534:	b003      	add	sp, #12
    3536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3538:	00002ee1 	.word	0x00002ee1
    353c:	00002e79 	.word	0x00002e79

00003540 <_ZN8cMxRadio15trx_frame_writeEhPh>:
#include <MxRadio.h>

/* === functions ========================================= */

void cMxRadio::trx_frame_write(uint8_t length, uint8_t *data)
{
    3540:	b5f0      	push	{r4, r5, r6, r7, lr}
    3542:	b083      	sub	sp, #12
    3544:	1c06      	adds	r6, r0, #0
    3546:	1c0f      	adds	r7, r1, #0
    3548:	1c15      	adds	r5, r2, #0
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    354a:	23a8      	movs	r3, #168	; 0xa8
    354c:	56c3      	ldrsb	r3, [r0, r3]
    354e:	3301      	adds	r3, #1
    3550:	d104      	bne.n	355c <_ZN8cMxRadio15trx_frame_writeEhPh+0x1c>
    3552:	4819      	ldr	r0, [pc, #100]	; (35b8 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    3554:	4919      	ldr	r1, [pc, #100]	; (35bc <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    3556:	2228      	movs	r2, #40	; 0x28
    3558:	4b19      	ldr	r3, [pc, #100]	; (35c0 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    355a:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    355c:	1c33      	adds	r3, r6, #0
    355e:	33a8      	adds	r3, #168	; 0xa8
    3560:	68da      	ldr	r2, [r3, #12]
    3562:	685b      	ldr	r3, [r3, #4]
    3564:	6013      	str	r3, [r2, #0]

    // Select transceiver
    m_cs=0;//SPI_SELN_LOW();

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    3566:	2314      	movs	r3, #20
    3568:	469c      	mov	ip, r3
    356a:	44b4      	add	ip, r6
    356c:	4663      	mov	r3, ip
    356e:	9301      	str	r3, [sp, #4]
    3570:	4660      	mov	r0, ip
    3572:	2160      	movs	r1, #96	; 0x60
    3574:	4c13      	ldr	r4, [pc, #76]	; (35c4 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    3576:	47a0      	blx	r4
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;
    3578:	9801      	ldr	r0, [sp, #4]
    357a:	1c39      	adds	r1, r7, #0
    357c:	47a0      	blx	r4
    357e:	1c2c      	adds	r4, r5, #0
    3580:	3f01      	subs	r7, #1
    3582:	b2ff      	uxtb	r7, r7
    3584:	3701      	adds	r7, #1
    3586:	19ed      	adds	r5, r5, r7

    do
    {
        //SPI_WAITFOR();
    	m_spi.write(*data++);//SPI_DATA_REG = *data++;
    3588:	4f0e      	ldr	r7, [pc, #56]	; (35c4 <_ZN8cMxRadio15trx_frame_writeEhPh+0x84>)
    358a:	7821      	ldrb	r1, [r4, #0]
    358c:	9801      	ldr	r0, [sp, #4]
    358e:	47b8      	blx	r7
    3590:	3401      	adds	r4, #1

    m_spi.write(TRX_CMD_FW);//SPI_DATA_REG = TRX_CMD_FW;
    //SPI_WAITFOR();
    m_spi.write(length);//SPI_DATA_REG = length;

    do
    3592:	42ac      	cmp	r4, r5
    3594:	d1f9      	bne.n	358a <_ZN8cMxRadio15trx_frame_writeEhPh+0x4a>
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    3596:	23a8      	movs	r3, #168	; 0xa8
    3598:	56f3      	ldrsb	r3, [r6, r3]
    359a:	3301      	adds	r3, #1
    359c:	d104      	bne.n	35a8 <_ZN8cMxRadio15trx_frame_writeEhPh+0x68>
    359e:	4806      	ldr	r0, [pc, #24]	; (35b8 <_ZN8cMxRadio15trx_frame_writeEhPh+0x78>)
    35a0:	4906      	ldr	r1, [pc, #24]	; (35bc <_ZN8cMxRadio15trx_frame_writeEhPh+0x7c>)
    35a2:	2228      	movs	r2, #40	; 0x28
    35a4:	4b06      	ldr	r3, [pc, #24]	; (35c0 <_ZN8cMxRadio15trx_frame_writeEhPh+0x80>)
    35a6:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    35a8:	1c33      	adds	r3, r6, #0
    35aa:	33a8      	adds	r3, #168	; 0xa8
    35ac:	691a      	ldr	r2, [r3, #16]
    35ae:	685b      	ldr	r3, [r3, #4]
    35b0:	6013      	str	r3, [r2, #0]

    //SPI_WAITFOR(); /* wait here until last byte is out otherwise underrun irq */

    // Deselect Slave
    m_cs=1;//SPI_SELN_HIGH();
}
    35b2:	b003      	add	sp, #12
    35b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	0000e35c 	.word	0x0000e35c
    35bc:	0000e374 	.word	0x0000e374
    35c0:	00005389 	.word	0x00005389
    35c4:	000050c1 	.word	0x000050c1

000035c8 <_ZN8cMxRadio14trx_frame_readEPhhS0_>:

uint8_t cMxRadio::trx_frame_read(uint8_t *data, uint8_t datasz, uint8_t *lqi)
{
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ca:	4657      	mov	r7, sl
    35cc:	464e      	mov	r6, r9
    35ce:	b4c0      	push	{r6, r7}
    35d0:	b083      	sub	sp, #12
    35d2:	1c07      	adds	r7, r0, #0
    35d4:	9101      	str	r1, [sp, #4]
    35d6:	1c15      	adds	r5, r2, #0
    35d8:	4699      	mov	r9, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    35da:	23a8      	movs	r3, #168	; 0xa8
    35dc:	56c3      	ldrsb	r3, [r0, r3]
    35de:	3301      	adds	r3, #1
    35e0:	d104      	bne.n	35ec <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x24>
    35e2:	4824      	ldr	r0, [pc, #144]	; (3674 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    35e4:	4924      	ldr	r1, [pc, #144]	; (3678 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    35e6:	2228      	movs	r2, #40	; 0x28
    35e8:	4b24      	ldr	r3, [pc, #144]	; (367c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    35ea:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    else
        *obj->OUTCLR = obj->mask;
    35ec:	1c3b      	adds	r3, r7, #0
    35ee:	33a8      	adds	r3, #168	; 0xa8
    35f0:	68da      	ldr	r2, [r3, #12]
    35f2:	685b      	ldr	r3, [r3, #4]
    35f4:	6013      	str	r3, [r2, #0]

    /* Select transceiver */
    m_cs=0;//SPI_SELN_LOW();

    /* start frame read */
    m_spi.write(TRX_CMD_FR);//SPI_DATA_REG = TRX_CMD_FR;
    35f6:	2314      	movs	r3, #20
    35f8:	469c      	mov	ip, r3
    35fa:	44bc      	add	ip, r7
    35fc:	4663      	mov	r3, ip
    35fe:	4666      	mov	r6, ip
    3600:	9300      	str	r3, [sp, #0]
    3602:	1c18      	adds	r0, r3, #0
    3604:	2120      	movs	r1, #32
    3606:	4c1e      	ldr	r4, [pc, #120]	; (3680 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3608:	47a0      	blx	r4
    //SPI_WAITFOR();

    /* read length */
    length= m_spi.write(0);//SPI_DATA_REG = 0;
    360a:	1c30      	adds	r0, r6, #0
    360c:	2100      	movs	r1, #0
    360e:	47a0      	blx	r4
    3610:	b2c6      	uxtb	r6, r0
    //SPI_WAITFOR();
    //length = SPI_DATA_REG;

    if (length <= datasz)
    3612:	42ae      	cmp	r6, r5
    3614:	d818      	bhi.n	3648 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x80>
    3616:	9a01      	ldr	r2, [sp, #4]
    3618:	1c14      	adds	r4, r2, #0
    361a:	1e73      	subs	r3, r6, #1
    361c:	b2db      	uxtb	r3, r3
    361e:	3301      	adds	r3, #1
    3620:	18d5      	adds	r5, r2, r3
        i = length;
        do
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
    3622:	4b17      	ldr	r3, [pc, #92]	; (3680 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3624:	469a      	mov	sl, r3
    3626:	9800      	ldr	r0, [sp, #0]
    3628:	2100      	movs	r1, #0
    362a:	47d0      	blx	sl
    362c:	7020      	strb	r0, [r4, #0]
    362e:	3401      	adds	r4, #1
    //length = SPI_DATA_REG;

    if (length <= datasz)
    {
        i = length;
        do
    3630:	42ac      	cmp	r4, r5
    3632:	d1f8      	bne.n	3626 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x5e>
            //SPI_WAITFOR();
            *data++ = m_spi.write(0);//SPI_DATA_REG;
        }
        while(--i);

        if (lqi!= NULL)
    3634:	464b      	mov	r3, r9
    3636:	2b00      	cmp	r3, #0
    3638:	d008      	beq.n	364c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        {
            //SPI_DATA_REG = 0;   /* dummy out */
            //SPI_WAITFOR();
            *lqi = m_spi.write(0);//SPI_DATA_REG;
    363a:	9800      	ldr	r0, [sp, #0]
    363c:	2100      	movs	r1, #0
    363e:	4b10      	ldr	r3, [pc, #64]	; (3680 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb8>)
    3640:	4798      	blx	r3
    3642:	464b      	mov	r3, r9
    3644:	7018      	strb	r0, [r3, #0]
    3646:	e001      	b.n	364c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x84>
        }
    }
    else
    {
        /* we drop the frame */
        length = 0x80 | length;
    3648:	2380      	movs	r3, #128	; 0x80
    364a:	431e      	orrs	r6, r3
    __I uint32_t *OUT;
} gpio_t;

static inline void gpio_write(gpio_t *obj, int value)
{
    MBED_ASSERT(obj->pin != (PinName)NC);
    364c:	23a8      	movs	r3, #168	; 0xa8
    364e:	56fb      	ldrsb	r3, [r7, r3]
    3650:	3301      	adds	r3, #1
    3652:	d104      	bne.n	365e <_ZN8cMxRadio14trx_frame_readEPhhS0_+0x96>
    3654:	4807      	ldr	r0, [pc, #28]	; (3674 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xac>)
    3656:	4908      	ldr	r1, [pc, #32]	; (3678 <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb0>)
    3658:	2228      	movs	r2, #40	; 0x28
    365a:	4b08      	ldr	r3, [pc, #32]	; (367c <_ZN8cMxRadio14trx_frame_readEPhhS0_+0xb4>)
    365c:	4798      	blx	r3
    if (value)
        *obj->OUTSET = obj->mask;
    365e:	37a8      	adds	r7, #168	; 0xa8
    3660:	693b      	ldr	r3, [r7, #16]
    3662:	687a      	ldr	r2, [r7, #4]
    3664:	601a      	str	r2, [r3, #0]
    }
    m_cs=1;//SPI_SELN_HIGH();
    return length;
}
    3666:	1c30      	adds	r0, r6, #0
    3668:	b003      	add	sp, #12
    366a:	bc0c      	pop	{r2, r3}
    366c:	4691      	mov	r9, r2
    366e:	469a      	mov	sl, r3
    3670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	0000e35c 	.word	0x0000e35c
    3678:	0000e374 	.word	0x0000e374
    367c:	00005389 	.word	0x00005389
    3680:	000050c1 	.word	0x000050c1

00003684 <_ZN7Channel11SetCallbackEP15ChannelCallback>:
	virtual void putc(uint8_t)=0;
	virtual uint8_t getc()=0;
	
	virtual void SetCallback(ChannelCallback* c)
	{
		call = c;
    3684:	6041      	str	r1, [r0, #4]
	}
    3686:	4770      	bx	lr

00003688 <_ZN12ChannelRadio4getcEv>:
	vTaskDelay(5/portTICK_RATE_MS);
//	while(transmit){}
}

uint8_t ChannelRadio::getc()
{	
    3688:	1c02      	adds	r2, r0, #0
	uint8_t c = buffer[buffer_pos++];
    368a:	20ba      	movs	r0, #186	; 0xba
    368c:	0080      	lsls	r0, r0, #2
    368e:	5813      	ldr	r3, [r2, r0]
    3690:	1c59      	adds	r1, r3, #1
    3692:	5011      	str	r1, [r2, r0]
    3694:	18d3      	adds	r3, r2, r3
    3696:	3838      	subs	r0, #56	; 0x38
    3698:	4684      	mov	ip, r0
    369a:	4463      	add	r3, ip
    369c:	7898      	ldrb	r0, [r3, #2]
	
	if(buffer_pos >= buffer_end)
    369e:	23b9      	movs	r3, #185	; 0xb9
    36a0:	009b      	lsls	r3, r3, #2
    36a2:	58d3      	ldr	r3, [r2, r3]
    36a4:	4299      	cmp	r1, r3
    36a6:	d303      	bcc.n	36b0 <_ZN12ChannelRadio4getcEv+0x28>
	{
		buffer_pos = buffer_end;
    36a8:	21ba      	movs	r1, #186	; 0xba
    36aa:	0089      	lsls	r1, r1, #2
    36ac:	5053      	str	r3, [r2, r1]
    36ae:	e005      	b.n	36bc <_ZN12ChannelRadio4getcEv+0x34>
	}
	else if(buffer_pos >= 50)
    36b0:	2931      	cmp	r1, #49	; 0x31
    36b2:	d903      	bls.n	36bc <_ZN12ChannelRadio4getcEv+0x34>
	{
		buffer_pos = 0;
    36b4:	2100      	movs	r1, #0
    36b6:	23ba      	movs	r3, #186	; 0xba
    36b8:	009b      	lsls	r3, r3, #2
    36ba:	50d1      	str	r1, [r2, r3]
	}
	
	return c;
}
    36bc:	4770      	bx	lr
    36be:	46c0      	nop			; (mov r8, r8)

000036c0 <_ZN12ChannelRadio10OnTransmitEv>:
		call->OnReceive(this);
	}
}

void ChannelRadio::OnTransmit()
{
    36c0:	b508      	push	{r3, lr}
	if(call)
    36c2:	6843      	ldr	r3, [r0, #4]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d004      	beq.n	36d2 <_ZN12ChannelRadio10OnTransmitEv+0x12>
    36c8:	1c01      	adds	r1, r0, #0
	{
		call->OnTransmit(this);
    36ca:	681a      	ldr	r2, [r3, #0]
    36cc:	68d2      	ldr	r2, [r2, #12]
    36ce:	1c18      	adds	r0, r3, #0
    36d0:	4790      	blx	r2
	}
}
    36d2:	bd08      	pop	{r3, pc}

000036d4 <_ZN12ChannelRadio7OnErrorEi>:

void ChannelRadio::OnError(int e)
{
    36d4:	b510      	push	{r4, lr}
	if(call)
    36d6:	6843      	ldr	r3, [r0, #4]
    36d8:	2b00      	cmp	r3, #0
    36da:	d005      	beq.n	36e8 <_ZN12ChannelRadio7OnErrorEi+0x14>
    36dc:	1c0a      	adds	r2, r1, #0
    36de:	1c01      	adds	r1, r0, #0
	{
		call->OnError(this,e);
    36e0:	6818      	ldr	r0, [r3, #0]
    36e2:	6944      	ldr	r4, [r0, #20]
    36e4:	1c18      	adds	r0, r3, #0
    36e6:	47a0      	blx	r4
	}
}
    36e8:	bd10      	pop	{r4, pc}
    36ea:	46c0      	nop			; (mov r8, r8)

000036ec <_ZN12ChannelRadio9OnSpecialEi>:

void ChannelRadio::OnSpecial(int e)
{
    36ec:	b510      	push	{r4, lr}
	if(call)
    36ee:	6843      	ldr	r3, [r0, #4]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d005      	beq.n	3700 <_ZN12ChannelRadio9OnSpecialEi+0x14>
    36f4:	1c0a      	adds	r2, r1, #0
    36f6:	1c01      	adds	r1, r0, #0
	{
		call->OnSpecial(this,e);
    36f8:	6818      	ldr	r0, [r3, #0]
    36fa:	6904      	ldr	r4, [r0, #16]
    36fc:	1c18      	adds	r0, r3, #0
    36fe:	47a0      	blx	r4
	}
}
    3700:	bd10      	pop	{r4, pc}
    3702:	46c0      	nop			; (mov r8, r8)

00003704 <_ZN12ChannelRadioD1Ev>:
{
	radio.attachIrq(&RadioOnEvent);
	radio.attachError(&RadioOnError);
}

ChannelRadio::~ChannelRadio()
    3704:	b510      	push	{r4, lr}
    3706:	1c04      	adds	r4, r0, #0
    3708:	4b03      	ldr	r3, [pc, #12]	; (3718 <_ZN12ChannelRadioD1Ev+0x14>)
    370a:	3308      	adds	r3, #8
    370c:	6003      	str	r3, [r0, #0]
    370e:	3008      	adds	r0, #8
    3710:	4b02      	ldr	r3, [pc, #8]	; (371c <_ZN12ChannelRadioD1Ev+0x18>)
    3712:	4798      	blx	r3
{
	
}
    3714:	1c20      	adds	r0, r4, #0
    3716:	bd10      	pop	{r4, pc}
    3718:	0000e798 	.word	0x0000e798
    371c:	00002941 	.word	0x00002941

00003720 <_ZN12ChannelRadioD0Ev>:
{
	radio.attachIrq(&RadioOnEvent);
	radio.attachError(&RadioOnError);
}

ChannelRadio::~ChannelRadio()
    3720:	b510      	push	{r4, lr}
    3722:	1c04      	adds	r4, r0, #0
{
	
}
    3724:	4b03      	ldr	r3, [pc, #12]	; (3734 <_ZN12ChannelRadioD0Ev+0x14>)
    3726:	4798      	blx	r3
    3728:	1c20      	adds	r0, r4, #0
    372a:	4b03      	ldr	r3, [pc, #12]	; (3738 <_ZN12ChannelRadioD0Ev+0x18>)
    372c:	4798      	blx	r3
    372e:	1c20      	adds	r0, r4, #0
    3730:	bd10      	pop	{r4, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	00003705 	.word	0x00003705
    3738:	00006a7b 	.word	0x00006a7b

0000373c <_ZN12ChannelRadio4putcEh>:

void ChannelRadio::putc(uint8_t c)
{
    373c:	b538      	push	{r3, r4, r5, lr}
    373e:	1c0d      	adds	r5, r1, #0
	transmit = true;
    3740:	2201      	movs	r2, #1
    3742:	4b08      	ldr	r3, [pc, #32]	; (3764 <_ZN12ChannelRadio4putcEh+0x28>)
    3744:	54c2      	strb	r2, [r0, r3]
	
	radio.beginTransmission();
    3746:	3008      	adds	r0, #8
    3748:	1c04      	adds	r4, r0, #0
    374a:	4b07      	ldr	r3, [pc, #28]	; (3768 <_ZN12ChannelRadio4putcEh+0x2c>)
    374c:	4798      	blx	r3
	radio.write(c);
    374e:	1c20      	adds	r0, r4, #0
    3750:	1c29      	adds	r1, r5, #0
    3752:	4b06      	ldr	r3, [pc, #24]	; (376c <_ZN12ChannelRadio4putcEh+0x30>)
    3754:	4798      	blx	r3
	radio.endTransmission();
    3756:	1c20      	adds	r0, r4, #0
    3758:	4b05      	ldr	r3, [pc, #20]	; (3770 <_ZN12ChannelRadio4putcEh+0x34>)
    375a:	4798      	blx	r3
	
	vTaskDelay(5/portTICK_RATE_MS);
    375c:	2005      	movs	r0, #5
    375e:	4b05      	ldr	r3, [pc, #20]	; (3774 <_ZN12ChannelRadio4putcEh+0x38>)
    3760:	4798      	blx	r3
//	while(transmit){}
}
    3762:	bd38      	pop	{r3, r4, r5, pc}
    3764:	000002b1 	.word	0x000002b1
    3768:	00002b8d 	.word	0x00002b8d
    376c:	00002cb1 	.word	0x00002cb1
    3770:	00002be5 	.word	0x00002be5
    3774:	0000219d 	.word	0x0000219d

00003778 <_ZN12ChannelRadio9OnReceiveEv>:
	
	return c;
}

void ChannelRadio::OnReceive()
{
    3778:	b5f0      	push	{r4, r5, r6, r7, lr}
    377a:	4647      	mov	r7, r8
    377c:	b480      	push	{r7}
    377e:	b082      	sub	sp, #8
    3780:	1c06      	adds	r6, r0, #0
	while(radio.available())
    3782:	2308      	movs	r3, #8
    3784:	469c      	mov	ip, r3
    3786:	4484      	add	ip, r0
    3788:	4663      	mov	r3, ip
    378a:	9301      	str	r3, [sp, #4]
    378c:	4f14      	ldr	r7, [pc, #80]	; (37e0 <_ZN12ChannelRadio9OnReceiveEv+0x68>)
	{
		buffer[buffer_end++] = radio.read();
    378e:	4b15      	ldr	r3, [pc, #84]	; (37e4 <_ZN12ChannelRadio9OnReceiveEv+0x6c>)
    3790:	4698      	mov	r8, r3
	return c;
}

void ChannelRadio::OnReceive()
{
	while(radio.available())
    3792:	e011      	b.n	37b8 <_ZN12ChannelRadio9OnReceiveEv+0x40>
	{
		buffer[buffer_end++] = radio.read();
    3794:	25b9      	movs	r5, #185	; 0xb9
    3796:	00ad      	lsls	r5, r5, #2
    3798:	5974      	ldr	r4, [r6, r5]
    379a:	1c63      	adds	r3, r4, #1
    379c:	5173      	str	r3, [r6, r5]
    379e:	9801      	ldr	r0, [sp, #4]
    37a0:	47c0      	blx	r8
    37a2:	1934      	adds	r4, r6, r4
    37a4:	23ac      	movs	r3, #172	; 0xac
    37a6:	009b      	lsls	r3, r3, #2
    37a8:	469c      	mov	ip, r3
    37aa:	4464      	add	r4, ip
    37ac:	70a0      	strb	r0, [r4, #2]
		
		if(buffer_end >= 50)
    37ae:	5973      	ldr	r3, [r6, r5]
    37b0:	2b31      	cmp	r3, #49	; 0x31
    37b2:	d901      	bls.n	37b8 <_ZN12ChannelRadio9OnReceiveEv+0x40>
		{
			buffer_end = 0;
    37b4:	2200      	movs	r2, #0
    37b6:	5172      	str	r2, [r6, r5]
	return c;
}

void ChannelRadio::OnReceive()
{
	while(radio.available())
    37b8:	9801      	ldr	r0, [sp, #4]
    37ba:	1c04      	adds	r4, r0, #0
    37bc:	47b8      	blx	r7
    37be:	2800      	cmp	r0, #0
    37c0:	d1e8      	bne.n	3794 <_ZN12ChannelRadio9OnReceiveEv+0x1c>
		{
			buffer_end = 0;
		}
	}
	
	radio.flush();
    37c2:	1c20      	adds	r0, r4, #0
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <_ZN12ChannelRadio9OnReceiveEv+0x70>)
    37c6:	4798      	blx	r3
	
	if(call)
    37c8:	6870      	ldr	r0, [r6, #4]
    37ca:	2800      	cmp	r0, #0
    37cc:	d003      	beq.n	37d6 <_ZN12ChannelRadio9OnReceiveEv+0x5e>
	{
		call->OnReceive(this);
    37ce:	6803      	ldr	r3, [r0, #0]
    37d0:	689b      	ldr	r3, [r3, #8]
    37d2:	1c31      	adds	r1, r6, #0
    37d4:	4798      	blx	r3
	}
}
    37d6:	b002      	add	sp, #8
    37d8:	bc04      	pop	{r2}
    37da:	4690      	mov	r8, r2
    37dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00002b6d 	.word	0x00002b6d
    37e4:	00002b39 	.word	0x00002b39
    37e8:	00002b29 	.word	0x00002b29

000037ec <_ZN12ChannelRadio5writeEPhh>:
{
	return transmit;
}

void ChannelRadio::write(uint8_t* buffer, uint8_t size)
{
    37ec:	b570      	push	{r4, r5, r6, lr}
	if(buffer && (size >= 0))
    37ee:	2900      	cmp	r1, #0
    37f0:	d00d      	beq.n	380e <_ZN12ChannelRadio5writeEPhh+0x22>
    37f2:	1c16      	adds	r6, r2, #0
    37f4:	1c0d      	adds	r5, r1, #0
	{
		radio.beginTransmission();
    37f6:	3008      	adds	r0, #8
    37f8:	1c04      	adds	r4, r0, #0
    37fa:	4b05      	ldr	r3, [pc, #20]	; (3810 <_ZN12ChannelRadio5writeEPhh+0x24>)
    37fc:	4798      	blx	r3
		radio.write(buffer, size);
    37fe:	1c20      	adds	r0, r4, #0
    3800:	1c29      	adds	r1, r5, #0
    3802:	1c32      	adds	r2, r6, #0
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <_ZN12ChannelRadio5writeEPhh+0x28>)
    3806:	4798      	blx	r3
		radio.endTransmission();
    3808:	1c20      	adds	r0, r4, #0
    380a:	4b03      	ldr	r3, [pc, #12]	; (3818 <_ZN12ChannelRadio5writeEPhh+0x2c>)
    380c:	4798      	blx	r3
	}
    380e:	bd70      	pop	{r4, r5, r6, pc}
    3810:	00002b8d 	.word	0x00002b8d
    3814:	00002d9d 	.word	0x00002d9d
    3818:	00002be5 	.word	0x00002be5

0000381c <_ZN12ChannelRadio8GetRadioEv>:
	return inst;
}

cMxRadio* ChannelRadio::GetRadio()
{
	return &radio;
    381c:	3008      	adds	r0, #8
}
    381e:	4770      	bx	lr

00003820 <_ZN12ChannelRadioC1Ev>:

ChannelRadio::ChannelRadio()
    3820:	b5f0      	push	{r4, r5, r6, r7, lr}
    3822:	b085      	sub	sp, #20
    3824:	1c04      	adds	r4, r0, #0
{
protected:
	ChannelCallback* call;
	
public:
    Channel() : call(0) {}
    3826:	2500      	movs	r5, #0
    3828:	6045      	str	r5, [r0, #4]
  : radio(PB30,PC19,PC18,PB31,PB15,PA20,PB00), receiving(false), transmit(false), buffer_end(0), buffer_pos(0)
    382a:	4b13      	ldr	r3, [pc, #76]	; (3878 <_ZN12ChannelRadioC1Ev+0x58>)
    382c:	3308      	adds	r3, #8
    382e:	6003      	str	r3, [r0, #0]
    3830:	1c06      	adds	r6, r0, #0
    3832:	3608      	adds	r6, #8
    3834:	233f      	movs	r3, #63	; 0x3f
    3836:	9300      	str	r3, [sp, #0]
    3838:	3b10      	subs	r3, #16
    383a:	9301      	str	r3, [sp, #4]
    383c:	3b1b      	subs	r3, #27
    383e:	9302      	str	r3, [sp, #8]
    3840:	330c      	adds	r3, #12
    3842:	9303      	str	r3, [sp, #12]
    3844:	1c30      	adds	r0, r6, #0
    3846:	213e      	movs	r1, #62	; 0x3e
    3848:	2253      	movs	r2, #83	; 0x53
    384a:	3332      	adds	r3, #50	; 0x32
    384c:	4f0b      	ldr	r7, [pc, #44]	; (387c <_ZN12ChannelRadioC1Ev+0x5c>)
    384e:	47b8      	blx	r7
    3850:	23ac      	movs	r3, #172	; 0xac
    3852:	009b      	lsls	r3, r3, #2
    3854:	54e5      	strb	r5, [r4, r3]
    3856:	4b0a      	ldr	r3, [pc, #40]	; (3880 <_ZN12ChannelRadioC1Ev+0x60>)
    3858:	54e5      	strb	r5, [r4, r3]
    385a:	3333      	adds	r3, #51	; 0x33
    385c:	50e5      	str	r5, [r4, r3]
    385e:	3304      	adds	r3, #4
    3860:	50e5      	str	r5, [r4, r3]
{
	radio.attachIrq(&RadioOnEvent);
    3862:	1c30      	adds	r0, r6, #0
    3864:	4907      	ldr	r1, [pc, #28]	; (3884 <_ZN12ChannelRadioC1Ev+0x64>)
    3866:	4b08      	ldr	r3, [pc, #32]	; (3888 <_ZN12ChannelRadioC1Ev+0x68>)
    3868:	4798      	blx	r3
	radio.attachError(&RadioOnError);
    386a:	1c30      	adds	r0, r6, #0
    386c:	4907      	ldr	r1, [pc, #28]	; (388c <_ZN12ChannelRadioC1Ev+0x6c>)
    386e:	4b08      	ldr	r3, [pc, #32]	; (3890 <_ZN12ChannelRadioC1Ev+0x70>)
    3870:	4798      	blx	r3
}
    3872:	1c20      	adds	r0, r4, #0
    3874:	b005      	add	sp, #20
    3876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3878:	0000e798 	.word	0x0000e798
    387c:	00002945 	.word	0x00002945
    3880:	000002b1 	.word	0x000002b1
    3884:	000038dd 	.word	0x000038dd
    3888:	00002b21 	.word	0x00002b21
    388c:	000038c5 	.word	0x000038c5
    3890:	00002b19 	.word	0x00002b19

00003894 <_ZN12ChannelRadio10GetChannelEv>:
}

ChannelRadio* ChannelRadio::inst = 0;

ChannelRadio* ChannelRadio::GetChannel()
{
    3894:	b510      	push	{r4, lr}
	if(inst==0)
    3896:	4b08      	ldr	r3, [pc, #32]	; (38b8 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	2b00      	cmp	r3, #0
    389c:	d108      	bne.n	38b0 <_ZN12ChannelRadio10GetChannelEv+0x1c>
	{
		inst = new ChannelRadio;
    389e:	20bb      	movs	r0, #187	; 0xbb
    38a0:	0080      	lsls	r0, r0, #2
    38a2:	4b06      	ldr	r3, [pc, #24]	; (38bc <_ZN12ChannelRadio10GetChannelEv+0x28>)
    38a4:	4798      	blx	r3
    38a6:	1c04      	adds	r4, r0, #0
    38a8:	4b05      	ldr	r3, [pc, #20]	; (38c0 <_ZN12ChannelRadio10GetChannelEv+0x2c>)
    38aa:	4798      	blx	r3
    38ac:	4b02      	ldr	r3, [pc, #8]	; (38b8 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    38ae:	601c      	str	r4, [r3, #0]
	}
	
	return inst;
    38b0:	4b01      	ldr	r3, [pc, #4]	; (38b8 <_ZN12ChannelRadio10GetChannelEv+0x24>)
    38b2:	6818      	ldr	r0, [r3, #0]
}
    38b4:	bd10      	pop	{r4, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	2000423c 	.word	0x2000423c
    38bc:	00006a83 	.word	0x00006a83
    38c0:	00003821 	.word	0x00003821

000038c4 <_Z12RadioOnError13radio_error_t>:
		}
	}
}

void RadioOnError(radio_error_t e)
{
    38c4:	b510      	push	{r4, lr}
    38c6:	1c04      	adds	r4, r0, #0
	ChannelRadio::GetChannel()->OnError(e);
    38c8:	4b03      	ldr	r3, [pc, #12]	; (38d8 <_Z12RadioOnError13radio_error_t+0x14>)
    38ca:	4798      	blx	r3
    38cc:	6803      	ldr	r3, [r0, #0]
    38ce:	6a1b      	ldr	r3, [r3, #32]
    38d0:	1c21      	adds	r1, r4, #0
    38d2:	4798      	blx	r3
}
    38d4:	bd10      	pop	{r4, pc}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	00003895 	.word	0x00003895

000038dc <_Z12RadioOnEventh>:

//extern Channel* pc;
//extern void PrintBuffer(Channel* c, char* buffer, size_t length);

void RadioOnEvent(uint8_t e)
{
    38dc:	b538      	push	{r3, r4, r5, lr}
    38de:	1c04      	adds	r4, r0, #0
	ChannelRadio* r = ChannelRadio::GetChannel();
    38e0:	4b11      	ldr	r3, [pc, #68]	; (3928 <_Z12RadioOnEventh+0x4c>)
    38e2:	4798      	blx	r3
    38e4:	1c05      	adds	r5, r0, #0
//	memset(buffer,0,20);
//	sprintf(buffer,"RADIO EVENT: %d,%d\r\n",int(e),r->IsReceive());
//	PrintBuffer(pc,buffer,18);
//	wait_ms(1);
	
	if((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START)
    38e6:	0763      	lsls	r3, r4, #29
    38e8:	d506      	bpl.n	38f8 <_Z12RadioOnEventh+0x1c>
	}
}

void ChannelRadio::SetReceive(bool set)
{
	receiving = set;
    38ea:	2201      	movs	r2, #1
    38ec:	23ac      	movs	r3, #172	; 0xac
    38ee:	009b      	lsls	r3, r3, #2
    38f0:	54c2      	strb	r2, [r0, r3]
	
	if((e & TRX_IRQ_RX_START) == TRX_IRQ_RX_START)
	{
		r->SetReceive(true);
	}
	if((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)
    38f2:	0723      	lsls	r3, r4, #28
    38f4:	d407      	bmi.n	3906 <_Z12RadioOnEventh+0x2a>
    38f6:	e015      	b.n	3924 <_Z12RadioOnEventh+0x48>
    38f8:	0723      	lsls	r3, r4, #28
    38fa:	d513      	bpl.n	3924 <_Z12RadioOnEventh+0x48>
	receiving = set;
}

bool ChannelRadio::IsReceive()
{
	return receiving;
    38fc:	23ac      	movs	r3, #172	; 0xac
    38fe:	009b      	lsls	r3, r3, #2
		r->SetReceive(true);
	}
	if((e & TRX_IRQ_TRX_END) == TRX_IRQ_TRX_END)
	{
		// Received data for correct address
		if(r->IsReceive()) //&& ((e & TRX_IRQ_AMI) == TRX_IRQ_AMI))
    3900:	5cc3      	ldrb	r3, [r0, r3]
    3902:	2b00      	cmp	r3, #0
    3904:	d008      	beq.n	3918 <_Z12RadioOnEventh+0x3c>
		{
			r->OnReceive();
    3906:	682b      	ldr	r3, [r5, #0]
    3908:	699b      	ldr	r3, [r3, #24]
    390a:	1c28      	adds	r0, r5, #0
    390c:	4798      	blx	r3
	}
}

void ChannelRadio::SetReceive(bool set)
{
	receiving = set;
    390e:	2200      	movs	r2, #0
    3910:	23ac      	movs	r3, #172	; 0xac
    3912:	009b      	lsls	r3, r3, #2
    3914:	54ea      	strb	r2, [r5, r3]
    3916:	e005      	b.n	3924 <_Z12RadioOnEventh+0x48>
			r->SetReceive(false);
		}
		// Transmitted data
		else if(!r->IsReceive())
		{
			r->OnTransmit();
    3918:	6803      	ldr	r3, [r0, #0]
    391a:	69db      	ldr	r3, [r3, #28]
    391c:	4798      	blx	r3
	return receiving;
}

void ChannelRadio::SetTransmit(bool set)
{
	transmit = set;
    391e:	2200      	movs	r2, #0
    3920:	4b02      	ldr	r3, [pc, #8]	; (392c <_Z12RadioOnEventh+0x50>)
    3922:	54ea      	strb	r2, [r5, r3]
		{
			r->OnTransmit();
			r->SetTransmit(false);
		}
	}
}
    3924:	bd38      	pop	{r3, r4, r5, pc}
    3926:	46c0      	nop			; (mov r8, r8)
    3928:	00003895 	.word	0x00003895
    392c:	000002b1 	.word	0x000002b1

00003930 <_ZN13ChannelSerial9OnReceiveEv>:
	s.attach(this,&ChannelSerial::OnReceive,Serial::RxIrq);
//	s.attach(this,&ChannelSerial::OnTransmit,Serial::TxIrq);
}

void ChannelSerial::OnReceive()
{
    3930:	b508      	push	{r3, lr}
	if(call)
    3932:	6843      	ldr	r3, [r0, #4]
    3934:	2b00      	cmp	r3, #0
    3936:	d004      	beq.n	3942 <_ZN13ChannelSerial9OnReceiveEv+0x12>
    3938:	1c01      	adds	r1, r0, #0
	{
		call->OnReceive(this);
    393a:	681a      	ldr	r2, [r3, #0]
    393c:	6892      	ldr	r2, [r2, #8]
    393e:	1c18      	adds	r0, r3, #0
    3940:	4790      	blx	r2
	}
}
    3942:	bd08      	pop	{r3, pc}

00003944 <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
    3944:	b510      	push	{r4, lr}
        T* o = static_cast<T*>(object);
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
        return (o->**m)();
    3946:	684b      	ldr	r3, [r1, #4]
    3948:	07da      	lsls	r2, r3, #31
    394a:	d401      	bmi.n	3950 <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj+0xc>
    394c:	680a      	ldr	r2, [r1, #0]
    394e:	e003      	b.n	3958 <_ZN4mbed19FunctionPointerArg1IvvE12membercallerI13ChannelSerialEEvPvPj+0x14>
    3950:	105a      	asrs	r2, r3, #1
    3952:	5884      	ldr	r4, [r0, r2]
    3954:	680a      	ldr	r2, [r1, #0]
    3956:	58a2      	ldr	r2, [r4, r2]
    3958:	105b      	asrs	r3, r3, #1
    395a:	18c0      	adds	r0, r0, r3
    395c:	4790      	blx	r2
    }
    395e:	bd10      	pop	{r4, pc}

00003960 <_ZN13ChannelSerialD1Ev>:
  : s(tx, rx), n_rx_int(0)
{
	
}

ChannelSerial::~ChannelSerial()
    3960:	b510      	push	{r4, lr}
    3962:	1c04      	adds	r4, r0, #0
    3964:	4b08      	ldr	r3, [pc, #32]	; (3988 <_ZN13ChannelSerialD1Ev+0x28>)
    3966:	3308      	adds	r3, #8
    3968:	6003      	str	r3, [r0, #0]
    396a:	4b08      	ldr	r3, [pc, #32]	; (398c <_ZN13ChannelSerialD1Ev+0x2c>)
    396c:	6083      	str	r3, [r0, #8]
    396e:	1c19      	adds	r1, r3, #0
    3970:	3118      	adds	r1, #24
    3972:	22e4      	movs	r2, #228	; 0xe4
    3974:	5081      	str	r1, [r0, r2]
    3976:	334c      	adds	r3, #76	; 0x4c
    3978:	3204      	adds	r2, #4
    397a:	5083      	str	r3, [r0, r2]
    397c:	30e4      	adds	r0, #228	; 0xe4
    397e:	4b04      	ldr	r3, [pc, #16]	; (3990 <_ZN13ChannelSerialD1Ev+0x30>)
    3980:	4798      	blx	r3
{
	
}
    3982:	1c20      	adds	r0, r4, #0
    3984:	bd10      	pop	{r4, pc}
    3986:	46c0      	nop			; (mov r8, r8)
    3988:	0000e7c8 	.word	0x0000e7c8
    398c:	0000eb78 	.word	0x0000eb78
    3990:	00005311 	.word	0x00005311

00003994 <_ZN13ChannelSerialD0Ev>:
  : s(tx, rx), n_rx_int(0)
{
	
}

ChannelSerial::~ChannelSerial()
    3994:	b510      	push	{r4, lr}
    3996:	1c04      	adds	r4, r0, #0
{
	
}
    3998:	4b03      	ldr	r3, [pc, #12]	; (39a8 <_ZN13ChannelSerialD0Ev+0x14>)
    399a:	4798      	blx	r3
    399c:	1c20      	adds	r0, r4, #0
    399e:	4b03      	ldr	r3, [pc, #12]	; (39ac <_ZN13ChannelSerialD0Ev+0x18>)
    39a0:	4798      	blx	r3
    39a2:	1c20      	adds	r0, r4, #0
    39a4:	bd10      	pop	{r4, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	00003961 	.word	0x00003961
    39ac:	00006a7b 	.word	0x00006a7b

000039b0 <_ZN13ChannelSerial4putcEh>:

extern Channel* pc;
extern void PrintBuffer(Channel* c, char* buffer, size_t length);

void ChannelSerial::putc(uint8_t c)
{
    39b0:	b508      	push	{r3, lr}
		memset(buf,0,14);
		sprintf(buf,"Num Int: %d\r\n",n_rx_int);
		PrintBuffer(pc,buf,14);
		n_rx_int=0;
	}*/
	s.putc(c);
    39b2:	30e4      	adds	r0, #228	; 0xe4
    39b4:	4b01      	ldr	r3, [pc, #4]	; (39bc <_ZN13ChannelSerial4putcEh+0xc>)
    39b6:	4798      	blx	r3
}
    39b8:	bd08      	pop	{r3, pc}
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	00005335 	.word	0x00005335

000039c0 <_ZN13ChannelSerial4getcEv>:

uint8_t ChannelSerial::getc()
{
    39c0:	b508      	push	{r3, lr}
	return s.getc();
    39c2:	30e4      	adds	r0, #228	; 0xe4
    39c4:	4b01      	ldr	r3, [pc, #4]	; (39cc <_ZN13ChannelSerial4getcEv+0xc>)
    39c6:	4798      	blx	r3
    39c8:	b2c0      	uxtb	r0, r0
}
    39ca:	bd08      	pop	{r3, pc}
    39cc:	0000534d 	.word	0x0000534d

000039d0 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback>:

void ChannelSerial::SetCallback(ChannelCallback* c)
{
    39d0:	b508      	push	{r3, lr}
	virtual void putc(uint8_t)=0;
	virtual uint8_t getc()=0;
	
	virtual void SetCallback(ChannelCallback* c)
	{
		call = c;
    39d2:	6041      	str	r1, [r0, #4]
     *  @param mptr pointer to the member function to be called
     *  @param type Which serial interrupt to attach the member function to (Seriall::RxIrq for receive, TxIrq for transmit buffer empty)
     */
    template<typename T>
    void attach(T* tptr, void (T::*mptr)(void), IrqType type=RxIrq) {
        if((mptr != NULL) && (tptr != NULL)) {
    39d4:	2800      	cmp	r0, #0
    39d6:	d010      	beq.n	39fa <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x2a>
     *  @param object The object pointer to invoke the member function on (i.e. the this pointer)
     *  @param function The address of the void member function to attach
     */
    template<typename T>
    void attach(T *object, R (T::*member)(void)) {
        _p.object = static_cast<void*>(object);
    39d8:	23b0      	movs	r3, #176	; 0xb0
    39da:	50c0      	str	r0, [r0, r3]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
    39dc:	4a0a      	ldr	r2, [pc, #40]	; (3a08 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x38>)
    39de:	3304      	adds	r3, #4
    39e0:	50c2      	str	r2, [r0, r3]
    39e2:	2200      	movs	r2, #0
    39e4:	3304      	adds	r3, #4
    39e6:	50c2      	str	r2, [r0, r3]
        _membercaller = &FunctionPointerArg1::membercaller<T>;
    39e8:	4a08      	ldr	r2, [pc, #32]	; (3a0c <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x3c>)
    39ea:	330c      	adds	r3, #12
    39ec:	50c2      	str	r2, [r0, r3]
            _irq[type].attach(tptr, mptr);
            serial_irq_set(&_serial, (SerialIrq)type, 1);
    39ee:	3068      	adds	r0, #104	; 0x68
    39f0:	2100      	movs	r1, #0
    39f2:	2201      	movs	r2, #1
    39f4:	4b06      	ldr	r3, [pc, #24]	; (3a10 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x40>)
    39f6:	4798      	blx	r3
    39f8:	e004      	b.n	3a04 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x34>
        } else {
            serial_irq_set(&_serial, (SerialIrq)type, 0);
    39fa:	2068      	movs	r0, #104	; 0x68
    39fc:	2100      	movs	r1, #0
    39fe:	2200      	movs	r2, #0
    3a00:	4b03      	ldr	r3, [pc, #12]	; (3a10 <_ZN13ChannelSerial11SetCallbackEP15ChannelCallback+0x40>)
    3a02:	4798      	blx	r3
	Channel::SetCallback(c);
	
	s.attach(this,&ChannelSerial::OnReceive,Serial::RxIrq);
//	s.attach(this,&ChannelSerial::OnTransmit,Serial::TxIrq);
}
    3a04:	bd08      	pop	{r3, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	00003931 	.word	0x00003931
    3a0c:	00003945 	.word	0x00003945
    3a10:	00004d25 	.word	0x00004d25

00003a14 <_ZN13ChannelSerialC1E7PinNameS0_>:
 * Created: 04/07/2016 13:27:59
 *  Author: Silve
 */ 
#include "channelserial.h"

ChannelSerial::ChannelSerial(PinName tx, PinName rx)
    3a14:	b570      	push	{r4, r5, r6, lr}
    3a16:	1c04      	adds	r4, r0, #0
{
protected:
	ChannelCallback* call;
	
public:
    Channel() : call(0) {}
    3a18:	2500      	movs	r5, #0
    3a1a:	6045      	str	r5, [r0, #4]
  : s(tx, rx), n_rx_int(0)
    3a1c:	4b05      	ldr	r3, [pc, #20]	; (3a34 <_ZN13ChannelSerialC1E7PinNameS0_+0x20>)
    3a1e:	3308      	adds	r3, #8
    3a20:	6003      	str	r3, [r0, #0]
    3a22:	3008      	adds	r0, #8
    3a24:	2300      	movs	r3, #0
    3a26:	4e04      	ldr	r6, [pc, #16]	; (3a38 <_ZN13ChannelSerialC1E7PinNameS0_+0x24>)
    3a28:	47b0      	blx	r6
    3a2a:	23fc      	movs	r3, #252	; 0xfc
    3a2c:	50e5      	str	r5, [r4, r3]
{
	
}
    3a2e:	1c20      	adds	r0, r4, #0
    3a30:	bd70      	pop	{r4, r5, r6, pc}
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	0000e7c8 	.word	0x0000e7c8
    3a38:	00005105 	.word	0x00005105

00003a3c <_ZN15ChannelCallback10OnTransmitEP7Channel>:
	virtual ~ChannelCallback(){}
	
	// When data is received
	virtual void OnReceive(Channel* c){}
	// When data is sent
	virtual void OnTransmit(Channel* c){}
    3a3c:	4770      	bx	lr
    3a3e:	46c0      	nop			; (mov r8, r8)

00003a40 <_ZN15ChannelCallback9OnSpecialEP7Channeli>:
	// When a special event for channel occurs
	virtual void OnSpecial(Channel* c, int e){}
    3a40:	4770      	bx	lr
    3a42:	46c0      	nop			; (mov r8, r8)

00003a44 <_ZN15ChannelCallback7OnErrorEP7Channeli>:
	// When an error occurs
	virtual void OnError(Channel* c, int e){}
    3a44:	4770      	bx	lr
    3a46:	46c0      	nop			; (mov r8, r8)

00003a48 <_ZN5RelayD1Ev>:
}

Relay::~Relay()
{
	
}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			; (mov r8, r8)

00003a4c <_ZN5Relay9OnReceiveEP7Channel>:
	
void Relay::OnReceive(Channel* c)
{
    3a4c:	b538      	push	{r3, r4, r5, lr}
	if(output)
    3a4e:	6844      	ldr	r4, [r0, #4]
    3a50:	2c00      	cmp	r4, #0
    3a52:	d008      	beq.n	3a66 <_ZN5Relay9OnReceiveEP7Channel+0x1a>
    3a54:	1c08      	adds	r0, r1, #0
	{
		output->putc(c->getc());
    3a56:	6823      	ldr	r3, [r4, #0]
    3a58:	689d      	ldr	r5, [r3, #8]
    3a5a:	680b      	ldr	r3, [r1, #0]
    3a5c:	68db      	ldr	r3, [r3, #12]
    3a5e:	4798      	blx	r3
    3a60:	1c01      	adds	r1, r0, #0
    3a62:	1c20      	adds	r0, r4, #0
    3a64:	47a8      	blx	r5
	}
}
    3a66:	bd38      	pop	{r3, r4, r5, pc}

00003a68 <_ZN13RelayBuffered9OnReceiveEP7Channel>:
{
		
}
	
void RelayBuffered::OnReceive(Channel* c)
{
    3a68:	b510      	push	{r4, lr}
    3a6a:	1c03      	adds	r3, r0, #0
	if(c)
    3a6c:	2900      	cmp	r1, #0
    3a6e:	d01c      	beq.n	3aaa <_ZN13RelayBuffered9OnReceiveEP7Channel+0x42>
    3a70:	1c08      	adds	r0, r1, #0
    3a72:	1c1c      	adds	r4, r3, #0
	{
		uint8_t ch = c->getc();
    3a74:	680b      	ldr	r3, [r1, #0]
    3a76:	68db      	ldr	r3, [r3, #12]
    3a78:	4798      	blx	r3
			
		buffer[buffer_end++] = ch;
    3a7a:	219a      	movs	r1, #154	; 0x9a
    3a7c:	0049      	lsls	r1, r1, #1
    3a7e:	5863      	ldr	r3, [r4, r1]
    3a80:	1c5a      	adds	r2, r3, #1
    3a82:	5062      	str	r2, [r4, r1]
    3a84:	18e3      	adds	r3, r4, r3
    3a86:	7218      	strb	r0, [r3, #8]
			
		if(ch == endchar)
    3a88:	233e      	movs	r3, #62	; 0x3e
    3a8a:	33ff      	adds	r3, #255	; 0xff
    3a8c:	5ce3      	ldrb	r3, [r4, r3]
    3a8e:	4283      	cmp	r3, r0
    3a90:	d104      	bne.n	3a9c <_ZN13RelayBuffered9OnReceiveEP7Channel+0x34>
		{
			newdata = true;
    3a92:	3934      	subs	r1, #52	; 0x34
    3a94:	39ff      	subs	r1, #255	; 0xff
    3a96:	239e      	movs	r3, #158	; 0x9e
    3a98:	005b      	lsls	r3, r3, #1
    3a9a:	54e1      	strb	r1, [r4, r3]
		}
			
		if(buffer_end >= RELAY_BUFFER_SIZE)
    3a9c:	232c      	movs	r3, #44	; 0x2c
    3a9e:	33ff      	adds	r3, #255	; 0xff
    3aa0:	429a      	cmp	r2, r3
    3aa2:	d902      	bls.n	3aaa <_ZN13RelayBuffered9OnReceiveEP7Channel+0x42>
		{
			buffer_end = 0;
    3aa4:	2200      	movs	r2, #0
    3aa6:	3309      	adds	r3, #9
    3aa8:	50e2      	str	r2, [r4, r3]
		}
	}
}
    3aaa:	bd10      	pop	{r4, pc}

00003aac <_ZN13RelayBuffered8PushDataEv>:
	
void RelayBuffered::PushData()
{
    3aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(output)
    3aae:	6843      	ldr	r3, [r0, #4]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d024      	beq.n	3afe <_ZN13RelayBuffered8PushDataEv+0x52>
	{
		while(newdata)
    3ab4:	239e      	movs	r3, #158	; 0x9e
    3ab6:	005b      	lsls	r3, r3, #1
    3ab8:	5cc3      	ldrb	r3, [r0, r3]
    3aba:	2b00      	cmp	r3, #0
    3abc:	d01f      	beq.n	3afe <_ZN13RelayBuffered8PushDataEv+0x52>
    3abe:	1c04      	adds	r4, r0, #0
		{
			uint8_t ch = buffer[buffer_pos++];
    3ac0:	259c      	movs	r5, #156	; 0x9c
    3ac2:	006d      	lsls	r5, r5, #1
				
			if(buffer_pos >= RELAY_BUFFER_SIZE)
    3ac4:	262c      	movs	r6, #44	; 0x2c
    3ac6:	36ff      	adds	r6, #255	; 0xff
			{
				buffer_pos = 0;
    3ac8:	2700      	movs	r7, #0
{
	if(output)
	{
		while(newdata)
		{
			uint8_t ch = buffer[buffer_pos++];
    3aca:	5963      	ldr	r3, [r4, r5]
    3acc:	1c5a      	adds	r2, r3, #1
    3ace:	5162      	str	r2, [r4, r5]
    3ad0:	18e3      	adds	r3, r4, r3
    3ad2:	7a19      	ldrb	r1, [r3, #8]
				
			if(buffer_pos >= RELAY_BUFFER_SIZE)
    3ad4:	42b2      	cmp	r2, r6
    3ad6:	d900      	bls.n	3ada <_ZN13RelayBuffered8PushDataEv+0x2e>
			{
				buffer_pos = 0;
    3ad8:	5167      	str	r7, [r4, r5]
			}
				
			if(buffer_pos == buffer_end)
    3ada:	239a      	movs	r3, #154	; 0x9a
    3adc:	005b      	lsls	r3, r3, #1
    3ade:	58e3      	ldr	r3, [r4, r3]
    3ae0:	5962      	ldr	r2, [r4, r5]
    3ae2:	429a      	cmp	r2, r3
    3ae4:	d102      	bne.n	3aec <_ZN13RelayBuffered8PushDataEv+0x40>
			{
				newdata = false;
    3ae6:	239e      	movs	r3, #158	; 0x9e
    3ae8:	005b      	lsls	r3, r3, #1
    3aea:	54e7      	strb	r7, [r4, r3]
			}
			
			output->putc(ch);
    3aec:	6860      	ldr	r0, [r4, #4]
    3aee:	6803      	ldr	r3, [r0, #0]
    3af0:	689b      	ldr	r3, [r3, #8]
    3af2:	4798      	blx	r3
	
void RelayBuffered::PushData()
{
	if(output)
	{
		while(newdata)
    3af4:	239e      	movs	r3, #158	; 0x9e
    3af6:	005b      	lsls	r3, r3, #1
    3af8:	5ce3      	ldrb	r3, [r4, r3]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d1e5      	bne.n	3aca <_ZN13RelayBuffered8PushDataEv+0x1e>
			}
			
			output->putc(ch);
		}
	}
}
    3afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003b00 <_ZN13RelayBuffered10HasNewDataEv>:
	
bool RelayBuffered::HasNewData()
{
	return newdata;
    3b00:	239e      	movs	r3, #158	; 0x9e
    3b02:	005b      	lsls	r3, r3, #1
    3b04:	5cc0      	ldrb	r0, [r0, r3]
}
    3b06:	4770      	bx	lr

00003b08 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel>:
{
		
}

void RelayBufferedTaskCLP::OnReceive(Channel* c)
{
    3b08:	b570      	push	{r4, r5, r6, lr}
    3b0a:	b0cc      	sub	sp, #304	; 0x130
    3b0c:	1c03      	adds	r3, r0, #0
	if(c)
    3b0e:	2900      	cmp	r1, #0
    3b10:	d064      	beq.n	3bdc <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd4>
    3b12:	1c08      	adds	r0, r1, #0
    3b14:	1c1c      	adds	r4, r3, #0
	{
		uint8_t ch = c->getc();
    3b16:	680b      	ldr	r3, [r1, #0]
    3b18:	68db      	ldr	r3, [r3, #12]
    3b1a:	4798      	blx	r3
    3b1c:	1c05      	adds	r5, r0, #0
    3b1e:	1e06      	subs	r6, r0, #0
			
		if(ch == CLP_ESCAPE_STX)
    3b20:	2e02      	cmp	r6, #2
    3b22:	d10f      	bne.n	3b44 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0x3c>
		{
		  
		  buffer_end = 0;
    3b24:	2300      	movs	r3, #0
    3b26:	229a      	movs	r2, #154	; 0x9a
    3b28:	0052      	lsls	r2, r2, #1
    3b2a:	50a3      	str	r3, [r4, r2]
		  buffer_pos = 0;
    3b2c:	3204      	adds	r2, #4
    3b2e:	50a3      	str	r3, [r4, r2]
		  Clock clk;
		  readClock(&clk);
    3b30:	a801      	add	r0, sp, #4
    3b32:	4b2b      	ldr	r3, [pc, #172]	; (3be0 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd8>)
    3b34:	4798      	blx	r3
		  timeProt.saveTime[0].second=clk.second;
    3b36:	9a01      	ldr	r2, [sp, #4]
    3b38:	4b2a      	ldr	r3, [pc, #168]	; (3be4 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xdc>)
    3b3a:	601a      	str	r2, [r3, #0]
		  timeProt.saveTime[0].halfmillis=clk.halfmillis;
    3b3c:	9a02      	ldr	r2, [sp, #8]
    3b3e:	605a      	str	r2, [r3, #4]
		  timeProt.saveTime[0].sign=true;
    3b40:	2201      	movs	r2, #1
    3b42:	721a      	strb	r2, [r3, #8]
		}
			
		buffer[buffer_end++] = ch;
    3b44:	229a      	movs	r2, #154	; 0x9a
    3b46:	0052      	lsls	r2, r2, #1
    3b48:	58a3      	ldr	r3, [r4, r2]
    3b4a:	1c59      	adds	r1, r3, #1
    3b4c:	50a1      	str	r1, [r4, r2]
    3b4e:	18e3      	adds	r3, r4, r3
    3b50:	721d      	strb	r5, [r3, #8]
		
		if(ch == endchar)
    3b52:	233e      	movs	r3, #62	; 0x3e
    3b54:	33ff      	adds	r3, #255	; 0xff
    3b56:	5ce3      	ldrb	r3, [r4, r3]
    3b58:	42b3      	cmp	r3, r6
    3b5a:	d135      	bne.n	3bc8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
		{
			uint8_t packet[CLP_UTILITY_MAX_PACKET_SIZE];
			size_t size = CLP_ParsePacketEscape((uint8_t*)buffer, packet);
    3b5c:	1c20      	adds	r0, r4, #0
    3b5e:	3008      	adds	r0, #8
    3b60:	a901      	add	r1, sp, #4
    3b62:	4b21      	ldr	r3, [pc, #132]	; (3be8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe0>)
    3b64:	4798      	blx	r3
    3b66:	1c06      	adds	r6, r0, #0
			//hmi.printf("ISR rece");
			if(CLP_IsPacketType(packet, CLP_EXTENSION_COMMAND_TIME_SYNC))
    3b68:	a801      	add	r0, sp, #4
    3b6a:	2154      	movs	r1, #84	; 0x54
    3b6c:	4b1f      	ldr	r3, [pc, #124]	; (3bec <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe4>)
    3b6e:	4798      	blx	r3
    3b70:	2800      	cmp	r0, #0
    3b72:	d018      	beq.n	3ba6 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0x9e>
			{
				//hmi.printf("T");
				newdata = false;
    3b74:	2200      	movs	r2, #0
    3b76:	239e      	movs	r3, #158	; 0x9e
    3b78:	005b      	lsls	r3, r3, #1
    3b7a:	54e2      	strb	r2, [r4, r3]
				memcpy(timeProt.receive,packet,RELAY_BUFFER_SIZE);
    3b7c:	4d19      	ldr	r5, [pc, #100]	; (3be4 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xdc>)
    3b7e:	1c28      	adds	r0, r5, #0
    3b80:	3025      	adds	r0, #37	; 0x25
    3b82:	30ff      	adds	r0, #255	; 0xff
    3b84:	a901      	add	r1, sp, #4
    3b86:	322d      	adds	r2, #45	; 0x2d
    3b88:	32ff      	adds	r2, #255	; 0xff
    3b8a:	4b19      	ldr	r3, [pc, #100]	; (3bf0 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xe8>)
    3b8c:	4798      	blx	r3
				timeProt.length = size;
    3b8e:	2384      	movs	r3, #132	; 0x84
    3b90:	54ee      	strb	r6, [r5, r3]
				if(synchroTimeSync!=NULL)
    3b92:	33c0      	adds	r3, #192	; 0xc0
    3b94:	58e0      	ldr	r0, [r4, r3]
    3b96:	2800      	cmp	r0, #0
    3b98:	d016      	beq.n	3bc8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				{
				  xSemaphoreGiveFromISR(synchroTimeSync,NULL);
    3b9a:	2100      	movs	r1, #0
    3b9c:	2200      	movs	r2, #0
    3b9e:	2300      	movs	r3, #0
    3ba0:	4d14      	ldr	r5, [pc, #80]	; (3bf4 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xec>)
    3ba2:	47a8      	blx	r5
    3ba4:	e010      	b.n	3bc8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				}
			}
			else
			{
				hmi.printf("R");
    3ba6:	4814      	ldr	r0, [pc, #80]	; (3bf8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf0>)
    3ba8:	4914      	ldr	r1, [pc, #80]	; (3bfc <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf4>)
    3baa:	4b15      	ldr	r3, [pc, #84]	; (3c00 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xf8>)
    3bac:	4798      	blx	r3
				newdata = true;
    3bae:	2201      	movs	r2, #1
    3bb0:	239e      	movs	r3, #158	; 0x9e
    3bb2:	005b      	lsls	r3, r3, #1
    3bb4:	54e2      	strb	r2, [r4, r3]
				if(synchroRelay!=NULL)
    3bb6:	3304      	adds	r3, #4
    3bb8:	58e0      	ldr	r0, [r4, r3]
    3bba:	2800      	cmp	r0, #0
    3bbc:	d004      	beq.n	3bc8 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xc0>
				{
					xSemaphoreGiveFromISR(synchroRelay,NULL);
    3bbe:	2100      	movs	r1, #0
    3bc0:	2200      	movs	r2, #0
    3bc2:	2300      	movs	r3, #0
    3bc4:	4d0b      	ldr	r5, [pc, #44]	; (3bf4 <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xec>)
    3bc6:	47a8      	blx	r5
				}
			}
		}
			
		if(buffer_end >= RELAY_BUFFER_SIZE)
    3bc8:	239a      	movs	r3, #154	; 0x9a
    3bca:	005b      	lsls	r3, r3, #1
    3bcc:	58e2      	ldr	r2, [r4, r3]
    3bce:	232c      	movs	r3, #44	; 0x2c
    3bd0:	33ff      	adds	r3, #255	; 0xff
    3bd2:	429a      	cmp	r2, r3
    3bd4:	d902      	bls.n	3bdc <_ZN20RelayBufferedTaskCLP9OnReceiveEP7Channel+0xd4>
		{
			buffer_end = 0;
    3bd6:	2200      	movs	r2, #0
    3bd8:	3309      	adds	r3, #9
    3bda:	50e2      	str	r2, [r4, r3]
		}
	}
    3bdc:	b04c      	add	sp, #304	; 0x130
    3bde:	bd70      	pop	{r4, r5, r6, pc}
    3be0:	000007c5 	.word	0x000007c5
    3be4:	20000398 	.word	0x20000398
    3be8:	000001b9 	.word	0x000001b9
    3bec:	000002a9 	.word	0x000002a9
    3bf0:	000094d7 	.word	0x000094d7
    3bf4:	00001a31 	.word	0x00001a31
    3bf8:	20000270 	.word	0x20000270
    3bfc:	0000e7e4 	.word	0x0000e7e4
    3c00:	00005361 	.word	0x00005361

00003c04 <_ZN13RelayBufferedD1Ev>:
}
	
RelayBuffered::~RelayBuffered()
{
		
}
    3c04:	4770      	bx	lr
    3c06:	46c0      	nop			; (mov r8, r8)

00003c08 <_ZN5RelayD0Ev>:
  : output(out)
{
	
}

Relay::~Relay()
    3c08:	b510      	push	{r4, lr}
    3c0a:	1c04      	adds	r4, r0, #0
{
	
}
    3c0c:	4b01      	ldr	r3, [pc, #4]	; (3c14 <_ZN5RelayD0Ev+0xc>)
    3c0e:	4798      	blx	r3
    3c10:	1c20      	adds	r0, r4, #0
    3c12:	bd10      	pop	{r4, pc}
    3c14:	00006a7b 	.word	0x00006a7b

00003c18 <_ZN20RelayBufferedTaskCLPD1Ev>:
}
	
RelayBufferedTaskCLP::~RelayBufferedTaskCLP()
{
		
}
    3c18:	4770      	bx	lr
    3c1a:	46c0      	nop			; (mov r8, r8)

00003c1c <_ZN20RelayBufferedTaskCLPD0Ev>:
  : RelayBufferedTask(out, synchroMeter, '\x03'), synchroTimeSync(synchroTime)
{

}
	
RelayBufferedTaskCLP::~RelayBufferedTaskCLP()
    3c1c:	b510      	push	{r4, lr}
    3c1e:	1c04      	adds	r4, r0, #0
{
		
}
    3c20:	4b01      	ldr	r3, [pc, #4]	; (3c28 <_ZN20RelayBufferedTaskCLPD0Ev+0xc>)
    3c22:	4798      	blx	r3
    3c24:	1c20      	adds	r0, r4, #0
    3c26:	bd10      	pop	{r4, pc}
    3c28:	00006a7b 	.word	0x00006a7b

00003c2c <_ZN13RelayBufferedD0Ev>:
  : Relay(out), buffer_end(0), buffer_pos(0), newdata(false), endchar(end)
{
	memset(buffer,0,RELAY_BUFFER_SIZE);
}
	
RelayBuffered::~RelayBuffered()
    3c2c:	b510      	push	{r4, lr}
    3c2e:	1c04      	adds	r4, r0, #0
{
		
}
    3c30:	4b01      	ldr	r3, [pc, #4]	; (3c38 <_ZN13RelayBufferedD0Ev+0xc>)
    3c32:	4798      	blx	r3
    3c34:	1c20      	adds	r0, r4, #0
    3c36:	bd10      	pop	{r4, pc}
    3c38:	00006a7b 	.word	0x00006a7b

00003c3c <_ZN5RelayC1EP7Channel>:
#include "relay.h"
#include "mbed.h"
#include "clp_api.h"

Relay::Relay(Channel* out)
  : output(out)
    3c3c:	4b02      	ldr	r3, [pc, #8]	; (3c48 <_ZN5RelayC1EP7Channel+0xc>)
    3c3e:	3308      	adds	r3, #8
    3c40:	6003      	str	r3, [r0, #0]
    3c42:	6041      	str	r1, [r0, #4]
{
	
}
    3c44:	4770      	bx	lr
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	0000e7e8 	.word	0x0000e7e8

00003c4c <_ZN13RelayBufferedC1EP7Channelh>:
	{
		output->putc(c->getc());
	}
}

RelayBuffered::RelayBuffered(Channel* out, uint8_t end)
    3c4c:	b510      	push	{r4, lr}
    3c4e:	1c04      	adds	r4, r0, #0
#include "relay.h"
#include "mbed.h"
#include "clp_api.h"

Relay::Relay(Channel* out)
  : output(out)
    3c50:	6041      	str	r1, [r0, #4]
		output->putc(c->getc());
	}
}

RelayBuffered::RelayBuffered(Channel* out, uint8_t end)
  : Relay(out), buffer_end(0), buffer_pos(0), newdata(false), endchar(end)
    3c52:	4b0b      	ldr	r3, [pc, #44]	; (3c80 <_ZN13RelayBufferedC1EP7Channelh+0x34>)
    3c54:	3308      	adds	r3, #8
    3c56:	6003      	str	r3, [r0, #0]
    3c58:	2300      	movs	r3, #0
    3c5a:	219a      	movs	r1, #154	; 0x9a
    3c5c:	0049      	lsls	r1, r1, #1
    3c5e:	5043      	str	r3, [r0, r1]
    3c60:	3104      	adds	r1, #4
    3c62:	5043      	str	r3, [r0, r1]
    3c64:	3104      	adds	r1, #4
    3c66:	5443      	strb	r3, [r0, r1]
    3c68:	233e      	movs	r3, #62	; 0x3e
    3c6a:	33ff      	adds	r3, #255	; 0xff
    3c6c:	54c2      	strb	r2, [r0, r3]
{
	memset(buffer,0,RELAY_BUFFER_SIZE);
    3c6e:	3008      	adds	r0, #8
    3c70:	2100      	movs	r1, #0
    3c72:	2296      	movs	r2, #150	; 0x96
    3c74:	0052      	lsls	r2, r2, #1
    3c76:	4b03      	ldr	r3, [pc, #12]	; (3c84 <_ZN13RelayBufferedC1EP7Channelh+0x38>)
    3c78:	4798      	blx	r3
}
    3c7a:	1c20      	adds	r0, r4, #0
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	0000e830 	.word	0x0000e830
    3c84:	000094e9 	.word	0x000094e9

00003c88 <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_>:
			buffer_end = 0;
		}
	}
}

RelayBufferedTaskCLP::RelayBufferedTaskCLP(Channel* out, xSemaphoreHandle synchroMeter, xSemaphoreHandle synchroTime)
    3c88:	b570      	push	{r4, r5, r6, lr}
    3c8a:	1c04      	adds	r4, r0, #0
    3c8c:	1c16      	adds	r6, r2, #0
    3c8e:	1c1d      	adds	r5, r3, #0
{
	return newdata;
}

RelayBufferedTask::RelayBufferedTask(Channel* out, xSemaphoreHandle synchro, uint8_t end)
  : RelayBuffered(out, end), synchroRelay(synchro)
    3c90:	2203      	movs	r2, #3
    3c92:	4b06      	ldr	r3, [pc, #24]	; (3cac <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_+0x24>)
    3c94:	4798      	blx	r3
    3c96:	23a0      	movs	r3, #160	; 0xa0
    3c98:	005b      	lsls	r3, r3, #1
    3c9a:	50e6      	str	r6, [r4, r3]
		}
	}
}

RelayBufferedTaskCLP::RelayBufferedTaskCLP(Channel* out, xSemaphoreHandle synchroMeter, xSemaphoreHandle synchroTime)
  : RelayBufferedTask(out, synchroMeter, '\x03'), synchroTimeSync(synchroTime)
    3c9c:	4b04      	ldr	r3, [pc, #16]	; (3cb0 <_ZN20RelayBufferedTaskCLPC1EP7ChannelPvS2_+0x28>)
    3c9e:	3308      	adds	r3, #8
    3ca0:	6023      	str	r3, [r4, #0]
    3ca2:	23a2      	movs	r3, #162	; 0xa2
    3ca4:	005b      	lsls	r3, r3, #1
    3ca6:	50e5      	str	r5, [r4, r3]
{

}
    3ca8:	1c20      	adds	r0, r4, #0
    3caa:	bd70      	pop	{r4, r5, r6, pc}
    3cac:	00003c4d 	.word	0x00003c4d
    3cb0:	0000e808 	.word	0x0000e808

00003cb4 <mbed_die>:
    3cb4:	b508      	push	{r3, lr}
    3cb6:	b672      	cpsid	i
    3cb8:	2096      	movs	r0, #150	; 0x96
    3cba:	f001 fbe1 	bl	5480 <wait_ms>
    3cbe:	2096      	movs	r0, #150	; 0x96
    3cc0:	f001 fbde 	bl	5480 <wait_ms>
    3cc4:	e7f8      	b.n	3cb8 <mbed_die+0x4>
    3cc6:	46c0      	nop			; (mov r8, r8)

00003cc8 <NVIC_SetVector>:
    3cc8:	4a0b      	ldr	r2, [pc, #44]	; (3cf8 <NVIC_SetVector+0x30>)
    3cca:	b530      	push	{r4, r5, lr}
    3ccc:	6894      	ldr	r4, [r2, #8]
    3cce:	6892      	ldr	r2, [r2, #8]
    3cd0:	1c23      	adds	r3, r4, #0
    3cd2:	2a00      	cmp	r2, #0
    3cd4:	d10c      	bne.n	3cf0 <NVIC_SetVector+0x28>
    3cd6:	2300      	movs	r3, #0
    3cd8:	2280      	movs	r2, #128	; 0x80
    3cda:	591d      	ldr	r5, [r3, r4]
    3cdc:	0592      	lsls	r2, r2, #22
    3cde:	189a      	adds	r2, r3, r2
    3ce0:	3304      	adds	r3, #4
    3ce2:	6015      	str	r5, [r2, #0]
    3ce4:	2bb0      	cmp	r3, #176	; 0xb0
    3ce6:	d1f7      	bne.n	3cd8 <NVIC_SetVector+0x10>
    3ce8:	2380      	movs	r3, #128	; 0x80
    3cea:	4a03      	ldr	r2, [pc, #12]	; (3cf8 <NVIC_SetVector+0x30>)
    3cec:	059b      	lsls	r3, r3, #22
    3cee:	6093      	str	r3, [r2, #8]
    3cf0:	3010      	adds	r0, #16
    3cf2:	0080      	lsls	r0, r0, #2
    3cf4:	50c1      	str	r1, [r0, r3]
    3cf6:	bd30      	pop	{r4, r5, pc}
    3cf8:	e000ed00 	.word	0xe000ed00

00003cfc <mbed_sdk_init>:
    3cfc:	b508      	push	{r3, lr}
    3cfe:	4b04      	ldr	r3, [pc, #16]	; (3d10 <mbed_sdk_init+0x14>)
    3d00:	781a      	ldrb	r2, [r3, #0]
    3d02:	2a00      	cmp	r2, #0
    3d04:	d103      	bne.n	3d0e <mbed_sdk_init+0x12>
    3d06:	3201      	adds	r2, #1
    3d08:	701a      	strb	r2, [r3, #0]
    3d0a:	f000 fc27 	bl	455c <system_init>
    3d0e:	bd08      	pop	{r3, pc}
    3d10:	20004240 	.word	0x20004240

00003d14 <_ZN4mbed10FileHandle4flenEv>:
    3d14:	6803      	ldr	r3, [r0, #0]
    3d16:	b570      	push	{r4, r5, r6, lr}
    3d18:	691b      	ldr	r3, [r3, #16]
    3d1a:	2100      	movs	r1, #0
    3d1c:	2201      	movs	r2, #1
    3d1e:	1c04      	adds	r4, r0, #0
    3d20:	4798      	blx	r3
    3d22:	1c06      	adds	r6, r0, #0
    3d24:	1c43      	adds	r3, r0, #1
    3d26:	d00e      	beq.n	3d46 <_ZN4mbed10FileHandle4flenEv+0x32>
    3d28:	6823      	ldr	r3, [r4, #0]
    3d2a:	2100      	movs	r1, #0
    3d2c:	691b      	ldr	r3, [r3, #16]
    3d2e:	2202      	movs	r2, #2
    3d30:	1c20      	adds	r0, r4, #0
    3d32:	4798      	blx	r3
    3d34:	1c05      	adds	r5, r0, #0
    3d36:	6823      	ldr	r3, [r4, #0]
    3d38:	1c20      	adds	r0, r4, #0
    3d3a:	691b      	ldr	r3, [r3, #16]
    3d3c:	1c31      	adds	r1, r6, #0
    3d3e:	2200      	movs	r2, #0
    3d40:	4798      	blx	r3
    3d42:	1c28      	adds	r0, r5, #0
    3d44:	bd70      	pop	{r4, r5, r6, pc}
    3d46:	e7fd      	b.n	3d44 <_ZN4mbed10FileHandle4flenEv+0x30>

00003d48 <_ZL11init_serialv.part.0>:
    3d48:	b508      	push	{r3, lr}
    3d4a:	4803      	ldr	r0, [pc, #12]	; (3d58 <_ZL11init_serialv.part.0+0x10>)
    3d4c:	2104      	movs	r1, #4
    3d4e:	2205      	movs	r2, #5
    3d50:	f000 fe32 	bl	49b8 <serial_init>
    3d54:	bd08      	pop	{r3, pc}
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	200043ec 	.word	0x200043ec

00003d5c <_ZN4mbed10FileHandleD1Ev>:
    3d5c:	4b09      	ldr	r3, [pc, #36]	; (3d84 <_ZN4mbed10FileHandleD1Ev+0x28>)
    3d5e:	b510      	push	{r4, lr}
    3d60:	3308      	adds	r3, #8
    3d62:	6003      	str	r3, [r0, #0]
    3d64:	4b08      	ldr	r3, [pc, #32]	; (3d88 <_ZN4mbed10FileHandleD1Ev+0x2c>)
    3d66:	2100      	movs	r1, #0
    3d68:	1c5a      	adds	r2, r3, #1
    3d6a:	32ff      	adds	r2, #255	; 0xff
    3d6c:	e002      	b.n	3d74 <_ZN4mbed10FileHandleD1Ev+0x18>
    3d6e:	3304      	adds	r3, #4
    3d70:	4293      	cmp	r3, r2
    3d72:	d006      	beq.n	3d82 <_ZN4mbed10FileHandleD1Ev+0x26>
    3d74:	681c      	ldr	r4, [r3, #0]
    3d76:	4284      	cmp	r4, r0
    3d78:	d1f9      	bne.n	3d6e <_ZN4mbed10FileHandleD1Ev+0x12>
    3d7a:	6019      	str	r1, [r3, #0]
    3d7c:	3304      	adds	r3, #4
    3d7e:	4293      	cmp	r3, r2
    3d80:	d1f8      	bne.n	3d74 <_ZN4mbed10FileHandleD1Ev+0x18>
    3d82:	bd10      	pop	{r4, pc}
    3d84:	0000e870 	.word	0x0000e870
    3d88:	20004244 	.word	0x20004244

00003d8c <_open>:
    3d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8e:	4647      	mov	r7, r8
    3d90:	b480      	push	{r7}
    3d92:	1c0e      	adds	r6, r1, #0
    3d94:	b082      	sub	sp, #8
    3d96:	4934      	ldr	r1, [pc, #208]	; (3e68 <_open+0xdc>)
    3d98:	1c05      	adds	r5, r0, #0
    3d9a:	f007 f82b 	bl	adf4 <strcmp>
    3d9e:	1e04      	subs	r4, r0, #0
    3da0:	d108      	bne.n	3db4 <_open+0x28>
    3da2:	4b32      	ldr	r3, [pc, #200]	; (3e6c <_open+0xe0>)
    3da4:	681b      	ldr	r3, [r3, #0]
    3da6:	2b00      	cmp	r3, #0
    3da8:	d00f      	beq.n	3dca <_open+0x3e>
    3daa:	1c20      	adds	r0, r4, #0
    3dac:	b002      	add	sp, #8
    3dae:	bc04      	pop	{r2}
    3db0:	4690      	mov	r8, r2
    3db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3db4:	1c28      	adds	r0, r5, #0
    3db6:	492e      	ldr	r1, [pc, #184]	; (3e70 <_open+0xe4>)
    3db8:	f007 f81c 	bl	adf4 <strcmp>
    3dbc:	2800      	cmp	r0, #0
    3dbe:	d107      	bne.n	3dd0 <_open+0x44>
    3dc0:	4b2a      	ldr	r3, [pc, #168]	; (3e6c <_open+0xe0>)
    3dc2:	2401      	movs	r4, #1
    3dc4:	681b      	ldr	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d1ef      	bne.n	3daa <_open+0x1e>
    3dca:	f7ff ffbd 	bl	3d48 <_ZL11init_serialv.part.0>
    3dce:	e7ec      	b.n	3daa <_open+0x1e>
    3dd0:	1c28      	adds	r0, r5, #0
    3dd2:	4928      	ldr	r1, [pc, #160]	; (3e74 <_open+0xe8>)
    3dd4:	f007 f80e 	bl	adf4 <strcmp>
    3dd8:	2800      	cmp	r0, #0
    3dda:	d024      	beq.n	3e26 <_open+0x9a>
    3ddc:	4f26      	ldr	r7, [pc, #152]	; (3e78 <_open+0xec>)
    3dde:	2400      	movs	r4, #0
    3de0:	1c3b      	adds	r3, r7, #0
    3de2:	e003      	b.n	3dec <_open+0x60>
    3de4:	3401      	adds	r4, #1
    3de6:	3304      	adds	r3, #4
    3de8:	2c40      	cmp	r4, #64	; 0x40
    3dea:	d022      	beq.n	3e32 <_open+0xa6>
    3dec:	681a      	ldr	r2, [r3, #0]
    3dee:	2a00      	cmp	r2, #0
    3df0:	d1f8      	bne.n	3de4 <_open+0x58>
    3df2:	782b      	ldrb	r3, [r5, #0]
    3df4:	2b3a      	cmp	r3, #58	; 0x3a
    3df6:	d030      	beq.n	3e5a <_open+0xce>
    3df8:	4668      	mov	r0, sp
    3dfa:	1c29      	adds	r1, r5, #0
    3dfc:	f001 f848 	bl	4e90 <_ZN4mbed8FilePathC1EPKc>
    3e00:	4668      	mov	r0, sp
    3e02:	f001 f89f 	bl	4f44 <_ZN4mbed8FilePath6existsEv>
    3e06:	2800      	cmp	r0, #0
    3e08:	d013      	beq.n	3e32 <_open+0xa6>
    3e0a:	4668      	mov	r0, sp
    3e0c:	f001 f87c 	bl	4f08 <_ZN4mbed8FilePath6isFileEv>
    3e10:	2800      	cmp	r0, #0
    3e12:	d011      	beq.n	3e38 <_open+0xac>
    3e14:	4668      	mov	r0, sp
    3e16:	f001 f883 	bl	4f20 <_ZN4mbed8FilePath4fileEv>
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d009      	beq.n	3e32 <_open+0xa6>
    3e1e:	00a3      	lsls	r3, r4, #2
    3e20:	50f8      	str	r0, [r7, r3]
    3e22:	3403      	adds	r4, #3
    3e24:	e7c1      	b.n	3daa <_open+0x1e>
    3e26:	4b11      	ldr	r3, [pc, #68]	; (3e6c <_open+0xe0>)
    3e28:	2402      	movs	r4, #2
    3e2a:	681b      	ldr	r3, [r3, #0]
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d1bc      	bne.n	3daa <_open+0x1e>
    3e30:	e7cb      	b.n	3dca <_open+0x3e>
    3e32:	2401      	movs	r4, #1
    3e34:	4264      	negs	r4, r4
    3e36:	e7b8      	b.n	3daa <_open+0x1e>
    3e38:	4668      	mov	r0, sp
    3e3a:	f001 f857 	bl	4eec <_ZN4mbed8FilePath10fileSystemEv>
    3e3e:	1e05      	subs	r5, r0, #0
    3e40:	d0f7      	beq.n	3e32 <_open+0xa6>
    3e42:	6803      	ldr	r3, [r0, #0]
    3e44:	4668      	mov	r0, sp
    3e46:	689b      	ldr	r3, [r3, #8]
    3e48:	4698      	mov	r8, r3
    3e4a:	f001 f84d 	bl	4ee8 <_ZN4mbed8FilePath8fileNameEv>
    3e4e:	4a0b      	ldr	r2, [pc, #44]	; (3e7c <_open+0xf0>)
    3e50:	1c01      	adds	r1, r0, #0
    3e52:	4032      	ands	r2, r6
    3e54:	1c28      	adds	r0, r5, #0
    3e56:	47c0      	blx	r8
    3e58:	e7df      	b.n	3e1a <_open+0x8e>
    3e5a:	1c28      	adds	r0, r5, #0
    3e5c:	4908      	ldr	r1, [pc, #32]	; (3e80 <_open+0xf4>)
    3e5e:	466a      	mov	r2, sp
    3e60:	f006 ff52 	bl	ad08 <siscanf>
    3e64:	9800      	ldr	r0, [sp, #0]
    3e66:	e7d8      	b.n	3e1a <_open+0x8e>
    3e68:	0000e858 	.word	0x0000e858
    3e6c:	2000434c 	.word	0x2000434c
    3e70:	0000e868 	.word	0x0000e868
    3e74:	0000e860 	.word	0x0000e860
    3e78:	20004244 	.word	0x20004244
    3e7c:	fffeffff 	.word	0xfffeffff
    3e80:	0000e89c 	.word	0x0000e89c

00003e84 <_close>:
    3e84:	b508      	push	{r3, lr}
    3e86:	1c03      	adds	r3, r0, #0
    3e88:	2000      	movs	r0, #0
    3e8a:	2b02      	cmp	r3, #2
    3e8c:	dd0a      	ble.n	3ea4 <_close+0x20>
    3e8e:	4907      	ldr	r1, [pc, #28]	; (3eac <_close+0x28>)
    3e90:	3b03      	subs	r3, #3
    3e92:	009b      	lsls	r3, r3, #2
    3e94:	585a      	ldr	r2, [r3, r1]
    3e96:	5058      	str	r0, [r3, r1]
    3e98:	2a00      	cmp	r2, #0
    3e9a:	d004      	beq.n	3ea6 <_close+0x22>
    3e9c:	6813      	ldr	r3, [r2, #0]
    3e9e:	1c10      	adds	r0, r2, #0
    3ea0:	685b      	ldr	r3, [r3, #4]
    3ea2:	4798      	blx	r3
    3ea4:	bd08      	pop	{r3, pc}
    3ea6:	2001      	movs	r0, #1
    3ea8:	4240      	negs	r0, r0
    3eaa:	e7fb      	b.n	3ea4 <_close+0x20>
    3eac:	20004244 	.word	0x20004244

00003eb0 <_write>:
    3eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3eb2:	1c0c      	adds	r4, r1, #0
    3eb4:	1c17      	adds	r7, r2, #0
    3eb6:	2802      	cmp	r0, #2
    3eb8:	dc12      	bgt.n	3ee0 <_write+0x30>
    3eba:	4b10      	ldr	r3, [pc, #64]	; (3efc <_write+0x4c>)
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d101      	bne.n	3ec6 <_write+0x16>
    3ec2:	f7ff ff41 	bl	3d48 <_ZL11init_serialv.part.0>
    3ec6:	2f00      	cmp	r7, #0
    3ec8:	d008      	beq.n	3edc <_write+0x2c>
    3eca:	4d0d      	ldr	r5, [pc, #52]	; (3f00 <_write+0x50>)
    3ecc:	19e6      	adds	r6, r4, r7
    3ece:	7821      	ldrb	r1, [r4, #0]
    3ed0:	1c28      	adds	r0, r5, #0
    3ed2:	3401      	adds	r4, #1
    3ed4:	f000 ffbc 	bl	4e50 <serial_putc>
    3ed8:	42b4      	cmp	r4, r6
    3eda:	d1f8      	bne.n	3ece <_write+0x1e>
    3edc:	1c38      	adds	r0, r7, #0
    3ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ee0:	3803      	subs	r0, #3
    3ee2:	4b08      	ldr	r3, [pc, #32]	; (3f04 <_write+0x54>)
    3ee4:	0080      	lsls	r0, r0, #2
    3ee6:	58c0      	ldr	r0, [r0, r3]
    3ee8:	2800      	cmp	r0, #0
    3eea:	d003      	beq.n	3ef4 <_write+0x44>
    3eec:	6803      	ldr	r3, [r0, #0]
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	4798      	blx	r3
    3ef2:	e7f4      	b.n	3ede <_write+0x2e>
    3ef4:	2001      	movs	r0, #1
    3ef6:	4240      	negs	r0, r0
    3ef8:	e7f1      	b.n	3ede <_write+0x2e>
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	2000434c 	.word	0x2000434c
    3f00:	200043ec 	.word	0x200043ec
    3f04:	20004244 	.word	0x20004244

00003f08 <_read>:
    3f08:	b510      	push	{r4, lr}
    3f0a:	1c0c      	adds	r4, r1, #0
    3f0c:	2802      	cmp	r0, #2
    3f0e:	dc09      	bgt.n	3f24 <_read+0x1c>
    3f10:	4b0c      	ldr	r3, [pc, #48]	; (3f44 <_read+0x3c>)
    3f12:	681b      	ldr	r3, [r3, #0]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d00f      	beq.n	3f38 <_read+0x30>
    3f18:	480b      	ldr	r0, [pc, #44]	; (3f48 <_read+0x40>)
    3f1a:	f000 ff6d 	bl	4df8 <serial_getc>
    3f1e:	7020      	strb	r0, [r4, #0]
    3f20:	2001      	movs	r0, #1
    3f22:	bd10      	pop	{r4, pc}
    3f24:	3803      	subs	r0, #3
    3f26:	4b09      	ldr	r3, [pc, #36]	; (3f4c <_read+0x44>)
    3f28:	0080      	lsls	r0, r0, #2
    3f2a:	58c0      	ldr	r0, [r0, r3]
    3f2c:	2800      	cmp	r0, #0
    3f2e:	d006      	beq.n	3f3e <_read+0x36>
    3f30:	6803      	ldr	r3, [r0, #0]
    3f32:	689b      	ldr	r3, [r3, #8]
    3f34:	4798      	blx	r3
    3f36:	e7f4      	b.n	3f22 <_read+0x1a>
    3f38:	f7ff ff06 	bl	3d48 <_ZL11init_serialv.part.0>
    3f3c:	e7ec      	b.n	3f18 <_read+0x10>
    3f3e:	2001      	movs	r0, #1
    3f40:	4240      	negs	r0, r0
    3f42:	e7ee      	b.n	3f22 <_read+0x1a>
    3f44:	2000434c 	.word	0x2000434c
    3f48:	200043ec 	.word	0x200043ec
    3f4c:	20004244 	.word	0x20004244

00003f50 <_isatty>:
    3f50:	b508      	push	{r3, lr}
    3f52:	1c03      	adds	r3, r0, #0
    3f54:	2001      	movs	r0, #1
    3f56:	2b02      	cmp	r3, #2
    3f58:	dd08      	ble.n	3f6c <_isatty+0x1c>
    3f5a:	3b03      	subs	r3, #3
    3f5c:	4a05      	ldr	r2, [pc, #20]	; (3f74 <_isatty+0x24>)
    3f5e:	009b      	lsls	r3, r3, #2
    3f60:	5898      	ldr	r0, [r3, r2]
    3f62:	2800      	cmp	r0, #0
    3f64:	d003      	beq.n	3f6e <_isatty+0x1e>
    3f66:	6803      	ldr	r3, [r0, #0]
    3f68:	68db      	ldr	r3, [r3, #12]
    3f6a:	4798      	blx	r3
    3f6c:	bd08      	pop	{r3, pc}
    3f6e:	2001      	movs	r0, #1
    3f70:	4240      	negs	r0, r0
    3f72:	e7fb      	b.n	3f6c <_isatty+0x1c>
    3f74:	20004244 	.word	0x20004244

00003f78 <_lseek>:
    3f78:	b508      	push	{r3, lr}
    3f7a:	1c03      	adds	r3, r0, #0
    3f7c:	2000      	movs	r0, #0
    3f7e:	2b02      	cmp	r3, #2
    3f80:	dd08      	ble.n	3f94 <_lseek+0x1c>
    3f82:	3b03      	subs	r3, #3
    3f84:	4805      	ldr	r0, [pc, #20]	; (3f9c <_lseek+0x24>)
    3f86:	009b      	lsls	r3, r3, #2
    3f88:	5818      	ldr	r0, [r3, r0]
    3f8a:	2800      	cmp	r0, #0
    3f8c:	d003      	beq.n	3f96 <_lseek+0x1e>
    3f8e:	6803      	ldr	r3, [r0, #0]
    3f90:	691b      	ldr	r3, [r3, #16]
    3f92:	4798      	blx	r3
    3f94:	bd08      	pop	{r3, pc}
    3f96:	2001      	movs	r0, #1
    3f98:	4240      	negs	r0, r0
    3f9a:	e7fb      	b.n	3f94 <_lseek+0x1c>
    3f9c:	20004244 	.word	0x20004244

00003fa0 <_fstat>:
    3fa0:	b508      	push	{r3, lr}
    3fa2:	2802      	cmp	r0, #2
    3fa4:	d804      	bhi.n	3fb0 <_fstat+0x10>
    3fa6:	2380      	movs	r3, #128	; 0x80
    3fa8:	2000      	movs	r0, #0
    3faa:	019b      	lsls	r3, r3, #6
    3fac:	604b      	str	r3, [r1, #4]
    3fae:	bd08      	pop	{r3, pc}
    3fb0:	f004 fe6a 	bl	8c88 <__errno>
    3fb4:	2309      	movs	r3, #9
    3fb6:	6003      	str	r3, [r0, #0]
    3fb8:	2001      	movs	r0, #1
    3fba:	4240      	negs	r0, r0
    3fbc:	e7f7      	b.n	3fae <_fstat+0xe>
    3fbe:	46c0      	nop			; (mov r8, r8)

00003fc0 <__cxa_pure_virtual>:
    3fc0:	b508      	push	{r3, lr}
    3fc2:	2001      	movs	r0, #1
    3fc4:	f004 fe66 	bl	8c94 <exit>

00003fc8 <mbed_main>:
    3fc8:	4770      	bx	lr
    3fca:	46c0      	nop			; (mov r8, r8)

00003fcc <__wrap_main>:
    3fcc:	b508      	push	{r3, lr}
    3fce:	f7ff fe95 	bl	3cfc <mbed_sdk_init>
    3fd2:	f7ff fff9 	bl	3fc8 <mbed_main>
    3fd6:	f7fe fb63 	bl	26a0 <main>
    3fda:	bd08      	pop	{r3, pc}

00003fdc <_sbrk>:
    3fdc:	4a07      	ldr	r2, [pc, #28]	; (3ffc <_sbrk+0x20>)
    3fde:	6813      	ldr	r3, [r2, #0]
    3fe0:	1818      	adds	r0, r3, r0
    3fe2:	f3ef 8108 	mrs	r1, MSP
    3fe6:	4288      	cmp	r0, r1
    3fe8:	d202      	bcs.n	3ff0 <_sbrk+0x14>
    3fea:	6010      	str	r0, [r2, #0]
    3fec:	1c18      	adds	r0, r3, #0
    3fee:	4770      	bx	lr
    3ff0:	220c      	movs	r2, #12
    3ff2:	2001      	movs	r0, #1
    3ff4:	4b02      	ldr	r3, [pc, #8]	; (4000 <_sbrk+0x24>)
    3ff6:	4240      	negs	r0, r0
    3ff8:	601a      	str	r2, [r3, #0]
    3ffa:	e7f8      	b.n	3fee <_sbrk+0x12>
    3ffc:	200000cc 	.word	0x200000cc
    4000:	2000445c 	.word	0x2000445c

00004004 <_exit>:
    4004:	b508      	push	{r3, lr}
    4006:	2800      	cmp	r0, #0
    4008:	d100      	bne.n	400c <_exit+0x8>
    400a:	e7fe      	b.n	400a <_exit+0x6>
    400c:	f7ff fe52 	bl	3cb4 <mbed_die>
    4010:	e7fb      	b.n	400a <_exit+0x6>
    4012:	46c0      	nop			; (mov r8, r8)

00004014 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>:
    4014:	b508      	push	{r3, lr}
    4016:	2100      	movs	r1, #0
    4018:	f006 fd77 	bl	ab0a <setbuf>
    401c:	bd08      	pop	{r3, pc}
    401e:	46c0      	nop			; (mov r8, r8)

00004020 <_ZN4mbed9mbed_getcEP7__sFILE>:
    4020:	b508      	push	{r3, lr}
    4022:	f004 ffa7 	bl	8f74 <fgetc>
    4026:	bd08      	pop	{r3, pc}

00004028 <Dummy_Handler>:
    4028:	e7fe      	b.n	4028 <Dummy_Handler>
    402a:	46c0      	nop			; (mov r8, r8)

0000402c <Reset_Handler>:
    402c:	4816      	ldr	r0, [pc, #88]	; (4088 <Reset_Handler+0x5c>)
    402e:	4917      	ldr	r1, [pc, #92]	; (408c <Reset_Handler+0x60>)
    4030:	b510      	push	{r4, lr}
    4032:	4288      	cmp	r0, r1
    4034:	d00d      	beq.n	4052 <Reset_Handler+0x26>
    4036:	4b16      	ldr	r3, [pc, #88]	; (4090 <Reset_Handler+0x64>)
    4038:	4299      	cmp	r1, r3
    403a:	d20a      	bcs.n	4052 <Reset_Handler+0x26>
    403c:	43ca      	mvns	r2, r1
    403e:	18d3      	adds	r3, r2, r3
    4040:	2200      	movs	r2, #0
    4042:	089b      	lsrs	r3, r3, #2
    4044:	3301      	adds	r3, #1
    4046:	009b      	lsls	r3, r3, #2
    4048:	5884      	ldr	r4, [r0, r2]
    404a:	508c      	str	r4, [r1, r2]
    404c:	3204      	adds	r2, #4
    404e:	429a      	cmp	r2, r3
    4050:	d1fa      	bne.n	4048 <Reset_Handler+0x1c>
    4052:	4910      	ldr	r1, [pc, #64]	; (4094 <Reset_Handler+0x68>)
    4054:	4b10      	ldr	r3, [pc, #64]	; (4098 <Reset_Handler+0x6c>)
    4056:	4299      	cmp	r1, r3
    4058:	d20b      	bcs.n	4072 <Reset_Handler+0x46>
    405a:	43ca      	mvns	r2, r1
    405c:	2000      	movs	r0, #0
    405e:	18d3      	adds	r3, r2, r3
    4060:	2200      	movs	r2, #0
    4062:	089b      	lsrs	r3, r3, #2
    4064:	3301      	adds	r3, #1
    4066:	009b      	lsls	r3, r3, #2
    4068:	188c      	adds	r4, r1, r2
    406a:	3204      	adds	r2, #4
    406c:	6020      	str	r0, [r4, #0]
    406e:	429a      	cmp	r2, r3
    4070:	d1fa      	bne.n	4068 <Reset_Handler+0x3c>
    4072:	21ff      	movs	r1, #255	; 0xff
    4074:	4b09      	ldr	r3, [pc, #36]	; (409c <Reset_Handler+0x70>)
    4076:	4a0a      	ldr	r2, [pc, #40]	; (40a0 <Reset_Handler+0x74>)
    4078:	438b      	bics	r3, r1
    407a:	6093      	str	r3, [r2, #8]
    407c:	f005 f98e 	bl	939c <__libc_init_array>
    4080:	f7ff ffa4 	bl	3fcc <__wrap_main>
    4084:	e7fe      	b.n	4084 <Reset_Handler+0x58>
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	0000f61c 	.word	0x0000f61c
    408c:	200000b0 	.word	0x200000b0
    4090:	20000174 	.word	0x20000174
    4094:	20000174 	.word	0x20000174
    4098:	20004460 	.word	0x20004460
    409c:	00000000 	.word	0x00000000
    40a0:	e000ed00 	.word	0xe000ed00

000040a4 <extint_register_callback>:
    40a4:	2317      	movs	r3, #23
    40a6:	2a00      	cmp	r2, #0
    40a8:	d001      	beq.n	40ae <extint_register_callback+0xa>
    40aa:	1c18      	adds	r0, r3, #0
    40ac:	4770      	bx	lr
    40ae:	4a06      	ldr	r2, [pc, #24]	; (40c8 <extint_register_callback+0x24>)
    40b0:	0089      	lsls	r1, r1, #2
    40b2:	588b      	ldr	r3, [r1, r2]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d003      	beq.n	40c0 <extint_register_callback+0x1c>
    40b8:	4283      	cmp	r3, r0
    40ba:	d003      	beq.n	40c4 <extint_register_callback+0x20>
    40bc:	231d      	movs	r3, #29
    40be:	e7f4      	b.n	40aa <extint_register_callback+0x6>
    40c0:	5088      	str	r0, [r1, r2]
    40c2:	e7f2      	b.n	40aa <extint_register_callback+0x6>
    40c4:	2300      	movs	r3, #0
    40c6:	e7f0      	b.n	40aa <extint_register_callback+0x6>
    40c8:	200043ac 	.word	0x200043ac

000040cc <extint_chan_enable_callback>:
    40cc:	2317      	movs	r3, #23
    40ce:	2900      	cmp	r1, #0
    40d0:	d001      	beq.n	40d6 <extint_chan_enable_callback+0xa>
    40d2:	1c18      	adds	r0, r3, #0
    40d4:	4770      	bx	lr
    40d6:	2200      	movs	r2, #0
    40d8:	281f      	cmp	r0, #31
    40da:	d800      	bhi.n	40de <extint_chan_enable_callback+0x12>
    40dc:	4a02      	ldr	r2, [pc, #8]	; (40e8 <extint_chan_enable_callback+0x1c>)
    40de:	2301      	movs	r3, #1
    40e0:	4083      	lsls	r3, r0
    40e2:	60d3      	str	r3, [r2, #12]
    40e4:	2300      	movs	r3, #0
    40e6:	e7f4      	b.n	40d2 <extint_chan_enable_callback+0x6>
    40e8:	40001800 	.word	0x40001800

000040ec <EIC_Handler>:
    40ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ee:	2300      	movs	r3, #0
    40f0:	2601      	movs	r6, #1
    40f2:	4c0b      	ldr	r4, [pc, #44]	; (4120 <EIC_Handler+0x34>)
    40f4:	4d0b      	ldr	r5, [pc, #44]	; (4124 <EIC_Handler+0x38>)
    40f6:	4f0c      	ldr	r7, [pc, #48]	; (4128 <EIC_Handler+0x3c>)
    40f8:	7023      	strb	r3, [r4, #0]
    40fa:	1c32      	adds	r2, r6, #0
    40fc:	409a      	lsls	r2, r3
    40fe:	6929      	ldr	r1, [r5, #16]
    4100:	4211      	tst	r1, r2
    4102:	d005      	beq.n	4110 <EIC_Handler+0x24>
    4104:	612a      	str	r2, [r5, #16]
    4106:	009b      	lsls	r3, r3, #2
    4108:	59db      	ldr	r3, [r3, r7]
    410a:	2b00      	cmp	r3, #0
    410c:	d000      	beq.n	4110 <EIC_Handler+0x24>
    410e:	4798      	blx	r3
    4110:	7823      	ldrb	r3, [r4, #0]
    4112:	3301      	adds	r3, #1
    4114:	b2db      	uxtb	r3, r3
    4116:	7023      	strb	r3, [r4, #0]
    4118:	2b0f      	cmp	r3, #15
    411a:	d9ee      	bls.n	40fa <EIC_Handler+0xe>
    411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    411e:	46c0      	nop			; (mov r8, r8)
    4120:	200043a8 	.word	0x200043a8
    4124:	40001800 	.word	0x40001800
    4128:	200043ac 	.word	0x200043ac

0000412c <_extint_enable>:
    412c:	2302      	movs	r3, #2
    412e:	4a04      	ldr	r2, [pc, #16]	; (4140 <_extint_enable+0x14>)
    4130:	7811      	ldrb	r1, [r2, #0]
    4132:	430b      	orrs	r3, r1
    4134:	7013      	strb	r3, [r2, #0]
    4136:	7853      	ldrb	r3, [r2, #1]
    4138:	b25b      	sxtb	r3, r3
    413a:	2b00      	cmp	r3, #0
    413c:	dbfb      	blt.n	4136 <_extint_enable+0xa>
    413e:	4770      	bx	lr
    4140:	40001800 	.word	0x40001800

00004144 <_system_extint_init>:
    4144:	2340      	movs	r3, #64	; 0x40
    4146:	b500      	push	{lr}
    4148:	4a12      	ldr	r2, [pc, #72]	; (4194 <_system_extint_init+0x50>)
    414a:	b083      	sub	sp, #12
    414c:	6991      	ldr	r1, [r2, #24]
    414e:	2005      	movs	r0, #5
    4150:	430b      	orrs	r3, r1
    4152:	6193      	str	r3, [r2, #24]
    4154:	2300      	movs	r3, #0
    4156:	a901      	add	r1, sp, #4
    4158:	700b      	strb	r3, [r1, #0]
    415a:	f000 f9c9 	bl	44f0 <system_gclk_chan_set_config>
    415e:	2005      	movs	r0, #5
    4160:	f000 f988 	bl	4474 <system_gclk_chan_enable>
    4164:	2301      	movs	r3, #1
    4166:	4a0c      	ldr	r2, [pc, #48]	; (4198 <_system_extint_init+0x54>)
    4168:	7811      	ldrb	r1, [r2, #0]
    416a:	430b      	orrs	r3, r1
    416c:	7013      	strb	r3, [r2, #0]
    416e:	7853      	ldrb	r3, [r2, #1]
    4170:	b25b      	sxtb	r3, r3
    4172:	2b00      	cmp	r3, #0
    4174:	dbfb      	blt.n	416e <_system_extint_init+0x2a>
    4176:	4b09      	ldr	r3, [pc, #36]	; (419c <_system_extint_init+0x58>)
    4178:	2200      	movs	r2, #0
    417a:	1c19      	adds	r1, r3, #0
    417c:	3140      	adds	r1, #64	; 0x40
    417e:	c304      	stmia	r3!, {r2}
    4180:	428b      	cmp	r3, r1
    4182:	d1fc      	bne.n	417e <_system_extint_init+0x3a>
    4184:	2210      	movs	r2, #16
    4186:	4b06      	ldr	r3, [pc, #24]	; (41a0 <_system_extint_init+0x5c>)
    4188:	601a      	str	r2, [r3, #0]
    418a:	f7ff ffcf 	bl	412c <_extint_enable>
    418e:	b003      	add	sp, #12
    4190:	bd00      	pop	{pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	40000400 	.word	0x40000400
    4198:	40001800 	.word	0x40001800
    419c:	200043ac 	.word	0x200043ac
    41a0:	e000e100 	.word	0xe000e100

000041a4 <extint_chan_get_config_defaults>:
    41a4:	2300      	movs	r3, #0
    41a6:	2201      	movs	r2, #1
    41a8:	6003      	str	r3, [r0, #0]
    41aa:	6043      	str	r3, [r0, #4]
    41ac:	7283      	strb	r3, [r0, #10]
    41ae:	3302      	adds	r3, #2
    41b0:	7202      	strb	r2, [r0, #8]
    41b2:	7242      	strb	r2, [r0, #9]
    41b4:	72c3      	strb	r3, [r0, #11]
    41b6:	4770      	bx	lr

000041b8 <extint_chan_set_config>:
    41b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ba:	2300      	movs	r3, #0
    41bc:	1c0c      	adds	r4, r1, #0
    41be:	b083      	sub	sp, #12
    41c0:	a901      	add	r1, sp, #4
    41c2:	704b      	strb	r3, [r1, #1]
    41c4:	70cb      	strb	r3, [r1, #3]
    41c6:	7923      	ldrb	r3, [r4, #4]
    41c8:	1c05      	adds	r5, r0, #0
    41ca:	700b      	strb	r3, [r1, #0]
    41cc:	7a23      	ldrb	r3, [r4, #8]
    41ce:	7820      	ldrb	r0, [r4, #0]
    41d0:	708b      	strb	r3, [r1, #2]
    41d2:	2600      	movs	r6, #0
    41d4:	f000 f882 	bl	42dc <system_pinmux_pin_set_config>
    41d8:	2d1f      	cmp	r5, #31
    41da:	d800      	bhi.n	41de <extint_chan_set_config+0x26>
    41dc:	4e12      	ldr	r6, [pc, #72]	; (4228 <extint_chan_set_config+0x70>)
    41de:	2207      	movs	r2, #7
    41e0:	7aa3      	ldrb	r3, [r4, #10]
    41e2:	402a      	ands	r2, r5
    41e4:	0092      	lsls	r2, r2, #2
    41e6:	7ae0      	ldrb	r0, [r4, #11]
    41e8:	2b00      	cmp	r3, #0
    41ea:	d001      	beq.n	41f0 <extint_chan_set_config+0x38>
    41ec:	2308      	movs	r3, #8
    41ee:	4318      	orrs	r0, r3
    41f0:	270f      	movs	r7, #15
    41f2:	4097      	lsls	r7, r2
    41f4:	08eb      	lsrs	r3, r5, #3
    41f6:	009b      	lsls	r3, r3, #2
    41f8:	18f3      	adds	r3, r6, r3
    41fa:	6999      	ldr	r1, [r3, #24]
    41fc:	4090      	lsls	r0, r2
    41fe:	43b9      	bics	r1, r7
    4200:	1c0a      	adds	r2, r1, #0
    4202:	4302      	orrs	r2, r0
    4204:	619a      	str	r2, [r3, #24]
    4206:	7a63      	ldrb	r3, [r4, #9]
    4208:	2b00      	cmp	r3, #0
    420a:	d106      	bne.n	421a <extint_chan_set_config+0x62>
    420c:	2201      	movs	r2, #1
    420e:	40aa      	lsls	r2, r5
    4210:	6973      	ldr	r3, [r6, #20]
    4212:	4393      	bics	r3, r2
    4214:	6173      	str	r3, [r6, #20]
    4216:	b003      	add	sp, #12
    4218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    421a:	2201      	movs	r2, #1
    421c:	40aa      	lsls	r2, r5
    421e:	1c15      	adds	r5, r2, #0
    4220:	6973      	ldr	r3, [r6, #20]
    4222:	431d      	orrs	r5, r3
    4224:	6175      	str	r5, [r6, #20]
    4226:	e7f6      	b.n	4216 <extint_chan_set_config+0x5e>
    4228:	40001800 	.word	0x40001800

0000422c <_system_pinmux_config>:
    422c:	78d3      	ldrb	r3, [r2, #3]
    422e:	b570      	push	{r4, r5, r6, lr}
    4230:	2b00      	cmp	r3, #0
    4232:	d131      	bne.n	4298 <_system_pinmux_config+0x6c>
    4234:	7814      	ldrb	r4, [r2, #0]
    4236:	2c80      	cmp	r4, #128	; 0x80
    4238:	d047      	beq.n	42ca <_system_pinmux_config+0x9e>
    423a:	2380      	movs	r3, #128	; 0x80
    423c:	0624      	lsls	r4, r4, #24
    423e:	025b      	lsls	r3, r3, #9
    4240:	431c      	orrs	r4, r3
    4242:	7853      	ldrb	r3, [r2, #1]
    4244:	2502      	movs	r5, #2
    4246:	1c1e      	adds	r6, r3, #0
    4248:	43ae      	bics	r6, r5
    424a:	d107      	bne.n	425c <_system_pinmux_config+0x30>
    424c:	7893      	ldrb	r3, [r2, #2]
    424e:	2b00      	cmp	r3, #0
    4250:	d137      	bne.n	42c2 <_system_pinmux_config+0x96>
    4252:	2380      	movs	r3, #128	; 0x80
    4254:	029b      	lsls	r3, r3, #10
    4256:	431c      	orrs	r4, r3
    4258:	6041      	str	r1, [r0, #4]
    425a:	7853      	ldrb	r3, [r2, #1]
    425c:	3b01      	subs	r3, #1
    425e:	2b01      	cmp	r3, #1
    4260:	d935      	bls.n	42ce <_system_pinmux_config+0xa2>
    4262:	25a0      	movs	r5, #160	; 0xa0
    4264:	040b      	lsls	r3, r1, #16
    4266:	05ed      	lsls	r5, r5, #23
    4268:	0c1b      	lsrs	r3, r3, #16
    426a:	432b      	orrs	r3, r5
    426c:	25d0      	movs	r5, #208	; 0xd0
    426e:	4323      	orrs	r3, r4
    4270:	6283      	str	r3, [r0, #40]	; 0x28
    4272:	062d      	lsls	r5, r5, #24
    4274:	0c0b      	lsrs	r3, r1, #16
    4276:	432b      	orrs	r3, r5
    4278:	4323      	orrs	r3, r4
    427a:	6283      	str	r3, [r0, #40]	; 0x28
    427c:	78d3      	ldrb	r3, [r2, #3]
    427e:	2b00      	cmp	r3, #0
    4280:	d109      	bne.n	4296 <_system_pinmux_config+0x6a>
    4282:	0363      	lsls	r3, r4, #13
    4284:	d503      	bpl.n	428e <_system_pinmux_config+0x62>
    4286:	7893      	ldrb	r3, [r2, #2]
    4288:	2b01      	cmp	r3, #1
    428a:	d023      	beq.n	42d4 <_system_pinmux_config+0xa8>
    428c:	6141      	str	r1, [r0, #20]
    428e:	7853      	ldrb	r3, [r2, #1]
    4290:	3b01      	subs	r3, #1
    4292:	2b01      	cmp	r3, #1
    4294:	d913      	bls.n	42be <_system_pinmux_config+0x92>
    4296:	bd70      	pop	{r4, r5, r6, pc}
    4298:	24a0      	movs	r4, #160	; 0xa0
    429a:	040b      	lsls	r3, r1, #16
    429c:	05e4      	lsls	r4, r4, #23
    429e:	0c1b      	lsrs	r3, r3, #16
    42a0:	4323      	orrs	r3, r4
    42a2:	24d0      	movs	r4, #208	; 0xd0
    42a4:	6041      	str	r1, [r0, #4]
    42a6:	0624      	lsls	r4, r4, #24
    42a8:	6283      	str	r3, [r0, #40]	; 0x28
    42aa:	0c0b      	lsrs	r3, r1, #16
    42ac:	4323      	orrs	r3, r4
    42ae:	6283      	str	r3, [r0, #40]	; 0x28
    42b0:	78d3      	ldrb	r3, [r2, #3]
    42b2:	2b00      	cmp	r3, #0
    42b4:	d1ef      	bne.n	4296 <_system_pinmux_config+0x6a>
    42b6:	7853      	ldrb	r3, [r2, #1]
    42b8:	3b01      	subs	r3, #1
    42ba:	2b01      	cmp	r3, #1
    42bc:	d8eb      	bhi.n	4296 <_system_pinmux_config+0x6a>
    42be:	6081      	str	r1, [r0, #8]
    42c0:	e7e9      	b.n	4296 <_system_pinmux_config+0x6a>
    42c2:	23c0      	movs	r3, #192	; 0xc0
    42c4:	02db      	lsls	r3, r3, #11
    42c6:	431c      	orrs	r4, r3
    42c8:	e7c6      	b.n	4258 <_system_pinmux_config+0x2c>
    42ca:	2400      	movs	r4, #0
    42cc:	e7b9      	b.n	4242 <_system_pinmux_config+0x16>
    42ce:	4b02      	ldr	r3, [pc, #8]	; (42d8 <_system_pinmux_config+0xac>)
    42d0:	401c      	ands	r4, r3
    42d2:	e7c6      	b.n	4262 <_system_pinmux_config+0x36>
    42d4:	6181      	str	r1, [r0, #24]
    42d6:	e7da      	b.n	428e <_system_pinmux_config+0x62>
    42d8:	fffbffff 	.word	0xfffbffff

000042dc <system_pinmux_pin_set_config>:
    42dc:	b508      	push	{r3, lr}
    42de:	1c0a      	adds	r2, r1, #0
    42e0:	1c03      	adds	r3, r0, #0
    42e2:	09c1      	lsrs	r1, r0, #7
    42e4:	2000      	movs	r0, #0
    42e6:	2900      	cmp	r1, #0
    42e8:	d104      	bne.n	42f4 <system_pinmux_pin_set_config+0x18>
    42ea:	4906      	ldr	r1, [pc, #24]	; (4304 <system_pinmux_pin_set_config+0x28>)
    42ec:	0958      	lsrs	r0, r3, #5
    42ee:	468c      	mov	ip, r1
    42f0:	01c0      	lsls	r0, r0, #7
    42f2:	4460      	add	r0, ip
    42f4:	211f      	movs	r1, #31
    42f6:	400b      	ands	r3, r1
    42f8:	391e      	subs	r1, #30
    42fa:	4099      	lsls	r1, r3
    42fc:	f7ff ff96 	bl	422c <_system_pinmux_config>
    4300:	bd08      	pop	{r3, pc}
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	41004400 	.word	0x41004400

00004308 <system_gclk_init>:
    4308:	2308      	movs	r3, #8
    430a:	4a06      	ldr	r2, [pc, #24]	; (4324 <system_gclk_init+0x1c>)
    430c:	6991      	ldr	r1, [r2, #24]
    430e:	430b      	orrs	r3, r1
    4310:	6193      	str	r3, [r2, #24]
    4312:	2301      	movs	r3, #1
    4314:	2101      	movs	r1, #1
    4316:	4a04      	ldr	r2, [pc, #16]	; (4328 <system_gclk_init+0x20>)
    4318:	7013      	strb	r3, [r2, #0]
    431a:	7813      	ldrb	r3, [r2, #0]
    431c:	4219      	tst	r1, r3
    431e:	d1fc      	bne.n	431a <system_gclk_init+0x12>
    4320:	4770      	bx	lr
    4322:	46c0      	nop			; (mov r8, r8)
    4324:	40000400 	.word	0x40000400
    4328:	40000c00 	.word	0x40000c00

0000432c <system_gclk_gen_set_config>:
    432c:	b570      	push	{r4, r5, r6, lr}
    432e:	780d      	ldrb	r5, [r1, #0]
    4330:	784b      	ldrb	r3, [r1, #1]
    4332:	022d      	lsls	r5, r5, #8
    4334:	1c04      	adds	r4, r0, #0
    4336:	4305      	orrs	r5, r0
    4338:	2b00      	cmp	r3, #0
    433a:	d002      	beq.n	4342 <system_gclk_gen_set_config+0x16>
    433c:	2380      	movs	r3, #128	; 0x80
    433e:	02db      	lsls	r3, r3, #11
    4340:	431d      	orrs	r5, r3
    4342:	7a4b      	ldrb	r3, [r1, #9]
    4344:	2b00      	cmp	r3, #0
    4346:	d002      	beq.n	434e <system_gclk_gen_set_config+0x22>
    4348:	2380      	movs	r3, #128	; 0x80
    434a:	031b      	lsls	r3, r3, #12
    434c:	431d      	orrs	r5, r3
    434e:	684e      	ldr	r6, [r1, #4]
    4350:	2e01      	cmp	r6, #1
    4352:	d90f      	bls.n	4374 <system_gclk_gen_set_config+0x48>
    4354:	1e73      	subs	r3, r6, #1
    4356:	4033      	ands	r3, r6
    4358:	d129      	bne.n	43ae <system_gclk_gen_set_config+0x82>
    435a:	2e02      	cmp	r6, #2
    435c:	d005      	beq.n	436a <system_gclk_gen_set_config+0x3e>
    435e:	2202      	movs	r2, #2
    4360:	3301      	adds	r3, #1
    4362:	0052      	lsls	r2, r2, #1
    4364:	4296      	cmp	r6, r2
    4366:	d8fb      	bhi.n	4360 <system_gclk_gen_set_config+0x34>
    4368:	021b      	lsls	r3, r3, #8
    436a:	4318      	orrs	r0, r3
    436c:	2380      	movs	r3, #128	; 0x80
    436e:	1c04      	adds	r4, r0, #0
    4370:	035b      	lsls	r3, r3, #13
    4372:	431d      	orrs	r5, r3
    4374:	7a0b      	ldrb	r3, [r1, #8]
    4376:	2b00      	cmp	r3, #0
    4378:	d002      	beq.n	4380 <system_gclk_gen_set_config+0x54>
    437a:	2380      	movs	r3, #128	; 0x80
    437c:	039b      	lsls	r3, r3, #14
    437e:	431d      	orrs	r5, r3
    4380:	4a0e      	ldr	r2, [pc, #56]	; (43bc <system_gclk_gen_set_config+0x90>)
    4382:	7853      	ldrb	r3, [r2, #1]
    4384:	4e0d      	ldr	r6, [pc, #52]	; (43bc <system_gclk_gen_set_config+0x90>)
    4386:	b25b      	sxtb	r3, r3
    4388:	2b00      	cmp	r3, #0
    438a:	dbfa      	blt.n	4382 <system_gclk_gen_set_config+0x56>
    438c:	f000 f8f2 	bl	4574 <cpu_irq_enter_critical>
    4390:	60b4      	str	r4, [r6, #8]
    4392:	7873      	ldrb	r3, [r6, #1]
    4394:	4a09      	ldr	r2, [pc, #36]	; (43bc <system_gclk_gen_set_config+0x90>)
    4396:	b25b      	sxtb	r3, r3
    4398:	2b00      	cmp	r3, #0
    439a:	dbfa      	blt.n	4392 <system_gclk_gen_set_config+0x66>
    439c:	2380      	movs	r3, #128	; 0x80
    439e:	6851      	ldr	r1, [r2, #4]
    43a0:	025b      	lsls	r3, r3, #9
    43a2:	400b      	ands	r3, r1
    43a4:	431d      	orrs	r5, r3
    43a6:	6055      	str	r5, [r2, #4]
    43a8:	f000 f902 	bl	45b0 <cpu_irq_leave_critical>
    43ac:	bd70      	pop	{r4, r5, r6, pc}
    43ae:	2380      	movs	r3, #128	; 0x80
    43b0:	0234      	lsls	r4, r6, #8
    43b2:	029b      	lsls	r3, r3, #10
    43b4:	4304      	orrs	r4, r0
    43b6:	431d      	orrs	r5, r3
    43b8:	e7dc      	b.n	4374 <system_gclk_gen_set_config+0x48>
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	40000c00 	.word	0x40000c00

000043c0 <system_gclk_gen_enable>:
    43c0:	b510      	push	{r4, lr}
    43c2:	1c04      	adds	r4, r0, #0
    43c4:	4a0b      	ldr	r2, [pc, #44]	; (43f4 <system_gclk_gen_enable+0x34>)
    43c6:	7853      	ldrb	r3, [r2, #1]
    43c8:	b25b      	sxtb	r3, r3
    43ca:	2b00      	cmp	r3, #0
    43cc:	dbfb      	blt.n	43c6 <system_gclk_gen_enable+0x6>
    43ce:	f000 f8d1 	bl	4574 <cpu_irq_enter_critical>
    43d2:	4b09      	ldr	r3, [pc, #36]	; (43f8 <system_gclk_gen_enable+0x38>)
    43d4:	4907      	ldr	r1, [pc, #28]	; (43f4 <system_gclk_gen_enable+0x34>)
    43d6:	701c      	strb	r4, [r3, #0]
    43d8:	784b      	ldrb	r3, [r1, #1]
    43da:	4a06      	ldr	r2, [pc, #24]	; (43f4 <system_gclk_gen_enable+0x34>)
    43dc:	b25b      	sxtb	r3, r3
    43de:	2b00      	cmp	r3, #0
    43e0:	dbfa      	blt.n	43d8 <system_gclk_gen_enable+0x18>
    43e2:	2180      	movs	r1, #128	; 0x80
    43e4:	6853      	ldr	r3, [r2, #4]
    43e6:	0249      	lsls	r1, r1, #9
    43e8:	430b      	orrs	r3, r1
    43ea:	6053      	str	r3, [r2, #4]
    43ec:	f000 f8e0 	bl	45b0 <cpu_irq_leave_critical>
    43f0:	bd10      	pop	{r4, pc}
    43f2:	46c0      	nop			; (mov r8, r8)
    43f4:	40000c00 	.word	0x40000c00
    43f8:	40000c04 	.word	0x40000c04

000043fc <system_gclk_gen_get_hz>:
    43fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43fe:	1c07      	adds	r7, r0, #0
    4400:	4a19      	ldr	r2, [pc, #100]	; (4468 <system_gclk_gen_get_hz+0x6c>)
    4402:	7853      	ldrb	r3, [r2, #1]
    4404:	b25b      	sxtb	r3, r3
    4406:	2b00      	cmp	r3, #0
    4408:	dbfb      	blt.n	4402 <system_gclk_gen_get_hz+0x6>
    440a:	f000 f8b3 	bl	4574 <cpu_irq_enter_critical>
    440e:	4b17      	ldr	r3, [pc, #92]	; (446c <system_gclk_gen_get_hz+0x70>)
    4410:	4a15      	ldr	r2, [pc, #84]	; (4468 <system_gclk_gen_get_hz+0x6c>)
    4412:	701f      	strb	r7, [r3, #0]
    4414:	7853      	ldrb	r3, [r2, #1]
    4416:	4c14      	ldr	r4, [pc, #80]	; (4468 <system_gclk_gen_get_hz+0x6c>)
    4418:	b25b      	sxtb	r3, r3
    441a:	2b00      	cmp	r3, #0
    441c:	dbfa      	blt.n	4414 <system_gclk_gen_get_hz+0x18>
    441e:	6860      	ldr	r0, [r4, #4]
    4420:	04c0      	lsls	r0, r0, #19
    4422:	0ec0      	lsrs	r0, r0, #27
    4424:	f001 f948 	bl	56b8 <system_clock_source_get_hz>
    4428:	1c06      	adds	r6, r0, #0
    442a:	4b10      	ldr	r3, [pc, #64]	; (446c <system_gclk_gen_get_hz+0x70>)
    442c:	701f      	strb	r7, [r3, #0]
    442e:	6865      	ldr	r5, [r4, #4]
    4430:	4b0f      	ldr	r3, [pc, #60]	; (4470 <system_gclk_gen_get_hz+0x74>)
    4432:	02ed      	lsls	r5, r5, #11
    4434:	0fed      	lsrs	r5, r5, #31
    4436:	701f      	strb	r7, [r3, #0]
    4438:	7863      	ldrb	r3, [r4, #1]
    443a:	b25b      	sxtb	r3, r3
    443c:	2b00      	cmp	r3, #0
    443e:	dbfb      	blt.n	4438 <system_gclk_gen_get_hz+0x3c>
    4440:	4b09      	ldr	r3, [pc, #36]	; (4468 <system_gclk_gen_get_hz+0x6c>)
    4442:	6899      	ldr	r1, [r3, #8]
    4444:	0a09      	lsrs	r1, r1, #8
    4446:	b28c      	uxth	r4, r1
    4448:	f000 f8b2 	bl	45b0 <cpu_irq_leave_critical>
    444c:	2d00      	cmp	r5, #0
    444e:	d003      	beq.n	4458 <system_gclk_gen_get_hz+0x5c>
    4450:	1c61      	adds	r1, r4, #1
    4452:	40ce      	lsrs	r6, r1
    4454:	1c30      	adds	r0, r6, #0
    4456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4458:	2c01      	cmp	r4, #1
    445a:	d9fb      	bls.n	4454 <system_gclk_gen_get_hz+0x58>
    445c:	1c30      	adds	r0, r6, #0
    445e:	1c21      	adds	r1, r4, #0
    4460:	f002 fb28 	bl	6ab4 <__aeabi_uidiv>
    4464:	1c06      	adds	r6, r0, #0
    4466:	e7f5      	b.n	4454 <system_gclk_gen_get_hz+0x58>
    4468:	40000c00 	.word	0x40000c00
    446c:	40000c04 	.word	0x40000c04
    4470:	40000c08 	.word	0x40000c08

00004474 <system_gclk_chan_enable>:
    4474:	b510      	push	{r4, lr}
    4476:	1c04      	adds	r4, r0, #0
    4478:	f000 f87c 	bl	4574 <cpu_irq_enter_critical>
    447c:	2180      	movs	r1, #128	; 0x80
    447e:	4b05      	ldr	r3, [pc, #20]	; (4494 <system_gclk_chan_enable+0x20>)
    4480:	4a05      	ldr	r2, [pc, #20]	; (4498 <system_gclk_chan_enable+0x24>)
    4482:	701c      	strb	r4, [r3, #0]
    4484:	8853      	ldrh	r3, [r2, #2]
    4486:	01c9      	lsls	r1, r1, #7
    4488:	430b      	orrs	r3, r1
    448a:	8053      	strh	r3, [r2, #2]
    448c:	f000 f890 	bl	45b0 <cpu_irq_leave_critical>
    4490:	bd10      	pop	{r4, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	40000c02 	.word	0x40000c02
    4498:	40000c00 	.word	0x40000c00

0000449c <system_gclk_chan_disable>:
    449c:	b510      	push	{r4, lr}
    449e:	1c04      	adds	r4, r0, #0
    44a0:	f000 f868 	bl	4574 <cpu_irq_enter_critical>
    44a4:	2080      	movs	r0, #128	; 0x80
    44a6:	4b0e      	ldr	r3, [pc, #56]	; (44e0 <system_gclk_chan_disable+0x44>)
    44a8:	4a0e      	ldr	r2, [pc, #56]	; (44e4 <system_gclk_chan_disable+0x48>)
    44aa:	701c      	strb	r4, [r3, #0]
    44ac:	8854      	ldrh	r4, [r2, #2]
    44ae:	4b0e      	ldr	r3, [pc, #56]	; (44e8 <system_gclk_chan_disable+0x4c>)
    44b0:	8851      	ldrh	r1, [r2, #2]
    44b2:	0524      	lsls	r4, r4, #20
    44b4:	400b      	ands	r3, r1
    44b6:	8053      	strh	r3, [r2, #2]
    44b8:	8851      	ldrh	r1, [r2, #2]
    44ba:	4b0c      	ldr	r3, [pc, #48]	; (44ec <system_gclk_chan_disable+0x50>)
    44bc:	0f24      	lsrs	r4, r4, #28
    44be:	400b      	ands	r3, r1
    44c0:	8053      	strh	r3, [r2, #2]
    44c2:	01c0      	lsls	r0, r0, #7
    44c4:	8853      	ldrh	r3, [r2, #2]
    44c6:	4907      	ldr	r1, [pc, #28]	; (44e4 <system_gclk_chan_disable+0x48>)
    44c8:	4203      	tst	r3, r0
    44ca:	d1fb      	bne.n	44c4 <system_gclk_chan_disable+0x28>
    44cc:	8848      	ldrh	r0, [r1, #2]
    44ce:	4b06      	ldr	r3, [pc, #24]	; (44e8 <system_gclk_chan_disable+0x4c>)
    44d0:	0222      	lsls	r2, r4, #8
    44d2:	4003      	ands	r3, r0
    44d4:	4313      	orrs	r3, r2
    44d6:	804b      	strh	r3, [r1, #2]
    44d8:	f000 f86a 	bl	45b0 <cpu_irq_leave_critical>
    44dc:	bd10      	pop	{r4, pc}
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	40000c02 	.word	0x40000c02
    44e4:	40000c00 	.word	0x40000c00
    44e8:	fffff0ff 	.word	0xfffff0ff
    44ec:	ffffbfff 	.word	0xffffbfff

000044f0 <system_gclk_chan_set_config>:
    44f0:	b510      	push	{r4, lr}
    44f2:	780c      	ldrb	r4, [r1, #0]
    44f4:	0224      	lsls	r4, r4, #8
    44f6:	4304      	orrs	r4, r0
    44f8:	f7ff ffd0 	bl	449c <system_gclk_chan_disable>
    44fc:	4b01      	ldr	r3, [pc, #4]	; (4504 <system_gclk_chan_set_config+0x14>)
    44fe:	b2a4      	uxth	r4, r4
    4500:	805c      	strh	r4, [r3, #2]
    4502:	bd10      	pop	{r4, pc}
    4504:	40000c00 	.word	0x40000c00

00004508 <system_gclk_chan_lock>:
    4508:	b510      	push	{r4, lr}
    450a:	1c04      	adds	r4, r0, #0
    450c:	f000 f832 	bl	4574 <cpu_irq_enter_critical>
    4510:	4b05      	ldr	r3, [pc, #20]	; (4528 <system_gclk_chan_lock+0x20>)
    4512:	4a06      	ldr	r2, [pc, #24]	; (452c <system_gclk_chan_lock+0x24>)
    4514:	701c      	strb	r4, [r3, #0]
    4516:	2380      	movs	r3, #128	; 0x80
    4518:	8851      	ldrh	r1, [r2, #2]
    451a:	021b      	lsls	r3, r3, #8
    451c:	430b      	orrs	r3, r1
    451e:	8053      	strh	r3, [r2, #2]
    4520:	f000 f846 	bl	45b0 <cpu_irq_leave_critical>
    4524:	bd10      	pop	{r4, pc}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	40000c02 	.word	0x40000c02
    452c:	40000c00 	.word	0x40000c00

00004530 <system_gclk_chan_get_hz>:
    4530:	b510      	push	{r4, lr}
    4532:	1c04      	adds	r4, r0, #0
    4534:	f000 f81e 	bl	4574 <cpu_irq_enter_critical>
    4538:	4b05      	ldr	r3, [pc, #20]	; (4550 <system_gclk_chan_get_hz+0x20>)
    453a:	701c      	strb	r4, [r3, #0]
    453c:	4b05      	ldr	r3, [pc, #20]	; (4554 <system_gclk_chan_get_hz+0x24>)
    453e:	885c      	ldrh	r4, [r3, #2]
    4540:	f000 f836 	bl	45b0 <cpu_irq_leave_critical>
    4544:	0524      	lsls	r4, r4, #20
    4546:	0f24      	lsrs	r4, r4, #28
    4548:	1c20      	adds	r0, r4, #0
    454a:	f7ff ff57 	bl	43fc <system_gclk_gen_get_hz>
    454e:	bd10      	pop	{r4, pc}
    4550:	40000c02 	.word	0x40000c02
    4554:	40000c00 	.word	0x40000c00

00004558 <_system_dummy_init>:
    4558:	4770      	bx	lr
    455a:	46c0      	nop			; (mov r8, r8)

0000455c <system_init>:
    455c:	b508      	push	{r3, lr}
    455e:	f001 f93f 	bl	57e0 <system_clock_init>
    4562:	f7ff fff9 	bl	4558 <_system_dummy_init>
    4566:	f7ff fff7 	bl	4558 <_system_dummy_init>
    456a:	f7ff fdeb 	bl	4144 <_system_extint_init>
    456e:	f7ff fff3 	bl	4558 <_system_dummy_init>
    4572:	bd08      	pop	{r3, pc}

00004574 <cpu_irq_enter_critical>:
    4574:	4b0b      	ldr	r3, [pc, #44]	; (45a4 <cpu_irq_enter_critical+0x30>)
    4576:	681a      	ldr	r2, [r3, #0]
    4578:	2a00      	cmp	r2, #0
    457a:	d105      	bne.n	4588 <cpu_irq_enter_critical+0x14>
    457c:	f3ef 8110 	mrs	r1, PRIMASK
    4580:	2900      	cmp	r1, #0
    4582:	d005      	beq.n	4590 <cpu_irq_enter_critical+0x1c>
    4584:	4908      	ldr	r1, [pc, #32]	; (45a8 <cpu_irq_enter_critical+0x34>)
    4586:	700a      	strb	r2, [r1, #0]
    4588:	681a      	ldr	r2, [r3, #0]
    458a:	3201      	adds	r2, #1
    458c:	601a      	str	r2, [r3, #0]
    458e:	4770      	bx	lr
    4590:	b672      	cpsid	i
    4592:	f3bf 8f5f 	dmb	sy
    4596:	4a05      	ldr	r2, [pc, #20]	; (45ac <cpu_irq_enter_critical+0x38>)
    4598:	7011      	strb	r1, [r2, #0]
    459a:	4a03      	ldr	r2, [pc, #12]	; (45a8 <cpu_irq_enter_critical+0x34>)
    459c:	3101      	adds	r1, #1
    459e:	7011      	strb	r1, [r2, #0]
    45a0:	e7f2      	b.n	4588 <cpu_irq_enter_critical+0x14>
    45a2:	46c0      	nop			; (mov r8, r8)
    45a4:	20004344 	.word	0x20004344
    45a8:	20004348 	.word	0x20004348
    45ac:	200000d0 	.word	0x200000d0

000045b0 <cpu_irq_leave_critical>:
    45b0:	4b08      	ldr	r3, [pc, #32]	; (45d4 <cpu_irq_leave_critical+0x24>)
    45b2:	681a      	ldr	r2, [r3, #0]
    45b4:	3a01      	subs	r2, #1
    45b6:	601a      	str	r2, [r3, #0]
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	2b00      	cmp	r3, #0
    45bc:	d109      	bne.n	45d2 <cpu_irq_leave_critical+0x22>
    45be:	4b06      	ldr	r3, [pc, #24]	; (45d8 <cpu_irq_leave_critical+0x28>)
    45c0:	781b      	ldrb	r3, [r3, #0]
    45c2:	2b00      	cmp	r3, #0
    45c4:	d005      	beq.n	45d2 <cpu_irq_leave_critical+0x22>
    45c6:	2201      	movs	r2, #1
    45c8:	4b04      	ldr	r3, [pc, #16]	; (45dc <cpu_irq_leave_critical+0x2c>)
    45ca:	701a      	strb	r2, [r3, #0]
    45cc:	f3bf 8f5f 	dmb	sy
    45d0:	b662      	cpsie	i
    45d2:	4770      	bx	lr
    45d4:	20004344 	.word	0x20004344
    45d8:	20004348 	.word	0x20004348
    45dc:	200000d0 	.word	0x200000d0

000045e0 <uart1_irq>:
    45e0:	b538      	push	{r3, r4, r5, lr}
    45e2:	4a10      	ldr	r2, [pc, #64]	; (4624 <uart1_irq+0x44>)
    45e4:	4d10      	ldr	r5, [pc, #64]	; (4628 <uart1_irq+0x48>)
    45e6:	7e14      	ldrb	r4, [r2, #24]
    45e8:	6868      	ldr	r0, [r5, #4]
    45ea:	7d93      	ldrb	r3, [r2, #22]
    45ec:	b2e4      	uxtb	r4, r4
    45ee:	b2db      	uxtb	r3, r3
    45f0:	2800      	cmp	r0, #0
    45f2:	d016      	beq.n	4622 <uart1_irq+0x42>
    45f4:	401c      	ands	r4, r3
    45f6:	2302      	movs	r3, #2
    45f8:	4223      	tst	r3, r4
    45fa:	d006      	beq.n	460a <uart1_irq+0x2a>
    45fc:	7613      	strb	r3, [r2, #24]
    45fe:	4b0b      	ldr	r3, [pc, #44]	; (462c <uart1_irq+0x4c>)
    4600:	681b      	ldr	r3, [r3, #0]
    4602:	2b00      	cmp	r3, #0
    4604:	d001      	beq.n	460a <uart1_irq+0x2a>
    4606:	2101      	movs	r1, #1
    4608:	4798      	blx	r3
    460a:	2304      	movs	r3, #4
    460c:	4223      	tst	r3, r4
    460e:	d008      	beq.n	4622 <uart1_irq+0x42>
    4610:	4a04      	ldr	r2, [pc, #16]	; (4624 <uart1_irq+0x44>)
    4612:	7613      	strb	r3, [r2, #24]
    4614:	4b05      	ldr	r3, [pc, #20]	; (462c <uart1_irq+0x4c>)
    4616:	681b      	ldr	r3, [r3, #0]
    4618:	2b00      	cmp	r3, #0
    461a:	d002      	beq.n	4622 <uart1_irq+0x42>
    461c:	6868      	ldr	r0, [r5, #4]
    461e:	2100      	movs	r1, #0
    4620:	4798      	blx	r3
    4622:	bd38      	pop	{r3, r4, r5, pc}
    4624:	42000c00 	.word	0x42000c00
    4628:	20004350 	.word	0x20004350
    462c:	20004368 	.word	0x20004368

00004630 <uart4_irq>:
    4630:	b538      	push	{r3, r4, r5, lr}
    4632:	4a10      	ldr	r2, [pc, #64]	; (4674 <uart4_irq+0x44>)
    4634:	4d10      	ldr	r5, [pc, #64]	; (4678 <uart4_irq+0x48>)
    4636:	7e14      	ldrb	r4, [r2, #24]
    4638:	6928      	ldr	r0, [r5, #16]
    463a:	7d93      	ldrb	r3, [r2, #22]
    463c:	b2e4      	uxtb	r4, r4
    463e:	b2db      	uxtb	r3, r3
    4640:	2800      	cmp	r0, #0
    4642:	d016      	beq.n	4672 <uart4_irq+0x42>
    4644:	401c      	ands	r4, r3
    4646:	2302      	movs	r3, #2
    4648:	4223      	tst	r3, r4
    464a:	d006      	beq.n	465a <uart4_irq+0x2a>
    464c:	7613      	strb	r3, [r2, #24]
    464e:	4b0b      	ldr	r3, [pc, #44]	; (467c <uart4_irq+0x4c>)
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	2b00      	cmp	r3, #0
    4654:	d001      	beq.n	465a <uart4_irq+0x2a>
    4656:	2101      	movs	r1, #1
    4658:	4798      	blx	r3
    465a:	2304      	movs	r3, #4
    465c:	4223      	tst	r3, r4
    465e:	d008      	beq.n	4672 <uart4_irq+0x42>
    4660:	4a04      	ldr	r2, [pc, #16]	; (4674 <uart4_irq+0x44>)
    4662:	7613      	strb	r3, [r2, #24]
    4664:	4b05      	ldr	r3, [pc, #20]	; (467c <uart4_irq+0x4c>)
    4666:	681b      	ldr	r3, [r3, #0]
    4668:	2b00      	cmp	r3, #0
    466a:	d002      	beq.n	4672 <uart4_irq+0x42>
    466c:	6928      	ldr	r0, [r5, #16]
    466e:	2100      	movs	r1, #0
    4670:	4798      	blx	r3
    4672:	bd38      	pop	{r3, r4, r5, pc}
    4674:	42001800 	.word	0x42001800
    4678:	20004350 	.word	0x20004350
    467c:	20004368 	.word	0x20004368

00004680 <uart0_irq>:
    4680:	b538      	push	{r3, r4, r5, lr}
    4682:	4a10      	ldr	r2, [pc, #64]	; (46c4 <uart0_irq+0x44>)
    4684:	4d10      	ldr	r5, [pc, #64]	; (46c8 <uart0_irq+0x48>)
    4686:	7e14      	ldrb	r4, [r2, #24]
    4688:	6828      	ldr	r0, [r5, #0]
    468a:	7d93      	ldrb	r3, [r2, #22]
    468c:	b2e4      	uxtb	r4, r4
    468e:	b2db      	uxtb	r3, r3
    4690:	2800      	cmp	r0, #0
    4692:	d016      	beq.n	46c2 <uart0_irq+0x42>
    4694:	401c      	ands	r4, r3
    4696:	2302      	movs	r3, #2
    4698:	4223      	tst	r3, r4
    469a:	d006      	beq.n	46aa <uart0_irq+0x2a>
    469c:	7613      	strb	r3, [r2, #24]
    469e:	4b0b      	ldr	r3, [pc, #44]	; (46cc <uart0_irq+0x4c>)
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	2b00      	cmp	r3, #0
    46a4:	d001      	beq.n	46aa <uart0_irq+0x2a>
    46a6:	2101      	movs	r1, #1
    46a8:	4798      	blx	r3
    46aa:	2304      	movs	r3, #4
    46ac:	4223      	tst	r3, r4
    46ae:	d008      	beq.n	46c2 <uart0_irq+0x42>
    46b0:	4a04      	ldr	r2, [pc, #16]	; (46c4 <uart0_irq+0x44>)
    46b2:	7613      	strb	r3, [r2, #24]
    46b4:	4b05      	ldr	r3, [pc, #20]	; (46cc <uart0_irq+0x4c>)
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	2b00      	cmp	r3, #0
    46ba:	d002      	beq.n	46c2 <uart0_irq+0x42>
    46bc:	6828      	ldr	r0, [r5, #0]
    46be:	2100      	movs	r1, #0
    46c0:	4798      	blx	r3
    46c2:	bd38      	pop	{r3, r4, r5, pc}
    46c4:	42000800 	.word	0x42000800
    46c8:	20004350 	.word	0x20004350
    46cc:	20004368 	.word	0x20004368

000046d0 <uart5_irq>:
    46d0:	b538      	push	{r3, r4, r5, lr}
    46d2:	4a10      	ldr	r2, [pc, #64]	; (4714 <uart5_irq+0x44>)
    46d4:	4d10      	ldr	r5, [pc, #64]	; (4718 <uart5_irq+0x48>)
    46d6:	7e14      	ldrb	r4, [r2, #24]
    46d8:	6968      	ldr	r0, [r5, #20]
    46da:	7d93      	ldrb	r3, [r2, #22]
    46dc:	b2e4      	uxtb	r4, r4
    46de:	b2db      	uxtb	r3, r3
    46e0:	2800      	cmp	r0, #0
    46e2:	d016      	beq.n	4712 <uart5_irq+0x42>
    46e4:	401c      	ands	r4, r3
    46e6:	2302      	movs	r3, #2
    46e8:	4223      	tst	r3, r4
    46ea:	d006      	beq.n	46fa <uart5_irq+0x2a>
    46ec:	7613      	strb	r3, [r2, #24]
    46ee:	4b0b      	ldr	r3, [pc, #44]	; (471c <uart5_irq+0x4c>)
    46f0:	681b      	ldr	r3, [r3, #0]
    46f2:	2b00      	cmp	r3, #0
    46f4:	d001      	beq.n	46fa <uart5_irq+0x2a>
    46f6:	2101      	movs	r1, #1
    46f8:	4798      	blx	r3
    46fa:	2304      	movs	r3, #4
    46fc:	4223      	tst	r3, r4
    46fe:	d008      	beq.n	4712 <uart5_irq+0x42>
    4700:	4a04      	ldr	r2, [pc, #16]	; (4714 <uart5_irq+0x44>)
    4702:	7613      	strb	r3, [r2, #24]
    4704:	4b05      	ldr	r3, [pc, #20]	; (471c <uart5_irq+0x4c>)
    4706:	681b      	ldr	r3, [r3, #0]
    4708:	2b00      	cmp	r3, #0
    470a:	d002      	beq.n	4712 <uart5_irq+0x42>
    470c:	6968      	ldr	r0, [r5, #20]
    470e:	2100      	movs	r1, #0
    4710:	4798      	blx	r3
    4712:	bd38      	pop	{r3, r4, r5, pc}
    4714:	42001c00 	.word	0x42001c00
    4718:	20004350 	.word	0x20004350
    471c:	20004368 	.word	0x20004368

00004720 <uart2_irq>:
    4720:	b538      	push	{r3, r4, r5, lr}
    4722:	4a10      	ldr	r2, [pc, #64]	; (4764 <uart2_irq+0x44>)
    4724:	4d10      	ldr	r5, [pc, #64]	; (4768 <uart2_irq+0x48>)
    4726:	7e14      	ldrb	r4, [r2, #24]
    4728:	68a8      	ldr	r0, [r5, #8]
    472a:	7d93      	ldrb	r3, [r2, #22]
    472c:	b2e4      	uxtb	r4, r4
    472e:	b2db      	uxtb	r3, r3
    4730:	2800      	cmp	r0, #0
    4732:	d016      	beq.n	4762 <uart2_irq+0x42>
    4734:	401c      	ands	r4, r3
    4736:	2302      	movs	r3, #2
    4738:	4223      	tst	r3, r4
    473a:	d006      	beq.n	474a <uart2_irq+0x2a>
    473c:	7613      	strb	r3, [r2, #24]
    473e:	4b0b      	ldr	r3, [pc, #44]	; (476c <uart2_irq+0x4c>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	2b00      	cmp	r3, #0
    4744:	d001      	beq.n	474a <uart2_irq+0x2a>
    4746:	2101      	movs	r1, #1
    4748:	4798      	blx	r3
    474a:	2304      	movs	r3, #4
    474c:	4223      	tst	r3, r4
    474e:	d008      	beq.n	4762 <uart2_irq+0x42>
    4750:	4a04      	ldr	r2, [pc, #16]	; (4764 <uart2_irq+0x44>)
    4752:	7613      	strb	r3, [r2, #24]
    4754:	4b05      	ldr	r3, [pc, #20]	; (476c <uart2_irq+0x4c>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	2b00      	cmp	r3, #0
    475a:	d002      	beq.n	4762 <uart2_irq+0x42>
    475c:	68a8      	ldr	r0, [r5, #8]
    475e:	2100      	movs	r1, #0
    4760:	4798      	blx	r3
    4762:	bd38      	pop	{r3, r4, r5, pc}
    4764:	42001000 	.word	0x42001000
    4768:	20004350 	.word	0x20004350
    476c:	20004368 	.word	0x20004368

00004770 <uart3_irq>:
    4770:	b538      	push	{r3, r4, r5, lr}
    4772:	4a10      	ldr	r2, [pc, #64]	; (47b4 <uart3_irq+0x44>)
    4774:	4d10      	ldr	r5, [pc, #64]	; (47b8 <uart3_irq+0x48>)
    4776:	7e14      	ldrb	r4, [r2, #24]
    4778:	68e8      	ldr	r0, [r5, #12]
    477a:	7d93      	ldrb	r3, [r2, #22]
    477c:	b2e4      	uxtb	r4, r4
    477e:	b2db      	uxtb	r3, r3
    4780:	2800      	cmp	r0, #0
    4782:	d016      	beq.n	47b2 <uart3_irq+0x42>
    4784:	401c      	ands	r4, r3
    4786:	2302      	movs	r3, #2
    4788:	4223      	tst	r3, r4
    478a:	d006      	beq.n	479a <uart3_irq+0x2a>
    478c:	7613      	strb	r3, [r2, #24]
    478e:	4b0b      	ldr	r3, [pc, #44]	; (47bc <uart3_irq+0x4c>)
    4790:	681b      	ldr	r3, [r3, #0]
    4792:	2b00      	cmp	r3, #0
    4794:	d001      	beq.n	479a <uart3_irq+0x2a>
    4796:	2101      	movs	r1, #1
    4798:	4798      	blx	r3
    479a:	2304      	movs	r3, #4
    479c:	4223      	tst	r3, r4
    479e:	d008      	beq.n	47b2 <uart3_irq+0x42>
    47a0:	4a04      	ldr	r2, [pc, #16]	; (47b4 <uart3_irq+0x44>)
    47a2:	7613      	strb	r3, [r2, #24]
    47a4:	4b05      	ldr	r3, [pc, #20]	; (47bc <uart3_irq+0x4c>)
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d002      	beq.n	47b2 <uart3_irq+0x42>
    47ac:	68e8      	ldr	r0, [r5, #12]
    47ae:	2100      	movs	r1, #0
    47b0:	4798      	blx	r3
    47b2:	bd38      	pop	{r3, r4, r5, pc}
    47b4:	42001400 	.word	0x42001400
    47b8:	20004350 	.word	0x20004350
    47bc:	20004368 	.word	0x20004368

000047c0 <usart_set_config_default>:
    47c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    47c2:	464f      	mov	r7, r9
    47c4:	4646      	mov	r6, r8
    47c6:	b4c0      	push	{r6, r7}
    47c8:	1c04      	adds	r4, r0, #0
    47ca:	b085      	sub	sp, #20
    47cc:	2800      	cmp	r0, #0
    47ce:	d05c      	beq.n	488a <usart_set_config_default+0xca>
    47d0:	6800      	ldr	r0, [r0, #0]
    47d2:	f000 ff59 	bl	5688 <_sercom_get_sercom_inst_index>
    47d6:	250e      	movs	r5, #14
    47d8:	2300      	movs	r3, #0
    47da:	3014      	adds	r0, #20
    47dc:	446d      	add	r5, sp
    47de:	b2c0      	uxtb	r0, r0
    47e0:	802b      	strh	r3, [r5, #0]
    47e2:	69a7      	ldr	r7, [r4, #24]
    47e4:	6966      	ldr	r6, [r4, #20]
    47e6:	f7ff fea3 	bl	4530 <system_gclk_chan_get_hz>
    47ea:	2310      	movs	r3, #16
    47ec:	1c01      	adds	r1, r0, #0
    47ee:	9300      	str	r3, [sp, #0]
    47f0:	1c38      	adds	r0, r7, #0
    47f2:	1c2a      	adds	r2, r5, #0
    47f4:	2300      	movs	r3, #0
    47f6:	f000 fe5f 	bl	54b8 <_sercom_get_async_baud_val>
    47fa:	6822      	ldr	r2, [r4, #0]
    47fc:	69d3      	ldr	r3, [r2, #28]
    47fe:	2b00      	cmp	r3, #0
    4800:	d1fc      	bne.n	47fc <usart_set_config_default+0x3c>
    4802:	882b      	ldrh	r3, [r5, #0]
    4804:	8193      	strh	r3, [r2, #12]
    4806:	68e2      	ldr	r2, [r4, #12]
    4808:	6923      	ldr	r3, [r4, #16]
    480a:	4313      	orrs	r3, r2
    480c:	221d      	movs	r2, #29
    480e:	56a2      	ldrsb	r2, [r4, r2]
    4810:	3201      	adds	r2, #1
    4812:	d028      	beq.n	4866 <usart_set_config_default+0xa6>
    4814:	25c0      	movs	r5, #192	; 0xc0
    4816:	02ad      	lsls	r5, r5, #10
    4818:	431d      	orrs	r5, r3
    481a:	231c      	movs	r3, #28
    481c:	56e3      	ldrsb	r3, [r4, r3]
    481e:	3301      	adds	r3, #1
    4820:	d019      	beq.n	4856 <usart_set_config_default+0x96>
    4822:	68a2      	ldr	r2, [r4, #8]
    4824:	2aff      	cmp	r2, #255	; 0xff
    4826:	d01b      	beq.n	4860 <usart_set_config_default+0xa0>
    4828:	4b29      	ldr	r3, [pc, #164]	; (48d0 <usart_set_config_default+0x110>)
    482a:	4315      	orrs	r5, r2
    482c:	431e      	orrs	r6, r3
    482e:	2c00      	cmp	r4, #0
    4830:	d025      	beq.n	487e <usart_set_config_default+0xbe>
    4832:	6822      	ldr	r2, [r4, #0]
    4834:	69d3      	ldr	r3, [r2, #28]
    4836:	2b00      	cmp	r3, #0
    4838:	d1fc      	bne.n	4834 <usart_set_config_default+0x74>
    483a:	6055      	str	r5, [r2, #4]
    483c:	2c00      	cmp	r4, #0
    483e:	d018      	beq.n	4872 <usart_set_config_default+0xb2>
    4840:	6822      	ldr	r2, [r4, #0]
    4842:	69d3      	ldr	r3, [r2, #28]
    4844:	2b00      	cmp	r3, #0
    4846:	d1fc      	bne.n	4842 <usart_set_config_default+0x82>
    4848:	2000      	movs	r0, #0
    484a:	6016      	str	r6, [r2, #0]
    484c:	b005      	add	sp, #20
    484e:	bc0c      	pop	{r2, r3}
    4850:	4690      	mov	r8, r2
    4852:	4699      	mov	r9, r3
    4854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4856:	4b1f      	ldr	r3, [pc, #124]	; (48d4 <usart_set_config_default+0x114>)
    4858:	68a2      	ldr	r2, [r4, #8]
    485a:	401d      	ands	r5, r3
    485c:	2aff      	cmp	r2, #255	; 0xff
    485e:	d1e3      	bne.n	4828 <usart_set_config_default+0x68>
    4860:	4b1d      	ldr	r3, [pc, #116]	; (48d8 <usart_set_config_default+0x118>)
    4862:	431e      	orrs	r6, r3
    4864:	e7e3      	b.n	482e <usart_set_config_default+0x6e>
    4866:	4d1d      	ldr	r5, [pc, #116]	; (48dc <usart_set_config_default+0x11c>)
    4868:	401d      	ands	r5, r3
    486a:	2380      	movs	r3, #128	; 0x80
    486c:	025b      	lsls	r3, r3, #9
    486e:	431d      	orrs	r5, r3
    4870:	e7d3      	b.n	481a <usart_set_config_default+0x5a>
    4872:	481b      	ldr	r0, [pc, #108]	; (48e0 <usart_set_config_default+0x120>)
    4874:	491b      	ldr	r1, [pc, #108]	; (48e4 <usart_set_config_default+0x124>)
    4876:	223f      	movs	r2, #63	; 0x3f
    4878:	f000 fd86 	bl	5388 <mbed_assert_internal>
    487c:	e7e0      	b.n	4840 <usart_set_config_default+0x80>
    487e:	4818      	ldr	r0, [pc, #96]	; (48e0 <usart_set_config_default+0x120>)
    4880:	4918      	ldr	r1, [pc, #96]	; (48e4 <usart_set_config_default+0x124>)
    4882:	223f      	movs	r2, #63	; 0x3f
    4884:	f000 fd80 	bl	5388 <mbed_assert_internal>
    4888:	e7d3      	b.n	4832 <usart_set_config_default+0x72>
    488a:	4b15      	ldr	r3, [pc, #84]	; (48e0 <usart_set_config_default+0x120>)
    488c:	4f15      	ldr	r7, [pc, #84]	; (48e4 <usart_set_config_default+0x124>)
    488e:	1c18      	adds	r0, r3, #0
    4890:	1c39      	adds	r1, r7, #0
    4892:	229c      	movs	r2, #156	; 0x9c
    4894:	4698      	mov	r8, r3
    4896:	f000 fd77 	bl	5388 <mbed_assert_internal>
    489a:	6820      	ldr	r0, [r4, #0]
    489c:	f000 fef4 	bl	5688 <_sercom_get_sercom_inst_index>
    48a0:	250e      	movs	r5, #14
    48a2:	69a3      	ldr	r3, [r4, #24]
    48a4:	3014      	adds	r0, #20
    48a6:	446d      	add	r5, sp
    48a8:	b2c0      	uxtb	r0, r0
    48aa:	4699      	mov	r9, r3
    48ac:	802c      	strh	r4, [r5, #0]
    48ae:	6966      	ldr	r6, [r4, #20]
    48b0:	f7ff fe3e 	bl	4530 <system_gclk_chan_get_hz>
    48b4:	2310      	movs	r3, #16
    48b6:	1c01      	adds	r1, r0, #0
    48b8:	9300      	str	r3, [sp, #0]
    48ba:	1c2a      	adds	r2, r5, #0
    48bc:	4648      	mov	r0, r9
    48be:	2300      	movs	r3, #0
    48c0:	f000 fdfa 	bl	54b8 <_sercom_get_async_baud_val>
    48c4:	4640      	mov	r0, r8
    48c6:	1c39      	adds	r1, r7, #0
    48c8:	223f      	movs	r2, #63	; 0x3f
    48ca:	f000 fd5d 	bl	5388 <mbed_assert_internal>
    48ce:	e794      	b.n	47fa <usart_set_config_default+0x3a>
    48d0:	41000004 	.word	0x41000004
    48d4:	fffeffff 	.word	0xfffeffff
    48d8:	40000004 	.word	0x40000004
    48dc:	fffdffff 	.word	0xfffdffff
    48e0:	0000e8b8 	.word	0x0000e8b8
    48e4:	0000e8bc 	.word	0x0000e8bc

000048e8 <serial_find_mux_settings>:
    48e8:	b570      	push	{r4, r5, r6, lr}
    48ea:	1c05      	adds	r5, r0, #0
    48ec:	b086      	sub	sp, #24
    48ee:	2800      	cmp	r0, #0
    48f0:	d03c      	beq.n	496c <serial_find_mux_settings+0x84>
    48f2:	201c      	movs	r0, #28
    48f4:	211d      	movs	r1, #29
    48f6:	2300      	movs	r3, #0
    48f8:	5628      	ldrsb	r0, [r5, r0]
    48fa:	5669      	ldrsb	r1, [r5, r1]
    48fc:	9302      	str	r3, [sp, #8]
    48fe:	9303      	str	r3, [sp, #12]
    4900:	9304      	str	r3, [sp, #16]
    4902:	9305      	str	r3, [sp, #20]
    4904:	f001 f916 	bl	5b34 <pinmap_merge_sercom>
    4908:	2400      	movs	r4, #0
    490a:	1c06      	adds	r6, r0, #0
    490c:	201c      	movs	r0, #28
    490e:	192b      	adds	r3, r5, r4
    4910:	5618      	ldrsb	r0, [r3, r0]
    4912:	1c31      	adds	r1, r6, #0
    4914:	f001 f99e 	bl	5c54 <pinmap_pad_sercom>
    4918:	00a3      	lsls	r3, r4, #2
    491a:	aa02      	add	r2, sp, #8
    491c:	3401      	adds	r4, #1
    491e:	50d0      	str	r0, [r2, r3]
    4920:	2c04      	cmp	r4, #4
    4922:	d1f3      	bne.n	490c <serial_find_mux_settings+0x24>
    4924:	9b03      	ldr	r3, [sp, #12]
    4926:	2000      	movs	r0, #0
    4928:	9301      	str	r3, [sp, #4]
    492a:	3b01      	subs	r3, #1
    492c:	2b02      	cmp	r3, #2
    492e:	d802      	bhi.n	4936 <serial_find_mux_settings+0x4e>
    4930:	4a11      	ldr	r2, [pc, #68]	; (4978 <serial_find_mux_settings+0x90>)
    4932:	009b      	lsls	r3, r3, #2
    4934:	5898      	ldr	r0, [r3, r2]
    4936:	221e      	movs	r2, #30
    4938:	5eab      	ldrsh	r3, [r5, r2]
    493a:	3301      	adds	r3, #1
    493c:	d008      	beq.n	4950 <serial_find_mux_settings+0x68>
    493e:	9b02      	ldr	r3, [sp, #8]
    4940:	2b00      	cmp	r3, #0
    4942:	d103      	bne.n	494c <serial_find_mux_settings+0x64>
    4944:	9b04      	ldr	r3, [sp, #16]
    4946:	9301      	str	r3, [sp, #4]
    4948:	2b02      	cmp	r3, #2
    494a:	d008      	beq.n	495e <serial_find_mux_settings+0x76>
    494c:	b006      	add	sp, #24
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	9b02      	ldr	r3, [sp, #8]
    4952:	2b02      	cmp	r3, #2
    4954:	d1fa      	bne.n	494c <serial_find_mux_settings+0x64>
    4956:	2380      	movs	r3, #128	; 0x80
    4958:	025b      	lsls	r3, r3, #9
    495a:	4318      	orrs	r0, r3
    495c:	e7f6      	b.n	494c <serial_find_mux_settings+0x64>
    495e:	9b05      	ldr	r3, [sp, #20]
    4960:	2b03      	cmp	r3, #3
    4962:	d1f3      	bne.n	494c <serial_find_mux_settings+0x64>
    4964:	2380      	movs	r3, #128	; 0x80
    4966:	029b      	lsls	r3, r3, #10
    4968:	4318      	orrs	r0, r3
    496a:	e7ef      	b.n	494c <serial_find_mux_settings+0x64>
    496c:	4803      	ldr	r0, [pc, #12]	; (497c <serial_find_mux_settings+0x94>)
    496e:	4904      	ldr	r1, [pc, #16]	; (4980 <serial_find_mux_settings+0x98>)
    4970:	2271      	movs	r2, #113	; 0x71
    4972:	f000 fd09 	bl	5388 <mbed_assert_internal>
    4976:	e7bc      	b.n	48f2 <serial_find_mux_settings+0xa>
    4978:	0000e8ac 	.word	0x0000e8ac
    497c:	0000e8b8 	.word	0x0000e8b8
    4980:	0000e8bc 	.word	0x0000e8bc

00004984 <get_default_serial_values>:
    4984:	b510      	push	{r4, lr}
    4986:	1e04      	subs	r4, r0, #0
    4988:	d00b      	beq.n	49a2 <get_default_serial_values+0x1e>
    498a:	23ff      	movs	r3, #255	; 0xff
    498c:	60a3      	str	r3, [r4, #8]
    498e:	2300      	movs	r3, #0
    4990:	60e3      	str	r3, [r4, #12]
    4992:	6123      	str	r3, [r4, #16]
    4994:	2396      	movs	r3, #150	; 0x96
    4996:	019b      	lsls	r3, r3, #6
    4998:	61a3      	str	r3, [r4, #24]
    499a:	2388      	movs	r3, #136	; 0x88
    499c:	035b      	lsls	r3, r3, #13
    499e:	6163      	str	r3, [r4, #20]
    49a0:	bd10      	pop	{r4, pc}
    49a2:	4803      	ldr	r0, [pc, #12]	; (49b0 <get_default_serial_values+0x2c>)
    49a4:	4903      	ldr	r1, [pc, #12]	; (49b4 <get_default_serial_values+0x30>)
    49a6:	22e1      	movs	r2, #225	; 0xe1
    49a8:	f000 fcee 	bl	5388 <mbed_assert_internal>
    49ac:	e7ed      	b.n	498a <get_default_serial_values+0x6>
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	0000e8b8 	.word	0x0000e8b8
    49b4:	0000e8bc 	.word	0x0000e8bc

000049b8 <serial_init>:
    49b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49ba:	464e      	mov	r6, r9
    49bc:	4645      	mov	r5, r8
    49be:	4657      	mov	r7, sl
    49c0:	b4e0      	push	{r5, r6, r7}
    49c2:	1c04      	adds	r4, r0, #0
    49c4:	b084      	sub	sp, #16
    49c6:	1c0e      	adds	r6, r1, #0
    49c8:	1c15      	adds	r5, r2, #0
    49ca:	2800      	cmp	r0, #0
    49cc:	d100      	bne.n	49d0 <serial_init+0x18>
    49ce:	e09d      	b.n	4b0c <serial_init+0x154>
    49d0:	4f60      	ldr	r7, [pc, #384]	; (4b54 <serial_init+0x19c>)
    49d2:	783b      	ldrb	r3, [r7, #0]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d100      	bne.n	49da <serial_init+0x22>
    49d8:	e083      	b.n	4ae2 <serial_init+0x12a>
    49da:	1c20      	adds	r0, r4, #0
    49dc:	f7ff ffd2 	bl	4984 <get_default_serial_values>
    49e0:	23ff      	movs	r3, #255	; 0xff
    49e2:	7726      	strb	r6, [r4, #28]
    49e4:	77a3      	strb	r3, [r4, #30]
    49e6:	77e3      	strb	r3, [r4, #31]
    49e8:	7765      	strb	r5, [r4, #29]
    49ea:	1c20      	adds	r0, r4, #0
    49ec:	f7ff ff7c 	bl	48e8 <serial_find_mux_settings>
    49f0:	1c29      	adds	r1, r5, #0
    49f2:	1c07      	adds	r7, r0, #0
    49f4:	1c30      	adds	r0, r6, #0
    49f6:	f001 f89d 	bl	5b34 <pinmap_merge_sercom>
    49fa:	1c43      	adds	r3, r0, #1
    49fc:	d017      	beq.n	4a2e <serial_init+0x76>
    49fe:	250f      	movs	r5, #15
    4a00:	4005      	ands	r5, r0
    4a02:	2001      	movs	r0, #1
    4a04:	1c29      	adds	r1, r5, #0
    4a06:	4240      	negs	r0, r0
    4a08:	f001 f946 	bl	5c98 <pinmap_peripheral_sercom>
    4a0c:	1c06      	adds	r6, r0, #0
    4a0e:	1c02      	adds	r2, r0, #0
    4a10:	6020      	str	r0, [r4, #0]
    4a12:	2c00      	cmp	r4, #0
    4a14:	d06a      	beq.n	4aec <serial_init+0x134>
    4a16:	69d3      	ldr	r3, [r2, #28]
    4a18:	2b00      	cmp	r3, #0
    4a1a:	d1fc      	bne.n	4a16 <serial_init+0x5e>
    4a1c:	2102      	movs	r1, #2
    4a1e:	6813      	ldr	r3, [r2, #0]
    4a20:	438b      	bics	r3, r1
    4a22:	6013      	str	r3, [r2, #0]
    4a24:	2201      	movs	r2, #1
    4a26:	6823      	ldr	r3, [r4, #0]
    4a28:	6818      	ldr	r0, [r3, #0]
    4a2a:	4202      	tst	r2, r0
    4a2c:	d005      	beq.n	4a3a <serial_init+0x82>
    4a2e:	b004      	add	sp, #16
    4a30:	bc1c      	pop	{r2, r3, r4}
    4a32:	4690      	mov	r8, r2
    4a34:	4699      	mov	r9, r3
    4a36:	46a2      	mov	sl, r4
    4a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a3a:	681b      	ldr	r3, [r3, #0]
    4a3c:	4019      	ands	r1, r3
    4a3e:	4688      	mov	r8, r1
    4a40:	d1f5      	bne.n	4a2e <serial_init+0x76>
    4a42:	1ca8      	adds	r0, r5, #2
    4a44:	4082      	lsls	r2, r0
    4a46:	4944      	ldr	r1, [pc, #272]	; (4b58 <serial_init+0x1a0>)
    4a48:	6a0b      	ldr	r3, [r1, #32]
    4a4a:	431a      	orrs	r2, r3
    4a4c:	620a      	str	r2, [r1, #32]
    4a4e:	4642      	mov	r2, r8
    4a50:	ab02      	add	r3, sp, #8
    4a52:	701a      	strb	r2, [r3, #0]
    4a54:	2314      	movs	r3, #20
    4a56:	4699      	mov	r9, r3
    4a58:	44a9      	add	r9, r5
    4a5a:	a902      	add	r1, sp, #8
    4a5c:	4648      	mov	r0, r9
    4a5e:	f7ff fd47 	bl	44f0 <system_gclk_chan_set_config>
    4a62:	4648      	mov	r0, r9
    4a64:	f7ff fd06 	bl	4474 <system_gclk_chan_enable>
    4a68:	2100      	movs	r1, #0
    4a6a:	2000      	movs	r0, #0
    4a6c:	f000 fdec 	bl	5648 <sercom_set_gclk_generator>
    4a70:	6167      	str	r7, [r4, #20]
    4a72:	1c20      	adds	r0, r4, #0
    4a74:	f7ff fea4 	bl	47c0 <usart_set_config_default>
    4a78:	4642      	mov	r2, r8
    4a7a:	ab02      	add	r3, sp, #8
    4a7c:	715a      	strb	r2, [r3, #5]
    4a7e:	719a      	strb	r2, [r3, #6]
    4a80:	71da      	strb	r2, [r3, #7]
    4a82:	2320      	movs	r3, #32
    4a84:	1c27      	adds	r7, r4, #0
    4a86:	469a      	mov	sl, r3
    4a88:	371c      	adds	r7, #28
    4a8a:	44a2      	add	sl, r4
    4a8c:	2300      	movs	r3, #0
    4a8e:	56fb      	ldrsb	r3, [r7, r3]
    4a90:	4699      	mov	r9, r3
    4a92:	3301      	adds	r3, #1
    4a94:	d00f      	beq.n	4ab6 <serial_init+0xfe>
    4a96:	4648      	mov	r0, r9
    4a98:	1c29      	adds	r1, r5, #0
    4a9a:	f001 f8b7 	bl	5c0c <pinmap_function_sercom>
    4a9e:	ab02      	add	r3, sp, #8
    4aa0:	b2c0      	uxtb	r0, r0
    4aa2:	7118      	strb	r0, [r3, #4]
    4aa4:	28ff      	cmp	r0, #255	; 0xff
    4aa6:	d006      	beq.n	4ab6 <serial_init+0xfe>
    4aa8:	466a      	mov	r2, sp
    4aaa:	464b      	mov	r3, r9
    4aac:	71d3      	strb	r3, [r2, #7]
    4aae:	79d0      	ldrb	r0, [r2, #7]
    4ab0:	a903      	add	r1, sp, #12
    4ab2:	f7ff fc13 	bl	42dc <system_pinmux_pin_set_config>
    4ab6:	3701      	adds	r7, #1
    4ab8:	4557      	cmp	r7, sl
    4aba:	d1e7      	bne.n	4a8c <serial_init+0xd4>
    4abc:	4b27      	ldr	r3, [pc, #156]	; (4b5c <serial_init+0x1a4>)
    4abe:	429e      	cmp	r6, r3
    4ac0:	d030      	beq.n	4b24 <serial_init+0x16c>
    4ac2:	2c00      	cmp	r4, #0
    4ac4:	d028      	beq.n	4b18 <serial_init+0x160>
    4ac6:	6823      	ldr	r3, [r4, #0]
    4ac8:	69da      	ldr	r2, [r3, #28]
    4aca:	2a00      	cmp	r2, #0
    4acc:	d1fc      	bne.n	4ac8 <serial_init+0x110>
    4ace:	2c00      	cmp	r4, #0
    4ad0:	d031      	beq.n	4b36 <serial_init+0x17e>
    4ad2:	69da      	ldr	r2, [r3, #28]
    4ad4:	2a00      	cmp	r2, #0
    4ad6:	d1fc      	bne.n	4ad2 <serial_init+0x11a>
    4ad8:	6819      	ldr	r1, [r3, #0]
    4ada:	3202      	adds	r2, #2
    4adc:	430a      	orrs	r2, r1
    4ade:	601a      	str	r2, [r3, #0]
    4ae0:	e7a5      	b.n	4a2e <serial_init+0x76>
    4ae2:	f7ff fd3b 	bl	455c <system_init>
    4ae6:	2301      	movs	r3, #1
    4ae8:	703b      	strb	r3, [r7, #0]
    4aea:	e776      	b.n	49da <serial_init+0x22>
    4aec:	4b1c      	ldr	r3, [pc, #112]	; (4b60 <serial_init+0x1a8>)
    4aee:	2256      	movs	r2, #86	; 0x56
    4af0:	4699      	mov	r9, r3
    4af2:	4b1c      	ldr	r3, [pc, #112]	; (4b64 <serial_init+0x1ac>)
    4af4:	4648      	mov	r0, r9
    4af6:	4698      	mov	r8, r3
    4af8:	1c19      	adds	r1, r3, #0
    4afa:	f000 fc45 	bl	5388 <mbed_assert_internal>
    4afe:	223f      	movs	r2, #63	; 0x3f
    4b00:	4648      	mov	r0, r9
    4b02:	4641      	mov	r1, r8
    4b04:	f000 fc40 	bl	5388 <mbed_assert_internal>
    4b08:	6822      	ldr	r2, [r4, #0]
    4b0a:	e784      	b.n	4a16 <serial_init+0x5e>
    4b0c:	4814      	ldr	r0, [pc, #80]	; (4b60 <serial_init+0x1a8>)
    4b0e:	4915      	ldr	r1, [pc, #84]	; (4b64 <serial_init+0x1ac>)
    4b10:	22ed      	movs	r2, #237	; 0xed
    4b12:	f000 fc39 	bl	5388 <mbed_assert_internal>
    4b16:	e75b      	b.n	49d0 <serial_init+0x18>
    4b18:	4811      	ldr	r0, [pc, #68]	; (4b60 <serial_init+0x1a8>)
    4b1a:	4912      	ldr	r1, [pc, #72]	; (4b64 <serial_init+0x1ac>)
    4b1c:	223f      	movs	r2, #63	; 0x3f
    4b1e:	f000 fc33 	bl	5388 <mbed_assert_internal>
    4b22:	e7d0      	b.n	4ac6 <serial_init+0x10e>
    4b24:	2201      	movs	r2, #1
    4b26:	4b10      	ldr	r3, [pc, #64]	; (4b68 <serial_init+0x1b0>)
    4b28:	1c21      	adds	r1, r4, #0
    4b2a:	601a      	str	r2, [r3, #0]
    4b2c:	480f      	ldr	r0, [pc, #60]	; (4b6c <serial_init+0x1b4>)
    4b2e:	3247      	adds	r2, #71	; 0x47
    4b30:	f004 fcd1 	bl	94d6 <memcpy>
    4b34:	e7c5      	b.n	4ac2 <serial_init+0x10a>
    4b36:	4e0a      	ldr	r6, [pc, #40]	; (4b60 <serial_init+0x1a8>)
    4b38:	4d0a      	ldr	r5, [pc, #40]	; (4b64 <serial_init+0x1ac>)
    4b3a:	1c30      	adds	r0, r6, #0
    4b3c:	1c29      	adds	r1, r5, #0
    4b3e:	324a      	adds	r2, #74	; 0x4a
    4b40:	f000 fc22 	bl	5388 <mbed_assert_internal>
    4b44:	1c30      	adds	r0, r6, #0
    4b46:	1c29      	adds	r1, r5, #0
    4b48:	223f      	movs	r2, #63	; 0x3f
    4b4a:	f000 fc1d 	bl	5388 <mbed_assert_internal>
    4b4e:	6823      	ldr	r3, [r4, #0]
    4b50:	e7bf      	b.n	4ad2 <serial_init+0x11a>
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	20004240 	.word	0x20004240
    4b58:	40000400 	.word	0x40000400
    4b5c:	42000800 	.word	0x42000800
    4b60:	0000e8b8 	.word	0x0000e8b8
    4b64:	0000e8bc 	.word	0x0000e8bc
    4b68:	2000434c 	.word	0x2000434c
    4b6c:	200043ec 	.word	0x200043ec

00004b70 <get_serial_vector>:
    4b70:	b510      	push	{r4, lr}
    4b72:	1e04      	subs	r4, r0, #0
    4b74:	d021      	beq.n	4bba <get_serial_vector+0x4a>
    4b76:	6823      	ldr	r3, [r4, #0]
    4b78:	4a13      	ldr	r2, [pc, #76]	; (4bc8 <get_serial_vector+0x58>)
    4b7a:	4293      	cmp	r3, r2
    4b7c:	d01b      	beq.n	4bb6 <get_serial_vector+0x46>
    4b7e:	dd0a      	ble.n	4b96 <get_serial_vector+0x26>
    4b80:	4a12      	ldr	r2, [pc, #72]	; (4bcc <get_serial_vector+0x5c>)
    4b82:	4293      	cmp	r3, r2
    4b84:	d00f      	beq.n	4ba6 <get_serial_vector+0x36>
    4b86:	4a12      	ldr	r2, [pc, #72]	; (4bd0 <get_serial_vector+0x60>)
    4b88:	4293      	cmp	r3, r2
    4b8a:	d012      	beq.n	4bb2 <get_serial_vector+0x42>
    4b8c:	4a11      	ldr	r2, [pc, #68]	; (4bd4 <get_serial_vector+0x64>)
    4b8e:	4293      	cmp	r3, r2
    4b90:	d00b      	beq.n	4baa <get_serial_vector+0x3a>
    4b92:	2000      	movs	r0, #0
    4b94:	e006      	b.n	4ba4 <get_serial_vector+0x34>
    4b96:	4a10      	ldr	r2, [pc, #64]	; (4bd8 <get_serial_vector+0x68>)
    4b98:	4293      	cmp	r3, r2
    4b9a:	d008      	beq.n	4bae <get_serial_vector+0x3e>
    4b9c:	4a0f      	ldr	r2, [pc, #60]	; (4bdc <get_serial_vector+0x6c>)
    4b9e:	4293      	cmp	r3, r2
    4ba0:	d1f7      	bne.n	4b92 <get_serial_vector+0x22>
    4ba2:	480f      	ldr	r0, [pc, #60]	; (4be0 <get_serial_vector+0x70>)
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	480f      	ldr	r0, [pc, #60]	; (4be4 <get_serial_vector+0x74>)
    4ba8:	e7fc      	b.n	4ba4 <get_serial_vector+0x34>
    4baa:	480f      	ldr	r0, [pc, #60]	; (4be8 <get_serial_vector+0x78>)
    4bac:	e7fa      	b.n	4ba4 <get_serial_vector+0x34>
    4bae:	480f      	ldr	r0, [pc, #60]	; (4bec <get_serial_vector+0x7c>)
    4bb0:	e7f8      	b.n	4ba4 <get_serial_vector+0x34>
    4bb2:	480f      	ldr	r0, [pc, #60]	; (4bf0 <get_serial_vector+0x80>)
    4bb4:	e7f6      	b.n	4ba4 <get_serial_vector+0x34>
    4bb6:	480f      	ldr	r0, [pc, #60]	; (4bf4 <get_serial_vector+0x84>)
    4bb8:	e7f4      	b.n	4ba4 <get_serial_vector+0x34>
    4bba:	22ac      	movs	r2, #172	; 0xac
    4bbc:	480e      	ldr	r0, [pc, #56]	; (4bf8 <get_serial_vector+0x88>)
    4bbe:	490f      	ldr	r1, [pc, #60]	; (4bfc <get_serial_vector+0x8c>)
    4bc0:	0092      	lsls	r2, r2, #2
    4bc2:	f000 fbe1 	bl	5388 <mbed_assert_internal>
    4bc6:	e7d6      	b.n	4b76 <get_serial_vector+0x6>
    4bc8:	42001000 	.word	0x42001000
    4bcc:	42001800 	.word	0x42001800
    4bd0:	42001c00 	.word	0x42001c00
    4bd4:	42001400 	.word	0x42001400
    4bd8:	42000800 	.word	0x42000800
    4bdc:	42000c00 	.word	0x42000c00
    4be0:	000045e1 	.word	0x000045e1
    4be4:	00004631 	.word	0x00004631
    4be8:	00004771 	.word	0x00004771
    4bec:	00004681 	.word	0x00004681
    4bf0:	000046d1 	.word	0x000046d1
    4bf4:	00004721 	.word	0x00004721
    4bf8:	0000e8b8 	.word	0x0000e8b8
    4bfc:	0000e8bc 	.word	0x0000e8bc

00004c00 <serial_irq_handler>:
    4c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c02:	4647      	mov	r7, r8
    4c04:	1c04      	adds	r4, r0, #0
    4c06:	b480      	push	{r7}
    4c08:	1c0e      	adds	r6, r1, #0
    4c0a:	1c15      	adds	r5, r2, #0
    4c0c:	2800      	cmp	r0, #0
    4c0e:	d020      	beq.n	4c52 <serial_irq_handler+0x52>
    4c10:	4b18      	ldr	r3, [pc, #96]	; (4c74 <serial_irq_handler+0x74>)
    4c12:	6019      	str	r1, [r3, #0]
    4c14:	6822      	ldr	r2, [r4, #0]
    4c16:	4b18      	ldr	r3, [pc, #96]	; (4c78 <serial_irq_handler+0x78>)
    4c18:	429a      	cmp	r2, r3
    4c1a:	d018      	beq.n	4c4e <serial_irq_handler+0x4e>
    4c1c:	dc0d      	bgt.n	4c3a <serial_irq_handler+0x3a>
    4c1e:	4917      	ldr	r1, [pc, #92]	; (4c7c <serial_irq_handler+0x7c>)
    4c20:	2301      	movs	r3, #1
    4c22:	428a      	cmp	r2, r1
    4c24:	d003      	beq.n	4c2e <serial_irq_handler+0x2e>
    4c26:	4916      	ldr	r1, [pc, #88]	; (4c80 <serial_irq_handler+0x80>)
    4c28:	3301      	adds	r3, #1
    4c2a:	428a      	cmp	r2, r1
    4c2c:	d10d      	bne.n	4c4a <serial_irq_handler+0x4a>
    4c2e:	4a15      	ldr	r2, [pc, #84]	; (4c84 <serial_irq_handler+0x84>)
    4c30:	009b      	lsls	r3, r3, #2
    4c32:	509d      	str	r5, [r3, r2]
    4c34:	bc04      	pop	{r2}
    4c36:	4690      	mov	r8, r2
    4c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c3a:	4913      	ldr	r1, [pc, #76]	; (4c88 <serial_irq_handler+0x88>)
    4c3c:	2304      	movs	r3, #4
    4c3e:	428a      	cmp	r2, r1
    4c40:	d0f5      	beq.n	4c2e <serial_irq_handler+0x2e>
    4c42:	4912      	ldr	r1, [pc, #72]	; (4c8c <serial_irq_handler+0x8c>)
    4c44:	3301      	adds	r3, #1
    4c46:	428a      	cmp	r2, r1
    4c48:	d0f1      	beq.n	4c2e <serial_irq_handler+0x2e>
    4c4a:	2300      	movs	r3, #0
    4c4c:	e7ef      	b.n	4c2e <serial_irq_handler+0x2e>
    4c4e:	2303      	movs	r3, #3
    4c50:	e7ed      	b.n	4c2e <serial_irq_handler+0x2e>
    4c52:	4b0f      	ldr	r3, [pc, #60]	; (4c90 <serial_irq_handler+0x90>)
    4c54:	22b3      	movs	r2, #179	; 0xb3
    4c56:	4698      	mov	r8, r3
    4c58:	4f0e      	ldr	r7, [pc, #56]	; (4c94 <serial_irq_handler+0x94>)
    4c5a:	1c18      	adds	r0, r3, #0
    4c5c:	1c39      	adds	r1, r7, #0
    4c5e:	0092      	lsls	r2, r2, #2
    4c60:	f000 fb92 	bl	5388 <mbed_assert_internal>
    4c64:	4b03      	ldr	r3, [pc, #12]	; (4c74 <serial_irq_handler+0x74>)
    4c66:	4640      	mov	r0, r8
    4c68:	1c39      	adds	r1, r7, #0
    4c6a:	4a0b      	ldr	r2, [pc, #44]	; (4c98 <serial_irq_handler+0x98>)
    4c6c:	601e      	str	r6, [r3, #0]
    4c6e:	f000 fb8b 	bl	5388 <mbed_assert_internal>
    4c72:	e7cf      	b.n	4c14 <serial_irq_handler+0x14>
    4c74:	20004368 	.word	0x20004368
    4c78:	42001400 	.word	0x42001400
    4c7c:	42000c00 	.word	0x42000c00
    4c80:	42001000 	.word	0x42001000
    4c84:	20004350 	.word	0x20004350
    4c88:	42001800 	.word	0x42001800
    4c8c:	42001c00 	.word	0x42001c00
    4c90:	0000e8b8 	.word	0x0000e8b8
    4c94:	0000e8bc 	.word	0x0000e8bc
    4c98:	00000266 	.word	0x00000266

00004c9c <get_serial_irq_num>:
    4c9c:	b510      	push	{r4, lr}
    4c9e:	1e04      	subs	r4, r0, #0
    4ca0:	d024      	beq.n	4cec <get_serial_irq_num+0x50>
    4ca2:	6823      	ldr	r3, [r4, #0]
    4ca4:	4a15      	ldr	r2, [pc, #84]	; (4cfc <get_serial_irq_num+0x60>)
    4ca6:	4293      	cmp	r3, r2
    4ca8:	d01e      	beq.n	4ce8 <get_serial_irq_num+0x4c>
    4caa:	dd12      	ble.n	4cd2 <get_serial_irq_num+0x36>
    4cac:	4a14      	ldr	r2, [pc, #80]	; (4d00 <get_serial_irq_num+0x64>)
    4cae:	4293      	cmp	r3, r2
    4cb0:	d018      	beq.n	4ce4 <get_serial_irq_num+0x48>
    4cb2:	4a14      	ldr	r2, [pc, #80]	; (4d04 <get_serial_irq_num+0x68>)
    4cb4:	200e      	movs	r0, #14
    4cb6:	4293      	cmp	r3, r2
    4cb8:	d009      	beq.n	4cce <get_serial_irq_num+0x32>
    4cba:	4a13      	ldr	r2, [pc, #76]	; (4d08 <get_serial_irq_num+0x6c>)
    4cbc:	3802      	subs	r0, #2
    4cbe:	4293      	cmp	r3, r2
    4cc0:	d005      	beq.n	4cce <get_serial_irq_num+0x32>
    4cc2:	4812      	ldr	r0, [pc, #72]	; (4d0c <get_serial_irq_num+0x70>)
    4cc4:	4912      	ldr	r1, [pc, #72]	; (4d10 <get_serial_irq_num+0x74>)
    4cc6:	4a13      	ldr	r2, [pc, #76]	; (4d14 <get_serial_irq_num+0x78>)
    4cc8:	f000 fb5e 	bl	5388 <mbed_assert_internal>
    4ccc:	2009      	movs	r0, #9
    4cce:	b240      	sxtb	r0, r0
    4cd0:	bd10      	pop	{r4, pc}
    4cd2:	4a11      	ldr	r2, [pc, #68]	; (4d18 <get_serial_irq_num+0x7c>)
    4cd4:	2009      	movs	r0, #9
    4cd6:	4293      	cmp	r3, r2
    4cd8:	d0f9      	beq.n	4cce <get_serial_irq_num+0x32>
    4cda:	4a10      	ldr	r2, [pc, #64]	; (4d1c <get_serial_irq_num+0x80>)
    4cdc:	3001      	adds	r0, #1
    4cde:	4293      	cmp	r3, r2
    4ce0:	d0f5      	beq.n	4cce <get_serial_irq_num+0x32>
    4ce2:	e7ee      	b.n	4cc2 <get_serial_irq_num+0x26>
    4ce4:	200d      	movs	r0, #13
    4ce6:	e7f2      	b.n	4cce <get_serial_irq_num+0x32>
    4ce8:	200b      	movs	r0, #11
    4cea:	e7f0      	b.n	4cce <get_serial_irq_num+0x32>
    4cec:	22b5      	movs	r2, #181	; 0xb5
    4cee:	480c      	ldr	r0, [pc, #48]	; (4d20 <get_serial_irq_num+0x84>)
    4cf0:	4907      	ldr	r1, [pc, #28]	; (4d10 <get_serial_irq_num+0x74>)
    4cf2:	0092      	lsls	r2, r2, #2
    4cf4:	f000 fb48 	bl	5388 <mbed_assert_internal>
    4cf8:	e7d3      	b.n	4ca2 <get_serial_irq_num+0x6>
    4cfa:	46c0      	nop			; (mov r8, r8)
    4cfc:	42001000 	.word	0x42001000
    4d00:	42001800 	.word	0x42001800
    4d04:	42001c00 	.word	0x42001c00
    4d08:	42001400 	.word	0x42001400
    4d0c:	0000f0c0 	.word	0x0000f0c0
    4d10:	0000e8bc 	.word	0x0000e8bc
    4d14:	000002e3 	.word	0x000002e3
    4d18:	42000800 	.word	0x42000800
    4d1c:	42000c00 	.word	0x42000c00
    4d20:	0000e8b8 	.word	0x0000e8b8

00004d24 <serial_irq_set>:
    4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d26:	4647      	mov	r7, r8
    4d28:	1c04      	adds	r4, r0, #0
    4d2a:	b480      	push	{r7}
    4d2c:	1c0e      	adds	r6, r1, #0
    4d2e:	1c17      	adds	r7, r2, #0
    4d30:	2800      	cmp	r0, #0
    4d32:	d03f      	beq.n	4db4 <serial_irq_set+0x90>
    4d34:	1c20      	adds	r0, r4, #0
    4d36:	f7ff ff1b 	bl	4b70 <get_serial_vector>
    4d3a:	4680      	mov	r8, r0
    4d3c:	1c20      	adds	r0, r4, #0
    4d3e:	f7ff ffad 	bl	4c9c <get_serial_irq_num>
    4d42:	1c05      	adds	r5, r0, #0
    4d44:	2f00      	cmp	r7, #0
    4d46:	d011      	beq.n	4d6c <serial_irq_set+0x48>
    4d48:	2e00      	cmp	r6, #0
    4d4a:	d023      	beq.n	4d94 <serial_irq_set+0x70>
    4d4c:	2e01      	cmp	r6, #1
    4d4e:	d01d      	beq.n	4d8c <serial_irq_set+0x68>
    4d50:	1c28      	adds	r0, r5, #0
    4d52:	4641      	mov	r1, r8
    4d54:	f7fe ffb8 	bl	3cc8 <NVIC_SetVector>
    4d58:	231f      	movs	r3, #31
    4d5a:	401d      	ands	r5, r3
    4d5c:	3b1e      	subs	r3, #30
    4d5e:	40ab      	lsls	r3, r5
    4d60:	1c1d      	adds	r5, r3, #0
    4d62:	4b17      	ldr	r3, [pc, #92]	; (4dc0 <serial_irq_set+0x9c>)
    4d64:	601d      	str	r5, [r3, #0]
    4d66:	bc04      	pop	{r2}
    4d68:	4690      	mov	r8, r2
    4d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d6c:	2e00      	cmp	r6, #0
    4d6e:	d015      	beq.n	4d9c <serial_irq_set+0x78>
    4d70:	2e01      	cmp	r6, #1
    4d72:	d102      	bne.n	4d7a <serial_irq_set+0x56>
    4d74:	2202      	movs	r2, #2
    4d76:	6823      	ldr	r3, [r4, #0]
    4d78:	751a      	strb	r2, [r3, #20]
    4d7a:	231f      	movs	r3, #31
    4d7c:	401d      	ands	r5, r3
    4d7e:	3b1e      	subs	r3, #30
    4d80:	40ab      	lsls	r3, r5
    4d82:	1c1d      	adds	r5, r3, #0
    4d84:	2380      	movs	r3, #128	; 0x80
    4d86:	4a0e      	ldr	r2, [pc, #56]	; (4dc0 <serial_irq_set+0x9c>)
    4d88:	50d5      	str	r5, [r2, r3]
    4d8a:	e7ec      	b.n	4d66 <serial_irq_set+0x42>
    4d8c:	2202      	movs	r2, #2
    4d8e:	6823      	ldr	r3, [r4, #0]
    4d90:	759a      	strb	r2, [r3, #22]
    4d92:	e7dd      	b.n	4d50 <serial_irq_set+0x2c>
    4d94:	2204      	movs	r2, #4
    4d96:	6823      	ldr	r3, [r4, #0]
    4d98:	759a      	strb	r2, [r3, #22]
    4d9a:	e7d9      	b.n	4d50 <serial_irq_set+0x2c>
    4d9c:	2204      	movs	r2, #4
    4d9e:	6823      	ldr	r3, [r4, #0]
    4da0:	751a      	strb	r2, [r3, #20]
    4da2:	231f      	movs	r3, #31
    4da4:	401d      	ands	r5, r3
    4da6:	3b1e      	subs	r3, #30
    4da8:	40ab      	lsls	r3, r5
    4daa:	1c1d      	adds	r5, r3, #0
    4dac:	2380      	movs	r3, #128	; 0x80
    4dae:	4a04      	ldr	r2, [pc, #16]	; (4dc0 <serial_irq_set+0x9c>)
    4db0:	50d5      	str	r5, [r2, r3]
    4db2:	e7d8      	b.n	4d66 <serial_irq_set+0x42>
    4db4:	4803      	ldr	r0, [pc, #12]	; (4dc4 <serial_irq_set+0xa0>)
    4db6:	4904      	ldr	r1, [pc, #16]	; (4dc8 <serial_irq_set+0xa4>)
    4db8:	4a04      	ldr	r2, [pc, #16]	; (4dcc <serial_irq_set+0xa8>)
    4dba:	f000 fae5 	bl	5388 <mbed_assert_internal>
    4dbe:	e7b9      	b.n	4d34 <serial_irq_set+0x10>
    4dc0:	e000e100 	.word	0xe000e100
    4dc4:	0000e8b8 	.word	0x0000e8b8
    4dc8:	0000e8bc 	.word	0x0000e8bc
    4dcc:	000002eb 	.word	0x000002eb

00004dd0 <serial_readable>:
    4dd0:	b510      	push	{r4, lr}
    4dd2:	1e04      	subs	r4, r0, #0
    4dd4:	d004      	beq.n	4de0 <serial_readable+0x10>
    4dd6:	6823      	ldr	r3, [r4, #0]
    4dd8:	7e18      	ldrb	r0, [r3, #24]
    4dda:	0740      	lsls	r0, r0, #29
    4ddc:	0fc0      	lsrs	r0, r0, #31
    4dde:	bd10      	pop	{r4, pc}
    4de0:	4802      	ldr	r0, [pc, #8]	; (4dec <serial_readable+0x1c>)
    4de2:	4903      	ldr	r1, [pc, #12]	; (4df0 <serial_readable+0x20>)
    4de4:	4a03      	ldr	r2, [pc, #12]	; (4df4 <serial_readable+0x24>)
    4de6:	f000 facf 	bl	5388 <mbed_assert_internal>
    4dea:	e7f4      	b.n	4dd6 <serial_readable+0x6>
    4dec:	0000e8b8 	.word	0x0000e8b8
    4df0:	0000e8bc 	.word	0x0000e8bc
    4df4:	00000323 	.word	0x00000323

00004df8 <serial_getc>:
    4df8:	b510      	push	{r4, lr}
    4dfa:	1e04      	subs	r4, r0, #0
    4dfc:	d008      	beq.n	4e10 <serial_getc+0x18>
    4dfe:	1c20      	adds	r0, r4, #0
    4e00:	f7ff ffe6 	bl	4dd0 <serial_readable>
    4e04:	2800      	cmp	r0, #0
    4e06:	d0fa      	beq.n	4dfe <serial_getc+0x6>
    4e08:	6823      	ldr	r3, [r4, #0]
    4e0a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    4e0c:	b280      	uxth	r0, r0
    4e0e:	bd10      	pop	{r4, pc}
    4e10:	4802      	ldr	r0, [pc, #8]	; (4e1c <serial_getc+0x24>)
    4e12:	4903      	ldr	r1, [pc, #12]	; (4e20 <serial_getc+0x28>)
    4e14:	4a03      	ldr	r2, [pc, #12]	; (4e24 <serial_getc+0x2c>)
    4e16:	f000 fab7 	bl	5388 <mbed_assert_internal>
    4e1a:	e7f0      	b.n	4dfe <serial_getc+0x6>
    4e1c:	0000e8b8 	.word	0x0000e8b8
    4e20:	0000e8bc 	.word	0x0000e8bc
    4e24:	00000311 	.word	0x00000311

00004e28 <serial_writable>:
    4e28:	b510      	push	{r4, lr}
    4e2a:	1e04      	subs	r4, r0, #0
    4e2c:	d004      	beq.n	4e38 <serial_writable+0x10>
    4e2e:	2001      	movs	r0, #1
    4e30:	6823      	ldr	r3, [r4, #0]
    4e32:	7e1b      	ldrb	r3, [r3, #24]
    4e34:	4018      	ands	r0, r3
    4e36:	bd10      	pop	{r4, pc}
    4e38:	22cc      	movs	r2, #204	; 0xcc
    4e3a:	4803      	ldr	r0, [pc, #12]	; (4e48 <serial_writable+0x20>)
    4e3c:	4903      	ldr	r1, [pc, #12]	; (4e4c <serial_writable+0x24>)
    4e3e:	0092      	lsls	r2, r2, #2
    4e40:	f000 faa2 	bl	5388 <mbed_assert_internal>
    4e44:	e7f3      	b.n	4e2e <serial_writable+0x6>
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	0000e8b8 	.word	0x0000e8b8
    4e4c:	0000e8bc 	.word	0x0000e8bc

00004e50 <serial_putc>:
    4e50:	b538      	push	{r3, r4, r5, lr}
    4e52:	1c04      	adds	r4, r0, #0
    4e54:	1c0d      	adds	r5, r1, #0
    4e56:	2800      	cmp	r0, #0
    4e58:	d00e      	beq.n	4e78 <serial_putc+0x28>
    4e5a:	05ed      	lsls	r5, r5, #23
    4e5c:	0ded      	lsrs	r5, r5, #23
    4e5e:	1c20      	adds	r0, r4, #0
    4e60:	f7ff ffe2 	bl	4e28 <serial_writable>
    4e64:	2800      	cmp	r0, #0
    4e66:	d0fa      	beq.n	4e5e <serial_putc+0xe>
    4e68:	2202      	movs	r2, #2
    4e6a:	6823      	ldr	r3, [r4, #0]
    4e6c:	851d      	strh	r5, [r3, #40]	; 0x28
    4e6e:	6821      	ldr	r1, [r4, #0]
    4e70:	7e0b      	ldrb	r3, [r1, #24]
    4e72:	421a      	tst	r2, r3
    4e74:	d0fc      	beq.n	4e70 <serial_putc+0x20>
    4e76:	bd38      	pop	{r3, r4, r5, pc}
    4e78:	4802      	ldr	r0, [pc, #8]	; (4e84 <serial_putc+0x34>)
    4e7a:	4903      	ldr	r1, [pc, #12]	; (4e88 <serial_putc+0x38>)
    4e7c:	4a03      	ldr	r2, [pc, #12]	; (4e8c <serial_putc+0x3c>)
    4e7e:	f000 fa83 	bl	5388 <mbed_assert_internal>
    4e82:	e7ea      	b.n	4e5a <serial_putc+0xa>
    4e84:	0000e8b8 	.word	0x0000e8b8
    4e88:	0000e8bc 	.word	0x0000e8bc
    4e8c:	00000319 	.word	0x00000319

00004e90 <_ZN4mbed8FilePathC1EPKc>:
    4e90:	b538      	push	{r3, r4, r5, lr}
    4e92:	2300      	movs	r3, #0
    4e94:	6003      	str	r3, [r0, #0]
    4e96:	6043      	str	r3, [r0, #4]
    4e98:	780b      	ldrb	r3, [r1, #0]
    4e9a:	1c04      	adds	r4, r0, #0
    4e9c:	2b2f      	cmp	r3, #47	; 0x2f
    4e9e:	d001      	beq.n	4ea4 <_ZN4mbed8FilePathC1EPKc+0x14>
    4ea0:	1c20      	adds	r0, r4, #0
    4ea2:	bd38      	pop	{r3, r4, r5, pc}
    4ea4:	784b      	ldrb	r3, [r1, #1]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d0fa      	beq.n	4ea0 <_ZN4mbed8FilePathC1EPKc+0x10>
    4eaa:	1c48      	adds	r0, r1, #1
    4eac:	6020      	str	r0, [r4, #0]
    4eae:	784b      	ldrb	r3, [r1, #1]
    4eb0:	2b2f      	cmp	r3, #47	; 0x2f
    4eb2:	d014      	beq.n	4ede <_ZN4mbed8FilePathC1EPKc+0x4e>
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d015      	beq.n	4ee4 <_ZN4mbed8FilePathC1EPKc+0x54>
    4eb8:	1c03      	adds	r3, r0, #0
    4eba:	e001      	b.n	4ec0 <_ZN4mbed8FilePathC1EPKc+0x30>
    4ebc:	2a00      	cmp	r2, #0
    4ebe:	d00c      	beq.n	4eda <_ZN4mbed8FilePathC1EPKc+0x4a>
    4ec0:	1a5d      	subs	r5, r3, r1
    4ec2:	3301      	adds	r3, #1
    4ec4:	6023      	str	r3, [r4, #0]
    4ec6:	781a      	ldrb	r2, [r3, #0]
    4ec8:	2a2f      	cmp	r2, #47	; 0x2f
    4eca:	d1f7      	bne.n	4ebc <_ZN4mbed8FilePathC1EPKc+0x2c>
    4ecc:	1c29      	adds	r1, r5, #0
    4ece:	3301      	adds	r3, #1
    4ed0:	6023      	str	r3, [r4, #0]
    4ed2:	f001 fb39 	bl	6548 <_ZN4mbed8FileBase6lookupEPKcj>
    4ed6:	6060      	str	r0, [r4, #4]
    4ed8:	e7e2      	b.n	4ea0 <_ZN4mbed8FilePathC1EPKc+0x10>
    4eda:	1c29      	adds	r1, r5, #0
    4edc:	e7f9      	b.n	4ed2 <_ZN4mbed8FilePathC1EPKc+0x42>
    4ede:	1c03      	adds	r3, r0, #0
    4ee0:	2100      	movs	r1, #0
    4ee2:	e7f4      	b.n	4ece <_ZN4mbed8FilePathC1EPKc+0x3e>
    4ee4:	2100      	movs	r1, #0
    4ee6:	e7f4      	b.n	4ed2 <_ZN4mbed8FilePathC1EPKc+0x42>

00004ee8 <_ZN4mbed8FilePath8fileNameEv>:
    4ee8:	6800      	ldr	r0, [r0, #0]
    4eea:	4770      	bx	lr

00004eec <_ZN4mbed8FilePath10fileSystemEv>:
    4eec:	6843      	ldr	r3, [r0, #4]
    4eee:	b510      	push	{r4, lr}
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d007      	beq.n	4f04 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4ef4:	1c04      	adds	r4, r0, #0
    4ef6:	1c18      	adds	r0, r3, #0
    4ef8:	f001 fb46 	bl	6588 <_ZN4mbed8FileBase11getPathTypeEv>
    4efc:	2801      	cmp	r0, #1
    4efe:	d101      	bne.n	4f04 <_ZN4mbed8FilePath10fileSystemEv+0x18>
    4f00:	6860      	ldr	r0, [r4, #4]
    4f02:	bd10      	pop	{r4, pc}
    4f04:	2000      	movs	r0, #0
    4f06:	e7fc      	b.n	4f02 <_ZN4mbed8FilePath10fileSystemEv+0x16>

00004f08 <_ZN4mbed8FilePath6isFileEv>:
    4f08:	6840      	ldr	r0, [r0, #4]
    4f0a:	b508      	push	{r3, lr}
    4f0c:	2800      	cmp	r0, #0
    4f0e:	d005      	beq.n	4f1c <_ZN4mbed8FilePath6isFileEv+0x14>
    4f10:	f001 fb3a 	bl	6588 <_ZN4mbed8FileBase11getPathTypeEv>
    4f14:	4243      	negs	r3, r0
    4f16:	4158      	adcs	r0, r3
    4f18:	b2c0      	uxtb	r0, r0
    4f1a:	bd08      	pop	{r3, pc}
    4f1c:	2000      	movs	r0, #0
    4f1e:	e7fc      	b.n	4f1a <_ZN4mbed8FilePath6isFileEv+0x12>

00004f20 <_ZN4mbed8FilePath4fileEv>:
    4f20:	6843      	ldr	r3, [r0, #4]
    4f22:	b510      	push	{r4, lr}
    4f24:	2b00      	cmp	r3, #0
    4f26:	d00a      	beq.n	4f3e <_ZN4mbed8FilePath4fileEv+0x1e>
    4f28:	1c04      	adds	r4, r0, #0
    4f2a:	1c18      	adds	r0, r3, #0
    4f2c:	f001 fb2c 	bl	6588 <_ZN4mbed8FileBase11getPathTypeEv>
    4f30:	2800      	cmp	r0, #0
    4f32:	d104      	bne.n	4f3e <_ZN4mbed8FilePath4fileEv+0x1e>
    4f34:	6860      	ldr	r0, [r4, #4]
    4f36:	2800      	cmp	r0, #0
    4f38:	d001      	beq.n	4f3e <_ZN4mbed8FilePath4fileEv+0x1e>
    4f3a:	3804      	subs	r0, #4
    4f3c:	bd10      	pop	{r4, pc}
    4f3e:	2000      	movs	r0, #0
    4f40:	e7fc      	b.n	4f3c <_ZN4mbed8FilePath4fileEv+0x1c>
    4f42:	46c0      	nop			; (mov r8, r8)

00004f44 <_ZN4mbed8FilePath6existsEv>:
    4f44:	6840      	ldr	r0, [r0, #4]
    4f46:	1e43      	subs	r3, r0, #1
    4f48:	4198      	sbcs	r0, r3
    4f4a:	b2c0      	uxtb	r0, r0
    4f4c:	4770      	bx	lr
    4f4e:	46c0      	nop			; (mov r8, r8)

00004f50 <_ZN4mbed3SPID1Ev>:
    4f50:	4770      	bx	lr
    4f52:	46c0      	nop			; (mov r8, r8)

00004f54 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E>:
    4f54:	b510      	push	{r4, lr}
    4f56:	2800      	cmp	r0, #0
    4f58:	d008      	beq.n	4f6c <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4f5a:	6814      	ldr	r4, [r2, #0]
    4f5c:	6853      	ldr	r3, [r2, #4]
    4f5e:	2c00      	cmp	r4, #0
    4f60:	d005      	beq.n	4f6e <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    4f62:	07da      	lsls	r2, r3, #31
    4f64:	d405      	bmi.n	4f72 <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    4f66:	105b      	asrs	r3, r3, #1
    4f68:	18c0      	adds	r0, r0, r3
    4f6a:	47a0      	blx	r4
    4f6c:	bd10      	pop	{r4, pc}
    4f6e:	07da      	lsls	r2, r3, #31
    4f70:	d5fc      	bpl.n	4f6c <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4f72:	105b      	asrs	r3, r3, #1
    4f74:	18c0      	adds	r0, r0, r3
    4f76:	6803      	ldr	r3, [r0, #0]
    4f78:	591c      	ldr	r4, [r3, r4]
    4f7a:	47a0      	blx	r4
    4f7c:	e7f6      	b.n	4f6c <_ZN6CThunkIN4mbed3SPIEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    4f7e:	46c0      	nop			; (mov r8, r8)

00004f80 <_ZN4mbed3SPID0Ev>:
    4f80:	b510      	push	{r4, lr}
    4f82:	1c04      	adds	r4, r0, #0
    4f84:	f001 fd79 	bl	6a7a <_ZdlPv>
    4f88:	1c20      	adds	r0, r4, #0
    4f8a:	bd10      	pop	{r4, pc}

00004f8c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_>:
    4f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f8e:	4656      	mov	r6, sl
    4f90:	465f      	mov	r7, fp
    4f92:	464d      	mov	r5, r9
    4f94:	4644      	mov	r4, r8
    4f96:	4691      	mov	r9, r2
    4f98:	2200      	movs	r2, #0
    4f9a:	b4f0      	push	{r4, r5, r6, r7}
    4f9c:	1c05      	adds	r5, r0, #0
    4f9e:	1c04      	adds	r4, r0, #0
    4fa0:	b087      	sub	sp, #28
    4fa2:	9303      	str	r3, [sp, #12]
    4fa4:	ab10      	add	r3, sp, #64	; 0x40
    4fa6:	569a      	ldrsb	r2, [r3, r2]
    4fa8:	4b26      	ldr	r3, [pc, #152]	; (5044 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xb8>)
    4faa:	468a      	mov	sl, r1
    4fac:	3308      	adds	r3, #8
    4fae:	c508      	stmia	r5!, {r3}
    4fb0:	4693      	mov	fp, r2
    4fb2:	1c28      	adds	r0, r5, #0
    4fb4:	2100      	movs	r1, #0
    4fb6:	2240      	movs	r2, #64	; 0x40
    4fb8:	f004 fa96 	bl	94e8 <memset>
    4fbc:	2300      	movs	r3, #0
    4fbe:	1c22      	adds	r2, r4, #0
    4fc0:	9304      	str	r3, [sp, #16]
    4fc2:	9305      	str	r3, [sp, #20]
    4fc4:	a904      	add	r1, sp, #16
    4fc6:	3248      	adds	r2, #72	; 0x48
    4fc8:	c941      	ldmia	r1!, {r0, r6}
    4fca:	c241      	stmia	r2!, {r0, r6}
    4fcc:	4a1e      	ldr	r2, [pc, #120]	; (5048 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xbc>)
    4fce:	6522      	str	r2, [r4, #80]	; 0x50
    4fd0:	4a1e      	ldr	r2, [pc, #120]	; (504c <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc0>)
    4fd2:	6562      	str	r2, [r4, #84]	; 0x54
    4fd4:	4a1e      	ldr	r2, [pc, #120]	; (5050 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc4>)
    4fd6:	65a2      	str	r2, [r4, #88]	; 0x58
    4fd8:	1c22      	adds	r2, r4, #0
    4fda:	3248      	adds	r2, #72	; 0x48
    4fdc:	6623      	str	r3, [r4, #96]	; 0x60
    4fde:	65e4      	str	r4, [r4, #92]	; 0x5c
    4fe0:	6662      	str	r2, [r4, #100]	; 0x64
    4fe2:	4a1c      	ldr	r2, [pc, #112]	; (5054 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xc8>)
    4fe4:	66a2      	str	r2, [r4, #104]	; 0x68
    4fe6:	f3bf 8f6f 	isb	sy
    4fea:	f3bf 8f4f 	dsb	sy
    4fee:	2280      	movs	r2, #128	; 0x80
    4ff0:	66e3      	str	r3, [r4, #108]	; 0x6c
    4ff2:	50a3      	str	r3, [r4, r2]
    4ff4:	3204      	adds	r2, #4
    4ff6:	54a3      	strb	r3, [r4, r2]
    4ff8:	3204      	adds	r2, #4
    4ffa:	4690      	mov	r8, r2
    4ffc:	4641      	mov	r1, r8
    4ffe:	278c      	movs	r7, #140	; 0x8c
    5000:	3a80      	subs	r2, #128	; 0x80
    5002:	5062      	str	r2, [r4, r1]
    5004:	2690      	movs	r6, #144	; 0x90
    5006:	465a      	mov	r2, fp
    5008:	51e3      	str	r3, [r4, r7]
    500a:	4b13      	ldr	r3, [pc, #76]	; (5058 <_ZN4mbed3SPIC1E7PinNameS1_S1_S1_+0xcc>)
    500c:	9200      	str	r2, [sp, #0]
    500e:	51a3      	str	r3, [r4, r6]
    5010:	1c28      	adds	r0, r5, #0
    5012:	4651      	mov	r1, sl
    5014:	464a      	mov	r2, r9
    5016:	9b03      	ldr	r3, [sp, #12]
    5018:	f000 ff9c 	bl	5f54 <spi_init>
    501c:	4643      	mov	r3, r8
    501e:	59e2      	ldr	r2, [r4, r7]
    5020:	58e1      	ldr	r1, [r4, r3]
    5022:	1c28      	adds	r0, r5, #0
    5024:	2300      	movs	r3, #0
    5026:	f001 f88d 	bl	6144 <spi_format>
    502a:	1c28      	adds	r0, r5, #0
    502c:	59a1      	ldr	r1, [r4, r6]
    502e:	f001 f93d 	bl	62ac <spi_frequency>
    5032:	1c20      	adds	r0, r4, #0
    5034:	b007      	add	sp, #28
    5036:	bc3c      	pop	{r2, r3, r4, r5}
    5038:	4690      	mov	r8, r2
    503a:	4699      	mov	r9, r3
    503c:	46a2      	mov	sl, r4
    503e:	46ab      	mov	fp, r5
    5040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5042:	46c0      	nop			; (mov r8, r8)
    5044:	0000eb58 	.word	0x0000eb58
    5048:	2404b51f 	.word	0x2404b51f
    504c:	cc0f447c 	.word	0xcc0f447c
    5050:	bd1f4798 	.word	0xbd1f4798
    5054:	00004f55 	.word	0x00004f55
    5058:	000f4240 	.word	0x000f4240

0000505c <_ZN4mbed3SPI6aquireEv>:
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	4d0a      	ldr	r5, [pc, #40]	; (5088 <_ZN4mbed3SPI6aquireEv+0x2c>)
    5060:	682b      	ldr	r3, [r5, #0]
    5062:	4283      	cmp	r3, r0
    5064:	d00f      	beq.n	5086 <_ZN4mbed3SPI6aquireEv+0x2a>
    5066:	2388      	movs	r3, #136	; 0x88
    5068:	1d06      	adds	r6, r0, #4
    506a:	58c1      	ldr	r1, [r0, r3]
    506c:	3304      	adds	r3, #4
    506e:	58c2      	ldr	r2, [r0, r3]
    5070:	1c04      	adds	r4, r0, #0
    5072:	2300      	movs	r3, #0
    5074:	1c30      	adds	r0, r6, #0
    5076:	f001 f865 	bl	6144 <spi_format>
    507a:	2390      	movs	r3, #144	; 0x90
    507c:	1c30      	adds	r0, r6, #0
    507e:	58e1      	ldr	r1, [r4, r3]
    5080:	f001 f914 	bl	62ac <spi_frequency>
    5084:	602c      	str	r4, [r5, #0]
    5086:	bd70      	pop	{r4, r5, r6, pc}
    5088:	2000436c 	.word	0x2000436c

0000508c <_ZN4mbed3SPI6formatEii>:
    508c:	b508      	push	{r3, lr}
    508e:	2388      	movs	r3, #136	; 0x88
    5090:	50c1      	str	r1, [r0, r3]
    5092:	3304      	adds	r3, #4
    5094:	50c2      	str	r2, [r0, r3]
    5096:	2200      	movs	r2, #0
    5098:	4b02      	ldr	r3, [pc, #8]	; (50a4 <_ZN4mbed3SPI6formatEii+0x18>)
    509a:	601a      	str	r2, [r3, #0]
    509c:	f7ff ffde 	bl	505c <_ZN4mbed3SPI6aquireEv>
    50a0:	bd08      	pop	{r3, pc}
    50a2:	46c0      	nop			; (mov r8, r8)
    50a4:	2000436c 	.word	0x2000436c

000050a8 <_ZN4mbed3SPI9frequencyEi>:
    50a8:	b508      	push	{r3, lr}
    50aa:	2390      	movs	r3, #144	; 0x90
    50ac:	2200      	movs	r2, #0
    50ae:	50c1      	str	r1, [r0, r3]
    50b0:	4b02      	ldr	r3, [pc, #8]	; (50bc <_ZN4mbed3SPI9frequencyEi+0x14>)
    50b2:	601a      	str	r2, [r3, #0]
    50b4:	f7ff ffd2 	bl	505c <_ZN4mbed3SPI6aquireEv>
    50b8:	bd08      	pop	{r3, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	2000436c 	.word	0x2000436c

000050c0 <_ZN4mbed3SPI5writeEi>:
    50c0:	b538      	push	{r3, r4, r5, lr}
    50c2:	1c0d      	adds	r5, r1, #0
    50c4:	1c04      	adds	r4, r0, #0
    50c6:	f7ff ffc9 	bl	505c <_ZN4mbed3SPI6aquireEv>
    50ca:	1c29      	adds	r1, r5, #0
    50cc:	1d20      	adds	r0, r4, #4
    50ce:	f001 f969 	bl	63a4 <spi_master_write>
    50d2:	bd38      	pop	{r3, r4, r5, pc}

000050d4 <_ZN4mbed6Serial5_getcEv>:
    50d4:	b508      	push	{r3, lr}
    50d6:	f000 f8b5 	bl	5244 <_ZN4mbed10SerialBase10_base_getcEv>
    50da:	bd08      	pop	{r3, pc}

000050dc <_ZThn220_N4mbed6Serial5_getcEv>:
    50dc:	b408      	push	{r3}
    50de:	4b02      	ldr	r3, [pc, #8]	; (50e8 <_ZThn220_N4mbed6Serial5_getcEv+0xc>)
    50e0:	469c      	mov	ip, r3
    50e2:	38dc      	subs	r0, #220	; 0xdc
    50e4:	bc08      	pop	{r3}
    50e6:	4760      	bx	ip
    50e8:	000050d5 	.word	0x000050d5

000050ec <_ZN4mbed6Serial5_putcEi>:
    50ec:	b508      	push	{r3, lr}
    50ee:	f000 f8af 	bl	5250 <_ZN4mbed10SerialBase10_base_putcEi>
    50f2:	bd08      	pop	{r3, pc}

000050f4 <_ZThn220_N4mbed6Serial5_putcEi>:
    50f4:	b408      	push	{r3}
    50f6:	4b02      	ldr	r3, [pc, #8]	; (5100 <_ZThn220_N4mbed6Serial5_putcEi+0xc>)
    50f8:	469c      	mov	ip, r3
    50fa:	38dc      	subs	r0, #220	; 0xdc
    50fc:	bc08      	pop	{r3}
    50fe:	4760      	bx	ip
    5100:	000050ed 	.word	0x000050ed

00005104 <_ZN4mbed6SerialC1E7PinNameS1_PKc>:
    5104:	b538      	push	{r3, r4, r5, lr}
    5106:	1c04      	adds	r4, r0, #0
    5108:	1c1d      	adds	r5, r3, #0
    510a:	f000 f843 	bl	5194 <_ZN4mbed10SerialBaseC1E7PinNameS1_>
    510e:	1c20      	adds	r0, r4, #0
    5110:	1c29      	adds	r1, r5, #0
    5112:	30dc      	adds	r0, #220	; 0xdc
    5114:	f000 f8da 	bl	52cc <_ZN4mbed6StreamC1EPKc>
    5118:	4b06      	ldr	r3, [pc, #24]	; (5134 <_ZN4mbed6SerialC1E7PinNameS1_PKc+0x30>)
    511a:	1c20      	adds	r0, r4, #0
    511c:	1c1a      	adds	r2, r3, #0
    511e:	1c19      	adds	r1, r3, #0
    5120:	3208      	adds	r2, #8
    5122:	6022      	str	r2, [r4, #0]
    5124:	22dc      	movs	r2, #220	; 0xdc
    5126:	3120      	adds	r1, #32
    5128:	50a1      	str	r1, [r4, r2]
    512a:	3354      	adds	r3, #84	; 0x54
    512c:	3204      	adds	r2, #4
    512e:	50a3      	str	r3, [r4, r2]
    5130:	bd38      	pop	{r3, r4, r5, pc}
    5132:	46c0      	nop			; (mov r8, r8)
    5134:	0000eb70 	.word	0x0000eb70

00005138 <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq>:
    5138:	b508      	push	{r3, lr}
    513a:	004b      	lsls	r3, r1, #1
    513c:	1859      	adds	r1, r3, r1
    513e:	00c9      	lsls	r1, r1, #3
    5140:	1843      	adds	r3, r0, r1
    5142:	1c1a      	adds	r2, r3, #0
    5144:	32b8      	adds	r2, #184	; 0xb8
    5146:	6852      	ldr	r2, [r2, #4]
    5148:	33a8      	adds	r3, #168	; 0xa8
    514a:	681b      	ldr	r3, [r3, #0]
    514c:	2a00      	cmp	r2, #0
    514e:	d006      	beq.n	515e <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x26>
    5150:	2b00      	cmp	r3, #0
    5152:	d003      	beq.n	515c <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    5154:	1841      	adds	r1, r0, r1
    5156:	31ac      	adds	r1, #172	; 0xac
    5158:	1c18      	adds	r0, r3, #0
    515a:	4790      	blx	r2
    515c:	bd08      	pop	{r3, pc}
    515e:	2b00      	cmp	r3, #0
    5160:	d0fc      	beq.n	515c <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    5162:	4798      	blx	r3
    5164:	e7fa      	b.n	515c <_ZN4mbed10SerialBase12_irq_handlerEm9SerialIrq+0x24>
    5166:	46c0      	nop			; (mov r8, r8)

00005168 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E>:
    5168:	b510      	push	{r4, lr}
    516a:	2800      	cmp	r0, #0
    516c:	d008      	beq.n	5180 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    516e:	6814      	ldr	r4, [r2, #0]
    5170:	6853      	ldr	r3, [r2, #4]
    5172:	2c00      	cmp	r4, #0
    5174:	d005      	beq.n	5182 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1a>
    5176:	07da      	lsls	r2, r3, #31
    5178:	d405      	bmi.n	5186 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x1e>
    517a:	105b      	asrs	r3, r3, #1
    517c:	18c0      	adds	r0, r0, r3
    517e:	47a0      	blx	r4
    5180:	bd10      	pop	{r4, pc}
    5182:	07da      	lsls	r2, r3, #31
    5184:	d5fc      	bpl.n	5180 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    5186:	105b      	asrs	r3, r3, #1
    5188:	18c0      	adds	r0, r0, r3
    518a:	6803      	ldr	r3, [r0, #0]
    518c:	591c      	ldr	r4, [r3, r4]
    518e:	47a0      	blx	r4
    5190:	e7f6      	b.n	5180 <_ZN6CThunkIN4mbed10SerialBaseEE10trampolineEPS1_PvPMS1_FvS4_E+0x18>
    5192:	46c0      	nop			; (mov r8, r8)

00005194 <_ZN4mbed10SerialBaseC1E7PinNameS1_>:
    5194:	b5f0      	push	{r4, r5, r6, r7, lr}
    5196:	4647      	mov	r7, r8
    5198:	b480      	push	{r7}
    519a:	4b24      	ldr	r3, [pc, #144]	; (522c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x98>)
    519c:	b082      	sub	sp, #8
    519e:	6003      	str	r3, [r0, #0]
    51a0:	2500      	movs	r5, #0
    51a2:	1c03      	adds	r3, r0, #0
    51a4:	1c17      	adds	r7, r2, #0
    51a6:	466a      	mov	r2, sp
    51a8:	1c04      	adds	r4, r0, #0
    51aa:	9500      	str	r5, [sp, #0]
    51ac:	9501      	str	r5, [sp, #4]
    51ae:	3308      	adds	r3, #8
    51b0:	4688      	mov	r8, r1
    51b2:	ca03      	ldmia	r2!, {r0, r1}
    51b4:	c303      	stmia	r3!, {r0, r1}
    51b6:	4b1e      	ldr	r3, [pc, #120]	; (5230 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0x9c>)
    51b8:	6123      	str	r3, [r4, #16]
    51ba:	4b1e      	ldr	r3, [pc, #120]	; (5234 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa0>)
    51bc:	6163      	str	r3, [r4, #20]
    51be:	4b1e      	ldr	r3, [pc, #120]	; (5238 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa4>)
    51c0:	61a3      	str	r3, [r4, #24]
    51c2:	1c23      	adds	r3, r4, #0
    51c4:	3308      	adds	r3, #8
    51c6:	6225      	str	r5, [r4, #32]
    51c8:	61e4      	str	r4, [r4, #28]
    51ca:	6263      	str	r3, [r4, #36]	; 0x24
    51cc:	4b1b      	ldr	r3, [pc, #108]	; (523c <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xa8>)
    51ce:	62a3      	str	r3, [r4, #40]	; 0x28
    51d0:	f3bf 8f6f 	isb	sy
    51d4:	f3bf 8f4f 	dsb	sy
    51d8:	235c      	movs	r3, #92	; 0x5c
    51da:	1c26      	adds	r6, r4, #0
    51dc:	62e5      	str	r5, [r4, #44]	; 0x2c
    51de:	6425      	str	r5, [r4, #64]	; 0x40
    51e0:	6465      	str	r5, [r4, #68]	; 0x44
    51e2:	65a5      	str	r5, [r4, #88]	; 0x58
    51e4:	3660      	adds	r6, #96	; 0x60
    51e6:	54e5      	strb	r5, [r4, r3]
    51e8:	3301      	adds	r3, #1
    51ea:	54e5      	strb	r5, [r4, r3]
    51ec:	1c30      	adds	r0, r6, #0
    51ee:	2100      	movs	r1, #0
    51f0:	2248      	movs	r2, #72	; 0x48
    51f2:	f004 f979 	bl	94e8 <memset>
    51f6:	23a8      	movs	r3, #168	; 0xa8
    51f8:	2296      	movs	r2, #150	; 0x96
    51fa:	50e5      	str	r5, [r4, r3]
    51fc:	3314      	adds	r3, #20
    51fe:	50e5      	str	r5, [r4, r3]
    5200:	3304      	adds	r3, #4
    5202:	50e5      	str	r5, [r4, r3]
    5204:	3314      	adds	r3, #20
    5206:	50e5      	str	r5, [r4, r3]
    5208:	0192      	lsls	r2, r2, #6
    520a:	3304      	adds	r3, #4
    520c:	50e2      	str	r2, [r4, r3]
    520e:	1c30      	adds	r0, r6, #0
    5210:	4641      	mov	r1, r8
    5212:	1c3a      	adds	r2, r7, #0
    5214:	f7ff fbd0 	bl	49b8 <serial_init>
    5218:	1c30      	adds	r0, r6, #0
    521a:	4909      	ldr	r1, [pc, #36]	; (5240 <_ZN4mbed10SerialBaseC1E7PinNameS1_+0xac>)
    521c:	1c22      	adds	r2, r4, #0
    521e:	f7ff fcef 	bl	4c00 <serial_irq_handler>
    5222:	1c20      	adds	r0, r4, #0
    5224:	b002      	add	sp, #8
    5226:	bc04      	pop	{r2}
    5228:	4690      	mov	r8, r2
    522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    522c:	0000ebd8 	.word	0x0000ebd8
    5230:	2404b51f 	.word	0x2404b51f
    5234:	cc0f447c 	.word	0xcc0f447c
    5238:	bd1f4798 	.word	0xbd1f4798
    523c:	00005169 	.word	0x00005169
    5240:	00005139 	.word	0x00005139

00005244 <_ZN4mbed10SerialBase10_base_getcEv>:
    5244:	b508      	push	{r3, lr}
    5246:	3060      	adds	r0, #96	; 0x60
    5248:	f7ff fdd6 	bl	4df8 <serial_getc>
    524c:	bd08      	pop	{r3, pc}
    524e:	46c0      	nop			; (mov r8, r8)

00005250 <_ZN4mbed10SerialBase10_base_putcEi>:
    5250:	b510      	push	{r4, lr}
    5252:	1c0c      	adds	r4, r1, #0
    5254:	3060      	adds	r0, #96	; 0x60
    5256:	f7ff fdfb 	bl	4e50 <serial_putc>
    525a:	1c20      	adds	r0, r4, #0
    525c:	bd10      	pop	{r4, pc}
    525e:	46c0      	nop			; (mov r8, r8)

00005260 <_ZN4mbed6Stream5closeEv>:
    5260:	2000      	movs	r0, #0
    5262:	4770      	bx	lr

00005264 <_ZN4mbed6Stream5writeEPKvj>:
    5264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5266:	188e      	adds	r6, r1, r2
    5268:	1c05      	adds	r5, r0, #0
    526a:	1c0f      	adds	r7, r1, #0
    526c:	1e0c      	subs	r4, r1, #0
    526e:	42b4      	cmp	r4, r6
    5270:	d102      	bne.n	5278 <_ZN4mbed6Stream5writeEPKvj+0x14>
    5272:	e00a      	b.n	528a <_ZN4mbed6Stream5writeEPKvj+0x26>
    5274:	42a6      	cmp	r6, r4
    5276:	d008      	beq.n	528a <_ZN4mbed6Stream5writeEPKvj+0x26>
    5278:	3401      	adds	r4, #1
    527a:	682b      	ldr	r3, [r5, #0]
    527c:	1e62      	subs	r2, r4, #1
    527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5280:	7811      	ldrb	r1, [r2, #0]
    5282:	1c28      	adds	r0, r5, #0
    5284:	4798      	blx	r3
    5286:	1c43      	adds	r3, r0, #1
    5288:	d1f4      	bne.n	5274 <_ZN4mbed6Stream5writeEPKvj+0x10>
    528a:	1be0      	subs	r0, r4, r7
    528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    528e:	46c0      	nop			; (mov r8, r8)

00005290 <_ZN4mbed6Stream4readEPvj>:
    5290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5292:	188e      	adds	r6, r1, r2
    5294:	1c05      	adds	r5, r0, #0
    5296:	1c0f      	adds	r7, r1, #0
    5298:	1e0c      	subs	r4, r1, #0
    529a:	42b4      	cmp	r4, r6
    529c:	d105      	bne.n	52aa <_ZN4mbed6Stream4readEPvj+0x1a>
    529e:	e00a      	b.n	52b6 <_ZN4mbed6Stream4readEPvj+0x26>
    52a0:	3401      	adds	r4, #1
    52a2:	1e63      	subs	r3, r4, #1
    52a4:	7018      	strb	r0, [r3, #0]
    52a6:	42a6      	cmp	r6, r4
    52a8:	d005      	beq.n	52b6 <_ZN4mbed6Stream4readEPvj+0x26>
    52aa:	682b      	ldr	r3, [r5, #0]
    52ac:	1c28      	adds	r0, r5, #0
    52ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52b0:	4798      	blx	r3
    52b2:	1c43      	adds	r3, r0, #1
    52b4:	d1f4      	bne.n	52a0 <_ZN4mbed6Stream4readEPvj+0x10>
    52b6:	1be0      	subs	r0, r4, r7
    52b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ba:	46c0      	nop			; (mov r8, r8)

000052bc <_ZN4mbed6Stream5lseekEli>:
    52bc:	2000      	movs	r0, #0
    52be:	4770      	bx	lr

000052c0 <_ZN4mbed6Stream6isattyEv>:
    52c0:	2000      	movs	r0, #0
    52c2:	4770      	bx	lr

000052c4 <_ZN4mbed6Stream5fsyncEv>:
    52c4:	2000      	movs	r0, #0
    52c6:	4770      	bx	lr

000052c8 <_ZN4mbed6Stream4flenEv>:
    52c8:	2000      	movs	r0, #0
    52ca:	4770      	bx	lr

000052cc <_ZN4mbed6StreamC1EPKc>:
    52cc:	b510      	push	{r4, lr}
    52ce:	1c04      	adds	r4, r0, #0
    52d0:	b084      	sub	sp, #16
    52d2:	f001 f95b 	bl	658c <_ZN4mbed8FileLikeC1EPKc>
    52d6:	4b0b      	ldr	r3, [pc, #44]	; (5304 <_ZN4mbed6StreamC1EPKc+0x38>)
    52d8:	a801      	add	r0, sp, #4
    52da:	1c1a      	adds	r2, r3, #0
    52dc:	333c      	adds	r3, #60	; 0x3c
    52de:	6063      	str	r3, [r4, #4]
    52e0:	2300      	movs	r3, #0
    52e2:	3208      	adds	r2, #8
    52e4:	6163      	str	r3, [r4, #20]
    52e6:	6022      	str	r2, [r4, #0]
    52e8:	4907      	ldr	r1, [pc, #28]	; (5308 <_ZN4mbed6StreamC1EPKc+0x3c>)
    52ea:	1c22      	adds	r2, r4, #0
    52ec:	f005 fcea 	bl	acc4 <siprintf>
    52f0:	4906      	ldr	r1, [pc, #24]	; (530c <_ZN4mbed6StreamC1EPKc+0x40>)
    52f2:	a801      	add	r0, sp, #4
    52f4:	f003 ff3a 	bl	916c <fopen>
    52f8:	6160      	str	r0, [r4, #20]
    52fa:	f7fe fe8b 	bl	4014 <_ZN4mbed26mbed_set_unbuffered_streamEP7__sFILE>
    52fe:	1c20      	adds	r0, r4, #0
    5300:	b004      	add	sp, #16
    5302:	bd10      	pop	{r4, pc}
    5304:	0000ebe0 	.word	0x0000ebe0
    5308:	0000e89c 	.word	0x0000e89c
    530c:	0000ec24 	.word	0x0000ec24

00005310 <_ZN4mbed6StreamD1Ev>:
    5310:	4b07      	ldr	r3, [pc, #28]	; (5330 <_ZN4mbed6StreamD1Ev+0x20>)
    5312:	b510      	push	{r4, lr}
    5314:	1c1a      	adds	r2, r3, #0
    5316:	1c04      	adds	r4, r0, #0
    5318:	3208      	adds	r2, #8
    531a:	333c      	adds	r3, #60	; 0x3c
    531c:	6002      	str	r2, [r0, #0]
    531e:	6043      	str	r3, [r0, #4]
    5320:	6940      	ldr	r0, [r0, #20]
    5322:	f003 fd25 	bl	8d70 <fclose>
    5326:	1c20      	adds	r0, r4, #0
    5328:	f001 f944 	bl	65b4 <_ZN4mbed8FileLikeD1Ev>
    532c:	1c20      	adds	r0, r4, #0
    532e:	bd10      	pop	{r4, pc}
    5330:	0000ebe0 	.word	0x0000ebe0

00005334 <_ZN4mbed6Stream4putcEi>:
    5334:	b538      	push	{r3, r4, r5, lr}
    5336:	1c0d      	adds	r5, r1, #0
    5338:	1c04      	adds	r4, r0, #0
    533a:	6940      	ldr	r0, [r0, #20]
    533c:	f003 fdd8 	bl	8ef0 <fflush>
    5340:	1c28      	adds	r0, r5, #0
    5342:	6961      	ldr	r1, [r4, #20]
    5344:	f003 ff44 	bl	91d0 <fputc>
    5348:	bd38      	pop	{r3, r4, r5, pc}
    534a:	46c0      	nop			; (mov r8, r8)

0000534c <_ZN4mbed6Stream4getcEv>:
    534c:	b510      	push	{r4, lr}
    534e:	1c04      	adds	r4, r0, #0
    5350:	6940      	ldr	r0, [r0, #20]
    5352:	f003 fdcd 	bl	8ef0 <fflush>
    5356:	6960      	ldr	r0, [r4, #20]
    5358:	f7fe fe62 	bl	4020 <_ZN4mbed9mbed_getcEP7__sFILE>
    535c:	bd10      	pop	{r4, pc}
    535e:	46c0      	nop			; (mov r8, r8)

00005360 <_ZN4mbed6Stream6printfEPKcz>:
    5360:	b40e      	push	{r1, r2, r3}
    5362:	b530      	push	{r4, r5, lr}
    5364:	1c04      	adds	r4, r0, #0
    5366:	b082      	sub	sp, #8
    5368:	ab05      	add	r3, sp, #20
    536a:	cb20      	ldmia	r3!, {r5}
    536c:	6940      	ldr	r0, [r0, #20]
    536e:	9301      	str	r3, [sp, #4]
    5370:	f003 fdbe 	bl	8ef0 <fflush>
    5374:	6960      	ldr	r0, [r4, #20]
    5376:	1c29      	adds	r1, r5, #0
    5378:	9a01      	ldr	r2, [sp, #4]
    537a:	f004 fa93 	bl	98a4 <vfiprintf>
    537e:	b002      	add	sp, #8
    5380:	bc30      	pop	{r4, r5}
    5382:	bc08      	pop	{r3}
    5384:	b003      	add	sp, #12
    5386:	4718      	bx	r3

00005388 <mbed_assert_internal>:
    5388:	b538      	push	{r3, r4, r5, lr}
    538a:	1c05      	adds	r5, r0, #0
    538c:	1c0c      	adds	r4, r1, #0
    538e:	1c13      	adds	r3, r2, #0
    5390:	1c29      	adds	r1, r5, #0
    5392:	4802      	ldr	r0, [pc, #8]	; (539c <mbed_assert_internal+0x14>)
    5394:	1c22      	adds	r2, r4, #0
    5396:	f000 f803 	bl	53a0 <error>
    539a:	bd38      	pop	{r3, r4, r5, pc}
    539c:	0000ec28 	.word	0x0000ec28

000053a0 <error>:
    53a0:	b40f      	push	{r0, r1, r2, r3}
    53a2:	2001      	movs	r0, #1
    53a4:	b508      	push	{r3, lr}
    53a6:	f003 fc75 	bl	8c94 <exit>
    53aa:	46c0      	nop			; (mov r8, r8)

000053ac <gpio_init_out>:
    53ac:	b538      	push	{r3, r4, r5, lr}
    53ae:	1c0d      	adds	r5, r1, #0
    53b0:	1c04      	adds	r4, r0, #0
    53b2:	f000 fa8b 	bl	58cc <gpio_init>
    53b6:	1c6b      	adds	r3, r5, #1
    53b8:	d00e      	beq.n	53d8 <gpio_init_out+0x2c>
    53ba:	2300      	movs	r3, #0
    53bc:	56e3      	ldrsb	r3, [r4, r3]
    53be:	3301      	adds	r3, #1
    53c0:	d00b      	beq.n	53da <gpio_init_out+0x2e>
    53c2:	68e3      	ldr	r3, [r4, #12]
    53c4:	6862      	ldr	r2, [r4, #4]
    53c6:	1c20      	adds	r0, r4, #0
    53c8:	2101      	movs	r1, #1
    53ca:	601a      	str	r2, [r3, #0]
    53cc:	f000 fae6 	bl	599c <gpio_dir>
    53d0:	1c20      	adds	r0, r4, #0
    53d2:	2100      	movs	r1, #0
    53d4:	f000 faba 	bl	594c <gpio_mode>
    53d8:	bd38      	pop	{r3, r4, r5, pc}
    53da:	4803      	ldr	r0, [pc, #12]	; (53e8 <gpio_init_out+0x3c>)
    53dc:	4903      	ldr	r1, [pc, #12]	; (53ec <gpio_init_out+0x40>)
    53de:	2228      	movs	r2, #40	; 0x28
    53e0:	f7ff ffd2 	bl	5388 <mbed_assert_internal>
    53e4:	e7ed      	b.n	53c2 <gpio_init_out+0x16>
    53e6:	46c0      	nop			; (mov r8, r8)
    53e8:	0000e35c 	.word	0x0000e35c
    53ec:	0000ec5c 	.word	0x0000ec5c

000053f0 <pinmap_find_peripheral>:
    53f0:	e002      	b.n	53f8 <pinmap_find_peripheral+0x8>
    53f2:	4283      	cmp	r3, r0
    53f4:	d006      	beq.n	5404 <pinmap_find_peripheral+0x14>
    53f6:	310c      	adds	r1, #12
    53f8:	2300      	movs	r3, #0
    53fa:	56cb      	ldrsb	r3, [r1, r3]
    53fc:	1c5a      	adds	r2, r3, #1
    53fe:	d1f8      	bne.n	53f2 <pinmap_find_peripheral+0x2>
    5400:	1c18      	adds	r0, r3, #0
    5402:	4770      	bx	lr
    5404:	6848      	ldr	r0, [r1, #4]
    5406:	e7fc      	b.n	5402 <pinmap_find_peripheral+0x12>

00005408 <pinmap_peripheral>:
    5408:	1c02      	adds	r2, r0, #0
    540a:	b508      	push	{r3, lr}
    540c:	1c53      	adds	r3, r2, #1
    540e:	d103      	bne.n	5418 <pinmap_peripheral+0x10>
    5410:	e00b      	b.n	542a <pinmap_peripheral+0x22>
    5412:	429a      	cmp	r2, r3
    5414:	d00a      	beq.n	542c <pinmap_peripheral+0x24>
    5416:	310c      	adds	r1, #12
    5418:	2300      	movs	r3, #0
    541a:	56cb      	ldrsb	r3, [r1, r3]
    541c:	1c58      	adds	r0, r3, #1
    541e:	d1f8      	bne.n	5412 <pinmap_peripheral+0xa>
    5420:	4804      	ldr	r0, [pc, #16]	; (5434 <pinmap_peripheral+0x2c>)
    5422:	f7ff ffbd 	bl	53a0 <error>
    5426:	2001      	movs	r0, #1
    5428:	4240      	negs	r0, r0
    542a:	bd08      	pop	{r3, pc}
    542c:	6848      	ldr	r0, [r1, #4]
    542e:	1c43      	adds	r3, r0, #1
    5430:	d1fb      	bne.n	542a <pinmap_peripheral+0x22>
    5432:	e7f5      	b.n	5420 <pinmap_peripheral+0x18>
    5434:	0000ecfc 	.word	0x0000ecfc

00005438 <pinmap_function>:
    5438:	1c02      	adds	r2, r0, #0
    543a:	b508      	push	{r3, lr}
    543c:	1c53      	adds	r3, r2, #1
    543e:	d103      	bne.n	5448 <pinmap_function+0x10>
    5440:	e00b      	b.n	545a <pinmap_function+0x22>
    5442:	429a      	cmp	r2, r3
    5444:	d00a      	beq.n	545c <pinmap_function+0x24>
    5446:	310c      	adds	r1, #12
    5448:	2300      	movs	r3, #0
    544a:	56cb      	ldrsb	r3, [r1, r3]
    544c:	1c58      	adds	r0, r3, #1
    544e:	d1f8      	bne.n	5442 <pinmap_function+0xa>
    5450:	4804      	ldr	r0, [pc, #16]	; (5464 <pinmap_function+0x2c>)
    5452:	f7ff ffa5 	bl	53a0 <error>
    5456:	2001      	movs	r0, #1
    5458:	4240      	negs	r0, r0
    545a:	bd08      	pop	{r3, pc}
    545c:	6888      	ldr	r0, [r1, #8]
    545e:	1c43      	adds	r3, r0, #1
    5460:	d1fb      	bne.n	545a <pinmap_function+0x22>
    5462:	e7f5      	b.n	5450 <pinmap_function+0x18>
    5464:	0000ed1c 	.word	0x0000ed1c

00005468 <wait_us>:
    5468:	b538      	push	{r3, r4, r5, lr}
    546a:	1c05      	adds	r5, r0, #0
    546c:	f000 fcbc 	bl	5de8 <us_ticker_read>
    5470:	1c04      	adds	r4, r0, #0
    5472:	f000 fcb9 	bl	5de8 <us_ticker_read>
    5476:	1b00      	subs	r0, r0, r4
    5478:	42a8      	cmp	r0, r5
    547a:	d3fa      	bcc.n	5472 <wait_us+0xa>
    547c:	bd38      	pop	{r3, r4, r5, pc}
    547e:	46c0      	nop			; (mov r8, r8)

00005480 <wait_ms>:
    5480:	b508      	push	{r3, lr}
    5482:	23fa      	movs	r3, #250	; 0xfa
    5484:	009b      	lsls	r3, r3, #2
    5486:	4358      	muls	r0, r3
    5488:	f7ff ffee 	bl	5468 <wait_us>
    548c:	bd08      	pop	{r3, pc}
    548e:	46c0      	nop			; (mov r8, r8)

00005490 <_sercom_get_sync_baud_val>:
    5490:	b510      	push	{r4, lr}
    5492:	0849      	lsrs	r1, r1, #1
    5494:	2340      	movs	r3, #64	; 0x40
    5496:	2400      	movs	r4, #0
    5498:	4281      	cmp	r1, r0
    549a:	d202      	bcs.n	54a2 <_sercom_get_sync_baud_val+0x12>
    549c:	1c18      	adds	r0, r3, #0
    549e:	bd10      	pop	{r4, pc}
    54a0:	1c1c      	adds	r4, r3, #0
    54a2:	1c63      	adds	r3, r4, #1
    54a4:	1a09      	subs	r1, r1, r0
    54a6:	b29b      	uxth	r3, r3
    54a8:	4288      	cmp	r0, r1
    54aa:	d9f9      	bls.n	54a0 <_sercom_get_sync_baud_val+0x10>
    54ac:	2340      	movs	r3, #64	; 0x40
    54ae:	2cff      	cmp	r4, #255	; 0xff
    54b0:	d8f4      	bhi.n	549c <_sercom_get_sync_baud_val+0xc>
    54b2:	8014      	strh	r4, [r2, #0]
    54b4:	2300      	movs	r3, #0
    54b6:	e7f1      	b.n	549c <_sercom_get_sync_baud_val+0xc>

000054b8 <_sercom_get_async_baud_val>:
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	4656      	mov	r6, sl
    54bc:	464d      	mov	r5, r9
    54be:	4644      	mov	r4, r8
    54c0:	465f      	mov	r7, fp
    54c2:	b4f0      	push	{r4, r5, r6, r7}
    54c4:	1c04      	adds	r4, r0, #0
    54c6:	1c25      	adds	r5, r4, #0
    54c8:	b087      	sub	sp, #28
    54ca:	a810      	add	r0, sp, #64	; 0x40
    54cc:	7806      	ldrb	r6, [r0, #0]
    54ce:	2040      	movs	r0, #64	; 0x40
    54d0:	4375      	muls	r5, r6
    54d2:	428d      	cmp	r5, r1
    54d4:	d906      	bls.n	54e4 <_sercom_get_async_baud_val+0x2c>
    54d6:	b007      	add	sp, #28
    54d8:	bc3c      	pop	{r2, r3, r4, r5}
    54da:	4690      	mov	r8, r2
    54dc:	4699      	mov	r9, r3
    54de:	46a2      	mov	sl, r4
    54e0:	46ab      	mov	fp, r5
    54e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54e4:	9204      	str	r2, [sp, #16]
    54e6:	1c0d      	adds	r5, r1, #0
    54e8:	1c22      	adds	r2, r4, #0
    54ea:	2b00      	cmp	r3, #0
    54ec:	d13f      	bne.n	556e <_sercom_get_async_baud_val+0xb6>
    54ee:	1c30      	adds	r0, r6, #0
    54f0:	2100      	movs	r1, #0
    54f2:	f001 fc9f 	bl	6e34 <__aeabi_lmul>
    54f6:	2300      	movs	r3, #0
    54f8:	4683      	mov	fp, r0
    54fa:	213f      	movs	r1, #63	; 0x3f
    54fc:	2001      	movs	r0, #1
    54fe:	469c      	mov	ip, r3
    5500:	469a      	mov	sl, r3
    5502:	1c2e      	adds	r6, r5, #0
    5504:	2700      	movs	r7, #0
    5506:	2200      	movs	r2, #0
    5508:	2300      	movs	r3, #0
    550a:	4680      	mov	r8, r0
    550c:	1c0c      	adds	r4, r1, #0
    550e:	e024      	b.n	555a <_sercom_get_async_baud_val+0xa2>
    5510:	4641      	mov	r1, r8
    5512:	40a9      	lsls	r1, r5
    5514:	1c0d      	adds	r5, r1, #0
    5516:	4641      	mov	r1, r8
    5518:	40a1      	lsls	r1, r4
    551a:	1c10      	adds	r0, r2, #0
    551c:	4689      	mov	r9, r1
    551e:	1c19      	adds	r1, r3, #0
    5520:	1880      	adds	r0, r0, r2
    5522:	4159      	adcs	r1, r3
    5524:	1c0b      	adds	r3, r1, #0
    5526:	1c02      	adds	r2, r0, #0
    5528:	4659      	mov	r1, fp
    552a:	9200      	str	r2, [sp, #0]
    552c:	9301      	str	r3, [sp, #4]
    552e:	4229      	tst	r1, r5
    5530:	d003      	beq.n	553a <_sercom_get_async_baud_val+0x82>
    5532:	4640      	mov	r0, r8
    5534:	4310      	orrs	r0, r2
    5536:	1c02      	adds	r2, r0, #0
    5538:	9b01      	ldr	r3, [sp, #4]
    553a:	429f      	cmp	r7, r3
    553c:	d80b      	bhi.n	5556 <_sercom_get_async_baud_val+0x9e>
    553e:	d101      	bne.n	5544 <_sercom_get_async_baud_val+0x8c>
    5540:	4296      	cmp	r6, r2
    5542:	d808      	bhi.n	5556 <_sercom_get_async_baud_val+0x9e>
    5544:	4661      	mov	r1, ip
    5546:	4648      	mov	r0, r9
    5548:	4301      	orrs	r1, r0
    554a:	4650      	mov	r0, sl
    554c:	4328      	orrs	r0, r5
    554e:	1b92      	subs	r2, r2, r6
    5550:	41bb      	sbcs	r3, r7
    5552:	468c      	mov	ip, r1
    5554:	4682      	mov	sl, r0
    5556:	3c01      	subs	r4, #1
    5558:	d310      	bcc.n	557c <_sercom_get_async_baud_val+0xc4>
    555a:	2120      	movs	r1, #32
    555c:	4249      	negs	r1, r1
    555e:	1865      	adds	r5, r4, r1
    5560:	d5d6      	bpl.n	5510 <_sercom_get_async_baud_val+0x58>
    5562:	2120      	movs	r1, #32
    5564:	1b0d      	subs	r5, r1, r4
    5566:	4641      	mov	r1, r8
    5568:	40e9      	lsrs	r1, r5
    556a:	1c0d      	adds	r5, r1, #0
    556c:	e7d3      	b.n	5516 <_sercom_get_async_baud_val+0x5e>
    556e:	2400      	movs	r4, #0
    5570:	2b01      	cmp	r3, #1
    5572:	d007      	beq.n	5584 <_sercom_get_async_baud_val+0xcc>
    5574:	9b04      	ldr	r3, [sp, #16]
    5576:	2000      	movs	r0, #0
    5578:	801c      	strh	r4, [r3, #0]
    557a:	e7ac      	b.n	54d6 <_sercom_get_async_baud_val+0x1e>
    557c:	4663      	mov	r3, ip
    557e:	425c      	negs	r4, r3
    5580:	0c24      	lsrs	r4, r4, #16
    5582:	e7f7      	b.n	5574 <_sercom_get_async_baud_val+0xbc>
    5584:	0f4b      	lsrs	r3, r1, #29
    5586:	1c1c      	adds	r4, r3, #0
    5588:	00cb      	lsls	r3, r1, #3
    558a:	4698      	mov	r8, r3
    558c:	1c30      	adds	r0, r6, #0
    558e:	2300      	movs	r3, #0
    5590:	2100      	movs	r1, #0
    5592:	f001 fc4f 	bl	6e34 <__aeabi_lmul>
    5596:	2300      	movs	r3, #0
    5598:	469c      	mov	ip, r3
    559a:	3320      	adds	r3, #32
    559c:	469b      	mov	fp, r3
    559e:	4663      	mov	r3, ip
    55a0:	46a1      	mov	r9, r4
    55a2:	9000      	str	r0, [sp, #0]
    55a4:	9101      	str	r1, [sp, #4]
    55a6:	9303      	str	r3, [sp, #12]
    55a8:	466b      	mov	r3, sp
    55aa:	7b1b      	ldrb	r3, [r3, #12]
    55ac:	2000      	movs	r0, #0
    55ae:	9305      	str	r3, [sp, #20]
    55b0:	2300      	movs	r3, #0
    55b2:	2100      	movs	r1, #0
    55b4:	469c      	mov	ip, r3
    55b6:	223f      	movs	r2, #63	; 0x3f
    55b8:	e027      	b.n	560a <_sercom_get_async_baud_val+0x152>
    55ba:	2401      	movs	r4, #1
    55bc:	409c      	lsls	r4, r3
    55be:	1c23      	adds	r3, r4, #0
    55c0:	2701      	movs	r7, #1
    55c2:	4646      	mov	r6, r8
    55c4:	4097      	lsls	r7, r2
    55c6:	403e      	ands	r6, r7
    55c8:	1c04      	adds	r4, r0, #0
    55ca:	1c0d      	adds	r5, r1, #0
    55cc:	46b2      	mov	sl, r6
    55ce:	464e      	mov	r6, r9
    55d0:	1824      	adds	r4, r4, r0
    55d2:	414d      	adcs	r5, r1
    55d4:	4033      	ands	r3, r6
    55d6:	4656      	mov	r6, sl
    55d8:	1c20      	adds	r0, r4, #0
    55da:	1c29      	adds	r1, r5, #0
    55dc:	4333      	orrs	r3, r6
    55de:	d004      	beq.n	55ea <_sercom_get_async_baud_val+0x132>
    55e0:	2101      	movs	r1, #1
    55e2:	1c23      	adds	r3, r4, #0
    55e4:	430b      	orrs	r3, r1
    55e6:	1c18      	adds	r0, r3, #0
    55e8:	1c29      	adds	r1, r5, #0
    55ea:	9b01      	ldr	r3, [sp, #4]
    55ec:	428b      	cmp	r3, r1
    55ee:	d80a      	bhi.n	5606 <_sercom_get_async_baud_val+0x14e>
    55f0:	d102      	bne.n	55f8 <_sercom_get_async_baud_val+0x140>
    55f2:	9b00      	ldr	r3, [sp, #0]
    55f4:	4283      	cmp	r3, r0
    55f6:	d806      	bhi.n	5606 <_sercom_get_async_baud_val+0x14e>
    55f8:	9b00      	ldr	r3, [sp, #0]
    55fa:	9c01      	ldr	r4, [sp, #4]
    55fc:	1ac0      	subs	r0, r0, r3
    55fe:	41a1      	sbcs	r1, r4
    5600:	4663      	mov	r3, ip
    5602:	433b      	orrs	r3, r7
    5604:	469c      	mov	ip, r3
    5606:	3a01      	subs	r2, #1
    5608:	d309      	bcc.n	561e <_sercom_get_async_baud_val+0x166>
    560a:	2320      	movs	r3, #32
    560c:	425b      	negs	r3, r3
    560e:	18d3      	adds	r3, r2, r3
    5610:	d5d3      	bpl.n	55ba <_sercom_get_async_baud_val+0x102>
    5612:	465b      	mov	r3, fp
    5614:	2401      	movs	r4, #1
    5616:	1a9b      	subs	r3, r3, r2
    5618:	40dc      	lsrs	r4, r3
    561a:	1c23      	adds	r3, r4, #0
    561c:	e7d0      	b.n	55c0 <_sercom_get_async_baud_val+0x108>
    561e:	4661      	mov	r1, ip
    5620:	9a03      	ldr	r2, [sp, #12]
    5622:	1a8b      	subs	r3, r1, r2
    5624:	4907      	ldr	r1, [pc, #28]	; (5644 <_sercom_get_async_baud_val+0x18c>)
    5626:	08db      	lsrs	r3, r3, #3
    5628:	428b      	cmp	r3, r1
    562a:	d906      	bls.n	563a <_sercom_get_async_baud_val+0x182>
    562c:	1c13      	adds	r3, r2, #0
    562e:	3301      	adds	r3, #1
    5630:	9303      	str	r3, [sp, #12]
    5632:	2b08      	cmp	r3, #8
    5634:	d1b8      	bne.n	55a8 <_sercom_get_async_baud_val+0xf0>
    5636:	2040      	movs	r0, #64	; 0x40
    5638:	e74d      	b.n	54d6 <_sercom_get_async_baud_val+0x1e>
    563a:	9a05      	ldr	r2, [sp, #20]
    563c:	0354      	lsls	r4, r2, #13
    563e:	431c      	orrs	r4, r3
    5640:	b2a4      	uxth	r4, r4
    5642:	e797      	b.n	5574 <_sercom_get_async_baud_val+0xbc>
    5644:	00001fff 	.word	0x00001fff

00005648 <sercom_set_gclk_generator>:
    5648:	b530      	push	{r4, r5, lr}
    564a:	4c0e      	ldr	r4, [pc, #56]	; (5684 <sercom_set_gclk_generator+0x3c>)
    564c:	b083      	sub	sp, #12
    564e:	7823      	ldrb	r3, [r4, #0]
    5650:	1c05      	adds	r5, r0, #0
    5652:	2b00      	cmp	r3, #0
    5654:	d006      	beq.n	5664 <sercom_set_gclk_generator+0x1c>
    5656:	2900      	cmp	r1, #0
    5658:	d104      	bne.n	5664 <sercom_set_gclk_generator+0x1c>
    565a:	7863      	ldrb	r3, [r4, #1]
    565c:	4283      	cmp	r3, r0
    565e:	d00f      	beq.n	5680 <sercom_set_gclk_generator+0x38>
    5660:	201d      	movs	r0, #29
    5662:	e00b      	b.n	567c <sercom_set_gclk_generator+0x34>
    5664:	a901      	add	r1, sp, #4
    5666:	2013      	movs	r0, #19
    5668:	700d      	strb	r5, [r1, #0]
    566a:	f7fe ff41 	bl	44f0 <system_gclk_chan_set_config>
    566e:	2013      	movs	r0, #19
    5670:	f7fe ff00 	bl	4474 <system_gclk_chan_enable>
    5674:	2301      	movs	r3, #1
    5676:	2000      	movs	r0, #0
    5678:	7065      	strb	r5, [r4, #1]
    567a:	7023      	strb	r3, [r4, #0]
    567c:	b003      	add	sp, #12
    567e:	bd30      	pop	{r4, r5, pc}
    5680:	2000      	movs	r0, #0
    5682:	e7fb      	b.n	567c <sercom_set_gclk_generator+0x34>
    5684:	20004370 	.word	0x20004370

00005688 <_sercom_get_sercom_inst_index>:
    5688:	b570      	push	{r4, r5, r6, lr}
    568a:	b086      	sub	sp, #24
    568c:	4669      	mov	r1, sp
    568e:	4b09      	ldr	r3, [pc, #36]	; (56b4 <_sercom_get_sercom_inst_index+0x2c>)
    5690:	466a      	mov	r2, sp
    5692:	cb70      	ldmia	r3!, {r4, r5, r6}
    5694:	c170      	stmia	r1!, {r4, r5, r6}
    5696:	cb70      	ldmia	r3!, {r4, r5, r6}
    5698:	c170      	stmia	r1!, {r4, r5, r6}
    569a:	2300      	movs	r3, #0
    569c:	0099      	lsls	r1, r3, #2
    569e:	5851      	ldr	r1, [r2, r1]
    56a0:	4281      	cmp	r1, r0
    56a2:	d005      	beq.n	56b0 <_sercom_get_sercom_inst_index+0x28>
    56a4:	3301      	adds	r3, #1
    56a6:	2b06      	cmp	r3, #6
    56a8:	d1f8      	bne.n	569c <_sercom_get_sercom_inst_index+0x14>
    56aa:	2000      	movs	r0, #0
    56ac:	b006      	add	sp, #24
    56ae:	bd70      	pop	{r4, r5, r6, pc}
    56b0:	b2d8      	uxtb	r0, r3
    56b2:	e7fb      	b.n	56ac <_sercom_get_sercom_inst_index+0x24>
    56b4:	0000ef4c 	.word	0x0000ef4c

000056b8 <system_clock_source_get_hz>:
    56b8:	b510      	push	{r4, lr}
    56ba:	2808      	cmp	r0, #8
    56bc:	d82c      	bhi.n	5718 <system_clock_source_get_hz+0x60>
    56be:	4b1b      	ldr	r3, [pc, #108]	; (572c <system_clock_source_get_hz+0x74>)
    56c0:	0080      	lsls	r0, r0, #2
    56c2:	581b      	ldr	r3, [r3, r0]
    56c4:	469f      	mov	pc, r3
    56c6:	2080      	movs	r0, #128	; 0x80
    56c8:	0200      	lsls	r0, r0, #8
    56ca:	bd10      	pop	{r4, pc}
    56cc:	4b18      	ldr	r3, [pc, #96]	; (5730 <system_clock_source_get_hz+0x78>)
    56ce:	6958      	ldr	r0, [r3, #20]
    56d0:	e7fb      	b.n	56ca <system_clock_source_get_hz+0x12>
    56d2:	4b18      	ldr	r3, [pc, #96]	; (5734 <system_clock_source_get_hz+0x7c>)
    56d4:	6a18      	ldr	r0, [r3, #32]
    56d6:	4b18      	ldr	r3, [pc, #96]	; (5738 <system_clock_source_get_hz+0x80>)
    56d8:	0580      	lsls	r0, r0, #22
    56da:	0f80      	lsrs	r0, r0, #30
    56dc:	40c3      	lsrs	r3, r0
    56de:	1c18      	adds	r0, r3, #0
    56e0:	e7f3      	b.n	56ca <system_clock_source_get_hz+0x12>
    56e2:	2002      	movs	r0, #2
    56e4:	4c12      	ldr	r4, [pc, #72]	; (5730 <system_clock_source_get_hz+0x78>)
    56e6:	6823      	ldr	r3, [r4, #0]
    56e8:	4018      	ands	r0, r3
    56ea:	d0ee      	beq.n	56ca <system_clock_source_get_hz+0x12>
    56ec:	2210      	movs	r2, #16
    56ee:	4911      	ldr	r1, [pc, #68]	; (5734 <system_clock_source_get_hz+0x7c>)
    56f0:	68cb      	ldr	r3, [r1, #12]
    56f2:	421a      	tst	r2, r3
    56f4:	d0fc      	beq.n	56f0 <system_clock_source_get_hz+0x38>
    56f6:	6823      	ldr	r3, [r4, #0]
    56f8:	075b      	lsls	r3, r3, #29
    56fa:	d40f      	bmi.n	571c <system_clock_source_get_hz+0x64>
    56fc:	480f      	ldr	r0, [pc, #60]	; (573c <system_clock_source_get_hz+0x84>)
    56fe:	e7e4      	b.n	56ca <system_clock_source_get_hz+0x12>
    5700:	4b0b      	ldr	r3, [pc, #44]	; (5730 <system_clock_source_get_hz+0x78>)
    5702:	6918      	ldr	r0, [r3, #16]
    5704:	e7e1      	b.n	56ca <system_clock_source_get_hz+0x12>
    5706:	2350      	movs	r3, #80	; 0x50
    5708:	4a0a      	ldr	r2, [pc, #40]	; (5734 <system_clock_source_get_hz+0x7c>)
    570a:	2000      	movs	r0, #0
    570c:	5cd3      	ldrb	r3, [r2, r3]
    570e:	075b      	lsls	r3, r3, #29
    5710:	d5db      	bpl.n	56ca <system_clock_source_get_hz+0x12>
    5712:	4b07      	ldr	r3, [pc, #28]	; (5730 <system_clock_source_get_hz+0x78>)
    5714:	68d8      	ldr	r0, [r3, #12]
    5716:	e7d8      	b.n	56ca <system_clock_source_get_hz+0x12>
    5718:	2000      	movs	r0, #0
    571a:	e7d6      	b.n	56ca <system_clock_source_get_hz+0x12>
    571c:	2000      	movs	r0, #0
    571e:	f7fe ff07 	bl	4530 <system_gclk_chan_get_hz>
    5722:	68a3      	ldr	r3, [r4, #8]
    5724:	041b      	lsls	r3, r3, #16
    5726:	0c1b      	lsrs	r3, r3, #16
    5728:	4358      	muls	r0, r3
    572a:	e7ce      	b.n	56ca <system_clock_source_get_hz+0x12>
    572c:	0000ef64 	.word	0x0000ef64
    5730:	20004374 	.word	0x20004374
    5734:	40000800 	.word	0x40000800
    5738:	007a1200 	.word	0x007a1200
    573c:	02dc6c00 	.word	0x02dc6c00

00005740 <system_clock_source_enable>:
    5740:	b510      	push	{r4, lr}
    5742:	2808      	cmp	r0, #8
    5744:	d841      	bhi.n	57ca <system_clock_source_enable+0x8a>
    5746:	4b22      	ldr	r3, [pc, #136]	; (57d0 <system_clock_source_enable+0x90>)
    5748:	0080      	lsls	r0, r0, #2
    574a:	581b      	ldr	r3, [r3, r0]
    574c:	469f      	mov	pc, r3
    574e:	2000      	movs	r0, #0
    5750:	bd10      	pop	{r4, pc}
    5752:	2302      	movs	r3, #2
    5754:	4a1f      	ldr	r2, [pc, #124]	; (57d4 <system_clock_source_enable+0x94>)
    5756:	2000      	movs	r0, #0
    5758:	6991      	ldr	r1, [r2, #24]
    575a:	430b      	orrs	r3, r1
    575c:	6193      	str	r3, [r2, #24]
    575e:	e7f7      	b.n	5750 <system_clock_source_enable+0x10>
    5760:	2302      	movs	r3, #2
    5762:	4a1c      	ldr	r2, [pc, #112]	; (57d4 <system_clock_source_enable+0x94>)
    5764:	2000      	movs	r0, #0
    5766:	8a91      	ldrh	r1, [r2, #20]
    5768:	430b      	orrs	r3, r1
    576a:	8293      	strh	r3, [r2, #20]
    576c:	e7f0      	b.n	5750 <system_clock_source_enable+0x10>
    576e:	2302      	movs	r3, #2
    5770:	4a18      	ldr	r2, [pc, #96]	; (57d4 <system_clock_source_enable+0x94>)
    5772:	2000      	movs	r0, #0
    5774:	6a11      	ldr	r1, [r2, #32]
    5776:	430b      	orrs	r3, r1
    5778:	6213      	str	r3, [r2, #32]
    577a:	e7e9      	b.n	5750 <system_clock_source_enable+0x10>
    577c:	2302      	movs	r3, #2
    577e:	2010      	movs	r0, #16
    5780:	4c15      	ldr	r4, [pc, #84]	; (57d8 <system_clock_source_enable+0x98>)
    5782:	6822      	ldr	r2, [r4, #0]
    5784:	4313      	orrs	r3, r2
    5786:	6023      	str	r3, [r4, #0]
    5788:	6822      	ldr	r2, [r4, #0]
    578a:	4b14      	ldr	r3, [pc, #80]	; (57dc <system_clock_source_enable+0x9c>)
    578c:	4013      	ands	r3, r2
    578e:	4a11      	ldr	r2, [pc, #68]	; (57d4 <system_clock_source_enable+0x94>)
    5790:	8493      	strh	r3, [r2, #36]	; 0x24
    5792:	68d3      	ldr	r3, [r2, #12]
    5794:	490f      	ldr	r1, [pc, #60]	; (57d4 <system_clock_source_enable+0x94>)
    5796:	4218      	tst	r0, r3
    5798:	d0fb      	beq.n	5792 <system_clock_source_enable+0x52>
    579a:	68a3      	ldr	r3, [r4, #8]
    579c:	2000      	movs	r0, #0
    579e:	62cb      	str	r3, [r1, #44]	; 0x2c
    57a0:	6863      	ldr	r3, [r4, #4]
    57a2:	628b      	str	r3, [r1, #40]	; 0x28
    57a4:	6823      	ldr	r3, [r4, #0]
    57a6:	b29b      	uxth	r3, r3
    57a8:	848b      	strh	r3, [r1, #36]	; 0x24
    57aa:	e7d1      	b.n	5750 <system_clock_source_enable+0x10>
    57ac:	2244      	movs	r2, #68	; 0x44
    57ae:	2302      	movs	r3, #2
    57b0:	4908      	ldr	r1, [pc, #32]	; (57d4 <system_clock_source_enable+0x94>)
    57b2:	5c88      	ldrb	r0, [r1, r2]
    57b4:	4303      	orrs	r3, r0
    57b6:	548b      	strb	r3, [r1, r2]
    57b8:	2000      	movs	r0, #0
    57ba:	e7c9      	b.n	5750 <system_clock_source_enable+0x10>
    57bc:	2302      	movs	r3, #2
    57be:	4a05      	ldr	r2, [pc, #20]	; (57d4 <system_clock_source_enable+0x94>)
    57c0:	2000      	movs	r0, #0
    57c2:	8a11      	ldrh	r1, [r2, #16]
    57c4:	430b      	orrs	r3, r1
    57c6:	8213      	strh	r3, [r2, #16]
    57c8:	e7c2      	b.n	5750 <system_clock_source_enable+0x10>
    57ca:	2017      	movs	r0, #23
    57cc:	e7c0      	b.n	5750 <system_clock_source_enable+0x10>
    57ce:	46c0      	nop			; (mov r8, r8)
    57d0:	0000ef88 	.word	0x0000ef88
    57d4:	40000800 	.word	0x40000800
    57d8:	20004374 	.word	0x20004374
    57dc:	0000ff7f 	.word	0x0000ff7f

000057e0 <system_clock_init>:
    57e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    57e2:	4647      	mov	r7, r8
    57e4:	22c2      	movs	r2, #194	; 0xc2
    57e6:	211e      	movs	r1, #30
    57e8:	b480      	push	{r7}
    57ea:	4b31      	ldr	r3, [pc, #196]	; (58b0 <system_clock_init+0xd0>)
    57ec:	00d2      	lsls	r2, r2, #3
    57ee:	609a      	str	r2, [r3, #8]
    57f0:	4a30      	ldr	r2, [pc, #192]	; (58b4 <system_clock_init+0xd4>)
    57f2:	2400      	movs	r4, #0
    57f4:	6853      	ldr	r3, [r2, #4]
    57f6:	b084      	sub	sp, #16
    57f8:	438b      	bics	r3, r1
    57fa:	6053      	str	r3, [r2, #4]
    57fc:	2301      	movs	r3, #1
    57fe:	ad01      	add	r5, sp, #4
    5800:	702b      	strb	r3, [r5, #0]
    5802:	b2e0      	uxtb	r0, r4
    5804:	1c29      	adds	r1, r5, #0
    5806:	3401      	adds	r4, #1
    5808:	f7fe fe72 	bl	44f0 <system_gclk_chan_set_config>
    580c:	2c25      	cmp	r4, #37	; 0x25
    580e:	d1f8      	bne.n	5802 <system_clock_init+0x22>
    5810:	4b29      	ldr	r3, [pc, #164]	; (58b8 <system_clock_init+0xd8>)
    5812:	4c27      	ldr	r4, [pc, #156]	; (58b0 <system_clock_init+0xd0>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	69a1      	ldr	r1, [r4, #24]
    5818:	04db      	lsls	r3, r3, #19
    581a:	0e5b      	lsrs	r3, r3, #25
    581c:	041a      	lsls	r2, r3, #16
    581e:	4b27      	ldr	r3, [pc, #156]	; (58bc <system_clock_init+0xdc>)
    5820:	2604      	movs	r6, #4
    5822:	400b      	ands	r3, r1
    5824:	4313      	orrs	r3, r2
    5826:	2208      	movs	r2, #8
    5828:	2740      	movs	r7, #64	; 0x40
    582a:	61a3      	str	r3, [r4, #24]
    582c:	69a3      	ldr	r3, [r4, #24]
    582e:	2004      	movs	r0, #4
    5830:	4333      	orrs	r3, r6
    5832:	4313      	orrs	r3, r2
    5834:	43bb      	bics	r3, r7
    5836:	3278      	adds	r2, #120	; 0x78
    5838:	4690      	mov	r8, r2
    583a:	4313      	orrs	r3, r2
    583c:	22e0      	movs	r2, #224	; 0xe0
    583e:	00d2      	lsls	r2, r2, #3
    5840:	4313      	orrs	r3, r2
    5842:	4a1f      	ldr	r2, [pc, #124]	; (58c0 <system_clock_init+0xe0>)
    5844:	4013      	ands	r3, r2
    5846:	61a3      	str	r3, [r4, #24]
    5848:	f7ff ff7a 	bl	5740 <system_clock_source_enable>
    584c:	4642      	mov	r2, r8
    584e:	6a23      	ldr	r3, [r4, #32]
    5850:	2006      	movs	r0, #6
    5852:	43bb      	bics	r3, r7
    5854:	4313      	orrs	r3, r2
    5856:	4a1b      	ldr	r2, [pc, #108]	; (58c4 <system_clock_init+0xe4>)
    5858:	4013      	ands	r3, r2
    585a:	6223      	str	r3, [r4, #32]
    585c:	f7ff ff70 	bl	5740 <system_clock_source_enable>
    5860:	2400      	movs	r4, #0
    5862:	f7fe fd51 	bl	4308 <system_gclk_init>
    5866:	2320      	movs	r3, #32
    5868:	1c29      	adds	r1, r5, #0
    586a:	2002      	movs	r0, #2
    586c:	606b      	str	r3, [r5, #4]
    586e:	706c      	strb	r4, [r5, #1]
    5870:	722c      	strb	r4, [r5, #8]
    5872:	726c      	strb	r4, [r5, #9]
    5874:	702e      	strb	r6, [r5, #0]
    5876:	f7fe fd59 	bl	432c <system_gclk_gen_set_config>
    587a:	2002      	movs	r0, #2
    587c:	f7fe fda0 	bl	43c0 <system_gclk_gen_enable>
    5880:	4b11      	ldr	r3, [pc, #68]	; (58c8 <system_clock_init+0xe8>)
    5882:	1c29      	adds	r1, r5, #0
    5884:	721c      	strb	r4, [r3, #8]
    5886:	725c      	strb	r4, [r3, #9]
    5888:	729c      	strb	r4, [r3, #10]
    588a:	72dc      	strb	r4, [r3, #11]
    588c:	2301      	movs	r3, #1
    588e:	2000      	movs	r0, #0
    5890:	606b      	str	r3, [r5, #4]
    5892:	3305      	adds	r3, #5
    5894:	702b      	strb	r3, [r5, #0]
    5896:	706c      	strb	r4, [r5, #1]
    5898:	722c      	strb	r4, [r5, #8]
    589a:	726c      	strb	r4, [r5, #9]
    589c:	f7fe fd46 	bl	432c <system_gclk_gen_set_config>
    58a0:	2000      	movs	r0, #0
    58a2:	f7fe fd8d 	bl	43c0 <system_gclk_gen_enable>
    58a6:	b004      	add	sp, #16
    58a8:	bc04      	pop	{r2}
    58aa:	4690      	mov	r8, r2
    58ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	40000800 	.word	0x40000800
    58b4:	41004000 	.word	0x41004000
    58b8:	00806024 	.word	0x00806024
    58bc:	ff80ffff 	.word	0xff80ffff
    58c0:	ffffefff 	.word	0xffffefff
    58c4:	fffffcff 	.word	0xfffffcff
    58c8:	40000400 	.word	0x40000400

000058cc <gpio_init>:
    58cc:	b570      	push	{r4, r5, r6, lr}
    58ce:	1c05      	adds	r5, r0, #0
    58d0:	b082      	sub	sp, #8
    58d2:	1c0c      	adds	r4, r1, #0
    58d4:	1c4b      	adds	r3, r1, #1
    58d6:	d028      	beq.n	592a <gpio_init+0x5e>
    58d8:	b2c8      	uxtb	r0, r1
    58da:	2900      	cmp	r1, #0
    58dc:	db2c      	blt.n	5938 <gpio_init+0x6c>
    58de:	4b18      	ldr	r3, [pc, #96]	; (5940 <gpio_init+0x74>)
    58e0:	0946      	lsrs	r6, r0, #5
    58e2:	469c      	mov	ip, r3
    58e4:	01f6      	lsls	r6, r6, #7
    58e6:	4466      	add	r6, ip
    58e8:	702c      	strb	r4, [r5, #0]
    58ea:	17e2      	asrs	r2, r4, #31
    58ec:	0ed2      	lsrs	r2, r2, #27
    58ee:	18a3      	adds	r3, r4, r2
    58f0:	241f      	movs	r4, #31
    58f2:	401c      	ands	r4, r3
    58f4:	1aa4      	subs	r4, r4, r2
    58f6:	2201      	movs	r2, #1
    58f8:	1c13      	adds	r3, r2, #0
    58fa:	b264      	sxtb	r4, r4
    58fc:	40a3      	lsls	r3, r4
    58fe:	606b      	str	r3, [r5, #4]
    5900:	2300      	movs	r3, #0
    5902:	a901      	add	r1, sp, #4
    5904:	722b      	strb	r3, [r5, #8]
    5906:	72ab      	strb	r3, [r5, #10]
    5908:	726a      	strb	r2, [r5, #9]
    590a:	700b      	strb	r3, [r1, #0]
    590c:	708b      	strb	r3, [r1, #2]
    590e:	704a      	strb	r2, [r1, #1]
    5910:	f000 fe6a 	bl	65e8 <port_pin_set_config>
    5914:	1c33      	adds	r3, r6, #0
    5916:	3314      	adds	r3, #20
    5918:	60eb      	str	r3, [r5, #12]
    591a:	3304      	adds	r3, #4
    591c:	612b      	str	r3, [r5, #16]
    591e:	3610      	adds	r6, #16
    5920:	3308      	adds	r3, #8
    5922:	616b      	str	r3, [r5, #20]
    5924:	61ae      	str	r6, [r5, #24]
    5926:	b002      	add	sp, #8
    5928:	bd70      	pop	{r4, r5, r6, pc}
    592a:	4806      	ldr	r0, [pc, #24]	; (5944 <gpio_init+0x78>)
    592c:	4906      	ldr	r1, [pc, #24]	; (5948 <gpio_init+0x7c>)
    592e:	221f      	movs	r2, #31
    5930:	f7ff fd2a 	bl	5388 <mbed_assert_internal>
    5934:	702c      	strb	r4, [r5, #0]
    5936:	e7f6      	b.n	5926 <gpio_init+0x5a>
    5938:	702c      	strb	r4, [r5, #0]
    593a:	2600      	movs	r6, #0
    593c:	e7d5      	b.n	58ea <gpio_init+0x1e>
    593e:	46c0      	nop			; (mov r8, r8)
    5940:	41004400 	.word	0x41004400
    5944:	0000efac 	.word	0x0000efac
    5948:	0000efc0 	.word	0x0000efc0

0000594c <gpio_mode>:
    594c:	b530      	push	{r4, r5, lr}
    594e:	1c04      	adds	r4, r0, #0
    5950:	7800      	ldrb	r0, [r0, #0]
    5952:	b083      	sub	sp, #12
    5954:	b243      	sxtb	r3, r0
    5956:	1c0d      	adds	r5, r1, #0
    5958:	3301      	adds	r3, #1
    595a:	d013      	beq.n	5984 <gpio_mode+0x38>
    595c:	7aa3      	ldrb	r3, [r4, #10]
    595e:	a901      	add	r1, sp, #4
    5960:	700b      	strb	r3, [r1, #0]
    5962:	7a23      	ldrb	r3, [r4, #8]
    5964:	7265      	strb	r5, [r4, #9]
    5966:	1e5a      	subs	r2, r3, #1
    5968:	4193      	sbcs	r3, r2
    596a:	708b      	strb	r3, [r1, #2]
    596c:	2d01      	cmp	r5, #1
    596e:	d003      	beq.n	5978 <gpio_mode+0x2c>
    5970:	2d00      	cmp	r5, #0
    5972:	d001      	beq.n	5978 <gpio_mode+0x2c>
    5974:	2d02      	cmp	r5, #2
    5976:	d100      	bne.n	597a <gpio_mode+0x2e>
    5978:	704d      	strb	r5, [r1, #1]
    597a:	b2c0      	uxtb	r0, r0
    597c:	f000 fe34 	bl	65e8 <port_pin_set_config>
    5980:	b003      	add	sp, #12
    5982:	bd30      	pop	{r4, r5, pc}
    5984:	4803      	ldr	r0, [pc, #12]	; (5994 <gpio_mode+0x48>)
    5986:	4904      	ldr	r1, [pc, #16]	; (5998 <gpio_mode+0x4c>)
    5988:	2236      	movs	r2, #54	; 0x36
    598a:	f7ff fcfd 	bl	5388 <mbed_assert_internal>
    598e:	7820      	ldrb	r0, [r4, #0]
    5990:	e7e4      	b.n	595c <gpio_mode+0x10>
    5992:	46c0      	nop			; (mov r8, r8)
    5994:	0000e35c 	.word	0x0000e35c
    5998:	0000efc0 	.word	0x0000efc0

0000599c <gpio_dir>:
    599c:	b530      	push	{r4, r5, lr}
    599e:	1c04      	adds	r4, r0, #0
    59a0:	7800      	ldrb	r0, [r0, #0]
    59a2:	b083      	sub	sp, #12
    59a4:	b243      	sxtb	r3, r0
    59a6:	1c0d      	adds	r5, r1, #0
    59a8:	3301      	adds	r3, #1
    59aa:	d013      	beq.n	59d4 <gpio_dir+0x38>
    59ac:	7a63      	ldrb	r3, [r4, #9]
    59ae:	a901      	add	r1, sp, #4
    59b0:	704b      	strb	r3, [r1, #1]
    59b2:	7a23      	ldrb	r3, [r4, #8]
    59b4:	72a5      	strb	r5, [r4, #10]
    59b6:	1e5a      	subs	r2, r3, #1
    59b8:	4193      	sbcs	r3, r2
    59ba:	708b      	strb	r3, [r1, #2]
    59bc:	2d01      	cmp	r5, #1
    59be:	d003      	beq.n	59c8 <gpio_dir+0x2c>
    59c0:	2d00      	cmp	r5, #0
    59c2:	d001      	beq.n	59c8 <gpio_dir+0x2c>
    59c4:	2d02      	cmp	r5, #2
    59c6:	d100      	bne.n	59ca <gpio_dir+0x2e>
    59c8:	700d      	strb	r5, [r1, #0]
    59ca:	b2c0      	uxtb	r0, r0
    59cc:	f000 fe0c 	bl	65e8 <port_pin_set_config>
    59d0:	b003      	add	sp, #12
    59d2:	bd30      	pop	{r4, r5, pc}
    59d4:	4803      	ldr	r0, [pc, #12]	; (59e4 <gpio_dir+0x48>)
    59d6:	4904      	ldr	r1, [pc, #16]	; (59e8 <gpio_dir+0x4c>)
    59d8:	224c      	movs	r2, #76	; 0x4c
    59da:	f7ff fcd5 	bl	5388 <mbed_assert_internal>
    59de:	7820      	ldrb	r0, [r4, #0]
    59e0:	e7e4      	b.n	59ac <gpio_dir+0x10>
    59e2:	46c0      	nop			; (mov r8, r8)
    59e4:	0000e35c 	.word	0x0000e35c
    59e8:	0000efc0 	.word	0x0000efc0

000059ec <pin_mode>:
    59ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ee:	4645      	mov	r5, r8
    59f0:	4657      	mov	r7, sl
    59f2:	464e      	mov	r6, r9
    59f4:	b4e0      	push	{r5, r6, r7}
    59f6:	4688      	mov	r8, r1
    59f8:	b082      	sub	sp, #8
    59fa:	1c05      	adds	r5, r0, #0
    59fc:	1c43      	adds	r3, r0, #1
    59fe:	d062      	beq.n	5ac6 <pin_mode+0xda>
    5a00:	17c4      	asrs	r4, r0, #31
    5a02:	0ee2      	lsrs	r2, r4, #27
    5a04:	241f      	movs	r4, #31
    5a06:	2701      	movs	r7, #1
    5a08:	1883      	adds	r3, r0, r2
    5a0a:	401c      	ands	r4, r3
    5a0c:	1aa4      	subs	r4, r4, r2
    5a0e:	b264      	sxtb	r4, r4
    5a10:	40a7      	lsls	r7, r4
    5a12:	b2c6      	uxtb	r6, r0
    5a14:	46ba      	mov	sl, r7
    5a16:	0975      	lsrs	r5, r6, #5
    5a18:	09f3      	lsrs	r3, r6, #7
    5a1a:	d13e      	bne.n	5a9a <pin_mode+0xae>
    5a1c:	4b37      	ldr	r3, [pc, #220]	; (5afc <pin_mode+0x110>)
    5a1e:	01ed      	lsls	r5, r5, #7
    5a20:	469c      	mov	ip, r3
    5a22:	4465      	add	r5, ip
    5a24:	2d00      	cmp	r5, #0
    5a26:	d062      	beq.n	5aee <pin_mode+0x102>
    5a28:	1c28      	adds	r0, r5, #0
    5a2a:	231f      	movs	r3, #31
    5a2c:	4033      	ands	r3, r6
    5a2e:	18c2      	adds	r2, r0, r3
    5a30:	3240      	adds	r2, #64	; 0x40
    5a32:	7812      	ldrb	r2, [r2, #0]
    5a34:	2101      	movs	r1, #1
    5a36:	4694      	mov	ip, r2
    5a38:	4667      	mov	r7, ip
    5a3a:	2280      	movs	r2, #128	; 0x80
    5a3c:	4239      	tst	r1, r7
    5a3e:	d136      	bne.n	5aae <pin_mode+0xc2>
    5a40:	a901      	add	r1, sp, #4
    5a42:	700a      	strb	r2, [r1, #0]
    5a44:	2202      	movs	r2, #2
    5a46:	192c      	adds	r4, r5, r4
    5a48:	3440      	adds	r4, #64	; 0x40
    5a4a:	7823      	ldrb	r3, [r4, #0]
    5a4c:	421a      	tst	r2, r3
    5a4e:	d010      	beq.n	5a72 <pin_mode+0x86>
    5a50:	4650      	mov	r0, sl
    5a52:	682b      	ldr	r3, [r5, #0]
    5a54:	4003      	ands	r3, r0
    5a56:	d134      	bne.n	5ac2 <pin_mode+0xd6>
    5a58:	704b      	strb	r3, [r1, #1]
    5a5a:	7823      	ldrb	r3, [r4, #0]
    5a5c:	075b      	lsls	r3, r3, #29
    5a5e:	d50a      	bpl.n	5a76 <pin_mode+0x8a>
    5a60:	692b      	ldr	r3, [r5, #16]
    5a62:	4642      	mov	r2, r8
    5a64:	2300      	movs	r3, #0
    5a66:	70cb      	strb	r3, [r1, #3]
    5a68:	2a01      	cmp	r2, #1
    5a6a:	d109      	bne.n	5a80 <pin_mode+0x94>
    5a6c:	4643      	mov	r3, r8
    5a6e:	708b      	strb	r3, [r1, #2]
    5a70:	e00a      	b.n	5a88 <pin_mode+0x9c>
    5a72:	2301      	movs	r3, #1
    5a74:	704b      	strb	r3, [r1, #1]
    5a76:	2300      	movs	r3, #0
    5a78:	4642      	mov	r2, r8
    5a7a:	70cb      	strb	r3, [r1, #3]
    5a7c:	2a01      	cmp	r2, #1
    5a7e:	d0f5      	beq.n	5a6c <pin_mode+0x80>
    5a80:	4642      	mov	r2, r8
    5a82:	2a02      	cmp	r2, #2
    5a84:	d0f2      	beq.n	5a6c <pin_mode+0x80>
    5a86:	708b      	strb	r3, [r1, #2]
    5a88:	1c30      	adds	r0, r6, #0
    5a8a:	f7fe fc27 	bl	42dc <system_pinmux_pin_set_config>
    5a8e:	b002      	add	sp, #8
    5a90:	bc1c      	pop	{r2, r3, r4}
    5a92:	4690      	mov	r8, r2
    5a94:	4699      	mov	r9, r3
    5a96:	46a2      	mov	sl, r4
    5a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a9a:	4b19      	ldr	r3, [pc, #100]	; (5b00 <pin_mode+0x114>)
    5a9c:	4699      	mov	r9, r3
    5a9e:	4819      	ldr	r0, [pc, #100]	; (5b04 <pin_mode+0x118>)
    5aa0:	4649      	mov	r1, r9
    5aa2:	2223      	movs	r2, #35	; 0x23
    5aa4:	f7ff fc70 	bl	5388 <mbed_assert_internal>
    5aa8:	2500      	movs	r5, #0
    5aaa:	2000      	movs	r0, #0
    5aac:	e7bd      	b.n	5a2a <pin_mode+0x3e>
    5aae:	085b      	lsrs	r3, r3, #1
    5ab0:	18c3      	adds	r3, r0, r3
    5ab2:	3330      	adds	r3, #48	; 0x30
    5ab4:	781a      	ldrb	r2, [r3, #0]
    5ab6:	b2d2      	uxtb	r2, r2
    5ab8:	4231      	tst	r1, r6
    5aba:	d116      	bne.n	5aea <pin_mode+0xfe>
    5abc:	230f      	movs	r3, #15
    5abe:	401a      	ands	r2, r3
    5ac0:	e7be      	b.n	5a40 <pin_mode+0x54>
    5ac2:	704a      	strb	r2, [r1, #1]
    5ac4:	e7d7      	b.n	5a76 <pin_mode+0x8a>
    5ac6:	4b0e      	ldr	r3, [pc, #56]	; (5b00 <pin_mode+0x114>)
    5ac8:	4c0f      	ldr	r4, [pc, #60]	; (5b08 <pin_mode+0x11c>)
    5aca:	4699      	mov	r9, r3
    5acc:	1c19      	adds	r1, r3, #0
    5ace:	1c20      	adds	r0, r4, #0
    5ad0:	225c      	movs	r2, #92	; 0x5c
    5ad2:	f7ff fc59 	bl	5388 <mbed_assert_internal>
    5ad6:	1c20      	adds	r0, r4, #0
    5ad8:	4649      	mov	r1, r9
    5ada:	221e      	movs	r2, #30
    5adc:	f7ff fc54 	bl	5388 <mbed_assert_internal>
    5ae0:	2300      	movs	r3, #0
    5ae2:	26ff      	movs	r6, #255	; 0xff
    5ae4:	469a      	mov	sl, r3
    5ae6:	1c2c      	adds	r4, r5, #0
    5ae8:	e7d9      	b.n	5a9e <pin_mode+0xb2>
    5aea:	0912      	lsrs	r2, r2, #4
    5aec:	e7a8      	b.n	5a40 <pin_mode+0x54>
    5aee:	4805      	ldr	r0, [pc, #20]	; (5b04 <pin_mode+0x118>)
    5af0:	4903      	ldr	r1, [pc, #12]	; (5b00 <pin_mode+0x114>)
    5af2:	2223      	movs	r2, #35	; 0x23
    5af4:	f7ff fc48 	bl	5388 <mbed_assert_internal>
    5af8:	2000      	movs	r0, #0
    5afa:	e796      	b.n	5a2a <pin_mode+0x3e>
    5afc:	41004400 	.word	0x41004400
    5b00:	0000f028 	.word	0x0000f028
    5b04:	0000f090 	.word	0x0000f090
    5b08:	0000efac 	.word	0x0000efac

00005b0c <pinmap_find_peripheral_from_pad.part.0>:
    5b0c:	b510      	push	{r4, lr}
    5b0e:	1c04      	adds	r4, r0, #0
    5b10:	2901      	cmp	r1, #1
    5b12:	d004      	beq.n	5b1e <pinmap_find_peripheral_from_pad.part.0+0x12>
    5b14:	1c20      	adds	r0, r4, #0
    5b16:	4905      	ldr	r1, [pc, #20]	; (5b2c <pinmap_find_peripheral_from_pad.part.0+0x20>)
    5b18:	f7ff fc6a 	bl	53f0 <pinmap_find_peripheral>
    5b1c:	bd10      	pop	{r4, pc}
    5b1e:	4904      	ldr	r1, [pc, #16]	; (5b30 <pinmap_find_peripheral_from_pad.part.0+0x24>)
    5b20:	f7ff fc66 	bl	53f0 <pinmap_find_peripheral>
    5b24:	1c43      	adds	r3, r0, #1
    5b26:	d1f9      	bne.n	5b1c <pinmap_find_peripheral_from_pad.part.0+0x10>
    5b28:	e7f4      	b.n	5b14 <pinmap_find_peripheral_from_pad.part.0+0x8>
    5b2a:	46c0      	nop			; (mov r8, r8)
    5b2c:	0000edc0 	.word	0x0000edc0
    5b30:	0000ed3c 	.word	0x0000ed3c

00005b34 <pinmap_merge_sercom>:
    5b34:	b538      	push	{r3, r4, r5, lr}
    5b36:	1c0d      	adds	r5, r1, #0
    5b38:	1c43      	adds	r3, r0, #1
    5b3a:	d01b      	beq.n	5b74 <pinmap_merge_sercom+0x40>
    5b3c:	2100      	movs	r1, #0
    5b3e:	f7ff ffe5 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5b42:	1c43      	adds	r3, r0, #1
    5b44:	d016      	beq.n	5b74 <pinmap_merge_sercom+0x40>
    5b46:	240f      	movs	r4, #15
    5b48:	4004      	ands	r4, r0
    5b4a:	1c28      	adds	r0, r5, #0
    5b4c:	1c6b      	adds	r3, r5, #1
    5b4e:	d008      	beq.n	5b62 <pinmap_merge_sercom+0x2e>
    5b50:	2100      	movs	r1, #0
    5b52:	f7ff ffdb 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5b56:	1c43      	adds	r3, r0, #1
    5b58:	d003      	beq.n	5b62 <pinmap_merge_sercom+0x2e>
    5b5a:	230f      	movs	r3, #15
    5b5c:	4018      	ands	r0, r3
    5b5e:	42a0      	cmp	r0, r4
    5b60:	d006      	beq.n	5b70 <pinmap_merge_sercom+0x3c>
    5b62:	1c63      	adds	r3, r4, #1
    5b64:	d003      	beq.n	5b6e <pinmap_merge_sercom+0x3a>
    5b66:	1c43      	adds	r3, r0, #1
    5b68:	d002      	beq.n	5b70 <pinmap_merge_sercom+0x3c>
    5b6a:	2001      	movs	r0, #1
    5b6c:	4240      	negs	r0, r0
    5b6e:	bd38      	pop	{r3, r4, r5, pc}
    5b70:	1c20      	adds	r0, r4, #0
    5b72:	e7fc      	b.n	5b6e <pinmap_merge_sercom+0x3a>
    5b74:	1c28      	adds	r0, r5, #0
    5b76:	1c6b      	adds	r3, r5, #1
    5b78:	d0f9      	beq.n	5b6e <pinmap_merge_sercom+0x3a>
    5b7a:	2100      	movs	r1, #0
    5b7c:	2401      	movs	r4, #1
    5b7e:	f7ff ffc5 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5b82:	4264      	negs	r4, r4
    5b84:	1c43      	adds	r3, r0, #1
    5b86:	d1e8      	bne.n	5b5a <pinmap_merge_sercom+0x26>
    5b88:	e7f1      	b.n	5b6e <pinmap_merge_sercom+0x3a>
    5b8a:	46c0      	nop			; (mov r8, r8)

00005b8c <pinmap_find_sercom>:
    5b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b8e:	1c0f      	adds	r7, r1, #0
    5b90:	b085      	sub	sp, #20
    5b92:	1c16      	adds	r6, r2, #0
    5b94:	1c1d      	adds	r5, r3, #0
    5b96:	1c04      	adds	r4, r0, #0
    5b98:	1c43      	adds	r3, r0, #1
    5b9a:	d003      	beq.n	5ba4 <pinmap_find_sercom+0x18>
    5b9c:	2100      	movs	r1, #0
    5b9e:	f7ff ffb5 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5ba2:	1c04      	adds	r4, r0, #0
    5ba4:	9400      	str	r4, [sp, #0]
    5ba6:	1c38      	adds	r0, r7, #0
    5ba8:	1c7b      	adds	r3, r7, #1
    5baa:	d002      	beq.n	5bb2 <pinmap_find_sercom+0x26>
    5bac:	2100      	movs	r1, #0
    5bae:	f7ff ffad 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5bb2:	9001      	str	r0, [sp, #4]
    5bb4:	1c30      	adds	r0, r6, #0
    5bb6:	1c73      	adds	r3, r6, #1
    5bb8:	d002      	beq.n	5bc0 <pinmap_find_sercom+0x34>
    5bba:	2100      	movs	r1, #0
    5bbc:	f7ff ffa6 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5bc0:	9002      	str	r0, [sp, #8]
    5bc2:	1c28      	adds	r0, r5, #0
    5bc4:	1c6b      	adds	r3, r5, #1
    5bc6:	d002      	beq.n	5bce <pinmap_find_sercom+0x42>
    5bc8:	2100      	movs	r1, #0
    5bca:	f7ff ff9f 	bl	5b0c <pinmap_find_peripheral_from_pad.part.0>
    5bce:	9003      	str	r0, [sp, #12]
    5bd0:	2001      	movs	r0, #1
    5bd2:	2300      	movs	r3, #0
    5bd4:	4240      	negs	r0, r0
    5bd6:	220f      	movs	r2, #15
    5bd8:	1c61      	adds	r1, r4, #1
    5bda:	d004      	beq.n	5be6 <pinmap_find_sercom+0x5a>
    5bdc:	1c41      	adds	r1, r0, #1
    5bde:	d00b      	beq.n	5bf8 <pinmap_find_sercom+0x6c>
    5be0:	4014      	ands	r4, r2
    5be2:	4284      	cmp	r4, r0
    5be4:	d10f      	bne.n	5c06 <pinmap_find_sercom+0x7a>
    5be6:	3304      	adds	r3, #4
    5be8:	2b10      	cmp	r3, #16
    5bea:	d00a      	beq.n	5c02 <pinmap_find_sercom+0x76>
    5bec:	4669      	mov	r1, sp
    5bee:	58cc      	ldr	r4, [r1, r3]
    5bf0:	1c61      	adds	r1, r4, #1
    5bf2:	d0f8      	beq.n	5be6 <pinmap_find_sercom+0x5a>
    5bf4:	1c41      	adds	r1, r0, #1
    5bf6:	d1f3      	bne.n	5be0 <pinmap_find_sercom+0x54>
    5bf8:	1c20      	adds	r0, r4, #0
    5bfa:	3304      	adds	r3, #4
    5bfc:	4010      	ands	r0, r2
    5bfe:	2b10      	cmp	r3, #16
    5c00:	d1f4      	bne.n	5bec <pinmap_find_sercom+0x60>
    5c02:	b005      	add	sp, #20
    5c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c06:	2001      	movs	r0, #1
    5c08:	4240      	negs	r0, r0
    5c0a:	e7fa      	b.n	5c02 <pinmap_find_sercom+0x76>

00005c0c <pinmap_function_sercom>:
    5c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c0e:	1c43      	adds	r3, r0, #1
    5c10:	d004      	beq.n	5c1c <pinmap_function_sercom+0x10>
    5c12:	260f      	movs	r6, #15
    5c14:	4031      	ands	r1, r6
    5c16:	1e0d      	subs	r5, r1, #0
    5c18:	2d05      	cmp	r5, #5
    5c1a:	d902      	bls.n	5c22 <pinmap_function_sercom+0x16>
    5c1c:	2001      	movs	r0, #1
    5c1e:	4240      	negs	r0, r0
    5c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c22:	4f0a      	ldr	r7, [pc, #40]	; (5c4c <pinmap_function_sercom+0x40>)
    5c24:	1c04      	adds	r4, r0, #0
    5c26:	1c39      	adds	r1, r7, #0
    5c28:	f7ff fbee 	bl	5408 <pinmap_peripheral>
    5c2c:	4030      	ands	r0, r6
    5c2e:	42a8      	cmp	r0, r5
    5c30:	d007      	beq.n	5c42 <pinmap_function_sercom+0x36>
    5c32:	4f07      	ldr	r7, [pc, #28]	; (5c50 <pinmap_function_sercom+0x44>)
    5c34:	1c20      	adds	r0, r4, #0
    5c36:	1c39      	adds	r1, r7, #0
    5c38:	f7ff fbe6 	bl	5408 <pinmap_peripheral>
    5c3c:	4006      	ands	r6, r0
    5c3e:	42ae      	cmp	r6, r5
    5c40:	d1ec      	bne.n	5c1c <pinmap_function_sercom+0x10>
    5c42:	1c20      	adds	r0, r4, #0
    5c44:	1c39      	adds	r1, r7, #0
    5c46:	f7ff fbf7 	bl	5438 <pinmap_function>
    5c4a:	e7e9      	b.n	5c20 <pinmap_function_sercom+0x14>
    5c4c:	0000edc0 	.word	0x0000edc0
    5c50:	0000ed3c 	.word	0x0000ed3c

00005c54 <pinmap_pad_sercom>:
    5c54:	b570      	push	{r4, r5, r6, lr}
    5c56:	1c43      	adds	r3, r0, #1
    5c58:	d004      	beq.n	5c64 <pinmap_pad_sercom+0x10>
    5c5a:	240f      	movs	r4, #15
    5c5c:	4021      	ands	r1, r4
    5c5e:	1e0d      	subs	r5, r1, #0
    5c60:	2d05      	cmp	r5, #5
    5c62:	d902      	bls.n	5c6a <pinmap_pad_sercom+0x16>
    5c64:	2001      	movs	r0, #1
    5c66:	4240      	negs	r0, r0
    5c68:	bd70      	pop	{r4, r5, r6, pc}
    5c6a:	4909      	ldr	r1, [pc, #36]	; (5c90 <pinmap_pad_sercom+0x3c>)
    5c6c:	1c06      	adds	r6, r0, #0
    5c6e:	f7ff fbcb 	bl	5408 <pinmap_peripheral>
    5c72:	1c23      	adds	r3, r4, #0
    5c74:	4003      	ands	r3, r0
    5c76:	42ab      	cmp	r3, r5
    5c78:	d007      	beq.n	5c8a <pinmap_pad_sercom+0x36>
    5c7a:	1c30      	adds	r0, r6, #0
    5c7c:	4905      	ldr	r1, [pc, #20]	; (5c94 <pinmap_pad_sercom+0x40>)
    5c7e:	f7ff fbc3 	bl	5408 <pinmap_peripheral>
    5c82:	1c23      	adds	r3, r4, #0
    5c84:	4003      	ands	r3, r0
    5c86:	42ab      	cmp	r3, r5
    5c88:	d1ec      	bne.n	5c64 <pinmap_pad_sercom+0x10>
    5c8a:	0900      	lsrs	r0, r0, #4
    5c8c:	4020      	ands	r0, r4
    5c8e:	e7eb      	b.n	5c68 <pinmap_pad_sercom+0x14>
    5c90:	0000edc0 	.word	0x0000edc0
    5c94:	0000ed3c 	.word	0x0000ed3c

00005c98 <pinmap_peripheral_sercom>:
    5c98:	b570      	push	{r4, r5, r6, lr}
    5c9a:	b086      	sub	sp, #24
    5c9c:	466a      	mov	r2, sp
    5c9e:	4b08      	ldr	r3, [pc, #32]	; (5cc0 <pinmap_peripheral_sercom+0x28>)
    5ca0:	4668      	mov	r0, sp
    5ca2:	cb70      	ldmia	r3!, {r4, r5, r6}
    5ca4:	c270      	stmia	r2!, {r4, r5, r6}
    5ca6:	cb70      	ldmia	r3!, {r4, r5, r6}
    5ca8:	c270      	stmia	r2!, {r4, r5, r6}
    5caa:	230f      	movs	r3, #15
    5cac:	4019      	ands	r1, r3
    5cae:	2905      	cmp	r1, #5
    5cb0:	d903      	bls.n	5cba <pinmap_peripheral_sercom+0x22>
    5cb2:	2001      	movs	r0, #1
    5cb4:	4240      	negs	r0, r0
    5cb6:	b006      	add	sp, #24
    5cb8:	bd70      	pop	{r4, r5, r6, pc}
    5cba:	0089      	lsls	r1, r1, #2
    5cbc:	5808      	ldr	r0, [r1, r0]
    5cbe:	e7fa      	b.n	5cb6 <pinmap_peripheral_sercom+0x1e>
    5cc0:	0000f098 	.word	0x0000f098

00005cc4 <us_ticker_irq_handler_internal>:
    5cc4:	2203      	movs	r2, #3
    5cc6:	b508      	push	{r3, lr}
    5cc8:	4b02      	ldr	r3, [pc, #8]	; (5cd4 <us_ticker_irq_handler_internal+0x10>)
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	739a      	strb	r2, [r3, #14]
    5cce:	f000 fc83 	bl	65d8 <us_ticker_irq_handler>
    5cd2:	bd08      	pop	{r3, pc}
    5cd4:	20004434 	.word	0x20004434

00005cd8 <us_ticker_init.part.5>:
    5cd8:	b530      	push	{r4, r5, lr}
    5cda:	2501      	movs	r5, #1
    5cdc:	4b35      	ldr	r3, [pc, #212]	; (5db4 <us_ticker_init.part.5+0xdc>)
    5cde:	4c36      	ldr	r4, [pc, #216]	; (5db8 <us_ticker_init.part.5+0xe0>)
    5ce0:	601d      	str	r5, [r3, #0]
    5ce2:	7823      	ldrb	r3, [r4, #0]
    5ce4:	b08f      	sub	sp, #60	; 0x3c
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d05c      	beq.n	5da4 <us_ticker_init.part.5+0xcc>
    5cea:	2300      	movs	r3, #0
    5cec:	2200      	movs	r2, #0
    5cee:	ac01      	add	r4, sp, #4
    5cf0:	7422      	strb	r2, [r4, #16]
    5cf2:	6163      	str	r3, [r4, #20]
    5cf4:	61a3      	str	r3, [r4, #24]
    5cf6:	7722      	strb	r2, [r4, #28]
    5cf8:	6223      	str	r3, [r4, #32]
    5cfa:	6263      	str	r3, [r4, #36]	; 0x24
    5cfc:	2000      	movs	r0, #0
    5cfe:	7023      	strb	r3, [r4, #0]
    5d00:	70a3      	strb	r3, [r4, #2]
    5d02:	80a3      	strh	r3, [r4, #4]
    5d04:	71a2      	strb	r2, [r4, #6]
    5d06:	8123      	strh	r3, [r4, #8]
    5d08:	7062      	strb	r2, [r4, #1]
    5d0a:	72a2      	strb	r2, [r4, #10]
    5d0c:	72e2      	strb	r2, [r4, #11]
    5d0e:	7322      	strb	r2, [r4, #12]
    5d10:	73a2      	strb	r2, [r4, #14]
    5d12:	7362      	strb	r2, [r4, #13]
    5d14:	8523      	strh	r3, [r4, #40]	; 0x28
    5d16:	8563      	strh	r3, [r4, #42]	; 0x2a
    5d18:	85a3      	strh	r3, [r4, #44]	; 0x2c
    5d1a:	f7fe fb6f 	bl	43fc <system_gclk_gen_get_hz>
    5d1e:	4927      	ldr	r1, [pc, #156]	; (5dbc <us_ticker_init.part.5+0xe4>)
    5d20:	f000 fec8 	bl	6ab4 <__aeabi_uidiv>
    5d24:	2800      	cmp	r0, #0
    5d26:	d032      	beq.n	5d8e <us_ticker_init.part.5+0xb6>
    5d28:	2300      	movs	r3, #0
    5d2a:	2801      	cmp	r0, #1
    5d2c:	d007      	beq.n	5d3e <us_ticker_init.part.5+0x66>
    5d2e:	0840      	lsrs	r0, r0, #1
    5d30:	3301      	adds	r3, #1
    5d32:	2801      	cmp	r0, #1
    5d34:	d022      	beq.n	5d7c <us_ticker_init.part.5+0xa4>
    5d36:	2b0b      	cmp	r3, #11
    5d38:	d1f9      	bne.n	5d2e <us_ticker_init.part.5+0x56>
    5d3a:	23e0      	movs	r3, #224	; 0xe0
    5d3c:	00db      	lsls	r3, r3, #3
    5d3e:	80a3      	strh	r3, [r4, #4]
    5d40:	2308      	movs	r3, #8
    5d42:	70a3      	strb	r3, [r4, #2]
    5d44:	3b07      	subs	r3, #7
    5d46:	7063      	strb	r3, [r4, #1]
    5d48:	2300      	movs	r3, #0
    5d4a:	4d1d      	ldr	r5, [pc, #116]	; (5dc0 <us_ticker_init.part.5+0xe8>)
    5d4c:	62a3      	str	r3, [r4, #40]	; 0x28
    5d4e:	491d      	ldr	r1, [pc, #116]	; (5dc4 <us_ticker_init.part.5+0xec>)
    5d50:	3b01      	subs	r3, #1
    5d52:	1c22      	adds	r2, r4, #0
    5d54:	1c28      	adds	r0, r5, #0
    5d56:	62e3      	str	r3, [r4, #44]	; 0x2c
    5d58:	f000 fcd2 	bl	6700 <tc_init>
    5d5c:	491a      	ldr	r1, [pc, #104]	; (5dc8 <us_ticker_init.part.5+0xf0>)
    5d5e:	2202      	movs	r2, #2
    5d60:	1c28      	adds	r0, r5, #0
    5d62:	f000 fc51 	bl	6608 <tc_register_callback>
    5d66:	217f      	movs	r1, #127	; 0x7f
    5d68:	682a      	ldr	r2, [r5, #0]
    5d6a:	7bd3      	ldrb	r3, [r2, #15]
    5d6c:	438b      	bics	r3, r1
    5d6e:	d1fc      	bne.n	5d6a <us_ticker_init.part.5+0x92>
    5d70:	8811      	ldrh	r1, [r2, #0]
    5d72:	3302      	adds	r3, #2
    5d74:	430b      	orrs	r3, r1
    5d76:	8013      	strh	r3, [r2, #0]
    5d78:	b00f      	add	sp, #60	; 0x3c
    5d7a:	bd30      	pop	{r4, r5, pc}
    5d7c:	2b08      	cmp	r3, #8
    5d7e:	d8dc      	bhi.n	5d3a <us_ticker_init.part.5+0x62>
    5d80:	2b06      	cmp	r3, #6
    5d82:	d813      	bhi.n	5dac <us_ticker_init.part.5+0xd4>
    5d84:	2b04      	cmp	r3, #4
    5d86:	d908      	bls.n	5d9a <us_ticker_init.part.5+0xc2>
    5d88:	23a0      	movs	r3, #160	; 0xa0
    5d8a:	00db      	lsls	r3, r3, #3
    5d8c:	e7d7      	b.n	5d3e <us_ticker_init.part.5+0x66>
    5d8e:	480f      	ldr	r0, [pc, #60]	; (5dcc <us_ticker_init.part.5+0xf4>)
    5d90:	490f      	ldr	r1, [pc, #60]	; (5dd0 <us_ticker_init.part.5+0xf8>)
    5d92:	2257      	movs	r2, #87	; 0x57
    5d94:	f7ff faf8 	bl	5388 <mbed_assert_internal>
    5d98:	2300      	movs	r3, #0
    5d9a:	22e0      	movs	r2, #224	; 0xe0
    5d9c:	021b      	lsls	r3, r3, #8
    5d9e:	00d2      	lsls	r2, r2, #3
    5da0:	4013      	ands	r3, r2
    5da2:	e7cc      	b.n	5d3e <us_ticker_init.part.5+0x66>
    5da4:	f7fe fbda 	bl	455c <system_init>
    5da8:	7025      	strb	r5, [r4, #0]
    5daa:	e79e      	b.n	5cea <us_ticker_init.part.5+0x12>
    5dac:	23c0      	movs	r3, #192	; 0xc0
    5dae:	00db      	lsls	r3, r3, #3
    5db0:	e7c5      	b.n	5d3e <us_ticker_init.part.5+0x66>
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	2000438c 	.word	0x2000438c
    5db8:	20004240 	.word	0x20004240
    5dbc:	000f4240 	.word	0x000f4240
    5dc0:	20004434 	.word	0x20004434
    5dc4:	42003000 	.word	0x42003000
    5dc8:	00005cc5 	.word	0x00005cc5
    5dcc:	0000f0b0 	.word	0x0000f0b0
    5dd0:	0000f0c4 	.word	0x0000f0c4

00005dd4 <us_ticker_init>:
    5dd4:	b508      	push	{r3, lr}
    5dd6:	4b03      	ldr	r3, [pc, #12]	; (5de4 <us_ticker_init+0x10>)
    5dd8:	681b      	ldr	r3, [r3, #0]
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d101      	bne.n	5de2 <us_ticker_init+0xe>
    5dde:	f7ff ff7b 	bl	5cd8 <us_ticker_init.part.5>
    5de2:	bd08      	pop	{r3, pc}
    5de4:	2000438c 	.word	0x2000438c

00005de8 <us_ticker_read>:
    5de8:	b508      	push	{r3, lr}
    5dea:	4b05      	ldr	r3, [pc, #20]	; (5e00 <us_ticker_read+0x18>)
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	2b00      	cmp	r3, #0
    5df0:	d101      	bne.n	5df6 <us_ticker_read+0xe>
    5df2:	f7ff ff71 	bl	5cd8 <us_ticker_init.part.5>
    5df6:	4803      	ldr	r0, [pc, #12]	; (5e04 <us_ticker_read+0x1c>)
    5df8:	f000 fdd4 	bl	69a4 <tc_get_count_value>
    5dfc:	bd08      	pop	{r3, pc}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	2000438c 	.word	0x2000438c
    5e04:	20004434 	.word	0x20004434

00005e08 <us_ticker_set_interrupt>:
    5e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e0a:	1c06      	adds	r6, r0, #0
    5e0c:	f7ff ffec 	bl	5de8 <us_ticker_read>
    5e10:	1a30      	subs	r0, r6, r0
    5e12:	d421      	bmi.n	5e58 <us_ticker_set_interrupt+0x50>
    5e14:	2780      	movs	r7, #128	; 0x80
    5e16:	2380      	movs	r3, #128	; 0x80
    5e18:	4d11      	ldr	r5, [pc, #68]	; (5e60 <us_ticker_set_interrupt+0x58>)
    5e1a:	033f      	lsls	r7, r7, #12
    5e1c:	50ef      	str	r7, [r5, r3]
    5e1e:	4911      	ldr	r1, [pc, #68]	; (5e64 <us_ticker_set_interrupt+0x5c>)
    5e20:	2013      	movs	r0, #19
    5e22:	f7fd ff51 	bl	3cc8 <NVIC_SetVector>
    5e26:	4c10      	ldr	r4, [pc, #64]	; (5e68 <us_ticker_set_interrupt+0x60>)
    5e28:	6820      	ldr	r0, [r4, #0]
    5e2a:	f000 fc49 	bl	66c0 <_tc_get_inst_index>
    5e2e:	221f      	movs	r2, #31
    5e30:	4b0e      	ldr	r3, [pc, #56]	; (5e6c <us_ticker_set_interrupt+0x64>)
    5e32:	2100      	movs	r1, #0
    5e34:	5c1b      	ldrb	r3, [r3, r0]
    5e36:	1c20      	adds	r0, r4, #0
    5e38:	4013      	ands	r3, r2
    5e3a:	3a1e      	subs	r2, #30
    5e3c:	409a      	lsls	r2, r3
    5e3e:	2310      	movs	r3, #16
    5e40:	602a      	str	r2, [r5, #0]
    5e42:	7e62      	ldrb	r2, [r4, #25]
    5e44:	4313      	orrs	r3, r2
    5e46:	7663      	strb	r3, [r4, #25]
    5e48:	2310      	movs	r3, #16
    5e4a:	6822      	ldr	r2, [r4, #0]
    5e4c:	7353      	strb	r3, [r2, #13]
    5e4e:	1c32      	adds	r2, r6, #0
    5e50:	f000 fdbe 	bl	69d0 <tc_set_compare_value>
    5e54:	602f      	str	r7, [r5, #0]
    5e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e58:	f000 fbbe 	bl	65d8 <us_ticker_irq_handler>
    5e5c:	e7fb      	b.n	5e56 <us_ticker_set_interrupt+0x4e>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	e000e100 	.word	0xe000e100
    5e64:	000066a9 	.word	0x000066a9
    5e68:	20004434 	.word	0x20004434
    5e6c:	0000f134 	.word	0x0000f134

00005e70 <us_ticker_disable_interrupt>:
    5e70:	2110      	movs	r1, #16
    5e72:	4b06      	ldr	r3, [pc, #24]	; (5e8c <us_ticker_disable_interrupt+0x1c>)
    5e74:	681a      	ldr	r2, [r3, #0]
    5e76:	7311      	strb	r1, [r2, #12]
    5e78:	7e5a      	ldrb	r2, [r3, #25]
    5e7a:	438a      	bics	r2, r1
    5e7c:	2180      	movs	r1, #128	; 0x80
    5e7e:	765a      	strb	r2, [r3, #25]
    5e80:	2380      	movs	r3, #128	; 0x80
    5e82:	4a03      	ldr	r2, [pc, #12]	; (5e90 <us_ticker_disable_interrupt+0x20>)
    5e84:	0309      	lsls	r1, r1, #12
    5e86:	50d1      	str	r1, [r2, r3]
    5e88:	4770      	bx	lr
    5e8a:	46c0      	nop			; (mov r8, r8)
    5e8c:	20004434 	.word	0x20004434
    5e90:	e000e100 	.word	0xe000e100

00005e94 <us_ticker_clear_interrupt>:
    5e94:	2210      	movs	r2, #16
    5e96:	4b05      	ldr	r3, [pc, #20]	; (5eac <us_ticker_clear_interrupt+0x18>)
    5e98:	2180      	movs	r1, #128	; 0x80
    5e9a:	681b      	ldr	r3, [r3, #0]
    5e9c:	0309      	lsls	r1, r1, #12
    5e9e:	739a      	strb	r2, [r3, #14]
    5ea0:	731a      	strb	r2, [r3, #12]
    5ea2:	23c0      	movs	r3, #192	; 0xc0
    5ea4:	4a02      	ldr	r2, [pc, #8]	; (5eb0 <us_ticker_clear_interrupt+0x1c>)
    5ea6:	005b      	lsls	r3, r3, #1
    5ea8:	50d1      	str	r1, [r2, r3]
    5eaa:	4770      	bx	lr
    5eac:	20004434 	.word	0x20004434
    5eb0:	e000e100 	.word	0xe000e100

00005eb4 <spi_find_mux_settings>:
    5eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eb6:	1e04      	subs	r4, r0, #0
    5eb8:	d03e      	beq.n	5f38 <spi_find_mux_settings+0x84>
    5eba:	6820      	ldr	r0, [r4, #0]
    5ebc:	f7ff fbe4 	bl	5688 <_sercom_get_sercom_inst_index>
    5ec0:	7923      	ldrb	r3, [r4, #4]
    5ec2:	1c07      	adds	r7, r0, #0
    5ec4:	2b01      	cmp	r3, #1
    5ec6:	d02a      	beq.n	5f1e <spi_find_mux_settings+0x6a>
    5ec8:	2501      	movs	r5, #1
    5eca:	2300      	movs	r3, #0
    5ecc:	2005      	movs	r0, #5
    5ece:	18e3      	adds	r3, r4, r3
    5ed0:	5618      	ldrsb	r0, [r3, r0]
    5ed2:	1c43      	adds	r3, r0, #1
    5ed4:	d00f      	beq.n	5ef6 <spi_find_mux_settings+0x42>
    5ed6:	1c39      	adds	r1, r7, #0
    5ed8:	f7ff febc 	bl	5c54 <pinmap_pad_sercom>
    5edc:	1c43      	adds	r3, r0, #1
    5ede:	d00a      	beq.n	5ef6 <spi_find_mux_settings+0x42>
    5ee0:	26c0      	movs	r6, #192	; 0xc0
    5ee2:	0500      	lsls	r0, r0, #20
    5ee4:	03b6      	lsls	r6, r6, #14
    5ee6:	4006      	ands	r6, r0
    5ee8:	2005      	movs	r0, #5
    5eea:	1965      	adds	r5, r4, r5
    5eec:	5628      	ldrsb	r0, [r5, r0]
    5eee:	1c43      	adds	r3, r0, #1
    5ef0:	d107      	bne.n	5f02 <spi_find_mux_settings+0x4e>
    5ef2:	1c30      	adds	r0, r6, #0
    5ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ef6:	2005      	movs	r0, #5
    5ef8:	1965      	adds	r5, r4, r5
    5efa:	5628      	ldrsb	r0, [r5, r0]
    5efc:	2600      	movs	r6, #0
    5efe:	1c43      	adds	r3, r0, #1
    5f00:	d0f7      	beq.n	5ef2 <spi_find_mux_settings+0x3e>
    5f02:	1c39      	adds	r1, r7, #0
    5f04:	f7ff fea6 	bl	5c54 <pinmap_pad_sercom>
    5f08:	1c43      	adds	r3, r0, #1
    5f0a:	d0f2      	beq.n	5ef2 <spi_find_mux_settings+0x3e>
    5f0c:	2800      	cmp	r0, #0
    5f0e:	d009      	beq.n	5f24 <spi_find_mux_settings+0x70>
    5f10:	23c0      	movs	r3, #192	; 0xc0
    5f12:	3801      	subs	r0, #1
    5f14:	0400      	lsls	r0, r0, #16
    5f16:	029b      	lsls	r3, r3, #10
    5f18:	4018      	ands	r0, r3
    5f1a:	4306      	orrs	r6, r0
    5f1c:	e7e9      	b.n	5ef2 <spi_find_mux_settings+0x3e>
    5f1e:	2500      	movs	r5, #0
    5f20:	2301      	movs	r3, #1
    5f22:	e7d3      	b.n	5ecc <spi_find_mux_settings+0x18>
    5f24:	2007      	movs	r0, #7
    5f26:	1c39      	adds	r1, r7, #0
    5f28:	5620      	ldrsb	r0, [r4, r0]
    5f2a:	f7ff fe93 	bl	5c54 <pinmap_pad_sercom>
    5f2e:	2803      	cmp	r0, #3
    5f30:	d008      	beq.n	5f44 <spi_find_mux_settings+0x90>
    5f32:	2000      	movs	r0, #0
    5f34:	4306      	orrs	r6, r0
    5f36:	e7dc      	b.n	5ef2 <spi_find_mux_settings+0x3e>
    5f38:	4804      	ldr	r0, [pc, #16]	; (5f4c <spi_find_mux_settings+0x98>)
    5f3a:	4905      	ldr	r1, [pc, #20]	; (5f50 <spi_find_mux_settings+0x9c>)
    5f3c:	22b1      	movs	r2, #177	; 0xb1
    5f3e:	f7ff fa23 	bl	5388 <mbed_assert_internal>
    5f42:	e7ba      	b.n	5eba <spi_find_mux_settings+0x6>
    5f44:	20c0      	movs	r0, #192	; 0xc0
    5f46:	0280      	lsls	r0, r0, #10
    5f48:	4306      	orrs	r6, r0
    5f4a:	e7d2      	b.n	5ef2 <spi_find_mux_settings+0x3e>
    5f4c:	0000e8b8 	.word	0x0000e8b8
    5f50:	0000f138 	.word	0x0000f138

00005f54 <spi_init>:
    5f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f56:	4644      	mov	r4, r8
    5f58:	465f      	mov	r7, fp
    5f5a:	464d      	mov	r5, r9
    5f5c:	4656      	mov	r6, sl
    5f5e:	b4f0      	push	{r4, r5, r6, r7}
    5f60:	b085      	sub	sp, #20
    5f62:	4698      	mov	r8, r3
    5f64:	ab0e      	add	r3, sp, #56	; 0x38
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	1c04      	adds	r4, r0, #0
    5f6a:	b25b      	sxtb	r3, r3
    5f6c:	1c0d      	adds	r5, r1, #0
    5f6e:	4693      	mov	fp, r2
    5f70:	9300      	str	r3, [sp, #0]
    5f72:	2800      	cmp	r0, #0
    5f74:	d100      	bne.n	5f78 <spi_init+0x24>
    5f76:	e0c8      	b.n	610a <spi_init+0x1b6>
    5f78:	4643      	mov	r3, r8
    5f7a:	3301      	adds	r3, #1
    5f7c:	d100      	bne.n	5f80 <spi_init+0x2c>
    5f7e:	e0b8      	b.n	60f2 <spi_init+0x19e>
    5f80:	2300      	movs	r3, #0
    5f82:	4e6a      	ldr	r6, [pc, #424]	; (612c <spi_init+0x1d8>)
    5f84:	aa02      	add	r2, sp, #8
    5f86:	8053      	strh	r3, [r2, #2]
    5f88:	7833      	ldrb	r3, [r6, #0]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d032      	beq.n	5ff4 <spi_init+0xa0>
    5f8e:	4659      	mov	r1, fp
    5f90:	4642      	mov	r2, r8
    5f92:	9b00      	ldr	r3, [sp, #0]
    5f94:	1c28      	adds	r0, r5, #0
    5f96:	f7ff fdf9 	bl	5b8c <pinmap_find_sercom>
    5f9a:	4681      	mov	r9, r0
    5f9c:	2001      	movs	r0, #1
    5f9e:	4649      	mov	r1, r9
    5fa0:	4240      	negs	r0, r0
    5fa2:	f7ff fe79 	bl	5c98 <pinmap_peripheral_sercom>
    5fa6:	6020      	str	r0, [r4, #0]
    5fa8:	2c00      	cmp	r4, #0
    5faa:	d100      	bne.n	5fae <spi_init+0x5a>
    5fac:	e0a7      	b.n	60fe <spi_init+0x1aa>
    5fae:	4f60      	ldr	r7, [pc, #384]	; (6130 <spi_init+0x1dc>)
    5fb0:	4e60      	ldr	r6, [pc, #384]	; (6134 <spi_init+0x1e0>)
    5fb2:	e003      	b.n	5fbc <spi_init+0x68>
    5fb4:	6822      	ldr	r2, [r4, #0]
    5fb6:	8b53      	ldrh	r3, [r2, #26]
    5fb8:	0bdb      	lsrs	r3, r3, #15
    5fba:	d00a      	beq.n	5fd2 <spi_init+0x7e>
    5fbc:	2c00      	cmp	r4, #0
    5fbe:	d1f9      	bne.n	5fb4 <spi_init+0x60>
    5fc0:	2244      	movs	r2, #68	; 0x44
    5fc2:	1c38      	adds	r0, r7, #0
    5fc4:	1c31      	adds	r1, r6, #0
    5fc6:	f7ff f9df 	bl	5388 <mbed_assert_internal>
    5fca:	6822      	ldr	r2, [r4, #0]
    5fcc:	8b53      	ldrh	r3, [r2, #26]
    5fce:	0bdb      	lsrs	r3, r3, #15
    5fd0:	d1f4      	bne.n	5fbc <spi_init+0x68>
    5fd2:	2102      	movs	r1, #2
    5fd4:	6813      	ldr	r3, [r2, #0]
    5fd6:	438b      	bics	r3, r1
    5fd8:	6013      	str	r3, [r2, #0]
    5fda:	6823      	ldr	r3, [r4, #0]
    5fdc:	681e      	ldr	r6, [r3, #0]
    5fde:	2301      	movs	r3, #1
    5fe0:	469a      	mov	sl, r3
    5fe2:	401e      	ands	r6, r3
    5fe4:	d00b      	beq.n	5ffe <spi_init+0xaa>
    5fe6:	b005      	add	sp, #20
    5fe8:	bc3c      	pop	{r2, r3, r4, r5}
    5fea:	4690      	mov	r8, r2
    5fec:	4699      	mov	r9, r3
    5fee:	46a2      	mov	sl, r4
    5ff0:	46ab      	mov	fp, r5
    5ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ff4:	f7fe fab2 	bl	455c <system_init>
    5ff8:	2301      	movs	r3, #1
    5ffa:	7033      	strb	r3, [r6, #0]
    5ffc:	e7c7      	b.n	5f8e <spi_init+0x3a>
    5ffe:	464b      	mov	r3, r9
    6000:	4650      	mov	r0, sl
    6002:	3302      	adds	r3, #2
    6004:	4098      	lsls	r0, r3
    6006:	1c03      	adds	r3, r0, #0
    6008:	494b      	ldr	r1, [pc, #300]	; (6138 <spi_init+0x1e4>)
    600a:	6a0a      	ldr	r2, [r1, #32]
    600c:	4313      	orrs	r3, r2
    600e:	620b      	str	r3, [r1, #32]
    6010:	ab02      	add	r3, sp, #8
    6012:	701e      	strb	r6, [r3, #0]
    6014:	464b      	mov	r3, r9
    6016:	3314      	adds	r3, #20
    6018:	b2db      	uxtb	r3, r3
    601a:	1c1f      	adds	r7, r3, #0
    601c:	1c18      	adds	r0, r3, #0
    601e:	a902      	add	r1, sp, #8
    6020:	9301      	str	r3, [sp, #4]
    6022:	f7fe fa65 	bl	44f0 <system_gclk_chan_set_config>
    6026:	1c38      	adds	r0, r7, #0
    6028:	f7fe fa24 	bl	4474 <system_gclk_chan_enable>
    602c:	2100      	movs	r1, #0
    602e:	2000      	movs	r0, #0
    6030:	f7ff fb0a 	bl	5648 <sercom_set_gclk_generator>
    6034:	230c      	movs	r3, #12
    6036:	6822      	ldr	r2, [r4, #0]
    6038:	af03      	add	r7, sp, #12
    603a:	6811      	ldr	r1, [r2, #0]
    603c:	430b      	orrs	r3, r1
    603e:	6013      	str	r3, [r2, #0]
    6040:	4653      	mov	r3, sl
    6042:	7123      	strb	r3, [r4, #4]
    6044:	2380      	movs	r3, #128	; 0x80
    6046:	703b      	strb	r3, [r7, #0]
    6048:	4653      	mov	r3, sl
    604a:	70bb      	strb	r3, [r7, #2]
    604c:	465b      	mov	r3, fp
    604e:	71a3      	strb	r3, [r4, #6]
    6050:	4643      	mov	r3, r8
    6052:	71e3      	strb	r3, [r4, #7]
    6054:	466b      	mov	r3, sp
    6056:	781b      	ldrb	r3, [r3, #0]
    6058:	7165      	strb	r5, [r4, #5]
    605a:	7223      	strb	r3, [r4, #8]
    605c:	2309      	movs	r3, #9
    605e:	4698      	mov	r8, r3
    6060:	b26d      	sxtb	r5, r5
    6062:	707e      	strb	r6, [r7, #1]
    6064:	70fe      	strb	r6, [r7, #3]
    6066:	44a0      	add	r8, r4
    6068:	1da6      	adds	r6, r4, #6
    606a:	1c6b      	adds	r3, r5, #1
    606c:	d00b      	beq.n	6086 <spi_init+0x132>
    606e:	1c28      	adds	r0, r5, #0
    6070:	4649      	mov	r1, r9
    6072:	f7ff fdcb 	bl	5c0c <pinmap_function_sercom>
    6076:	b2c0      	uxtb	r0, r0
    6078:	7038      	strb	r0, [r7, #0]
    607a:	28ff      	cmp	r0, #255	; 0xff
    607c:	d003      	beq.n	6086 <spi_init+0x132>
    607e:	b2e8      	uxtb	r0, r5
    6080:	1c39      	adds	r1, r7, #0
    6082:	f7fe f92b 	bl	42dc <system_pinmux_pin_set_config>
    6086:	4546      	cmp	r6, r8
    6088:	d006      	beq.n	6098 <spi_init+0x144>
    608a:	7835      	ldrb	r5, [r6, #0]
    608c:	3601      	adds	r6, #1
    608e:	b26d      	sxtb	r5, r5
    6090:	1c6b      	adds	r3, r5, #1
    6092:	d1ec      	bne.n	606e <spi_init+0x11a>
    6094:	4546      	cmp	r6, r8
    6096:	d1f8      	bne.n	608a <spi_init+0x136>
    6098:	9801      	ldr	r0, [sp, #4]
    609a:	f7fe fa49 	bl	4530 <system_gclk_chan_get_hz>
    609e:	ab02      	add	r3, sp, #8
    60a0:	1c01      	adds	r1, r0, #0
    60a2:	1c9a      	adds	r2, r3, #2
    60a4:	4825      	ldr	r0, [pc, #148]	; (613c <spi_init+0x1e8>)
    60a6:	f7ff f9f3 	bl	5490 <_sercom_get_sync_baud_val>
    60aa:	2800      	cmp	r0, #0
    60ac:	d19b      	bne.n	5fe6 <spi_init+0x92>
    60ae:	ab02      	add	r3, sp, #8
    60b0:	789b      	ldrb	r3, [r3, #2]
    60b2:	6822      	ldr	r2, [r4, #0]
    60b4:	1c20      	adds	r0, r4, #0
    60b6:	7313      	strb	r3, [r2, #12]
    60b8:	f7ff fefc 	bl	5eb4 <spi_find_mux_settings>
    60bc:	2180      	movs	r1, #128	; 0x80
    60be:	6822      	ldr	r2, [r4, #0]
    60c0:	0289      	lsls	r1, r1, #10
    60c2:	6813      	ldr	r3, [r2, #0]
    60c4:	4318      	orrs	r0, r3
    60c6:	6010      	str	r0, [r2, #0]
    60c8:	6822      	ldr	r2, [r4, #0]
    60ca:	6853      	ldr	r3, [r2, #4]
    60cc:	430b      	orrs	r3, r1
    60ce:	6053      	str	r3, [r2, #4]
    60d0:	2c00      	cmp	r4, #0
    60d2:	d025      	beq.n	6120 <spi_init+0x1cc>
    60d4:	4e16      	ldr	r6, [pc, #88]	; (6130 <spi_init+0x1dc>)
    60d6:	4d17      	ldr	r5, [pc, #92]	; (6134 <spi_init+0x1e0>)
    60d8:	e003      	b.n	60e2 <spi_init+0x18e>
    60da:	6822      	ldr	r2, [r4, #0]
    60dc:	8b53      	ldrh	r3, [r2, #26]
    60de:	0bdb      	lsrs	r3, r3, #15
    60e0:	d019      	beq.n	6116 <spi_init+0x1c2>
    60e2:	2c00      	cmp	r4, #0
    60e4:	d1f9      	bne.n	60da <spi_init+0x186>
    60e6:	1c30      	adds	r0, r6, #0
    60e8:	1c29      	adds	r1, r5, #0
    60ea:	2244      	movs	r2, #68	; 0x44
    60ec:	f7ff f94c 	bl	5388 <mbed_assert_internal>
    60f0:	e7f3      	b.n	60da <spi_init+0x186>
    60f2:	4813      	ldr	r0, [pc, #76]	; (6140 <spi_init+0x1ec>)
    60f4:	490f      	ldr	r1, [pc, #60]	; (6134 <spi_init+0x1e0>)
    60f6:	22f5      	movs	r2, #245	; 0xf5
    60f8:	f7ff f946 	bl	5388 <mbed_assert_internal>
    60fc:	e740      	b.n	5f80 <spi_init+0x2c>
    60fe:	480c      	ldr	r0, [pc, #48]	; (6130 <spi_init+0x1dc>)
    6100:	490c      	ldr	r1, [pc, #48]	; (6134 <spi_init+0x1e0>)
    6102:	225e      	movs	r2, #94	; 0x5e
    6104:	f7ff f940 	bl	5388 <mbed_assert_internal>
    6108:	e751      	b.n	5fae <spi_init+0x5a>
    610a:	4809      	ldr	r0, [pc, #36]	; (6130 <spi_init+0x1dc>)
    610c:	4909      	ldr	r1, [pc, #36]	; (6134 <spi_init+0x1e0>)
    610e:	22f4      	movs	r2, #244	; 0xf4
    6110:	f7ff f93a 	bl	5388 <mbed_assert_internal>
    6114:	e730      	b.n	5f78 <spi_init+0x24>
    6116:	6811      	ldr	r1, [r2, #0]
    6118:	3302      	adds	r3, #2
    611a:	430b      	orrs	r3, r1
    611c:	6013      	str	r3, [r2, #0]
    611e:	e762      	b.n	5fe6 <spi_init+0x92>
    6120:	4803      	ldr	r0, [pc, #12]	; (6130 <spi_init+0x1dc>)
    6122:	4904      	ldr	r1, [pc, #16]	; (6134 <spi_init+0x1e0>)
    6124:	2252      	movs	r2, #82	; 0x52
    6126:	f7ff f92f 	bl	5388 <mbed_assert_internal>
    612a:	e7d3      	b.n	60d4 <spi_init+0x180>
    612c:	20004240 	.word	0x20004240
    6130:	0000e8b8 	.word	0x0000e8b8
    6134:	0000f138 	.word	0x0000f138
    6138:	40000400 	.word	0x40000400
    613c:	000186a0 	.word	0x000186a0
    6140:	0000f1a0 	.word	0x0000f1a0

00006144 <spi_format>:
    6144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6146:	464f      	mov	r7, r9
    6148:	4646      	mov	r6, r8
    614a:	1c04      	adds	r4, r0, #0
    614c:	b4c0      	push	{r6, r7}
    614e:	4688      	mov	r8, r1
    6150:	1c15      	adds	r5, r2, #0
    6152:	4699      	mov	r9, r3
    6154:	2800      	cmp	r0, #0
    6156:	d100      	bne.n	615a <spi_format+0x16>
    6158:	e08a      	b.n	6270 <spi_format+0x12c>
    615a:	4f4f      	ldr	r7, [pc, #316]	; (6298 <spi_format+0x154>)
    615c:	4e4f      	ldr	r6, [pc, #316]	; (629c <spi_format+0x158>)
    615e:	e006      	b.n	616e <spi_format+0x2a>
    6160:	6822      	ldr	r2, [r4, #0]
    6162:	8b53      	ldrh	r3, [r2, #26]
    6164:	0bdb      	lsrs	r3, r3, #15
    6166:	03db      	lsls	r3, r3, #15
    6168:	b29b      	uxth	r3, r3
    616a:	2b00      	cmp	r3, #0
    616c:	d00d      	beq.n	618a <spi_format+0x46>
    616e:	2c00      	cmp	r4, #0
    6170:	d1f6      	bne.n	6160 <spi_format+0x1c>
    6172:	2244      	movs	r2, #68	; 0x44
    6174:	1c38      	adds	r0, r7, #0
    6176:	1c31      	adds	r1, r6, #0
    6178:	f7ff f906 	bl	5388 <mbed_assert_internal>
    617c:	6822      	ldr	r2, [r4, #0]
    617e:	8b53      	ldrh	r3, [r2, #26]
    6180:	0bdb      	lsrs	r3, r3, #15
    6182:	03db      	lsls	r3, r3, #15
    6184:	b29b      	uxth	r3, r3
    6186:	2b00      	cmp	r3, #0
    6188:	d1f1      	bne.n	616e <spi_format+0x2a>
    618a:	2002      	movs	r0, #2
    618c:	6811      	ldr	r1, [r2, #0]
    618e:	4381      	bics	r1, r0
    6190:	6011      	str	r1, [r2, #0]
    6192:	464a      	mov	r2, r9
    6194:	2a00      	cmp	r2, #0
    6196:	d060      	beq.n	625a <spi_format+0x116>
    6198:	211c      	movs	r1, #28
    619a:	6820      	ldr	r0, [r4, #0]
    619c:	6802      	ldr	r2, [r0, #0]
    619e:	438a      	bics	r2, r1
    61a0:	3914      	subs	r1, #20
    61a2:	430a      	orrs	r2, r1
    61a4:	6002      	str	r2, [r0, #0]
    61a6:	6822      	ldr	r2, [r4, #0]
    61a8:	7123      	strb	r3, [r4, #4]
    61aa:	6851      	ldr	r1, [r2, #4]
    61ac:	3340      	adds	r3, #64	; 0x40
    61ae:	430b      	orrs	r3, r1
    61b0:	6053      	str	r3, [r2, #4]
    61b2:	2300      	movs	r3, #0
    61b4:	4699      	mov	r9, r3
    61b6:	1c27      	adds	r7, r4, #0
    61b8:	1d66      	adds	r6, r4, #5
    61ba:	3709      	adds	r7, #9
    61bc:	2000      	movs	r0, #0
    61be:	5630      	ldrsb	r0, [r6, r0]
    61c0:	1c43      	adds	r3, r0, #1
    61c2:	d002      	beq.n	61ca <spi_format+0x86>
    61c4:	4649      	mov	r1, r9
    61c6:	f7ff fc11 	bl	59ec <pin_mode>
    61ca:	3601      	adds	r6, #1
    61cc:	42be      	cmp	r6, r7
    61ce:	d1f5      	bne.n	61bc <spi_format+0x78>
    61d0:	6823      	ldr	r3, [r4, #0]
    61d2:	1c20      	adds	r0, r4, #0
    61d4:	681e      	ldr	r6, [r3, #0]
    61d6:	4b32      	ldr	r3, [pc, #200]	; (62a0 <spi_format+0x15c>)
    61d8:	401e      	ands	r6, r3
    61da:	f7ff fe6b 	bl	5eb4 <spi_find_mux_settings>
    61de:	4642      	mov	r2, r8
    61e0:	6823      	ldr	r3, [r4, #0]
    61e2:	4306      	orrs	r6, r0
    61e4:	601e      	str	r6, [r3, #0]
    61e6:	6821      	ldr	r1, [r4, #0]
    61e8:	2301      	movs	r3, #1
    61ea:	2a08      	cmp	r2, #8
    61ec:	dc00      	bgt.n	61f0 <spi_format+0xac>
    61ee:	2300      	movs	r3, #0
    61f0:	2007      	movs	r0, #7
    61f2:	684a      	ldr	r2, [r1, #4]
    61f4:	4003      	ands	r3, r0
    61f6:	4382      	bics	r2, r0
    61f8:	4313      	orrs	r3, r2
    61fa:	604b      	str	r3, [r1, #4]
    61fc:	2301      	movs	r3, #1
    61fe:	1c1a      	adds	r2, r3, #0
    6200:	6820      	ldr	r0, [r4, #0]
    6202:	402a      	ands	r2, r5
    6204:	6806      	ldr	r6, [r0, #0]
    6206:	0711      	lsls	r1, r2, #28
    6208:	4a26      	ldr	r2, [pc, #152]	; (62a4 <spi_format+0x160>)
    620a:	086d      	lsrs	r5, r5, #1
    620c:	4032      	ands	r2, r6
    620e:	430a      	orrs	r2, r1
    6210:	6002      	str	r2, [r0, #0]
    6212:	6821      	ldr	r1, [r4, #0]
    6214:	401d      	ands	r5, r3
    6216:	076b      	lsls	r3, r5, #29
    6218:	4a23      	ldr	r2, [pc, #140]	; (62a8 <spi_format+0x164>)
    621a:	680d      	ldr	r5, [r1, #0]
    621c:	4015      	ands	r5, r2
    621e:	431d      	orrs	r5, r3
    6220:	600d      	str	r5, [r1, #0]
    6222:	2c00      	cmp	r4, #0
    6224:	d032      	beq.n	628c <spi_format+0x148>
    6226:	4e1c      	ldr	r6, [pc, #112]	; (6298 <spi_format+0x154>)
    6228:	4d1c      	ldr	r5, [pc, #112]	; (629c <spi_format+0x158>)
    622a:	e003      	b.n	6234 <spi_format+0xf0>
    622c:	6822      	ldr	r2, [r4, #0]
    622e:	8b53      	ldrh	r3, [r2, #26]
    6230:	0bdb      	lsrs	r3, r3, #15
    6232:	d00a      	beq.n	624a <spi_format+0x106>
    6234:	2c00      	cmp	r4, #0
    6236:	d1f9      	bne.n	622c <spi_format+0xe8>
    6238:	2244      	movs	r2, #68	; 0x44
    623a:	1c30      	adds	r0, r6, #0
    623c:	1c29      	adds	r1, r5, #0
    623e:	f7ff f8a3 	bl	5388 <mbed_assert_internal>
    6242:	6822      	ldr	r2, [r4, #0]
    6244:	8b53      	ldrh	r3, [r2, #26]
    6246:	0bdb      	lsrs	r3, r3, #15
    6248:	d1f4      	bne.n	6234 <spi_format+0xf0>
    624a:	6811      	ldr	r1, [r2, #0]
    624c:	3302      	adds	r3, #2
    624e:	430b      	orrs	r3, r1
    6250:	6013      	str	r3, [r2, #0]
    6252:	bc0c      	pop	{r2, r3}
    6254:	4690      	mov	r8, r2
    6256:	4699      	mov	r9, r3
    6258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    625a:	221c      	movs	r2, #28
    625c:	6821      	ldr	r1, [r4, #0]
    625e:	680b      	ldr	r3, [r1, #0]
    6260:	4393      	bics	r3, r2
    6262:	3a10      	subs	r2, #16
    6264:	4313      	orrs	r3, r2
    6266:	600b      	str	r3, [r1, #0]
    6268:	2301      	movs	r3, #1
    626a:	7123      	strb	r3, [r4, #4]
    626c:	4699      	mov	r9, r3
    626e:	e7a2      	b.n	61b6 <spi_format+0x72>
    6270:	2296      	movs	r2, #150	; 0x96
    6272:	4f09      	ldr	r7, [pc, #36]	; (6298 <spi_format+0x154>)
    6274:	4e09      	ldr	r6, [pc, #36]	; (629c <spi_format+0x158>)
    6276:	1c38      	adds	r0, r7, #0
    6278:	1c31      	adds	r1, r6, #0
    627a:	32ff      	adds	r2, #255	; 0xff
    627c:	f7ff f884 	bl	5388 <mbed_assert_internal>
    6280:	1c38      	adds	r0, r7, #0
    6282:	1c31      	adds	r1, r6, #0
    6284:	225e      	movs	r2, #94	; 0x5e
    6286:	f7ff f87f 	bl	5388 <mbed_assert_internal>
    628a:	e766      	b.n	615a <spi_format+0x16>
    628c:	4802      	ldr	r0, [pc, #8]	; (6298 <spi_format+0x154>)
    628e:	4903      	ldr	r1, [pc, #12]	; (629c <spi_format+0x158>)
    6290:	2252      	movs	r2, #82	; 0x52
    6292:	f7ff f879 	bl	5388 <mbed_assert_internal>
    6296:	e7c6      	b.n	6226 <spi_format+0xe2>
    6298:	0000e8b8 	.word	0x0000e8b8
    629c:	0000f138 	.word	0x0000f138
    62a0:	ffccffff 	.word	0xffccffff
    62a4:	efffffff 	.word	0xefffffff
    62a8:	dfffffff 	.word	0xdfffffff

000062ac <spi_frequency>:
    62ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ae:	b083      	sub	sp, #12
    62b0:	2300      	movs	r3, #0
    62b2:	466a      	mov	r2, sp
    62b4:	1c04      	adds	r4, r0, #0
    62b6:	1c0d      	adds	r5, r1, #0
    62b8:	80d3      	strh	r3, [r2, #6]
    62ba:	2800      	cmp	r0, #0
    62bc:	d053      	beq.n	6366 <spi_frequency+0xba>
    62be:	4f37      	ldr	r7, [pc, #220]	; (639c <spi_frequency+0xf0>)
    62c0:	4e37      	ldr	r6, [pc, #220]	; (63a0 <spi_frequency+0xf4>)
    62c2:	e003      	b.n	62cc <spi_frequency+0x20>
    62c4:	6822      	ldr	r2, [r4, #0]
    62c6:	8b53      	ldrh	r3, [r2, #26]
    62c8:	0bdb      	lsrs	r3, r3, #15
    62ca:	d00a      	beq.n	62e2 <spi_frequency+0x36>
    62cc:	2c00      	cmp	r4, #0
    62ce:	d1f9      	bne.n	62c4 <spi_frequency+0x18>
    62d0:	2244      	movs	r2, #68	; 0x44
    62d2:	1c38      	adds	r0, r7, #0
    62d4:	1c31      	adds	r1, r6, #0
    62d6:	f7ff f857 	bl	5388 <mbed_assert_internal>
    62da:	6822      	ldr	r2, [r4, #0]
    62dc:	8b53      	ldrh	r3, [r2, #26]
    62de:	0bdb      	lsrs	r3, r3, #15
    62e0:	d1f4      	bne.n	62cc <spi_frequency+0x20>
    62e2:	2102      	movs	r1, #2
    62e4:	6813      	ldr	r3, [r2, #0]
    62e6:	438b      	bics	r3, r1
    62e8:	6013      	str	r3, [r2, #0]
    62ea:	6820      	ldr	r0, [r4, #0]
    62ec:	f7ff f9cc 	bl	5688 <_sercom_get_sercom_inst_index>
    62f0:	3014      	adds	r0, #20
    62f2:	b2c0      	uxtb	r0, r0
    62f4:	f7fe f91c 	bl	4530 <system_gclk_chan_get_hz>
    62f8:	466b      	mov	r3, sp
    62fa:	1c01      	adds	r1, r0, #0
    62fc:	1d9a      	adds	r2, r3, #6
    62fe:	1c28      	adds	r0, r5, #0
    6300:	f7ff f8c6 	bl	5490 <_sercom_get_sync_baud_val>
    6304:	2800      	cmp	r0, #0
    6306:	d11d      	bne.n	6344 <spi_frequency+0x98>
    6308:	466b      	mov	r3, sp
    630a:	6822      	ldr	r2, [r4, #0]
    630c:	799b      	ldrb	r3, [r3, #6]
    630e:	7313      	strb	r3, [r2, #12]
    6310:	2c00      	cmp	r4, #0
    6312:	d036      	beq.n	6382 <spi_frequency+0xd6>
    6314:	4e21      	ldr	r6, [pc, #132]	; (639c <spi_frequency+0xf0>)
    6316:	4d22      	ldr	r5, [pc, #136]	; (63a0 <spi_frequency+0xf4>)
    6318:	e003      	b.n	6322 <spi_frequency+0x76>
    631a:	6822      	ldr	r2, [r4, #0]
    631c:	8b53      	ldrh	r3, [r2, #26]
    631e:	0bdb      	lsrs	r3, r3, #15
    6320:	d00a      	beq.n	6338 <spi_frequency+0x8c>
    6322:	2c00      	cmp	r4, #0
    6324:	d1f9      	bne.n	631a <spi_frequency+0x6e>
    6326:	2244      	movs	r2, #68	; 0x44
    6328:	1c30      	adds	r0, r6, #0
    632a:	1c29      	adds	r1, r5, #0
    632c:	f7ff f82c 	bl	5388 <mbed_assert_internal>
    6330:	6822      	ldr	r2, [r4, #0]
    6332:	8b53      	ldrh	r3, [r2, #26]
    6334:	0bdb      	lsrs	r3, r3, #15
    6336:	d1f4      	bne.n	6322 <spi_frequency+0x76>
    6338:	6811      	ldr	r1, [r2, #0]
    633a:	3302      	adds	r3, #2
    633c:	430b      	orrs	r3, r1
    633e:	6013      	str	r3, [r2, #0]
    6340:	b003      	add	sp, #12
    6342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6344:	2c00      	cmp	r4, #0
    6346:	d022      	beq.n	638e <spi_frequency+0xe2>
    6348:	4e14      	ldr	r6, [pc, #80]	; (639c <spi_frequency+0xf0>)
    634a:	4d15      	ldr	r5, [pc, #84]	; (63a0 <spi_frequency+0xf4>)
    634c:	e003      	b.n	6356 <spi_frequency+0xaa>
    634e:	6822      	ldr	r2, [r4, #0]
    6350:	8b53      	ldrh	r3, [r2, #26]
    6352:	0bdb      	lsrs	r3, r3, #15
    6354:	d0f0      	beq.n	6338 <spi_frequency+0x8c>
    6356:	2c00      	cmp	r4, #0
    6358:	d1f9      	bne.n	634e <spi_frequency+0xa2>
    635a:	1c30      	adds	r0, r6, #0
    635c:	1c29      	adds	r1, r5, #0
    635e:	2244      	movs	r2, #68	; 0x44
    6360:	f7ff f812 	bl	5388 <mbed_assert_internal>
    6364:	e7f3      	b.n	634e <spi_frequency+0xa2>
    6366:	22d0      	movs	r2, #208	; 0xd0
    6368:	4f0c      	ldr	r7, [pc, #48]	; (639c <spi_frequency+0xf0>)
    636a:	4e0d      	ldr	r6, [pc, #52]	; (63a0 <spi_frequency+0xf4>)
    636c:	1c38      	adds	r0, r7, #0
    636e:	1c31      	adds	r1, r6, #0
    6370:	32ff      	adds	r2, #255	; 0xff
    6372:	f7ff f809 	bl	5388 <mbed_assert_internal>
    6376:	1c38      	adds	r0, r7, #0
    6378:	1c31      	adds	r1, r6, #0
    637a:	225e      	movs	r2, #94	; 0x5e
    637c:	f7ff f804 	bl	5388 <mbed_assert_internal>
    6380:	e79d      	b.n	62be <spi_frequency+0x12>
    6382:	4806      	ldr	r0, [pc, #24]	; (639c <spi_frequency+0xf0>)
    6384:	4906      	ldr	r1, [pc, #24]	; (63a0 <spi_frequency+0xf4>)
    6386:	2252      	movs	r2, #82	; 0x52
    6388:	f7fe fffe 	bl	5388 <mbed_assert_internal>
    638c:	e7c2      	b.n	6314 <spi_frequency+0x68>
    638e:	4803      	ldr	r0, [pc, #12]	; (639c <spi_frequency+0xf0>)
    6390:	4903      	ldr	r1, [pc, #12]	; (63a0 <spi_frequency+0xf4>)
    6392:	2252      	movs	r2, #82	; 0x52
    6394:	f7fe fff8 	bl	5388 <mbed_assert_internal>
    6398:	e7d6      	b.n	6348 <spi_frequency+0x9c>
    639a:	46c0      	nop			; (mov r8, r8)
    639c:	0000e8b8 	.word	0x0000e8b8
    63a0:	0000f138 	.word	0x0000f138

000063a4 <spi_master_write>:
    63a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63a6:	4647      	mov	r7, r8
    63a8:	1c04      	adds	r4, r0, #0
    63aa:	b480      	push	{r7}
    63ac:	1c0e      	adds	r6, r1, #0
    63ae:	2800      	cmp	r0, #0
    63b0:	d052      	beq.n	6458 <spi_master_write+0xb4>
    63b2:	7a63      	ldrb	r3, [r4, #9]
    63b4:	2b05      	cmp	r3, #5
    63b6:	d045      	beq.n	6444 <spi_master_write+0xa0>
    63b8:	4b3a      	ldr	r3, [pc, #232]	; (64a4 <spi_master_write+0x100>)
    63ba:	4f3b      	ldr	r7, [pc, #236]	; (64a8 <spi_master_write+0x104>)
    63bc:	4698      	mov	r8, r3
    63be:	2501      	movs	r5, #1
    63c0:	e003      	b.n	63ca <spi_master_write+0x26>
    63c2:	6823      	ldr	r3, [r4, #0]
    63c4:	7e1a      	ldrb	r2, [r3, #24]
    63c6:	4215      	tst	r5, r2
    63c8:	d10a      	bne.n	63e0 <spi_master_write+0x3c>
    63ca:	2c00      	cmp	r4, #0
    63cc:	d1f9      	bne.n	63c2 <spi_master_write+0x1e>
    63ce:	2273      	movs	r2, #115	; 0x73
    63d0:	4640      	mov	r0, r8
    63d2:	1c39      	adds	r1, r7, #0
    63d4:	f7fe ffd8 	bl	5388 <mbed_assert_internal>
    63d8:	6823      	ldr	r3, [r4, #0]
    63da:	7e1a      	ldrb	r2, [r3, #24]
    63dc:	4215      	tst	r5, r2
    63de:	d0f4      	beq.n	63ca <spi_master_write+0x26>
    63e0:	2c00      	cmp	r4, #0
    63e2:	d043      	beq.n	646c <spi_master_write+0xc8>
    63e4:	7e1a      	ldrb	r2, [r3, #24]
    63e6:	07d2      	lsls	r2, r2, #31
    63e8:	d503      	bpl.n	63f2 <spi_master_write+0x4e>
    63ea:	05f6      	lsls	r6, r6, #23
    63ec:	0df6      	lsrs	r6, r6, #23
    63ee:	629e      	str	r6, [r3, #40]	; 0x28
    63f0:	6823      	ldr	r3, [r4, #0]
    63f2:	685b      	ldr	r3, [r3, #4]
    63f4:	039b      	lsls	r3, r3, #14
    63f6:	d525      	bpl.n	6444 <spi_master_write+0xa0>
    63f8:	4f2a      	ldr	r7, [pc, #168]	; (64a4 <spi_master_write+0x100>)
    63fa:	4e2b      	ldr	r6, [pc, #172]	; (64a8 <spi_master_write+0x104>)
    63fc:	2504      	movs	r5, #4
    63fe:	e003      	b.n	6408 <spi_master_write+0x64>
    6400:	6823      	ldr	r3, [r4, #0]
    6402:	7e1a      	ldrb	r2, [r3, #24]
    6404:	4215      	tst	r5, r2
    6406:	d10a      	bne.n	641e <spi_master_write+0x7a>
    6408:	2c00      	cmp	r4, #0
    640a:	d1f9      	bne.n	6400 <spi_master_write+0x5c>
    640c:	227c      	movs	r2, #124	; 0x7c
    640e:	1c38      	adds	r0, r7, #0
    6410:	1c31      	adds	r1, r6, #0
    6412:	f7fe ffb9 	bl	5388 <mbed_assert_internal>
    6416:	6823      	ldr	r3, [r4, #0]
    6418:	7e1a      	ldrb	r2, [r3, #24]
    641a:	4215      	tst	r5, r2
    641c:	d0f4      	beq.n	6408 <spi_master_write+0x64>
    641e:	2c00      	cmp	r4, #0
    6420:	d032      	beq.n	6488 <spi_master_write+0xe4>
    6422:	2204      	movs	r2, #4
    6424:	7e19      	ldrb	r1, [r3, #24]
    6426:	2000      	movs	r0, #0
    6428:	420a      	tst	r2, r1
    642a:	d00c      	beq.n	6446 <spi_master_write+0xa2>
    642c:	8b59      	ldrh	r1, [r3, #26]
    642e:	420a      	tst	r2, r1
    6430:	d10c      	bne.n	644c <spi_master_write+0xa8>
    6432:	2107      	movs	r1, #7
    6434:	685a      	ldr	r2, [r3, #4]
    6436:	400a      	ands	r2, r1
    6438:	2a01      	cmp	r2, #1
    643a:	d013      	beq.n	6464 <spi_master_write+0xc0>
    643c:	20ff      	movs	r0, #255	; 0xff
    643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6440:	4018      	ands	r0, r3
    6442:	e000      	b.n	6446 <spi_master_write+0xa2>
    6444:	2000      	movs	r0, #0
    6446:	bc04      	pop	{r2}
    6448:	4690      	mov	r8, r2
    644a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    644c:	8b59      	ldrh	r1, [r3, #26]
    644e:	430a      	orrs	r2, r1
    6450:	b292      	uxth	r2, r2
    6452:	835a      	strh	r2, [r3, #26]
    6454:	6823      	ldr	r3, [r4, #0]
    6456:	e7ec      	b.n	6432 <spi_master_write+0x8e>
    6458:	4812      	ldr	r0, [pc, #72]	; (64a4 <spi_master_write+0x100>)
    645a:	4913      	ldr	r1, [pc, #76]	; (64a8 <spi_master_write+0x104>)
    645c:	4a13      	ldr	r2, [pc, #76]	; (64ac <spi_master_write+0x108>)
    645e:	f7fe ff93 	bl	5388 <mbed_assert_internal>
    6462:	e7a6      	b.n	63b2 <spi_master_write+0xe>
    6464:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6466:	05c0      	lsls	r0, r0, #23
    6468:	0dc0      	lsrs	r0, r0, #23
    646a:	e7ec      	b.n	6446 <spi_master_write+0xa2>
    646c:	4f0d      	ldr	r7, [pc, #52]	; (64a4 <spi_master_write+0x100>)
    646e:	4d0e      	ldr	r5, [pc, #56]	; (64a8 <spi_master_write+0x104>)
    6470:	1c38      	adds	r0, r7, #0
    6472:	1c29      	adds	r1, r5, #0
    6474:	2285      	movs	r2, #133	; 0x85
    6476:	f7fe ff87 	bl	5388 <mbed_assert_internal>
    647a:	1c38      	adds	r0, r7, #0
    647c:	1c29      	adds	r1, r5, #0
    647e:	2273      	movs	r2, #115	; 0x73
    6480:	f7fe ff82 	bl	5388 <mbed_assert_internal>
    6484:	6823      	ldr	r3, [r4, #0]
    6486:	e7ad      	b.n	63e4 <spi_master_write+0x40>
    6488:	4e06      	ldr	r6, [pc, #24]	; (64a4 <spi_master_write+0x100>)
    648a:	4d07      	ldr	r5, [pc, #28]	; (64a8 <spi_master_write+0x104>)
    648c:	1c30      	adds	r0, r6, #0
    648e:	1c29      	adds	r1, r5, #0
    6490:	2296      	movs	r2, #150	; 0x96
    6492:	f7fe ff79 	bl	5388 <mbed_assert_internal>
    6496:	1c30      	adds	r0, r6, #0
    6498:	1c29      	adds	r1, r5, #0
    649a:	227c      	movs	r2, #124	; 0x7c
    649c:	f7fe ff74 	bl	5388 <mbed_assert_internal>
    64a0:	6823      	ldr	r3, [r4, #0]
    64a2:	e7be      	b.n	6422 <spi_master_write+0x7e>
    64a4:	0000e8b8 	.word	0x0000e8b8
    64a8:	0000f138 	.word	0x0000f138
    64ac:	00000212 	.word	0x00000212

000064b0 <_ZN4mbed8FileBaseD1Ev>:
    64b0:	4b0a      	ldr	r3, [pc, #40]	; (64dc <_ZN4mbed8FileBaseD1Ev+0x2c>)
    64b2:	3308      	adds	r3, #8
    64b4:	6003      	str	r3, [r0, #0]
    64b6:	6883      	ldr	r3, [r0, #8]
    64b8:	2b00      	cmp	r3, #0
    64ba:	d00a      	beq.n	64d2 <_ZN4mbed8FileBaseD1Ev+0x22>
    64bc:	4b08      	ldr	r3, [pc, #32]	; (64e0 <_ZN4mbed8FileBaseD1Ev+0x30>)
    64be:	681a      	ldr	r2, [r3, #0]
    64c0:	4282      	cmp	r2, r0
    64c2:	d101      	bne.n	64c8 <_ZN4mbed8FileBaseD1Ev+0x18>
    64c4:	e006      	b.n	64d4 <_ZN4mbed8FileBaseD1Ev+0x24>
    64c6:	1c1a      	adds	r2, r3, #0
    64c8:	6853      	ldr	r3, [r2, #4]
    64ca:	4283      	cmp	r3, r0
    64cc:	d1fb      	bne.n	64c6 <_ZN4mbed8FileBaseD1Ev+0x16>
    64ce:	6843      	ldr	r3, [r0, #4]
    64d0:	6053      	str	r3, [r2, #4]
    64d2:	4770      	bx	lr
    64d4:	6842      	ldr	r2, [r0, #4]
    64d6:	601a      	str	r2, [r3, #0]
    64d8:	e7fb      	b.n	64d2 <_ZN4mbed8FileBaseD1Ev+0x22>
    64da:	46c0      	nop			; (mov r8, r8)
    64dc:	0000f1b0 	.word	0x0000f1b0
    64e0:	20004390 	.word	0x20004390

000064e4 <_ZN4mbed8FileBaseD0Ev>:
    64e4:	4b0d      	ldr	r3, [pc, #52]	; (651c <_ZN4mbed8FileBaseD0Ev+0x38>)
    64e6:	b510      	push	{r4, lr}
    64e8:	3308      	adds	r3, #8
    64ea:	6003      	str	r3, [r0, #0]
    64ec:	6883      	ldr	r3, [r0, #8]
    64ee:	1c04      	adds	r4, r0, #0
    64f0:	2b00      	cmp	r3, #0
    64f2:	d00a      	beq.n	650a <_ZN4mbed8FileBaseD0Ev+0x26>
    64f4:	4b0a      	ldr	r3, [pc, #40]	; (6520 <_ZN4mbed8FileBaseD0Ev+0x3c>)
    64f6:	681a      	ldr	r2, [r3, #0]
    64f8:	4290      	cmp	r0, r2
    64fa:	d101      	bne.n	6500 <_ZN4mbed8FileBaseD0Ev+0x1c>
    64fc:	e00a      	b.n	6514 <_ZN4mbed8FileBaseD0Ev+0x30>
    64fe:	1c1a      	adds	r2, r3, #0
    6500:	6853      	ldr	r3, [r2, #4]
    6502:	429c      	cmp	r4, r3
    6504:	d1fb      	bne.n	64fe <_ZN4mbed8FileBaseD0Ev+0x1a>
    6506:	6863      	ldr	r3, [r4, #4]
    6508:	6053      	str	r3, [r2, #4]
    650a:	1c20      	adds	r0, r4, #0
    650c:	f000 fab5 	bl	6a7a <_ZdlPv>
    6510:	1c20      	adds	r0, r4, #0
    6512:	bd10      	pop	{r4, pc}
    6514:	6842      	ldr	r2, [r0, #4]
    6516:	601a      	str	r2, [r3, #0]
    6518:	e7f7      	b.n	650a <_ZN4mbed8FileBaseD0Ev+0x26>
    651a:	46c0      	nop			; (mov r8, r8)
    651c:	0000f1b0 	.word	0x0000f1b0
    6520:	20004390 	.word	0x20004390

00006524 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>:
    6524:	4b06      	ldr	r3, [pc, #24]	; (6540 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1c>)
    6526:	6081      	str	r1, [r0, #8]
    6528:	3308      	adds	r3, #8
    652a:	6003      	str	r3, [r0, #0]
    652c:	2300      	movs	r3, #0
    652e:	7302      	strb	r2, [r0, #12]
    6530:	6043      	str	r3, [r0, #4]
    6532:	2900      	cmp	r1, #0
    6534:	d003      	beq.n	653e <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x1a>
    6536:	4b03      	ldr	r3, [pc, #12]	; (6544 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE+0x20>)
    6538:	681a      	ldr	r2, [r3, #0]
    653a:	6018      	str	r0, [r3, #0]
    653c:	6042      	str	r2, [r0, #4]
    653e:	4770      	bx	lr
    6540:	0000f1b0 	.word	0x0000f1b0
    6544:	20004390 	.word	0x20004390

00006548 <_ZN4mbed8FileBase6lookupEPKcj>:
    6548:	4b0e      	ldr	r3, [pc, #56]	; (6584 <_ZN4mbed8FileBase6lookupEPKcj+0x3c>)
    654a:	b570      	push	{r4, r5, r6, lr}
    654c:	681c      	ldr	r4, [r3, #0]
    654e:	1c06      	adds	r6, r0, #0
    6550:	1c0d      	adds	r5, r1, #0
    6552:	2c00      	cmp	r4, #0
    6554:	d103      	bne.n	655e <_ZN4mbed8FileBase6lookupEPKcj+0x16>
    6556:	e012      	b.n	657e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    6558:	6864      	ldr	r4, [r4, #4]
    655a:	2c00      	cmp	r4, #0
    655c:	d00f      	beq.n	657e <_ZN4mbed8FileBase6lookupEPKcj+0x36>
    655e:	68a0      	ldr	r0, [r4, #8]
    6560:	2800      	cmp	r0, #0
    6562:	d0f9      	beq.n	6558 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6564:	1c31      	adds	r1, r6, #0
    6566:	1c2a      	adds	r2, r5, #0
    6568:	f004 fc55 	bl	ae16 <strncmp>
    656c:	2800      	cmp	r0, #0
    656e:	d1f3      	bne.n	6558 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    6570:	68a0      	ldr	r0, [r4, #8]
    6572:	f004 fc49 	bl	ae08 <strlen>
    6576:	42a8      	cmp	r0, r5
    6578:	d1ee      	bne.n	6558 <_ZN4mbed8FileBase6lookupEPKcj+0x10>
    657a:	1c20      	adds	r0, r4, #0
    657c:	e000      	b.n	6580 <_ZN4mbed8FileBase6lookupEPKcj+0x38>
    657e:	2000      	movs	r0, #0
    6580:	bd70      	pop	{r4, r5, r6, pc}
    6582:	46c0      	nop			; (mov r8, r8)
    6584:	20004390 	.word	0x20004390

00006588 <_ZN4mbed8FileBase11getPathTypeEv>:
    6588:	7b00      	ldrb	r0, [r0, #12]
    658a:	4770      	bx	lr

0000658c <_ZN4mbed8FileLikeC1EPKc>:
    658c:	4b07      	ldr	r3, [pc, #28]	; (65ac <_ZN4mbed8FileLikeC1EPKc+0x20>)
    658e:	b510      	push	{r4, lr}
    6590:	2200      	movs	r2, #0
    6592:	1c04      	adds	r4, r0, #0
    6594:	c008      	stmia	r0!, {r3}
    6596:	f7ff ffc5 	bl	6524 <_ZN4mbed8FileBaseC1EPKcNS_8PathTypeE>
    659a:	4b05      	ldr	r3, [pc, #20]	; (65b0 <_ZN4mbed8FileLikeC1EPKc+0x24>)
    659c:	1c20      	adds	r0, r4, #0
    659e:	1c1a      	adds	r2, r3, #0
    65a0:	3334      	adds	r3, #52	; 0x34
    65a2:	3208      	adds	r2, #8
    65a4:	6022      	str	r2, [r4, #0]
    65a6:	6063      	str	r3, [r4, #4]
    65a8:	bd10      	pop	{r4, pc}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	0000e878 	.word	0x0000e878
    65b0:	0000f1c0 	.word	0x0000f1c0

000065b4 <_ZN4mbed8FileLikeD1Ev>:
    65b4:	4b07      	ldr	r3, [pc, #28]	; (65d4 <_ZN4mbed8FileLikeD1Ev+0x20>)
    65b6:	b510      	push	{r4, lr}
    65b8:	1c1a      	adds	r2, r3, #0
    65ba:	1c04      	adds	r4, r0, #0
    65bc:	3208      	adds	r2, #8
    65be:	3334      	adds	r3, #52	; 0x34
    65c0:	6002      	str	r2, [r0, #0]
    65c2:	6043      	str	r3, [r0, #4]
    65c4:	3004      	adds	r0, #4
    65c6:	f7ff ff73 	bl	64b0 <_ZN4mbed8FileBaseD1Ev>
    65ca:	1c20      	adds	r0, r4, #0
    65cc:	f7fd fbc6 	bl	3d5c <_ZN4mbed10FileHandleD1Ev>
    65d0:	1c20      	adds	r0, r4, #0
    65d2:	bd10      	pop	{r4, pc}
    65d4:	0000f1c0 	.word	0x0000f1c0

000065d8 <us_ticker_irq_handler>:
    65d8:	b508      	push	{r3, lr}
    65da:	4802      	ldr	r0, [pc, #8]	; (65e4 <us_ticker_irq_handler+0xc>)
    65dc:	f000 fa20 	bl	6a20 <ticker_irq_handler>
    65e0:	bd08      	pop	{r3, pc}
    65e2:	46c0      	nop			; (mov r8, r8)
    65e4:	0000f210 	.word	0x0000f210

000065e8 <port_pin_set_config>:
    65e8:	2280      	movs	r2, #128	; 0x80
    65ea:	b500      	push	{lr}
    65ec:	b083      	sub	sp, #12
    65ee:	ab01      	add	r3, sp, #4
    65f0:	701a      	strb	r2, [r3, #0]
    65f2:	780a      	ldrb	r2, [r1, #0]
    65f4:	705a      	strb	r2, [r3, #1]
    65f6:	784a      	ldrb	r2, [r1, #1]
    65f8:	709a      	strb	r2, [r3, #2]
    65fa:	788a      	ldrb	r2, [r1, #2]
    65fc:	1c19      	adds	r1, r3, #0
    65fe:	70da      	strb	r2, [r3, #3]
    6600:	f7fd fe6c 	bl	42dc <system_pinmux_pin_set_config>
    6604:	b003      	add	sp, #12
    6606:	bd00      	pop	{pc}

00006608 <tc_register_callback>:
    6608:	1c93      	adds	r3, r2, #2
    660a:	009b      	lsls	r3, r3, #2
    660c:	5019      	str	r1, [r3, r0]
    660e:	2a02      	cmp	r2, #2
    6610:	d009      	beq.n	6626 <tc_register_callback+0x1e>
    6612:	2a03      	cmp	r2, #3
    6614:	d00c      	beq.n	6630 <tc_register_callback+0x28>
    6616:	2301      	movs	r3, #1
    6618:	4093      	lsls	r3, r2
    661a:	1c1a      	adds	r2, r3, #0
    661c:	7e03      	ldrb	r3, [r0, #24]
    661e:	431a      	orrs	r2, r3
    6620:	7602      	strb	r2, [r0, #24]
    6622:	2000      	movs	r0, #0
    6624:	4770      	bx	lr
    6626:	2310      	movs	r3, #16
    6628:	7e02      	ldrb	r2, [r0, #24]
    662a:	4313      	orrs	r3, r2
    662c:	7603      	strb	r3, [r0, #24]
    662e:	e7f8      	b.n	6622 <tc_register_callback+0x1a>
    6630:	2320      	movs	r3, #32
    6632:	7e02      	ldrb	r2, [r0, #24]
    6634:	4313      	orrs	r3, r2
    6636:	7603      	strb	r3, [r0, #24]
    6638:	e7f3      	b.n	6622 <tc_register_callback+0x1a>
    663a:	46c0      	nop			; (mov r8, r8)

0000663c <_tc_interrupt_handler>:
    663c:	b570      	push	{r4, r5, r6, lr}
    663e:	2601      	movs	r6, #1
    6640:	4b15      	ldr	r3, [pc, #84]	; (6698 <_tc_interrupt_handler+0x5c>)
    6642:	0080      	lsls	r0, r0, #2
    6644:	58c5      	ldr	r5, [r0, r3]
    6646:	682b      	ldr	r3, [r5, #0]
    6648:	7e2c      	ldrb	r4, [r5, #24]
    664a:	7b9b      	ldrb	r3, [r3, #14]
    664c:	401c      	ands	r4, r3
    664e:	7e6b      	ldrb	r3, [r5, #25]
    6650:	401c      	ands	r4, r3
    6652:	4226      	tst	r6, r4
    6654:	d11a      	bne.n	668c <_tc_interrupt_handler+0x50>
    6656:	2602      	movs	r6, #2
    6658:	4226      	tst	r6, r4
    665a:	d111      	bne.n	6680 <_tc_interrupt_handler+0x44>
    665c:	2610      	movs	r6, #16
    665e:	4226      	tst	r6, r4
    6660:	d108      	bne.n	6674 <_tc_interrupt_handler+0x38>
    6662:	2620      	movs	r6, #32
    6664:	4226      	tst	r6, r4
    6666:	d004      	beq.n	6672 <_tc_interrupt_handler+0x36>
    6668:	696b      	ldr	r3, [r5, #20]
    666a:	1c28      	adds	r0, r5, #0
    666c:	4798      	blx	r3
    666e:	682b      	ldr	r3, [r5, #0]
    6670:	739e      	strb	r6, [r3, #14]
    6672:	bd70      	pop	{r4, r5, r6, pc}
    6674:	692b      	ldr	r3, [r5, #16]
    6676:	1c28      	adds	r0, r5, #0
    6678:	4798      	blx	r3
    667a:	682b      	ldr	r3, [r5, #0]
    667c:	739e      	strb	r6, [r3, #14]
    667e:	e7f0      	b.n	6662 <_tc_interrupt_handler+0x26>
    6680:	68eb      	ldr	r3, [r5, #12]
    6682:	1c28      	adds	r0, r5, #0
    6684:	4798      	blx	r3
    6686:	682b      	ldr	r3, [r5, #0]
    6688:	739e      	strb	r6, [r3, #14]
    668a:	e7e7      	b.n	665c <_tc_interrupt_handler+0x20>
    668c:	68ab      	ldr	r3, [r5, #8]
    668e:	1c28      	adds	r0, r5, #0
    6690:	4798      	blx	r3
    6692:	682b      	ldr	r3, [r5, #0]
    6694:	739e      	strb	r6, [r3, #14]
    6696:	e7de      	b.n	6656 <_tc_interrupt_handler+0x1a>
    6698:	20004450 	.word	0x20004450

0000669c <TC3_Handler>:
    669c:	b508      	push	{r3, lr}
    669e:	2000      	movs	r0, #0
    66a0:	f7ff ffcc 	bl	663c <_tc_interrupt_handler>
    66a4:	bd08      	pop	{r3, pc}
    66a6:	46c0      	nop			; (mov r8, r8)

000066a8 <TC4_Handler>:
    66a8:	b508      	push	{r3, lr}
    66aa:	2001      	movs	r0, #1
    66ac:	f7ff ffc6 	bl	663c <_tc_interrupt_handler>
    66b0:	bd08      	pop	{r3, pc}
    66b2:	46c0      	nop			; (mov r8, r8)

000066b4 <TC5_Handler>:
    66b4:	b508      	push	{r3, lr}
    66b6:	2002      	movs	r0, #2
    66b8:	f7ff ffc0 	bl	663c <_tc_interrupt_handler>
    66bc:	bd08      	pop	{r3, pc}
    66be:	46c0      	nop			; (mov r8, r8)

000066c0 <_tc_get_inst_index>:
    66c0:	4b0e      	ldr	r3, [pc, #56]	; (66fc <_tc_get_inst_index+0x3c>)
    66c2:	1c01      	adds	r1, r0, #0
    66c4:	1c18      	adds	r0, r3, #0
    66c6:	b570      	push	{r4, r5, r6, lr}
    66c8:	b084      	sub	sp, #16
    66ca:	aa01      	add	r2, sp, #4
    66cc:	c870      	ldmia	r0!, {r4, r5, r6}
    66ce:	c270      	stmia	r2!, {r4, r5, r6}
    66d0:	9a01      	ldr	r2, [sp, #4]
    66d2:	428a      	cmp	r2, r1
    66d4:	d008      	beq.n	66e8 <_tc_get_inst_index+0x28>
    66d6:	685a      	ldr	r2, [r3, #4]
    66d8:	428a      	cmp	r2, r1
    66da:	d008      	beq.n	66ee <_tc_get_inst_index+0x2e>
    66dc:	689b      	ldr	r3, [r3, #8]
    66de:	2000      	movs	r0, #0
    66e0:	428b      	cmp	r3, r1
    66e2:	d007      	beq.n	66f4 <_tc_get_inst_index+0x34>
    66e4:	b004      	add	sp, #16
    66e6:	bd70      	pop	{r4, r5, r6, pc}
    66e8:	2000      	movs	r0, #0
    66ea:	b2c0      	uxtb	r0, r0
    66ec:	e7fa      	b.n	66e4 <_tc_get_inst_index+0x24>
    66ee:	2001      	movs	r0, #1
    66f0:	b2c0      	uxtb	r0, r0
    66f2:	e7f7      	b.n	66e4 <_tc_get_inst_index+0x24>
    66f4:	3002      	adds	r0, #2
    66f6:	b2c0      	uxtb	r0, r0
    66f8:	e7f4      	b.n	66e4 <_tc_get_inst_index+0x24>
    66fa:	46c0      	nop			; (mov r8, r8)
    66fc:	0000f218 	.word	0x0000f218

00006700 <tc_init>:
    6700:	b5f0      	push	{r4, r5, r6, r7, lr}
    6702:	4657      	mov	r7, sl
    6704:	464e      	mov	r6, r9
    6706:	4645      	mov	r5, r8
    6708:	4ca3      	ldr	r4, [pc, #652]	; (6998 <tc_init+0x298>)
    670a:	4691      	mov	r9, r2
    670c:	1c22      	adds	r2, r4, #0
    670e:	b4e0      	push	{r5, r6, r7}
    6710:	b086      	sub	sp, #24
    6712:	ab03      	add	r3, sp, #12
    6714:	1c05      	adds	r5, r0, #0
    6716:	1c0e      	adds	r6, r1, #0
    6718:	469a      	mov	sl, r3
    671a:	ca83      	ldmia	r2!, {r0, r1, r7}
    671c:	c383      	stmia	r3!, {r0, r1, r7}
    671e:	9b03      	ldr	r3, [sp, #12]
    6720:	429e      	cmp	r6, r3
    6722:	d100      	bne.n	6726 <tc_init+0x26>
    6724:	e10c      	b.n	6940 <tc_init+0x240>
    6726:	6863      	ldr	r3, [r4, #4]
    6728:	429e      	cmp	r6, r3
    672a:	d100      	bne.n	672e <tc_init+0x2e>
    672c:	e10b      	b.n	6946 <tc_init+0x246>
    672e:	2300      	movs	r3, #0
    6730:	4698      	mov	r8, r3
    6732:	68a3      	ldr	r3, [r4, #8]
    6734:	429e      	cmp	r6, r3
    6736:	d100      	bne.n	673a <tc_init+0x3a>
    6738:	e108      	b.n	694c <tc_init+0x24c>
    673a:	1c21      	adds	r1, r4, #0
    673c:	2203      	movs	r2, #3
    673e:	310c      	adds	r1, #12
    6740:	a801      	add	r0, sp, #4
    6742:	f002 fec8 	bl	94d6 <memcpy>
    6746:	1c21      	adds	r1, r4, #0
    6748:	2206      	movs	r2, #6
    674a:	3110      	adds	r1, #16
    674c:	4650      	mov	r0, sl
    674e:	f002 fec2 	bl	94d6 <memcpy>
    6752:	2300      	movs	r3, #0
    6754:	60ab      	str	r3, [r5, #8]
    6756:	60eb      	str	r3, [r5, #12]
    6758:	612b      	str	r3, [r5, #16]
    675a:	616b      	str	r3, [r5, #20]
    675c:	762b      	strb	r3, [r5, #24]
    675e:	766b      	strb	r3, [r5, #25]
    6760:	4643      	mov	r3, r8
    6762:	4a8e      	ldr	r2, [pc, #568]	; (699c <tc_init+0x29c>)
    6764:	009b      	lsls	r3, r3, #2
    6766:	509d      	str	r5, [r3, r2]
    6768:	464b      	mov	r3, r9
    676a:	602e      	str	r6, [r5, #0]
    676c:	789b      	ldrb	r3, [r3, #2]
    676e:	2b08      	cmp	r3, #8
    6770:	d00b      	beq.n	678a <tc_init+0x8a>
    6772:	712b      	strb	r3, [r5, #4]
    6774:	8833      	ldrh	r3, [r6, #0]
    6776:	2201      	movs	r2, #1
    6778:	2005      	movs	r0, #5
    677a:	07db      	lsls	r3, r3, #31
    677c:	d50a      	bpl.n	6794 <tc_init+0x94>
    677e:	b006      	add	sp, #24
    6780:	bc1c      	pop	{r2, r3, r4}
    6782:	4690      	mov	r8, r2
    6784:	4699      	mov	r9, r3
    6786:	46a2      	mov	sl, r4
    6788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    678a:	4642      	mov	r2, r8
    678c:	2017      	movs	r0, #23
    678e:	07d2      	lsls	r2, r2, #31
    6790:	d5f5      	bpl.n	677e <tc_init+0x7e>
    6792:	e7ee      	b.n	6772 <tc_init+0x72>
    6794:	7bf3      	ldrb	r3, [r6, #15]
    6796:	3017      	adds	r0, #23
    6798:	06db      	lsls	r3, r3, #27
    679a:	d4f0      	bmi.n	677e <tc_init+0x7e>
    679c:	2102      	movs	r1, #2
    679e:	8833      	ldrh	r3, [r6, #0]
    67a0:	400b      	ands	r3, r1
    67a2:	d1ec      	bne.n	677e <tc_init+0x7e>
    67a4:	4649      	mov	r1, r9
    67a6:	7c09      	ldrb	r1, [r1, #16]
    67a8:	2900      	cmp	r1, #0
    67aa:	d000      	beq.n	67ae <tc_init+0xae>
    67ac:	e0d1      	b.n	6952 <tc_init+0x252>
    67ae:	464b      	mov	r3, r9
    67b0:	7f1b      	ldrb	r3, [r3, #28]
    67b2:	2b00      	cmp	r3, #0
    67b4:	d000      	beq.n	67b8 <tc_init+0xb8>
    67b6:	e0d8      	b.n	696a <tc_init+0x26a>
    67b8:	4641      	mov	r1, r8
    67ba:	4650      	mov	r0, sl
    67bc:	4a78      	ldr	r2, [pc, #480]	; (69a0 <tc_init+0x2a0>)
    67be:	0049      	lsls	r1, r1, #1
    67c0:	6a13      	ldr	r3, [r2, #32]
    67c2:	5a41      	ldrh	r1, [r0, r1]
    67c4:	430b      	orrs	r3, r1
    67c6:	6213      	str	r3, [r2, #32]
    67c8:	464b      	mov	r3, r9
    67ca:	789b      	ldrb	r3, [r3, #2]
    67cc:	2b08      	cmp	r3, #8
    67ce:	d100      	bne.n	67d2 <tc_init+0xd2>
    67d0:	e0da      	b.n	6988 <tc_init+0x288>
    67d2:	464b      	mov	r3, r9
    67d4:	466a      	mov	r2, sp
    67d6:	781b      	ldrb	r3, [r3, #0]
    67d8:	4669      	mov	r1, sp
    67da:	7013      	strb	r3, [r2, #0]
    67dc:	466b      	mov	r3, sp
    67de:	4642      	mov	r2, r8
    67e0:	3304      	adds	r3, #4
    67e2:	5c9c      	ldrb	r4, [r3, r2]
    67e4:	1c20      	adds	r0, r4, #0
    67e6:	f7fd fe83 	bl	44f0 <system_gclk_chan_set_config>
    67ea:	1c20      	adds	r0, r4, #0
    67ec:	f7fd fe42 	bl	4474 <system_gclk_chan_enable>
    67f0:	464b      	mov	r3, r9
    67f2:	464a      	mov	r2, r9
    67f4:	8898      	ldrh	r0, [r3, #4]
    67f6:	891b      	ldrh	r3, [r3, #8]
    67f8:	4303      	orrs	r3, r0
    67fa:	7990      	ldrb	r0, [r2, #6]
    67fc:	7892      	ldrb	r2, [r2, #2]
    67fe:	4310      	orrs	r0, r2
    6800:	4318      	orrs	r0, r3
    6802:	464b      	mov	r3, r9
    6804:	785b      	ldrb	r3, [r3, #1]
    6806:	2b00      	cmp	r3, #0
    6808:	d002      	beq.n	6810 <tc_init+0x110>
    680a:	2380      	movs	r3, #128	; 0x80
    680c:	011b      	lsls	r3, r3, #4
    680e:	4318      	orrs	r0, r3
    6810:	227f      	movs	r2, #127	; 0x7f
    6812:	6829      	ldr	r1, [r5, #0]
    6814:	7bcb      	ldrb	r3, [r1, #15]
    6816:	4393      	bics	r3, r2
    6818:	d1fc      	bne.n	6814 <tc_init+0x114>
    681a:	464b      	mov	r3, r9
    681c:	8030      	strh	r0, [r6, #0]
    681e:	7b58      	ldrb	r0, [r3, #13]
    6820:	1e43      	subs	r3, r0, #1
    6822:	4198      	sbcs	r0, r3
    6824:	464b      	mov	r3, r9
    6826:	7b9b      	ldrb	r3, [r3, #14]
    6828:	0080      	lsls	r0, r0, #2
    682a:	2b00      	cmp	r3, #0
    682c:	d001      	beq.n	6832 <tc_init+0x132>
    682e:	2301      	movs	r3, #1
    6830:	4318      	orrs	r0, r3
    6832:	227f      	movs	r2, #127	; 0x7f
    6834:	6829      	ldr	r1, [r5, #0]
    6836:	7bcb      	ldrb	r3, [r1, #15]
    6838:	4393      	bics	r3, r2
    683a:	d1fc      	bne.n	6836 <tc_init+0x136>
    683c:	33ff      	adds	r3, #255	; 0xff
    683e:	7133      	strb	r3, [r6, #4]
    6840:	2800      	cmp	r0, #0
    6842:	d005      	beq.n	6850 <tc_init+0x150>
    6844:	227f      	movs	r2, #127	; 0x7f
    6846:	6829      	ldr	r1, [r5, #0]
    6848:	7bcb      	ldrb	r3, [r1, #15]
    684a:	4393      	bics	r3, r2
    684c:	d1fc      	bne.n	6848 <tc_init+0x148>
    684e:	7170      	strb	r0, [r6, #5]
    6850:	464b      	mov	r3, r9
    6852:	7a98      	ldrb	r0, [r3, #10]
    6854:	7adb      	ldrb	r3, [r3, #11]
    6856:	2b00      	cmp	r3, #0
    6858:	d001      	beq.n	685e <tc_init+0x15e>
    685a:	2310      	movs	r3, #16
    685c:	4318      	orrs	r0, r3
    685e:	464b      	mov	r3, r9
    6860:	7b1b      	ldrb	r3, [r3, #12]
    6862:	2b00      	cmp	r3, #0
    6864:	d001      	beq.n	686a <tc_init+0x16a>
    6866:	2320      	movs	r3, #32
    6868:	4318      	orrs	r0, r3
    686a:	227f      	movs	r2, #127	; 0x7f
    686c:	6829      	ldr	r1, [r5, #0]
    686e:	7bcb      	ldrb	r3, [r1, #15]
    6870:	4393      	bics	r3, r2
    6872:	d1fc      	bne.n	686e <tc_init+0x16e>
    6874:	217f      	movs	r1, #127	; 0x7f
    6876:	71b0      	strb	r0, [r6, #6]
    6878:	682a      	ldr	r2, [r5, #0]
    687a:	7bd3      	ldrb	r3, [r2, #15]
    687c:	438b      	bics	r3, r1
    687e:	d1fc      	bne.n	687a <tc_init+0x17a>
    6880:	792b      	ldrb	r3, [r5, #4]
    6882:	217f      	movs	r1, #127	; 0x7f
    6884:	2b04      	cmp	r3, #4
    6886:	d007      	beq.n	6898 <tc_init+0x198>
    6888:	217f      	movs	r1, #127	; 0x7f
    688a:	2b08      	cmp	r3, #8
    688c:	d040      	beq.n	6910 <tc_init+0x210>
    688e:	217f      	movs	r1, #127	; 0x7f
    6890:	2b00      	cmp	r3, #0
    6892:	d025      	beq.n	68e0 <tc_init+0x1e0>
    6894:	2017      	movs	r0, #23
    6896:	e772      	b.n	677e <tc_init+0x7e>
    6898:	7bd3      	ldrb	r3, [r2, #15]
    689a:	438b      	bics	r3, r1
    689c:	d1fc      	bne.n	6898 <tc_init+0x198>
    689e:	464a      	mov	r2, r9
    68a0:	3328      	adds	r3, #40	; 0x28
    68a2:	5cd3      	ldrb	r3, [r2, r3]
    68a4:	227f      	movs	r2, #127	; 0x7f
    68a6:	7433      	strb	r3, [r6, #16]
    68a8:	6829      	ldr	r1, [r5, #0]
    68aa:	7bcb      	ldrb	r3, [r1, #15]
    68ac:	4393      	bics	r3, r2
    68ae:	d1fc      	bne.n	68aa <tc_init+0x1aa>
    68b0:	464a      	mov	r2, r9
    68b2:	3329      	adds	r3, #41	; 0x29
    68b4:	5cd3      	ldrb	r3, [r2, r3]
    68b6:	227f      	movs	r2, #127	; 0x7f
    68b8:	7533      	strb	r3, [r6, #20]
    68ba:	6829      	ldr	r1, [r5, #0]
    68bc:	7bcb      	ldrb	r3, [r1, #15]
    68be:	4393      	bics	r3, r2
    68c0:	d1fc      	bne.n	68bc <tc_init+0x1bc>
    68c2:	464a      	mov	r2, r9
    68c4:	332a      	adds	r3, #42	; 0x2a
    68c6:	5cd3      	ldrb	r3, [r2, r3]
    68c8:	227f      	movs	r2, #127	; 0x7f
    68ca:	7633      	strb	r3, [r6, #24]
    68cc:	6829      	ldr	r1, [r5, #0]
    68ce:	7bcb      	ldrb	r3, [r1, #15]
    68d0:	4393      	bics	r3, r2
    68d2:	d1fc      	bne.n	68ce <tc_init+0x1ce>
    68d4:	464a      	mov	r2, r9
    68d6:	332b      	adds	r3, #43	; 0x2b
    68d8:	5cd3      	ldrb	r3, [r2, r3]
    68da:	2000      	movs	r0, #0
    68dc:	7673      	strb	r3, [r6, #25]
    68de:	e74e      	b.n	677e <tc_init+0x7e>
    68e0:	7bd3      	ldrb	r3, [r2, #15]
    68e2:	438b      	bics	r3, r1
    68e4:	d1fc      	bne.n	68e0 <tc_init+0x1e0>
    68e6:	464b      	mov	r3, r9
    68e8:	227f      	movs	r2, #127	; 0x7f
    68ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    68ec:	8233      	strh	r3, [r6, #16]
    68ee:	6829      	ldr	r1, [r5, #0]
    68f0:	7bcb      	ldrb	r3, [r1, #15]
    68f2:	4393      	bics	r3, r2
    68f4:	d1fc      	bne.n	68f0 <tc_init+0x1f0>
    68f6:	464b      	mov	r3, r9
    68f8:	227f      	movs	r2, #127	; 0x7f
    68fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    68fc:	8333      	strh	r3, [r6, #24]
    68fe:	6829      	ldr	r1, [r5, #0]
    6900:	7bcb      	ldrb	r3, [r1, #15]
    6902:	4393      	bics	r3, r2
    6904:	d1fc      	bne.n	6900 <tc_init+0x200>
    6906:	464b      	mov	r3, r9
    6908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    690a:	2000      	movs	r0, #0
    690c:	8373      	strh	r3, [r6, #26]
    690e:	e736      	b.n	677e <tc_init+0x7e>
    6910:	7bd3      	ldrb	r3, [r2, #15]
    6912:	438b      	bics	r3, r1
    6914:	d1fc      	bne.n	6910 <tc_init+0x210>
    6916:	464b      	mov	r3, r9
    6918:	227f      	movs	r2, #127	; 0x7f
    691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    691c:	6133      	str	r3, [r6, #16]
    691e:	6829      	ldr	r1, [r5, #0]
    6920:	7bcb      	ldrb	r3, [r1, #15]
    6922:	4393      	bics	r3, r2
    6924:	d1fc      	bne.n	6920 <tc_init+0x220>
    6926:	464b      	mov	r3, r9
    6928:	227f      	movs	r2, #127	; 0x7f
    692a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    692c:	61b3      	str	r3, [r6, #24]
    692e:	6829      	ldr	r1, [r5, #0]
    6930:	7bcb      	ldrb	r3, [r1, #15]
    6932:	4393      	bics	r3, r2
    6934:	d1fc      	bne.n	6930 <tc_init+0x230>
    6936:	464b      	mov	r3, r9
    6938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    693a:	2000      	movs	r0, #0
    693c:	61f3      	str	r3, [r6, #28]
    693e:	e71e      	b.n	677e <tc_init+0x7e>
    6940:	2300      	movs	r3, #0
    6942:	4698      	mov	r8, r3
    6944:	e6f9      	b.n	673a <tc_init+0x3a>
    6946:	2301      	movs	r3, #1
    6948:	4698      	mov	r8, r3
    694a:	e6f6      	b.n	673a <tc_init+0x3a>
    694c:	2302      	movs	r3, #2
    694e:	4698      	mov	r8, r3
    6950:	e6f3      	b.n	673a <tc_init+0x3a>
    6952:	a902      	add	r1, sp, #8
    6954:	70cb      	strb	r3, [r1, #3]
    6956:	464b      	mov	r3, r9
    6958:	7e1b      	ldrb	r3, [r3, #24]
    695a:	708a      	strb	r2, [r1, #2]
    695c:	700b      	strb	r3, [r1, #0]
    695e:	464b      	mov	r3, r9
    6960:	7d18      	ldrb	r0, [r3, #20]
    6962:	704a      	strb	r2, [r1, #1]
    6964:	f7fd fcba 	bl	42dc <system_pinmux_pin_set_config>
    6968:	e721      	b.n	67ae <tc_init+0xae>
    696a:	2301      	movs	r3, #1
    696c:	2200      	movs	r2, #0
    696e:	a902      	add	r1, sp, #8
    6970:	708b      	strb	r3, [r1, #2]
    6972:	704b      	strb	r3, [r1, #1]
    6974:	464b      	mov	r3, r9
    6976:	70ca      	strb	r2, [r1, #3]
    6978:	464a      	mov	r2, r9
    697a:	6a1b      	ldr	r3, [r3, #32]
    697c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    697e:	b2d8      	uxtb	r0, r3
    6980:	700a      	strb	r2, [r1, #0]
    6982:	f7fd fcab 	bl	42dc <system_pinmux_pin_set_config>
    6986:	e717      	b.n	67b8 <tc_init+0xb8>
    6988:	4641      	mov	r1, r8
    698a:	3101      	adds	r1, #1
    698c:	0049      	lsls	r1, r1, #1
    698e:	6a13      	ldr	r3, [r2, #32]
    6990:	5a41      	ldrh	r1, [r0, r1]
    6992:	430b      	orrs	r3, r1
    6994:	6213      	str	r3, [r2, #32]
    6996:	e71c      	b.n	67d2 <tc_init+0xd2>
    6998:	0000f218 	.word	0x0000f218
    699c:	20004450 	.word	0x20004450
    69a0:	40000400 	.word	0x40000400

000069a4 <tc_get_count_value>:
    69a4:	217f      	movs	r1, #127	; 0x7f
    69a6:	6802      	ldr	r2, [r0, #0]
    69a8:	7bd3      	ldrb	r3, [r2, #15]
    69aa:	438b      	bics	r3, r1
    69ac:	d1fc      	bne.n	69a8 <tc_get_count_value+0x4>
    69ae:	7903      	ldrb	r3, [r0, #4]
    69b0:	2b04      	cmp	r3, #4
    69b2:	d00a      	beq.n	69ca <tc_get_count_value+0x26>
    69b4:	2b08      	cmp	r3, #8
    69b6:	d006      	beq.n	69c6 <tc_get_count_value+0x22>
    69b8:	2000      	movs	r0, #0
    69ba:	2b00      	cmp	r3, #0
    69bc:	d000      	beq.n	69c0 <tc_get_count_value+0x1c>
    69be:	4770      	bx	lr
    69c0:	8a10      	ldrh	r0, [r2, #16]
    69c2:	b280      	uxth	r0, r0
    69c4:	e7fb      	b.n	69be <tc_get_count_value+0x1a>
    69c6:	6910      	ldr	r0, [r2, #16]
    69c8:	e7f9      	b.n	69be <tc_get_count_value+0x1a>
    69ca:	7c10      	ldrb	r0, [r2, #16]
    69cc:	b2c0      	uxtb	r0, r0
    69ce:	e7f6      	b.n	69be <tc_get_count_value+0x1a>

000069d0 <tc_set_compare_value>:
    69d0:	b530      	push	{r4, r5, lr}
    69d2:	257f      	movs	r5, #127	; 0x7f
    69d4:	6804      	ldr	r4, [r0, #0]
    69d6:	7be3      	ldrb	r3, [r4, #15]
    69d8:	43ab      	bics	r3, r5
    69da:	d1fc      	bne.n	69d6 <tc_set_compare_value+0x6>
    69dc:	7903      	ldrb	r3, [r0, #4]
    69de:	2b04      	cmp	r3, #4
    69e0:	d016      	beq.n	6a10 <tc_set_compare_value+0x40>
    69e2:	2b08      	cmp	r3, #8
    69e4:	d00c      	beq.n	6a00 <tc_set_compare_value+0x30>
    69e6:	2017      	movs	r0, #23
    69e8:	2b00      	cmp	r3, #0
    69ea:	d000      	beq.n	69ee <tc_set_compare_value+0x1e>
    69ec:	bd30      	pop	{r4, r5, pc}
    69ee:	2017      	movs	r0, #23
    69f0:	2901      	cmp	r1, #1
    69f2:	d8fb      	bhi.n	69ec <tc_set_compare_value+0x1c>
    69f4:	310c      	adds	r1, #12
    69f6:	b292      	uxth	r2, r2
    69f8:	0049      	lsls	r1, r1, #1
    69fa:	530a      	strh	r2, [r1, r4]
    69fc:	2000      	movs	r0, #0
    69fe:	e7f5      	b.n	69ec <tc_set_compare_value+0x1c>
    6a00:	2017      	movs	r0, #23
    6a02:	2901      	cmp	r1, #1
    6a04:	d8f2      	bhi.n	69ec <tc_set_compare_value+0x1c>
    6a06:	3106      	adds	r1, #6
    6a08:	0089      	lsls	r1, r1, #2
    6a0a:	510a      	str	r2, [r1, r4]
    6a0c:	2000      	movs	r0, #0
    6a0e:	e7ed      	b.n	69ec <tc_set_compare_value+0x1c>
    6a10:	2017      	movs	r0, #23
    6a12:	2901      	cmp	r1, #1
    6a14:	d8ea      	bhi.n	69ec <tc_set_compare_value+0x1c>
    6a16:	b2d2      	uxtb	r2, r2
    6a18:	1861      	adds	r1, r4, r1
    6a1a:	760a      	strb	r2, [r1, #24]
    6a1c:	2000      	movs	r0, #0
    6a1e:	e7e5      	b.n	69ec <tc_set_compare_value+0x1c>

00006a20 <ticker_irq_handler>:
    6a20:	b538      	push	{r3, r4, r5, lr}
    6a22:	6803      	ldr	r3, [r0, #0]
    6a24:	1c05      	adds	r5, r0, #0
    6a26:	68db      	ldr	r3, [r3, #12]
    6a28:	4798      	blx	r3
    6a2a:	686b      	ldr	r3, [r5, #4]
    6a2c:	685b      	ldr	r3, [r3, #4]
    6a2e:	e00d      	b.n	6a4c <ticker_irq_handler+0x2c>
    6a30:	681c      	ldr	r4, [r3, #0]
    6a32:	682b      	ldr	r3, [r5, #0]
    6a34:	685b      	ldr	r3, [r3, #4]
    6a36:	4798      	blx	r3
    6a38:	1a24      	subs	r4, r4, r0
    6a3a:	2c00      	cmp	r4, #0
    6a3c:	dc0c      	bgt.n	6a58 <ticker_irq_handler+0x38>
    6a3e:	686a      	ldr	r2, [r5, #4]
    6a40:	6851      	ldr	r1, [r2, #4]
    6a42:	688b      	ldr	r3, [r1, #8]
    6a44:	6053      	str	r3, [r2, #4]
    6a46:	6812      	ldr	r2, [r2, #0]
    6a48:	2a00      	cmp	r2, #0
    6a4a:	d10c      	bne.n	6a66 <ticker_irq_handler+0x46>
    6a4c:	2b00      	cmp	r3, #0
    6a4e:	d1ef      	bne.n	6a30 <ticker_irq_handler+0x10>
    6a50:	682b      	ldr	r3, [r5, #0]
    6a52:	689b      	ldr	r3, [r3, #8]
    6a54:	4798      	blx	r3
    6a56:	bd38      	pop	{r3, r4, r5, pc}
    6a58:	686a      	ldr	r2, [r5, #4]
    6a5a:	682b      	ldr	r3, [r5, #0]
    6a5c:	6852      	ldr	r2, [r2, #4]
    6a5e:	691b      	ldr	r3, [r3, #16]
    6a60:	6810      	ldr	r0, [r2, #0]
    6a62:	4798      	blx	r3
    6a64:	e7f7      	b.n	6a56 <ticker_irq_handler+0x36>
    6a66:	6848      	ldr	r0, [r1, #4]
    6a68:	4790      	blx	r2
    6a6a:	e7de      	b.n	6a2a <ticker_irq_handler+0xa>

00006a6c <__aeabi_atexit>:
    6a6c:	b508      	push	{r3, lr}
    6a6e:	1c03      	adds	r3, r0, #0
    6a70:	1c08      	adds	r0, r1, #0
    6a72:	1c19      	adds	r1, r3, #0
    6a74:	f002 f8fa 	bl	8c6c <__cxa_atexit>
    6a78:	bd08      	pop	{r3, pc}

00006a7a <_ZdlPv>:
    6a7a:	b508      	push	{r3, lr}
    6a7c:	f002 fd16 	bl	94ac <free>
    6a80:	bd08      	pop	{r3, pc}

00006a82 <_Znwj>:
    6a82:	b510      	push	{r4, lr}
    6a84:	1e04      	subs	r4, r0, #0
    6a86:	d102      	bne.n	6a8e <_Znwj+0xc>
    6a88:	3401      	adds	r4, #1
    6a8a:	e000      	b.n	6a8e <_Znwj+0xc>
    6a8c:	4780      	blx	r0
    6a8e:	1c20      	adds	r0, r4, #0
    6a90:	f002 fd02 	bl	9498 <malloc>
    6a94:	2800      	cmp	r0, #0
    6a96:	d105      	bne.n	6aa4 <_Znwj+0x22>
    6a98:	f000 f806 	bl	6aa8 <_ZSt15get_new_handlerv>
    6a9c:	2800      	cmp	r0, #0
    6a9e:	d1f5      	bne.n	6a8c <_Znwj+0xa>
    6aa0:	f002 f8dc 	bl	8c5c <abort>
    6aa4:	bd10      	pop	{r4, pc}
	...

00006aa8 <_ZSt15get_new_handlerv>:
    6aa8:	4b01      	ldr	r3, [pc, #4]	; (6ab0 <_ZSt15get_new_handlerv+0x8>)
    6aaa:	6818      	ldr	r0, [r3, #0]
    6aac:	4770      	bx	lr
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	2000439c 	.word	0x2000439c

00006ab4 <__aeabi_uidiv>:
    6ab4:	2200      	movs	r2, #0
    6ab6:	0843      	lsrs	r3, r0, #1
    6ab8:	428b      	cmp	r3, r1
    6aba:	d374      	bcc.n	6ba6 <__aeabi_uidiv+0xf2>
    6abc:	0903      	lsrs	r3, r0, #4
    6abe:	428b      	cmp	r3, r1
    6ac0:	d35f      	bcc.n	6b82 <__aeabi_uidiv+0xce>
    6ac2:	0a03      	lsrs	r3, r0, #8
    6ac4:	428b      	cmp	r3, r1
    6ac6:	d344      	bcc.n	6b52 <__aeabi_uidiv+0x9e>
    6ac8:	0b03      	lsrs	r3, r0, #12
    6aca:	428b      	cmp	r3, r1
    6acc:	d328      	bcc.n	6b20 <__aeabi_uidiv+0x6c>
    6ace:	0c03      	lsrs	r3, r0, #16
    6ad0:	428b      	cmp	r3, r1
    6ad2:	d30d      	bcc.n	6af0 <__aeabi_uidiv+0x3c>
    6ad4:	22ff      	movs	r2, #255	; 0xff
    6ad6:	0209      	lsls	r1, r1, #8
    6ad8:	ba12      	rev	r2, r2
    6ada:	0c03      	lsrs	r3, r0, #16
    6adc:	428b      	cmp	r3, r1
    6ade:	d302      	bcc.n	6ae6 <__aeabi_uidiv+0x32>
    6ae0:	1212      	asrs	r2, r2, #8
    6ae2:	0209      	lsls	r1, r1, #8
    6ae4:	d065      	beq.n	6bb2 <__aeabi_uidiv+0xfe>
    6ae6:	0b03      	lsrs	r3, r0, #12
    6ae8:	428b      	cmp	r3, r1
    6aea:	d319      	bcc.n	6b20 <__aeabi_uidiv+0x6c>
    6aec:	e000      	b.n	6af0 <__aeabi_uidiv+0x3c>
    6aee:	0a09      	lsrs	r1, r1, #8
    6af0:	0bc3      	lsrs	r3, r0, #15
    6af2:	428b      	cmp	r3, r1
    6af4:	d301      	bcc.n	6afa <__aeabi_uidiv+0x46>
    6af6:	03cb      	lsls	r3, r1, #15
    6af8:	1ac0      	subs	r0, r0, r3
    6afa:	4152      	adcs	r2, r2
    6afc:	0b83      	lsrs	r3, r0, #14
    6afe:	428b      	cmp	r3, r1
    6b00:	d301      	bcc.n	6b06 <__aeabi_uidiv+0x52>
    6b02:	038b      	lsls	r3, r1, #14
    6b04:	1ac0      	subs	r0, r0, r3
    6b06:	4152      	adcs	r2, r2
    6b08:	0b43      	lsrs	r3, r0, #13
    6b0a:	428b      	cmp	r3, r1
    6b0c:	d301      	bcc.n	6b12 <__aeabi_uidiv+0x5e>
    6b0e:	034b      	lsls	r3, r1, #13
    6b10:	1ac0      	subs	r0, r0, r3
    6b12:	4152      	adcs	r2, r2
    6b14:	0b03      	lsrs	r3, r0, #12
    6b16:	428b      	cmp	r3, r1
    6b18:	d301      	bcc.n	6b1e <__aeabi_uidiv+0x6a>
    6b1a:	030b      	lsls	r3, r1, #12
    6b1c:	1ac0      	subs	r0, r0, r3
    6b1e:	4152      	adcs	r2, r2
    6b20:	0ac3      	lsrs	r3, r0, #11
    6b22:	428b      	cmp	r3, r1
    6b24:	d301      	bcc.n	6b2a <__aeabi_uidiv+0x76>
    6b26:	02cb      	lsls	r3, r1, #11
    6b28:	1ac0      	subs	r0, r0, r3
    6b2a:	4152      	adcs	r2, r2
    6b2c:	0a83      	lsrs	r3, r0, #10
    6b2e:	428b      	cmp	r3, r1
    6b30:	d301      	bcc.n	6b36 <__aeabi_uidiv+0x82>
    6b32:	028b      	lsls	r3, r1, #10
    6b34:	1ac0      	subs	r0, r0, r3
    6b36:	4152      	adcs	r2, r2
    6b38:	0a43      	lsrs	r3, r0, #9
    6b3a:	428b      	cmp	r3, r1
    6b3c:	d301      	bcc.n	6b42 <__aeabi_uidiv+0x8e>
    6b3e:	024b      	lsls	r3, r1, #9
    6b40:	1ac0      	subs	r0, r0, r3
    6b42:	4152      	adcs	r2, r2
    6b44:	0a03      	lsrs	r3, r0, #8
    6b46:	428b      	cmp	r3, r1
    6b48:	d301      	bcc.n	6b4e <__aeabi_uidiv+0x9a>
    6b4a:	020b      	lsls	r3, r1, #8
    6b4c:	1ac0      	subs	r0, r0, r3
    6b4e:	4152      	adcs	r2, r2
    6b50:	d2cd      	bcs.n	6aee <__aeabi_uidiv+0x3a>
    6b52:	09c3      	lsrs	r3, r0, #7
    6b54:	428b      	cmp	r3, r1
    6b56:	d301      	bcc.n	6b5c <__aeabi_uidiv+0xa8>
    6b58:	01cb      	lsls	r3, r1, #7
    6b5a:	1ac0      	subs	r0, r0, r3
    6b5c:	4152      	adcs	r2, r2
    6b5e:	0983      	lsrs	r3, r0, #6
    6b60:	428b      	cmp	r3, r1
    6b62:	d301      	bcc.n	6b68 <__aeabi_uidiv+0xb4>
    6b64:	018b      	lsls	r3, r1, #6
    6b66:	1ac0      	subs	r0, r0, r3
    6b68:	4152      	adcs	r2, r2
    6b6a:	0943      	lsrs	r3, r0, #5
    6b6c:	428b      	cmp	r3, r1
    6b6e:	d301      	bcc.n	6b74 <__aeabi_uidiv+0xc0>
    6b70:	014b      	lsls	r3, r1, #5
    6b72:	1ac0      	subs	r0, r0, r3
    6b74:	4152      	adcs	r2, r2
    6b76:	0903      	lsrs	r3, r0, #4
    6b78:	428b      	cmp	r3, r1
    6b7a:	d301      	bcc.n	6b80 <__aeabi_uidiv+0xcc>
    6b7c:	010b      	lsls	r3, r1, #4
    6b7e:	1ac0      	subs	r0, r0, r3
    6b80:	4152      	adcs	r2, r2
    6b82:	08c3      	lsrs	r3, r0, #3
    6b84:	428b      	cmp	r3, r1
    6b86:	d301      	bcc.n	6b8c <__aeabi_uidiv+0xd8>
    6b88:	00cb      	lsls	r3, r1, #3
    6b8a:	1ac0      	subs	r0, r0, r3
    6b8c:	4152      	adcs	r2, r2
    6b8e:	0883      	lsrs	r3, r0, #2
    6b90:	428b      	cmp	r3, r1
    6b92:	d301      	bcc.n	6b98 <__aeabi_uidiv+0xe4>
    6b94:	008b      	lsls	r3, r1, #2
    6b96:	1ac0      	subs	r0, r0, r3
    6b98:	4152      	adcs	r2, r2
    6b9a:	0843      	lsrs	r3, r0, #1
    6b9c:	428b      	cmp	r3, r1
    6b9e:	d301      	bcc.n	6ba4 <__aeabi_uidiv+0xf0>
    6ba0:	004b      	lsls	r3, r1, #1
    6ba2:	1ac0      	subs	r0, r0, r3
    6ba4:	4152      	adcs	r2, r2
    6ba6:	1a41      	subs	r1, r0, r1
    6ba8:	d200      	bcs.n	6bac <__aeabi_uidiv+0xf8>
    6baa:	4601      	mov	r1, r0
    6bac:	4152      	adcs	r2, r2
    6bae:	4610      	mov	r0, r2
    6bb0:	4770      	bx	lr
    6bb2:	e7ff      	b.n	6bb4 <__aeabi_uidiv+0x100>
    6bb4:	b501      	push	{r0, lr}
    6bb6:	2000      	movs	r0, #0
    6bb8:	f000 f8fc 	bl	6db4 <__aeabi_idiv0>
    6bbc:	bd02      	pop	{r1, pc}
    6bbe:	46c0      	nop			; (mov r8, r8)

00006bc0 <__aeabi_uidivmod>:
    6bc0:	2900      	cmp	r1, #0
    6bc2:	d0f7      	beq.n	6bb4 <__aeabi_uidiv+0x100>
    6bc4:	b503      	push	{r0, r1, lr}
    6bc6:	f7ff ff75 	bl	6ab4 <__aeabi_uidiv>
    6bca:	bc0e      	pop	{r1, r2, r3}
    6bcc:	4342      	muls	r2, r0
    6bce:	1a89      	subs	r1, r1, r2
    6bd0:	4718      	bx	r3
    6bd2:	46c0      	nop			; (mov r8, r8)

00006bd4 <__aeabi_idiv>:
    6bd4:	4603      	mov	r3, r0
    6bd6:	430b      	orrs	r3, r1
    6bd8:	d47f      	bmi.n	6cda <__aeabi_idiv+0x106>
    6bda:	2200      	movs	r2, #0
    6bdc:	0843      	lsrs	r3, r0, #1
    6bde:	428b      	cmp	r3, r1
    6be0:	d374      	bcc.n	6ccc <__aeabi_idiv+0xf8>
    6be2:	0903      	lsrs	r3, r0, #4
    6be4:	428b      	cmp	r3, r1
    6be6:	d35f      	bcc.n	6ca8 <__aeabi_idiv+0xd4>
    6be8:	0a03      	lsrs	r3, r0, #8
    6bea:	428b      	cmp	r3, r1
    6bec:	d344      	bcc.n	6c78 <__aeabi_idiv+0xa4>
    6bee:	0b03      	lsrs	r3, r0, #12
    6bf0:	428b      	cmp	r3, r1
    6bf2:	d328      	bcc.n	6c46 <__aeabi_idiv+0x72>
    6bf4:	0c03      	lsrs	r3, r0, #16
    6bf6:	428b      	cmp	r3, r1
    6bf8:	d30d      	bcc.n	6c16 <__aeabi_idiv+0x42>
    6bfa:	22ff      	movs	r2, #255	; 0xff
    6bfc:	0209      	lsls	r1, r1, #8
    6bfe:	ba12      	rev	r2, r2
    6c00:	0c03      	lsrs	r3, r0, #16
    6c02:	428b      	cmp	r3, r1
    6c04:	d302      	bcc.n	6c0c <__aeabi_idiv+0x38>
    6c06:	1212      	asrs	r2, r2, #8
    6c08:	0209      	lsls	r1, r1, #8
    6c0a:	d065      	beq.n	6cd8 <__aeabi_idiv+0x104>
    6c0c:	0b03      	lsrs	r3, r0, #12
    6c0e:	428b      	cmp	r3, r1
    6c10:	d319      	bcc.n	6c46 <__aeabi_idiv+0x72>
    6c12:	e000      	b.n	6c16 <__aeabi_idiv+0x42>
    6c14:	0a09      	lsrs	r1, r1, #8
    6c16:	0bc3      	lsrs	r3, r0, #15
    6c18:	428b      	cmp	r3, r1
    6c1a:	d301      	bcc.n	6c20 <__aeabi_idiv+0x4c>
    6c1c:	03cb      	lsls	r3, r1, #15
    6c1e:	1ac0      	subs	r0, r0, r3
    6c20:	4152      	adcs	r2, r2
    6c22:	0b83      	lsrs	r3, r0, #14
    6c24:	428b      	cmp	r3, r1
    6c26:	d301      	bcc.n	6c2c <__aeabi_idiv+0x58>
    6c28:	038b      	lsls	r3, r1, #14
    6c2a:	1ac0      	subs	r0, r0, r3
    6c2c:	4152      	adcs	r2, r2
    6c2e:	0b43      	lsrs	r3, r0, #13
    6c30:	428b      	cmp	r3, r1
    6c32:	d301      	bcc.n	6c38 <__aeabi_idiv+0x64>
    6c34:	034b      	lsls	r3, r1, #13
    6c36:	1ac0      	subs	r0, r0, r3
    6c38:	4152      	adcs	r2, r2
    6c3a:	0b03      	lsrs	r3, r0, #12
    6c3c:	428b      	cmp	r3, r1
    6c3e:	d301      	bcc.n	6c44 <__aeabi_idiv+0x70>
    6c40:	030b      	lsls	r3, r1, #12
    6c42:	1ac0      	subs	r0, r0, r3
    6c44:	4152      	adcs	r2, r2
    6c46:	0ac3      	lsrs	r3, r0, #11
    6c48:	428b      	cmp	r3, r1
    6c4a:	d301      	bcc.n	6c50 <__aeabi_idiv+0x7c>
    6c4c:	02cb      	lsls	r3, r1, #11
    6c4e:	1ac0      	subs	r0, r0, r3
    6c50:	4152      	adcs	r2, r2
    6c52:	0a83      	lsrs	r3, r0, #10
    6c54:	428b      	cmp	r3, r1
    6c56:	d301      	bcc.n	6c5c <__aeabi_idiv+0x88>
    6c58:	028b      	lsls	r3, r1, #10
    6c5a:	1ac0      	subs	r0, r0, r3
    6c5c:	4152      	adcs	r2, r2
    6c5e:	0a43      	lsrs	r3, r0, #9
    6c60:	428b      	cmp	r3, r1
    6c62:	d301      	bcc.n	6c68 <__aeabi_idiv+0x94>
    6c64:	024b      	lsls	r3, r1, #9
    6c66:	1ac0      	subs	r0, r0, r3
    6c68:	4152      	adcs	r2, r2
    6c6a:	0a03      	lsrs	r3, r0, #8
    6c6c:	428b      	cmp	r3, r1
    6c6e:	d301      	bcc.n	6c74 <__aeabi_idiv+0xa0>
    6c70:	020b      	lsls	r3, r1, #8
    6c72:	1ac0      	subs	r0, r0, r3
    6c74:	4152      	adcs	r2, r2
    6c76:	d2cd      	bcs.n	6c14 <__aeabi_idiv+0x40>
    6c78:	09c3      	lsrs	r3, r0, #7
    6c7a:	428b      	cmp	r3, r1
    6c7c:	d301      	bcc.n	6c82 <__aeabi_idiv+0xae>
    6c7e:	01cb      	lsls	r3, r1, #7
    6c80:	1ac0      	subs	r0, r0, r3
    6c82:	4152      	adcs	r2, r2
    6c84:	0983      	lsrs	r3, r0, #6
    6c86:	428b      	cmp	r3, r1
    6c88:	d301      	bcc.n	6c8e <__aeabi_idiv+0xba>
    6c8a:	018b      	lsls	r3, r1, #6
    6c8c:	1ac0      	subs	r0, r0, r3
    6c8e:	4152      	adcs	r2, r2
    6c90:	0943      	lsrs	r3, r0, #5
    6c92:	428b      	cmp	r3, r1
    6c94:	d301      	bcc.n	6c9a <__aeabi_idiv+0xc6>
    6c96:	014b      	lsls	r3, r1, #5
    6c98:	1ac0      	subs	r0, r0, r3
    6c9a:	4152      	adcs	r2, r2
    6c9c:	0903      	lsrs	r3, r0, #4
    6c9e:	428b      	cmp	r3, r1
    6ca0:	d301      	bcc.n	6ca6 <__aeabi_idiv+0xd2>
    6ca2:	010b      	lsls	r3, r1, #4
    6ca4:	1ac0      	subs	r0, r0, r3
    6ca6:	4152      	adcs	r2, r2
    6ca8:	08c3      	lsrs	r3, r0, #3
    6caa:	428b      	cmp	r3, r1
    6cac:	d301      	bcc.n	6cb2 <__aeabi_idiv+0xde>
    6cae:	00cb      	lsls	r3, r1, #3
    6cb0:	1ac0      	subs	r0, r0, r3
    6cb2:	4152      	adcs	r2, r2
    6cb4:	0883      	lsrs	r3, r0, #2
    6cb6:	428b      	cmp	r3, r1
    6cb8:	d301      	bcc.n	6cbe <__aeabi_idiv+0xea>
    6cba:	008b      	lsls	r3, r1, #2
    6cbc:	1ac0      	subs	r0, r0, r3
    6cbe:	4152      	adcs	r2, r2
    6cc0:	0843      	lsrs	r3, r0, #1
    6cc2:	428b      	cmp	r3, r1
    6cc4:	d301      	bcc.n	6cca <__aeabi_idiv+0xf6>
    6cc6:	004b      	lsls	r3, r1, #1
    6cc8:	1ac0      	subs	r0, r0, r3
    6cca:	4152      	adcs	r2, r2
    6ccc:	1a41      	subs	r1, r0, r1
    6cce:	d200      	bcs.n	6cd2 <__aeabi_idiv+0xfe>
    6cd0:	4601      	mov	r1, r0
    6cd2:	4152      	adcs	r2, r2
    6cd4:	4610      	mov	r0, r2
    6cd6:	4770      	bx	lr
    6cd8:	e05d      	b.n	6d96 <__aeabi_idiv+0x1c2>
    6cda:	0fca      	lsrs	r2, r1, #31
    6cdc:	d000      	beq.n	6ce0 <__aeabi_idiv+0x10c>
    6cde:	4249      	negs	r1, r1
    6ce0:	1003      	asrs	r3, r0, #32
    6ce2:	d300      	bcc.n	6ce6 <__aeabi_idiv+0x112>
    6ce4:	4240      	negs	r0, r0
    6ce6:	4053      	eors	r3, r2
    6ce8:	2200      	movs	r2, #0
    6cea:	469c      	mov	ip, r3
    6cec:	0903      	lsrs	r3, r0, #4
    6cee:	428b      	cmp	r3, r1
    6cf0:	d32d      	bcc.n	6d4e <__aeabi_idiv+0x17a>
    6cf2:	0a03      	lsrs	r3, r0, #8
    6cf4:	428b      	cmp	r3, r1
    6cf6:	d312      	bcc.n	6d1e <__aeabi_idiv+0x14a>
    6cf8:	22fc      	movs	r2, #252	; 0xfc
    6cfa:	0189      	lsls	r1, r1, #6
    6cfc:	ba12      	rev	r2, r2
    6cfe:	0a03      	lsrs	r3, r0, #8
    6d00:	428b      	cmp	r3, r1
    6d02:	d30c      	bcc.n	6d1e <__aeabi_idiv+0x14a>
    6d04:	0189      	lsls	r1, r1, #6
    6d06:	1192      	asrs	r2, r2, #6
    6d08:	428b      	cmp	r3, r1
    6d0a:	d308      	bcc.n	6d1e <__aeabi_idiv+0x14a>
    6d0c:	0189      	lsls	r1, r1, #6
    6d0e:	1192      	asrs	r2, r2, #6
    6d10:	428b      	cmp	r3, r1
    6d12:	d304      	bcc.n	6d1e <__aeabi_idiv+0x14a>
    6d14:	0189      	lsls	r1, r1, #6
    6d16:	d03a      	beq.n	6d8e <__aeabi_idiv+0x1ba>
    6d18:	1192      	asrs	r2, r2, #6
    6d1a:	e000      	b.n	6d1e <__aeabi_idiv+0x14a>
    6d1c:	0989      	lsrs	r1, r1, #6
    6d1e:	09c3      	lsrs	r3, r0, #7
    6d20:	428b      	cmp	r3, r1
    6d22:	d301      	bcc.n	6d28 <__aeabi_idiv+0x154>
    6d24:	01cb      	lsls	r3, r1, #7
    6d26:	1ac0      	subs	r0, r0, r3
    6d28:	4152      	adcs	r2, r2
    6d2a:	0983      	lsrs	r3, r0, #6
    6d2c:	428b      	cmp	r3, r1
    6d2e:	d301      	bcc.n	6d34 <__aeabi_idiv+0x160>
    6d30:	018b      	lsls	r3, r1, #6
    6d32:	1ac0      	subs	r0, r0, r3
    6d34:	4152      	adcs	r2, r2
    6d36:	0943      	lsrs	r3, r0, #5
    6d38:	428b      	cmp	r3, r1
    6d3a:	d301      	bcc.n	6d40 <__aeabi_idiv+0x16c>
    6d3c:	014b      	lsls	r3, r1, #5
    6d3e:	1ac0      	subs	r0, r0, r3
    6d40:	4152      	adcs	r2, r2
    6d42:	0903      	lsrs	r3, r0, #4
    6d44:	428b      	cmp	r3, r1
    6d46:	d301      	bcc.n	6d4c <__aeabi_idiv+0x178>
    6d48:	010b      	lsls	r3, r1, #4
    6d4a:	1ac0      	subs	r0, r0, r3
    6d4c:	4152      	adcs	r2, r2
    6d4e:	08c3      	lsrs	r3, r0, #3
    6d50:	428b      	cmp	r3, r1
    6d52:	d301      	bcc.n	6d58 <__aeabi_idiv+0x184>
    6d54:	00cb      	lsls	r3, r1, #3
    6d56:	1ac0      	subs	r0, r0, r3
    6d58:	4152      	adcs	r2, r2
    6d5a:	0883      	lsrs	r3, r0, #2
    6d5c:	428b      	cmp	r3, r1
    6d5e:	d301      	bcc.n	6d64 <__aeabi_idiv+0x190>
    6d60:	008b      	lsls	r3, r1, #2
    6d62:	1ac0      	subs	r0, r0, r3
    6d64:	4152      	adcs	r2, r2
    6d66:	d2d9      	bcs.n	6d1c <__aeabi_idiv+0x148>
    6d68:	0843      	lsrs	r3, r0, #1
    6d6a:	428b      	cmp	r3, r1
    6d6c:	d301      	bcc.n	6d72 <__aeabi_idiv+0x19e>
    6d6e:	004b      	lsls	r3, r1, #1
    6d70:	1ac0      	subs	r0, r0, r3
    6d72:	4152      	adcs	r2, r2
    6d74:	1a41      	subs	r1, r0, r1
    6d76:	d200      	bcs.n	6d7a <__aeabi_idiv+0x1a6>
    6d78:	4601      	mov	r1, r0
    6d7a:	4663      	mov	r3, ip
    6d7c:	4152      	adcs	r2, r2
    6d7e:	105b      	asrs	r3, r3, #1
    6d80:	4610      	mov	r0, r2
    6d82:	d301      	bcc.n	6d88 <__aeabi_idiv+0x1b4>
    6d84:	4240      	negs	r0, r0
    6d86:	2b00      	cmp	r3, #0
    6d88:	d500      	bpl.n	6d8c <__aeabi_idiv+0x1b8>
    6d8a:	4249      	negs	r1, r1
    6d8c:	4770      	bx	lr
    6d8e:	4663      	mov	r3, ip
    6d90:	105b      	asrs	r3, r3, #1
    6d92:	d300      	bcc.n	6d96 <__aeabi_idiv+0x1c2>
    6d94:	4240      	negs	r0, r0
    6d96:	b501      	push	{r0, lr}
    6d98:	2000      	movs	r0, #0
    6d9a:	f000 f80b 	bl	6db4 <__aeabi_idiv0>
    6d9e:	bd02      	pop	{r1, pc}

00006da0 <__aeabi_idivmod>:
    6da0:	2900      	cmp	r1, #0
    6da2:	d0f8      	beq.n	6d96 <__aeabi_idiv+0x1c2>
    6da4:	b503      	push	{r0, r1, lr}
    6da6:	f7ff ff15 	bl	6bd4 <__aeabi_idiv>
    6daa:	bc0e      	pop	{r1, r2, r3}
    6dac:	4342      	muls	r2, r0
    6dae:	1a89      	subs	r1, r1, r2
    6db0:	4718      	bx	r3
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_idiv0>:
    6db4:	4770      	bx	lr
    6db6:	46c0      	nop			; (mov r8, r8)

00006db8 <__aeabi_cdrcmple>:
    6db8:	4684      	mov	ip, r0
    6dba:	1c10      	adds	r0, r2, #0
    6dbc:	4662      	mov	r2, ip
    6dbe:	468c      	mov	ip, r1
    6dc0:	1c19      	adds	r1, r3, #0
    6dc2:	4663      	mov	r3, ip
    6dc4:	e000      	b.n	6dc8 <__aeabi_cdcmpeq>
    6dc6:	46c0      	nop			; (mov r8, r8)

00006dc8 <__aeabi_cdcmpeq>:
    6dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6dca:	f000 ff7b 	bl	7cc4 <__ledf2>
    6dce:	2800      	cmp	r0, #0
    6dd0:	d401      	bmi.n	6dd6 <__aeabi_cdcmpeq+0xe>
    6dd2:	2100      	movs	r1, #0
    6dd4:	42c8      	cmn	r0, r1
    6dd6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006dd8 <__aeabi_dcmpeq>:
    6dd8:	b510      	push	{r4, lr}
    6dda:	f000 febf 	bl	7b5c <__eqdf2>
    6dde:	4240      	negs	r0, r0
    6de0:	3001      	adds	r0, #1
    6de2:	bd10      	pop	{r4, pc}

00006de4 <__aeabi_dcmplt>:
    6de4:	b510      	push	{r4, lr}
    6de6:	f000 ff6d 	bl	7cc4 <__ledf2>
    6dea:	2800      	cmp	r0, #0
    6dec:	db01      	blt.n	6df2 <__aeabi_dcmplt+0xe>
    6dee:	2000      	movs	r0, #0
    6df0:	bd10      	pop	{r4, pc}
    6df2:	2001      	movs	r0, #1
    6df4:	bd10      	pop	{r4, pc}
    6df6:	46c0      	nop			; (mov r8, r8)

00006df8 <__aeabi_dcmple>:
    6df8:	b510      	push	{r4, lr}
    6dfa:	f000 ff63 	bl	7cc4 <__ledf2>
    6dfe:	2800      	cmp	r0, #0
    6e00:	dd01      	ble.n	6e06 <__aeabi_dcmple+0xe>
    6e02:	2000      	movs	r0, #0
    6e04:	bd10      	pop	{r4, pc}
    6e06:	2001      	movs	r0, #1
    6e08:	bd10      	pop	{r4, pc}
    6e0a:	46c0      	nop			; (mov r8, r8)

00006e0c <__aeabi_dcmpgt>:
    6e0c:	b510      	push	{r4, lr}
    6e0e:	f000 fee9 	bl	7be4 <__gedf2>
    6e12:	2800      	cmp	r0, #0
    6e14:	dc01      	bgt.n	6e1a <__aeabi_dcmpgt+0xe>
    6e16:	2000      	movs	r0, #0
    6e18:	bd10      	pop	{r4, pc}
    6e1a:	2001      	movs	r0, #1
    6e1c:	bd10      	pop	{r4, pc}
    6e1e:	46c0      	nop			; (mov r8, r8)

00006e20 <__aeabi_dcmpge>:
    6e20:	b510      	push	{r4, lr}
    6e22:	f000 fedf 	bl	7be4 <__gedf2>
    6e26:	2800      	cmp	r0, #0
    6e28:	da01      	bge.n	6e2e <__aeabi_dcmpge+0xe>
    6e2a:	2000      	movs	r0, #0
    6e2c:	bd10      	pop	{r4, pc}
    6e2e:	2001      	movs	r0, #1
    6e30:	bd10      	pop	{r4, pc}
    6e32:	46c0      	nop			; (mov r8, r8)

00006e34 <__aeabi_lmul>:
    6e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e36:	464f      	mov	r7, r9
    6e38:	4646      	mov	r6, r8
    6e3a:	0405      	lsls	r5, r0, #16
    6e3c:	0c2d      	lsrs	r5, r5, #16
    6e3e:	1c2c      	adds	r4, r5, #0
    6e40:	b4c0      	push	{r6, r7}
    6e42:	0417      	lsls	r7, r2, #16
    6e44:	0c16      	lsrs	r6, r2, #16
    6e46:	0c3f      	lsrs	r7, r7, #16
    6e48:	4699      	mov	r9, r3
    6e4a:	0c03      	lsrs	r3, r0, #16
    6e4c:	437c      	muls	r4, r7
    6e4e:	4375      	muls	r5, r6
    6e50:	435f      	muls	r7, r3
    6e52:	4373      	muls	r3, r6
    6e54:	197d      	adds	r5, r7, r5
    6e56:	0c26      	lsrs	r6, r4, #16
    6e58:	19ad      	adds	r5, r5, r6
    6e5a:	469c      	mov	ip, r3
    6e5c:	42af      	cmp	r7, r5
    6e5e:	d903      	bls.n	6e68 <__aeabi_lmul+0x34>
    6e60:	2380      	movs	r3, #128	; 0x80
    6e62:	025b      	lsls	r3, r3, #9
    6e64:	4698      	mov	r8, r3
    6e66:	44c4      	add	ip, r8
    6e68:	464b      	mov	r3, r9
    6e6a:	4351      	muls	r1, r2
    6e6c:	4343      	muls	r3, r0
    6e6e:	0424      	lsls	r4, r4, #16
    6e70:	0c2e      	lsrs	r6, r5, #16
    6e72:	0c24      	lsrs	r4, r4, #16
    6e74:	042d      	lsls	r5, r5, #16
    6e76:	4466      	add	r6, ip
    6e78:	192c      	adds	r4, r5, r4
    6e7a:	1859      	adds	r1, r3, r1
    6e7c:	1989      	adds	r1, r1, r6
    6e7e:	1c20      	adds	r0, r4, #0
    6e80:	bc0c      	pop	{r2, r3}
    6e82:	4690      	mov	r8, r2
    6e84:	4699      	mov	r9, r3
    6e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006e88 <__aeabi_d2uiz>:
    6e88:	b538      	push	{r3, r4, r5, lr}
    6e8a:	2200      	movs	r2, #0
    6e8c:	4b0c      	ldr	r3, [pc, #48]	; (6ec0 <__aeabi_d2uiz+0x38>)
    6e8e:	1c04      	adds	r4, r0, #0
    6e90:	1c0d      	adds	r5, r1, #0
    6e92:	f7ff ffc5 	bl	6e20 <__aeabi_dcmpge>
    6e96:	2800      	cmp	r0, #0
    6e98:	d104      	bne.n	6ea4 <__aeabi_d2uiz+0x1c>
    6e9a:	1c20      	adds	r0, r4, #0
    6e9c:	1c29      	adds	r1, r5, #0
    6e9e:	f001 fd8b 	bl	89b8 <__aeabi_d2iz>
    6ea2:	bd38      	pop	{r3, r4, r5, pc}
    6ea4:	4b06      	ldr	r3, [pc, #24]	; (6ec0 <__aeabi_d2uiz+0x38>)
    6ea6:	2200      	movs	r2, #0
    6ea8:	1c20      	adds	r0, r4, #0
    6eaa:	1c29      	adds	r1, r5, #0
    6eac:	f001 fa0a 	bl	82c4 <__aeabi_dsub>
    6eb0:	f001 fd82 	bl	89b8 <__aeabi_d2iz>
    6eb4:	2380      	movs	r3, #128	; 0x80
    6eb6:	061b      	lsls	r3, r3, #24
    6eb8:	469c      	mov	ip, r3
    6eba:	4460      	add	r0, ip
    6ebc:	e7f1      	b.n	6ea2 <__aeabi_d2uiz+0x1a>
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	41e00000 	.word	0x41e00000

00006ec4 <__aeabi_dadd>:
    6ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ec6:	4645      	mov	r5, r8
    6ec8:	4657      	mov	r7, sl
    6eca:	464e      	mov	r6, r9
    6ecc:	4694      	mov	ip, r2
    6ece:	004c      	lsls	r4, r1, #1
    6ed0:	030a      	lsls	r2, r1, #12
    6ed2:	0fc9      	lsrs	r1, r1, #31
    6ed4:	b4e0      	push	{r5, r6, r7}
    6ed6:	4688      	mov	r8, r1
    6ed8:	1c0e      	adds	r6, r1, #0
    6eda:	0319      	lsls	r1, r3, #12
    6edc:	0f47      	lsrs	r7, r0, #29
    6ede:	00c5      	lsls	r5, r0, #3
    6ee0:	0a48      	lsrs	r0, r1, #9
    6ee2:	4661      	mov	r1, ip
    6ee4:	0f49      	lsrs	r1, r1, #29
    6ee6:	4301      	orrs	r1, r0
    6ee8:	4660      	mov	r0, ip
    6eea:	0a52      	lsrs	r2, r2, #9
    6eec:	4317      	orrs	r7, r2
    6eee:	00c0      	lsls	r0, r0, #3
    6ef0:	005a      	lsls	r2, r3, #1
    6ef2:	0d64      	lsrs	r4, r4, #21
    6ef4:	0d52      	lsrs	r2, r2, #21
    6ef6:	0fdb      	lsrs	r3, r3, #31
    6ef8:	4684      	mov	ip, r0
    6efa:	4598      	cmp	r8, r3
    6efc:	d100      	bne.n	6f00 <__aeabi_dadd+0x3c>
    6efe:	e0a7      	b.n	7050 <__aeabi_dadd+0x18c>
    6f00:	1aa0      	subs	r0, r4, r2
    6f02:	2800      	cmp	r0, #0
    6f04:	dc00      	bgt.n	6f08 <__aeabi_dadd+0x44>
    6f06:	e101      	b.n	710c <__aeabi_dadd+0x248>
    6f08:	2a00      	cmp	r2, #0
    6f0a:	d13d      	bne.n	6f88 <__aeabi_dadd+0xc4>
    6f0c:	4663      	mov	r3, ip
    6f0e:	430b      	orrs	r3, r1
    6f10:	d000      	beq.n	6f14 <__aeabi_dadd+0x50>
    6f12:	e0d4      	b.n	70be <__aeabi_dadd+0x1fa>
    6f14:	076b      	lsls	r3, r5, #29
    6f16:	d100      	bne.n	6f1a <__aeabi_dadd+0x56>
    6f18:	e088      	b.n	702c <__aeabi_dadd+0x168>
    6f1a:	230f      	movs	r3, #15
    6f1c:	402b      	ands	r3, r5
    6f1e:	2b04      	cmp	r3, #4
    6f20:	d100      	bne.n	6f24 <__aeabi_dadd+0x60>
    6f22:	e083      	b.n	702c <__aeabi_dadd+0x168>
    6f24:	1d2a      	adds	r2, r5, #4
    6f26:	42aa      	cmp	r2, r5
    6f28:	41ad      	sbcs	r5, r5
    6f2a:	2380      	movs	r3, #128	; 0x80
    6f2c:	426d      	negs	r5, r5
    6f2e:	197f      	adds	r7, r7, r5
    6f30:	041b      	lsls	r3, r3, #16
    6f32:	403b      	ands	r3, r7
    6f34:	4646      	mov	r6, r8
    6f36:	1c15      	adds	r5, r2, #0
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d100      	bne.n	6f3e <__aeabi_dadd+0x7a>
    6f3c:	e07c      	b.n	7038 <__aeabi_dadd+0x174>
    6f3e:	4bcc      	ldr	r3, [pc, #816]	; (7270 <__aeabi_dadd+0x3ac>)
    6f40:	3401      	adds	r4, #1
    6f42:	429c      	cmp	r4, r3
    6f44:	d100      	bne.n	6f48 <__aeabi_dadd+0x84>
    6f46:	e0fd      	b.n	7144 <__aeabi_dadd+0x280>
    6f48:	1c3a      	adds	r2, r7, #0
    6f4a:	4bca      	ldr	r3, [pc, #808]	; (7274 <__aeabi_dadd+0x3b0>)
    6f4c:	08ed      	lsrs	r5, r5, #3
    6f4e:	401a      	ands	r2, r3
    6f50:	0750      	lsls	r0, r2, #29
    6f52:	0564      	lsls	r4, r4, #21
    6f54:	0252      	lsls	r2, r2, #9
    6f56:	4305      	orrs	r5, r0
    6f58:	0b12      	lsrs	r2, r2, #12
    6f5a:	0d64      	lsrs	r4, r4, #21
    6f5c:	2100      	movs	r1, #0
    6f5e:	0312      	lsls	r2, r2, #12
    6f60:	0d0b      	lsrs	r3, r1, #20
    6f62:	051b      	lsls	r3, r3, #20
    6f64:	0564      	lsls	r4, r4, #21
    6f66:	0b12      	lsrs	r2, r2, #12
    6f68:	431a      	orrs	r2, r3
    6f6a:	0863      	lsrs	r3, r4, #1
    6f6c:	4cc2      	ldr	r4, [pc, #776]	; (7278 <__aeabi_dadd+0x3b4>)
    6f6e:	07f6      	lsls	r6, r6, #31
    6f70:	4014      	ands	r4, r2
    6f72:	431c      	orrs	r4, r3
    6f74:	0064      	lsls	r4, r4, #1
    6f76:	0864      	lsrs	r4, r4, #1
    6f78:	4334      	orrs	r4, r6
    6f7a:	1c28      	adds	r0, r5, #0
    6f7c:	1c21      	adds	r1, r4, #0
    6f7e:	bc1c      	pop	{r2, r3, r4}
    6f80:	4690      	mov	r8, r2
    6f82:	4699      	mov	r9, r3
    6f84:	46a2      	mov	sl, r4
    6f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f88:	4bb9      	ldr	r3, [pc, #740]	; (7270 <__aeabi_dadd+0x3ac>)
    6f8a:	429c      	cmp	r4, r3
    6f8c:	d0c2      	beq.n	6f14 <__aeabi_dadd+0x50>
    6f8e:	2380      	movs	r3, #128	; 0x80
    6f90:	041b      	lsls	r3, r3, #16
    6f92:	4319      	orrs	r1, r3
    6f94:	2838      	cmp	r0, #56	; 0x38
    6f96:	dd00      	ble.n	6f9a <__aeabi_dadd+0xd6>
    6f98:	e0ec      	b.n	7174 <__aeabi_dadd+0x2b0>
    6f9a:	281f      	cmp	r0, #31
    6f9c:	dd00      	ble.n	6fa0 <__aeabi_dadd+0xdc>
    6f9e:	e121      	b.n	71e4 <__aeabi_dadd+0x320>
    6fa0:	2220      	movs	r2, #32
    6fa2:	1c0e      	adds	r6, r1, #0
    6fa4:	4663      	mov	r3, ip
    6fa6:	1a12      	subs	r2, r2, r0
    6fa8:	4096      	lsls	r6, r2
    6faa:	40c3      	lsrs	r3, r0
    6fac:	4333      	orrs	r3, r6
    6fae:	4666      	mov	r6, ip
    6fb0:	4096      	lsls	r6, r2
    6fb2:	1c32      	adds	r2, r6, #0
    6fb4:	1e56      	subs	r6, r2, #1
    6fb6:	41b2      	sbcs	r2, r6
    6fb8:	4313      	orrs	r3, r2
    6fba:	1c0a      	adds	r2, r1, #0
    6fbc:	40c2      	lsrs	r2, r0
    6fbe:	1aeb      	subs	r3, r5, r3
    6fc0:	429d      	cmp	r5, r3
    6fc2:	41b6      	sbcs	r6, r6
    6fc4:	1c1d      	adds	r5, r3, #0
    6fc6:	1aba      	subs	r2, r7, r2
    6fc8:	4276      	negs	r6, r6
    6fca:	1b97      	subs	r7, r2, r6
    6fcc:	023b      	lsls	r3, r7, #8
    6fce:	d400      	bmi.n	6fd2 <__aeabi_dadd+0x10e>
    6fd0:	e097      	b.n	7102 <__aeabi_dadd+0x23e>
    6fd2:	027a      	lsls	r2, r7, #9
    6fd4:	0a56      	lsrs	r6, r2, #9
    6fd6:	2e00      	cmp	r6, #0
    6fd8:	d100      	bne.n	6fdc <__aeabi_dadd+0x118>
    6fda:	e0b6      	b.n	714a <__aeabi_dadd+0x286>
    6fdc:	1c30      	adds	r0, r6, #0
    6fde:	f001 fe1f 	bl	8c20 <__clzsi2>
    6fe2:	1c03      	adds	r3, r0, #0
    6fe4:	3b08      	subs	r3, #8
    6fe6:	2b1f      	cmp	r3, #31
    6fe8:	dd00      	ble.n	6fec <__aeabi_dadd+0x128>
    6fea:	e0b7      	b.n	715c <__aeabi_dadd+0x298>
    6fec:	409e      	lsls	r6, r3
    6fee:	1c37      	adds	r7, r6, #0
    6ff0:	2628      	movs	r6, #40	; 0x28
    6ff2:	1c2a      	adds	r2, r5, #0
    6ff4:	1a36      	subs	r6, r6, r0
    6ff6:	40f2      	lsrs	r2, r6
    6ff8:	1c16      	adds	r6, r2, #0
    6ffa:	409d      	lsls	r5, r3
    6ffc:	433e      	orrs	r6, r7
    6ffe:	429c      	cmp	r4, r3
    7000:	dd00      	ble.n	7004 <__aeabi_dadd+0x140>
    7002:	e0b2      	b.n	716a <__aeabi_dadd+0x2a6>
    7004:	1b1c      	subs	r4, r3, r4
    7006:	1c62      	adds	r2, r4, #1
    7008:	2a1f      	cmp	r2, #31
    700a:	dd00      	ble.n	700e <__aeabi_dadd+0x14a>
    700c:	e0d8      	b.n	71c0 <__aeabi_dadd+0x2fc>
    700e:	231f      	movs	r3, #31
    7010:	1c29      	adds	r1, r5, #0
    7012:	1b1c      	subs	r4, r3, r4
    7014:	1c33      	adds	r3, r6, #0
    7016:	40a5      	lsls	r5, r4
    7018:	40a3      	lsls	r3, r4
    701a:	40d1      	lsrs	r1, r2
    701c:	1e6c      	subs	r4, r5, #1
    701e:	41a5      	sbcs	r5, r4
    7020:	40d6      	lsrs	r6, r2
    7022:	4319      	orrs	r1, r3
    7024:	430d      	orrs	r5, r1
    7026:	1c37      	adds	r7, r6, #0
    7028:	2400      	movs	r4, #0
    702a:	e773      	b.n	6f14 <__aeabi_dadd+0x50>
    702c:	2380      	movs	r3, #128	; 0x80
    702e:	041b      	lsls	r3, r3, #16
    7030:	403b      	ands	r3, r7
    7032:	4646      	mov	r6, r8
    7034:	d000      	beq.n	7038 <__aeabi_dadd+0x174>
    7036:	e782      	b.n	6f3e <__aeabi_dadd+0x7a>
    7038:	4b8d      	ldr	r3, [pc, #564]	; (7270 <__aeabi_dadd+0x3ac>)
    703a:	08ed      	lsrs	r5, r5, #3
    703c:	0778      	lsls	r0, r7, #29
    703e:	4305      	orrs	r5, r0
    7040:	08fa      	lsrs	r2, r7, #3
    7042:	429c      	cmp	r4, r3
    7044:	d032      	beq.n	70ac <__aeabi_dadd+0x1e8>
    7046:	0312      	lsls	r2, r2, #12
    7048:	0564      	lsls	r4, r4, #21
    704a:	0b12      	lsrs	r2, r2, #12
    704c:	0d64      	lsrs	r4, r4, #21
    704e:	e785      	b.n	6f5c <__aeabi_dadd+0x98>
    7050:	1aa3      	subs	r3, r4, r2
    7052:	2b00      	cmp	r3, #0
    7054:	dc00      	bgt.n	7058 <__aeabi_dadd+0x194>
    7056:	e094      	b.n	7182 <__aeabi_dadd+0x2be>
    7058:	2a00      	cmp	r2, #0
    705a:	d03c      	beq.n	70d6 <__aeabi_dadd+0x212>
    705c:	4a84      	ldr	r2, [pc, #528]	; (7270 <__aeabi_dadd+0x3ac>)
    705e:	4294      	cmp	r4, r2
    7060:	d100      	bne.n	7064 <__aeabi_dadd+0x1a0>
    7062:	e757      	b.n	6f14 <__aeabi_dadd+0x50>
    7064:	2280      	movs	r2, #128	; 0x80
    7066:	0412      	lsls	r2, r2, #16
    7068:	4311      	orrs	r1, r2
    706a:	2b38      	cmp	r3, #56	; 0x38
    706c:	dc00      	bgt.n	7070 <__aeabi_dadd+0x1ac>
    706e:	e105      	b.n	727c <__aeabi_dadd+0x3b8>
    7070:	4663      	mov	r3, ip
    7072:	4319      	orrs	r1, r3
    7074:	1e48      	subs	r0, r1, #1
    7076:	4181      	sbcs	r1, r0
    7078:	2200      	movs	r2, #0
    707a:	b2c8      	uxtb	r0, r1
    707c:	1940      	adds	r0, r0, r5
    707e:	42a8      	cmp	r0, r5
    7080:	419b      	sbcs	r3, r3
    7082:	1c05      	adds	r5, r0, #0
    7084:	19d2      	adds	r2, r2, r7
    7086:	425b      	negs	r3, r3
    7088:	18d7      	adds	r7, r2, r3
    708a:	023b      	lsls	r3, r7, #8
    708c:	d539      	bpl.n	7102 <__aeabi_dadd+0x23e>
    708e:	4b78      	ldr	r3, [pc, #480]	; (7270 <__aeabi_dadd+0x3ac>)
    7090:	3401      	adds	r4, #1
    7092:	429c      	cmp	r4, r3
    7094:	d100      	bne.n	7098 <__aeabi_dadd+0x1d4>
    7096:	e14c      	b.n	7332 <__aeabi_dadd+0x46e>
    7098:	2001      	movs	r0, #1
    709a:	4a76      	ldr	r2, [pc, #472]	; (7274 <__aeabi_dadd+0x3b0>)
    709c:	086b      	lsrs	r3, r5, #1
    709e:	403a      	ands	r2, r7
    70a0:	4028      	ands	r0, r5
    70a2:	4318      	orrs	r0, r3
    70a4:	07d5      	lsls	r5, r2, #31
    70a6:	4305      	orrs	r5, r0
    70a8:	0857      	lsrs	r7, r2, #1
    70aa:	e733      	b.n	6f14 <__aeabi_dadd+0x50>
    70ac:	1c2b      	adds	r3, r5, #0
    70ae:	4313      	orrs	r3, r2
    70b0:	d048      	beq.n	7144 <__aeabi_dadd+0x280>
    70b2:	2380      	movs	r3, #128	; 0x80
    70b4:	031b      	lsls	r3, r3, #12
    70b6:	431a      	orrs	r2, r3
    70b8:	0312      	lsls	r2, r2, #12
    70ba:	0b12      	lsrs	r2, r2, #12
    70bc:	e74e      	b.n	6f5c <__aeabi_dadd+0x98>
    70be:	3801      	subs	r0, #1
    70c0:	2800      	cmp	r0, #0
    70c2:	d178      	bne.n	71b6 <__aeabi_dadd+0x2f2>
    70c4:	4663      	mov	r3, ip
    70c6:	1aee      	subs	r6, r5, r3
    70c8:	42b5      	cmp	r5, r6
    70ca:	419b      	sbcs	r3, r3
    70cc:	1a7a      	subs	r2, r7, r1
    70ce:	425b      	negs	r3, r3
    70d0:	1ad7      	subs	r7, r2, r3
    70d2:	1c35      	adds	r5, r6, #0
    70d4:	e77a      	b.n	6fcc <__aeabi_dadd+0x108>
    70d6:	1c02      	adds	r2, r0, #0
    70d8:	430a      	orrs	r2, r1
    70da:	d100      	bne.n	70de <__aeabi_dadd+0x21a>
    70dc:	e71a      	b.n	6f14 <__aeabi_dadd+0x50>
    70de:	3b01      	subs	r3, #1
    70e0:	2b00      	cmp	r3, #0
    70e2:	d000      	beq.n	70e6 <__aeabi_dadd+0x222>
    70e4:	e0f2      	b.n	72cc <__aeabi_dadd+0x408>
    70e6:	1940      	adds	r0, r0, r5
    70e8:	42a8      	cmp	r0, r5
    70ea:	419b      	sbcs	r3, r3
    70ec:	19ca      	adds	r2, r1, r7
    70ee:	425b      	negs	r3, r3
    70f0:	18d7      	adds	r7, r2, r3
    70f2:	1c05      	adds	r5, r0, #0
    70f4:	e7c9      	b.n	708a <__aeabi_dadd+0x1c6>
    70f6:	1c13      	adds	r3, r2, #0
    70f8:	4333      	orrs	r3, r6
    70fa:	d100      	bne.n	70fe <__aeabi_dadd+0x23a>
    70fc:	e118      	b.n	7330 <__aeabi_dadd+0x46c>
    70fe:	1c17      	adds	r7, r2, #0
    7100:	1c35      	adds	r5, r6, #0
    7102:	4646      	mov	r6, r8
    7104:	076b      	lsls	r3, r5, #29
    7106:	d000      	beq.n	710a <__aeabi_dadd+0x246>
    7108:	e707      	b.n	6f1a <__aeabi_dadd+0x56>
    710a:	e795      	b.n	7038 <__aeabi_dadd+0x174>
    710c:	2800      	cmp	r0, #0
    710e:	d17a      	bne.n	7206 <__aeabi_dadd+0x342>
    7110:	1c62      	adds	r2, r4, #1
    7112:	0552      	lsls	r2, r2, #21
    7114:	0d52      	lsrs	r2, r2, #21
    7116:	2a01      	cmp	r2, #1
    7118:	dc00      	bgt.n	711c <__aeabi_dadd+0x258>
    711a:	e0fb      	b.n	7314 <__aeabi_dadd+0x450>
    711c:	4662      	mov	r2, ip
    711e:	1aaa      	subs	r2, r5, r2
    7120:	4295      	cmp	r5, r2
    7122:	41b6      	sbcs	r6, r6
    7124:	4691      	mov	r9, r2
    7126:	1a78      	subs	r0, r7, r1
    7128:	4272      	negs	r2, r6
    712a:	1a86      	subs	r6, r0, r2
    712c:	0232      	lsls	r2, r6, #8
    712e:	d400      	bmi.n	7132 <__aeabi_dadd+0x26e>
    7130:	e093      	b.n	725a <__aeabi_dadd+0x396>
    7132:	4662      	mov	r2, ip
    7134:	1b55      	subs	r5, r2, r5
    7136:	45ac      	cmp	ip, r5
    7138:	4180      	sbcs	r0, r0
    713a:	1bcf      	subs	r7, r1, r7
    713c:	4240      	negs	r0, r0
    713e:	1a3e      	subs	r6, r7, r0
    7140:	4698      	mov	r8, r3
    7142:	e748      	b.n	6fd6 <__aeabi_dadd+0x112>
    7144:	2200      	movs	r2, #0
    7146:	2500      	movs	r5, #0
    7148:	e708      	b.n	6f5c <__aeabi_dadd+0x98>
    714a:	1c28      	adds	r0, r5, #0
    714c:	f001 fd68 	bl	8c20 <__clzsi2>
    7150:	3020      	adds	r0, #32
    7152:	1c03      	adds	r3, r0, #0
    7154:	3b08      	subs	r3, #8
    7156:	2b1f      	cmp	r3, #31
    7158:	dc00      	bgt.n	715c <__aeabi_dadd+0x298>
    715a:	e747      	b.n	6fec <__aeabi_dadd+0x128>
    715c:	3828      	subs	r0, #40	; 0x28
    715e:	4085      	lsls	r5, r0
    7160:	1c2e      	adds	r6, r5, #0
    7162:	2500      	movs	r5, #0
    7164:	429c      	cmp	r4, r3
    7166:	dc00      	bgt.n	716a <__aeabi_dadd+0x2a6>
    7168:	e74c      	b.n	7004 <__aeabi_dadd+0x140>
    716a:	4a42      	ldr	r2, [pc, #264]	; (7274 <__aeabi_dadd+0x3b0>)
    716c:	1ae4      	subs	r4, r4, r3
    716e:	4016      	ands	r6, r2
    7170:	1c37      	adds	r7, r6, #0
    7172:	e6cf      	b.n	6f14 <__aeabi_dadd+0x50>
    7174:	4663      	mov	r3, ip
    7176:	4319      	orrs	r1, r3
    7178:	1e4b      	subs	r3, r1, #1
    717a:	4199      	sbcs	r1, r3
    717c:	2200      	movs	r2, #0
    717e:	b2cb      	uxtb	r3, r1
    7180:	e71d      	b.n	6fbe <__aeabi_dadd+0xfa>
    7182:	2b00      	cmp	r3, #0
    7184:	d000      	beq.n	7188 <__aeabi_dadd+0x2c4>
    7186:	e0f2      	b.n	736e <__aeabi_dadd+0x4aa>
    7188:	1c60      	adds	r0, r4, #1
    718a:	0543      	lsls	r3, r0, #21
    718c:	0d5b      	lsrs	r3, r3, #21
    718e:	2b01      	cmp	r3, #1
    7190:	dc00      	bgt.n	7194 <__aeabi_dadd+0x2d0>
    7192:	e0a4      	b.n	72de <__aeabi_dadd+0x41a>
    7194:	4b36      	ldr	r3, [pc, #216]	; (7270 <__aeabi_dadd+0x3ac>)
    7196:	4298      	cmp	r0, r3
    7198:	d100      	bne.n	719c <__aeabi_dadd+0x2d8>
    719a:	e121      	b.n	73e0 <__aeabi_dadd+0x51c>
    719c:	4663      	mov	r3, ip
    719e:	195c      	adds	r4, r3, r5
    71a0:	42ac      	cmp	r4, r5
    71a2:	419b      	sbcs	r3, r3
    71a4:	19cf      	adds	r7, r1, r7
    71a6:	425b      	negs	r3, r3
    71a8:	18fa      	adds	r2, r7, r3
    71aa:	0864      	lsrs	r4, r4, #1
    71ac:	07d5      	lsls	r5, r2, #31
    71ae:	4325      	orrs	r5, r4
    71b0:	0857      	lsrs	r7, r2, #1
    71b2:	1c04      	adds	r4, r0, #0
    71b4:	e6ae      	b.n	6f14 <__aeabi_dadd+0x50>
    71b6:	4b2e      	ldr	r3, [pc, #184]	; (7270 <__aeabi_dadd+0x3ac>)
    71b8:	429c      	cmp	r4, r3
    71ba:	d000      	beq.n	71be <__aeabi_dadd+0x2fa>
    71bc:	e6ea      	b.n	6f94 <__aeabi_dadd+0xd0>
    71be:	e6a9      	b.n	6f14 <__aeabi_dadd+0x50>
    71c0:	1c21      	adds	r1, r4, #0
    71c2:	1c33      	adds	r3, r6, #0
    71c4:	391f      	subs	r1, #31
    71c6:	40cb      	lsrs	r3, r1
    71c8:	1c19      	adds	r1, r3, #0
    71ca:	2a20      	cmp	r2, #32
    71cc:	d100      	bne.n	71d0 <__aeabi_dadd+0x30c>
    71ce:	e082      	b.n	72d6 <__aeabi_dadd+0x412>
    71d0:	233f      	movs	r3, #63	; 0x3f
    71d2:	1b1c      	subs	r4, r3, r4
    71d4:	40a6      	lsls	r6, r4
    71d6:	4335      	orrs	r5, r6
    71d8:	1e6e      	subs	r6, r5, #1
    71da:	41b5      	sbcs	r5, r6
    71dc:	2700      	movs	r7, #0
    71de:	430d      	orrs	r5, r1
    71e0:	2400      	movs	r4, #0
    71e2:	e78e      	b.n	7102 <__aeabi_dadd+0x23e>
    71e4:	1c03      	adds	r3, r0, #0
    71e6:	1c0e      	adds	r6, r1, #0
    71e8:	3b20      	subs	r3, #32
    71ea:	40de      	lsrs	r6, r3
    71ec:	2820      	cmp	r0, #32
    71ee:	d074      	beq.n	72da <__aeabi_dadd+0x416>
    71f0:	2340      	movs	r3, #64	; 0x40
    71f2:	1a1b      	subs	r3, r3, r0
    71f4:	4099      	lsls	r1, r3
    71f6:	1c0b      	adds	r3, r1, #0
    71f8:	4662      	mov	r2, ip
    71fa:	4313      	orrs	r3, r2
    71fc:	1e59      	subs	r1, r3, #1
    71fe:	418b      	sbcs	r3, r1
    7200:	2200      	movs	r2, #0
    7202:	4333      	orrs	r3, r6
    7204:	e6db      	b.n	6fbe <__aeabi_dadd+0xfa>
    7206:	2c00      	cmp	r4, #0
    7208:	d050      	beq.n	72ac <__aeabi_dadd+0x3e8>
    720a:	4c19      	ldr	r4, [pc, #100]	; (7270 <__aeabi_dadd+0x3ac>)
    720c:	42a2      	cmp	r2, r4
    720e:	d100      	bne.n	7212 <__aeabi_dadd+0x34e>
    7210:	e0a8      	b.n	7364 <__aeabi_dadd+0x4a0>
    7212:	2480      	movs	r4, #128	; 0x80
    7214:	0424      	lsls	r4, r4, #16
    7216:	4240      	negs	r0, r0
    7218:	4327      	orrs	r7, r4
    721a:	2838      	cmp	r0, #56	; 0x38
    721c:	dd00      	ble.n	7220 <__aeabi_dadd+0x35c>
    721e:	e0d9      	b.n	73d4 <__aeabi_dadd+0x510>
    7220:	281f      	cmp	r0, #31
    7222:	dd00      	ble.n	7226 <__aeabi_dadd+0x362>
    7224:	e139      	b.n	749a <__aeabi_dadd+0x5d6>
    7226:	2420      	movs	r4, #32
    7228:	1c3e      	adds	r6, r7, #0
    722a:	1a24      	subs	r4, r4, r0
    722c:	40a6      	lsls	r6, r4
    722e:	46b0      	mov	r8, r6
    7230:	1c2e      	adds	r6, r5, #0
    7232:	46a1      	mov	r9, r4
    7234:	40c6      	lsrs	r6, r0
    7236:	4644      	mov	r4, r8
    7238:	4326      	orrs	r6, r4
    723a:	464c      	mov	r4, r9
    723c:	40a5      	lsls	r5, r4
    723e:	1e6c      	subs	r4, r5, #1
    7240:	41a5      	sbcs	r5, r4
    7242:	40c7      	lsrs	r7, r0
    7244:	4335      	orrs	r5, r6
    7246:	4660      	mov	r0, ip
    7248:	1b45      	subs	r5, r0, r5
    724a:	1bcf      	subs	r7, r1, r7
    724c:	45ac      	cmp	ip, r5
    724e:	4189      	sbcs	r1, r1
    7250:	4249      	negs	r1, r1
    7252:	1a7f      	subs	r7, r7, r1
    7254:	1c14      	adds	r4, r2, #0
    7256:	4698      	mov	r8, r3
    7258:	e6b8      	b.n	6fcc <__aeabi_dadd+0x108>
    725a:	464b      	mov	r3, r9
    725c:	464d      	mov	r5, r9
    725e:	4333      	orrs	r3, r6
    7260:	d000      	beq.n	7264 <__aeabi_dadd+0x3a0>
    7262:	e6b8      	b.n	6fd6 <__aeabi_dadd+0x112>
    7264:	2600      	movs	r6, #0
    7266:	2700      	movs	r7, #0
    7268:	2400      	movs	r4, #0
    726a:	2500      	movs	r5, #0
    726c:	e6e4      	b.n	7038 <__aeabi_dadd+0x174>
    726e:	46c0      	nop			; (mov r8, r8)
    7270:	000007ff 	.word	0x000007ff
    7274:	ff7fffff 	.word	0xff7fffff
    7278:	800fffff 	.word	0x800fffff
    727c:	2b1f      	cmp	r3, #31
    727e:	dc5b      	bgt.n	7338 <__aeabi_dadd+0x474>
    7280:	2220      	movs	r2, #32
    7282:	1c08      	adds	r0, r1, #0
    7284:	1ad2      	subs	r2, r2, r3
    7286:	4090      	lsls	r0, r2
    7288:	4681      	mov	r9, r0
    728a:	4660      	mov	r0, ip
    728c:	4692      	mov	sl, r2
    728e:	40d8      	lsrs	r0, r3
    7290:	464a      	mov	r2, r9
    7292:	4310      	orrs	r0, r2
    7294:	4681      	mov	r9, r0
    7296:	4652      	mov	r2, sl
    7298:	4660      	mov	r0, ip
    729a:	4090      	lsls	r0, r2
    729c:	1c02      	adds	r2, r0, #0
    729e:	1e50      	subs	r0, r2, #1
    72a0:	4182      	sbcs	r2, r0
    72a2:	4648      	mov	r0, r9
    72a4:	4310      	orrs	r0, r2
    72a6:	1c0a      	adds	r2, r1, #0
    72a8:	40da      	lsrs	r2, r3
    72aa:	e6e7      	b.n	707c <__aeabi_dadd+0x1b8>
    72ac:	1c3c      	adds	r4, r7, #0
    72ae:	432c      	orrs	r4, r5
    72b0:	d058      	beq.n	7364 <__aeabi_dadd+0x4a0>
    72b2:	43c0      	mvns	r0, r0
    72b4:	2800      	cmp	r0, #0
    72b6:	d151      	bne.n	735c <__aeabi_dadd+0x498>
    72b8:	4660      	mov	r0, ip
    72ba:	1b45      	subs	r5, r0, r5
    72bc:	45ac      	cmp	ip, r5
    72be:	4180      	sbcs	r0, r0
    72c0:	1bcf      	subs	r7, r1, r7
    72c2:	4240      	negs	r0, r0
    72c4:	1a3f      	subs	r7, r7, r0
    72c6:	1c14      	adds	r4, r2, #0
    72c8:	4698      	mov	r8, r3
    72ca:	e67f      	b.n	6fcc <__aeabi_dadd+0x108>
    72cc:	4a8f      	ldr	r2, [pc, #572]	; (750c <__aeabi_dadd+0x648>)
    72ce:	4294      	cmp	r4, r2
    72d0:	d000      	beq.n	72d4 <__aeabi_dadd+0x410>
    72d2:	e6ca      	b.n	706a <__aeabi_dadd+0x1a6>
    72d4:	e61e      	b.n	6f14 <__aeabi_dadd+0x50>
    72d6:	2600      	movs	r6, #0
    72d8:	e77d      	b.n	71d6 <__aeabi_dadd+0x312>
    72da:	2300      	movs	r3, #0
    72dc:	e78c      	b.n	71f8 <__aeabi_dadd+0x334>
    72de:	1c3b      	adds	r3, r7, #0
    72e0:	432b      	orrs	r3, r5
    72e2:	2c00      	cmp	r4, #0
    72e4:	d000      	beq.n	72e8 <__aeabi_dadd+0x424>
    72e6:	e0bd      	b.n	7464 <__aeabi_dadd+0x5a0>
    72e8:	2b00      	cmp	r3, #0
    72ea:	d100      	bne.n	72ee <__aeabi_dadd+0x42a>
    72ec:	e0f5      	b.n	74da <__aeabi_dadd+0x616>
    72ee:	4663      	mov	r3, ip
    72f0:	430b      	orrs	r3, r1
    72f2:	d100      	bne.n	72f6 <__aeabi_dadd+0x432>
    72f4:	e60e      	b.n	6f14 <__aeabi_dadd+0x50>
    72f6:	4663      	mov	r3, ip
    72f8:	195b      	adds	r3, r3, r5
    72fa:	42ab      	cmp	r3, r5
    72fc:	4180      	sbcs	r0, r0
    72fe:	19ca      	adds	r2, r1, r7
    7300:	4240      	negs	r0, r0
    7302:	1817      	adds	r7, r2, r0
    7304:	023a      	lsls	r2, r7, #8
    7306:	d400      	bmi.n	730a <__aeabi_dadd+0x446>
    7308:	e0fc      	b.n	7504 <__aeabi_dadd+0x640>
    730a:	4a81      	ldr	r2, [pc, #516]	; (7510 <__aeabi_dadd+0x64c>)
    730c:	1c1d      	adds	r5, r3, #0
    730e:	4017      	ands	r7, r2
    7310:	3401      	adds	r4, #1
    7312:	e5ff      	b.n	6f14 <__aeabi_dadd+0x50>
    7314:	1c3a      	adds	r2, r7, #0
    7316:	432a      	orrs	r2, r5
    7318:	2c00      	cmp	r4, #0
    731a:	d151      	bne.n	73c0 <__aeabi_dadd+0x4fc>
    731c:	2a00      	cmp	r2, #0
    731e:	d000      	beq.n	7322 <__aeabi_dadd+0x45e>
    7320:	e085      	b.n	742e <__aeabi_dadd+0x56a>
    7322:	4662      	mov	r2, ip
    7324:	430a      	orrs	r2, r1
    7326:	d003      	beq.n	7330 <__aeabi_dadd+0x46c>
    7328:	1c0f      	adds	r7, r1, #0
    732a:	4665      	mov	r5, ip
    732c:	4698      	mov	r8, r3
    732e:	e5f1      	b.n	6f14 <__aeabi_dadd+0x50>
    7330:	2600      	movs	r6, #0
    7332:	2700      	movs	r7, #0
    7334:	2500      	movs	r5, #0
    7336:	e67f      	b.n	7038 <__aeabi_dadd+0x174>
    7338:	1c18      	adds	r0, r3, #0
    733a:	1c0a      	adds	r2, r1, #0
    733c:	3820      	subs	r0, #32
    733e:	40c2      	lsrs	r2, r0
    7340:	2b20      	cmp	r3, #32
    7342:	d100      	bne.n	7346 <__aeabi_dadd+0x482>
    7344:	e0a7      	b.n	7496 <__aeabi_dadd+0x5d2>
    7346:	2040      	movs	r0, #64	; 0x40
    7348:	1ac0      	subs	r0, r0, r3
    734a:	4081      	lsls	r1, r0
    734c:	1c08      	adds	r0, r1, #0
    734e:	4663      	mov	r3, ip
    7350:	4318      	orrs	r0, r3
    7352:	1e41      	subs	r1, r0, #1
    7354:	4188      	sbcs	r0, r1
    7356:	4310      	orrs	r0, r2
    7358:	2200      	movs	r2, #0
    735a:	e68f      	b.n	707c <__aeabi_dadd+0x1b8>
    735c:	4c6b      	ldr	r4, [pc, #428]	; (750c <__aeabi_dadd+0x648>)
    735e:	42a2      	cmp	r2, r4
    7360:	d000      	beq.n	7364 <__aeabi_dadd+0x4a0>
    7362:	e75a      	b.n	721a <__aeabi_dadd+0x356>
    7364:	1c0f      	adds	r7, r1, #0
    7366:	4665      	mov	r5, ip
    7368:	1c14      	adds	r4, r2, #0
    736a:	4698      	mov	r8, r3
    736c:	e5d2      	b.n	6f14 <__aeabi_dadd+0x50>
    736e:	2c00      	cmp	r4, #0
    7370:	d13a      	bne.n	73e8 <__aeabi_dadd+0x524>
    7372:	1c38      	adds	r0, r7, #0
    7374:	4328      	orrs	r0, r5
    7376:	d071      	beq.n	745c <__aeabi_dadd+0x598>
    7378:	43db      	mvns	r3, r3
    737a:	2b00      	cmp	r3, #0
    737c:	d018      	beq.n	73b0 <__aeabi_dadd+0x4ec>
    737e:	4863      	ldr	r0, [pc, #396]	; (750c <__aeabi_dadd+0x648>)
    7380:	4282      	cmp	r2, r0
    7382:	d06b      	beq.n	745c <__aeabi_dadd+0x598>
    7384:	2b38      	cmp	r3, #56	; 0x38
    7386:	dd00      	ble.n	738a <__aeabi_dadd+0x4c6>
    7388:	e09d      	b.n	74c6 <__aeabi_dadd+0x602>
    738a:	2b1f      	cmp	r3, #31
    738c:	dd00      	ble.n	7390 <__aeabi_dadd+0x4cc>
    738e:	e0a7      	b.n	74e0 <__aeabi_dadd+0x61c>
    7390:	2020      	movs	r0, #32
    7392:	1c3c      	adds	r4, r7, #0
    7394:	1ac0      	subs	r0, r0, r3
    7396:	4084      	lsls	r4, r0
    7398:	46a1      	mov	r9, r4
    739a:	1c2c      	adds	r4, r5, #0
    739c:	4682      	mov	sl, r0
    739e:	40dc      	lsrs	r4, r3
    73a0:	4648      	mov	r0, r9
    73a2:	4304      	orrs	r4, r0
    73a4:	4650      	mov	r0, sl
    73a6:	4085      	lsls	r5, r0
    73a8:	1e68      	subs	r0, r5, #1
    73aa:	4185      	sbcs	r5, r0
    73ac:	40df      	lsrs	r7, r3
    73ae:	4325      	orrs	r5, r4
    73b0:	4465      	add	r5, ip
    73b2:	4565      	cmp	r5, ip
    73b4:	419b      	sbcs	r3, r3
    73b6:	187f      	adds	r7, r7, r1
    73b8:	425b      	negs	r3, r3
    73ba:	18ff      	adds	r7, r7, r3
    73bc:	1c14      	adds	r4, r2, #0
    73be:	e664      	b.n	708a <__aeabi_dadd+0x1c6>
    73c0:	2a00      	cmp	r2, #0
    73c2:	d119      	bne.n	73f8 <__aeabi_dadd+0x534>
    73c4:	4662      	mov	r2, ip
    73c6:	430a      	orrs	r2, r1
    73c8:	d077      	beq.n	74ba <__aeabi_dadd+0x5f6>
    73ca:	1c0f      	adds	r7, r1, #0
    73cc:	4665      	mov	r5, ip
    73ce:	4698      	mov	r8, r3
    73d0:	4c4e      	ldr	r4, [pc, #312]	; (750c <__aeabi_dadd+0x648>)
    73d2:	e59f      	b.n	6f14 <__aeabi_dadd+0x50>
    73d4:	433d      	orrs	r5, r7
    73d6:	1e6f      	subs	r7, r5, #1
    73d8:	41bd      	sbcs	r5, r7
    73da:	2700      	movs	r7, #0
    73dc:	b2ed      	uxtb	r5, r5
    73de:	e732      	b.n	7246 <__aeabi_dadd+0x382>
    73e0:	1c04      	adds	r4, r0, #0
    73e2:	2700      	movs	r7, #0
    73e4:	2500      	movs	r5, #0
    73e6:	e627      	b.n	7038 <__aeabi_dadd+0x174>
    73e8:	4848      	ldr	r0, [pc, #288]	; (750c <__aeabi_dadd+0x648>)
    73ea:	4282      	cmp	r2, r0
    73ec:	d036      	beq.n	745c <__aeabi_dadd+0x598>
    73ee:	2080      	movs	r0, #128	; 0x80
    73f0:	0400      	lsls	r0, r0, #16
    73f2:	425b      	negs	r3, r3
    73f4:	4307      	orrs	r7, r0
    73f6:	e7c5      	b.n	7384 <__aeabi_dadd+0x4c0>
    73f8:	4662      	mov	r2, ip
    73fa:	430a      	orrs	r2, r1
    73fc:	d049      	beq.n	7492 <__aeabi_dadd+0x5ce>
    73fe:	2480      	movs	r4, #128	; 0x80
    7400:	08ed      	lsrs	r5, r5, #3
    7402:	0778      	lsls	r0, r7, #29
    7404:	08fa      	lsrs	r2, r7, #3
    7406:	0324      	lsls	r4, r4, #12
    7408:	4328      	orrs	r0, r5
    740a:	4222      	tst	r2, r4
    740c:	d009      	beq.n	7422 <__aeabi_dadd+0x55e>
    740e:	08ce      	lsrs	r6, r1, #3
    7410:	4226      	tst	r6, r4
    7412:	d106      	bne.n	7422 <__aeabi_dadd+0x55e>
    7414:	4662      	mov	r2, ip
    7416:	074f      	lsls	r7, r1, #29
    7418:	1c38      	adds	r0, r7, #0
    741a:	08d2      	lsrs	r2, r2, #3
    741c:	4310      	orrs	r0, r2
    741e:	4698      	mov	r8, r3
    7420:	1c32      	adds	r2, r6, #0
    7422:	00d2      	lsls	r2, r2, #3
    7424:	0f47      	lsrs	r7, r0, #29
    7426:	4317      	orrs	r7, r2
    7428:	00c5      	lsls	r5, r0, #3
    742a:	4c38      	ldr	r4, [pc, #224]	; (750c <__aeabi_dadd+0x648>)
    742c:	e572      	b.n	6f14 <__aeabi_dadd+0x50>
    742e:	4662      	mov	r2, ip
    7430:	430a      	orrs	r2, r1
    7432:	d100      	bne.n	7436 <__aeabi_dadd+0x572>
    7434:	e56e      	b.n	6f14 <__aeabi_dadd+0x50>
    7436:	4662      	mov	r2, ip
    7438:	1aae      	subs	r6, r5, r2
    743a:	42b5      	cmp	r5, r6
    743c:	4192      	sbcs	r2, r2
    743e:	1a78      	subs	r0, r7, r1
    7440:	4252      	negs	r2, r2
    7442:	1a82      	subs	r2, r0, r2
    7444:	0210      	lsls	r0, r2, #8
    7446:	d400      	bmi.n	744a <__aeabi_dadd+0x586>
    7448:	e655      	b.n	70f6 <__aeabi_dadd+0x232>
    744a:	4662      	mov	r2, ip
    744c:	1b55      	subs	r5, r2, r5
    744e:	45ac      	cmp	ip, r5
    7450:	4180      	sbcs	r0, r0
    7452:	1bca      	subs	r2, r1, r7
    7454:	4240      	negs	r0, r0
    7456:	1a17      	subs	r7, r2, r0
    7458:	4698      	mov	r8, r3
    745a:	e55b      	b.n	6f14 <__aeabi_dadd+0x50>
    745c:	1c0f      	adds	r7, r1, #0
    745e:	4665      	mov	r5, ip
    7460:	1c14      	adds	r4, r2, #0
    7462:	e557      	b.n	6f14 <__aeabi_dadd+0x50>
    7464:	2b00      	cmp	r3, #0
    7466:	d034      	beq.n	74d2 <__aeabi_dadd+0x60e>
    7468:	4663      	mov	r3, ip
    746a:	430b      	orrs	r3, r1
    746c:	d011      	beq.n	7492 <__aeabi_dadd+0x5ce>
    746e:	2480      	movs	r4, #128	; 0x80
    7470:	08ed      	lsrs	r5, r5, #3
    7472:	0778      	lsls	r0, r7, #29
    7474:	08fa      	lsrs	r2, r7, #3
    7476:	0324      	lsls	r4, r4, #12
    7478:	4328      	orrs	r0, r5
    747a:	4222      	tst	r2, r4
    747c:	d0d1      	beq.n	7422 <__aeabi_dadd+0x55e>
    747e:	08cb      	lsrs	r3, r1, #3
    7480:	4223      	tst	r3, r4
    7482:	d1ce      	bne.n	7422 <__aeabi_dadd+0x55e>
    7484:	4662      	mov	r2, ip
    7486:	074f      	lsls	r7, r1, #29
    7488:	1c38      	adds	r0, r7, #0
    748a:	08d2      	lsrs	r2, r2, #3
    748c:	4310      	orrs	r0, r2
    748e:	1c1a      	adds	r2, r3, #0
    7490:	e7c7      	b.n	7422 <__aeabi_dadd+0x55e>
    7492:	4c1e      	ldr	r4, [pc, #120]	; (750c <__aeabi_dadd+0x648>)
    7494:	e53e      	b.n	6f14 <__aeabi_dadd+0x50>
    7496:	2000      	movs	r0, #0
    7498:	e759      	b.n	734e <__aeabi_dadd+0x48a>
    749a:	1c04      	adds	r4, r0, #0
    749c:	1c3e      	adds	r6, r7, #0
    749e:	3c20      	subs	r4, #32
    74a0:	40e6      	lsrs	r6, r4
    74a2:	1c34      	adds	r4, r6, #0
    74a4:	2820      	cmp	r0, #32
    74a6:	d02b      	beq.n	7500 <__aeabi_dadd+0x63c>
    74a8:	2640      	movs	r6, #64	; 0x40
    74aa:	1a30      	subs	r0, r6, r0
    74ac:	4087      	lsls	r7, r0
    74ae:	433d      	orrs	r5, r7
    74b0:	1e6f      	subs	r7, r5, #1
    74b2:	41bd      	sbcs	r5, r7
    74b4:	2700      	movs	r7, #0
    74b6:	4325      	orrs	r5, r4
    74b8:	e6c5      	b.n	7246 <__aeabi_dadd+0x382>
    74ba:	2780      	movs	r7, #128	; 0x80
    74bc:	2600      	movs	r6, #0
    74be:	03ff      	lsls	r7, r7, #15
    74c0:	4c12      	ldr	r4, [pc, #72]	; (750c <__aeabi_dadd+0x648>)
    74c2:	2500      	movs	r5, #0
    74c4:	e5b8      	b.n	7038 <__aeabi_dadd+0x174>
    74c6:	433d      	orrs	r5, r7
    74c8:	1e6f      	subs	r7, r5, #1
    74ca:	41bd      	sbcs	r5, r7
    74cc:	2700      	movs	r7, #0
    74ce:	b2ed      	uxtb	r5, r5
    74d0:	e76e      	b.n	73b0 <__aeabi_dadd+0x4ec>
    74d2:	1c0f      	adds	r7, r1, #0
    74d4:	4665      	mov	r5, ip
    74d6:	4c0d      	ldr	r4, [pc, #52]	; (750c <__aeabi_dadd+0x648>)
    74d8:	e51c      	b.n	6f14 <__aeabi_dadd+0x50>
    74da:	1c0f      	adds	r7, r1, #0
    74dc:	4665      	mov	r5, ip
    74de:	e519      	b.n	6f14 <__aeabi_dadd+0x50>
    74e0:	1c1c      	adds	r4, r3, #0
    74e2:	1c38      	adds	r0, r7, #0
    74e4:	3c20      	subs	r4, #32
    74e6:	40e0      	lsrs	r0, r4
    74e8:	1c04      	adds	r4, r0, #0
    74ea:	2b20      	cmp	r3, #32
    74ec:	d00c      	beq.n	7508 <__aeabi_dadd+0x644>
    74ee:	2040      	movs	r0, #64	; 0x40
    74f0:	1ac3      	subs	r3, r0, r3
    74f2:	409f      	lsls	r7, r3
    74f4:	433d      	orrs	r5, r7
    74f6:	1e6f      	subs	r7, r5, #1
    74f8:	41bd      	sbcs	r5, r7
    74fa:	2700      	movs	r7, #0
    74fc:	4325      	orrs	r5, r4
    74fe:	e757      	b.n	73b0 <__aeabi_dadd+0x4ec>
    7500:	2700      	movs	r7, #0
    7502:	e7d4      	b.n	74ae <__aeabi_dadd+0x5ea>
    7504:	1c1d      	adds	r5, r3, #0
    7506:	e5fc      	b.n	7102 <__aeabi_dadd+0x23e>
    7508:	2700      	movs	r7, #0
    750a:	e7f3      	b.n	74f4 <__aeabi_dadd+0x630>
    750c:	000007ff 	.word	0x000007ff
    7510:	ff7fffff 	.word	0xff7fffff

00007514 <__aeabi_ddiv>:
    7514:	b5f0      	push	{r4, r5, r6, r7, lr}
    7516:	465f      	mov	r7, fp
    7518:	4656      	mov	r6, sl
    751a:	464d      	mov	r5, r9
    751c:	4644      	mov	r4, r8
    751e:	b4f0      	push	{r4, r5, r6, r7}
    7520:	030f      	lsls	r7, r1, #12
    7522:	b087      	sub	sp, #28
    7524:	4698      	mov	r8, r3
    7526:	004d      	lsls	r5, r1, #1
    7528:	0b3b      	lsrs	r3, r7, #12
    752a:	0fcc      	lsrs	r4, r1, #31
    752c:	1c06      	adds	r6, r0, #0
    752e:	4692      	mov	sl, r2
    7530:	4681      	mov	r9, r0
    7532:	469b      	mov	fp, r3
    7534:	0d6d      	lsrs	r5, r5, #21
    7536:	9401      	str	r4, [sp, #4]
    7538:	d06b      	beq.n	7612 <__aeabi_ddiv+0xfe>
    753a:	4b66      	ldr	r3, [pc, #408]	; (76d4 <__aeabi_ddiv+0x1c0>)
    753c:	429d      	cmp	r5, r3
    753e:	d035      	beq.n	75ac <__aeabi_ddiv+0x98>
    7540:	2780      	movs	r7, #128	; 0x80
    7542:	465b      	mov	r3, fp
    7544:	037f      	lsls	r7, r7, #13
    7546:	431f      	orrs	r7, r3
    7548:	00f3      	lsls	r3, r6, #3
    754a:	4699      	mov	r9, r3
    754c:	4b62      	ldr	r3, [pc, #392]	; (76d8 <__aeabi_ddiv+0x1c4>)
    754e:	00ff      	lsls	r7, r7, #3
    7550:	0f40      	lsrs	r0, r0, #29
    7552:	469c      	mov	ip, r3
    7554:	4307      	orrs	r7, r0
    7556:	2300      	movs	r3, #0
    7558:	46bb      	mov	fp, r7
    755a:	2600      	movs	r6, #0
    755c:	4465      	add	r5, ip
    755e:	9300      	str	r3, [sp, #0]
    7560:	4642      	mov	r2, r8
    7562:	0317      	lsls	r7, r2, #12
    7564:	0050      	lsls	r0, r2, #1
    7566:	0fd2      	lsrs	r2, r2, #31
    7568:	4653      	mov	r3, sl
    756a:	0b3f      	lsrs	r7, r7, #12
    756c:	0d40      	lsrs	r0, r0, #21
    756e:	4690      	mov	r8, r2
    7570:	d100      	bne.n	7574 <__aeabi_ddiv+0x60>
    7572:	e072      	b.n	765a <__aeabi_ddiv+0x146>
    7574:	4a57      	ldr	r2, [pc, #348]	; (76d4 <__aeabi_ddiv+0x1c0>)
    7576:	4290      	cmp	r0, r2
    7578:	d067      	beq.n	764a <__aeabi_ddiv+0x136>
    757a:	2380      	movs	r3, #128	; 0x80
    757c:	035b      	lsls	r3, r3, #13
    757e:	431f      	orrs	r7, r3
    7580:	4653      	mov	r3, sl
    7582:	4a55      	ldr	r2, [pc, #340]	; (76d8 <__aeabi_ddiv+0x1c4>)
    7584:	0f5b      	lsrs	r3, r3, #29
    7586:	00ff      	lsls	r7, r7, #3
    7588:	431f      	orrs	r7, r3
    758a:	4694      	mov	ip, r2
    758c:	4653      	mov	r3, sl
    758e:	2100      	movs	r1, #0
    7590:	00db      	lsls	r3, r3, #3
    7592:	4460      	add	r0, ip
    7594:	4642      	mov	r2, r8
    7596:	4062      	eors	r2, r4
    7598:	4692      	mov	sl, r2
    759a:	1a2d      	subs	r5, r5, r0
    759c:	430e      	orrs	r6, r1
    759e:	2e0f      	cmp	r6, #15
    75a0:	d900      	bls.n	75a4 <__aeabi_ddiv+0x90>
    75a2:	e0a1      	b.n	76e8 <__aeabi_ddiv+0x1d4>
    75a4:	484d      	ldr	r0, [pc, #308]	; (76dc <__aeabi_ddiv+0x1c8>)
    75a6:	00b6      	lsls	r6, r6, #2
    75a8:	5980      	ldr	r0, [r0, r6]
    75aa:	4687      	mov	pc, r0
    75ac:	465b      	mov	r3, fp
    75ae:	431e      	orrs	r6, r3
    75b0:	d000      	beq.n	75b4 <__aeabi_ddiv+0xa0>
    75b2:	e076      	b.n	76a2 <__aeabi_ddiv+0x18e>
    75b4:	2300      	movs	r3, #0
    75b6:	469b      	mov	fp, r3
    75b8:	4699      	mov	r9, r3
    75ba:	3302      	adds	r3, #2
    75bc:	2608      	movs	r6, #8
    75be:	9300      	str	r3, [sp, #0]
    75c0:	e7ce      	b.n	7560 <__aeabi_ddiv+0x4c>
    75c2:	4699      	mov	r9, r3
    75c4:	4643      	mov	r3, r8
    75c6:	46bb      	mov	fp, r7
    75c8:	9301      	str	r3, [sp, #4]
    75ca:	9100      	str	r1, [sp, #0]
    75cc:	9b00      	ldr	r3, [sp, #0]
    75ce:	2b02      	cmp	r3, #2
    75d0:	d16b      	bne.n	76aa <__aeabi_ddiv+0x196>
    75d2:	9b01      	ldr	r3, [sp, #4]
    75d4:	469a      	mov	sl, r3
    75d6:	2100      	movs	r1, #0
    75d8:	4653      	mov	r3, sl
    75da:	2201      	movs	r2, #1
    75dc:	2700      	movs	r7, #0
    75de:	4689      	mov	r9, r1
    75e0:	401a      	ands	r2, r3
    75e2:	4b3c      	ldr	r3, [pc, #240]	; (76d4 <__aeabi_ddiv+0x1c0>)
    75e4:	2100      	movs	r1, #0
    75e6:	033f      	lsls	r7, r7, #12
    75e8:	0d0c      	lsrs	r4, r1, #20
    75ea:	0524      	lsls	r4, r4, #20
    75ec:	0b3f      	lsrs	r7, r7, #12
    75ee:	4327      	orrs	r7, r4
    75f0:	4c3b      	ldr	r4, [pc, #236]	; (76e0 <__aeabi_ddiv+0x1cc>)
    75f2:	051b      	lsls	r3, r3, #20
    75f4:	4027      	ands	r7, r4
    75f6:	431f      	orrs	r7, r3
    75f8:	007f      	lsls	r7, r7, #1
    75fa:	07d2      	lsls	r2, r2, #31
    75fc:	087f      	lsrs	r7, r7, #1
    75fe:	4317      	orrs	r7, r2
    7600:	4648      	mov	r0, r9
    7602:	1c39      	adds	r1, r7, #0
    7604:	b007      	add	sp, #28
    7606:	bc3c      	pop	{r2, r3, r4, r5}
    7608:	4690      	mov	r8, r2
    760a:	4699      	mov	r9, r3
    760c:	46a2      	mov	sl, r4
    760e:	46ab      	mov	fp, r5
    7610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7612:	4303      	orrs	r3, r0
    7614:	d03e      	beq.n	7694 <__aeabi_ddiv+0x180>
    7616:	465b      	mov	r3, fp
    7618:	2b00      	cmp	r3, #0
    761a:	d100      	bne.n	761e <__aeabi_ddiv+0x10a>
    761c:	e19c      	b.n	7958 <__aeabi_ddiv+0x444>
    761e:	4658      	mov	r0, fp
    7620:	f001 fafe 	bl	8c20 <__clzsi2>
    7624:	2328      	movs	r3, #40	; 0x28
    7626:	1c31      	adds	r1, r6, #0
    7628:	1a1b      	subs	r3, r3, r0
    762a:	1c02      	adds	r2, r0, #0
    762c:	465f      	mov	r7, fp
    762e:	40d9      	lsrs	r1, r3
    7630:	3a08      	subs	r2, #8
    7632:	4097      	lsls	r7, r2
    7634:	1c0b      	adds	r3, r1, #0
    7636:	4096      	lsls	r6, r2
    7638:	433b      	orrs	r3, r7
    763a:	469b      	mov	fp, r3
    763c:	46b1      	mov	r9, r6
    763e:	2300      	movs	r3, #0
    7640:	4d28      	ldr	r5, [pc, #160]	; (76e4 <__aeabi_ddiv+0x1d0>)
    7642:	2600      	movs	r6, #0
    7644:	1a2d      	subs	r5, r5, r0
    7646:	9300      	str	r3, [sp, #0]
    7648:	e78a      	b.n	7560 <__aeabi_ddiv+0x4c>
    764a:	4652      	mov	r2, sl
    764c:	2103      	movs	r1, #3
    764e:	433a      	orrs	r2, r7
    7650:	d1a0      	bne.n	7594 <__aeabi_ddiv+0x80>
    7652:	2700      	movs	r7, #0
    7654:	2300      	movs	r3, #0
    7656:	2102      	movs	r1, #2
    7658:	e79c      	b.n	7594 <__aeabi_ddiv+0x80>
    765a:	4652      	mov	r2, sl
    765c:	433a      	orrs	r2, r7
    765e:	d015      	beq.n	768c <__aeabi_ddiv+0x178>
    7660:	2f00      	cmp	r7, #0
    7662:	d100      	bne.n	7666 <__aeabi_ddiv+0x152>
    7664:	e185      	b.n	7972 <__aeabi_ddiv+0x45e>
    7666:	1c38      	adds	r0, r7, #0
    7668:	f001 fada 	bl	8c20 <__clzsi2>
    766c:	1c02      	adds	r2, r0, #0
    766e:	2128      	movs	r1, #40	; 0x28
    7670:	4650      	mov	r0, sl
    7672:	1a89      	subs	r1, r1, r2
    7674:	1c13      	adds	r3, r2, #0
    7676:	40c8      	lsrs	r0, r1
    7678:	4651      	mov	r1, sl
    767a:	3b08      	subs	r3, #8
    767c:	4099      	lsls	r1, r3
    767e:	409f      	lsls	r7, r3
    7680:	1c0b      	adds	r3, r1, #0
    7682:	4307      	orrs	r7, r0
    7684:	4817      	ldr	r0, [pc, #92]	; (76e4 <__aeabi_ddiv+0x1d0>)
    7686:	2100      	movs	r1, #0
    7688:	1a80      	subs	r0, r0, r2
    768a:	e783      	b.n	7594 <__aeabi_ddiv+0x80>
    768c:	2700      	movs	r7, #0
    768e:	2300      	movs	r3, #0
    7690:	2101      	movs	r1, #1
    7692:	e77f      	b.n	7594 <__aeabi_ddiv+0x80>
    7694:	2300      	movs	r3, #0
    7696:	469b      	mov	fp, r3
    7698:	4699      	mov	r9, r3
    769a:	3301      	adds	r3, #1
    769c:	2604      	movs	r6, #4
    769e:	9300      	str	r3, [sp, #0]
    76a0:	e75e      	b.n	7560 <__aeabi_ddiv+0x4c>
    76a2:	2303      	movs	r3, #3
    76a4:	260c      	movs	r6, #12
    76a6:	9300      	str	r3, [sp, #0]
    76a8:	e75a      	b.n	7560 <__aeabi_ddiv+0x4c>
    76aa:	2b03      	cmp	r3, #3
    76ac:	d100      	bne.n	76b0 <__aeabi_ddiv+0x19c>
    76ae:	e23c      	b.n	7b2a <__aeabi_ddiv+0x616>
    76b0:	2b01      	cmp	r3, #1
    76b2:	d000      	beq.n	76b6 <__aeabi_ddiv+0x1a2>
    76b4:	e1bf      	b.n	7a36 <__aeabi_ddiv+0x522>
    76b6:	1c1a      	adds	r2, r3, #0
    76b8:	9b01      	ldr	r3, [sp, #4]
    76ba:	401a      	ands	r2, r3
    76bc:	2100      	movs	r1, #0
    76be:	2300      	movs	r3, #0
    76c0:	2700      	movs	r7, #0
    76c2:	4689      	mov	r9, r1
    76c4:	e78e      	b.n	75e4 <__aeabi_ddiv+0xd0>
    76c6:	2300      	movs	r3, #0
    76c8:	2780      	movs	r7, #128	; 0x80
    76ca:	4699      	mov	r9, r3
    76cc:	2200      	movs	r2, #0
    76ce:	033f      	lsls	r7, r7, #12
    76d0:	4b00      	ldr	r3, [pc, #0]	; (76d4 <__aeabi_ddiv+0x1c0>)
    76d2:	e787      	b.n	75e4 <__aeabi_ddiv+0xd0>
    76d4:	000007ff 	.word	0x000007ff
    76d8:	fffffc01 	.word	0xfffffc01
    76dc:	0000f230 	.word	0x0000f230
    76e0:	800fffff 	.word	0x800fffff
    76e4:	fffffc0d 	.word	0xfffffc0d
    76e8:	45bb      	cmp	fp, r7
    76ea:	d900      	bls.n	76ee <__aeabi_ddiv+0x1da>
    76ec:	e151      	b.n	7992 <__aeabi_ddiv+0x47e>
    76ee:	d100      	bne.n	76f2 <__aeabi_ddiv+0x1de>
    76f0:	e14c      	b.n	798c <__aeabi_ddiv+0x478>
    76f2:	464a      	mov	r2, r9
    76f4:	9203      	str	r2, [sp, #12]
    76f6:	2200      	movs	r2, #0
    76f8:	465c      	mov	r4, fp
    76fa:	4690      	mov	r8, r2
    76fc:	3d01      	subs	r5, #1
    76fe:	0e18      	lsrs	r0, r3, #24
    7700:	023f      	lsls	r7, r7, #8
    7702:	4338      	orrs	r0, r7
    7704:	021b      	lsls	r3, r3, #8
    7706:	9301      	str	r3, [sp, #4]
    7708:	0c03      	lsrs	r3, r0, #16
    770a:	4699      	mov	r9, r3
    770c:	0403      	lsls	r3, r0, #16
    770e:	0c1b      	lsrs	r3, r3, #16
    7710:	4649      	mov	r1, r9
    7712:	1c06      	adds	r6, r0, #0
    7714:	1c20      	adds	r0, r4, #0
    7716:	1c1f      	adds	r7, r3, #0
    7718:	9300      	str	r3, [sp, #0]
    771a:	f7ff f9cb 	bl	6ab4 <__aeabi_uidiv>
    771e:	1c02      	adds	r2, r0, #0
    7720:	437a      	muls	r2, r7
    7722:	9002      	str	r0, [sp, #8]
    7724:	4649      	mov	r1, r9
    7726:	1c20      	adds	r0, r4, #0
    7728:	1c17      	adds	r7, r2, #0
    772a:	f7ff fa49 	bl	6bc0 <__aeabi_uidivmod>
    772e:	9b03      	ldr	r3, [sp, #12]
    7730:	0409      	lsls	r1, r1, #16
    7732:	0c1b      	lsrs	r3, r3, #16
    7734:	4319      	orrs	r1, r3
    7736:	428f      	cmp	r7, r1
    7738:	d90c      	bls.n	7754 <__aeabi_ddiv+0x240>
    773a:	9b02      	ldr	r3, [sp, #8]
    773c:	1989      	adds	r1, r1, r6
    773e:	3b01      	subs	r3, #1
    7740:	428e      	cmp	r6, r1
    7742:	d900      	bls.n	7746 <__aeabi_ddiv+0x232>
    7744:	e152      	b.n	79ec <__aeabi_ddiv+0x4d8>
    7746:	428f      	cmp	r7, r1
    7748:	d800      	bhi.n	774c <__aeabi_ddiv+0x238>
    774a:	e14f      	b.n	79ec <__aeabi_ddiv+0x4d8>
    774c:	9b02      	ldr	r3, [sp, #8]
    774e:	1989      	adds	r1, r1, r6
    7750:	3b02      	subs	r3, #2
    7752:	9302      	str	r3, [sp, #8]
    7754:	1bcc      	subs	r4, r1, r7
    7756:	1c20      	adds	r0, r4, #0
    7758:	4649      	mov	r1, r9
    775a:	f7ff f9ab 	bl	6ab4 <__aeabi_uidiv>
    775e:	9f00      	ldr	r7, [sp, #0]
    7760:	4683      	mov	fp, r0
    7762:	4347      	muls	r7, r0
    7764:	4649      	mov	r1, r9
    7766:	1c20      	adds	r0, r4, #0
    7768:	f7ff fa2a 	bl	6bc0 <__aeabi_uidivmod>
    776c:	9a03      	ldr	r2, [sp, #12]
    776e:	040b      	lsls	r3, r1, #16
    7770:	0414      	lsls	r4, r2, #16
    7772:	0c24      	lsrs	r4, r4, #16
    7774:	4323      	orrs	r3, r4
    7776:	429f      	cmp	r7, r3
    7778:	d90d      	bls.n	7796 <__aeabi_ddiv+0x282>
    777a:	465a      	mov	r2, fp
    777c:	199b      	adds	r3, r3, r6
    777e:	3a01      	subs	r2, #1
    7780:	429e      	cmp	r6, r3
    7782:	d900      	bls.n	7786 <__aeabi_ddiv+0x272>
    7784:	e130      	b.n	79e8 <__aeabi_ddiv+0x4d4>
    7786:	429f      	cmp	r7, r3
    7788:	d800      	bhi.n	778c <__aeabi_ddiv+0x278>
    778a:	e12d      	b.n	79e8 <__aeabi_ddiv+0x4d4>
    778c:	2202      	movs	r2, #2
    778e:	4252      	negs	r2, r2
    7790:	4694      	mov	ip, r2
    7792:	199b      	adds	r3, r3, r6
    7794:	44e3      	add	fp, ip
    7796:	9a02      	ldr	r2, [sp, #8]
    7798:	1bdb      	subs	r3, r3, r7
    779a:	0417      	lsls	r7, r2, #16
    779c:	465a      	mov	r2, fp
    779e:	433a      	orrs	r2, r7
    77a0:	4693      	mov	fp, r2
    77a2:	9c01      	ldr	r4, [sp, #4]
    77a4:	0c17      	lsrs	r7, r2, #16
    77a6:	0c22      	lsrs	r2, r4, #16
    77a8:	1c10      	adds	r0, r2, #0
    77aa:	9204      	str	r2, [sp, #16]
    77ac:	465a      	mov	r2, fp
    77ae:	0411      	lsls	r1, r2, #16
    77b0:	0422      	lsls	r2, r4, #16
    77b2:	0c12      	lsrs	r2, r2, #16
    77b4:	1c14      	adds	r4, r2, #0
    77b6:	0c09      	lsrs	r1, r1, #16
    77b8:	437c      	muls	r4, r7
    77ba:	9205      	str	r2, [sp, #20]
    77bc:	434a      	muls	r2, r1
    77be:	4341      	muls	r1, r0
    77c0:	4347      	muls	r7, r0
    77c2:	1861      	adds	r1, r4, r1
    77c4:	0c10      	lsrs	r0, r2, #16
    77c6:	1809      	adds	r1, r1, r0
    77c8:	428c      	cmp	r4, r1
    77ca:	d903      	bls.n	77d4 <__aeabi_ddiv+0x2c0>
    77cc:	2080      	movs	r0, #128	; 0x80
    77ce:	0240      	lsls	r0, r0, #9
    77d0:	4684      	mov	ip, r0
    77d2:	4467      	add	r7, ip
    77d4:	0c0c      	lsrs	r4, r1, #16
    77d6:	0412      	lsls	r2, r2, #16
    77d8:	0408      	lsls	r0, r1, #16
    77da:	0c12      	lsrs	r2, r2, #16
    77dc:	193c      	adds	r4, r7, r4
    77de:	1881      	adds	r1, r0, r2
    77e0:	42a3      	cmp	r3, r4
    77e2:	d200      	bcs.n	77e6 <__aeabi_ddiv+0x2d2>
    77e4:	e0e5      	b.n	79b2 <__aeabi_ddiv+0x49e>
    77e6:	d100      	bne.n	77ea <__aeabi_ddiv+0x2d6>
    77e8:	e0df      	b.n	79aa <__aeabi_ddiv+0x496>
    77ea:	1b1f      	subs	r7, r3, r4
    77ec:	4643      	mov	r3, r8
    77ee:	1a5c      	subs	r4, r3, r1
    77f0:	45a0      	cmp	r8, r4
    77f2:	4192      	sbcs	r2, r2
    77f4:	4252      	negs	r2, r2
    77f6:	1abf      	subs	r7, r7, r2
    77f8:	42b7      	cmp	r7, r6
    77fa:	d100      	bne.n	77fe <__aeabi_ddiv+0x2ea>
    77fc:	e10e      	b.n	7a1c <__aeabi_ddiv+0x508>
    77fe:	1c38      	adds	r0, r7, #0
    7800:	4649      	mov	r1, r9
    7802:	f7ff f957 	bl	6ab4 <__aeabi_uidiv>
    7806:	9b00      	ldr	r3, [sp, #0]
    7808:	9002      	str	r0, [sp, #8]
    780a:	4343      	muls	r3, r0
    780c:	4649      	mov	r1, r9
    780e:	1c38      	adds	r0, r7, #0
    7810:	4698      	mov	r8, r3
    7812:	f7ff f9d5 	bl	6bc0 <__aeabi_uidivmod>
    7816:	0c23      	lsrs	r3, r4, #16
    7818:	040f      	lsls	r7, r1, #16
    781a:	431f      	orrs	r7, r3
    781c:	45b8      	cmp	r8, r7
    781e:	d90c      	bls.n	783a <__aeabi_ddiv+0x326>
    7820:	9b02      	ldr	r3, [sp, #8]
    7822:	19bf      	adds	r7, r7, r6
    7824:	3b01      	subs	r3, #1
    7826:	42be      	cmp	r6, r7
    7828:	d900      	bls.n	782c <__aeabi_ddiv+0x318>
    782a:	e0fb      	b.n	7a24 <__aeabi_ddiv+0x510>
    782c:	45b8      	cmp	r8, r7
    782e:	d800      	bhi.n	7832 <__aeabi_ddiv+0x31e>
    7830:	e0f8      	b.n	7a24 <__aeabi_ddiv+0x510>
    7832:	9b02      	ldr	r3, [sp, #8]
    7834:	19bf      	adds	r7, r7, r6
    7836:	3b02      	subs	r3, #2
    7838:	9302      	str	r3, [sp, #8]
    783a:	4643      	mov	r3, r8
    783c:	1aff      	subs	r7, r7, r3
    783e:	4649      	mov	r1, r9
    7840:	1c38      	adds	r0, r7, #0
    7842:	f7ff f937 	bl	6ab4 <__aeabi_uidiv>
    7846:	9b00      	ldr	r3, [sp, #0]
    7848:	9003      	str	r0, [sp, #12]
    784a:	4343      	muls	r3, r0
    784c:	4649      	mov	r1, r9
    784e:	1c38      	adds	r0, r7, #0
    7850:	4698      	mov	r8, r3
    7852:	f7ff f9b5 	bl	6bc0 <__aeabi_uidivmod>
    7856:	0424      	lsls	r4, r4, #16
    7858:	0409      	lsls	r1, r1, #16
    785a:	0c24      	lsrs	r4, r4, #16
    785c:	4321      	orrs	r1, r4
    785e:	4588      	cmp	r8, r1
    7860:	d90c      	bls.n	787c <__aeabi_ddiv+0x368>
    7862:	9b03      	ldr	r3, [sp, #12]
    7864:	1989      	adds	r1, r1, r6
    7866:	3b01      	subs	r3, #1
    7868:	428e      	cmp	r6, r1
    786a:	d900      	bls.n	786e <__aeabi_ddiv+0x35a>
    786c:	e0dc      	b.n	7a28 <__aeabi_ddiv+0x514>
    786e:	4588      	cmp	r8, r1
    7870:	d800      	bhi.n	7874 <__aeabi_ddiv+0x360>
    7872:	e0d9      	b.n	7a28 <__aeabi_ddiv+0x514>
    7874:	9b03      	ldr	r3, [sp, #12]
    7876:	1989      	adds	r1, r1, r6
    7878:	3b02      	subs	r3, #2
    787a:	9303      	str	r3, [sp, #12]
    787c:	4643      	mov	r3, r8
    787e:	1ac9      	subs	r1, r1, r3
    7880:	9b02      	ldr	r3, [sp, #8]
    7882:	9a03      	ldr	r2, [sp, #12]
    7884:	041b      	lsls	r3, r3, #16
    7886:	9c05      	ldr	r4, [sp, #20]
    7888:	431a      	orrs	r2, r3
    788a:	0c10      	lsrs	r0, r2, #16
    788c:	0413      	lsls	r3, r2, #16
    788e:	4691      	mov	r9, r2
    7890:	1c22      	adds	r2, r4, #0
    7892:	9f04      	ldr	r7, [sp, #16]
    7894:	0c1b      	lsrs	r3, r3, #16
    7896:	435a      	muls	r2, r3
    7898:	4344      	muls	r4, r0
    789a:	437b      	muls	r3, r7
    789c:	4378      	muls	r0, r7
    789e:	18e3      	adds	r3, r4, r3
    78a0:	0c17      	lsrs	r7, r2, #16
    78a2:	19db      	adds	r3, r3, r7
    78a4:	429c      	cmp	r4, r3
    78a6:	d903      	bls.n	78b0 <__aeabi_ddiv+0x39c>
    78a8:	2480      	movs	r4, #128	; 0x80
    78aa:	0264      	lsls	r4, r4, #9
    78ac:	46a4      	mov	ip, r4
    78ae:	4460      	add	r0, ip
    78b0:	0c1c      	lsrs	r4, r3, #16
    78b2:	0412      	lsls	r2, r2, #16
    78b4:	041b      	lsls	r3, r3, #16
    78b6:	0c12      	lsrs	r2, r2, #16
    78b8:	1900      	adds	r0, r0, r4
    78ba:	189b      	adds	r3, r3, r2
    78bc:	4281      	cmp	r1, r0
    78be:	d200      	bcs.n	78c2 <__aeabi_ddiv+0x3ae>
    78c0:	e096      	b.n	79f0 <__aeabi_ddiv+0x4dc>
    78c2:	d100      	bne.n	78c6 <__aeabi_ddiv+0x3b2>
    78c4:	e0fc      	b.n	7ac0 <__aeabi_ddiv+0x5ac>
    78c6:	464a      	mov	r2, r9
    78c8:	2301      	movs	r3, #1
    78ca:	431a      	orrs	r2, r3
    78cc:	4691      	mov	r9, r2
    78ce:	4b9b      	ldr	r3, [pc, #620]	; (7b3c <__aeabi_ddiv+0x628>)
    78d0:	18eb      	adds	r3, r5, r3
    78d2:	2b00      	cmp	r3, #0
    78d4:	dc00      	bgt.n	78d8 <__aeabi_ddiv+0x3c4>
    78d6:	e099      	b.n	7a0c <__aeabi_ddiv+0x4f8>
    78d8:	464a      	mov	r2, r9
    78da:	0752      	lsls	r2, r2, #29
    78dc:	d00a      	beq.n	78f4 <__aeabi_ddiv+0x3e0>
    78de:	220f      	movs	r2, #15
    78e0:	4649      	mov	r1, r9
    78e2:	400a      	ands	r2, r1
    78e4:	2a04      	cmp	r2, #4
    78e6:	d005      	beq.n	78f4 <__aeabi_ddiv+0x3e0>
    78e8:	3104      	adds	r1, #4
    78ea:	4549      	cmp	r1, r9
    78ec:	4192      	sbcs	r2, r2
    78ee:	4689      	mov	r9, r1
    78f0:	4252      	negs	r2, r2
    78f2:	4493      	add	fp, r2
    78f4:	465a      	mov	r2, fp
    78f6:	01d2      	lsls	r2, r2, #7
    78f8:	d506      	bpl.n	7908 <__aeabi_ddiv+0x3f4>
    78fa:	465a      	mov	r2, fp
    78fc:	4b90      	ldr	r3, [pc, #576]	; (7b40 <__aeabi_ddiv+0x62c>)
    78fe:	401a      	ands	r2, r3
    7900:	2380      	movs	r3, #128	; 0x80
    7902:	4693      	mov	fp, r2
    7904:	00db      	lsls	r3, r3, #3
    7906:	18eb      	adds	r3, r5, r3
    7908:	4a8e      	ldr	r2, [pc, #568]	; (7b44 <__aeabi_ddiv+0x630>)
    790a:	4293      	cmp	r3, r2
    790c:	dd00      	ble.n	7910 <__aeabi_ddiv+0x3fc>
    790e:	e662      	b.n	75d6 <__aeabi_ddiv+0xc2>
    7910:	464a      	mov	r2, r9
    7912:	4659      	mov	r1, fp
    7914:	08d2      	lsrs	r2, r2, #3
    7916:	0749      	lsls	r1, r1, #29
    7918:	4311      	orrs	r1, r2
    791a:	465a      	mov	r2, fp
    791c:	4689      	mov	r9, r1
    791e:	0257      	lsls	r7, r2, #9
    7920:	4651      	mov	r1, sl
    7922:	2201      	movs	r2, #1
    7924:	055b      	lsls	r3, r3, #21
    7926:	0b3f      	lsrs	r7, r7, #12
    7928:	0d5b      	lsrs	r3, r3, #21
    792a:	400a      	ands	r2, r1
    792c:	e65a      	b.n	75e4 <__aeabi_ddiv+0xd0>
    792e:	2080      	movs	r0, #128	; 0x80
    7930:	465a      	mov	r2, fp
    7932:	0300      	lsls	r0, r0, #12
    7934:	4202      	tst	r2, r0
    7936:	d008      	beq.n	794a <__aeabi_ddiv+0x436>
    7938:	4207      	tst	r7, r0
    793a:	d106      	bne.n	794a <__aeabi_ddiv+0x436>
    793c:	4307      	orrs	r7, r0
    793e:	033f      	lsls	r7, r7, #12
    7940:	4699      	mov	r9, r3
    7942:	0b3f      	lsrs	r7, r7, #12
    7944:	4642      	mov	r2, r8
    7946:	4b80      	ldr	r3, [pc, #512]	; (7b48 <__aeabi_ddiv+0x634>)
    7948:	e64c      	b.n	75e4 <__aeabi_ddiv+0xd0>
    794a:	465f      	mov	r7, fp
    794c:	4307      	orrs	r7, r0
    794e:	033f      	lsls	r7, r7, #12
    7950:	0b3f      	lsrs	r7, r7, #12
    7952:	1c22      	adds	r2, r4, #0
    7954:	4b7c      	ldr	r3, [pc, #496]	; (7b48 <__aeabi_ddiv+0x634>)
    7956:	e645      	b.n	75e4 <__aeabi_ddiv+0xd0>
    7958:	f001 f962 	bl	8c20 <__clzsi2>
    795c:	1c03      	adds	r3, r0, #0
    795e:	3020      	adds	r0, #32
    7960:	2827      	cmp	r0, #39	; 0x27
    7962:	dc00      	bgt.n	7966 <__aeabi_ddiv+0x452>
    7964:	e65e      	b.n	7624 <__aeabi_ddiv+0x110>
    7966:	3b08      	subs	r3, #8
    7968:	409e      	lsls	r6, r3
    796a:	2300      	movs	r3, #0
    796c:	46b3      	mov	fp, r6
    796e:	4699      	mov	r9, r3
    7970:	e665      	b.n	763e <__aeabi_ddiv+0x12a>
    7972:	4650      	mov	r0, sl
    7974:	f001 f954 	bl	8c20 <__clzsi2>
    7978:	1c02      	adds	r2, r0, #0
    797a:	3220      	adds	r2, #32
    797c:	2a27      	cmp	r2, #39	; 0x27
    797e:	dc00      	bgt.n	7982 <__aeabi_ddiv+0x46e>
    7980:	e675      	b.n	766e <__aeabi_ddiv+0x15a>
    7982:	4657      	mov	r7, sl
    7984:	3808      	subs	r0, #8
    7986:	4087      	lsls	r7, r0
    7988:	2300      	movs	r3, #0
    798a:	e67b      	b.n	7684 <__aeabi_ddiv+0x170>
    798c:	4599      	cmp	r9, r3
    798e:	d200      	bcs.n	7992 <__aeabi_ddiv+0x47e>
    7990:	e6af      	b.n	76f2 <__aeabi_ddiv+0x1de>
    7992:	465a      	mov	r2, fp
    7994:	4659      	mov	r1, fp
    7996:	0854      	lsrs	r4, r2, #1
    7998:	464a      	mov	r2, r9
    799a:	07c8      	lsls	r0, r1, #31
    799c:	0852      	lsrs	r2, r2, #1
    799e:	4302      	orrs	r2, r0
    79a0:	9203      	str	r2, [sp, #12]
    79a2:	464a      	mov	r2, r9
    79a4:	07d2      	lsls	r2, r2, #31
    79a6:	4690      	mov	r8, r2
    79a8:	e6a9      	b.n	76fe <__aeabi_ddiv+0x1ea>
    79aa:	2700      	movs	r7, #0
    79ac:	4588      	cmp	r8, r1
    79ae:	d300      	bcc.n	79b2 <__aeabi_ddiv+0x49e>
    79b0:	e71c      	b.n	77ec <__aeabi_ddiv+0x2d8>
    79b2:	9f01      	ldr	r7, [sp, #4]
    79b4:	465a      	mov	r2, fp
    79b6:	46bc      	mov	ip, r7
    79b8:	44e0      	add	r8, ip
    79ba:	45b8      	cmp	r8, r7
    79bc:	41bf      	sbcs	r7, r7
    79be:	427f      	negs	r7, r7
    79c0:	19bf      	adds	r7, r7, r6
    79c2:	18ff      	adds	r7, r7, r3
    79c4:	3a01      	subs	r2, #1
    79c6:	42be      	cmp	r6, r7
    79c8:	d206      	bcs.n	79d8 <__aeabi_ddiv+0x4c4>
    79ca:	42bc      	cmp	r4, r7
    79cc:	d85f      	bhi.n	7a8e <__aeabi_ddiv+0x57a>
    79ce:	d100      	bne.n	79d2 <__aeabi_ddiv+0x4be>
    79d0:	e09f      	b.n	7b12 <__aeabi_ddiv+0x5fe>
    79d2:	1b3f      	subs	r7, r7, r4
    79d4:	4693      	mov	fp, r2
    79d6:	e709      	b.n	77ec <__aeabi_ddiv+0x2d8>
    79d8:	42b7      	cmp	r7, r6
    79da:	d1fa      	bne.n	79d2 <__aeabi_ddiv+0x4be>
    79dc:	9b01      	ldr	r3, [sp, #4]
    79de:	4543      	cmp	r3, r8
    79e0:	d9f3      	bls.n	79ca <__aeabi_ddiv+0x4b6>
    79e2:	1b37      	subs	r7, r6, r4
    79e4:	4693      	mov	fp, r2
    79e6:	e701      	b.n	77ec <__aeabi_ddiv+0x2d8>
    79e8:	4693      	mov	fp, r2
    79ea:	e6d4      	b.n	7796 <__aeabi_ddiv+0x282>
    79ec:	9302      	str	r3, [sp, #8]
    79ee:	e6b1      	b.n	7754 <__aeabi_ddiv+0x240>
    79f0:	464a      	mov	r2, r9
    79f2:	1989      	adds	r1, r1, r6
    79f4:	3a01      	subs	r2, #1
    79f6:	428e      	cmp	r6, r1
    79f8:	d918      	bls.n	7a2c <__aeabi_ddiv+0x518>
    79fa:	4691      	mov	r9, r2
    79fc:	4281      	cmp	r1, r0
    79fe:	d000      	beq.n	7a02 <__aeabi_ddiv+0x4ee>
    7a00:	e761      	b.n	78c6 <__aeabi_ddiv+0x3b2>
    7a02:	9a01      	ldr	r2, [sp, #4]
    7a04:	429a      	cmp	r2, r3
    7a06:	d000      	beq.n	7a0a <__aeabi_ddiv+0x4f6>
    7a08:	e75d      	b.n	78c6 <__aeabi_ddiv+0x3b2>
    7a0a:	e760      	b.n	78ce <__aeabi_ddiv+0x3ba>
    7a0c:	4f4f      	ldr	r7, [pc, #316]	; (7b4c <__aeabi_ddiv+0x638>)
    7a0e:	1b7f      	subs	r7, r7, r5
    7a10:	2f38      	cmp	r7, #56	; 0x38
    7a12:	dd13      	ble.n	7a3c <__aeabi_ddiv+0x528>
    7a14:	2201      	movs	r2, #1
    7a16:	4653      	mov	r3, sl
    7a18:	401a      	ands	r2, r3
    7a1a:	e64f      	b.n	76bc <__aeabi_ddiv+0x1a8>
    7a1c:	2301      	movs	r3, #1
    7a1e:	425b      	negs	r3, r3
    7a20:	4699      	mov	r9, r3
    7a22:	e754      	b.n	78ce <__aeabi_ddiv+0x3ba>
    7a24:	9302      	str	r3, [sp, #8]
    7a26:	e708      	b.n	783a <__aeabi_ddiv+0x326>
    7a28:	9303      	str	r3, [sp, #12]
    7a2a:	e727      	b.n	787c <__aeabi_ddiv+0x368>
    7a2c:	4288      	cmp	r0, r1
    7a2e:	d83c      	bhi.n	7aaa <__aeabi_ddiv+0x596>
    7a30:	d074      	beq.n	7b1c <__aeabi_ddiv+0x608>
    7a32:	4691      	mov	r9, r2
    7a34:	e747      	b.n	78c6 <__aeabi_ddiv+0x3b2>
    7a36:	9b01      	ldr	r3, [sp, #4]
    7a38:	469a      	mov	sl, r3
    7a3a:	e748      	b.n	78ce <__aeabi_ddiv+0x3ba>
    7a3c:	2f1f      	cmp	r7, #31
    7a3e:	dc44      	bgt.n	7aca <__aeabi_ddiv+0x5b6>
    7a40:	4b43      	ldr	r3, [pc, #268]	; (7b50 <__aeabi_ddiv+0x63c>)
    7a42:	464a      	mov	r2, r9
    7a44:	469c      	mov	ip, r3
    7a46:	465b      	mov	r3, fp
    7a48:	4465      	add	r5, ip
    7a4a:	40fa      	lsrs	r2, r7
    7a4c:	40ab      	lsls	r3, r5
    7a4e:	4313      	orrs	r3, r2
    7a50:	464a      	mov	r2, r9
    7a52:	40aa      	lsls	r2, r5
    7a54:	1c15      	adds	r5, r2, #0
    7a56:	1e6a      	subs	r2, r5, #1
    7a58:	4195      	sbcs	r5, r2
    7a5a:	465a      	mov	r2, fp
    7a5c:	40fa      	lsrs	r2, r7
    7a5e:	432b      	orrs	r3, r5
    7a60:	1c17      	adds	r7, r2, #0
    7a62:	075a      	lsls	r2, r3, #29
    7a64:	d009      	beq.n	7a7a <__aeabi_ddiv+0x566>
    7a66:	220f      	movs	r2, #15
    7a68:	401a      	ands	r2, r3
    7a6a:	2a04      	cmp	r2, #4
    7a6c:	d005      	beq.n	7a7a <__aeabi_ddiv+0x566>
    7a6e:	1d1a      	adds	r2, r3, #4
    7a70:	429a      	cmp	r2, r3
    7a72:	419b      	sbcs	r3, r3
    7a74:	425b      	negs	r3, r3
    7a76:	18ff      	adds	r7, r7, r3
    7a78:	1c13      	adds	r3, r2, #0
    7a7a:	023a      	lsls	r2, r7, #8
    7a7c:	d53e      	bpl.n	7afc <__aeabi_ddiv+0x5e8>
    7a7e:	4653      	mov	r3, sl
    7a80:	2201      	movs	r2, #1
    7a82:	2100      	movs	r1, #0
    7a84:	401a      	ands	r2, r3
    7a86:	2700      	movs	r7, #0
    7a88:	2301      	movs	r3, #1
    7a8a:	4689      	mov	r9, r1
    7a8c:	e5aa      	b.n	75e4 <__aeabi_ddiv+0xd0>
    7a8e:	2302      	movs	r3, #2
    7a90:	425b      	negs	r3, r3
    7a92:	469c      	mov	ip, r3
    7a94:	9a01      	ldr	r2, [sp, #4]
    7a96:	44e3      	add	fp, ip
    7a98:	4694      	mov	ip, r2
    7a9a:	44e0      	add	r8, ip
    7a9c:	4590      	cmp	r8, r2
    7a9e:	419b      	sbcs	r3, r3
    7aa0:	425b      	negs	r3, r3
    7aa2:	199b      	adds	r3, r3, r6
    7aa4:	19df      	adds	r7, r3, r7
    7aa6:	1b3f      	subs	r7, r7, r4
    7aa8:	e6a0      	b.n	77ec <__aeabi_ddiv+0x2d8>
    7aaa:	9f01      	ldr	r7, [sp, #4]
    7aac:	464a      	mov	r2, r9
    7aae:	007c      	lsls	r4, r7, #1
    7ab0:	42bc      	cmp	r4, r7
    7ab2:	41bf      	sbcs	r7, r7
    7ab4:	427f      	negs	r7, r7
    7ab6:	19bf      	adds	r7, r7, r6
    7ab8:	3a02      	subs	r2, #2
    7aba:	19c9      	adds	r1, r1, r7
    7abc:	9401      	str	r4, [sp, #4]
    7abe:	e79c      	b.n	79fa <__aeabi_ddiv+0x4e6>
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d195      	bne.n	79f0 <__aeabi_ddiv+0x4dc>
    7ac4:	2200      	movs	r2, #0
    7ac6:	9201      	str	r2, [sp, #4]
    7ac8:	e79b      	b.n	7a02 <__aeabi_ddiv+0x4ee>
    7aca:	465a      	mov	r2, fp
    7acc:	4b21      	ldr	r3, [pc, #132]	; (7b54 <__aeabi_ddiv+0x640>)
    7ace:	1b5b      	subs	r3, r3, r5
    7ad0:	40da      	lsrs	r2, r3
    7ad2:	2f20      	cmp	r7, #32
    7ad4:	d027      	beq.n	7b26 <__aeabi_ddiv+0x612>
    7ad6:	4b20      	ldr	r3, [pc, #128]	; (7b58 <__aeabi_ddiv+0x644>)
    7ad8:	469c      	mov	ip, r3
    7ada:	465b      	mov	r3, fp
    7adc:	4465      	add	r5, ip
    7ade:	40ab      	lsls	r3, r5
    7ae0:	4649      	mov	r1, r9
    7ae2:	430b      	orrs	r3, r1
    7ae4:	1e59      	subs	r1, r3, #1
    7ae6:	418b      	sbcs	r3, r1
    7ae8:	4313      	orrs	r3, r2
    7aea:	2207      	movs	r2, #7
    7aec:	2700      	movs	r7, #0
    7aee:	401a      	ands	r2, r3
    7af0:	d007      	beq.n	7b02 <__aeabi_ddiv+0x5ee>
    7af2:	220f      	movs	r2, #15
    7af4:	2700      	movs	r7, #0
    7af6:	401a      	ands	r2, r3
    7af8:	2a04      	cmp	r2, #4
    7afa:	d1b8      	bne.n	7a6e <__aeabi_ddiv+0x55a>
    7afc:	077a      	lsls	r2, r7, #29
    7afe:	027f      	lsls	r7, r7, #9
    7b00:	0b3f      	lsrs	r7, r7, #12
    7b02:	08db      	lsrs	r3, r3, #3
    7b04:	4313      	orrs	r3, r2
    7b06:	4699      	mov	r9, r3
    7b08:	2201      	movs	r2, #1
    7b0a:	4653      	mov	r3, sl
    7b0c:	401a      	ands	r2, r3
    7b0e:	2300      	movs	r3, #0
    7b10:	e568      	b.n	75e4 <__aeabi_ddiv+0xd0>
    7b12:	4541      	cmp	r1, r8
    7b14:	d8bb      	bhi.n	7a8e <__aeabi_ddiv+0x57a>
    7b16:	4693      	mov	fp, r2
    7b18:	2700      	movs	r7, #0
    7b1a:	e667      	b.n	77ec <__aeabi_ddiv+0x2d8>
    7b1c:	9c01      	ldr	r4, [sp, #4]
    7b1e:	429c      	cmp	r4, r3
    7b20:	d3c3      	bcc.n	7aaa <__aeabi_ddiv+0x596>
    7b22:	4691      	mov	r9, r2
    7b24:	e76d      	b.n	7a02 <__aeabi_ddiv+0x4ee>
    7b26:	2300      	movs	r3, #0
    7b28:	e7da      	b.n	7ae0 <__aeabi_ddiv+0x5cc>
    7b2a:	2780      	movs	r7, #128	; 0x80
    7b2c:	465b      	mov	r3, fp
    7b2e:	033f      	lsls	r7, r7, #12
    7b30:	431f      	orrs	r7, r3
    7b32:	033f      	lsls	r7, r7, #12
    7b34:	0b3f      	lsrs	r7, r7, #12
    7b36:	9a01      	ldr	r2, [sp, #4]
    7b38:	4b03      	ldr	r3, [pc, #12]	; (7b48 <__aeabi_ddiv+0x634>)
    7b3a:	e553      	b.n	75e4 <__aeabi_ddiv+0xd0>
    7b3c:	000003ff 	.word	0x000003ff
    7b40:	feffffff 	.word	0xfeffffff
    7b44:	000007fe 	.word	0x000007fe
    7b48:	000007ff 	.word	0x000007ff
    7b4c:	fffffc02 	.word	0xfffffc02
    7b50:	0000041e 	.word	0x0000041e
    7b54:	fffffbe2 	.word	0xfffffbe2
    7b58:	0000043e 	.word	0x0000043e

00007b5c <__eqdf2>:
    7b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b5e:	465f      	mov	r7, fp
    7b60:	464d      	mov	r5, r9
    7b62:	4644      	mov	r4, r8
    7b64:	4656      	mov	r6, sl
    7b66:	b4f0      	push	{r4, r5, r6, r7}
    7b68:	031f      	lsls	r7, r3, #12
    7b6a:	005c      	lsls	r4, r3, #1
    7b6c:	0fdb      	lsrs	r3, r3, #31
    7b6e:	4699      	mov	r9, r3
    7b70:	4b1b      	ldr	r3, [pc, #108]	; (7be0 <__eqdf2+0x84>)
    7b72:	030e      	lsls	r6, r1, #12
    7b74:	004d      	lsls	r5, r1, #1
    7b76:	0fc9      	lsrs	r1, r1, #31
    7b78:	4684      	mov	ip, r0
    7b7a:	0b36      	lsrs	r6, r6, #12
    7b7c:	0d6d      	lsrs	r5, r5, #21
    7b7e:	468b      	mov	fp, r1
    7b80:	4690      	mov	r8, r2
    7b82:	0b3f      	lsrs	r7, r7, #12
    7b84:	0d64      	lsrs	r4, r4, #21
    7b86:	429d      	cmp	r5, r3
    7b88:	d00c      	beq.n	7ba4 <__eqdf2+0x48>
    7b8a:	4b15      	ldr	r3, [pc, #84]	; (7be0 <__eqdf2+0x84>)
    7b8c:	429c      	cmp	r4, r3
    7b8e:	d010      	beq.n	7bb2 <__eqdf2+0x56>
    7b90:	2301      	movs	r3, #1
    7b92:	42a5      	cmp	r5, r4
    7b94:	d014      	beq.n	7bc0 <__eqdf2+0x64>
    7b96:	1c18      	adds	r0, r3, #0
    7b98:	bc3c      	pop	{r2, r3, r4, r5}
    7b9a:	4690      	mov	r8, r2
    7b9c:	4699      	mov	r9, r3
    7b9e:	46a2      	mov	sl, r4
    7ba0:	46ab      	mov	fp, r5
    7ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ba4:	1c31      	adds	r1, r6, #0
    7ba6:	2301      	movs	r3, #1
    7ba8:	4301      	orrs	r1, r0
    7baa:	d1f4      	bne.n	7b96 <__eqdf2+0x3a>
    7bac:	4b0c      	ldr	r3, [pc, #48]	; (7be0 <__eqdf2+0x84>)
    7bae:	429c      	cmp	r4, r3
    7bb0:	d1ee      	bne.n	7b90 <__eqdf2+0x34>
    7bb2:	433a      	orrs	r2, r7
    7bb4:	2301      	movs	r3, #1
    7bb6:	2a00      	cmp	r2, #0
    7bb8:	d1ed      	bne.n	7b96 <__eqdf2+0x3a>
    7bba:	2301      	movs	r3, #1
    7bbc:	42a5      	cmp	r5, r4
    7bbe:	d1ea      	bne.n	7b96 <__eqdf2+0x3a>
    7bc0:	42be      	cmp	r6, r7
    7bc2:	d1e8      	bne.n	7b96 <__eqdf2+0x3a>
    7bc4:	45c4      	cmp	ip, r8
    7bc6:	d1e6      	bne.n	7b96 <__eqdf2+0x3a>
    7bc8:	45cb      	cmp	fp, r9
    7bca:	d006      	beq.n	7bda <__eqdf2+0x7e>
    7bcc:	2d00      	cmp	r5, #0
    7bce:	d1e2      	bne.n	7b96 <__eqdf2+0x3a>
    7bd0:	4330      	orrs	r0, r6
    7bd2:	1c03      	adds	r3, r0, #0
    7bd4:	1e58      	subs	r0, r3, #1
    7bd6:	4183      	sbcs	r3, r0
    7bd8:	e7dd      	b.n	7b96 <__eqdf2+0x3a>
    7bda:	2300      	movs	r3, #0
    7bdc:	e7db      	b.n	7b96 <__eqdf2+0x3a>
    7bde:	46c0      	nop			; (mov r8, r8)
    7be0:	000007ff 	.word	0x000007ff

00007be4 <__gedf2>:
    7be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7be6:	4657      	mov	r7, sl
    7be8:	4645      	mov	r5, r8
    7bea:	464e      	mov	r6, r9
    7bec:	b4e0      	push	{r5, r6, r7}
    7bee:	030f      	lsls	r7, r1, #12
    7bf0:	004e      	lsls	r6, r1, #1
    7bf2:	0fc9      	lsrs	r1, r1, #31
    7bf4:	468a      	mov	sl, r1
    7bf6:	4932      	ldr	r1, [pc, #200]	; (7cc0 <__gedf2+0xdc>)
    7bf8:	031d      	lsls	r5, r3, #12
    7bfa:	005c      	lsls	r4, r3, #1
    7bfc:	4684      	mov	ip, r0
    7bfe:	0b3f      	lsrs	r7, r7, #12
    7c00:	0d76      	lsrs	r6, r6, #21
    7c02:	4690      	mov	r8, r2
    7c04:	0b2d      	lsrs	r5, r5, #12
    7c06:	0d64      	lsrs	r4, r4, #21
    7c08:	0fdb      	lsrs	r3, r3, #31
    7c0a:	428e      	cmp	r6, r1
    7c0c:	d00f      	beq.n	7c2e <__gedf2+0x4a>
    7c0e:	428c      	cmp	r4, r1
    7c10:	d039      	beq.n	7c86 <__gedf2+0xa2>
    7c12:	2e00      	cmp	r6, #0
    7c14:	d110      	bne.n	7c38 <__gedf2+0x54>
    7c16:	4338      	orrs	r0, r7
    7c18:	4241      	negs	r1, r0
    7c1a:	4141      	adcs	r1, r0
    7c1c:	4689      	mov	r9, r1
    7c1e:	2c00      	cmp	r4, #0
    7c20:	d127      	bne.n	7c72 <__gedf2+0x8e>
    7c22:	432a      	orrs	r2, r5
    7c24:	d125      	bne.n	7c72 <__gedf2+0x8e>
    7c26:	2000      	movs	r0, #0
    7c28:	2900      	cmp	r1, #0
    7c2a:	d10e      	bne.n	7c4a <__gedf2+0x66>
    7c2c:	e008      	b.n	7c40 <__gedf2+0x5c>
    7c2e:	1c39      	adds	r1, r7, #0
    7c30:	4301      	orrs	r1, r0
    7c32:	d12e      	bne.n	7c92 <__gedf2+0xae>
    7c34:	42b4      	cmp	r4, r6
    7c36:	d026      	beq.n	7c86 <__gedf2+0xa2>
    7c38:	2c00      	cmp	r4, #0
    7c3a:	d00b      	beq.n	7c54 <__gedf2+0x70>
    7c3c:	459a      	cmp	sl, r3
    7c3e:	d00d      	beq.n	7c5c <__gedf2+0x78>
    7c40:	4653      	mov	r3, sl
    7c42:	4259      	negs	r1, r3
    7c44:	2301      	movs	r3, #1
    7c46:	4319      	orrs	r1, r3
    7c48:	1c08      	adds	r0, r1, #0
    7c4a:	bc1c      	pop	{r2, r3, r4}
    7c4c:	4690      	mov	r8, r2
    7c4e:	4699      	mov	r9, r3
    7c50:	46a2      	mov	sl, r4
    7c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c54:	432a      	orrs	r2, r5
    7c56:	d0f3      	beq.n	7c40 <__gedf2+0x5c>
    7c58:	459a      	cmp	sl, r3
    7c5a:	d1f1      	bne.n	7c40 <__gedf2+0x5c>
    7c5c:	42a6      	cmp	r6, r4
    7c5e:	dcef      	bgt.n	7c40 <__gedf2+0x5c>
    7c60:	da1a      	bge.n	7c98 <__gedf2+0xb4>
    7c62:	4650      	mov	r0, sl
    7c64:	4241      	negs	r1, r0
    7c66:	4148      	adcs	r0, r1
    7c68:	2301      	movs	r3, #1
    7c6a:	4241      	negs	r1, r0
    7c6c:	4319      	orrs	r1, r3
    7c6e:	1c08      	adds	r0, r1, #0
    7c70:	e7eb      	b.n	7c4a <__gedf2+0x66>
    7c72:	464a      	mov	r2, r9
    7c74:	2a00      	cmp	r2, #0
    7c76:	d0e1      	beq.n	7c3c <__gedf2+0x58>
    7c78:	4258      	negs	r0, r3
    7c7a:	4158      	adcs	r0, r3
    7c7c:	2201      	movs	r2, #1
    7c7e:	4241      	negs	r1, r0
    7c80:	4311      	orrs	r1, r2
    7c82:	1c08      	adds	r0, r1, #0
    7c84:	e7e1      	b.n	7c4a <__gedf2+0x66>
    7c86:	1c29      	adds	r1, r5, #0
    7c88:	4311      	orrs	r1, r2
    7c8a:	d102      	bne.n	7c92 <__gedf2+0xae>
    7c8c:	2e00      	cmp	r6, #0
    7c8e:	d0c2      	beq.n	7c16 <__gedf2+0x32>
    7c90:	e7d4      	b.n	7c3c <__gedf2+0x58>
    7c92:	2002      	movs	r0, #2
    7c94:	4240      	negs	r0, r0
    7c96:	e7d8      	b.n	7c4a <__gedf2+0x66>
    7c98:	42af      	cmp	r7, r5
    7c9a:	d8d1      	bhi.n	7c40 <__gedf2+0x5c>
    7c9c:	d009      	beq.n	7cb2 <__gedf2+0xce>
    7c9e:	2000      	movs	r0, #0
    7ca0:	42af      	cmp	r7, r5
    7ca2:	d2d2      	bcs.n	7c4a <__gedf2+0x66>
    7ca4:	4650      	mov	r0, sl
    7ca6:	4241      	negs	r1, r0
    7ca8:	4148      	adcs	r0, r1
    7caa:	2301      	movs	r3, #1
    7cac:	4240      	negs	r0, r0
    7cae:	4318      	orrs	r0, r3
    7cb0:	e7cb      	b.n	7c4a <__gedf2+0x66>
    7cb2:	45c4      	cmp	ip, r8
    7cb4:	d8c4      	bhi.n	7c40 <__gedf2+0x5c>
    7cb6:	2000      	movs	r0, #0
    7cb8:	45c4      	cmp	ip, r8
    7cba:	d3f3      	bcc.n	7ca4 <__gedf2+0xc0>
    7cbc:	e7c5      	b.n	7c4a <__gedf2+0x66>
    7cbe:	46c0      	nop			; (mov r8, r8)
    7cc0:	000007ff 	.word	0x000007ff

00007cc4 <__ledf2>:
    7cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cc6:	465f      	mov	r7, fp
    7cc8:	464d      	mov	r5, r9
    7cca:	4644      	mov	r4, r8
    7ccc:	4656      	mov	r6, sl
    7cce:	4680      	mov	r8, r0
    7cd0:	b4f0      	push	{r4, r5, r6, r7}
    7cd2:	1c06      	adds	r6, r0, #0
    7cd4:	0308      	lsls	r0, r1, #12
    7cd6:	0b00      	lsrs	r0, r0, #12
    7cd8:	4684      	mov	ip, r0
    7cda:	482c      	ldr	r0, [pc, #176]	; (7d8c <__ledf2+0xc8>)
    7cdc:	004c      	lsls	r4, r1, #1
    7cde:	031f      	lsls	r7, r3, #12
    7ce0:	005d      	lsls	r5, r3, #1
    7ce2:	0fc9      	lsrs	r1, r1, #31
    7ce4:	0d64      	lsrs	r4, r4, #21
    7ce6:	468b      	mov	fp, r1
    7ce8:	4691      	mov	r9, r2
    7cea:	0b3f      	lsrs	r7, r7, #12
    7cec:	0d6d      	lsrs	r5, r5, #21
    7cee:	0fdb      	lsrs	r3, r3, #31
    7cf0:	4284      	cmp	r4, r0
    7cf2:	d012      	beq.n	7d1a <__ledf2+0x56>
    7cf4:	4285      	cmp	r5, r0
    7cf6:	d025      	beq.n	7d44 <__ledf2+0x80>
    7cf8:	2c00      	cmp	r4, #0
    7cfa:	d114      	bne.n	7d26 <__ledf2+0x62>
    7cfc:	4661      	mov	r1, ip
    7cfe:	430e      	orrs	r6, r1
    7d00:	4270      	negs	r0, r6
    7d02:	4146      	adcs	r6, r0
    7d04:	2d00      	cmp	r5, #0
    7d06:	d035      	beq.n	7d74 <__ledf2+0xb0>
    7d08:	2e00      	cmp	r6, #0
    7d0a:	d021      	beq.n	7d50 <__ledf2+0x8c>
    7d0c:	4258      	negs	r0, r3
    7d0e:	4158      	adcs	r0, r3
    7d10:	2101      	movs	r1, #1
    7d12:	4243      	negs	r3, r0
    7d14:	430b      	orrs	r3, r1
    7d16:	1c18      	adds	r0, r3, #0
    7d18:	e00e      	b.n	7d38 <__ledf2+0x74>
    7d1a:	4661      	mov	r1, ip
    7d1c:	2002      	movs	r0, #2
    7d1e:	4331      	orrs	r1, r6
    7d20:	d10a      	bne.n	7d38 <__ledf2+0x74>
    7d22:	42a5      	cmp	r5, r4
    7d24:	d00e      	beq.n	7d44 <__ledf2+0x80>
    7d26:	2d00      	cmp	r5, #0
    7d28:	d112      	bne.n	7d50 <__ledf2+0x8c>
    7d2a:	433a      	orrs	r2, r7
    7d2c:	d110      	bne.n	7d50 <__ledf2+0x8c>
    7d2e:	465b      	mov	r3, fp
    7d30:	4259      	negs	r1, r3
    7d32:	2301      	movs	r3, #1
    7d34:	4319      	orrs	r1, r3
    7d36:	1c08      	adds	r0, r1, #0
    7d38:	bc3c      	pop	{r2, r3, r4, r5}
    7d3a:	4690      	mov	r8, r2
    7d3c:	4699      	mov	r9, r3
    7d3e:	46a2      	mov	sl, r4
    7d40:	46ab      	mov	fp, r5
    7d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d44:	1c39      	adds	r1, r7, #0
    7d46:	2002      	movs	r0, #2
    7d48:	4311      	orrs	r1, r2
    7d4a:	d1f5      	bne.n	7d38 <__ledf2+0x74>
    7d4c:	2c00      	cmp	r4, #0
    7d4e:	d0d5      	beq.n	7cfc <__ledf2+0x38>
    7d50:	459b      	cmp	fp, r3
    7d52:	d1ec      	bne.n	7d2e <__ledf2+0x6a>
    7d54:	42ac      	cmp	r4, r5
    7d56:	dcea      	bgt.n	7d2e <__ledf2+0x6a>
    7d58:	db05      	blt.n	7d66 <__ledf2+0xa2>
    7d5a:	45bc      	cmp	ip, r7
    7d5c:	d8e7      	bhi.n	7d2e <__ledf2+0x6a>
    7d5e:	d00f      	beq.n	7d80 <__ledf2+0xbc>
    7d60:	2000      	movs	r0, #0
    7d62:	45bc      	cmp	ip, r7
    7d64:	d2e8      	bcs.n	7d38 <__ledf2+0x74>
    7d66:	4658      	mov	r0, fp
    7d68:	4241      	negs	r1, r0
    7d6a:	4148      	adcs	r0, r1
    7d6c:	4241      	negs	r1, r0
    7d6e:	2001      	movs	r0, #1
    7d70:	4308      	orrs	r0, r1
    7d72:	e7e1      	b.n	7d38 <__ledf2+0x74>
    7d74:	433a      	orrs	r2, r7
    7d76:	d1c7      	bne.n	7d08 <__ledf2+0x44>
    7d78:	2000      	movs	r0, #0
    7d7a:	2e00      	cmp	r6, #0
    7d7c:	d1dc      	bne.n	7d38 <__ledf2+0x74>
    7d7e:	e7d6      	b.n	7d2e <__ledf2+0x6a>
    7d80:	45c8      	cmp	r8, r9
    7d82:	d8d4      	bhi.n	7d2e <__ledf2+0x6a>
    7d84:	2000      	movs	r0, #0
    7d86:	45c8      	cmp	r8, r9
    7d88:	d3ed      	bcc.n	7d66 <__ledf2+0xa2>
    7d8a:	e7d5      	b.n	7d38 <__ledf2+0x74>
    7d8c:	000007ff 	.word	0x000007ff

00007d90 <__aeabi_dmul>:
    7d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d92:	465f      	mov	r7, fp
    7d94:	4656      	mov	r6, sl
    7d96:	464d      	mov	r5, r9
    7d98:	4644      	mov	r4, r8
    7d9a:	b4f0      	push	{r4, r5, r6, r7}
    7d9c:	1c05      	adds	r5, r0, #0
    7d9e:	1c06      	adds	r6, r0, #0
    7da0:	0308      	lsls	r0, r1, #12
    7da2:	b087      	sub	sp, #28
    7da4:	4699      	mov	r9, r3
    7da6:	004f      	lsls	r7, r1, #1
    7da8:	0b03      	lsrs	r3, r0, #12
    7daa:	0fcc      	lsrs	r4, r1, #31
    7dac:	4692      	mov	sl, r2
    7dae:	469b      	mov	fp, r3
    7db0:	0d7f      	lsrs	r7, r7, #21
    7db2:	9401      	str	r4, [sp, #4]
    7db4:	d067      	beq.n	7e86 <__aeabi_dmul+0xf6>
    7db6:	4b6c      	ldr	r3, [pc, #432]	; (7f68 <__aeabi_dmul+0x1d8>)
    7db8:	429f      	cmp	r7, r3
    7dba:	d036      	beq.n	7e2a <__aeabi_dmul+0x9a>
    7dbc:	2080      	movs	r0, #128	; 0x80
    7dbe:	465b      	mov	r3, fp
    7dc0:	0340      	lsls	r0, r0, #13
    7dc2:	4318      	orrs	r0, r3
    7dc4:	00c0      	lsls	r0, r0, #3
    7dc6:	0f6b      	lsrs	r3, r5, #29
    7dc8:	4318      	orrs	r0, r3
    7dca:	4b68      	ldr	r3, [pc, #416]	; (7f6c <__aeabi_dmul+0x1dc>)
    7dcc:	4683      	mov	fp, r0
    7dce:	469c      	mov	ip, r3
    7dd0:	2300      	movs	r3, #0
    7dd2:	4698      	mov	r8, r3
    7dd4:	00ee      	lsls	r6, r5, #3
    7dd6:	4467      	add	r7, ip
    7dd8:	9300      	str	r3, [sp, #0]
    7dda:	464b      	mov	r3, r9
    7ddc:	4649      	mov	r1, r9
    7dde:	031d      	lsls	r5, r3, #12
    7de0:	0fc9      	lsrs	r1, r1, #31
    7de2:	005b      	lsls	r3, r3, #1
    7de4:	4652      	mov	r2, sl
    7de6:	0b2d      	lsrs	r5, r5, #12
    7de8:	0d5b      	lsrs	r3, r3, #21
    7dea:	4689      	mov	r9, r1
    7dec:	d100      	bne.n	7df0 <__aeabi_dmul+0x60>
    7dee:	e06e      	b.n	7ece <__aeabi_dmul+0x13e>
    7df0:	495d      	ldr	r1, [pc, #372]	; (7f68 <__aeabi_dmul+0x1d8>)
    7df2:	428b      	cmp	r3, r1
    7df4:	d064      	beq.n	7ec0 <__aeabi_dmul+0x130>
    7df6:	2080      	movs	r0, #128	; 0x80
    7df8:	495c      	ldr	r1, [pc, #368]	; (7f6c <__aeabi_dmul+0x1dc>)
    7dfa:	0340      	lsls	r0, r0, #13
    7dfc:	468c      	mov	ip, r1
    7dfe:	2100      	movs	r1, #0
    7e00:	4305      	orrs	r5, r0
    7e02:	00ed      	lsls	r5, r5, #3
    7e04:	0f50      	lsrs	r0, r2, #29
    7e06:	4305      	orrs	r5, r0
    7e08:	00d2      	lsls	r2, r2, #3
    7e0a:	4463      	add	r3, ip
    7e0c:	4648      	mov	r0, r9
    7e0e:	18ff      	adds	r7, r7, r3
    7e10:	1c7b      	adds	r3, r7, #1
    7e12:	469a      	mov	sl, r3
    7e14:	9b00      	ldr	r3, [sp, #0]
    7e16:	4060      	eors	r0, r4
    7e18:	9002      	str	r0, [sp, #8]
    7e1a:	430b      	orrs	r3, r1
    7e1c:	2b0f      	cmp	r3, #15
    7e1e:	d900      	bls.n	7e22 <__aeabi_dmul+0x92>
    7e20:	e0ac      	b.n	7f7c <__aeabi_dmul+0x1ec>
    7e22:	4853      	ldr	r0, [pc, #332]	; (7f70 <__aeabi_dmul+0x1e0>)
    7e24:	009b      	lsls	r3, r3, #2
    7e26:	58c3      	ldr	r3, [r0, r3]
    7e28:	469f      	mov	pc, r3
    7e2a:	465b      	mov	r3, fp
    7e2c:	431d      	orrs	r5, r3
    7e2e:	d000      	beq.n	7e32 <__aeabi_dmul+0xa2>
    7e30:	e082      	b.n	7f38 <__aeabi_dmul+0x1a8>
    7e32:	2308      	movs	r3, #8
    7e34:	9300      	str	r3, [sp, #0]
    7e36:	2300      	movs	r3, #0
    7e38:	469b      	mov	fp, r3
    7e3a:	3302      	adds	r3, #2
    7e3c:	2600      	movs	r6, #0
    7e3e:	4698      	mov	r8, r3
    7e40:	e7cb      	b.n	7dda <__aeabi_dmul+0x4a>
    7e42:	9b02      	ldr	r3, [sp, #8]
    7e44:	9301      	str	r3, [sp, #4]
    7e46:	4643      	mov	r3, r8
    7e48:	2b02      	cmp	r3, #2
    7e4a:	d159      	bne.n	7f00 <__aeabi_dmul+0x170>
    7e4c:	2401      	movs	r4, #1
    7e4e:	2500      	movs	r5, #0
    7e50:	2600      	movs	r6, #0
    7e52:	9b01      	ldr	r3, [sp, #4]
    7e54:	401c      	ands	r4, r3
    7e56:	4b44      	ldr	r3, [pc, #272]	; (7f68 <__aeabi_dmul+0x1d8>)
    7e58:	2100      	movs	r1, #0
    7e5a:	032d      	lsls	r5, r5, #12
    7e5c:	0d0a      	lsrs	r2, r1, #20
    7e5e:	0512      	lsls	r2, r2, #20
    7e60:	0b2d      	lsrs	r5, r5, #12
    7e62:	4315      	orrs	r5, r2
    7e64:	4a43      	ldr	r2, [pc, #268]	; (7f74 <__aeabi_dmul+0x1e4>)
    7e66:	051b      	lsls	r3, r3, #20
    7e68:	4015      	ands	r5, r2
    7e6a:	431d      	orrs	r5, r3
    7e6c:	006d      	lsls	r5, r5, #1
    7e6e:	07e4      	lsls	r4, r4, #31
    7e70:	086d      	lsrs	r5, r5, #1
    7e72:	4325      	orrs	r5, r4
    7e74:	1c30      	adds	r0, r6, #0
    7e76:	1c29      	adds	r1, r5, #0
    7e78:	b007      	add	sp, #28
    7e7a:	bc3c      	pop	{r2, r3, r4, r5}
    7e7c:	4690      	mov	r8, r2
    7e7e:	4699      	mov	r9, r3
    7e80:	46a2      	mov	sl, r4
    7e82:	46ab      	mov	fp, r5
    7e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e86:	432b      	orrs	r3, r5
    7e88:	d04e      	beq.n	7f28 <__aeabi_dmul+0x198>
    7e8a:	465b      	mov	r3, fp
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d100      	bne.n	7e92 <__aeabi_dmul+0x102>
    7e90:	e185      	b.n	819e <__aeabi_dmul+0x40e>
    7e92:	4658      	mov	r0, fp
    7e94:	f000 fec4 	bl	8c20 <__clzsi2>
    7e98:	1c02      	adds	r2, r0, #0
    7e9a:	2328      	movs	r3, #40	; 0x28
    7e9c:	1c29      	adds	r1, r5, #0
    7e9e:	1a9b      	subs	r3, r3, r2
    7ea0:	1c16      	adds	r6, r2, #0
    7ea2:	4658      	mov	r0, fp
    7ea4:	40d9      	lsrs	r1, r3
    7ea6:	3e08      	subs	r6, #8
    7ea8:	40b0      	lsls	r0, r6
    7eaa:	1c0b      	adds	r3, r1, #0
    7eac:	40b5      	lsls	r5, r6
    7eae:	4303      	orrs	r3, r0
    7eb0:	469b      	mov	fp, r3
    7eb2:	1c2e      	adds	r6, r5, #0
    7eb4:	2300      	movs	r3, #0
    7eb6:	4f30      	ldr	r7, [pc, #192]	; (7f78 <__aeabi_dmul+0x1e8>)
    7eb8:	9300      	str	r3, [sp, #0]
    7eba:	1abf      	subs	r7, r7, r2
    7ebc:	4698      	mov	r8, r3
    7ebe:	e78c      	b.n	7dda <__aeabi_dmul+0x4a>
    7ec0:	4651      	mov	r1, sl
    7ec2:	4329      	orrs	r1, r5
    7ec4:	d12e      	bne.n	7f24 <__aeabi_dmul+0x194>
    7ec6:	2500      	movs	r5, #0
    7ec8:	2200      	movs	r2, #0
    7eca:	2102      	movs	r1, #2
    7ecc:	e79e      	b.n	7e0c <__aeabi_dmul+0x7c>
    7ece:	4651      	mov	r1, sl
    7ed0:	4329      	orrs	r1, r5
    7ed2:	d023      	beq.n	7f1c <__aeabi_dmul+0x18c>
    7ed4:	2d00      	cmp	r5, #0
    7ed6:	d100      	bne.n	7eda <__aeabi_dmul+0x14a>
    7ed8:	e154      	b.n	8184 <__aeabi_dmul+0x3f4>
    7eda:	1c28      	adds	r0, r5, #0
    7edc:	f000 fea0 	bl	8c20 <__clzsi2>
    7ee0:	1c03      	adds	r3, r0, #0
    7ee2:	2128      	movs	r1, #40	; 0x28
    7ee4:	4650      	mov	r0, sl
    7ee6:	1ac9      	subs	r1, r1, r3
    7ee8:	1c1a      	adds	r2, r3, #0
    7eea:	40c8      	lsrs	r0, r1
    7eec:	4651      	mov	r1, sl
    7eee:	3a08      	subs	r2, #8
    7ef0:	4091      	lsls	r1, r2
    7ef2:	4095      	lsls	r5, r2
    7ef4:	1c0a      	adds	r2, r1, #0
    7ef6:	4305      	orrs	r5, r0
    7ef8:	481f      	ldr	r0, [pc, #124]	; (7f78 <__aeabi_dmul+0x1e8>)
    7efa:	2100      	movs	r1, #0
    7efc:	1ac3      	subs	r3, r0, r3
    7efe:	e785      	b.n	7e0c <__aeabi_dmul+0x7c>
    7f00:	2b03      	cmp	r3, #3
    7f02:	d100      	bne.n	7f06 <__aeabi_dmul+0x176>
    7f04:	e1c2      	b.n	828c <__aeabi_dmul+0x4fc>
    7f06:	2b01      	cmp	r3, #1
    7f08:	d000      	beq.n	7f0c <__aeabi_dmul+0x17c>
    7f0a:	e16d      	b.n	81e8 <__aeabi_dmul+0x458>
    7f0c:	4644      	mov	r4, r8
    7f0e:	9b01      	ldr	r3, [sp, #4]
    7f10:	2500      	movs	r5, #0
    7f12:	401c      	ands	r4, r3
    7f14:	b2e4      	uxtb	r4, r4
    7f16:	2300      	movs	r3, #0
    7f18:	2600      	movs	r6, #0
    7f1a:	e79d      	b.n	7e58 <__aeabi_dmul+0xc8>
    7f1c:	2500      	movs	r5, #0
    7f1e:	2200      	movs	r2, #0
    7f20:	2101      	movs	r1, #1
    7f22:	e773      	b.n	7e0c <__aeabi_dmul+0x7c>
    7f24:	2103      	movs	r1, #3
    7f26:	e771      	b.n	7e0c <__aeabi_dmul+0x7c>
    7f28:	2304      	movs	r3, #4
    7f2a:	9300      	str	r3, [sp, #0]
    7f2c:	2300      	movs	r3, #0
    7f2e:	469b      	mov	fp, r3
    7f30:	3301      	adds	r3, #1
    7f32:	2600      	movs	r6, #0
    7f34:	4698      	mov	r8, r3
    7f36:	e750      	b.n	7dda <__aeabi_dmul+0x4a>
    7f38:	230c      	movs	r3, #12
    7f3a:	9300      	str	r3, [sp, #0]
    7f3c:	3b09      	subs	r3, #9
    7f3e:	4698      	mov	r8, r3
    7f40:	e74b      	b.n	7dda <__aeabi_dmul+0x4a>
    7f42:	2580      	movs	r5, #128	; 0x80
    7f44:	2400      	movs	r4, #0
    7f46:	032d      	lsls	r5, r5, #12
    7f48:	2600      	movs	r6, #0
    7f4a:	4b07      	ldr	r3, [pc, #28]	; (7f68 <__aeabi_dmul+0x1d8>)
    7f4c:	e784      	b.n	7e58 <__aeabi_dmul+0xc8>
    7f4e:	464b      	mov	r3, r9
    7f50:	46ab      	mov	fp, r5
    7f52:	1c16      	adds	r6, r2, #0
    7f54:	9301      	str	r3, [sp, #4]
    7f56:	4688      	mov	r8, r1
    7f58:	e775      	b.n	7e46 <__aeabi_dmul+0xb6>
    7f5a:	9b02      	ldr	r3, [sp, #8]
    7f5c:	46ab      	mov	fp, r5
    7f5e:	1c16      	adds	r6, r2, #0
    7f60:	9301      	str	r3, [sp, #4]
    7f62:	4688      	mov	r8, r1
    7f64:	e76f      	b.n	7e46 <__aeabi_dmul+0xb6>
    7f66:	46c0      	nop			; (mov r8, r8)
    7f68:	000007ff 	.word	0x000007ff
    7f6c:	fffffc01 	.word	0xfffffc01
    7f70:	0000f270 	.word	0x0000f270
    7f74:	800fffff 	.word	0x800fffff
    7f78:	fffffc0d 	.word	0xfffffc0d
    7f7c:	0c33      	lsrs	r3, r6, #16
    7f7e:	0436      	lsls	r6, r6, #16
    7f80:	0c36      	lsrs	r6, r6, #16
    7f82:	469c      	mov	ip, r3
    7f84:	1c33      	adds	r3, r6, #0
    7f86:	0c14      	lsrs	r4, r2, #16
    7f88:	0412      	lsls	r2, r2, #16
    7f8a:	0c12      	lsrs	r2, r2, #16
    7f8c:	4353      	muls	r3, r2
    7f8e:	4698      	mov	r8, r3
    7f90:	4663      	mov	r3, ip
    7f92:	4353      	muls	r3, r2
    7f94:	4699      	mov	r9, r3
    7f96:	4663      	mov	r3, ip
    7f98:	4363      	muls	r3, r4
    7f9a:	9301      	str	r3, [sp, #4]
    7f9c:	1c33      	adds	r3, r6, #0
    7f9e:	4641      	mov	r1, r8
    7fa0:	4363      	muls	r3, r4
    7fa2:	0c09      	lsrs	r1, r1, #16
    7fa4:	444b      	add	r3, r9
    7fa6:	185b      	adds	r3, r3, r1
    7fa8:	4599      	cmp	r9, r3
    7faa:	d905      	bls.n	7fb8 <__aeabi_dmul+0x228>
    7fac:	2080      	movs	r0, #128	; 0x80
    7fae:	0240      	lsls	r0, r0, #9
    7fb0:	4681      	mov	r9, r0
    7fb2:	9901      	ldr	r1, [sp, #4]
    7fb4:	4449      	add	r1, r9
    7fb6:	9101      	str	r1, [sp, #4]
    7fb8:	0c19      	lsrs	r1, r3, #16
    7fba:	9103      	str	r1, [sp, #12]
    7fbc:	4641      	mov	r1, r8
    7fbe:	0409      	lsls	r1, r1, #16
    7fc0:	0c09      	lsrs	r1, r1, #16
    7fc2:	041b      	lsls	r3, r3, #16
    7fc4:	185b      	adds	r3, r3, r1
    7fc6:	9304      	str	r3, [sp, #16]
    7fc8:	0c2b      	lsrs	r3, r5, #16
    7fca:	4698      	mov	r8, r3
    7fcc:	1c33      	adds	r3, r6, #0
    7fce:	042d      	lsls	r5, r5, #16
    7fd0:	0c29      	lsrs	r1, r5, #16
    7fd2:	434b      	muls	r3, r1
    7fd4:	4660      	mov	r0, ip
    7fd6:	9300      	str	r3, [sp, #0]
    7fd8:	4643      	mov	r3, r8
    7fda:	4665      	mov	r5, ip
    7fdc:	4358      	muls	r0, r3
    7fde:	435e      	muls	r6, r3
    7fe0:	9b00      	ldr	r3, [sp, #0]
    7fe2:	434d      	muls	r5, r1
    7fe4:	0c1b      	lsrs	r3, r3, #16
    7fe6:	4699      	mov	r9, r3
    7fe8:	19ae      	adds	r6, r5, r6
    7fea:	444e      	add	r6, r9
    7fec:	4684      	mov	ip, r0
    7fee:	42b5      	cmp	r5, r6
    7ff0:	d903      	bls.n	7ffa <__aeabi_dmul+0x26a>
    7ff2:	2380      	movs	r3, #128	; 0x80
    7ff4:	025b      	lsls	r3, r3, #9
    7ff6:	4699      	mov	r9, r3
    7ff8:	44cc      	add	ip, r9
    7ffa:	0c35      	lsrs	r5, r6, #16
    7ffc:	1c2b      	adds	r3, r5, #0
    7ffe:	9803      	ldr	r0, [sp, #12]
    8000:	4463      	add	r3, ip
    8002:	4684      	mov	ip, r0
    8004:	9305      	str	r3, [sp, #20]
    8006:	9b00      	ldr	r3, [sp, #0]
    8008:	0436      	lsls	r6, r6, #16
    800a:	041b      	lsls	r3, r3, #16
    800c:	0c1b      	lsrs	r3, r3, #16
    800e:	18f3      	adds	r3, r6, r3
    8010:	449c      	add	ip, r3
    8012:	4660      	mov	r0, ip
    8014:	9003      	str	r0, [sp, #12]
    8016:	4658      	mov	r0, fp
    8018:	0405      	lsls	r5, r0, #16
    801a:	0c06      	lsrs	r6, r0, #16
    801c:	0c28      	lsrs	r0, r5, #16
    801e:	4684      	mov	ip, r0
    8020:	4350      	muls	r0, r2
    8022:	1c35      	adds	r5, r6, #0
    8024:	4681      	mov	r9, r0
    8026:	4660      	mov	r0, ip
    8028:	4365      	muls	r5, r4
    802a:	4344      	muls	r4, r0
    802c:	4648      	mov	r0, r9
    802e:	0c00      	lsrs	r0, r0, #16
    8030:	4683      	mov	fp, r0
    8032:	4372      	muls	r2, r6
    8034:	1914      	adds	r4, r2, r4
    8036:	445c      	add	r4, fp
    8038:	42a2      	cmp	r2, r4
    803a:	d903      	bls.n	8044 <__aeabi_dmul+0x2b4>
    803c:	2280      	movs	r2, #128	; 0x80
    803e:	0252      	lsls	r2, r2, #9
    8040:	4693      	mov	fp, r2
    8042:	445d      	add	r5, fp
    8044:	0c22      	lsrs	r2, r4, #16
    8046:	18ad      	adds	r5, r5, r2
    8048:	464a      	mov	r2, r9
    804a:	0412      	lsls	r2, r2, #16
    804c:	0c12      	lsrs	r2, r2, #16
    804e:	0424      	lsls	r4, r4, #16
    8050:	4640      	mov	r0, r8
    8052:	18a4      	adds	r4, r4, r2
    8054:	4662      	mov	r2, ip
    8056:	434a      	muls	r2, r1
    8058:	4371      	muls	r1, r6
    805a:	4346      	muls	r6, r0
    805c:	4660      	mov	r0, ip
    805e:	9600      	str	r6, [sp, #0]
    8060:	4646      	mov	r6, r8
    8062:	4370      	muls	r0, r6
    8064:	4680      	mov	r8, r0
    8066:	0c10      	lsrs	r0, r2, #16
    8068:	4684      	mov	ip, r0
    806a:	4488      	add	r8, r1
    806c:	44e0      	add	r8, ip
    806e:	4541      	cmp	r1, r8
    8070:	d905      	bls.n	807e <__aeabi_dmul+0x2ee>
    8072:	2180      	movs	r1, #128	; 0x80
    8074:	0249      	lsls	r1, r1, #9
    8076:	468c      	mov	ip, r1
    8078:	9900      	ldr	r1, [sp, #0]
    807a:	4461      	add	r1, ip
    807c:	9100      	str	r1, [sp, #0]
    807e:	9801      	ldr	r0, [sp, #4]
    8080:	9903      	ldr	r1, [sp, #12]
    8082:	4684      	mov	ip, r0
    8084:	4461      	add	r1, ip
    8086:	4299      	cmp	r1, r3
    8088:	419b      	sbcs	r3, r3
    808a:	425b      	negs	r3, r3
    808c:	4699      	mov	r9, r3
    808e:	9805      	ldr	r0, [sp, #20]
    8090:	4643      	mov	r3, r8
    8092:	4684      	mov	ip, r0
    8094:	0412      	lsls	r2, r2, #16
    8096:	0c12      	lsrs	r2, r2, #16
    8098:	041b      	lsls	r3, r3, #16
    809a:	189b      	adds	r3, r3, r2
    809c:	4463      	add	r3, ip
    809e:	469c      	mov	ip, r3
    80a0:	46ab      	mov	fp, r5
    80a2:	4283      	cmp	r3, r0
    80a4:	419b      	sbcs	r3, r3
    80a6:	4640      	mov	r0, r8
    80a8:	190a      	adds	r2, r1, r4
    80aa:	44cc      	add	ip, r9
    80ac:	42a2      	cmp	r2, r4
    80ae:	4189      	sbcs	r1, r1
    80b0:	44e3      	add	fp, ip
    80b2:	45cc      	cmp	ip, r9
    80b4:	41b6      	sbcs	r6, r6
    80b6:	465c      	mov	r4, fp
    80b8:	0c00      	lsrs	r0, r0, #16
    80ba:	4680      	mov	r8, r0
    80bc:	4249      	negs	r1, r1
    80be:	4276      	negs	r6, r6
    80c0:	425b      	negs	r3, r3
    80c2:	1864      	adds	r4, r4, r1
    80c4:	4333      	orrs	r3, r6
    80c6:	4498      	add	r8, r3
    80c8:	428c      	cmp	r4, r1
    80ca:	4189      	sbcs	r1, r1
    80cc:	45ab      	cmp	fp, r5
    80ce:	419b      	sbcs	r3, r3
    80d0:	4249      	negs	r1, r1
    80d2:	425b      	negs	r3, r3
    80d4:	4319      	orrs	r1, r3
    80d6:	1c0d      	adds	r5, r1, #0
    80d8:	9b00      	ldr	r3, [sp, #0]
    80da:	4445      	add	r5, r8
    80dc:	18ee      	adds	r6, r5, r3
    80de:	0276      	lsls	r6, r6, #9
    80e0:	0de5      	lsrs	r5, r4, #23
    80e2:	432e      	orrs	r6, r5
    80e4:	46b3      	mov	fp, r6
    80e6:	9b04      	ldr	r3, [sp, #16]
    80e8:	0256      	lsls	r6, r2, #9
    80ea:	431e      	orrs	r6, r3
    80ec:	1e73      	subs	r3, r6, #1
    80ee:	419e      	sbcs	r6, r3
    80f0:	465b      	mov	r3, fp
    80f2:	0dd2      	lsrs	r2, r2, #23
    80f4:	4332      	orrs	r2, r6
    80f6:	0266      	lsls	r6, r4, #9
    80f8:	4316      	orrs	r6, r2
    80fa:	01db      	lsls	r3, r3, #7
    80fc:	d50a      	bpl.n	8114 <__aeabi_dmul+0x384>
    80fe:	2301      	movs	r3, #1
    8100:	4033      	ands	r3, r6
    8102:	0876      	lsrs	r6, r6, #1
    8104:	431e      	orrs	r6, r3
    8106:	465b      	mov	r3, fp
    8108:	07db      	lsls	r3, r3, #31
    810a:	431e      	orrs	r6, r3
    810c:	465b      	mov	r3, fp
    810e:	085b      	lsrs	r3, r3, #1
    8110:	469b      	mov	fp, r3
    8112:	4657      	mov	r7, sl
    8114:	4b63      	ldr	r3, [pc, #396]	; (82a4 <__aeabi_dmul+0x514>)
    8116:	18fb      	adds	r3, r7, r3
    8118:	2b00      	cmp	r3, #0
    811a:	dd5a      	ble.n	81d2 <__aeabi_dmul+0x442>
    811c:	0772      	lsls	r2, r6, #29
    811e:	d009      	beq.n	8134 <__aeabi_dmul+0x3a4>
    8120:	220f      	movs	r2, #15
    8122:	4032      	ands	r2, r6
    8124:	2a04      	cmp	r2, #4
    8126:	d005      	beq.n	8134 <__aeabi_dmul+0x3a4>
    8128:	1d32      	adds	r2, r6, #4
    812a:	42b2      	cmp	r2, r6
    812c:	41b6      	sbcs	r6, r6
    812e:	4276      	negs	r6, r6
    8130:	44b3      	add	fp, r6
    8132:	1c16      	adds	r6, r2, #0
    8134:	465a      	mov	r2, fp
    8136:	01d2      	lsls	r2, r2, #7
    8138:	d506      	bpl.n	8148 <__aeabi_dmul+0x3b8>
    813a:	465a      	mov	r2, fp
    813c:	4b5a      	ldr	r3, [pc, #360]	; (82a8 <__aeabi_dmul+0x518>)
    813e:	401a      	ands	r2, r3
    8140:	2380      	movs	r3, #128	; 0x80
    8142:	4693      	mov	fp, r2
    8144:	00db      	lsls	r3, r3, #3
    8146:	18fb      	adds	r3, r7, r3
    8148:	4a58      	ldr	r2, [pc, #352]	; (82ac <__aeabi_dmul+0x51c>)
    814a:	4293      	cmp	r3, r2
    814c:	dd34      	ble.n	81b8 <__aeabi_dmul+0x428>
    814e:	2401      	movs	r4, #1
    8150:	9b02      	ldr	r3, [sp, #8]
    8152:	2500      	movs	r5, #0
    8154:	401c      	ands	r4, r3
    8156:	2600      	movs	r6, #0
    8158:	4b55      	ldr	r3, [pc, #340]	; (82b0 <__aeabi_dmul+0x520>)
    815a:	e67d      	b.n	7e58 <__aeabi_dmul+0xc8>
    815c:	2080      	movs	r0, #128	; 0x80
    815e:	465b      	mov	r3, fp
    8160:	0300      	lsls	r0, r0, #12
    8162:	4203      	tst	r3, r0
    8164:	d008      	beq.n	8178 <__aeabi_dmul+0x3e8>
    8166:	4205      	tst	r5, r0
    8168:	d106      	bne.n	8178 <__aeabi_dmul+0x3e8>
    816a:	4305      	orrs	r5, r0
    816c:	032d      	lsls	r5, r5, #12
    816e:	0b2d      	lsrs	r5, r5, #12
    8170:	464c      	mov	r4, r9
    8172:	1c16      	adds	r6, r2, #0
    8174:	4b4e      	ldr	r3, [pc, #312]	; (82b0 <__aeabi_dmul+0x520>)
    8176:	e66f      	b.n	7e58 <__aeabi_dmul+0xc8>
    8178:	465d      	mov	r5, fp
    817a:	4305      	orrs	r5, r0
    817c:	032d      	lsls	r5, r5, #12
    817e:	0b2d      	lsrs	r5, r5, #12
    8180:	4b4b      	ldr	r3, [pc, #300]	; (82b0 <__aeabi_dmul+0x520>)
    8182:	e669      	b.n	7e58 <__aeabi_dmul+0xc8>
    8184:	4650      	mov	r0, sl
    8186:	f000 fd4b 	bl	8c20 <__clzsi2>
    818a:	1c03      	adds	r3, r0, #0
    818c:	3320      	adds	r3, #32
    818e:	2b27      	cmp	r3, #39	; 0x27
    8190:	dc00      	bgt.n	8194 <__aeabi_dmul+0x404>
    8192:	e6a6      	b.n	7ee2 <__aeabi_dmul+0x152>
    8194:	4655      	mov	r5, sl
    8196:	3808      	subs	r0, #8
    8198:	4085      	lsls	r5, r0
    819a:	2200      	movs	r2, #0
    819c:	e6ac      	b.n	7ef8 <__aeabi_dmul+0x168>
    819e:	1c28      	adds	r0, r5, #0
    81a0:	f000 fd3e 	bl	8c20 <__clzsi2>
    81a4:	1c02      	adds	r2, r0, #0
    81a6:	3220      	adds	r2, #32
    81a8:	2a27      	cmp	r2, #39	; 0x27
    81aa:	dc00      	bgt.n	81ae <__aeabi_dmul+0x41e>
    81ac:	e675      	b.n	7e9a <__aeabi_dmul+0x10a>
    81ae:	3808      	subs	r0, #8
    81b0:	4085      	lsls	r5, r0
    81b2:	2600      	movs	r6, #0
    81b4:	46ab      	mov	fp, r5
    81b6:	e67d      	b.n	7eb4 <__aeabi_dmul+0x124>
    81b8:	465a      	mov	r2, fp
    81ba:	08f6      	lsrs	r6, r6, #3
    81bc:	0752      	lsls	r2, r2, #29
    81be:	4316      	orrs	r6, r2
    81c0:	465a      	mov	r2, fp
    81c2:	2401      	movs	r4, #1
    81c4:	0255      	lsls	r5, r2, #9
    81c6:	9a02      	ldr	r2, [sp, #8]
    81c8:	055b      	lsls	r3, r3, #21
    81ca:	0b2d      	lsrs	r5, r5, #12
    81cc:	0d5b      	lsrs	r3, r3, #21
    81ce:	4014      	ands	r4, r2
    81d0:	e642      	b.n	7e58 <__aeabi_dmul+0xc8>
    81d2:	4d38      	ldr	r5, [pc, #224]	; (82b4 <__aeabi_dmul+0x524>)
    81d4:	1bed      	subs	r5, r5, r7
    81d6:	2d38      	cmp	r5, #56	; 0x38
    81d8:	dd0a      	ble.n	81f0 <__aeabi_dmul+0x460>
    81da:	2401      	movs	r4, #1
    81dc:	9b02      	ldr	r3, [sp, #8]
    81de:	2500      	movs	r5, #0
    81e0:	401c      	ands	r4, r3
    81e2:	2600      	movs	r6, #0
    81e4:	2300      	movs	r3, #0
    81e6:	e637      	b.n	7e58 <__aeabi_dmul+0xc8>
    81e8:	9b01      	ldr	r3, [sp, #4]
    81ea:	4657      	mov	r7, sl
    81ec:	9302      	str	r3, [sp, #8]
    81ee:	e791      	b.n	8114 <__aeabi_dmul+0x384>
    81f0:	2d1f      	cmp	r5, #31
    81f2:	dc25      	bgt.n	8240 <__aeabi_dmul+0x4b0>
    81f4:	4b30      	ldr	r3, [pc, #192]	; (82b8 <__aeabi_dmul+0x528>)
    81f6:	1c32      	adds	r2, r6, #0
    81f8:	469c      	mov	ip, r3
    81fa:	4467      	add	r7, ip
    81fc:	40be      	lsls	r6, r7
    81fe:	465b      	mov	r3, fp
    8200:	40bb      	lsls	r3, r7
    8202:	1c37      	adds	r7, r6, #0
    8204:	40ea      	lsrs	r2, r5
    8206:	1e7e      	subs	r6, r7, #1
    8208:	41b7      	sbcs	r7, r6
    820a:	4313      	orrs	r3, r2
    820c:	433b      	orrs	r3, r7
    820e:	1c1e      	adds	r6, r3, #0
    8210:	465b      	mov	r3, fp
    8212:	40eb      	lsrs	r3, r5
    8214:	1c1d      	adds	r5, r3, #0
    8216:	0773      	lsls	r3, r6, #29
    8218:	d009      	beq.n	822e <__aeabi_dmul+0x49e>
    821a:	230f      	movs	r3, #15
    821c:	4033      	ands	r3, r6
    821e:	2b04      	cmp	r3, #4
    8220:	d005      	beq.n	822e <__aeabi_dmul+0x49e>
    8222:	1d33      	adds	r3, r6, #4
    8224:	42b3      	cmp	r3, r6
    8226:	41b6      	sbcs	r6, r6
    8228:	4276      	negs	r6, r6
    822a:	19ad      	adds	r5, r5, r6
    822c:	1c1e      	adds	r6, r3, #0
    822e:	022b      	lsls	r3, r5, #8
    8230:	d520      	bpl.n	8274 <__aeabi_dmul+0x4e4>
    8232:	2401      	movs	r4, #1
    8234:	9b02      	ldr	r3, [sp, #8]
    8236:	2500      	movs	r5, #0
    8238:	401c      	ands	r4, r3
    823a:	2600      	movs	r6, #0
    823c:	2301      	movs	r3, #1
    823e:	e60b      	b.n	7e58 <__aeabi_dmul+0xc8>
    8240:	465a      	mov	r2, fp
    8242:	4b1e      	ldr	r3, [pc, #120]	; (82bc <__aeabi_dmul+0x52c>)
    8244:	1bdb      	subs	r3, r3, r7
    8246:	40da      	lsrs	r2, r3
    8248:	1c13      	adds	r3, r2, #0
    824a:	2d20      	cmp	r5, #32
    824c:	d01c      	beq.n	8288 <__aeabi_dmul+0x4f8>
    824e:	4a1c      	ldr	r2, [pc, #112]	; (82c0 <__aeabi_dmul+0x530>)
    8250:	4694      	mov	ip, r2
    8252:	465a      	mov	r2, fp
    8254:	4467      	add	r7, ip
    8256:	40ba      	lsls	r2, r7
    8258:	1c17      	adds	r7, r2, #0
    825a:	433e      	orrs	r6, r7
    825c:	1e72      	subs	r2, r6, #1
    825e:	4196      	sbcs	r6, r2
    8260:	431e      	orrs	r6, r3
    8262:	2307      	movs	r3, #7
    8264:	2500      	movs	r5, #0
    8266:	4033      	ands	r3, r6
    8268:	d007      	beq.n	827a <__aeabi_dmul+0x4ea>
    826a:	230f      	movs	r3, #15
    826c:	2500      	movs	r5, #0
    826e:	4033      	ands	r3, r6
    8270:	2b04      	cmp	r3, #4
    8272:	d1d6      	bne.n	8222 <__aeabi_dmul+0x492>
    8274:	076b      	lsls	r3, r5, #29
    8276:	026d      	lsls	r5, r5, #9
    8278:	0b2d      	lsrs	r5, r5, #12
    827a:	2401      	movs	r4, #1
    827c:	08f6      	lsrs	r6, r6, #3
    827e:	431e      	orrs	r6, r3
    8280:	9b02      	ldr	r3, [sp, #8]
    8282:	401c      	ands	r4, r3
    8284:	2300      	movs	r3, #0
    8286:	e5e7      	b.n	7e58 <__aeabi_dmul+0xc8>
    8288:	2700      	movs	r7, #0
    828a:	e7e6      	b.n	825a <__aeabi_dmul+0x4ca>
    828c:	2580      	movs	r5, #128	; 0x80
    828e:	465b      	mov	r3, fp
    8290:	2401      	movs	r4, #1
    8292:	032d      	lsls	r5, r5, #12
    8294:	431d      	orrs	r5, r3
    8296:	9b01      	ldr	r3, [sp, #4]
    8298:	032d      	lsls	r5, r5, #12
    829a:	4023      	ands	r3, r4
    829c:	1c1c      	adds	r4, r3, #0
    829e:	0b2d      	lsrs	r5, r5, #12
    82a0:	4b03      	ldr	r3, [pc, #12]	; (82b0 <__aeabi_dmul+0x520>)
    82a2:	e5d9      	b.n	7e58 <__aeabi_dmul+0xc8>
    82a4:	000003ff 	.word	0x000003ff
    82a8:	feffffff 	.word	0xfeffffff
    82ac:	000007fe 	.word	0x000007fe
    82b0:	000007ff 	.word	0x000007ff
    82b4:	fffffc02 	.word	0xfffffc02
    82b8:	0000041e 	.word	0x0000041e
    82bc:	fffffbe2 	.word	0xfffffbe2
    82c0:	0000043e 	.word	0x0000043e

000082c4 <__aeabi_dsub>:
    82c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82c6:	464d      	mov	r5, r9
    82c8:	4644      	mov	r4, r8
    82ca:	465f      	mov	r7, fp
    82cc:	4656      	mov	r6, sl
    82ce:	b4f0      	push	{r4, r5, r6, r7}
    82d0:	1c0e      	adds	r6, r1, #0
    82d2:	1c11      	adds	r1, r2, #0
    82d4:	0332      	lsls	r2, r6, #12
    82d6:	0a52      	lsrs	r2, r2, #9
    82d8:	0f47      	lsrs	r7, r0, #29
    82da:	4317      	orrs	r7, r2
    82dc:	00c5      	lsls	r5, r0, #3
    82de:	031a      	lsls	r2, r3, #12
    82e0:	0058      	lsls	r0, r3, #1
    82e2:	0fdb      	lsrs	r3, r3, #31
    82e4:	4699      	mov	r9, r3
    82e6:	0a52      	lsrs	r2, r2, #9
    82e8:	0f4b      	lsrs	r3, r1, #29
    82ea:	b083      	sub	sp, #12
    82ec:	431a      	orrs	r2, r3
    82ee:	00cb      	lsls	r3, r1, #3
    82f0:	9301      	str	r3, [sp, #4]
    82f2:	4bcf      	ldr	r3, [pc, #828]	; (8630 <__aeabi_dsub+0x36c>)
    82f4:	0074      	lsls	r4, r6, #1
    82f6:	0ff6      	lsrs	r6, r6, #31
    82f8:	0d64      	lsrs	r4, r4, #21
    82fa:	46b0      	mov	r8, r6
    82fc:	0d40      	lsrs	r0, r0, #21
    82fe:	4298      	cmp	r0, r3
    8300:	d100      	bne.n	8304 <__aeabi_dsub+0x40>
    8302:	e0e8      	b.n	84d6 <__aeabi_dsub+0x212>
    8304:	2301      	movs	r3, #1
    8306:	4649      	mov	r1, r9
    8308:	4059      	eors	r1, r3
    830a:	1c0b      	adds	r3, r1, #0
    830c:	429e      	cmp	r6, r3
    830e:	d100      	bne.n	8312 <__aeabi_dsub+0x4e>
    8310:	e0b1      	b.n	8476 <__aeabi_dsub+0x1b2>
    8312:	1a26      	subs	r6, r4, r0
    8314:	2e00      	cmp	r6, #0
    8316:	dc00      	bgt.n	831a <__aeabi_dsub+0x56>
    8318:	e11c      	b.n	8554 <__aeabi_dsub+0x290>
    831a:	2800      	cmp	r0, #0
    831c:	d142      	bne.n	83a4 <__aeabi_dsub+0xe0>
    831e:	1c13      	adds	r3, r2, #0
    8320:	9901      	ldr	r1, [sp, #4]
    8322:	430b      	orrs	r3, r1
    8324:	d000      	beq.n	8328 <__aeabi_dsub+0x64>
    8326:	e0e6      	b.n	84f6 <__aeabi_dsub+0x232>
    8328:	076b      	lsls	r3, r5, #29
    832a:	d100      	bne.n	832e <__aeabi_dsub+0x6a>
    832c:	e08e      	b.n	844c <__aeabi_dsub+0x188>
    832e:	230f      	movs	r3, #15
    8330:	402b      	ands	r3, r5
    8332:	2b04      	cmp	r3, #4
    8334:	d100      	bne.n	8338 <__aeabi_dsub+0x74>
    8336:	e089      	b.n	844c <__aeabi_dsub+0x188>
    8338:	1d2a      	adds	r2, r5, #4
    833a:	42aa      	cmp	r2, r5
    833c:	41ad      	sbcs	r5, r5
    833e:	2380      	movs	r3, #128	; 0x80
    8340:	2601      	movs	r6, #1
    8342:	4641      	mov	r1, r8
    8344:	426d      	negs	r5, r5
    8346:	197f      	adds	r7, r7, r5
    8348:	041b      	lsls	r3, r3, #16
    834a:	403b      	ands	r3, r7
    834c:	400e      	ands	r6, r1
    834e:	1c15      	adds	r5, r2, #0
    8350:	2b00      	cmp	r3, #0
    8352:	d100      	bne.n	8356 <__aeabi_dsub+0x92>
    8354:	e083      	b.n	845e <__aeabi_dsub+0x19a>
    8356:	4bb6      	ldr	r3, [pc, #728]	; (8630 <__aeabi_dsub+0x36c>)
    8358:	3401      	adds	r4, #1
    835a:	429c      	cmp	r4, r3
    835c:	d100      	bne.n	8360 <__aeabi_dsub+0x9c>
    835e:	e116      	b.n	858e <__aeabi_dsub+0x2ca>
    8360:	1c3a      	adds	r2, r7, #0
    8362:	4bb4      	ldr	r3, [pc, #720]	; (8634 <__aeabi_dsub+0x370>)
    8364:	08ed      	lsrs	r5, r5, #3
    8366:	401a      	ands	r2, r3
    8368:	0750      	lsls	r0, r2, #29
    836a:	0564      	lsls	r4, r4, #21
    836c:	0252      	lsls	r2, r2, #9
    836e:	4305      	orrs	r5, r0
    8370:	0b12      	lsrs	r2, r2, #12
    8372:	0d64      	lsrs	r4, r4, #21
    8374:	2100      	movs	r1, #0
    8376:	0312      	lsls	r2, r2, #12
    8378:	0d0b      	lsrs	r3, r1, #20
    837a:	051b      	lsls	r3, r3, #20
    837c:	0564      	lsls	r4, r4, #21
    837e:	0b12      	lsrs	r2, r2, #12
    8380:	431a      	orrs	r2, r3
    8382:	0863      	lsrs	r3, r4, #1
    8384:	4cac      	ldr	r4, [pc, #688]	; (8638 <__aeabi_dsub+0x374>)
    8386:	07f6      	lsls	r6, r6, #31
    8388:	4014      	ands	r4, r2
    838a:	431c      	orrs	r4, r3
    838c:	0064      	lsls	r4, r4, #1
    838e:	0864      	lsrs	r4, r4, #1
    8390:	4334      	orrs	r4, r6
    8392:	1c28      	adds	r0, r5, #0
    8394:	1c21      	adds	r1, r4, #0
    8396:	b003      	add	sp, #12
    8398:	bc3c      	pop	{r2, r3, r4, r5}
    839a:	4690      	mov	r8, r2
    839c:	4699      	mov	r9, r3
    839e:	46a2      	mov	sl, r4
    83a0:	46ab      	mov	fp, r5
    83a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83a4:	4ba2      	ldr	r3, [pc, #648]	; (8630 <__aeabi_dsub+0x36c>)
    83a6:	429c      	cmp	r4, r3
    83a8:	d0be      	beq.n	8328 <__aeabi_dsub+0x64>
    83aa:	2380      	movs	r3, #128	; 0x80
    83ac:	041b      	lsls	r3, r3, #16
    83ae:	431a      	orrs	r2, r3
    83b0:	2e38      	cmp	r6, #56	; 0x38
    83b2:	dd00      	ble.n	83b6 <__aeabi_dsub+0xf2>
    83b4:	e103      	b.n	85be <__aeabi_dsub+0x2fa>
    83b6:	2e1f      	cmp	r6, #31
    83b8:	dd00      	ble.n	83bc <__aeabi_dsub+0xf8>
    83ba:	e13f      	b.n	863c <__aeabi_dsub+0x378>
    83bc:	2020      	movs	r0, #32
    83be:	1b83      	subs	r3, r0, r6
    83c0:	4699      	mov	r9, r3
    83c2:	1c13      	adds	r3, r2, #0
    83c4:	4649      	mov	r1, r9
    83c6:	408b      	lsls	r3, r1
    83c8:	469c      	mov	ip, r3
    83ca:	9b01      	ldr	r3, [sp, #4]
    83cc:	4660      	mov	r0, ip
    83ce:	40f3      	lsrs	r3, r6
    83d0:	4303      	orrs	r3, r0
    83d2:	9801      	ldr	r0, [sp, #4]
    83d4:	40f2      	lsrs	r2, r6
    83d6:	4088      	lsls	r0, r1
    83d8:	1c01      	adds	r1, r0, #0
    83da:	1e48      	subs	r0, r1, #1
    83dc:	4181      	sbcs	r1, r0
    83de:	430b      	orrs	r3, r1
    83e0:	1aeb      	subs	r3, r5, r3
    83e2:	429d      	cmp	r5, r3
    83e4:	4180      	sbcs	r0, r0
    83e6:	1c1d      	adds	r5, r3, #0
    83e8:	1aba      	subs	r2, r7, r2
    83ea:	4240      	negs	r0, r0
    83ec:	1a17      	subs	r7, r2, r0
    83ee:	023b      	lsls	r3, r7, #8
    83f0:	d400      	bmi.n	83f4 <__aeabi_dsub+0x130>
    83f2:	e0a8      	b.n	8546 <__aeabi_dsub+0x282>
    83f4:	027a      	lsls	r2, r7, #9
    83f6:	0a56      	lsrs	r6, r2, #9
    83f8:	2e00      	cmp	r6, #0
    83fa:	d100      	bne.n	83fe <__aeabi_dsub+0x13a>
    83fc:	e0ca      	b.n	8594 <__aeabi_dsub+0x2d0>
    83fe:	1c30      	adds	r0, r6, #0
    8400:	f000 fc0e 	bl	8c20 <__clzsi2>
    8404:	1c03      	adds	r3, r0, #0
    8406:	3b08      	subs	r3, #8
    8408:	2b1f      	cmp	r3, #31
    840a:	dd00      	ble.n	840e <__aeabi_dsub+0x14a>
    840c:	e0cb      	b.n	85a6 <__aeabi_dsub+0x2e2>
    840e:	2228      	movs	r2, #40	; 0x28
    8410:	1c29      	adds	r1, r5, #0
    8412:	1a12      	subs	r2, r2, r0
    8414:	40d1      	lsrs	r1, r2
    8416:	409e      	lsls	r6, r3
    8418:	1c0a      	adds	r2, r1, #0
    841a:	409d      	lsls	r5, r3
    841c:	4332      	orrs	r2, r6
    841e:	429c      	cmp	r4, r3
    8420:	dd00      	ble.n	8424 <__aeabi_dsub+0x160>
    8422:	e0c8      	b.n	85b6 <__aeabi_dsub+0x2f2>
    8424:	1b1c      	subs	r4, r3, r4
    8426:	1c67      	adds	r7, r4, #1
    8428:	2f1f      	cmp	r7, #31
    842a:	dd00      	ble.n	842e <__aeabi_dsub+0x16a>
    842c:	e0ed      	b.n	860a <__aeabi_dsub+0x346>
    842e:	231f      	movs	r3, #31
    8430:	1c29      	adds	r1, r5, #0
    8432:	1b1c      	subs	r4, r3, r4
    8434:	1c13      	adds	r3, r2, #0
    8436:	40a5      	lsls	r5, r4
    8438:	40a3      	lsls	r3, r4
    843a:	40f9      	lsrs	r1, r7
    843c:	1e6c      	subs	r4, r5, #1
    843e:	41a5      	sbcs	r5, r4
    8440:	40fa      	lsrs	r2, r7
    8442:	4319      	orrs	r1, r3
    8444:	430d      	orrs	r5, r1
    8446:	1c17      	adds	r7, r2, #0
    8448:	2400      	movs	r4, #0
    844a:	e76d      	b.n	8328 <__aeabi_dsub+0x64>
    844c:	2380      	movs	r3, #128	; 0x80
    844e:	2601      	movs	r6, #1
    8450:	4642      	mov	r2, r8
    8452:	041b      	lsls	r3, r3, #16
    8454:	403b      	ands	r3, r7
    8456:	4016      	ands	r6, r2
    8458:	2b00      	cmp	r3, #0
    845a:	d000      	beq.n	845e <__aeabi_dsub+0x19a>
    845c:	e77b      	b.n	8356 <__aeabi_dsub+0x92>
    845e:	4b74      	ldr	r3, [pc, #464]	; (8630 <__aeabi_dsub+0x36c>)
    8460:	08ed      	lsrs	r5, r5, #3
    8462:	0778      	lsls	r0, r7, #29
    8464:	4305      	orrs	r5, r0
    8466:	08fa      	lsrs	r2, r7, #3
    8468:	429c      	cmp	r4, r3
    846a:	d03b      	beq.n	84e4 <__aeabi_dsub+0x220>
    846c:	0312      	lsls	r2, r2, #12
    846e:	0564      	lsls	r4, r4, #21
    8470:	0b12      	lsrs	r2, r2, #12
    8472:	0d64      	lsrs	r4, r4, #21
    8474:	e77e      	b.n	8374 <__aeabi_dsub+0xb0>
    8476:	1a23      	subs	r3, r4, r0
    8478:	469a      	mov	sl, r3
    847a:	2b00      	cmp	r3, #0
    847c:	dc00      	bgt.n	8480 <__aeabi_dsub+0x1bc>
    847e:	e0a5      	b.n	85cc <__aeabi_dsub+0x308>
    8480:	2800      	cmp	r0, #0
    8482:	d044      	beq.n	850e <__aeabi_dsub+0x24a>
    8484:	486a      	ldr	r0, [pc, #424]	; (8630 <__aeabi_dsub+0x36c>)
    8486:	4284      	cmp	r4, r0
    8488:	d100      	bne.n	848c <__aeabi_dsub+0x1c8>
    848a:	e74d      	b.n	8328 <__aeabi_dsub+0x64>
    848c:	2080      	movs	r0, #128	; 0x80
    848e:	0400      	lsls	r0, r0, #16
    8490:	4302      	orrs	r2, r0
    8492:	4653      	mov	r3, sl
    8494:	2b38      	cmp	r3, #56	; 0x38
    8496:	dc00      	bgt.n	849a <__aeabi_dsub+0x1d6>
    8498:	e11c      	b.n	86d4 <__aeabi_dsub+0x410>
    849a:	9b01      	ldr	r3, [sp, #4]
    849c:	431a      	orrs	r2, r3
    849e:	1e51      	subs	r1, r2, #1
    84a0:	418a      	sbcs	r2, r1
    84a2:	b2d1      	uxtb	r1, r2
    84a4:	2200      	movs	r2, #0
    84a6:	1949      	adds	r1, r1, r5
    84a8:	42a9      	cmp	r1, r5
    84aa:	4180      	sbcs	r0, r0
    84ac:	1c0d      	adds	r5, r1, #0
    84ae:	19d2      	adds	r2, r2, r7
    84b0:	4240      	negs	r0, r0
    84b2:	1817      	adds	r7, r2, r0
    84b4:	023b      	lsls	r3, r7, #8
    84b6:	d546      	bpl.n	8546 <__aeabi_dsub+0x282>
    84b8:	4b5d      	ldr	r3, [pc, #372]	; (8630 <__aeabi_dsub+0x36c>)
    84ba:	3401      	adds	r4, #1
    84bc:	429c      	cmp	r4, r3
    84be:	d100      	bne.n	84c2 <__aeabi_dsub+0x1fe>
    84c0:	e169      	b.n	8796 <__aeabi_dsub+0x4d2>
    84c2:	2001      	movs	r0, #1
    84c4:	4a5b      	ldr	r2, [pc, #364]	; (8634 <__aeabi_dsub+0x370>)
    84c6:	086b      	lsrs	r3, r5, #1
    84c8:	403a      	ands	r2, r7
    84ca:	4028      	ands	r0, r5
    84cc:	4318      	orrs	r0, r3
    84ce:	07d5      	lsls	r5, r2, #31
    84d0:	4305      	orrs	r5, r0
    84d2:	0857      	lsrs	r7, r2, #1
    84d4:	e728      	b.n	8328 <__aeabi_dsub+0x64>
    84d6:	1c13      	adds	r3, r2, #0
    84d8:	9901      	ldr	r1, [sp, #4]
    84da:	430b      	orrs	r3, r1
    84dc:	d100      	bne.n	84e0 <__aeabi_dsub+0x21c>
    84de:	e711      	b.n	8304 <__aeabi_dsub+0x40>
    84e0:	464b      	mov	r3, r9
    84e2:	e713      	b.n	830c <__aeabi_dsub+0x48>
    84e4:	1c2b      	adds	r3, r5, #0
    84e6:	4313      	orrs	r3, r2
    84e8:	d051      	beq.n	858e <__aeabi_dsub+0x2ca>
    84ea:	2380      	movs	r3, #128	; 0x80
    84ec:	031b      	lsls	r3, r3, #12
    84ee:	431a      	orrs	r2, r3
    84f0:	0312      	lsls	r2, r2, #12
    84f2:	0b12      	lsrs	r2, r2, #12
    84f4:	e73e      	b.n	8374 <__aeabi_dsub+0xb0>
    84f6:	3e01      	subs	r6, #1
    84f8:	2e00      	cmp	r6, #0
    84fa:	d000      	beq.n	84fe <__aeabi_dsub+0x23a>
    84fc:	e080      	b.n	8600 <__aeabi_dsub+0x33c>
    84fe:	1a69      	subs	r1, r5, r1
    8500:	428d      	cmp	r5, r1
    8502:	419b      	sbcs	r3, r3
    8504:	1aba      	subs	r2, r7, r2
    8506:	425b      	negs	r3, r3
    8508:	1ad7      	subs	r7, r2, r3
    850a:	1c0d      	adds	r5, r1, #0
    850c:	e76f      	b.n	83ee <__aeabi_dsub+0x12a>
    850e:	1c10      	adds	r0, r2, #0
    8510:	9b01      	ldr	r3, [sp, #4]
    8512:	4318      	orrs	r0, r3
    8514:	d100      	bne.n	8518 <__aeabi_dsub+0x254>
    8516:	e707      	b.n	8328 <__aeabi_dsub+0x64>
    8518:	2301      	movs	r3, #1
    851a:	425b      	negs	r3, r3
    851c:	469c      	mov	ip, r3
    851e:	44e2      	add	sl, ip
    8520:	4653      	mov	r3, sl
    8522:	2b00      	cmp	r3, #0
    8524:	d000      	beq.n	8528 <__aeabi_dsub+0x264>
    8526:	e102      	b.n	872e <__aeabi_dsub+0x46a>
    8528:	9b01      	ldr	r3, [sp, #4]
    852a:	19d2      	adds	r2, r2, r7
    852c:	1959      	adds	r1, r3, r5
    852e:	42a9      	cmp	r1, r5
    8530:	419b      	sbcs	r3, r3
    8532:	425b      	negs	r3, r3
    8534:	18d7      	adds	r7, r2, r3
    8536:	1c0d      	adds	r5, r1, #0
    8538:	e7bc      	b.n	84b4 <__aeabi_dsub+0x1f0>
    853a:	4663      	mov	r3, ip
    853c:	4303      	orrs	r3, r0
    853e:	d100      	bne.n	8542 <__aeabi_dsub+0x27e>
    8540:	e128      	b.n	8794 <__aeabi_dsub+0x4d0>
    8542:	1c07      	adds	r7, r0, #0
    8544:	4665      	mov	r5, ip
    8546:	076b      	lsls	r3, r5, #29
    8548:	d000      	beq.n	854c <__aeabi_dsub+0x288>
    854a:	e6f0      	b.n	832e <__aeabi_dsub+0x6a>
    854c:	2601      	movs	r6, #1
    854e:	4643      	mov	r3, r8
    8550:	401e      	ands	r6, r3
    8552:	e784      	b.n	845e <__aeabi_dsub+0x19a>
    8554:	2e00      	cmp	r6, #0
    8556:	d000      	beq.n	855a <__aeabi_dsub+0x296>
    8558:	e081      	b.n	865e <__aeabi_dsub+0x39a>
    855a:	1c60      	adds	r0, r4, #1
    855c:	0540      	lsls	r0, r0, #21
    855e:	0d40      	lsrs	r0, r0, #21
    8560:	2801      	cmp	r0, #1
    8562:	dc00      	bgt.n	8566 <__aeabi_dsub+0x2a2>
    8564:	e107      	b.n	8776 <__aeabi_dsub+0x4b2>
    8566:	9901      	ldr	r1, [sp, #4]
    8568:	1a68      	subs	r0, r5, r1
    856a:	4684      	mov	ip, r0
    856c:	4565      	cmp	r5, ip
    856e:	41b6      	sbcs	r6, r6
    8570:	1ab8      	subs	r0, r7, r2
    8572:	4276      	negs	r6, r6
    8574:	1b86      	subs	r6, r0, r6
    8576:	0230      	lsls	r0, r6, #8
    8578:	d400      	bmi.n	857c <__aeabi_dsub+0x2b8>
    857a:	e0a1      	b.n	86c0 <__aeabi_dsub+0x3fc>
    857c:	468c      	mov	ip, r1
    857e:	1b4d      	subs	r5, r1, r5
    8580:	45ac      	cmp	ip, r5
    8582:	4189      	sbcs	r1, r1
    8584:	1bd2      	subs	r2, r2, r7
    8586:	4249      	negs	r1, r1
    8588:	1a56      	subs	r6, r2, r1
    858a:	4698      	mov	r8, r3
    858c:	e734      	b.n	83f8 <__aeabi_dsub+0x134>
    858e:	2200      	movs	r2, #0
    8590:	2500      	movs	r5, #0
    8592:	e6ef      	b.n	8374 <__aeabi_dsub+0xb0>
    8594:	1c28      	adds	r0, r5, #0
    8596:	f000 fb43 	bl	8c20 <__clzsi2>
    859a:	3020      	adds	r0, #32
    859c:	1c03      	adds	r3, r0, #0
    859e:	3b08      	subs	r3, #8
    85a0:	2b1f      	cmp	r3, #31
    85a2:	dc00      	bgt.n	85a6 <__aeabi_dsub+0x2e2>
    85a4:	e733      	b.n	840e <__aeabi_dsub+0x14a>
    85a6:	1c02      	adds	r2, r0, #0
    85a8:	3a28      	subs	r2, #40	; 0x28
    85aa:	4095      	lsls	r5, r2
    85ac:	1c2a      	adds	r2, r5, #0
    85ae:	2500      	movs	r5, #0
    85b0:	429c      	cmp	r4, r3
    85b2:	dc00      	bgt.n	85b6 <__aeabi_dsub+0x2f2>
    85b4:	e736      	b.n	8424 <__aeabi_dsub+0x160>
    85b6:	4f1f      	ldr	r7, [pc, #124]	; (8634 <__aeabi_dsub+0x370>)
    85b8:	1ae4      	subs	r4, r4, r3
    85ba:	4017      	ands	r7, r2
    85bc:	e6b4      	b.n	8328 <__aeabi_dsub+0x64>
    85be:	9b01      	ldr	r3, [sp, #4]
    85c0:	431a      	orrs	r2, r3
    85c2:	1e51      	subs	r1, r2, #1
    85c4:	418a      	sbcs	r2, r1
    85c6:	b2d3      	uxtb	r3, r2
    85c8:	2200      	movs	r2, #0
    85ca:	e709      	b.n	83e0 <__aeabi_dsub+0x11c>
    85cc:	2b00      	cmp	r3, #0
    85ce:	d000      	beq.n	85d2 <__aeabi_dsub+0x30e>
    85d0:	e101      	b.n	87d6 <__aeabi_dsub+0x512>
    85d2:	1c60      	adds	r0, r4, #1
    85d4:	0543      	lsls	r3, r0, #21
    85d6:	0d5b      	lsrs	r3, r3, #21
    85d8:	2b01      	cmp	r3, #1
    85da:	dc00      	bgt.n	85de <__aeabi_dsub+0x31a>
    85dc:	e0b0      	b.n	8740 <__aeabi_dsub+0x47c>
    85de:	4b14      	ldr	r3, [pc, #80]	; (8630 <__aeabi_dsub+0x36c>)
    85e0:	4298      	cmp	r0, r3
    85e2:	d100      	bne.n	85e6 <__aeabi_dsub+0x322>
    85e4:	e11e      	b.n	8824 <__aeabi_dsub+0x560>
    85e6:	9b01      	ldr	r3, [sp, #4]
    85e8:	19d2      	adds	r2, r2, r7
    85ea:	1959      	adds	r1, r3, r5
    85ec:	42a9      	cmp	r1, r5
    85ee:	419b      	sbcs	r3, r3
    85f0:	425b      	negs	r3, r3
    85f2:	18d2      	adds	r2, r2, r3
    85f4:	0849      	lsrs	r1, r1, #1
    85f6:	07d5      	lsls	r5, r2, #31
    85f8:	430d      	orrs	r5, r1
    85fa:	0857      	lsrs	r7, r2, #1
    85fc:	1c04      	adds	r4, r0, #0
    85fe:	e693      	b.n	8328 <__aeabi_dsub+0x64>
    8600:	4b0b      	ldr	r3, [pc, #44]	; (8630 <__aeabi_dsub+0x36c>)
    8602:	429c      	cmp	r4, r3
    8604:	d000      	beq.n	8608 <__aeabi_dsub+0x344>
    8606:	e6d3      	b.n	83b0 <__aeabi_dsub+0xec>
    8608:	e68e      	b.n	8328 <__aeabi_dsub+0x64>
    860a:	1c21      	adds	r1, r4, #0
    860c:	1c13      	adds	r3, r2, #0
    860e:	391f      	subs	r1, #31
    8610:	40cb      	lsrs	r3, r1
    8612:	1c19      	adds	r1, r3, #0
    8614:	2f20      	cmp	r7, #32
    8616:	d100      	bne.n	861a <__aeabi_dsub+0x356>
    8618:	e08e      	b.n	8738 <__aeabi_dsub+0x474>
    861a:	233f      	movs	r3, #63	; 0x3f
    861c:	1b1c      	subs	r4, r3, r4
    861e:	40a2      	lsls	r2, r4
    8620:	4315      	orrs	r5, r2
    8622:	1e6a      	subs	r2, r5, #1
    8624:	4195      	sbcs	r5, r2
    8626:	2700      	movs	r7, #0
    8628:	430d      	orrs	r5, r1
    862a:	2400      	movs	r4, #0
    862c:	e78b      	b.n	8546 <__aeabi_dsub+0x282>
    862e:	46c0      	nop			; (mov r8, r8)
    8630:	000007ff 	.word	0x000007ff
    8634:	ff7fffff 	.word	0xff7fffff
    8638:	800fffff 	.word	0x800fffff
    863c:	1c33      	adds	r3, r6, #0
    863e:	1c10      	adds	r0, r2, #0
    8640:	3b20      	subs	r3, #32
    8642:	40d8      	lsrs	r0, r3
    8644:	2e20      	cmp	r6, #32
    8646:	d079      	beq.n	873c <__aeabi_dsub+0x478>
    8648:	2340      	movs	r3, #64	; 0x40
    864a:	1b9b      	subs	r3, r3, r6
    864c:	409a      	lsls	r2, r3
    864e:	1c13      	adds	r3, r2, #0
    8650:	9a01      	ldr	r2, [sp, #4]
    8652:	4313      	orrs	r3, r2
    8654:	1e59      	subs	r1, r3, #1
    8656:	418b      	sbcs	r3, r1
    8658:	2200      	movs	r2, #0
    865a:	4303      	orrs	r3, r0
    865c:	e6c0      	b.n	83e0 <__aeabi_dsub+0x11c>
    865e:	2c00      	cmp	r4, #0
    8660:	d053      	beq.n	870a <__aeabi_dsub+0x446>
    8662:	4cc7      	ldr	r4, [pc, #796]	; (8980 <__aeabi_dsub+0x6bc>)
    8664:	42a0      	cmp	r0, r4
    8666:	d100      	bne.n	866a <__aeabi_dsub+0x3a6>
    8668:	e0b0      	b.n	87cc <__aeabi_dsub+0x508>
    866a:	2480      	movs	r4, #128	; 0x80
    866c:	4271      	negs	r1, r6
    866e:	4689      	mov	r9, r1
    8670:	0424      	lsls	r4, r4, #16
    8672:	4327      	orrs	r7, r4
    8674:	4649      	mov	r1, r9
    8676:	2938      	cmp	r1, #56	; 0x38
    8678:	dd00      	ble.n	867c <__aeabi_dsub+0x3b8>
    867a:	e0cd      	b.n	8818 <__aeabi_dsub+0x554>
    867c:	291f      	cmp	r1, #31
    867e:	dd00      	ble.n	8682 <__aeabi_dsub+0x3be>
    8680:	e159      	b.n	8936 <__aeabi_dsub+0x672>
    8682:	2420      	movs	r4, #32
    8684:	1c3e      	adds	r6, r7, #0
    8686:	1a61      	subs	r1, r4, r1
    8688:	408e      	lsls	r6, r1
    868a:	468a      	mov	sl, r1
    868c:	46b0      	mov	r8, r6
    868e:	4649      	mov	r1, r9
    8690:	1c2e      	adds	r6, r5, #0
    8692:	40ce      	lsrs	r6, r1
    8694:	4651      	mov	r1, sl
    8696:	46b4      	mov	ip, r6
    8698:	408d      	lsls	r5, r1
    869a:	4664      	mov	r4, ip
    869c:	4646      	mov	r6, r8
    869e:	4649      	mov	r1, r9
    86a0:	4326      	orrs	r6, r4
    86a2:	1e6c      	subs	r4, r5, #1
    86a4:	41a5      	sbcs	r5, r4
    86a6:	40cf      	lsrs	r7, r1
    86a8:	4335      	orrs	r5, r6
    86aa:	9901      	ldr	r1, [sp, #4]
    86ac:	1bd7      	subs	r7, r2, r7
    86ae:	468c      	mov	ip, r1
    86b0:	1b4d      	subs	r5, r1, r5
    86b2:	45ac      	cmp	ip, r5
    86b4:	4192      	sbcs	r2, r2
    86b6:	4252      	negs	r2, r2
    86b8:	1abf      	subs	r7, r7, r2
    86ba:	1c04      	adds	r4, r0, #0
    86bc:	4698      	mov	r8, r3
    86be:	e696      	b.n	83ee <__aeabi_dsub+0x12a>
    86c0:	4663      	mov	r3, ip
    86c2:	4665      	mov	r5, ip
    86c4:	4333      	orrs	r3, r6
    86c6:	d000      	beq.n	86ca <__aeabi_dsub+0x406>
    86c8:	e696      	b.n	83f8 <__aeabi_dsub+0x134>
    86ca:	2600      	movs	r6, #0
    86cc:	2700      	movs	r7, #0
    86ce:	2400      	movs	r4, #0
    86d0:	2500      	movs	r5, #0
    86d2:	e6c4      	b.n	845e <__aeabi_dsub+0x19a>
    86d4:	2b1f      	cmp	r3, #31
    86d6:	dc61      	bgt.n	879c <__aeabi_dsub+0x4d8>
    86d8:	2020      	movs	r0, #32
    86da:	1ac3      	subs	r3, r0, r3
    86dc:	469b      	mov	fp, r3
    86de:	1c13      	adds	r3, r2, #0
    86e0:	4659      	mov	r1, fp
    86e2:	408b      	lsls	r3, r1
    86e4:	4651      	mov	r1, sl
    86e6:	4699      	mov	r9, r3
    86e8:	9b01      	ldr	r3, [sp, #4]
    86ea:	40cb      	lsrs	r3, r1
    86ec:	469c      	mov	ip, r3
    86ee:	464b      	mov	r3, r9
    86f0:	4660      	mov	r0, ip
    86f2:	4303      	orrs	r3, r0
    86f4:	469c      	mov	ip, r3
    86f6:	465b      	mov	r3, fp
    86f8:	9901      	ldr	r1, [sp, #4]
    86fa:	4099      	lsls	r1, r3
    86fc:	4663      	mov	r3, ip
    86fe:	1e48      	subs	r0, r1, #1
    8700:	4181      	sbcs	r1, r0
    8702:	4319      	orrs	r1, r3
    8704:	4653      	mov	r3, sl
    8706:	40da      	lsrs	r2, r3
    8708:	e6cd      	b.n	84a6 <__aeabi_dsub+0x1e2>
    870a:	1c3c      	adds	r4, r7, #0
    870c:	432c      	orrs	r4, r5
    870e:	d05d      	beq.n	87cc <__aeabi_dsub+0x508>
    8710:	43f1      	mvns	r1, r6
    8712:	4689      	mov	r9, r1
    8714:	2900      	cmp	r1, #0
    8716:	d155      	bne.n	87c4 <__aeabi_dsub+0x500>
    8718:	9901      	ldr	r1, [sp, #4]
    871a:	1bd2      	subs	r2, r2, r7
    871c:	468c      	mov	ip, r1
    871e:	1b4d      	subs	r5, r1, r5
    8720:	45ac      	cmp	ip, r5
    8722:	4189      	sbcs	r1, r1
    8724:	4249      	negs	r1, r1
    8726:	1a57      	subs	r7, r2, r1
    8728:	1c04      	adds	r4, r0, #0
    872a:	4698      	mov	r8, r3
    872c:	e65f      	b.n	83ee <__aeabi_dsub+0x12a>
    872e:	4894      	ldr	r0, [pc, #592]	; (8980 <__aeabi_dsub+0x6bc>)
    8730:	4284      	cmp	r4, r0
    8732:	d000      	beq.n	8736 <__aeabi_dsub+0x472>
    8734:	e6ad      	b.n	8492 <__aeabi_dsub+0x1ce>
    8736:	e5f7      	b.n	8328 <__aeabi_dsub+0x64>
    8738:	2200      	movs	r2, #0
    873a:	e771      	b.n	8620 <__aeabi_dsub+0x35c>
    873c:	2300      	movs	r3, #0
    873e:	e787      	b.n	8650 <__aeabi_dsub+0x38c>
    8740:	1c3b      	adds	r3, r7, #0
    8742:	432b      	orrs	r3, r5
    8744:	2c00      	cmp	r4, #0
    8746:	d000      	beq.n	874a <__aeabi_dsub+0x486>
    8748:	e0da      	b.n	8900 <__aeabi_dsub+0x63c>
    874a:	2b00      	cmp	r3, #0
    874c:	d100      	bne.n	8750 <__aeabi_dsub+0x48c>
    874e:	e113      	b.n	8978 <__aeabi_dsub+0x6b4>
    8750:	1c13      	adds	r3, r2, #0
    8752:	9901      	ldr	r1, [sp, #4]
    8754:	430b      	orrs	r3, r1
    8756:	d100      	bne.n	875a <__aeabi_dsub+0x496>
    8758:	e5e6      	b.n	8328 <__aeabi_dsub+0x64>
    875a:	1949      	adds	r1, r1, r5
    875c:	42a9      	cmp	r1, r5
    875e:	419b      	sbcs	r3, r3
    8760:	19d2      	adds	r2, r2, r7
    8762:	425b      	negs	r3, r3
    8764:	18d7      	adds	r7, r2, r3
    8766:	023b      	lsls	r3, r7, #8
    8768:	d400      	bmi.n	876c <__aeabi_dsub+0x4a8>
    876a:	e121      	b.n	89b0 <__aeabi_dsub+0x6ec>
    876c:	4b85      	ldr	r3, [pc, #532]	; (8984 <__aeabi_dsub+0x6c0>)
    876e:	1c0d      	adds	r5, r1, #0
    8770:	401f      	ands	r7, r3
    8772:	1c04      	adds	r4, r0, #0
    8774:	e5d8      	b.n	8328 <__aeabi_dsub+0x64>
    8776:	1c38      	adds	r0, r7, #0
    8778:	4328      	orrs	r0, r5
    877a:	2c00      	cmp	r4, #0
    877c:	d140      	bne.n	8800 <__aeabi_dsub+0x53c>
    877e:	2800      	cmp	r0, #0
    8780:	d000      	beq.n	8784 <__aeabi_dsub+0x4c0>
    8782:	e083      	b.n	888c <__aeabi_dsub+0x5c8>
    8784:	1c10      	adds	r0, r2, #0
    8786:	9901      	ldr	r1, [sp, #4]
    8788:	4308      	orrs	r0, r1
    878a:	d003      	beq.n	8794 <__aeabi_dsub+0x4d0>
    878c:	1c17      	adds	r7, r2, #0
    878e:	1c0d      	adds	r5, r1, #0
    8790:	4698      	mov	r8, r3
    8792:	e5c9      	b.n	8328 <__aeabi_dsub+0x64>
    8794:	2600      	movs	r6, #0
    8796:	2700      	movs	r7, #0
    8798:	2500      	movs	r5, #0
    879a:	e660      	b.n	845e <__aeabi_dsub+0x19a>
    879c:	4650      	mov	r0, sl
    879e:	1c13      	adds	r3, r2, #0
    87a0:	3820      	subs	r0, #32
    87a2:	40c3      	lsrs	r3, r0
    87a4:	1c18      	adds	r0, r3, #0
    87a6:	4653      	mov	r3, sl
    87a8:	2b20      	cmp	r3, #32
    87aa:	d100      	bne.n	87ae <__aeabi_dsub+0x4ea>
    87ac:	e0c1      	b.n	8932 <__aeabi_dsub+0x66e>
    87ae:	2340      	movs	r3, #64	; 0x40
    87b0:	4651      	mov	r1, sl
    87b2:	1a5b      	subs	r3, r3, r1
    87b4:	409a      	lsls	r2, r3
    87b6:	9901      	ldr	r1, [sp, #4]
    87b8:	4311      	orrs	r1, r2
    87ba:	1e4a      	subs	r2, r1, #1
    87bc:	4191      	sbcs	r1, r2
    87be:	2200      	movs	r2, #0
    87c0:	4301      	orrs	r1, r0
    87c2:	e670      	b.n	84a6 <__aeabi_dsub+0x1e2>
    87c4:	4c6e      	ldr	r4, [pc, #440]	; (8980 <__aeabi_dsub+0x6bc>)
    87c6:	42a0      	cmp	r0, r4
    87c8:	d000      	beq.n	87cc <__aeabi_dsub+0x508>
    87ca:	e753      	b.n	8674 <__aeabi_dsub+0x3b0>
    87cc:	1c17      	adds	r7, r2, #0
    87ce:	9d01      	ldr	r5, [sp, #4]
    87d0:	1c04      	adds	r4, r0, #0
    87d2:	4698      	mov	r8, r3
    87d4:	e5a8      	b.n	8328 <__aeabi_dsub+0x64>
    87d6:	2c00      	cmp	r4, #0
    87d8:	d128      	bne.n	882c <__aeabi_dsub+0x568>
    87da:	1c3c      	adds	r4, r7, #0
    87dc:	432c      	orrs	r4, r5
    87de:	d100      	bne.n	87e2 <__aeabi_dsub+0x51e>
    87e0:	e08a      	b.n	88f8 <__aeabi_dsub+0x634>
    87e2:	43db      	mvns	r3, r3
    87e4:	469a      	mov	sl, r3
    87e6:	2b00      	cmp	r3, #0
    87e8:	d000      	beq.n	87ec <__aeabi_dsub+0x528>
    87ea:	e082      	b.n	88f2 <__aeabi_dsub+0x62e>
    87ec:	9b01      	ldr	r3, [sp, #4]
    87ee:	19d2      	adds	r2, r2, r7
    87f0:	469c      	mov	ip, r3
    87f2:	4465      	add	r5, ip
    87f4:	429d      	cmp	r5, r3
    87f6:	4189      	sbcs	r1, r1
    87f8:	4249      	negs	r1, r1
    87fa:	1857      	adds	r7, r2, r1
    87fc:	1c04      	adds	r4, r0, #0
    87fe:	e659      	b.n	84b4 <__aeabi_dsub+0x1f0>
    8800:	2800      	cmp	r0, #0
    8802:	d15b      	bne.n	88bc <__aeabi_dsub+0x5f8>
    8804:	1c10      	adds	r0, r2, #0
    8806:	9901      	ldr	r1, [sp, #4]
    8808:	4308      	orrs	r0, r1
    880a:	d100      	bne.n	880e <__aeabi_dsub+0x54a>
    880c:	e0a4      	b.n	8958 <__aeabi_dsub+0x694>
    880e:	1c17      	adds	r7, r2, #0
    8810:	1c0d      	adds	r5, r1, #0
    8812:	4698      	mov	r8, r3
    8814:	4c5a      	ldr	r4, [pc, #360]	; (8980 <__aeabi_dsub+0x6bc>)
    8816:	e587      	b.n	8328 <__aeabi_dsub+0x64>
    8818:	433d      	orrs	r5, r7
    881a:	1e6f      	subs	r7, r5, #1
    881c:	41bd      	sbcs	r5, r7
    881e:	2700      	movs	r7, #0
    8820:	b2ed      	uxtb	r5, r5
    8822:	e742      	b.n	86aa <__aeabi_dsub+0x3e6>
    8824:	1c04      	adds	r4, r0, #0
    8826:	2700      	movs	r7, #0
    8828:	2500      	movs	r5, #0
    882a:	e618      	b.n	845e <__aeabi_dsub+0x19a>
    882c:	4c54      	ldr	r4, [pc, #336]	; (8980 <__aeabi_dsub+0x6bc>)
    882e:	42a0      	cmp	r0, r4
    8830:	d062      	beq.n	88f8 <__aeabi_dsub+0x634>
    8832:	4653      	mov	r3, sl
    8834:	2480      	movs	r4, #128	; 0x80
    8836:	425b      	negs	r3, r3
    8838:	469a      	mov	sl, r3
    883a:	0424      	lsls	r4, r4, #16
    883c:	4327      	orrs	r7, r4
    883e:	4653      	mov	r3, sl
    8840:	2b38      	cmp	r3, #56	; 0x38
    8842:	dd00      	ble.n	8846 <__aeabi_dsub+0x582>
    8844:	e08e      	b.n	8964 <__aeabi_dsub+0x6a0>
    8846:	2b1f      	cmp	r3, #31
    8848:	dd00      	ble.n	884c <__aeabi_dsub+0x588>
    884a:	e09d      	b.n	8988 <__aeabi_dsub+0x6c4>
    884c:	2420      	movs	r4, #32
    884e:	1ae3      	subs	r3, r4, r3
    8850:	469b      	mov	fp, r3
    8852:	1c3b      	adds	r3, r7, #0
    8854:	4659      	mov	r1, fp
    8856:	408b      	lsls	r3, r1
    8858:	4651      	mov	r1, sl
    885a:	4699      	mov	r9, r3
    885c:	1c2b      	adds	r3, r5, #0
    885e:	40cb      	lsrs	r3, r1
    8860:	469c      	mov	ip, r3
    8862:	464b      	mov	r3, r9
    8864:	4664      	mov	r4, ip
    8866:	4323      	orrs	r3, r4
    8868:	469c      	mov	ip, r3
    886a:	465b      	mov	r3, fp
    886c:	409d      	lsls	r5, r3
    886e:	4663      	mov	r3, ip
    8870:	1e6c      	subs	r4, r5, #1
    8872:	41a5      	sbcs	r5, r4
    8874:	40cf      	lsrs	r7, r1
    8876:	431d      	orrs	r5, r3
    8878:	9b01      	ldr	r3, [sp, #4]
    887a:	18bf      	adds	r7, r7, r2
    887c:	469c      	mov	ip, r3
    887e:	4465      	add	r5, ip
    8880:	429d      	cmp	r5, r3
    8882:	4192      	sbcs	r2, r2
    8884:	4252      	negs	r2, r2
    8886:	18bf      	adds	r7, r7, r2
    8888:	1c04      	adds	r4, r0, #0
    888a:	e613      	b.n	84b4 <__aeabi_dsub+0x1f0>
    888c:	1c10      	adds	r0, r2, #0
    888e:	9901      	ldr	r1, [sp, #4]
    8890:	4308      	orrs	r0, r1
    8892:	d100      	bne.n	8896 <__aeabi_dsub+0x5d2>
    8894:	e548      	b.n	8328 <__aeabi_dsub+0x64>
    8896:	1a68      	subs	r0, r5, r1
    8898:	4684      	mov	ip, r0
    889a:	4285      	cmp	r5, r0
    889c:	4180      	sbcs	r0, r0
    889e:	1abe      	subs	r6, r7, r2
    88a0:	4240      	negs	r0, r0
    88a2:	1a30      	subs	r0, r6, r0
    88a4:	0206      	lsls	r6, r0, #8
    88a6:	d400      	bmi.n	88aa <__aeabi_dsub+0x5e6>
    88a8:	e647      	b.n	853a <__aeabi_dsub+0x276>
    88aa:	468c      	mov	ip, r1
    88ac:	1b4d      	subs	r5, r1, r5
    88ae:	45ac      	cmp	ip, r5
    88b0:	4189      	sbcs	r1, r1
    88b2:	1bd2      	subs	r2, r2, r7
    88b4:	4249      	negs	r1, r1
    88b6:	1a57      	subs	r7, r2, r1
    88b8:	4698      	mov	r8, r3
    88ba:	e535      	b.n	8328 <__aeabi_dsub+0x64>
    88bc:	1c10      	adds	r0, r2, #0
    88be:	9901      	ldr	r1, [sp, #4]
    88c0:	4308      	orrs	r0, r1
    88c2:	d034      	beq.n	892e <__aeabi_dsub+0x66a>
    88c4:	2480      	movs	r4, #128	; 0x80
    88c6:	0778      	lsls	r0, r7, #29
    88c8:	08ed      	lsrs	r5, r5, #3
    88ca:	08ff      	lsrs	r7, r7, #3
    88cc:	0324      	lsls	r4, r4, #12
    88ce:	4328      	orrs	r0, r5
    88d0:	4227      	tst	r7, r4
    88d2:	d008      	beq.n	88e6 <__aeabi_dsub+0x622>
    88d4:	08d6      	lsrs	r6, r2, #3
    88d6:	4226      	tst	r6, r4
    88d8:	d105      	bne.n	88e6 <__aeabi_dsub+0x622>
    88da:	08c9      	lsrs	r1, r1, #3
    88dc:	0752      	lsls	r2, r2, #29
    88de:	430a      	orrs	r2, r1
    88e0:	1c10      	adds	r0, r2, #0
    88e2:	1c37      	adds	r7, r6, #0
    88e4:	4698      	mov	r8, r3
    88e6:	00ff      	lsls	r7, r7, #3
    88e8:	0f42      	lsrs	r2, r0, #29
    88ea:	4317      	orrs	r7, r2
    88ec:	00c5      	lsls	r5, r0, #3
    88ee:	4c24      	ldr	r4, [pc, #144]	; (8980 <__aeabi_dsub+0x6bc>)
    88f0:	e51a      	b.n	8328 <__aeabi_dsub+0x64>
    88f2:	4c23      	ldr	r4, [pc, #140]	; (8980 <__aeabi_dsub+0x6bc>)
    88f4:	42a0      	cmp	r0, r4
    88f6:	d1a2      	bne.n	883e <__aeabi_dsub+0x57a>
    88f8:	1c17      	adds	r7, r2, #0
    88fa:	9d01      	ldr	r5, [sp, #4]
    88fc:	1c04      	adds	r4, r0, #0
    88fe:	e513      	b.n	8328 <__aeabi_dsub+0x64>
    8900:	2b00      	cmp	r3, #0
    8902:	d035      	beq.n	8970 <__aeabi_dsub+0x6ac>
    8904:	1c13      	adds	r3, r2, #0
    8906:	9901      	ldr	r1, [sp, #4]
    8908:	430b      	orrs	r3, r1
    890a:	d010      	beq.n	892e <__aeabi_dsub+0x66a>
    890c:	2480      	movs	r4, #128	; 0x80
    890e:	0778      	lsls	r0, r7, #29
    8910:	08ed      	lsrs	r5, r5, #3
    8912:	08ff      	lsrs	r7, r7, #3
    8914:	0324      	lsls	r4, r4, #12
    8916:	4328      	orrs	r0, r5
    8918:	4227      	tst	r7, r4
    891a:	d0e4      	beq.n	88e6 <__aeabi_dsub+0x622>
    891c:	08d3      	lsrs	r3, r2, #3
    891e:	4223      	tst	r3, r4
    8920:	d1e1      	bne.n	88e6 <__aeabi_dsub+0x622>
    8922:	08c9      	lsrs	r1, r1, #3
    8924:	0752      	lsls	r2, r2, #29
    8926:	430a      	orrs	r2, r1
    8928:	1c10      	adds	r0, r2, #0
    892a:	1c1f      	adds	r7, r3, #0
    892c:	e7db      	b.n	88e6 <__aeabi_dsub+0x622>
    892e:	4c14      	ldr	r4, [pc, #80]	; (8980 <__aeabi_dsub+0x6bc>)
    8930:	e4fa      	b.n	8328 <__aeabi_dsub+0x64>
    8932:	2200      	movs	r2, #0
    8934:	e73f      	b.n	87b6 <__aeabi_dsub+0x4f2>
    8936:	464c      	mov	r4, r9
    8938:	1c3e      	adds	r6, r7, #0
    893a:	3c20      	subs	r4, #32
    893c:	40e6      	lsrs	r6, r4
    893e:	4649      	mov	r1, r9
    8940:	1c34      	adds	r4, r6, #0
    8942:	2920      	cmp	r1, #32
    8944:	d032      	beq.n	89ac <__aeabi_dsub+0x6e8>
    8946:	2640      	movs	r6, #64	; 0x40
    8948:	1a76      	subs	r6, r6, r1
    894a:	40b7      	lsls	r7, r6
    894c:	433d      	orrs	r5, r7
    894e:	1e6f      	subs	r7, r5, #1
    8950:	41bd      	sbcs	r5, r7
    8952:	2700      	movs	r7, #0
    8954:	4325      	orrs	r5, r4
    8956:	e6a8      	b.n	86aa <__aeabi_dsub+0x3e6>
    8958:	2780      	movs	r7, #128	; 0x80
    895a:	2600      	movs	r6, #0
    895c:	03ff      	lsls	r7, r7, #15
    895e:	4c08      	ldr	r4, [pc, #32]	; (8980 <__aeabi_dsub+0x6bc>)
    8960:	2500      	movs	r5, #0
    8962:	e57c      	b.n	845e <__aeabi_dsub+0x19a>
    8964:	433d      	orrs	r5, r7
    8966:	1e6f      	subs	r7, r5, #1
    8968:	41bd      	sbcs	r5, r7
    896a:	2700      	movs	r7, #0
    896c:	b2ed      	uxtb	r5, r5
    896e:	e783      	b.n	8878 <__aeabi_dsub+0x5b4>
    8970:	1c17      	adds	r7, r2, #0
    8972:	9d01      	ldr	r5, [sp, #4]
    8974:	4c02      	ldr	r4, [pc, #8]	; (8980 <__aeabi_dsub+0x6bc>)
    8976:	e4d7      	b.n	8328 <__aeabi_dsub+0x64>
    8978:	1c17      	adds	r7, r2, #0
    897a:	9d01      	ldr	r5, [sp, #4]
    897c:	e4d4      	b.n	8328 <__aeabi_dsub+0x64>
    897e:	46c0      	nop			; (mov r8, r8)
    8980:	000007ff 	.word	0x000007ff
    8984:	ff7fffff 	.word	0xff7fffff
    8988:	4654      	mov	r4, sl
    898a:	1c3b      	adds	r3, r7, #0
    898c:	3c20      	subs	r4, #32
    898e:	40e3      	lsrs	r3, r4
    8990:	1c1c      	adds	r4, r3, #0
    8992:	4653      	mov	r3, sl
    8994:	2b20      	cmp	r3, #32
    8996:	d00d      	beq.n	89b4 <__aeabi_dsub+0x6f0>
    8998:	2340      	movs	r3, #64	; 0x40
    899a:	4651      	mov	r1, sl
    899c:	1a5b      	subs	r3, r3, r1
    899e:	409f      	lsls	r7, r3
    89a0:	433d      	orrs	r5, r7
    89a2:	1e6f      	subs	r7, r5, #1
    89a4:	41bd      	sbcs	r5, r7
    89a6:	2700      	movs	r7, #0
    89a8:	4325      	orrs	r5, r4
    89aa:	e765      	b.n	8878 <__aeabi_dsub+0x5b4>
    89ac:	2700      	movs	r7, #0
    89ae:	e7cd      	b.n	894c <__aeabi_dsub+0x688>
    89b0:	1c0d      	adds	r5, r1, #0
    89b2:	e5c8      	b.n	8546 <__aeabi_dsub+0x282>
    89b4:	2700      	movs	r7, #0
    89b6:	e7f3      	b.n	89a0 <__aeabi_dsub+0x6dc>

000089b8 <__aeabi_d2iz>:
    89b8:	030b      	lsls	r3, r1, #12
    89ba:	b530      	push	{r4, r5, lr}
    89bc:	4c13      	ldr	r4, [pc, #76]	; (8a0c <__aeabi_d2iz+0x54>)
    89be:	0b1a      	lsrs	r2, r3, #12
    89c0:	004b      	lsls	r3, r1, #1
    89c2:	1c05      	adds	r5, r0, #0
    89c4:	0d5b      	lsrs	r3, r3, #21
    89c6:	0fc9      	lsrs	r1, r1, #31
    89c8:	2000      	movs	r0, #0
    89ca:	42a3      	cmp	r3, r4
    89cc:	dd10      	ble.n	89f0 <__aeabi_d2iz+0x38>
    89ce:	4810      	ldr	r0, [pc, #64]	; (8a10 <__aeabi_d2iz+0x58>)
    89d0:	4283      	cmp	r3, r0
    89d2:	dc0e      	bgt.n	89f2 <__aeabi_d2iz+0x3a>
    89d4:	2080      	movs	r0, #128	; 0x80
    89d6:	4c0f      	ldr	r4, [pc, #60]	; (8a14 <__aeabi_d2iz+0x5c>)
    89d8:	0340      	lsls	r0, r0, #13
    89da:	4302      	orrs	r2, r0
    89dc:	1ae4      	subs	r4, r4, r3
    89de:	2c1f      	cmp	r4, #31
    89e0:	dd0a      	ble.n	89f8 <__aeabi_d2iz+0x40>
    89e2:	480d      	ldr	r0, [pc, #52]	; (8a18 <__aeabi_d2iz+0x60>)
    89e4:	1ac3      	subs	r3, r0, r3
    89e6:	40da      	lsrs	r2, r3
    89e8:	1c13      	adds	r3, r2, #0
    89ea:	4248      	negs	r0, r1
    89ec:	4043      	eors	r3, r0
    89ee:	1858      	adds	r0, r3, r1
    89f0:	bd30      	pop	{r4, r5, pc}
    89f2:	4b0a      	ldr	r3, [pc, #40]	; (8a1c <__aeabi_d2iz+0x64>)
    89f4:	18c8      	adds	r0, r1, r3
    89f6:	e7fb      	b.n	89f0 <__aeabi_d2iz+0x38>
    89f8:	1c28      	adds	r0, r5, #0
    89fa:	40e0      	lsrs	r0, r4
    89fc:	4c08      	ldr	r4, [pc, #32]	; (8a20 <__aeabi_d2iz+0x68>)
    89fe:	46a4      	mov	ip, r4
    8a00:	4463      	add	r3, ip
    8a02:	409a      	lsls	r2, r3
    8a04:	1c13      	adds	r3, r2, #0
    8a06:	4303      	orrs	r3, r0
    8a08:	e7ef      	b.n	89ea <__aeabi_d2iz+0x32>
    8a0a:	46c0      	nop			; (mov r8, r8)
    8a0c:	000003fe 	.word	0x000003fe
    8a10:	0000041d 	.word	0x0000041d
    8a14:	00000433 	.word	0x00000433
    8a18:	00000413 	.word	0x00000413
    8a1c:	7fffffff 	.word	0x7fffffff
    8a20:	fffffbed 	.word	0xfffffbed

00008a24 <__aeabi_i2d>:
    8a24:	b538      	push	{r3, r4, r5, lr}
    8a26:	1e04      	subs	r4, r0, #0
    8a28:	d016      	beq.n	8a58 <__aeabi_i2d+0x34>
    8a2a:	0fc5      	lsrs	r5, r0, #31
    8a2c:	d000      	beq.n	8a30 <__aeabi_i2d+0xc>
    8a2e:	4244      	negs	r4, r0
    8a30:	1c20      	adds	r0, r4, #0
    8a32:	f000 f8f5 	bl	8c20 <__clzsi2>
    8a36:	4b17      	ldr	r3, [pc, #92]	; (8a94 <__aeabi_i2d+0x70>)
    8a38:	1a1b      	subs	r3, r3, r0
    8a3a:	280a      	cmp	r0, #10
    8a3c:	dc21      	bgt.n	8a82 <__aeabi_i2d+0x5e>
    8a3e:	1c02      	adds	r2, r0, #0
    8a40:	1c21      	adds	r1, r4, #0
    8a42:	3215      	adds	r2, #21
    8a44:	4091      	lsls	r1, r2
    8a46:	1c0a      	adds	r2, r1, #0
    8a48:	210b      	movs	r1, #11
    8a4a:	1a08      	subs	r0, r1, r0
    8a4c:	40c4      	lsrs	r4, r0
    8a4e:	055b      	lsls	r3, r3, #21
    8a50:	0324      	lsls	r4, r4, #12
    8a52:	0b24      	lsrs	r4, r4, #12
    8a54:	0d5b      	lsrs	r3, r3, #21
    8a56:	e003      	b.n	8a60 <__aeabi_i2d+0x3c>
    8a58:	2500      	movs	r5, #0
    8a5a:	2300      	movs	r3, #0
    8a5c:	2400      	movs	r4, #0
    8a5e:	2200      	movs	r2, #0
    8a60:	2100      	movs	r1, #0
    8a62:	1c10      	adds	r0, r2, #0
    8a64:	0324      	lsls	r4, r4, #12
    8a66:	0d0a      	lsrs	r2, r1, #20
    8a68:	0512      	lsls	r2, r2, #20
    8a6a:	0b24      	lsrs	r4, r4, #12
    8a6c:	4314      	orrs	r4, r2
    8a6e:	4a0a      	ldr	r2, [pc, #40]	; (8a98 <__aeabi_i2d+0x74>)
    8a70:	051b      	lsls	r3, r3, #20
    8a72:	4014      	ands	r4, r2
    8a74:	431c      	orrs	r4, r3
    8a76:	0064      	lsls	r4, r4, #1
    8a78:	07ed      	lsls	r5, r5, #31
    8a7a:	0864      	lsrs	r4, r4, #1
    8a7c:	432c      	orrs	r4, r5
    8a7e:	1c21      	adds	r1, r4, #0
    8a80:	bd38      	pop	{r3, r4, r5, pc}
    8a82:	380b      	subs	r0, #11
    8a84:	4084      	lsls	r4, r0
    8a86:	055b      	lsls	r3, r3, #21
    8a88:	0324      	lsls	r4, r4, #12
    8a8a:	0b24      	lsrs	r4, r4, #12
    8a8c:	0d5b      	lsrs	r3, r3, #21
    8a8e:	2200      	movs	r2, #0
    8a90:	e7e6      	b.n	8a60 <__aeabi_i2d+0x3c>
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	0000041e 	.word	0x0000041e
    8a98:	800fffff 	.word	0x800fffff

00008a9c <__aeabi_ui2d>:
    8a9c:	b510      	push	{r4, lr}
    8a9e:	1e04      	subs	r4, r0, #0
    8aa0:	d010      	beq.n	8ac4 <__aeabi_ui2d+0x28>
    8aa2:	f000 f8bd 	bl	8c20 <__clzsi2>
    8aa6:	4a14      	ldr	r2, [pc, #80]	; (8af8 <__aeabi_ui2d+0x5c>)
    8aa8:	1a12      	subs	r2, r2, r0
    8aaa:	280a      	cmp	r0, #10
    8aac:	dc1a      	bgt.n	8ae4 <__aeabi_ui2d+0x48>
    8aae:	230b      	movs	r3, #11
    8ab0:	1c21      	adds	r1, r4, #0
    8ab2:	1a1b      	subs	r3, r3, r0
    8ab4:	40d9      	lsrs	r1, r3
    8ab6:	3015      	adds	r0, #21
    8ab8:	030b      	lsls	r3, r1, #12
    8aba:	0552      	lsls	r2, r2, #21
    8abc:	4084      	lsls	r4, r0
    8abe:	0b1b      	lsrs	r3, r3, #12
    8ac0:	0d52      	lsrs	r2, r2, #21
    8ac2:	e001      	b.n	8ac8 <__aeabi_ui2d+0x2c>
    8ac4:	2200      	movs	r2, #0
    8ac6:	2300      	movs	r3, #0
    8ac8:	2100      	movs	r1, #0
    8aca:	031b      	lsls	r3, r3, #12
    8acc:	1c20      	adds	r0, r4, #0
    8ace:	0b1c      	lsrs	r4, r3, #12
    8ad0:	0d0b      	lsrs	r3, r1, #20
    8ad2:	051b      	lsls	r3, r3, #20
    8ad4:	4323      	orrs	r3, r4
    8ad6:	4c09      	ldr	r4, [pc, #36]	; (8afc <__aeabi_ui2d+0x60>)
    8ad8:	0512      	lsls	r2, r2, #20
    8ada:	4023      	ands	r3, r4
    8adc:	4313      	orrs	r3, r2
    8ade:	005b      	lsls	r3, r3, #1
    8ae0:	0859      	lsrs	r1, r3, #1
    8ae2:	bd10      	pop	{r4, pc}
    8ae4:	1c03      	adds	r3, r0, #0
    8ae6:	3b0b      	subs	r3, #11
    8ae8:	409c      	lsls	r4, r3
    8aea:	0552      	lsls	r2, r2, #21
    8aec:	0323      	lsls	r3, r4, #12
    8aee:	0b1b      	lsrs	r3, r3, #12
    8af0:	0d52      	lsrs	r2, r2, #21
    8af2:	2400      	movs	r4, #0
    8af4:	e7e8      	b.n	8ac8 <__aeabi_ui2d+0x2c>
    8af6:	46c0      	nop			; (mov r8, r8)
    8af8:	0000041e 	.word	0x0000041e
    8afc:	800fffff 	.word	0x800fffff

00008b00 <__aeabi_d2f>:
    8b00:	b570      	push	{r4, r5, r6, lr}
    8b02:	030b      	lsls	r3, r1, #12
    8b04:	004d      	lsls	r5, r1, #1
    8b06:	0f44      	lsrs	r4, r0, #29
    8b08:	0d6d      	lsrs	r5, r5, #21
    8b0a:	0a5b      	lsrs	r3, r3, #9
    8b0c:	4323      	orrs	r3, r4
    8b0e:	1c6c      	adds	r4, r5, #1
    8b10:	0564      	lsls	r4, r4, #21
    8b12:	0fc9      	lsrs	r1, r1, #31
    8b14:	00c2      	lsls	r2, r0, #3
    8b16:	0d64      	lsrs	r4, r4, #21
    8b18:	2c01      	cmp	r4, #1
    8b1a:	dd2a      	ble.n	8b72 <__aeabi_d2f+0x72>
    8b1c:	4c3b      	ldr	r4, [pc, #236]	; (8c0c <__aeabi_d2f+0x10c>)
    8b1e:	192c      	adds	r4, r5, r4
    8b20:	2cfe      	cmp	r4, #254	; 0xfe
    8b22:	dc1a      	bgt.n	8b5a <__aeabi_d2f+0x5a>
    8b24:	2c00      	cmp	r4, #0
    8b26:	dd35      	ble.n	8b94 <__aeabi_d2f+0x94>
    8b28:	0180      	lsls	r0, r0, #6
    8b2a:	1e45      	subs	r5, r0, #1
    8b2c:	41a8      	sbcs	r0, r5
    8b2e:	00db      	lsls	r3, r3, #3
    8b30:	4303      	orrs	r3, r0
    8b32:	0f52      	lsrs	r2, r2, #29
    8b34:	4313      	orrs	r3, r2
    8b36:	075a      	lsls	r2, r3, #29
    8b38:	d004      	beq.n	8b44 <__aeabi_d2f+0x44>
    8b3a:	220f      	movs	r2, #15
    8b3c:	401a      	ands	r2, r3
    8b3e:	2a04      	cmp	r2, #4
    8b40:	d000      	beq.n	8b44 <__aeabi_d2f+0x44>
    8b42:	3304      	adds	r3, #4
    8b44:	2280      	movs	r2, #128	; 0x80
    8b46:	04d2      	lsls	r2, r2, #19
    8b48:	401a      	ands	r2, r3
    8b4a:	d027      	beq.n	8b9c <__aeabi_d2f+0x9c>
    8b4c:	3401      	adds	r4, #1
    8b4e:	2cff      	cmp	r4, #255	; 0xff
    8b50:	d003      	beq.n	8b5a <__aeabi_d2f+0x5a>
    8b52:	019b      	lsls	r3, r3, #6
    8b54:	0a5b      	lsrs	r3, r3, #9
    8b56:	b2e4      	uxtb	r4, r4
    8b58:	e001      	b.n	8b5e <__aeabi_d2f+0x5e>
    8b5a:	24ff      	movs	r4, #255	; 0xff
    8b5c:	2300      	movs	r3, #0
    8b5e:	025b      	lsls	r3, r3, #9
    8b60:	05e4      	lsls	r4, r4, #23
    8b62:	0a5b      	lsrs	r3, r3, #9
    8b64:	4323      	orrs	r3, r4
    8b66:	005b      	lsls	r3, r3, #1
    8b68:	07c9      	lsls	r1, r1, #31
    8b6a:	085b      	lsrs	r3, r3, #1
    8b6c:	430b      	orrs	r3, r1
    8b6e:	1c18      	adds	r0, r3, #0
    8b70:	bd70      	pop	{r4, r5, r6, pc}
    8b72:	2d00      	cmp	r5, #0
    8b74:	d106      	bne.n	8b84 <__aeabi_d2f+0x84>
    8b76:	4313      	orrs	r3, r2
    8b78:	d10e      	bne.n	8b98 <__aeabi_d2f+0x98>
    8b7a:	2400      	movs	r4, #0
    8b7c:	025b      	lsls	r3, r3, #9
    8b7e:	0a5b      	lsrs	r3, r3, #9
    8b80:	b2e4      	uxtb	r4, r4
    8b82:	e7ec      	b.n	8b5e <__aeabi_d2f+0x5e>
    8b84:	431a      	orrs	r2, r3
    8b86:	d0e8      	beq.n	8b5a <__aeabi_d2f+0x5a>
    8b88:	2080      	movs	r0, #128	; 0x80
    8b8a:	00db      	lsls	r3, r3, #3
    8b8c:	0480      	lsls	r0, r0, #18
    8b8e:	4303      	orrs	r3, r0
    8b90:	24ff      	movs	r4, #255	; 0xff
    8b92:	e7d0      	b.n	8b36 <__aeabi_d2f+0x36>
    8b94:	3417      	adds	r4, #23
    8b96:	da0c      	bge.n	8bb2 <__aeabi_d2f+0xb2>
    8b98:	2305      	movs	r3, #5
    8b9a:	2400      	movs	r4, #0
    8b9c:	08db      	lsrs	r3, r3, #3
    8b9e:	2cff      	cmp	r4, #255	; 0xff
    8ba0:	d1ec      	bne.n	8b7c <__aeabi_d2f+0x7c>
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d02d      	beq.n	8c02 <__aeabi_d2f+0x102>
    8ba6:	2280      	movs	r2, #128	; 0x80
    8ba8:	03d2      	lsls	r2, r2, #15
    8baa:	4313      	orrs	r3, r2
    8bac:	025b      	lsls	r3, r3, #9
    8bae:	0a5b      	lsrs	r3, r3, #9
    8bb0:	e7d5      	b.n	8b5e <__aeabi_d2f+0x5e>
    8bb2:	2480      	movs	r4, #128	; 0x80
    8bb4:	4816      	ldr	r0, [pc, #88]	; (8c10 <__aeabi_d2f+0x110>)
    8bb6:	0424      	lsls	r4, r4, #16
    8bb8:	4323      	orrs	r3, r4
    8bba:	1b40      	subs	r0, r0, r5
    8bbc:	281f      	cmp	r0, #31
    8bbe:	dc0d      	bgt.n	8bdc <__aeabi_d2f+0xdc>
    8bc0:	4c14      	ldr	r4, [pc, #80]	; (8c14 <__aeabi_d2f+0x114>)
    8bc2:	46a4      	mov	ip, r4
    8bc4:	4465      	add	r5, ip
    8bc6:	40ab      	lsls	r3, r5
    8bc8:	1c1c      	adds	r4, r3, #0
    8bca:	1c13      	adds	r3, r2, #0
    8bcc:	40ab      	lsls	r3, r5
    8bce:	1e5d      	subs	r5, r3, #1
    8bd0:	41ab      	sbcs	r3, r5
    8bd2:	40c2      	lsrs	r2, r0
    8bd4:	4323      	orrs	r3, r4
    8bd6:	4313      	orrs	r3, r2
    8bd8:	2400      	movs	r4, #0
    8bda:	e7ac      	b.n	8b36 <__aeabi_d2f+0x36>
    8bdc:	1c1e      	adds	r6, r3, #0
    8bde:	4c0e      	ldr	r4, [pc, #56]	; (8c18 <__aeabi_d2f+0x118>)
    8be0:	1b64      	subs	r4, r4, r5
    8be2:	40e6      	lsrs	r6, r4
    8be4:	1c34      	adds	r4, r6, #0
    8be6:	2820      	cmp	r0, #32
    8be8:	d00d      	beq.n	8c06 <__aeabi_d2f+0x106>
    8bea:	480c      	ldr	r0, [pc, #48]	; (8c1c <__aeabi_d2f+0x11c>)
    8bec:	4684      	mov	ip, r0
    8bee:	4465      	add	r5, ip
    8bf0:	40ab      	lsls	r3, r5
    8bf2:	1c1d      	adds	r5, r3, #0
    8bf4:	432a      	orrs	r2, r5
    8bf6:	1e53      	subs	r3, r2, #1
    8bf8:	419a      	sbcs	r2, r3
    8bfa:	1c13      	adds	r3, r2, #0
    8bfc:	4323      	orrs	r3, r4
    8bfe:	2400      	movs	r4, #0
    8c00:	e799      	b.n	8b36 <__aeabi_d2f+0x36>
    8c02:	2300      	movs	r3, #0
    8c04:	e7ab      	b.n	8b5e <__aeabi_d2f+0x5e>
    8c06:	2500      	movs	r5, #0
    8c08:	e7f4      	b.n	8bf4 <__aeabi_d2f+0xf4>
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	fffffc80 	.word	0xfffffc80
    8c10:	0000039e 	.word	0x0000039e
    8c14:	fffffc82 	.word	0xfffffc82
    8c18:	0000037e 	.word	0x0000037e
    8c1c:	fffffca2 	.word	0xfffffca2

00008c20 <__clzsi2>:
    8c20:	211c      	movs	r1, #28
    8c22:	2301      	movs	r3, #1
    8c24:	041b      	lsls	r3, r3, #16
    8c26:	4298      	cmp	r0, r3
    8c28:	d301      	bcc.n	8c2e <__clzsi2+0xe>
    8c2a:	0c00      	lsrs	r0, r0, #16
    8c2c:	3910      	subs	r1, #16
    8c2e:	0a1b      	lsrs	r3, r3, #8
    8c30:	4298      	cmp	r0, r3
    8c32:	d301      	bcc.n	8c38 <__clzsi2+0x18>
    8c34:	0a00      	lsrs	r0, r0, #8
    8c36:	3908      	subs	r1, #8
    8c38:	091b      	lsrs	r3, r3, #4
    8c3a:	4298      	cmp	r0, r3
    8c3c:	d301      	bcc.n	8c42 <__clzsi2+0x22>
    8c3e:	0900      	lsrs	r0, r0, #4
    8c40:	3904      	subs	r1, #4
    8c42:	a202      	add	r2, pc, #8	; (adr r2, 8c4c <__clzsi2+0x2c>)
    8c44:	5c10      	ldrb	r0, [r2, r0]
    8c46:	1840      	adds	r0, r0, r1
    8c48:	4770      	bx	lr
    8c4a:	46c0      	nop			; (mov r8, r8)
    8c4c:	02020304 	.word	0x02020304
    8c50:	01010101 	.word	0x01010101
	...

00008c5c <abort>:
    8c5c:	b508      	push	{r3, lr}
    8c5e:	2006      	movs	r0, #6
    8c60:	f002 f810 	bl	ac84 <raise>
    8c64:	2001      	movs	r0, #1
    8c66:	f7fb f9cd 	bl	4004 <_exit>
	...

00008c6c <__cxa_atexit>:
    8c6c:	4b05      	ldr	r3, [pc, #20]	; (8c84 <__cxa_atexit+0x18>)
    8c6e:	b510      	push	{r4, lr}
    8c70:	1c04      	adds	r4, r0, #0
    8c72:	1e18      	subs	r0, r3, #0
    8c74:	d005      	beq.n	8c82 <__cxa_atexit+0x16>
    8c76:	1c13      	adds	r3, r2, #0
    8c78:	2002      	movs	r0, #2
    8c7a:	1c0a      	adds	r2, r1, #0
    8c7c:	1c21      	adds	r1, r4, #0
    8c7e:	e000      	b.n	8c82 <__cxa_atexit+0x16>
    8c80:	bf00      	nop
    8c82:	bd10      	pop	{r4, pc}
    8c84:	00000000 	.word	0x00000000

00008c88 <__errno>:
    8c88:	4b01      	ldr	r3, [pc, #4]	; (8c90 <__errno+0x8>)
    8c8a:	6818      	ldr	r0, [r3, #0]
    8c8c:	4770      	bx	lr
    8c8e:	46c0      	nop			; (mov r8, r8)
    8c90:	20000134 	.word	0x20000134

00008c94 <exit>:
    8c94:	4b08      	ldr	r3, [pc, #32]	; (8cb8 <exit+0x24>)
    8c96:	b510      	push	{r4, lr}
    8c98:	1c04      	adds	r4, r0, #0
    8c9a:	2b00      	cmp	r3, #0
    8c9c:	d002      	beq.n	8ca4 <exit+0x10>
    8c9e:	2100      	movs	r1, #0
    8ca0:	e000      	b.n	8ca4 <exit+0x10>
    8ca2:	bf00      	nop
    8ca4:	4b05      	ldr	r3, [pc, #20]	; (8cbc <exit+0x28>)
    8ca6:	6818      	ldr	r0, [r3, #0]
    8ca8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8caa:	2b00      	cmp	r3, #0
    8cac:	d000      	beq.n	8cb0 <exit+0x1c>
    8cae:	4798      	blx	r3
    8cb0:	1c20      	adds	r0, r4, #0
    8cb2:	f7fb f9a7 	bl	4004 <_exit>
    8cb6:	46c0      	nop			; (mov r8, r8)
    8cb8:	00000000 	.word	0x00000000
    8cbc:	0000f314 	.word	0x0000f314

00008cc0 <_fclose_r>:
    8cc0:	b570      	push	{r4, r5, r6, lr}
    8cc2:	1c05      	adds	r5, r0, #0
    8cc4:	1e0c      	subs	r4, r1, #0
    8cc6:	d101      	bne.n	8ccc <_fclose_r+0xc>
    8cc8:	2000      	movs	r0, #0
    8cca:	e049      	b.n	8d60 <_fclose_r+0xa0>
    8ccc:	2800      	cmp	r0, #0
    8cce:	d004      	beq.n	8cda <_fclose_r+0x1a>
    8cd0:	6983      	ldr	r3, [r0, #24]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d101      	bne.n	8cda <_fclose_r+0x1a>
    8cd6:	f000 f999 	bl	900c <__sinit>
    8cda:	4b22      	ldr	r3, [pc, #136]	; (8d64 <_fclose_r+0xa4>)
    8cdc:	429c      	cmp	r4, r3
    8cde:	d101      	bne.n	8ce4 <_fclose_r+0x24>
    8ce0:	686c      	ldr	r4, [r5, #4]
    8ce2:	e008      	b.n	8cf6 <_fclose_r+0x36>
    8ce4:	4b20      	ldr	r3, [pc, #128]	; (8d68 <_fclose_r+0xa8>)
    8ce6:	429c      	cmp	r4, r3
    8ce8:	d101      	bne.n	8cee <_fclose_r+0x2e>
    8cea:	68ac      	ldr	r4, [r5, #8]
    8cec:	e003      	b.n	8cf6 <_fclose_r+0x36>
    8cee:	4b1f      	ldr	r3, [pc, #124]	; (8d6c <_fclose_r+0xac>)
    8cf0:	429c      	cmp	r4, r3
    8cf2:	d100      	bne.n	8cf6 <_fclose_r+0x36>
    8cf4:	68ec      	ldr	r4, [r5, #12]
    8cf6:	220c      	movs	r2, #12
    8cf8:	5ea3      	ldrsh	r3, [r4, r2]
    8cfa:	2b00      	cmp	r3, #0
    8cfc:	d0e4      	beq.n	8cc8 <_fclose_r+0x8>
    8cfe:	1c28      	adds	r0, r5, #0
    8d00:	1c21      	adds	r1, r4, #0
    8d02:	f000 f83f 	bl	8d84 <__sflush_r>
    8d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8d08:	1c06      	adds	r6, r0, #0
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d006      	beq.n	8d1c <_fclose_r+0x5c>
    8d0e:	1c28      	adds	r0, r5, #0
    8d10:	6a21      	ldr	r1, [r4, #32]
    8d12:	4798      	blx	r3
    8d14:	2800      	cmp	r0, #0
    8d16:	da01      	bge.n	8d1c <_fclose_r+0x5c>
    8d18:	2601      	movs	r6, #1
    8d1a:	4276      	negs	r6, r6
    8d1c:	89a3      	ldrh	r3, [r4, #12]
    8d1e:	061b      	lsls	r3, r3, #24
    8d20:	d503      	bpl.n	8d2a <_fclose_r+0x6a>
    8d22:	1c28      	adds	r0, r5, #0
    8d24:	6921      	ldr	r1, [r4, #16]
    8d26:	f000 fbe7 	bl	94f8 <_free_r>
    8d2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8d2c:	2900      	cmp	r1, #0
    8d2e:	d008      	beq.n	8d42 <_fclose_r+0x82>
    8d30:	1c23      	adds	r3, r4, #0
    8d32:	3344      	adds	r3, #68	; 0x44
    8d34:	4299      	cmp	r1, r3
    8d36:	d002      	beq.n	8d3e <_fclose_r+0x7e>
    8d38:	1c28      	adds	r0, r5, #0
    8d3a:	f000 fbdd 	bl	94f8 <_free_r>
    8d3e:	2300      	movs	r3, #0
    8d40:	6363      	str	r3, [r4, #52]	; 0x34
    8d42:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8d44:	2900      	cmp	r1, #0
    8d46:	d004      	beq.n	8d52 <_fclose_r+0x92>
    8d48:	1c28      	adds	r0, r5, #0
    8d4a:	f000 fbd5 	bl	94f8 <_free_r>
    8d4e:	2300      	movs	r3, #0
    8d50:	64a3      	str	r3, [r4, #72]	; 0x48
    8d52:	f000 f9cb 	bl	90ec <__sfp_lock_acquire>
    8d56:	2300      	movs	r3, #0
    8d58:	81a3      	strh	r3, [r4, #12]
    8d5a:	f000 f9c8 	bl	90ee <__sfp_lock_release>
    8d5e:	1c30      	adds	r0, r6, #0
    8d60:	bd70      	pop	{r4, r5, r6, pc}
    8d62:	46c0      	nop			; (mov r8, r8)
    8d64:	0000f2b0 	.word	0x0000f2b0
    8d68:	0000f2d0 	.word	0x0000f2d0
    8d6c:	0000f2f0 	.word	0x0000f2f0

00008d70 <fclose>:
    8d70:	b508      	push	{r3, lr}
    8d72:	4b03      	ldr	r3, [pc, #12]	; (8d80 <fclose+0x10>)
    8d74:	1c01      	adds	r1, r0, #0
    8d76:	6818      	ldr	r0, [r3, #0]
    8d78:	f7ff ffa2 	bl	8cc0 <_fclose_r>
    8d7c:	bd08      	pop	{r3, pc}
    8d7e:	46c0      	nop			; (mov r8, r8)
    8d80:	20000134 	.word	0x20000134

00008d84 <__sflush_r>:
    8d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d86:	898a      	ldrh	r2, [r1, #12]
    8d88:	1c05      	adds	r5, r0, #0
    8d8a:	1c0c      	adds	r4, r1, #0
    8d8c:	0713      	lsls	r3, r2, #28
    8d8e:	d45e      	bmi.n	8e4e <__sflush_r+0xca>
    8d90:	684b      	ldr	r3, [r1, #4]
    8d92:	2b00      	cmp	r3, #0
    8d94:	dc02      	bgt.n	8d9c <__sflush_r+0x18>
    8d96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8d98:	2b00      	cmp	r3, #0
    8d9a:	dd1a      	ble.n	8dd2 <__sflush_r+0x4e>
    8d9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8d9e:	2f00      	cmp	r7, #0
    8da0:	d017      	beq.n	8dd2 <__sflush_r+0x4e>
    8da2:	2300      	movs	r3, #0
    8da4:	682e      	ldr	r6, [r5, #0]
    8da6:	602b      	str	r3, [r5, #0]
    8da8:	2380      	movs	r3, #128	; 0x80
    8daa:	015b      	lsls	r3, r3, #5
    8dac:	401a      	ands	r2, r3
    8dae:	d001      	beq.n	8db4 <__sflush_r+0x30>
    8db0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    8db2:	e015      	b.n	8de0 <__sflush_r+0x5c>
    8db4:	1c28      	adds	r0, r5, #0
    8db6:	6a21      	ldr	r1, [r4, #32]
    8db8:	2301      	movs	r3, #1
    8dba:	47b8      	blx	r7
    8dbc:	1c02      	adds	r2, r0, #0
    8dbe:	1c43      	adds	r3, r0, #1
    8dc0:	d10e      	bne.n	8de0 <__sflush_r+0x5c>
    8dc2:	682b      	ldr	r3, [r5, #0]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d00b      	beq.n	8de0 <__sflush_r+0x5c>
    8dc8:	2b1d      	cmp	r3, #29
    8dca:	d001      	beq.n	8dd0 <__sflush_r+0x4c>
    8dcc:	2b16      	cmp	r3, #22
    8dce:	d102      	bne.n	8dd6 <__sflush_r+0x52>
    8dd0:	602e      	str	r6, [r5, #0]
    8dd2:	2000      	movs	r0, #0
    8dd4:	e05e      	b.n	8e94 <__sflush_r+0x110>
    8dd6:	2140      	movs	r1, #64	; 0x40
    8dd8:	89a3      	ldrh	r3, [r4, #12]
    8dda:	430b      	orrs	r3, r1
    8ddc:	81a3      	strh	r3, [r4, #12]
    8dde:	e059      	b.n	8e94 <__sflush_r+0x110>
    8de0:	89a3      	ldrh	r3, [r4, #12]
    8de2:	075b      	lsls	r3, r3, #29
    8de4:	d506      	bpl.n	8df4 <__sflush_r+0x70>
    8de6:	6863      	ldr	r3, [r4, #4]
    8de8:	1ad2      	subs	r2, r2, r3
    8dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8dec:	2b00      	cmp	r3, #0
    8dee:	d001      	beq.n	8df4 <__sflush_r+0x70>
    8df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8df2:	1ad2      	subs	r2, r2, r3
    8df4:	2300      	movs	r3, #0
    8df6:	1c28      	adds	r0, r5, #0
    8df8:	6a21      	ldr	r1, [r4, #32]
    8dfa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8dfc:	47b8      	blx	r7
    8dfe:	89a3      	ldrh	r3, [r4, #12]
    8e00:	1c42      	adds	r2, r0, #1
    8e02:	d106      	bne.n	8e12 <__sflush_r+0x8e>
    8e04:	682a      	ldr	r2, [r5, #0]
    8e06:	2a00      	cmp	r2, #0
    8e08:	d003      	beq.n	8e12 <__sflush_r+0x8e>
    8e0a:	2a1d      	cmp	r2, #29
    8e0c:	d001      	beq.n	8e12 <__sflush_r+0x8e>
    8e0e:	2a16      	cmp	r2, #22
    8e10:	d119      	bne.n	8e46 <__sflush_r+0xc2>
    8e12:	2200      	movs	r2, #0
    8e14:	6062      	str	r2, [r4, #4]
    8e16:	6922      	ldr	r2, [r4, #16]
    8e18:	6022      	str	r2, [r4, #0]
    8e1a:	04db      	lsls	r3, r3, #19
    8e1c:	d505      	bpl.n	8e2a <__sflush_r+0xa6>
    8e1e:	1c43      	adds	r3, r0, #1
    8e20:	d102      	bne.n	8e28 <__sflush_r+0xa4>
    8e22:	682b      	ldr	r3, [r5, #0]
    8e24:	2b00      	cmp	r3, #0
    8e26:	d100      	bne.n	8e2a <__sflush_r+0xa6>
    8e28:	6560      	str	r0, [r4, #84]	; 0x54
    8e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8e2c:	602e      	str	r6, [r5, #0]
    8e2e:	2900      	cmp	r1, #0
    8e30:	d0cf      	beq.n	8dd2 <__sflush_r+0x4e>
    8e32:	1c23      	adds	r3, r4, #0
    8e34:	3344      	adds	r3, #68	; 0x44
    8e36:	4299      	cmp	r1, r3
    8e38:	d002      	beq.n	8e40 <__sflush_r+0xbc>
    8e3a:	1c28      	adds	r0, r5, #0
    8e3c:	f000 fb5c 	bl	94f8 <_free_r>
    8e40:	2000      	movs	r0, #0
    8e42:	6360      	str	r0, [r4, #52]	; 0x34
    8e44:	e026      	b.n	8e94 <__sflush_r+0x110>
    8e46:	2240      	movs	r2, #64	; 0x40
    8e48:	4313      	orrs	r3, r2
    8e4a:	81a3      	strh	r3, [r4, #12]
    8e4c:	e022      	b.n	8e94 <__sflush_r+0x110>
    8e4e:	690f      	ldr	r7, [r1, #16]
    8e50:	2f00      	cmp	r7, #0
    8e52:	d0be      	beq.n	8dd2 <__sflush_r+0x4e>
    8e54:	680b      	ldr	r3, [r1, #0]
    8e56:	600f      	str	r7, [r1, #0]
    8e58:	1bdb      	subs	r3, r3, r7
    8e5a:	9301      	str	r3, [sp, #4]
    8e5c:	2300      	movs	r3, #0
    8e5e:	0792      	lsls	r2, r2, #30
    8e60:	d100      	bne.n	8e64 <__sflush_r+0xe0>
    8e62:	694b      	ldr	r3, [r1, #20]
    8e64:	60a3      	str	r3, [r4, #8]
    8e66:	9b01      	ldr	r3, [sp, #4]
    8e68:	2b00      	cmp	r3, #0
    8e6a:	ddb2      	ble.n	8dd2 <__sflush_r+0x4e>
    8e6c:	1c28      	adds	r0, r5, #0
    8e6e:	6a21      	ldr	r1, [r4, #32]
    8e70:	1c3a      	adds	r2, r7, #0
    8e72:	9b01      	ldr	r3, [sp, #4]
    8e74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8e76:	47b0      	blx	r6
    8e78:	2800      	cmp	r0, #0
    8e7a:	dc06      	bgt.n	8e8a <__sflush_r+0x106>
    8e7c:	2240      	movs	r2, #64	; 0x40
    8e7e:	2001      	movs	r0, #1
    8e80:	89a3      	ldrh	r3, [r4, #12]
    8e82:	4240      	negs	r0, r0
    8e84:	4313      	orrs	r3, r2
    8e86:	81a3      	strh	r3, [r4, #12]
    8e88:	e004      	b.n	8e94 <__sflush_r+0x110>
    8e8a:	9b01      	ldr	r3, [sp, #4]
    8e8c:	183f      	adds	r7, r7, r0
    8e8e:	1a1b      	subs	r3, r3, r0
    8e90:	9301      	str	r3, [sp, #4]
    8e92:	e7e8      	b.n	8e66 <__sflush_r+0xe2>
    8e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00008e98 <_fflush_r>:
    8e98:	b538      	push	{r3, r4, r5, lr}
    8e9a:	690b      	ldr	r3, [r1, #16]
    8e9c:	1c05      	adds	r5, r0, #0
    8e9e:	1c0c      	adds	r4, r1, #0
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d101      	bne.n	8ea8 <_fflush_r+0x10>
    8ea4:	2000      	movs	r0, #0
    8ea6:	e01c      	b.n	8ee2 <_fflush_r+0x4a>
    8ea8:	2800      	cmp	r0, #0
    8eaa:	d004      	beq.n	8eb6 <_fflush_r+0x1e>
    8eac:	6983      	ldr	r3, [r0, #24]
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d101      	bne.n	8eb6 <_fflush_r+0x1e>
    8eb2:	f000 f8ab 	bl	900c <__sinit>
    8eb6:	4b0b      	ldr	r3, [pc, #44]	; (8ee4 <_fflush_r+0x4c>)
    8eb8:	429c      	cmp	r4, r3
    8eba:	d101      	bne.n	8ec0 <_fflush_r+0x28>
    8ebc:	686c      	ldr	r4, [r5, #4]
    8ebe:	e008      	b.n	8ed2 <_fflush_r+0x3a>
    8ec0:	4b09      	ldr	r3, [pc, #36]	; (8ee8 <_fflush_r+0x50>)
    8ec2:	429c      	cmp	r4, r3
    8ec4:	d101      	bne.n	8eca <_fflush_r+0x32>
    8ec6:	68ac      	ldr	r4, [r5, #8]
    8ec8:	e003      	b.n	8ed2 <_fflush_r+0x3a>
    8eca:	4b08      	ldr	r3, [pc, #32]	; (8eec <_fflush_r+0x54>)
    8ecc:	429c      	cmp	r4, r3
    8ece:	d100      	bne.n	8ed2 <_fflush_r+0x3a>
    8ed0:	68ec      	ldr	r4, [r5, #12]
    8ed2:	220c      	movs	r2, #12
    8ed4:	5ea3      	ldrsh	r3, [r4, r2]
    8ed6:	2b00      	cmp	r3, #0
    8ed8:	d0e4      	beq.n	8ea4 <_fflush_r+0xc>
    8eda:	1c28      	adds	r0, r5, #0
    8edc:	1c21      	adds	r1, r4, #0
    8ede:	f7ff ff51 	bl	8d84 <__sflush_r>
    8ee2:	bd38      	pop	{r3, r4, r5, pc}
    8ee4:	0000f2b0 	.word	0x0000f2b0
    8ee8:	0000f2d0 	.word	0x0000f2d0
    8eec:	0000f2f0 	.word	0x0000f2f0

00008ef0 <fflush>:
    8ef0:	b508      	push	{r3, lr}
    8ef2:	1e01      	subs	r1, r0, #0
    8ef4:	d105      	bne.n	8f02 <fflush+0x12>
    8ef6:	4b05      	ldr	r3, [pc, #20]	; (8f0c <fflush+0x1c>)
    8ef8:	4905      	ldr	r1, [pc, #20]	; (8f10 <fflush+0x20>)
    8efa:	6818      	ldr	r0, [r3, #0]
    8efc:	f000 fa2c 	bl	9358 <_fwalk_reent>
    8f00:	e003      	b.n	8f0a <fflush+0x1a>
    8f02:	4b04      	ldr	r3, [pc, #16]	; (8f14 <fflush+0x24>)
    8f04:	6818      	ldr	r0, [r3, #0]
    8f06:	f7ff ffc7 	bl	8e98 <_fflush_r>
    8f0a:	bd08      	pop	{r3, pc}
    8f0c:	0000f314 	.word	0x0000f314
    8f10:	00008e99 	.word	0x00008e99
    8f14:	20000134 	.word	0x20000134

00008f18 <_fgetc_r>:
    8f18:	b538      	push	{r3, r4, r5, lr}
    8f1a:	1c05      	adds	r5, r0, #0
    8f1c:	1c0c      	adds	r4, r1, #0
    8f1e:	2800      	cmp	r0, #0
    8f20:	d004      	beq.n	8f2c <_fgetc_r+0x14>
    8f22:	6983      	ldr	r3, [r0, #24]
    8f24:	2b00      	cmp	r3, #0
    8f26:	d101      	bne.n	8f2c <_fgetc_r+0x14>
    8f28:	f000 f870 	bl	900c <__sinit>
    8f2c:	4b0e      	ldr	r3, [pc, #56]	; (8f68 <_fgetc_r+0x50>)
    8f2e:	429c      	cmp	r4, r3
    8f30:	d101      	bne.n	8f36 <_fgetc_r+0x1e>
    8f32:	686c      	ldr	r4, [r5, #4]
    8f34:	e008      	b.n	8f48 <_fgetc_r+0x30>
    8f36:	4b0d      	ldr	r3, [pc, #52]	; (8f6c <_fgetc_r+0x54>)
    8f38:	429c      	cmp	r4, r3
    8f3a:	d101      	bne.n	8f40 <_fgetc_r+0x28>
    8f3c:	68ac      	ldr	r4, [r5, #8]
    8f3e:	e003      	b.n	8f48 <_fgetc_r+0x30>
    8f40:	4b0b      	ldr	r3, [pc, #44]	; (8f70 <_fgetc_r+0x58>)
    8f42:	429c      	cmp	r4, r3
    8f44:	d100      	bne.n	8f48 <_fgetc_r+0x30>
    8f46:	68ec      	ldr	r4, [r5, #12]
    8f48:	6863      	ldr	r3, [r4, #4]
    8f4a:	3b01      	subs	r3, #1
    8f4c:	6063      	str	r3, [r4, #4]
    8f4e:	2b00      	cmp	r3, #0
    8f50:	da04      	bge.n	8f5c <_fgetc_r+0x44>
    8f52:	1c28      	adds	r0, r5, #0
    8f54:	1c21      	adds	r1, r4, #0
    8f56:	f001 fd3b 	bl	a9d0 <__srget_r>
    8f5a:	e003      	b.n	8f64 <_fgetc_r+0x4c>
    8f5c:	6823      	ldr	r3, [r4, #0]
    8f5e:	1c5a      	adds	r2, r3, #1
    8f60:	6022      	str	r2, [r4, #0]
    8f62:	7818      	ldrb	r0, [r3, #0]
    8f64:	bd38      	pop	{r3, r4, r5, pc}
    8f66:	46c0      	nop			; (mov r8, r8)
    8f68:	0000f2b0 	.word	0x0000f2b0
    8f6c:	0000f2d0 	.word	0x0000f2d0
    8f70:	0000f2f0 	.word	0x0000f2f0

00008f74 <fgetc>:
    8f74:	b508      	push	{r3, lr}
    8f76:	4b03      	ldr	r3, [pc, #12]	; (8f84 <fgetc+0x10>)
    8f78:	1c01      	adds	r1, r0, #0
    8f7a:	6818      	ldr	r0, [r3, #0]
    8f7c:	f7ff ffcc 	bl	8f18 <_fgetc_r>
    8f80:	bd08      	pop	{r3, pc}
    8f82:	46c0      	nop			; (mov r8, r8)
    8f84:	20000134 	.word	0x20000134

00008f88 <_cleanup_r>:
    8f88:	b508      	push	{r3, lr}
    8f8a:	4902      	ldr	r1, [pc, #8]	; (8f94 <_cleanup_r+0xc>)
    8f8c:	f000 f9e4 	bl	9358 <_fwalk_reent>
    8f90:	bd08      	pop	{r3, pc}
    8f92:	46c0      	nop			; (mov r8, r8)
    8f94:	00008e99 	.word	0x00008e99

00008f98 <std.isra.0>:
    8f98:	2300      	movs	r3, #0
    8f9a:	b510      	push	{r4, lr}
    8f9c:	1c04      	adds	r4, r0, #0
    8f9e:	6003      	str	r3, [r0, #0]
    8fa0:	6043      	str	r3, [r0, #4]
    8fa2:	6083      	str	r3, [r0, #8]
    8fa4:	8181      	strh	r1, [r0, #12]
    8fa6:	6643      	str	r3, [r0, #100]	; 0x64
    8fa8:	81c2      	strh	r2, [r0, #14]
    8faa:	6103      	str	r3, [r0, #16]
    8fac:	6143      	str	r3, [r0, #20]
    8fae:	6183      	str	r3, [r0, #24]
    8fb0:	1c19      	adds	r1, r3, #0
    8fb2:	2208      	movs	r2, #8
    8fb4:	305c      	adds	r0, #92	; 0x5c
    8fb6:	f000 fa97 	bl	94e8 <memset>
    8fba:	4b05      	ldr	r3, [pc, #20]	; (8fd0 <std.isra.0+0x38>)
    8fbc:	6224      	str	r4, [r4, #32]
    8fbe:	6263      	str	r3, [r4, #36]	; 0x24
    8fc0:	4b04      	ldr	r3, [pc, #16]	; (8fd4 <std.isra.0+0x3c>)
    8fc2:	62a3      	str	r3, [r4, #40]	; 0x28
    8fc4:	4b04      	ldr	r3, [pc, #16]	; (8fd8 <std.isra.0+0x40>)
    8fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
    8fc8:	4b04      	ldr	r3, [pc, #16]	; (8fdc <std.isra.0+0x44>)
    8fca:	6323      	str	r3, [r4, #48]	; 0x30
    8fcc:	bd10      	pop	{r4, pc}
    8fce:	46c0      	nop			; (mov r8, r8)
    8fd0:	0000ad59 	.word	0x0000ad59
    8fd4:	0000ad85 	.word	0x0000ad85
    8fd8:	0000adbd 	.word	0x0000adbd
    8fdc:	0000ade9 	.word	0x0000ade9

00008fe0 <__sfmoreglue>:
    8fe0:	b570      	push	{r4, r5, r6, lr}
    8fe2:	2568      	movs	r5, #104	; 0x68
    8fe4:	1e4b      	subs	r3, r1, #1
    8fe6:	435d      	muls	r5, r3
    8fe8:	1c0e      	adds	r6, r1, #0
    8fea:	1c29      	adds	r1, r5, #0
    8fec:	3174      	adds	r1, #116	; 0x74
    8fee:	f000 fac9 	bl	9584 <_malloc_r>
    8ff2:	1e04      	subs	r4, r0, #0
    8ff4:	d008      	beq.n	9008 <__sfmoreglue+0x28>
    8ff6:	2100      	movs	r1, #0
    8ff8:	1c2a      	adds	r2, r5, #0
    8ffa:	6001      	str	r1, [r0, #0]
    8ffc:	6046      	str	r6, [r0, #4]
    8ffe:	300c      	adds	r0, #12
    9000:	60a0      	str	r0, [r4, #8]
    9002:	3268      	adds	r2, #104	; 0x68
    9004:	f000 fa70 	bl	94e8 <memset>
    9008:	1c20      	adds	r0, r4, #0
    900a:	bd70      	pop	{r4, r5, r6, pc}

0000900c <__sinit>:
    900c:	6983      	ldr	r3, [r0, #24]
    900e:	b513      	push	{r0, r1, r4, lr}
    9010:	2b00      	cmp	r3, #0
    9012:	d128      	bne.n	9066 <__sinit+0x5a>
    9014:	6483      	str	r3, [r0, #72]	; 0x48
    9016:	64c3      	str	r3, [r0, #76]	; 0x4c
    9018:	6503      	str	r3, [r0, #80]	; 0x50
    901a:	4b13      	ldr	r3, [pc, #76]	; (9068 <__sinit+0x5c>)
    901c:	4a13      	ldr	r2, [pc, #76]	; (906c <__sinit+0x60>)
    901e:	681b      	ldr	r3, [r3, #0]
    9020:	6282      	str	r2, [r0, #40]	; 0x28
    9022:	9301      	str	r3, [sp, #4]
    9024:	4298      	cmp	r0, r3
    9026:	d101      	bne.n	902c <__sinit+0x20>
    9028:	2301      	movs	r3, #1
    902a:	6183      	str	r3, [r0, #24]
    902c:	1c04      	adds	r4, r0, #0
    902e:	f000 f81f 	bl	9070 <__sfp>
    9032:	6060      	str	r0, [r4, #4]
    9034:	1c20      	adds	r0, r4, #0
    9036:	f000 f81b 	bl	9070 <__sfp>
    903a:	60a0      	str	r0, [r4, #8]
    903c:	1c20      	adds	r0, r4, #0
    903e:	f000 f817 	bl	9070 <__sfp>
    9042:	2104      	movs	r1, #4
    9044:	60e0      	str	r0, [r4, #12]
    9046:	2200      	movs	r2, #0
    9048:	6860      	ldr	r0, [r4, #4]
    904a:	f7ff ffa5 	bl	8f98 <std.isra.0>
    904e:	68a0      	ldr	r0, [r4, #8]
    9050:	2109      	movs	r1, #9
    9052:	2201      	movs	r2, #1
    9054:	f7ff ffa0 	bl	8f98 <std.isra.0>
    9058:	68e0      	ldr	r0, [r4, #12]
    905a:	2112      	movs	r1, #18
    905c:	2202      	movs	r2, #2
    905e:	f7ff ff9b 	bl	8f98 <std.isra.0>
    9062:	2301      	movs	r3, #1
    9064:	61a3      	str	r3, [r4, #24]
    9066:	bd13      	pop	{r0, r1, r4, pc}
    9068:	0000f314 	.word	0x0000f314
    906c:	00008f89 	.word	0x00008f89

00009070 <__sfp>:
    9070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9072:	4b1d      	ldr	r3, [pc, #116]	; (90e8 <__sfp+0x78>)
    9074:	1c06      	adds	r6, r0, #0
    9076:	681d      	ldr	r5, [r3, #0]
    9078:	69ab      	ldr	r3, [r5, #24]
    907a:	2b00      	cmp	r3, #0
    907c:	d102      	bne.n	9084 <__sfp+0x14>
    907e:	1c28      	adds	r0, r5, #0
    9080:	f7ff ffc4 	bl	900c <__sinit>
    9084:	3548      	adds	r5, #72	; 0x48
    9086:	68ac      	ldr	r4, [r5, #8]
    9088:	686b      	ldr	r3, [r5, #4]
    908a:	3b01      	subs	r3, #1
    908c:	d405      	bmi.n	909a <__sfp+0x2a>
    908e:	220c      	movs	r2, #12
    9090:	5ea7      	ldrsh	r7, [r4, r2]
    9092:	2f00      	cmp	r7, #0
    9094:	d010      	beq.n	90b8 <__sfp+0x48>
    9096:	3468      	adds	r4, #104	; 0x68
    9098:	e7f7      	b.n	908a <__sfp+0x1a>
    909a:	682b      	ldr	r3, [r5, #0]
    909c:	2b00      	cmp	r3, #0
    909e:	d106      	bne.n	90ae <__sfp+0x3e>
    90a0:	1c30      	adds	r0, r6, #0
    90a2:	2104      	movs	r1, #4
    90a4:	f7ff ff9c 	bl	8fe0 <__sfmoreglue>
    90a8:	6028      	str	r0, [r5, #0]
    90aa:	2800      	cmp	r0, #0
    90ac:	d001      	beq.n	90b2 <__sfp+0x42>
    90ae:	682d      	ldr	r5, [r5, #0]
    90b0:	e7e9      	b.n	9086 <__sfp+0x16>
    90b2:	230c      	movs	r3, #12
    90b4:	6033      	str	r3, [r6, #0]
    90b6:	e016      	b.n	90e6 <__sfp+0x76>
    90b8:	2301      	movs	r3, #1
    90ba:	1c20      	adds	r0, r4, #0
    90bc:	425b      	negs	r3, r3
    90be:	81e3      	strh	r3, [r4, #14]
    90c0:	3302      	adds	r3, #2
    90c2:	81a3      	strh	r3, [r4, #12]
    90c4:	6667      	str	r7, [r4, #100]	; 0x64
    90c6:	6027      	str	r7, [r4, #0]
    90c8:	60a7      	str	r7, [r4, #8]
    90ca:	6067      	str	r7, [r4, #4]
    90cc:	6127      	str	r7, [r4, #16]
    90ce:	6167      	str	r7, [r4, #20]
    90d0:	61a7      	str	r7, [r4, #24]
    90d2:	305c      	adds	r0, #92	; 0x5c
    90d4:	1c39      	adds	r1, r7, #0
    90d6:	2208      	movs	r2, #8
    90d8:	f000 fa06 	bl	94e8 <memset>
    90dc:	1c20      	adds	r0, r4, #0
    90de:	6367      	str	r7, [r4, #52]	; 0x34
    90e0:	63a7      	str	r7, [r4, #56]	; 0x38
    90e2:	64a7      	str	r7, [r4, #72]	; 0x48
    90e4:	64e7      	str	r7, [r4, #76]	; 0x4c
    90e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90e8:	0000f314 	.word	0x0000f314

000090ec <__sfp_lock_acquire>:
    90ec:	4770      	bx	lr

000090ee <__sfp_lock_release>:
    90ee:	4770      	bx	lr

000090f0 <_fopen_r>:
    90f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    90f2:	1c0f      	adds	r7, r1, #0
    90f4:	1c11      	adds	r1, r2, #0
    90f6:	aa01      	add	r2, sp, #4
    90f8:	1c05      	adds	r5, r0, #0
    90fa:	f003 fdc3 	bl	cc84 <__sflags>
    90fe:	1e06      	subs	r6, r0, #0
    9100:	d101      	bne.n	9106 <_fopen_r+0x16>
    9102:	2400      	movs	r4, #0
    9104:	e027      	b.n	9156 <_fopen_r+0x66>
    9106:	1c28      	adds	r0, r5, #0
    9108:	f7ff ffb2 	bl	9070 <__sfp>
    910c:	1e04      	subs	r4, r0, #0
    910e:	d0f8      	beq.n	9102 <_fopen_r+0x12>
    9110:	23db      	movs	r3, #219	; 0xdb
    9112:	1c28      	adds	r0, r5, #0
    9114:	1c39      	adds	r1, r7, #0
    9116:	9a01      	ldr	r2, [sp, #4]
    9118:	005b      	lsls	r3, r3, #1
    911a:	f001 fb6d 	bl	a7f8 <_open_r>
    911e:	2800      	cmp	r0, #0
    9120:	da06      	bge.n	9130 <_fopen_r+0x40>
    9122:	2500      	movs	r5, #0
    9124:	f7ff ffe2 	bl	90ec <__sfp_lock_acquire>
    9128:	81a5      	strh	r5, [r4, #12]
    912a:	f7ff ffe0 	bl	90ee <__sfp_lock_release>
    912e:	e7e8      	b.n	9102 <_fopen_r+0x12>
    9130:	4b0a      	ldr	r3, [pc, #40]	; (915c <_fopen_r+0x6c>)
    9132:	81e0      	strh	r0, [r4, #14]
    9134:	6263      	str	r3, [r4, #36]	; 0x24
    9136:	4b0a      	ldr	r3, [pc, #40]	; (9160 <_fopen_r+0x70>)
    9138:	81a6      	strh	r6, [r4, #12]
    913a:	62a3      	str	r3, [r4, #40]	; 0x28
    913c:	4b09      	ldr	r3, [pc, #36]	; (9164 <_fopen_r+0x74>)
    913e:	6224      	str	r4, [r4, #32]
    9140:	62e3      	str	r3, [r4, #44]	; 0x2c
    9142:	4b09      	ldr	r3, [pc, #36]	; (9168 <_fopen_r+0x78>)
    9144:	6323      	str	r3, [r4, #48]	; 0x30
    9146:	05f3      	lsls	r3, r6, #23
    9148:	d505      	bpl.n	9156 <_fopen_r+0x66>
    914a:	1c28      	adds	r0, r5, #0
    914c:	1c21      	adds	r1, r4, #0
    914e:	2200      	movs	r2, #0
    9150:	2302      	movs	r3, #2
    9152:	f000 f849 	bl	91e8 <_fseek_r>
    9156:	1c20      	adds	r0, r4, #0
    9158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    915a:	46c0      	nop			; (mov r8, r8)
    915c:	0000ad59 	.word	0x0000ad59
    9160:	0000ad85 	.word	0x0000ad85
    9164:	0000adbd 	.word	0x0000adbd
    9168:	0000ade9 	.word	0x0000ade9

0000916c <fopen>:
    916c:	b508      	push	{r3, lr}
    916e:	1c03      	adds	r3, r0, #0
    9170:	1c0a      	adds	r2, r1, #0
    9172:	4903      	ldr	r1, [pc, #12]	; (9180 <fopen+0x14>)
    9174:	6808      	ldr	r0, [r1, #0]
    9176:	1c19      	adds	r1, r3, #0
    9178:	f7ff ffba 	bl	90f0 <_fopen_r>
    917c:	bd08      	pop	{r3, pc}
    917e:	46c0      	nop			; (mov r8, r8)
    9180:	20000134 	.word	0x20000134

00009184 <_fputc_r>:
    9184:	b570      	push	{r4, r5, r6, lr}
    9186:	1c05      	adds	r5, r0, #0
    9188:	1c0e      	adds	r6, r1, #0
    918a:	1c14      	adds	r4, r2, #0
    918c:	2800      	cmp	r0, #0
    918e:	d004      	beq.n	919a <_fputc_r+0x16>
    9190:	6983      	ldr	r3, [r0, #24]
    9192:	2b00      	cmp	r3, #0
    9194:	d101      	bne.n	919a <_fputc_r+0x16>
    9196:	f7ff ff39 	bl	900c <__sinit>
    919a:	4b0a      	ldr	r3, [pc, #40]	; (91c4 <_fputc_r+0x40>)
    919c:	429c      	cmp	r4, r3
    919e:	d101      	bne.n	91a4 <_fputc_r+0x20>
    91a0:	686c      	ldr	r4, [r5, #4]
    91a2:	e008      	b.n	91b6 <_fputc_r+0x32>
    91a4:	4b08      	ldr	r3, [pc, #32]	; (91c8 <_fputc_r+0x44>)
    91a6:	429c      	cmp	r4, r3
    91a8:	d101      	bne.n	91ae <_fputc_r+0x2a>
    91aa:	68ac      	ldr	r4, [r5, #8]
    91ac:	e003      	b.n	91b6 <_fputc_r+0x32>
    91ae:	4b07      	ldr	r3, [pc, #28]	; (91cc <_fputc_r+0x48>)
    91b0:	429c      	cmp	r4, r3
    91b2:	d100      	bne.n	91b6 <_fputc_r+0x32>
    91b4:	68ec      	ldr	r4, [r5, #12]
    91b6:	1c28      	adds	r0, r5, #0
    91b8:	1c31      	adds	r1, r6, #0
    91ba:	1c22      	adds	r2, r4, #0
    91bc:	f001 fb30 	bl	a820 <_putc_r>
    91c0:	bd70      	pop	{r4, r5, r6, pc}
    91c2:	46c0      	nop			; (mov r8, r8)
    91c4:	0000f2b0 	.word	0x0000f2b0
    91c8:	0000f2d0 	.word	0x0000f2d0
    91cc:	0000f2f0 	.word	0x0000f2f0

000091d0 <fputc>:
    91d0:	b508      	push	{r3, lr}
    91d2:	1c03      	adds	r3, r0, #0
    91d4:	1c0a      	adds	r2, r1, #0
    91d6:	4903      	ldr	r1, [pc, #12]	; (91e4 <fputc+0x14>)
    91d8:	6808      	ldr	r0, [r1, #0]
    91da:	1c19      	adds	r1, r3, #0
    91dc:	f7ff ffd2 	bl	9184 <_fputc_r>
    91e0:	bd08      	pop	{r3, pc}
    91e2:	46c0      	nop			; (mov r8, r8)
    91e4:	20000134 	.word	0x20000134

000091e8 <_fseek_r>:
    91e8:	b508      	push	{r3, lr}
    91ea:	f000 f801 	bl	91f0 <_fseeko_r>
    91ee:	bd08      	pop	{r3, pc}

000091f0 <_fseeko_r>:
    91f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    91f2:	1c05      	adds	r5, r0, #0
    91f4:	1c0c      	adds	r4, r1, #0
    91f6:	9201      	str	r2, [sp, #4]
    91f8:	1c1e      	adds	r6, r3, #0
    91fa:	2800      	cmp	r0, #0
    91fc:	d004      	beq.n	9208 <_fseeko_r+0x18>
    91fe:	6983      	ldr	r3, [r0, #24]
    9200:	2b00      	cmp	r3, #0
    9202:	d101      	bne.n	9208 <_fseeko_r+0x18>
    9204:	f7ff ff02 	bl	900c <__sinit>
    9208:	4b41      	ldr	r3, [pc, #260]	; (9310 <_fseeko_r+0x120>)
    920a:	429c      	cmp	r4, r3
    920c:	d101      	bne.n	9212 <_fseeko_r+0x22>
    920e:	686c      	ldr	r4, [r5, #4]
    9210:	e008      	b.n	9224 <_fseeko_r+0x34>
    9212:	4b40      	ldr	r3, [pc, #256]	; (9314 <_fseeko_r+0x124>)
    9214:	429c      	cmp	r4, r3
    9216:	d101      	bne.n	921c <_fseeko_r+0x2c>
    9218:	68ac      	ldr	r4, [r5, #8]
    921a:	e003      	b.n	9224 <_fseeko_r+0x34>
    921c:	4b3e      	ldr	r3, [pc, #248]	; (9318 <_fseeko_r+0x128>)
    921e:	429c      	cmp	r4, r3
    9220:	d100      	bne.n	9224 <_fseeko_r+0x34>
    9222:	68ec      	ldr	r4, [r5, #12]
    9224:	2284      	movs	r2, #132	; 0x84
    9226:	89a3      	ldrh	r3, [r4, #12]
    9228:	0052      	lsls	r2, r2, #1
    922a:	4013      	ands	r3, r2
    922c:	4293      	cmp	r3, r2
    922e:	d103      	bne.n	9238 <_fseeko_r+0x48>
    9230:	1c28      	adds	r0, r5, #0
    9232:	1c21      	adds	r1, r4, #0
    9234:	f7ff fe30 	bl	8e98 <_fflush_r>
    9238:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    923a:	9300      	str	r3, [sp, #0]
    923c:	2b00      	cmp	r3, #0
    923e:	d101      	bne.n	9244 <_fseeko_r+0x54>
    9240:	331d      	adds	r3, #29
    9242:	e031      	b.n	92a8 <_fseeko_r+0xb8>
    9244:	2e01      	cmp	r6, #1
    9246:	d005      	beq.n	9254 <_fseeko_r+0x64>
    9248:	2e02      	cmp	r6, #2
    924a:	d031      	beq.n	92b0 <_fseeko_r+0xc0>
    924c:	2316      	movs	r3, #22
    924e:	2e00      	cmp	r6, #0
    9250:	d12a      	bne.n	92a8 <_fseeko_r+0xb8>
    9252:	e02d      	b.n	92b0 <_fseeko_r+0xc0>
    9254:	1c28      	adds	r0, r5, #0
    9256:	1c21      	adds	r1, r4, #0
    9258:	f7ff fe1e 	bl	8e98 <_fflush_r>
    925c:	2380      	movs	r3, #128	; 0x80
    925e:	89a2      	ldrh	r2, [r4, #12]
    9260:	015b      	lsls	r3, r3, #5
    9262:	401a      	ands	r2, r3
    9264:	d001      	beq.n	926a <_fseeko_r+0x7a>
    9266:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9268:	e006      	b.n	9278 <_fseeko_r+0x88>
    926a:	1c33      	adds	r3, r6, #0
    926c:	1c28      	adds	r0, r5, #0
    926e:	6a21      	ldr	r1, [r4, #32]
    9270:	9e00      	ldr	r6, [sp, #0]
    9272:	47b0      	blx	r6
    9274:	1c43      	adds	r3, r0, #1
    9276:	d018      	beq.n	92aa <_fseeko_r+0xba>
    9278:	89a3      	ldrh	r3, [r4, #12]
    927a:	075a      	lsls	r2, r3, #29
    927c:	d507      	bpl.n	928e <_fseeko_r+0x9e>
    927e:	6863      	ldr	r3, [r4, #4]
    9280:	1ac0      	subs	r0, r0, r3
    9282:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9284:	2b00      	cmp	r3, #0
    9286:	d00a      	beq.n	929e <_fseeko_r+0xae>
    9288:	6c23      	ldr	r3, [r4, #64]	; 0x40
    928a:	1ac0      	subs	r0, r0, r3
    928c:	e007      	b.n	929e <_fseeko_r+0xae>
    928e:	071b      	lsls	r3, r3, #28
    9290:	d505      	bpl.n	929e <_fseeko_r+0xae>
    9292:	6823      	ldr	r3, [r4, #0]
    9294:	2b00      	cmp	r3, #0
    9296:	d002      	beq.n	929e <_fseeko_r+0xae>
    9298:	6922      	ldr	r2, [r4, #16]
    929a:	1a9b      	subs	r3, r3, r2
    929c:	18c0      	adds	r0, r0, r3
    929e:	9b01      	ldr	r3, [sp, #4]
    92a0:	2600      	movs	r6, #0
    92a2:	181b      	adds	r3, r3, r0
    92a4:	9301      	str	r3, [sp, #4]
    92a6:	e003      	b.n	92b0 <_fseeko_r+0xc0>
    92a8:	602b      	str	r3, [r5, #0]
    92aa:	2701      	movs	r7, #1
    92ac:	427f      	negs	r7, r7
    92ae:	e02d      	b.n	930c <_fseeko_r+0x11c>
    92b0:	6923      	ldr	r3, [r4, #16]
    92b2:	2b00      	cmp	r3, #0
    92b4:	d103      	bne.n	92be <_fseeko_r+0xce>
    92b6:	1c28      	adds	r0, r5, #0
    92b8:	1c21      	adds	r1, r4, #0
    92ba:	f000 f895 	bl	93e8 <__smakebuf_r>
    92be:	1c28      	adds	r0, r5, #0
    92c0:	1c21      	adds	r1, r4, #0
    92c2:	f7ff fde9 	bl	8e98 <_fflush_r>
    92c6:	1e07      	subs	r7, r0, #0
    92c8:	d1ef      	bne.n	92aa <_fseeko_r+0xba>
    92ca:	1c33      	adds	r3, r6, #0
    92cc:	1c28      	adds	r0, r5, #0
    92ce:	6a21      	ldr	r1, [r4, #32]
    92d0:	9a01      	ldr	r2, [sp, #4]
    92d2:	9e00      	ldr	r6, [sp, #0]
    92d4:	47b0      	blx	r6
    92d6:	1c43      	adds	r3, r0, #1
    92d8:	d0e7      	beq.n	92aa <_fseeko_r+0xba>
    92da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    92dc:	2900      	cmp	r1, #0
    92de:	d008      	beq.n	92f2 <_fseeko_r+0x102>
    92e0:	1c23      	adds	r3, r4, #0
    92e2:	3344      	adds	r3, #68	; 0x44
    92e4:	4299      	cmp	r1, r3
    92e6:	d002      	beq.n	92ee <_fseeko_r+0xfe>
    92e8:	1c28      	adds	r0, r5, #0
    92ea:	f000 f905 	bl	94f8 <_free_r>
    92ee:	2300      	movs	r3, #0
    92f0:	6363      	str	r3, [r4, #52]	; 0x34
    92f2:	2100      	movs	r1, #0
    92f4:	1c20      	adds	r0, r4, #0
    92f6:	6923      	ldr	r3, [r4, #16]
    92f8:	89a2      	ldrh	r2, [r4, #12]
    92fa:	6023      	str	r3, [r4, #0]
    92fc:	4b07      	ldr	r3, [pc, #28]	; (931c <_fseeko_r+0x12c>)
    92fe:	6061      	str	r1, [r4, #4]
    9300:	4013      	ands	r3, r2
    9302:	81a3      	strh	r3, [r4, #12]
    9304:	305c      	adds	r0, #92	; 0x5c
    9306:	2208      	movs	r2, #8
    9308:	f000 f8ee 	bl	94e8 <memset>
    930c:	1c38      	adds	r0, r7, #0
    930e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9310:	0000f2b0 	.word	0x0000f2b0
    9314:	0000f2d0 	.word	0x0000f2d0
    9318:	0000f2f0 	.word	0x0000f2f0
    931c:	fffff7df 	.word	0xfffff7df

00009320 <_fwalk>:
    9320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9322:	3048      	adds	r0, #72	; 0x48
    9324:	1c04      	adds	r4, r0, #0
    9326:	2600      	movs	r6, #0
    9328:	9101      	str	r1, [sp, #4]
    932a:	2c00      	cmp	r4, #0
    932c:	d012      	beq.n	9354 <_fwalk+0x34>
    932e:	68a5      	ldr	r5, [r4, #8]
    9330:	6867      	ldr	r7, [r4, #4]
    9332:	3f01      	subs	r7, #1
    9334:	d40c      	bmi.n	9350 <_fwalk+0x30>
    9336:	89ab      	ldrh	r3, [r5, #12]
    9338:	2b01      	cmp	r3, #1
    933a:	d907      	bls.n	934c <_fwalk+0x2c>
    933c:	220e      	movs	r2, #14
    933e:	5eab      	ldrsh	r3, [r5, r2]
    9340:	3301      	adds	r3, #1
    9342:	d003      	beq.n	934c <_fwalk+0x2c>
    9344:	1c28      	adds	r0, r5, #0
    9346:	9b01      	ldr	r3, [sp, #4]
    9348:	4798      	blx	r3
    934a:	4306      	orrs	r6, r0
    934c:	3568      	adds	r5, #104	; 0x68
    934e:	e7f0      	b.n	9332 <_fwalk+0x12>
    9350:	6824      	ldr	r4, [r4, #0]
    9352:	e7ea      	b.n	932a <_fwalk+0xa>
    9354:	1c30      	adds	r0, r6, #0
    9356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00009358 <_fwalk_reent>:
    9358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    935a:	1c04      	adds	r4, r0, #0
    935c:	1c07      	adds	r7, r0, #0
    935e:	2600      	movs	r6, #0
    9360:	9101      	str	r1, [sp, #4]
    9362:	3448      	adds	r4, #72	; 0x48
    9364:	2c00      	cmp	r4, #0
    9366:	d016      	beq.n	9396 <_fwalk_reent+0x3e>
    9368:	6863      	ldr	r3, [r4, #4]
    936a:	68a5      	ldr	r5, [r4, #8]
    936c:	9300      	str	r3, [sp, #0]
    936e:	9b00      	ldr	r3, [sp, #0]
    9370:	3b01      	subs	r3, #1
    9372:	9300      	str	r3, [sp, #0]
    9374:	d40d      	bmi.n	9392 <_fwalk_reent+0x3a>
    9376:	89ab      	ldrh	r3, [r5, #12]
    9378:	2b01      	cmp	r3, #1
    937a:	d908      	bls.n	938e <_fwalk_reent+0x36>
    937c:	220e      	movs	r2, #14
    937e:	5eab      	ldrsh	r3, [r5, r2]
    9380:	3301      	adds	r3, #1
    9382:	d004      	beq.n	938e <_fwalk_reent+0x36>
    9384:	1c38      	adds	r0, r7, #0
    9386:	1c29      	adds	r1, r5, #0
    9388:	9b01      	ldr	r3, [sp, #4]
    938a:	4798      	blx	r3
    938c:	4306      	orrs	r6, r0
    938e:	3568      	adds	r5, #104	; 0x68
    9390:	e7ed      	b.n	936e <_fwalk_reent+0x16>
    9392:	6824      	ldr	r4, [r4, #0]
    9394:	e7e6      	b.n	9364 <_fwalk_reent+0xc>
    9396:	1c30      	adds	r0, r6, #0
    9398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000939c <__libc_init_array>:
    939c:	4b0e      	ldr	r3, [pc, #56]	; (93d8 <__libc_init_array+0x3c>)
    939e:	b570      	push	{r4, r5, r6, lr}
    93a0:	2500      	movs	r5, #0
    93a2:	1c1e      	adds	r6, r3, #0
    93a4:	4c0d      	ldr	r4, [pc, #52]	; (93dc <__libc_init_array+0x40>)
    93a6:	1ae4      	subs	r4, r4, r3
    93a8:	10a4      	asrs	r4, r4, #2
    93aa:	42a5      	cmp	r5, r4
    93ac:	d004      	beq.n	93b8 <__libc_init_array+0x1c>
    93ae:	00ab      	lsls	r3, r5, #2
    93b0:	58f3      	ldr	r3, [r6, r3]
    93b2:	4798      	blx	r3
    93b4:	3501      	adds	r5, #1
    93b6:	e7f8      	b.n	93aa <__libc_init_array+0xe>
    93b8:	f006 f91c 	bl	f5f4 <_init>
    93bc:	4b08      	ldr	r3, [pc, #32]	; (93e0 <__libc_init_array+0x44>)
    93be:	2500      	movs	r5, #0
    93c0:	1c1e      	adds	r6, r3, #0
    93c2:	4c08      	ldr	r4, [pc, #32]	; (93e4 <__libc_init_array+0x48>)
    93c4:	1ae4      	subs	r4, r4, r3
    93c6:	10a4      	asrs	r4, r4, #2
    93c8:	42a5      	cmp	r5, r4
    93ca:	d004      	beq.n	93d6 <__libc_init_array+0x3a>
    93cc:	00ab      	lsls	r3, r5, #2
    93ce:	58f3      	ldr	r3, [r6, r3]
    93d0:	4798      	blx	r3
    93d2:	3501      	adds	r5, #1
    93d4:	e7f8      	b.n	93c8 <__libc_init_array+0x2c>
    93d6:	bd70      	pop	{r4, r5, r6, pc}
    93d8:	0000f600 	.word	0x0000f600
    93dc:	0000f600 	.word	0x0000f600
    93e0:	0000f600 	.word	0x0000f600
    93e4:	0000f60c 	.word	0x0000f60c

000093e8 <__smakebuf_r>:
    93e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ea:	898b      	ldrh	r3, [r1, #12]
    93ec:	b091      	sub	sp, #68	; 0x44
    93ee:	079b      	lsls	r3, r3, #30
    93f0:	d506      	bpl.n	9400 <__smakebuf_r+0x18>
    93f2:	1c0b      	adds	r3, r1, #0
    93f4:	3347      	adds	r3, #71	; 0x47
    93f6:	600b      	str	r3, [r1, #0]
    93f8:	610b      	str	r3, [r1, #16]
    93fa:	2301      	movs	r3, #1
    93fc:	614b      	str	r3, [r1, #20]
    93fe:	e045      	b.n	948c <__smakebuf_r+0xa4>
    9400:	1c0c      	adds	r4, r1, #0
    9402:	230e      	movs	r3, #14
    9404:	5ec9      	ldrsh	r1, [r1, r3]
    9406:	1c06      	adds	r6, r0, #0
    9408:	2900      	cmp	r1, #0
    940a:	da04      	bge.n	9416 <__smakebuf_r+0x2e>
    940c:	2380      	movs	r3, #128	; 0x80
    940e:	89a5      	ldrh	r5, [r4, #12]
    9410:	401d      	ands	r5, r3
    9412:	d110      	bne.n	9436 <__smakebuf_r+0x4e>
    9414:	e00c      	b.n	9430 <__smakebuf_r+0x48>
    9416:	aa01      	add	r2, sp, #4
    9418:	f003 fc6c 	bl	ccf4 <_fstat_r>
    941c:	2800      	cmp	r0, #0
    941e:	dbf5      	blt.n	940c <__smakebuf_r+0x24>
    9420:	23f0      	movs	r3, #240	; 0xf0
    9422:	9d02      	ldr	r5, [sp, #8]
    9424:	021b      	lsls	r3, r3, #8
    9426:	401d      	ands	r5, r3
    9428:	4b19      	ldr	r3, [pc, #100]	; (9490 <__smakebuf_r+0xa8>)
    942a:	18ed      	adds	r5, r5, r3
    942c:	426b      	negs	r3, r5
    942e:	415d      	adcs	r5, r3
    9430:	2780      	movs	r7, #128	; 0x80
    9432:	00ff      	lsls	r7, r7, #3
    9434:	e001      	b.n	943a <__smakebuf_r+0x52>
    9436:	2500      	movs	r5, #0
    9438:	2740      	movs	r7, #64	; 0x40
    943a:	1c30      	adds	r0, r6, #0
    943c:	1c39      	adds	r1, r7, #0
    943e:	f000 f8a1 	bl	9584 <_malloc_r>
    9442:	2800      	cmp	r0, #0
    9444:	d10c      	bne.n	9460 <__smakebuf_r+0x78>
    9446:	89a3      	ldrh	r3, [r4, #12]
    9448:	059a      	lsls	r2, r3, #22
    944a:	d41f      	bmi.n	948c <__smakebuf_r+0xa4>
    944c:	2202      	movs	r2, #2
    944e:	4313      	orrs	r3, r2
    9450:	81a3      	strh	r3, [r4, #12]
    9452:	1c23      	adds	r3, r4, #0
    9454:	3347      	adds	r3, #71	; 0x47
    9456:	6023      	str	r3, [r4, #0]
    9458:	6123      	str	r3, [r4, #16]
    945a:	2301      	movs	r3, #1
    945c:	6163      	str	r3, [r4, #20]
    945e:	e015      	b.n	948c <__smakebuf_r+0xa4>
    9460:	2280      	movs	r2, #128	; 0x80
    9462:	4b0c      	ldr	r3, [pc, #48]	; (9494 <__smakebuf_r+0xac>)
    9464:	62b3      	str	r3, [r6, #40]	; 0x28
    9466:	89a3      	ldrh	r3, [r4, #12]
    9468:	6020      	str	r0, [r4, #0]
    946a:	4313      	orrs	r3, r2
    946c:	81a3      	strh	r3, [r4, #12]
    946e:	6120      	str	r0, [r4, #16]
    9470:	6167      	str	r7, [r4, #20]
    9472:	2d00      	cmp	r5, #0
    9474:	d00a      	beq.n	948c <__smakebuf_r+0xa4>
    9476:	230e      	movs	r3, #14
    9478:	5ee1      	ldrsh	r1, [r4, r3]
    947a:	1c30      	adds	r0, r6, #0
    947c:	f003 ff64 	bl	d348 <_isatty_r>
    9480:	2800      	cmp	r0, #0
    9482:	d003      	beq.n	948c <__smakebuf_r+0xa4>
    9484:	2201      	movs	r2, #1
    9486:	89a3      	ldrh	r3, [r4, #12]
    9488:	4313      	orrs	r3, r2
    948a:	81a3      	strh	r3, [r4, #12]
    948c:	b011      	add	sp, #68	; 0x44
    948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9490:	ffffe000 	.word	0xffffe000
    9494:	00008f89 	.word	0x00008f89

00009498 <malloc>:
    9498:	b508      	push	{r3, lr}
    949a:	4b03      	ldr	r3, [pc, #12]	; (94a8 <malloc+0x10>)
    949c:	1c01      	adds	r1, r0, #0
    949e:	6818      	ldr	r0, [r3, #0]
    94a0:	f000 f870 	bl	9584 <_malloc_r>
    94a4:	bd08      	pop	{r3, pc}
    94a6:	46c0      	nop			; (mov r8, r8)
    94a8:	20000134 	.word	0x20000134

000094ac <free>:
    94ac:	b508      	push	{r3, lr}
    94ae:	4b03      	ldr	r3, [pc, #12]	; (94bc <free+0x10>)
    94b0:	1c01      	adds	r1, r0, #0
    94b2:	6818      	ldr	r0, [r3, #0]
    94b4:	f000 f820 	bl	94f8 <_free_r>
    94b8:	bd08      	pop	{r3, pc}
    94ba:	46c0      	nop			; (mov r8, r8)
    94bc:	20000134 	.word	0x20000134

000094c0 <memchr>:
    94c0:	b2c9      	uxtb	r1, r1
    94c2:	1882      	adds	r2, r0, r2
    94c4:	4290      	cmp	r0, r2
    94c6:	d004      	beq.n	94d2 <memchr+0x12>
    94c8:	7803      	ldrb	r3, [r0, #0]
    94ca:	428b      	cmp	r3, r1
    94cc:	d002      	beq.n	94d4 <memchr+0x14>
    94ce:	3001      	adds	r0, #1
    94d0:	e7f8      	b.n	94c4 <memchr+0x4>
    94d2:	2000      	movs	r0, #0
    94d4:	4770      	bx	lr

000094d6 <memcpy>:
    94d6:	2300      	movs	r3, #0
    94d8:	b510      	push	{r4, lr}
    94da:	4293      	cmp	r3, r2
    94dc:	d003      	beq.n	94e6 <memcpy+0x10>
    94de:	5ccc      	ldrb	r4, [r1, r3]
    94e0:	54c4      	strb	r4, [r0, r3]
    94e2:	3301      	adds	r3, #1
    94e4:	e7f9      	b.n	94da <memcpy+0x4>
    94e6:	bd10      	pop	{r4, pc}

000094e8 <memset>:
    94e8:	1c03      	adds	r3, r0, #0
    94ea:	1882      	adds	r2, r0, r2
    94ec:	4293      	cmp	r3, r2
    94ee:	d002      	beq.n	94f6 <memset+0xe>
    94f0:	7019      	strb	r1, [r3, #0]
    94f2:	3301      	adds	r3, #1
    94f4:	e7fa      	b.n	94ec <memset+0x4>
    94f6:	4770      	bx	lr

000094f8 <_free_r>:
    94f8:	b530      	push	{r4, r5, lr}
    94fa:	2900      	cmp	r1, #0
    94fc:	d03e      	beq.n	957c <_free_r+0x84>
    94fe:	3904      	subs	r1, #4
    9500:	680b      	ldr	r3, [r1, #0]
    9502:	2b00      	cmp	r3, #0
    9504:	da00      	bge.n	9508 <_free_r+0x10>
    9506:	18c9      	adds	r1, r1, r3
    9508:	4a1d      	ldr	r2, [pc, #116]	; (9580 <_free_r+0x88>)
    950a:	6813      	ldr	r3, [r2, #0]
    950c:	1c14      	adds	r4, r2, #0
    950e:	2b00      	cmp	r3, #0
    9510:	d102      	bne.n	9518 <_free_r+0x20>
    9512:	604b      	str	r3, [r1, #4]
    9514:	6011      	str	r1, [r2, #0]
    9516:	e031      	b.n	957c <_free_r+0x84>
    9518:	4299      	cmp	r1, r3
    951a:	d20d      	bcs.n	9538 <_free_r+0x40>
    951c:	6808      	ldr	r0, [r1, #0]
    951e:	180a      	adds	r2, r1, r0
    9520:	429a      	cmp	r2, r3
    9522:	d103      	bne.n	952c <_free_r+0x34>
    9524:	6813      	ldr	r3, [r2, #0]
    9526:	18c3      	adds	r3, r0, r3
    9528:	600b      	str	r3, [r1, #0]
    952a:	6853      	ldr	r3, [r2, #4]
    952c:	604b      	str	r3, [r1, #4]
    952e:	6021      	str	r1, [r4, #0]
    9530:	e024      	b.n	957c <_free_r+0x84>
    9532:	428a      	cmp	r2, r1
    9534:	d803      	bhi.n	953e <_free_r+0x46>
    9536:	1c13      	adds	r3, r2, #0
    9538:	685a      	ldr	r2, [r3, #4]
    953a:	2a00      	cmp	r2, #0
    953c:	d1f9      	bne.n	9532 <_free_r+0x3a>
    953e:	681d      	ldr	r5, [r3, #0]
    9540:	195c      	adds	r4, r3, r5
    9542:	428c      	cmp	r4, r1
    9544:	d10b      	bne.n	955e <_free_r+0x66>
    9546:	6809      	ldr	r1, [r1, #0]
    9548:	1869      	adds	r1, r5, r1
    954a:	1858      	adds	r0, r3, r1
    954c:	6019      	str	r1, [r3, #0]
    954e:	4290      	cmp	r0, r2
    9550:	d114      	bne.n	957c <_free_r+0x84>
    9552:	6810      	ldr	r0, [r2, #0]
    9554:	6852      	ldr	r2, [r2, #4]
    9556:	1809      	adds	r1, r1, r0
    9558:	6019      	str	r1, [r3, #0]
    955a:	605a      	str	r2, [r3, #4]
    955c:	e00e      	b.n	957c <_free_r+0x84>
    955e:	428c      	cmp	r4, r1
    9560:	d902      	bls.n	9568 <_free_r+0x70>
    9562:	230c      	movs	r3, #12
    9564:	6003      	str	r3, [r0, #0]
    9566:	e009      	b.n	957c <_free_r+0x84>
    9568:	6808      	ldr	r0, [r1, #0]
    956a:	180c      	adds	r4, r1, r0
    956c:	4294      	cmp	r4, r2
    956e:	d103      	bne.n	9578 <_free_r+0x80>
    9570:	6814      	ldr	r4, [r2, #0]
    9572:	6852      	ldr	r2, [r2, #4]
    9574:	1900      	adds	r0, r0, r4
    9576:	6008      	str	r0, [r1, #0]
    9578:	604a      	str	r2, [r1, #4]
    957a:	6059      	str	r1, [r3, #4]
    957c:	bd30      	pop	{r4, r5, pc}
    957e:	46c0      	nop			; (mov r8, r8)
    9580:	200043a4 	.word	0x200043a4

00009584 <_malloc_r>:
    9584:	2303      	movs	r3, #3
    9586:	b570      	push	{r4, r5, r6, lr}
    9588:	1ccc      	adds	r4, r1, #3
    958a:	439c      	bics	r4, r3
    958c:	3408      	adds	r4, #8
    958e:	1c05      	adds	r5, r0, #0
    9590:	2c0c      	cmp	r4, #12
    9592:	d201      	bcs.n	9598 <_malloc_r+0x14>
    9594:	240c      	movs	r4, #12
    9596:	e005      	b.n	95a4 <_malloc_r+0x20>
    9598:	2c00      	cmp	r4, #0
    959a:	da03      	bge.n	95a4 <_malloc_r+0x20>
    959c:	230c      	movs	r3, #12
    959e:	2000      	movs	r0, #0
    95a0:	602b      	str	r3, [r5, #0]
    95a2:	e042      	b.n	962a <_malloc_r+0xa6>
    95a4:	428c      	cmp	r4, r1
    95a6:	d3f9      	bcc.n	959c <_malloc_r+0x18>
    95a8:	4a20      	ldr	r2, [pc, #128]	; (962c <_malloc_r+0xa8>)
    95aa:	6813      	ldr	r3, [r2, #0]
    95ac:	1c10      	adds	r0, r2, #0
    95ae:	1c19      	adds	r1, r3, #0
    95b0:	2900      	cmp	r1, #0
    95b2:	d013      	beq.n	95dc <_malloc_r+0x58>
    95b4:	680a      	ldr	r2, [r1, #0]
    95b6:	1b12      	subs	r2, r2, r4
    95b8:	d40d      	bmi.n	95d6 <_malloc_r+0x52>
    95ba:	2a0b      	cmp	r2, #11
    95bc:	d902      	bls.n	95c4 <_malloc_r+0x40>
    95be:	600a      	str	r2, [r1, #0]
    95c0:	188b      	adds	r3, r1, r2
    95c2:	e01f      	b.n	9604 <_malloc_r+0x80>
    95c4:	428b      	cmp	r3, r1
    95c6:	d102      	bne.n	95ce <_malloc_r+0x4a>
    95c8:	685a      	ldr	r2, [r3, #4]
    95ca:	6002      	str	r2, [r0, #0]
    95cc:	e01b      	b.n	9606 <_malloc_r+0x82>
    95ce:	684a      	ldr	r2, [r1, #4]
    95d0:	605a      	str	r2, [r3, #4]
    95d2:	1c0b      	adds	r3, r1, #0
    95d4:	e017      	b.n	9606 <_malloc_r+0x82>
    95d6:	1c0b      	adds	r3, r1, #0
    95d8:	6849      	ldr	r1, [r1, #4]
    95da:	e7e9      	b.n	95b0 <_malloc_r+0x2c>
    95dc:	4e14      	ldr	r6, [pc, #80]	; (9630 <_malloc_r+0xac>)
    95de:	6833      	ldr	r3, [r6, #0]
    95e0:	2b00      	cmp	r3, #0
    95e2:	d103      	bne.n	95ec <_malloc_r+0x68>
    95e4:	1c28      	adds	r0, r5, #0
    95e6:	f001 fa4b 	bl	aa80 <_sbrk_r>
    95ea:	6030      	str	r0, [r6, #0]
    95ec:	1c28      	adds	r0, r5, #0
    95ee:	1c21      	adds	r1, r4, #0
    95f0:	f001 fa46 	bl	aa80 <_sbrk_r>
    95f4:	1c03      	adds	r3, r0, #0
    95f6:	1c42      	adds	r2, r0, #1
    95f8:	d0d0      	beq.n	959c <_malloc_r+0x18>
    95fa:	2203      	movs	r2, #3
    95fc:	1cc6      	adds	r6, r0, #3
    95fe:	4396      	bics	r6, r2
    9600:	4286      	cmp	r6, r0
    9602:	d10a      	bne.n	961a <_malloc_r+0x96>
    9604:	601c      	str	r4, [r3, #0]
    9606:	1c18      	adds	r0, r3, #0
    9608:	2107      	movs	r1, #7
    960a:	300b      	adds	r0, #11
    960c:	1d1a      	adds	r2, r3, #4
    960e:	4388      	bics	r0, r1
    9610:	1a82      	subs	r2, r0, r2
    9612:	d00a      	beq.n	962a <_malloc_r+0xa6>
    9614:	4251      	negs	r1, r2
    9616:	5099      	str	r1, [r3, r2]
    9618:	e007      	b.n	962a <_malloc_r+0xa6>
    961a:	1a31      	subs	r1, r6, r0
    961c:	1c28      	adds	r0, r5, #0
    961e:	f001 fa2f 	bl	aa80 <_sbrk_r>
    9622:	1c43      	adds	r3, r0, #1
    9624:	d0ba      	beq.n	959c <_malloc_r+0x18>
    9626:	1c33      	adds	r3, r6, #0
    9628:	e7ec      	b.n	9604 <_malloc_r+0x80>
    962a:	bd70      	pop	{r4, r5, r6, pc}
    962c:	200043a4 	.word	0x200043a4
    9630:	200043a0 	.word	0x200043a0

00009634 <__sfputc_r>:
    9634:	6893      	ldr	r3, [r2, #8]
    9636:	b510      	push	{r4, lr}
    9638:	3b01      	subs	r3, #1
    963a:	6093      	str	r3, [r2, #8]
    963c:	2b00      	cmp	r3, #0
    963e:	da05      	bge.n	964c <__sfputc_r+0x18>
    9640:	6994      	ldr	r4, [r2, #24]
    9642:	42a3      	cmp	r3, r4
    9644:	db08      	blt.n	9658 <__sfputc_r+0x24>
    9646:	b2cb      	uxtb	r3, r1
    9648:	2b0a      	cmp	r3, #10
    964a:	d005      	beq.n	9658 <__sfputc_r+0x24>
    964c:	6813      	ldr	r3, [r2, #0]
    964e:	1c58      	adds	r0, r3, #1
    9650:	6010      	str	r0, [r2, #0]
    9652:	7019      	strb	r1, [r3, #0]
    9654:	b2c8      	uxtb	r0, r1
    9656:	e001      	b.n	965c <__sfputc_r+0x28>
    9658:	f002 fb9a 	bl	bd90 <__swbuf_r>
    965c:	bd10      	pop	{r4, pc}

0000965e <__sfputs_r>:
    965e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9660:	1c06      	adds	r6, r0, #0
    9662:	1c0f      	adds	r7, r1, #0
    9664:	1c14      	adds	r4, r2, #0
    9666:	18d5      	adds	r5, r2, r3
    9668:	42ac      	cmp	r4, r5
    966a:	d008      	beq.n	967e <__sfputs_r+0x20>
    966c:	7821      	ldrb	r1, [r4, #0]
    966e:	1c30      	adds	r0, r6, #0
    9670:	1c3a      	adds	r2, r7, #0
    9672:	f7ff ffdf 	bl	9634 <__sfputc_r>
    9676:	3401      	adds	r4, #1
    9678:	1c43      	adds	r3, r0, #1
    967a:	d1f5      	bne.n	9668 <__sfputs_r+0xa>
    967c:	e000      	b.n	9680 <__sfputs_r+0x22>
    967e:	2000      	movs	r0, #0
    9680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009684 <_vfiprintf_r>:
    9684:	b5f0      	push	{r4, r5, r6, r7, lr}
    9686:	b09f      	sub	sp, #124	; 0x7c
    9688:	1c06      	adds	r6, r0, #0
    968a:	1c0f      	adds	r7, r1, #0
    968c:	9202      	str	r2, [sp, #8]
    968e:	9305      	str	r3, [sp, #20]
    9690:	2800      	cmp	r0, #0
    9692:	d004      	beq.n	969e <_vfiprintf_r+0x1a>
    9694:	6983      	ldr	r3, [r0, #24]
    9696:	2b00      	cmp	r3, #0
    9698:	d101      	bne.n	969e <_vfiprintf_r+0x1a>
    969a:	f7ff fcb7 	bl	900c <__sinit>
    969e:	4b79      	ldr	r3, [pc, #484]	; (9884 <_vfiprintf_r+0x200>)
    96a0:	429f      	cmp	r7, r3
    96a2:	d101      	bne.n	96a8 <_vfiprintf_r+0x24>
    96a4:	6877      	ldr	r7, [r6, #4]
    96a6:	e008      	b.n	96ba <_vfiprintf_r+0x36>
    96a8:	4b77      	ldr	r3, [pc, #476]	; (9888 <_vfiprintf_r+0x204>)
    96aa:	429f      	cmp	r7, r3
    96ac:	d101      	bne.n	96b2 <_vfiprintf_r+0x2e>
    96ae:	68b7      	ldr	r7, [r6, #8]
    96b0:	e003      	b.n	96ba <_vfiprintf_r+0x36>
    96b2:	4b76      	ldr	r3, [pc, #472]	; (988c <_vfiprintf_r+0x208>)
    96b4:	429f      	cmp	r7, r3
    96b6:	d100      	bne.n	96ba <_vfiprintf_r+0x36>
    96b8:	68f7      	ldr	r7, [r6, #12]
    96ba:	89bb      	ldrh	r3, [r7, #12]
    96bc:	071b      	lsls	r3, r3, #28
    96be:	d50a      	bpl.n	96d6 <_vfiprintf_r+0x52>
    96c0:	693b      	ldr	r3, [r7, #16]
    96c2:	2b00      	cmp	r3, #0
    96c4:	d007      	beq.n	96d6 <_vfiprintf_r+0x52>
    96c6:	2300      	movs	r3, #0
    96c8:	ad06      	add	r5, sp, #24
    96ca:	616b      	str	r3, [r5, #20]
    96cc:	3320      	adds	r3, #32
    96ce:	766b      	strb	r3, [r5, #25]
    96d0:	3310      	adds	r3, #16
    96d2:	76ab      	strb	r3, [r5, #26]
    96d4:	e03d      	b.n	9752 <_vfiprintf_r+0xce>
    96d6:	1c30      	adds	r0, r6, #0
    96d8:	1c39      	adds	r1, r7, #0
    96da:	f002 fbc5 	bl	be68 <__swsetup_r>
    96de:	2800      	cmp	r0, #0
    96e0:	d0f1      	beq.n	96c6 <_vfiprintf_r+0x42>
    96e2:	2001      	movs	r0, #1
    96e4:	4240      	negs	r0, r0
    96e6:	e0ca      	b.n	987e <_vfiprintf_r+0x1fa>
    96e8:	9a05      	ldr	r2, [sp, #20]
    96ea:	1d11      	adds	r1, r2, #4
    96ec:	6812      	ldr	r2, [r2, #0]
    96ee:	9105      	str	r1, [sp, #20]
    96f0:	2a00      	cmp	r2, #0
    96f2:	db7e      	blt.n	97f2 <_vfiprintf_r+0x16e>
    96f4:	9209      	str	r2, [sp, #36]	; 0x24
    96f6:	3401      	adds	r4, #1
    96f8:	7823      	ldrb	r3, [r4, #0]
    96fa:	2b2e      	cmp	r3, #46	; 0x2e
    96fc:	d100      	bne.n	9700 <_vfiprintf_r+0x7c>
    96fe:	e089      	b.n	9814 <_vfiprintf_r+0x190>
    9700:	7821      	ldrb	r1, [r4, #0]
    9702:	4863      	ldr	r0, [pc, #396]	; (9890 <_vfiprintf_r+0x20c>)
    9704:	2203      	movs	r2, #3
    9706:	f7ff fedb 	bl	94c0 <memchr>
    970a:	2800      	cmp	r0, #0
    970c:	d008      	beq.n	9720 <_vfiprintf_r+0x9c>
    970e:	4b60      	ldr	r3, [pc, #384]	; (9890 <_vfiprintf_r+0x20c>)
    9710:	3401      	adds	r4, #1
    9712:	1ac0      	subs	r0, r0, r3
    9714:	2340      	movs	r3, #64	; 0x40
    9716:	4083      	lsls	r3, r0
    9718:	1c18      	adds	r0, r3, #0
    971a:	682b      	ldr	r3, [r5, #0]
    971c:	4318      	orrs	r0, r3
    971e:	6028      	str	r0, [r5, #0]
    9720:	7821      	ldrb	r1, [r4, #0]
    9722:	1c63      	adds	r3, r4, #1
    9724:	485b      	ldr	r0, [pc, #364]	; (9894 <_vfiprintf_r+0x210>)
    9726:	2206      	movs	r2, #6
    9728:	9302      	str	r3, [sp, #8]
    972a:	7629      	strb	r1, [r5, #24]
    972c:	f7ff fec8 	bl	94c0 <memchr>
    9730:	2800      	cmp	r0, #0
    9732:	d100      	bne.n	9736 <_vfiprintf_r+0xb2>
    9734:	e091      	b.n	985a <_vfiprintf_r+0x1d6>
    9736:	4b58      	ldr	r3, [pc, #352]	; (9898 <_vfiprintf_r+0x214>)
    9738:	2b00      	cmp	r3, #0
    973a:	d000      	beq.n	973e <_vfiprintf_r+0xba>
    973c:	e084      	b.n	9848 <_vfiprintf_r+0x1c4>
    973e:	2207      	movs	r2, #7
    9740:	9b05      	ldr	r3, [sp, #20]
    9742:	3307      	adds	r3, #7
    9744:	4393      	bics	r3, r2
    9746:	3308      	adds	r3, #8
    9748:	9305      	str	r3, [sp, #20]
    974a:	696b      	ldr	r3, [r5, #20]
    974c:	9a03      	ldr	r2, [sp, #12]
    974e:	189b      	adds	r3, r3, r2
    9750:	616b      	str	r3, [r5, #20]
    9752:	9c02      	ldr	r4, [sp, #8]
    9754:	7823      	ldrb	r3, [r4, #0]
    9756:	2b00      	cmp	r3, #0
    9758:	d104      	bne.n	9764 <_vfiprintf_r+0xe0>
    975a:	9b02      	ldr	r3, [sp, #8]
    975c:	1ae3      	subs	r3, r4, r3
    975e:	9304      	str	r3, [sp, #16]
    9760:	d011      	beq.n	9786 <_vfiprintf_r+0x102>
    9762:	e003      	b.n	976c <_vfiprintf_r+0xe8>
    9764:	2b25      	cmp	r3, #37	; 0x25
    9766:	d0f8      	beq.n	975a <_vfiprintf_r+0xd6>
    9768:	3401      	adds	r4, #1
    976a:	e7f3      	b.n	9754 <_vfiprintf_r+0xd0>
    976c:	9b04      	ldr	r3, [sp, #16]
    976e:	1c30      	adds	r0, r6, #0
    9770:	1c39      	adds	r1, r7, #0
    9772:	9a02      	ldr	r2, [sp, #8]
    9774:	f7ff ff73 	bl	965e <__sfputs_r>
    9778:	1c43      	adds	r3, r0, #1
    977a:	d07b      	beq.n	9874 <_vfiprintf_r+0x1f0>
    977c:	696a      	ldr	r2, [r5, #20]
    977e:	9b04      	ldr	r3, [sp, #16]
    9780:	4694      	mov	ip, r2
    9782:	4463      	add	r3, ip
    9784:	616b      	str	r3, [r5, #20]
    9786:	7823      	ldrb	r3, [r4, #0]
    9788:	2b00      	cmp	r3, #0
    978a:	d073      	beq.n	9874 <_vfiprintf_r+0x1f0>
    978c:	2201      	movs	r2, #1
    978e:	2300      	movs	r3, #0
    9790:	4252      	negs	r2, r2
    9792:	606a      	str	r2, [r5, #4]
    9794:	a902      	add	r1, sp, #8
    9796:	3254      	adds	r2, #84	; 0x54
    9798:	1852      	adds	r2, r2, r1
    979a:	3401      	adds	r4, #1
    979c:	602b      	str	r3, [r5, #0]
    979e:	60eb      	str	r3, [r5, #12]
    97a0:	60ab      	str	r3, [r5, #8]
    97a2:	7013      	strb	r3, [r2, #0]
    97a4:	65ab      	str	r3, [r5, #88]	; 0x58
    97a6:	7821      	ldrb	r1, [r4, #0]
    97a8:	483c      	ldr	r0, [pc, #240]	; (989c <_vfiprintf_r+0x218>)
    97aa:	2205      	movs	r2, #5
    97ac:	f7ff fe88 	bl	94c0 <memchr>
    97b0:	2800      	cmp	r0, #0
    97b2:	d009      	beq.n	97c8 <_vfiprintf_r+0x144>
    97b4:	4b39      	ldr	r3, [pc, #228]	; (989c <_vfiprintf_r+0x218>)
    97b6:	3401      	adds	r4, #1
    97b8:	1ac0      	subs	r0, r0, r3
    97ba:	2301      	movs	r3, #1
    97bc:	4083      	lsls	r3, r0
    97be:	1c18      	adds	r0, r3, #0
    97c0:	682b      	ldr	r3, [r5, #0]
    97c2:	4318      	orrs	r0, r3
    97c4:	6028      	str	r0, [r5, #0]
    97c6:	e7ee      	b.n	97a6 <_vfiprintf_r+0x122>
    97c8:	682b      	ldr	r3, [r5, #0]
    97ca:	06da      	lsls	r2, r3, #27
    97cc:	d504      	bpl.n	97d8 <_vfiprintf_r+0x154>
    97ce:	2253      	movs	r2, #83	; 0x53
    97d0:	2120      	movs	r1, #32
    97d2:	a802      	add	r0, sp, #8
    97d4:	1812      	adds	r2, r2, r0
    97d6:	7011      	strb	r1, [r2, #0]
    97d8:	071a      	lsls	r2, r3, #28
    97da:	d504      	bpl.n	97e6 <_vfiprintf_r+0x162>
    97dc:	2253      	movs	r2, #83	; 0x53
    97de:	212b      	movs	r1, #43	; 0x2b
    97e0:	a802      	add	r0, sp, #8
    97e2:	1812      	adds	r2, r2, r0
    97e4:	7011      	strb	r1, [r2, #0]
    97e6:	7822      	ldrb	r2, [r4, #0]
    97e8:	2a2a      	cmp	r2, #42	; 0x2a
    97ea:	d100      	bne.n	97ee <_vfiprintf_r+0x16a>
    97ec:	e77c      	b.n	96e8 <_vfiprintf_r+0x64>
    97ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97f0:	e005      	b.n	97fe <_vfiprintf_r+0x17a>
    97f2:	4252      	negs	r2, r2
    97f4:	60ea      	str	r2, [r5, #12]
    97f6:	2202      	movs	r2, #2
    97f8:	4313      	orrs	r3, r2
    97fa:	602b      	str	r3, [r5, #0]
    97fc:	e77b      	b.n	96f6 <_vfiprintf_r+0x72>
    97fe:	7822      	ldrb	r2, [r4, #0]
    9800:	3a30      	subs	r2, #48	; 0x30
    9802:	2a09      	cmp	r2, #9
    9804:	d804      	bhi.n	9810 <_vfiprintf_r+0x18c>
    9806:	210a      	movs	r1, #10
    9808:	434b      	muls	r3, r1
    980a:	3401      	adds	r4, #1
    980c:	189b      	adds	r3, r3, r2
    980e:	e7f6      	b.n	97fe <_vfiprintf_r+0x17a>
    9810:	9309      	str	r3, [sp, #36]	; 0x24
    9812:	e771      	b.n	96f8 <_vfiprintf_r+0x74>
    9814:	7863      	ldrb	r3, [r4, #1]
    9816:	2b2a      	cmp	r3, #42	; 0x2a
    9818:	d109      	bne.n	982e <_vfiprintf_r+0x1aa>
    981a:	9b05      	ldr	r3, [sp, #20]
    981c:	3402      	adds	r4, #2
    981e:	1d1a      	adds	r2, r3, #4
    9820:	681b      	ldr	r3, [r3, #0]
    9822:	9205      	str	r2, [sp, #20]
    9824:	2b00      	cmp	r3, #0
    9826:	da0d      	bge.n	9844 <_vfiprintf_r+0x1c0>
    9828:	2301      	movs	r3, #1
    982a:	425b      	negs	r3, r3
    982c:	e00a      	b.n	9844 <_vfiprintf_r+0x1c0>
    982e:	2300      	movs	r3, #0
    9830:	3401      	adds	r4, #1
    9832:	7822      	ldrb	r2, [r4, #0]
    9834:	3a30      	subs	r2, #48	; 0x30
    9836:	2a09      	cmp	r2, #9
    9838:	d804      	bhi.n	9844 <_vfiprintf_r+0x1c0>
    983a:	210a      	movs	r1, #10
    983c:	434b      	muls	r3, r1
    983e:	3401      	adds	r4, #1
    9840:	189b      	adds	r3, r3, r2
    9842:	e7f6      	b.n	9832 <_vfiprintf_r+0x1ae>
    9844:	9307      	str	r3, [sp, #28]
    9846:	e75b      	b.n	9700 <_vfiprintf_r+0x7c>
    9848:	ab05      	add	r3, sp, #20
    984a:	9300      	str	r3, [sp, #0]
    984c:	1c30      	adds	r0, r6, #0
    984e:	1c29      	adds	r1, r5, #0
    9850:	1c3a      	adds	r2, r7, #0
    9852:	4b13      	ldr	r3, [pc, #76]	; (98a0 <_vfiprintf_r+0x21c>)
    9854:	f000 f8ca 	bl	99ec <_printf_float>
    9858:	e007      	b.n	986a <_vfiprintf_r+0x1e6>
    985a:	ab05      	add	r3, sp, #20
    985c:	9300      	str	r3, [sp, #0]
    985e:	1c30      	adds	r0, r6, #0
    9860:	1c29      	adds	r1, r5, #0
    9862:	1c3a      	adds	r2, r7, #0
    9864:	4b0e      	ldr	r3, [pc, #56]	; (98a0 <_vfiprintf_r+0x21c>)
    9866:	f000 fb6d 	bl	9f44 <_printf_i>
    986a:	9003      	str	r0, [sp, #12]
    986c:	9b03      	ldr	r3, [sp, #12]
    986e:	3301      	adds	r3, #1
    9870:	d000      	beq.n	9874 <_vfiprintf_r+0x1f0>
    9872:	e76a      	b.n	974a <_vfiprintf_r+0xc6>
    9874:	89bb      	ldrh	r3, [r7, #12]
    9876:	065b      	lsls	r3, r3, #25
    9878:	d500      	bpl.n	987c <_vfiprintf_r+0x1f8>
    987a:	e732      	b.n	96e2 <_vfiprintf_r+0x5e>
    987c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    987e:	b01f      	add	sp, #124	; 0x7c
    9880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9882:	46c0      	nop			; (mov r8, r8)
    9884:	0000f2b0 	.word	0x0000f2b0
    9888:	0000f2d0 	.word	0x0000f2d0
    988c:	0000f2f0 	.word	0x0000f2f0
    9890:	0000f31e 	.word	0x0000f31e
    9894:	0000f322 	.word	0x0000f322
    9898:	000099ed 	.word	0x000099ed
    989c:	0000f318 	.word	0x0000f318
    98a0:	0000965f 	.word	0x0000965f

000098a4 <vfiprintf>:
    98a4:	b538      	push	{r3, r4, r5, lr}
    98a6:	1c05      	adds	r5, r0, #0
    98a8:	1c0c      	adds	r4, r1, #0
    98aa:	1c13      	adds	r3, r2, #0
    98ac:	4a03      	ldr	r2, [pc, #12]	; (98bc <vfiprintf+0x18>)
    98ae:	1c29      	adds	r1, r5, #0
    98b0:	6810      	ldr	r0, [r2, #0]
    98b2:	1c22      	adds	r2, r4, #0
    98b4:	f7ff fee6 	bl	9684 <_vfiprintf_r>
    98b8:	bd38      	pop	{r3, r4, r5, pc}
    98ba:	46c0      	nop			; (mov r8, r8)
    98bc:	20000134 	.word	0x20000134

000098c0 <__cvt>:
    98c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    98c2:	b08b      	sub	sp, #44	; 0x2c
    98c4:	1c14      	adds	r4, r2, #0
    98c6:	1e1d      	subs	r5, r3, #0
    98c8:	9912      	ldr	r1, [sp, #72]	; 0x48
    98ca:	da06      	bge.n	98da <__cvt+0x1a>
    98cc:	2480      	movs	r4, #128	; 0x80
    98ce:	0624      	lsls	r4, r4, #24
    98d0:	192b      	adds	r3, r5, r4
    98d2:	1c1d      	adds	r5, r3, #0
    98d4:	1c14      	adds	r4, r2, #0
    98d6:	232d      	movs	r3, #45	; 0x2d
    98d8:	e000      	b.n	98dc <__cvt+0x1c>
    98da:	2300      	movs	r3, #0
    98dc:	700b      	strb	r3, [r1, #0]
    98de:	2320      	movs	r3, #32
    98e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
    98e2:	2203      	movs	r2, #3
    98e4:	439e      	bics	r6, r3
    98e6:	2e46      	cmp	r6, #70	; 0x46
    98e8:	d007      	beq.n	98fa <__cvt+0x3a>
    98ea:	1c33      	adds	r3, r6, #0
    98ec:	3b45      	subs	r3, #69	; 0x45
    98ee:	4259      	negs	r1, r3
    98f0:	414b      	adcs	r3, r1
    98f2:	9910      	ldr	r1, [sp, #64]	; 0x40
    98f4:	3a01      	subs	r2, #1
    98f6:	18cb      	adds	r3, r1, r3
    98f8:	9310      	str	r3, [sp, #64]	; 0x40
    98fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98fc:	9200      	str	r2, [sp, #0]
    98fe:	9301      	str	r3, [sp, #4]
    9900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9902:	1c22      	adds	r2, r4, #0
    9904:	9302      	str	r3, [sp, #8]
    9906:	ab08      	add	r3, sp, #32
    9908:	9303      	str	r3, [sp, #12]
    990a:	ab09      	add	r3, sp, #36	; 0x24
    990c:	9304      	str	r3, [sp, #16]
    990e:	1c2b      	adds	r3, r5, #0
    9910:	f002 fbb8 	bl	c084 <_dtoa_r>
    9914:	1c07      	adds	r7, r0, #0
    9916:	2e47      	cmp	r6, #71	; 0x47
    9918:	d102      	bne.n	9920 <__cvt+0x60>
    991a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    991c:	07db      	lsls	r3, r3, #31
    991e:	d52c      	bpl.n	997a <__cvt+0xba>
    9920:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9922:	18fb      	adds	r3, r7, r3
    9924:	9307      	str	r3, [sp, #28]
    9926:	2e46      	cmp	r6, #70	; 0x46
    9928:	d114      	bne.n	9954 <__cvt+0x94>
    992a:	783b      	ldrb	r3, [r7, #0]
    992c:	2b30      	cmp	r3, #48	; 0x30
    992e:	d10c      	bne.n	994a <__cvt+0x8a>
    9930:	1c20      	adds	r0, r4, #0
    9932:	1c29      	adds	r1, r5, #0
    9934:	2200      	movs	r2, #0
    9936:	2300      	movs	r3, #0
    9938:	f7fd fa4e 	bl	6dd8 <__aeabi_dcmpeq>
    993c:	2800      	cmp	r0, #0
    993e:	d104      	bne.n	994a <__cvt+0x8a>
    9940:	2301      	movs	r3, #1
    9942:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9944:	1a9b      	subs	r3, r3, r2
    9946:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9948:	6013      	str	r3, [r2, #0]
    994a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    994c:	9a07      	ldr	r2, [sp, #28]
    994e:	681b      	ldr	r3, [r3, #0]
    9950:	18d3      	adds	r3, r2, r3
    9952:	9307      	str	r3, [sp, #28]
    9954:	1c20      	adds	r0, r4, #0
    9956:	1c29      	adds	r1, r5, #0
    9958:	2200      	movs	r2, #0
    995a:	2300      	movs	r3, #0
    995c:	f7fd fa3c 	bl	6dd8 <__aeabi_dcmpeq>
    9960:	2800      	cmp	r0, #0
    9962:	d001      	beq.n	9968 <__cvt+0xa8>
    9964:	9b07      	ldr	r3, [sp, #28]
    9966:	9309      	str	r3, [sp, #36]	; 0x24
    9968:	9b09      	ldr	r3, [sp, #36]	; 0x24
    996a:	9a07      	ldr	r2, [sp, #28]
    996c:	4293      	cmp	r3, r2
    996e:	d204      	bcs.n	997a <__cvt+0xba>
    9970:	1c5a      	adds	r2, r3, #1
    9972:	9209      	str	r2, [sp, #36]	; 0x24
    9974:	2230      	movs	r2, #48	; 0x30
    9976:	701a      	strb	r2, [r3, #0]
    9978:	e7f6      	b.n	9968 <__cvt+0xa8>
    997a:	1c38      	adds	r0, r7, #0
    997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    997e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9980:	1bdb      	subs	r3, r3, r7
    9982:	6013      	str	r3, [r2, #0]
    9984:	b00b      	add	sp, #44	; 0x2c
    9986:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009988 <__exponent>:
    9988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    998a:	232b      	movs	r3, #43	; 0x2b
    998c:	1c07      	adds	r7, r0, #0
    998e:	1c0c      	adds	r4, r1, #0
    9990:	7002      	strb	r2, [r0, #0]
    9992:	1c86      	adds	r6, r0, #2
    9994:	2900      	cmp	r1, #0
    9996:	da01      	bge.n	999c <__exponent+0x14>
    9998:	232d      	movs	r3, #45	; 0x2d
    999a:	424c      	negs	r4, r1
    999c:	707b      	strb	r3, [r7, #1]
    999e:	2c09      	cmp	r4, #9
    99a0:	dd1c      	ble.n	99dc <__exponent+0x54>
    99a2:	466b      	mov	r3, sp
    99a4:	1ddd      	adds	r5, r3, #7
    99a6:	1c20      	adds	r0, r4, #0
    99a8:	210a      	movs	r1, #10
    99aa:	f7fd f9f9 	bl	6da0 <__aeabi_idivmod>
    99ae:	3d01      	subs	r5, #1
    99b0:	3130      	adds	r1, #48	; 0x30
    99b2:	7029      	strb	r1, [r5, #0]
    99b4:	1c20      	adds	r0, r4, #0
    99b6:	210a      	movs	r1, #10
    99b8:	f7fd f90c 	bl	6bd4 <__aeabi_idiv>
    99bc:	1e04      	subs	r4, r0, #0
    99be:	2c09      	cmp	r4, #9
    99c0:	dcf1      	bgt.n	99a6 <__exponent+0x1e>
    99c2:	3d01      	subs	r5, #1
    99c4:	3430      	adds	r4, #48	; 0x30
    99c6:	702c      	strb	r4, [r5, #0]
    99c8:	466b      	mov	r3, sp
    99ca:	3307      	adds	r3, #7
    99cc:	1c30      	adds	r0, r6, #0
    99ce:	42ab      	cmp	r3, r5
    99d0:	d909      	bls.n	99e6 <__exponent+0x5e>
    99d2:	782b      	ldrb	r3, [r5, #0]
    99d4:	3501      	adds	r5, #1
    99d6:	7033      	strb	r3, [r6, #0]
    99d8:	3601      	adds	r6, #1
    99da:	e7f5      	b.n	99c8 <__exponent+0x40>
    99dc:	2330      	movs	r3, #48	; 0x30
    99de:	18e4      	adds	r4, r4, r3
    99e0:	7033      	strb	r3, [r6, #0]
    99e2:	1cb0      	adds	r0, r6, #2
    99e4:	7074      	strb	r4, [r6, #1]
    99e6:	1bc0      	subs	r0, r0, r7
    99e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000099ec <_printf_float>:
    99ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    99ee:	b093      	sub	sp, #76	; 0x4c
    99f0:	1c0c      	adds	r4, r1, #0
    99f2:	9208      	str	r2, [sp, #32]
    99f4:	9309      	str	r3, [sp, #36]	; 0x24
    99f6:	9e18      	ldr	r6, [sp, #96]	; 0x60
    99f8:	1c05      	adds	r5, r0, #0
    99fa:	f003 fcb7 	bl	d36c <_localeconv_r>
    99fe:	6803      	ldr	r3, [r0, #0]
    9a00:	1c18      	adds	r0, r3, #0
    9a02:	930b      	str	r3, [sp, #44]	; 0x2c
    9a04:	f001 fa00 	bl	ae08 <strlen>
    9a08:	2300      	movs	r3, #0
    9a0a:	6821      	ldr	r1, [r4, #0]
    9a0c:	9310      	str	r3, [sp, #64]	; 0x40
    9a0e:	900c      	str	r0, [sp, #48]	; 0x30
    9a10:	7e27      	ldrb	r7, [r4, #24]
    9a12:	6833      	ldr	r3, [r6, #0]
    9a14:	2207      	movs	r2, #7
    9a16:	05c9      	lsls	r1, r1, #23
    9a18:	d501      	bpl.n	9a1e <_printf_float+0x32>
    9a1a:	189b      	adds	r3, r3, r2
    9a1c:	e000      	b.n	9a20 <_printf_float+0x34>
    9a1e:	3307      	adds	r3, #7
    9a20:	4393      	bics	r3, r2
    9a22:	1c1a      	adds	r2, r3, #0
    9a24:	3208      	adds	r2, #8
    9a26:	6032      	str	r2, [r6, #0]
    9a28:	681a      	ldr	r2, [r3, #0]
    9a2a:	685b      	ldr	r3, [r3, #4]
    9a2c:	64a2      	str	r2, [r4, #72]	; 0x48
    9a2e:	64e3      	str	r3, [r4, #76]	; 0x4c
    9a30:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9a32:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9a34:	f000 fffc 	bl	aa30 <__fpclassifyd>
    9a38:	2801      	cmp	r0, #1
    9a3a:	d118      	bne.n	9a6e <_printf_float+0x82>
    9a3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9a3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9a40:	2200      	movs	r2, #0
    9a42:	2300      	movs	r3, #0
    9a44:	f7fd f9ce 	bl	6de4 <__aeabi_dcmplt>
    9a48:	2800      	cmp	r0, #0
    9a4a:	d003      	beq.n	9a54 <_printf_float+0x68>
    9a4c:	1c23      	adds	r3, r4, #0
    9a4e:	222d      	movs	r2, #45	; 0x2d
    9a50:	3343      	adds	r3, #67	; 0x43
    9a52:	701a      	strb	r2, [r3, #0]
    9a54:	4bb6      	ldr	r3, [pc, #728]	; (9d30 <_printf_float+0x344>)
    9a56:	930a      	str	r3, [sp, #40]	; 0x28
    9a58:	2f47      	cmp	r7, #71	; 0x47
    9a5a:	d901      	bls.n	9a60 <_printf_float+0x74>
    9a5c:	4bb5      	ldr	r3, [pc, #724]	; (9d34 <_printf_float+0x348>)
    9a5e:	930a      	str	r3, [sp, #40]	; 0x28
    9a60:	2303      	movs	r3, #3
    9a62:	6822      	ldr	r2, [r4, #0]
    9a64:	6123      	str	r3, [r4, #16]
    9a66:	3301      	adds	r3, #1
    9a68:	439a      	bics	r2, r3
    9a6a:	6022      	str	r2, [r4, #0]
    9a6c:	e012      	b.n	9a94 <_printf_float+0xa8>
    9a6e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9a70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9a72:	f000 ffdd 	bl	aa30 <__fpclassifyd>
    9a76:	6826      	ldr	r6, [r4, #0]
    9a78:	2800      	cmp	r0, #0
    9a7a:	d10d      	bne.n	9a98 <_printf_float+0xac>
    9a7c:	4bae      	ldr	r3, [pc, #696]	; (9d38 <_printf_float+0x34c>)
    9a7e:	930a      	str	r3, [sp, #40]	; 0x28
    9a80:	2f47      	cmp	r7, #71	; 0x47
    9a82:	d901      	bls.n	9a88 <_printf_float+0x9c>
    9a84:	4bad      	ldr	r3, [pc, #692]	; (9d3c <_printf_float+0x350>)
    9a86:	930a      	str	r3, [sp, #40]	; 0x28
    9a88:	2303      	movs	r3, #3
    9a8a:	1c31      	adds	r1, r6, #0
    9a8c:	6123      	str	r3, [r4, #16]
    9a8e:	3301      	adds	r3, #1
    9a90:	4399      	bics	r1, r3
    9a92:	6021      	str	r1, [r4, #0]
    9a94:	2600      	movs	r6, #0
    9a96:	e080      	b.n	9b9a <_printf_float+0x1ae>
    9a98:	2180      	movs	r1, #128	; 0x80
    9a9a:	6860      	ldr	r0, [r4, #4]
    9a9c:	00c9      	lsls	r1, r1, #3
    9a9e:	1c43      	adds	r3, r0, #1
    9aa0:	d101      	bne.n	9aa6 <_printf_float+0xba>
    9aa2:	2306      	movs	r3, #6
    9aa4:	e009      	b.n	9aba <_printf_float+0xce>
    9aa6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9aa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9aaa:	2f67      	cmp	r7, #103	; 0x67
    9aac:	d001      	beq.n	9ab2 <_printf_float+0xc6>
    9aae:	2f47      	cmp	r7, #71	; 0x47
    9ab0:	d104      	bne.n	9abc <_printf_float+0xd0>
    9ab2:	2800      	cmp	r0, #0
    9ab4:	d000      	beq.n	9ab8 <_printf_float+0xcc>
    9ab6:	e1c0      	b.n	9e3a <_printf_float+0x44e>
    9ab8:	2301      	movs	r3, #1
    9aba:	6063      	str	r3, [r4, #4]
    9abc:	6863      	ldr	r3, [r4, #4]
    9abe:	4331      	orrs	r1, r6
    9ac0:	9300      	str	r3, [sp, #0]
    9ac2:	2323      	movs	r3, #35	; 0x23
    9ac4:	6021      	str	r1, [r4, #0]
    9ac6:	9101      	str	r1, [sp, #4]
    9ac8:	2100      	movs	r1, #0
    9aca:	aa06      	add	r2, sp, #24
    9acc:	189b      	adds	r3, r3, r2
    9ace:	9302      	str	r3, [sp, #8]
    9ad0:	ab0f      	add	r3, sp, #60	; 0x3c
    9ad2:	9303      	str	r3, [sp, #12]
    9ad4:	ab10      	add	r3, sp, #64	; 0x40
    9ad6:	9305      	str	r3, [sp, #20]
    9ad8:	9704      	str	r7, [sp, #16]
    9ada:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9adc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9ade:	9106      	str	r1, [sp, #24]
    9ae0:	1c28      	adds	r0, r5, #0
    9ae2:	f7ff feed 	bl	98c0 <__cvt>
    9ae6:	2320      	movs	r3, #32
    9ae8:	1c3a      	adds	r2, r7, #0
    9aea:	900a      	str	r0, [sp, #40]	; 0x28
    9aec:	439a      	bics	r2, r3
    9aee:	2a47      	cmp	r2, #71	; 0x47
    9af0:	d107      	bne.n	9b02 <_printf_float+0x116>
    9af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9af4:	1cda      	adds	r2, r3, #3
    9af6:	db02      	blt.n	9afe <_printf_float+0x112>
    9af8:	6862      	ldr	r2, [r4, #4]
    9afa:	4293      	cmp	r3, r2
    9afc:	dd2d      	ble.n	9b5a <_printf_float+0x16e>
    9afe:	3f02      	subs	r7, #2
    9b00:	b2ff      	uxtb	r7, r7
    9b02:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9b04:	2f65      	cmp	r7, #101	; 0x65
    9b06:	d812      	bhi.n	9b2e <_printf_float+0x142>
    9b08:	1c20      	adds	r0, r4, #0
    9b0a:	3901      	subs	r1, #1
    9b0c:	1c3a      	adds	r2, r7, #0
    9b0e:	3050      	adds	r0, #80	; 0x50
    9b10:	910f      	str	r1, [sp, #60]	; 0x3c
    9b12:	f7ff ff39 	bl	9988 <__exponent>
    9b16:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9b18:	1c06      	adds	r6, r0, #0
    9b1a:	1883      	adds	r3, r0, r2
    9b1c:	6123      	str	r3, [r4, #16]
    9b1e:	2a01      	cmp	r2, #1
    9b20:	dc02      	bgt.n	9b28 <_printf_float+0x13c>
    9b22:	6822      	ldr	r2, [r4, #0]
    9b24:	07d2      	lsls	r2, r2, #31
    9b26:	d52e      	bpl.n	9b86 <_printf_float+0x19a>
    9b28:	3301      	adds	r3, #1
    9b2a:	6123      	str	r3, [r4, #16]
    9b2c:	e02b      	b.n	9b86 <_printf_float+0x19a>
    9b2e:	2f66      	cmp	r7, #102	; 0x66
    9b30:	d114      	bne.n	9b5c <_printf_float+0x170>
    9b32:	6863      	ldr	r3, [r4, #4]
    9b34:	2900      	cmp	r1, #0
    9b36:	dd08      	ble.n	9b4a <_printf_float+0x15e>
    9b38:	6121      	str	r1, [r4, #16]
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d102      	bne.n	9b44 <_printf_float+0x158>
    9b3e:	6822      	ldr	r2, [r4, #0]
    9b40:	07d2      	lsls	r2, r2, #31
    9b42:	d51d      	bpl.n	9b80 <_printf_float+0x194>
    9b44:	3301      	adds	r3, #1
    9b46:	18cb      	adds	r3, r1, r3
    9b48:	e011      	b.n	9b6e <_printf_float+0x182>
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d103      	bne.n	9b56 <_printf_float+0x16a>
    9b4e:	2201      	movs	r2, #1
    9b50:	6821      	ldr	r1, [r4, #0]
    9b52:	4211      	tst	r1, r2
    9b54:	d013      	beq.n	9b7e <_printf_float+0x192>
    9b56:	1c9a      	adds	r2, r3, #2
    9b58:	e011      	b.n	9b7e <_printf_float+0x192>
    9b5a:	2767      	movs	r7, #103	; 0x67
    9b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9b60:	4283      	cmp	r3, r0
    9b62:	db06      	blt.n	9b72 <_printf_float+0x186>
    9b64:	6822      	ldr	r2, [r4, #0]
    9b66:	6123      	str	r3, [r4, #16]
    9b68:	07d2      	lsls	r2, r2, #31
    9b6a:	d509      	bpl.n	9b80 <_printf_float+0x194>
    9b6c:	3301      	adds	r3, #1
    9b6e:	6123      	str	r3, [r4, #16]
    9b70:	e006      	b.n	9b80 <_printf_float+0x194>
    9b72:	2201      	movs	r2, #1
    9b74:	2b00      	cmp	r3, #0
    9b76:	dc01      	bgt.n	9b7c <_printf_float+0x190>
    9b78:	2102      	movs	r1, #2
    9b7a:	1aca      	subs	r2, r1, r3
    9b7c:	1882      	adds	r2, r0, r2
    9b7e:	6122      	str	r2, [r4, #16]
    9b80:	2600      	movs	r6, #0
    9b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b84:	65a3      	str	r3, [r4, #88]	; 0x58
    9b86:	2323      	movs	r3, #35	; 0x23
    9b88:	aa06      	add	r2, sp, #24
    9b8a:	189b      	adds	r3, r3, r2
    9b8c:	781b      	ldrb	r3, [r3, #0]
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d003      	beq.n	9b9a <_printf_float+0x1ae>
    9b92:	1c23      	adds	r3, r4, #0
    9b94:	222d      	movs	r2, #45	; 0x2d
    9b96:	3343      	adds	r3, #67	; 0x43
    9b98:	701a      	strb	r2, [r3, #0]
    9b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9b9c:	1c28      	adds	r0, r5, #0
    9b9e:	9300      	str	r3, [sp, #0]
    9ba0:	1c21      	adds	r1, r4, #0
    9ba2:	9b08      	ldr	r3, [sp, #32]
    9ba4:	aa11      	add	r2, sp, #68	; 0x44
    9ba6:	f000 f95f 	bl	9e68 <_printf_common>
    9baa:	1c43      	adds	r3, r0, #1
    9bac:	d102      	bne.n	9bb4 <_printf_float+0x1c8>
    9bae:	2001      	movs	r0, #1
    9bb0:	4240      	negs	r0, r0
    9bb2:	e156      	b.n	9e62 <_printf_float+0x476>
    9bb4:	6822      	ldr	r2, [r4, #0]
    9bb6:	0553      	lsls	r3, r2, #21
    9bb8:	d404      	bmi.n	9bc4 <_printf_float+0x1d8>
    9bba:	1c28      	adds	r0, r5, #0
    9bbc:	9908      	ldr	r1, [sp, #32]
    9bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9bc0:	6923      	ldr	r3, [r4, #16]
    9bc2:	e116      	b.n	9df2 <_printf_float+0x406>
    9bc4:	2f65      	cmp	r7, #101	; 0x65
    9bc6:	d800      	bhi.n	9bca <_printf_float+0x1de>
    9bc8:	e0d4      	b.n	9d74 <_printf_float+0x388>
    9bca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9bcc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9bce:	2200      	movs	r2, #0
    9bd0:	2300      	movs	r3, #0
    9bd2:	f7fd f901 	bl	6dd8 <__aeabi_dcmpeq>
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d02b      	beq.n	9c32 <_printf_float+0x246>
    9bda:	2301      	movs	r3, #1
    9bdc:	1c28      	adds	r0, r5, #0
    9bde:	9908      	ldr	r1, [sp, #32]
    9be0:	4a57      	ldr	r2, [pc, #348]	; (9d40 <_printf_float+0x354>)
    9be2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9be4:	47b0      	blx	r6
    9be6:	1c43      	adds	r3, r0, #1
    9be8:	d0e1      	beq.n	9bae <_printf_float+0x1c2>
    9bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9bee:	4293      	cmp	r3, r2
    9bf0:	db07      	blt.n	9c02 <_printf_float+0x216>
    9bf2:	6823      	ldr	r3, [r4, #0]
    9bf4:	07db      	lsls	r3, r3, #31
    9bf6:	d404      	bmi.n	9c02 <_printf_float+0x216>
    9bf8:	6823      	ldr	r3, [r4, #0]
    9bfa:	079b      	lsls	r3, r3, #30
    9bfc:	d500      	bpl.n	9c00 <_printf_float+0x214>
    9bfe:	e11a      	b.n	9e36 <_printf_float+0x44a>
    9c00:	e113      	b.n	9e2a <_printf_float+0x43e>
    9c02:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9c04:	1c28      	adds	r0, r5, #0
    9c06:	9908      	ldr	r1, [sp, #32]
    9c08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c0c:	47b0      	blx	r6
    9c0e:	2600      	movs	r6, #0
    9c10:	1c43      	adds	r3, r0, #1
    9c12:	d0cc      	beq.n	9bae <_printf_float+0x1c2>
    9c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c16:	3b01      	subs	r3, #1
    9c18:	429e      	cmp	r6, r3
    9c1a:	daed      	bge.n	9bf8 <_printf_float+0x20c>
    9c1c:	1c22      	adds	r2, r4, #0
    9c1e:	2301      	movs	r3, #1
    9c20:	1c28      	adds	r0, r5, #0
    9c22:	9908      	ldr	r1, [sp, #32]
    9c24:	321a      	adds	r2, #26
    9c26:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9c28:	47b8      	blx	r7
    9c2a:	1c43      	adds	r3, r0, #1
    9c2c:	d0bf      	beq.n	9bae <_printf_float+0x1c2>
    9c2e:	3601      	adds	r6, #1
    9c30:	e7f0      	b.n	9c14 <_printf_float+0x228>
    9c32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c34:	2b00      	cmp	r3, #0
    9c36:	dc2b      	bgt.n	9c90 <_printf_float+0x2a4>
    9c38:	2301      	movs	r3, #1
    9c3a:	1c28      	adds	r0, r5, #0
    9c3c:	9908      	ldr	r1, [sp, #32]
    9c3e:	4a40      	ldr	r2, [pc, #256]	; (9d40 <_printf_float+0x354>)
    9c40:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9c42:	47b0      	blx	r6
    9c44:	1c43      	adds	r3, r0, #1
    9c46:	d0b2      	beq.n	9bae <_printf_float+0x1c2>
    9c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c4a:	2b00      	cmp	r3, #0
    9c4c:	d105      	bne.n	9c5a <_printf_float+0x26e>
    9c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c50:	2b00      	cmp	r3, #0
    9c52:	d102      	bne.n	9c5a <_printf_float+0x26e>
    9c54:	6823      	ldr	r3, [r4, #0]
    9c56:	07db      	lsls	r3, r3, #31
    9c58:	d5ce      	bpl.n	9bf8 <_printf_float+0x20c>
    9c5a:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9c5c:	1c28      	adds	r0, r5, #0
    9c5e:	9908      	ldr	r1, [sp, #32]
    9c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c64:	47b0      	blx	r6
    9c66:	2600      	movs	r6, #0
    9c68:	1c43      	adds	r3, r0, #1
    9c6a:	d0a0      	beq.n	9bae <_printf_float+0x1c2>
    9c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c6e:	1c28      	adds	r0, r5, #0
    9c70:	425b      	negs	r3, r3
    9c72:	9908      	ldr	r1, [sp, #32]
    9c74:	429e      	cmp	r6, r3
    9c76:	da08      	bge.n	9c8a <_printf_float+0x29e>
    9c78:	1c22      	adds	r2, r4, #0
    9c7a:	2301      	movs	r3, #1
    9c7c:	321a      	adds	r2, #26
    9c7e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9c80:	47b8      	blx	r7
    9c82:	1c43      	adds	r3, r0, #1
    9c84:	d093      	beq.n	9bae <_printf_float+0x1c2>
    9c86:	3601      	adds	r6, #1
    9c88:	e7f0      	b.n	9c6c <_printf_float+0x280>
    9c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c8e:	e0b0      	b.n	9df2 <_printf_float+0x406>
    9c90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c92:	6da6      	ldr	r6, [r4, #88]	; 0x58
    9c94:	429e      	cmp	r6, r3
    9c96:	dd00      	ble.n	9c9a <_printf_float+0x2ae>
    9c98:	1c1e      	adds	r6, r3, #0
    9c9a:	2e00      	cmp	r6, #0
    9c9c:	dc01      	bgt.n	9ca2 <_printf_float+0x2b6>
    9c9e:	2300      	movs	r3, #0
    9ca0:	e014      	b.n	9ccc <_printf_float+0x2e0>
    9ca2:	1c33      	adds	r3, r6, #0
    9ca4:	1c28      	adds	r0, r5, #0
    9ca6:	9908      	ldr	r1, [sp, #32]
    9ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9caa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9cac:	47b8      	blx	r7
    9cae:	1c43      	adds	r3, r0, #1
    9cb0:	d1f5      	bne.n	9c9e <_printf_float+0x2b2>
    9cb2:	e77c      	b.n	9bae <_printf_float+0x1c2>
    9cb4:	1c22      	adds	r2, r4, #0
    9cb6:	2301      	movs	r3, #1
    9cb8:	1c28      	adds	r0, r5, #0
    9cba:	9908      	ldr	r1, [sp, #32]
    9cbc:	321a      	adds	r2, #26
    9cbe:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9cc0:	47b8      	blx	r7
    9cc2:	1c43      	adds	r3, r0, #1
    9cc4:	d100      	bne.n	9cc8 <_printf_float+0x2dc>
    9cc6:	e772      	b.n	9bae <_printf_float+0x1c2>
    9cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9cca:	3301      	adds	r3, #1
    9ccc:	930d      	str	r3, [sp, #52]	; 0x34
    9cce:	43f3      	mvns	r3, r6
    9cd0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    9cd2:	17db      	asrs	r3, r3, #31
    9cd4:	990d      	ldr	r1, [sp, #52]	; 0x34
    9cd6:	4033      	ands	r3, r6
    9cd8:	1ad3      	subs	r3, r2, r3
    9cda:	4299      	cmp	r1, r3
    9cdc:	dbea      	blt.n	9cb4 <_printf_float+0x2c8>
    9cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ce0:	189e      	adds	r6, r3, r2
    9ce2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9ce6:	4293      	cmp	r3, r2
    9ce8:	db0e      	blt.n	9d08 <_printf_float+0x31c>
    9cea:	6823      	ldr	r3, [r4, #0]
    9cec:	07db      	lsls	r3, r3, #31
    9cee:	d40b      	bmi.n	9d08 <_printf_float+0x31c>
    9cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9cf4:	18d7      	adds	r7, r2, r3
    9cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9cf8:	1bbf      	subs	r7, r7, r6
    9cfa:	1a9b      	subs	r3, r3, r2
    9cfc:	429f      	cmp	r7, r3
    9cfe:	dd00      	ble.n	9d02 <_printf_float+0x316>
    9d00:	1c1f      	adds	r7, r3, #0
    9d02:	2f00      	cmp	r7, #0
    9d04:	dc09      	bgt.n	9d1a <_printf_float+0x32e>
    9d06:	e011      	b.n	9d2c <_printf_float+0x340>
    9d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d0a:	1c28      	adds	r0, r5, #0
    9d0c:	9908      	ldr	r1, [sp, #32]
    9d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d10:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9d12:	47b8      	blx	r7
    9d14:	1c43      	adds	r3, r0, #1
    9d16:	d1eb      	bne.n	9cf0 <_printf_float+0x304>
    9d18:	e749      	b.n	9bae <_printf_float+0x1c2>
    9d1a:	1c32      	adds	r2, r6, #0
    9d1c:	1c3b      	adds	r3, r7, #0
    9d1e:	1c28      	adds	r0, r5, #0
    9d20:	9908      	ldr	r1, [sp, #32]
    9d22:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9d24:	47b0      	blx	r6
    9d26:	1c43      	adds	r3, r0, #1
    9d28:	d100      	bne.n	9d2c <_printf_float+0x340>
    9d2a:	e740      	b.n	9bae <_printf_float+0x1c2>
    9d2c:	2300      	movs	r3, #0
    9d2e:	e015      	b.n	9d5c <_printf_float+0x370>
    9d30:	0000f329 	.word	0x0000f329
    9d34:	0000f32d 	.word	0x0000f32d
    9d38:	0000f331 	.word	0x0000f331
    9d3c:	0000f335 	.word	0x0000f335
    9d40:	0000f382 	.word	0x0000f382
    9d44:	1c22      	adds	r2, r4, #0
    9d46:	2301      	movs	r3, #1
    9d48:	1c28      	adds	r0, r5, #0
    9d4a:	9908      	ldr	r1, [sp, #32]
    9d4c:	321a      	adds	r2, #26
    9d4e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9d50:	47b0      	blx	r6
    9d52:	1c43      	adds	r3, r0, #1
    9d54:	d100      	bne.n	9d58 <_printf_float+0x36c>
    9d56:	e72a      	b.n	9bae <_printf_float+0x1c2>
    9d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9d5a:	3301      	adds	r3, #1
    9d5c:	930a      	str	r3, [sp, #40]	; 0x28
    9d5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d62:	1a9a      	subs	r2, r3, r2
    9d64:	43fb      	mvns	r3, r7
    9d66:	17db      	asrs	r3, r3, #31
    9d68:	403b      	ands	r3, r7
    9d6a:	1ad3      	subs	r3, r2, r3
    9d6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9d6e:	429a      	cmp	r2, r3
    9d70:	dbe8      	blt.n	9d44 <_printf_float+0x358>
    9d72:	e741      	b.n	9bf8 <_printf_float+0x20c>
    9d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d76:	1c28      	adds	r0, r5, #0
    9d78:	9908      	ldr	r1, [sp, #32]
    9d7a:	2b01      	cmp	r3, #1
    9d7c:	dc02      	bgt.n	9d84 <_printf_float+0x398>
    9d7e:	2301      	movs	r3, #1
    9d80:	421a      	tst	r2, r3
    9d82:	d03c      	beq.n	9dfe <_printf_float+0x412>
    9d84:	2301      	movs	r3, #1
    9d86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9d88:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9d8a:	47b8      	blx	r7
    9d8c:	1c43      	adds	r3, r0, #1
    9d8e:	d100      	bne.n	9d92 <_printf_float+0x3a6>
    9d90:	e70d      	b.n	9bae <_printf_float+0x1c2>
    9d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d94:	1c28      	adds	r0, r5, #0
    9d96:	9908      	ldr	r1, [sp, #32]
    9d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9d9c:	47b8      	blx	r7
    9d9e:	1c43      	adds	r3, r0, #1
    9da0:	d100      	bne.n	9da4 <_printf_float+0x3b8>
    9da2:	e704      	b.n	9bae <_printf_float+0x1c2>
    9da4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    9da6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    9da8:	2300      	movs	r3, #0
    9daa:	2200      	movs	r2, #0
    9dac:	f7fd f814 	bl	6dd8 <__aeabi_dcmpeq>
    9db0:	2300      	movs	r3, #0
    9db2:	2800      	cmp	r0, #0
    9db4:	d112      	bne.n	9ddc <_printf_float+0x3f0>
    9db6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9db8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9dba:	3201      	adds	r2, #1
    9dbc:	3b01      	subs	r3, #1
    9dbe:	1c28      	adds	r0, r5, #0
    9dc0:	9908      	ldr	r1, [sp, #32]
    9dc2:	e01d      	b.n	9e00 <_printf_float+0x414>
    9dc4:	1c22      	adds	r2, r4, #0
    9dc6:	2301      	movs	r3, #1
    9dc8:	1c28      	adds	r0, r5, #0
    9dca:	9908      	ldr	r1, [sp, #32]
    9dcc:	321a      	adds	r2, #26
    9dce:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9dd0:	47b8      	blx	r7
    9dd2:	1c43      	adds	r3, r0, #1
    9dd4:	d100      	bne.n	9dd8 <_printf_float+0x3ec>
    9dd6:	e6ea      	b.n	9bae <_printf_float+0x1c2>
    9dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9dda:	3301      	adds	r3, #1
    9ddc:	930a      	str	r3, [sp, #40]	; 0x28
    9dde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9de2:	3b01      	subs	r3, #1
    9de4:	429a      	cmp	r2, r3
    9de6:	dbed      	blt.n	9dc4 <_printf_float+0x3d8>
    9de8:	1c22      	adds	r2, r4, #0
    9dea:	1c28      	adds	r0, r5, #0
    9dec:	1c33      	adds	r3, r6, #0
    9dee:	9908      	ldr	r1, [sp, #32]
    9df0:	3250      	adds	r2, #80	; 0x50
    9df2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    9df4:	47b0      	blx	r6
    9df6:	1c43      	adds	r3, r0, #1
    9df8:	d000      	beq.n	9dfc <_printf_float+0x410>
    9dfa:	e6fd      	b.n	9bf8 <_printf_float+0x20c>
    9dfc:	e6d7      	b.n	9bae <_printf_float+0x1c2>
    9dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e00:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9e02:	47b8      	blx	r7
    9e04:	1c43      	adds	r3, r0, #1
    9e06:	d1ef      	bne.n	9de8 <_printf_float+0x3fc>
    9e08:	e6d1      	b.n	9bae <_printf_float+0x1c2>
    9e0a:	1c22      	adds	r2, r4, #0
    9e0c:	2301      	movs	r3, #1
    9e0e:	1c28      	adds	r0, r5, #0
    9e10:	9908      	ldr	r1, [sp, #32]
    9e12:	3219      	adds	r2, #25
    9e14:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9e16:	47b8      	blx	r7
    9e18:	1c43      	adds	r3, r0, #1
    9e1a:	d100      	bne.n	9e1e <_printf_float+0x432>
    9e1c:	e6c7      	b.n	9bae <_printf_float+0x1c2>
    9e1e:	3601      	adds	r6, #1
    9e20:	68e3      	ldr	r3, [r4, #12]
    9e22:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e24:	1a9b      	subs	r3, r3, r2
    9e26:	429e      	cmp	r6, r3
    9e28:	dbef      	blt.n	9e0a <_printf_float+0x41e>
    9e2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9e2c:	68e0      	ldr	r0, [r4, #12]
    9e2e:	4298      	cmp	r0, r3
    9e30:	da17      	bge.n	9e62 <_printf_float+0x476>
    9e32:	1c18      	adds	r0, r3, #0
    9e34:	e015      	b.n	9e62 <_printf_float+0x476>
    9e36:	2600      	movs	r6, #0
    9e38:	e7f2      	b.n	9e20 <_printf_float+0x434>
    9e3a:	4331      	orrs	r1, r6
    9e3c:	6021      	str	r1, [r4, #0]
    9e3e:	9101      	str	r1, [sp, #4]
    9e40:	2123      	movs	r1, #35	; 0x23
    9e42:	9000      	str	r0, [sp, #0]
    9e44:	a806      	add	r0, sp, #24
    9e46:	1809      	adds	r1, r1, r0
    9e48:	9102      	str	r1, [sp, #8]
    9e4a:	a90f      	add	r1, sp, #60	; 0x3c
    9e4c:	9103      	str	r1, [sp, #12]
    9e4e:	a910      	add	r1, sp, #64	; 0x40
    9e50:	9105      	str	r1, [sp, #20]
    9e52:	2100      	movs	r1, #0
    9e54:	9704      	str	r7, [sp, #16]
    9e56:	9106      	str	r1, [sp, #24]
    9e58:	1c28      	adds	r0, r5, #0
    9e5a:	f7ff fd31 	bl	98c0 <__cvt>
    9e5e:	900a      	str	r0, [sp, #40]	; 0x28
    9e60:	e647      	b.n	9af2 <_printf_float+0x106>
    9e62:	b013      	add	sp, #76	; 0x4c
    9e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e66:	46c0      	nop			; (mov r8, r8)

00009e68 <_printf_common>:
    9e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e6a:	1c17      	adds	r7, r2, #0
    9e6c:	9301      	str	r3, [sp, #4]
    9e6e:	690a      	ldr	r2, [r1, #16]
    9e70:	688b      	ldr	r3, [r1, #8]
    9e72:	9000      	str	r0, [sp, #0]
    9e74:	1c0c      	adds	r4, r1, #0
    9e76:	4293      	cmp	r3, r2
    9e78:	da00      	bge.n	9e7c <_printf_common+0x14>
    9e7a:	1c13      	adds	r3, r2, #0
    9e7c:	1c22      	adds	r2, r4, #0
    9e7e:	603b      	str	r3, [r7, #0]
    9e80:	3243      	adds	r2, #67	; 0x43
    9e82:	7812      	ldrb	r2, [r2, #0]
    9e84:	2a00      	cmp	r2, #0
    9e86:	d001      	beq.n	9e8c <_printf_common+0x24>
    9e88:	3301      	adds	r3, #1
    9e8a:	603b      	str	r3, [r7, #0]
    9e8c:	6823      	ldr	r3, [r4, #0]
    9e8e:	069b      	lsls	r3, r3, #26
    9e90:	d502      	bpl.n	9e98 <_printf_common+0x30>
    9e92:	683b      	ldr	r3, [r7, #0]
    9e94:	3302      	adds	r3, #2
    9e96:	603b      	str	r3, [r7, #0]
    9e98:	2506      	movs	r5, #6
    9e9a:	6823      	ldr	r3, [r4, #0]
    9e9c:	401d      	ands	r5, r3
    9e9e:	d01e      	beq.n	9ede <_printf_common+0x76>
    9ea0:	1c23      	adds	r3, r4, #0
    9ea2:	3343      	adds	r3, #67	; 0x43
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	1e5a      	subs	r2, r3, #1
    9ea8:	4193      	sbcs	r3, r2
    9eaa:	6822      	ldr	r2, [r4, #0]
    9eac:	0692      	lsls	r2, r2, #26
    9eae:	d51c      	bpl.n	9eea <_printf_common+0x82>
    9eb0:	2030      	movs	r0, #48	; 0x30
    9eb2:	18e1      	adds	r1, r4, r3
    9eb4:	3140      	adds	r1, #64	; 0x40
    9eb6:	70c8      	strb	r0, [r1, #3]
    9eb8:	1c21      	adds	r1, r4, #0
    9eba:	1c5a      	adds	r2, r3, #1
    9ebc:	3145      	adds	r1, #69	; 0x45
    9ebe:	7809      	ldrb	r1, [r1, #0]
    9ec0:	18a2      	adds	r2, r4, r2
    9ec2:	3240      	adds	r2, #64	; 0x40
    9ec4:	3302      	adds	r3, #2
    9ec6:	70d1      	strb	r1, [r2, #3]
    9ec8:	e00f      	b.n	9eea <_printf_common+0x82>
    9eca:	1c22      	adds	r2, r4, #0
    9ecc:	2301      	movs	r3, #1
    9ece:	9800      	ldr	r0, [sp, #0]
    9ed0:	9901      	ldr	r1, [sp, #4]
    9ed2:	3219      	adds	r2, #25
    9ed4:	9e08      	ldr	r6, [sp, #32]
    9ed6:	47b0      	blx	r6
    9ed8:	1c43      	adds	r3, r0, #1
    9eda:	d00e      	beq.n	9efa <_printf_common+0x92>
    9edc:	3501      	adds	r5, #1
    9ede:	68e3      	ldr	r3, [r4, #12]
    9ee0:	683a      	ldr	r2, [r7, #0]
    9ee2:	1a9b      	subs	r3, r3, r2
    9ee4:	429d      	cmp	r5, r3
    9ee6:	dbf0      	blt.n	9eca <_printf_common+0x62>
    9ee8:	e7da      	b.n	9ea0 <_printf_common+0x38>
    9eea:	1c22      	adds	r2, r4, #0
    9eec:	9800      	ldr	r0, [sp, #0]
    9eee:	9901      	ldr	r1, [sp, #4]
    9ef0:	3243      	adds	r2, #67	; 0x43
    9ef2:	9d08      	ldr	r5, [sp, #32]
    9ef4:	47a8      	blx	r5
    9ef6:	1c43      	adds	r3, r0, #1
    9ef8:	d102      	bne.n	9f00 <_printf_common+0x98>
    9efa:	2001      	movs	r0, #1
    9efc:	4240      	negs	r0, r0
    9efe:	e020      	b.n	9f42 <_printf_common+0xda>
    9f00:	2306      	movs	r3, #6
    9f02:	6820      	ldr	r0, [r4, #0]
    9f04:	68e1      	ldr	r1, [r4, #12]
    9f06:	683a      	ldr	r2, [r7, #0]
    9f08:	4003      	ands	r3, r0
    9f0a:	2500      	movs	r5, #0
    9f0c:	2b04      	cmp	r3, #4
    9f0e:	d103      	bne.n	9f18 <_printf_common+0xb0>
    9f10:	1a8d      	subs	r5, r1, r2
    9f12:	43eb      	mvns	r3, r5
    9f14:	17db      	asrs	r3, r3, #31
    9f16:	401d      	ands	r5, r3
    9f18:	68a3      	ldr	r3, [r4, #8]
    9f1a:	6922      	ldr	r2, [r4, #16]
    9f1c:	4293      	cmp	r3, r2
    9f1e:	dd01      	ble.n	9f24 <_printf_common+0xbc>
    9f20:	1a9b      	subs	r3, r3, r2
    9f22:	18ed      	adds	r5, r5, r3
    9f24:	2700      	movs	r7, #0
    9f26:	42af      	cmp	r7, r5
    9f28:	da0a      	bge.n	9f40 <_printf_common+0xd8>
    9f2a:	1c22      	adds	r2, r4, #0
    9f2c:	2301      	movs	r3, #1
    9f2e:	9800      	ldr	r0, [sp, #0]
    9f30:	9901      	ldr	r1, [sp, #4]
    9f32:	321a      	adds	r2, #26
    9f34:	9e08      	ldr	r6, [sp, #32]
    9f36:	47b0      	blx	r6
    9f38:	1c43      	adds	r3, r0, #1
    9f3a:	d0de      	beq.n	9efa <_printf_common+0x92>
    9f3c:	3701      	adds	r7, #1
    9f3e:	e7f2      	b.n	9f26 <_printf_common+0xbe>
    9f40:	2000      	movs	r0, #0
    9f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00009f44 <_printf_i>:
    9f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f46:	b08b      	sub	sp, #44	; 0x2c
    9f48:	9206      	str	r2, [sp, #24]
    9f4a:	1c0a      	adds	r2, r1, #0
    9f4c:	3243      	adds	r2, #67	; 0x43
    9f4e:	9307      	str	r3, [sp, #28]
    9f50:	9005      	str	r0, [sp, #20]
    9f52:	9204      	str	r2, [sp, #16]
    9f54:	7e0a      	ldrb	r2, [r1, #24]
    9f56:	1c0c      	adds	r4, r1, #0
    9f58:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9f5a:	2a6e      	cmp	r2, #110	; 0x6e
    9f5c:	d100      	bne.n	9f60 <_printf_i+0x1c>
    9f5e:	e0a8      	b.n	a0b2 <_printf_i+0x16e>
    9f60:	d811      	bhi.n	9f86 <_printf_i+0x42>
    9f62:	2a63      	cmp	r2, #99	; 0x63
    9f64:	d022      	beq.n	9fac <_printf_i+0x68>
    9f66:	d809      	bhi.n	9f7c <_printf_i+0x38>
    9f68:	2a00      	cmp	r2, #0
    9f6a:	d100      	bne.n	9f6e <_printf_i+0x2a>
    9f6c:	e0b2      	b.n	a0d4 <_printf_i+0x190>
    9f6e:	2a58      	cmp	r2, #88	; 0x58
    9f70:	d000      	beq.n	9f74 <_printf_i+0x30>
    9f72:	e0c2      	b.n	a0fa <_printf_i+0x1b6>
    9f74:	3145      	adds	r1, #69	; 0x45
    9f76:	700a      	strb	r2, [r1, #0]
    9f78:	4a7c      	ldr	r2, [pc, #496]	; (a16c <_printf_i+0x228>)
    9f7a:	e04f      	b.n	a01c <_printf_i+0xd8>
    9f7c:	2a64      	cmp	r2, #100	; 0x64
    9f7e:	d01d      	beq.n	9fbc <_printf_i+0x78>
    9f80:	2a69      	cmp	r2, #105	; 0x69
    9f82:	d01b      	beq.n	9fbc <_printf_i+0x78>
    9f84:	e0b9      	b.n	a0fa <_printf_i+0x1b6>
    9f86:	2a73      	cmp	r2, #115	; 0x73
    9f88:	d100      	bne.n	9f8c <_printf_i+0x48>
    9f8a:	e0a7      	b.n	a0dc <_printf_i+0x198>
    9f8c:	d809      	bhi.n	9fa2 <_printf_i+0x5e>
    9f8e:	2a6f      	cmp	r2, #111	; 0x6f
    9f90:	d029      	beq.n	9fe6 <_printf_i+0xa2>
    9f92:	2a70      	cmp	r2, #112	; 0x70
    9f94:	d000      	beq.n	9f98 <_printf_i+0x54>
    9f96:	e0b0      	b.n	a0fa <_printf_i+0x1b6>
    9f98:	2220      	movs	r2, #32
    9f9a:	6809      	ldr	r1, [r1, #0]
    9f9c:	430a      	orrs	r2, r1
    9f9e:	6022      	str	r2, [r4, #0]
    9fa0:	e037      	b.n	a012 <_printf_i+0xce>
    9fa2:	2a75      	cmp	r2, #117	; 0x75
    9fa4:	d01f      	beq.n	9fe6 <_printf_i+0xa2>
    9fa6:	2a78      	cmp	r2, #120	; 0x78
    9fa8:	d033      	beq.n	a012 <_printf_i+0xce>
    9faa:	e0a6      	b.n	a0fa <_printf_i+0x1b6>
    9fac:	1c0e      	adds	r6, r1, #0
    9fae:	681a      	ldr	r2, [r3, #0]
    9fb0:	3642      	adds	r6, #66	; 0x42
    9fb2:	1d11      	adds	r1, r2, #4
    9fb4:	6019      	str	r1, [r3, #0]
    9fb6:	6813      	ldr	r3, [r2, #0]
    9fb8:	7033      	strb	r3, [r6, #0]
    9fba:	e0a1      	b.n	a100 <_printf_i+0x1bc>
    9fbc:	6821      	ldr	r1, [r4, #0]
    9fbe:	681a      	ldr	r2, [r3, #0]
    9fc0:	0608      	lsls	r0, r1, #24
    9fc2:	d406      	bmi.n	9fd2 <_printf_i+0x8e>
    9fc4:	0649      	lsls	r1, r1, #25
    9fc6:	d504      	bpl.n	9fd2 <_printf_i+0x8e>
    9fc8:	1d11      	adds	r1, r2, #4
    9fca:	6019      	str	r1, [r3, #0]
    9fcc:	2300      	movs	r3, #0
    9fce:	5ed5      	ldrsh	r5, [r2, r3]
    9fd0:	e002      	b.n	9fd8 <_printf_i+0x94>
    9fd2:	1d11      	adds	r1, r2, #4
    9fd4:	6019      	str	r1, [r3, #0]
    9fd6:	6815      	ldr	r5, [r2, #0]
    9fd8:	2d00      	cmp	r5, #0
    9fda:	da3b      	bge.n	a054 <_printf_i+0x110>
    9fdc:	232d      	movs	r3, #45	; 0x2d
    9fde:	9a04      	ldr	r2, [sp, #16]
    9fe0:	426d      	negs	r5, r5
    9fe2:	7013      	strb	r3, [r2, #0]
    9fe4:	e036      	b.n	a054 <_printf_i+0x110>
    9fe6:	6821      	ldr	r1, [r4, #0]
    9fe8:	681a      	ldr	r2, [r3, #0]
    9fea:	0608      	lsls	r0, r1, #24
    9fec:	d406      	bmi.n	9ffc <_printf_i+0xb8>
    9fee:	0649      	lsls	r1, r1, #25
    9ff0:	d504      	bpl.n	9ffc <_printf_i+0xb8>
    9ff2:	6815      	ldr	r5, [r2, #0]
    9ff4:	1d11      	adds	r1, r2, #4
    9ff6:	6019      	str	r1, [r3, #0]
    9ff8:	b2ad      	uxth	r5, r5
    9ffa:	e002      	b.n	a002 <_printf_i+0xbe>
    9ffc:	1d11      	adds	r1, r2, #4
    9ffe:	6019      	str	r1, [r3, #0]
    a000:	6815      	ldr	r5, [r2, #0]
    a002:	4b5a      	ldr	r3, [pc, #360]	; (a16c <_printf_i+0x228>)
    a004:	7e22      	ldrb	r2, [r4, #24]
    a006:	9303      	str	r3, [sp, #12]
    a008:	270a      	movs	r7, #10
    a00a:	2a6f      	cmp	r2, #111	; 0x6f
    a00c:	d11d      	bne.n	a04a <_printf_i+0x106>
    a00e:	2708      	movs	r7, #8
    a010:	e01b      	b.n	a04a <_printf_i+0x106>
    a012:	1c22      	adds	r2, r4, #0
    a014:	2178      	movs	r1, #120	; 0x78
    a016:	3245      	adds	r2, #69	; 0x45
    a018:	7011      	strb	r1, [r2, #0]
    a01a:	4a55      	ldr	r2, [pc, #340]	; (a170 <_printf_i+0x22c>)
    a01c:	6819      	ldr	r1, [r3, #0]
    a01e:	9203      	str	r2, [sp, #12]
    a020:	1d08      	adds	r0, r1, #4
    a022:	6822      	ldr	r2, [r4, #0]
    a024:	6018      	str	r0, [r3, #0]
    a026:	680d      	ldr	r5, [r1, #0]
    a028:	0610      	lsls	r0, r2, #24
    a02a:	d402      	bmi.n	a032 <_printf_i+0xee>
    a02c:	0650      	lsls	r0, r2, #25
    a02e:	d500      	bpl.n	a032 <_printf_i+0xee>
    a030:	b2ad      	uxth	r5, r5
    a032:	07d3      	lsls	r3, r2, #31
    a034:	d502      	bpl.n	a03c <_printf_i+0xf8>
    a036:	2320      	movs	r3, #32
    a038:	431a      	orrs	r2, r3
    a03a:	6022      	str	r2, [r4, #0]
    a03c:	2710      	movs	r7, #16
    a03e:	2d00      	cmp	r5, #0
    a040:	d103      	bne.n	a04a <_printf_i+0x106>
    a042:	2320      	movs	r3, #32
    a044:	6822      	ldr	r2, [r4, #0]
    a046:	439a      	bics	r2, r3
    a048:	6022      	str	r2, [r4, #0]
    a04a:	1c23      	adds	r3, r4, #0
    a04c:	2200      	movs	r2, #0
    a04e:	3343      	adds	r3, #67	; 0x43
    a050:	701a      	strb	r2, [r3, #0]
    a052:	e002      	b.n	a05a <_printf_i+0x116>
    a054:	270a      	movs	r7, #10
    a056:	4b45      	ldr	r3, [pc, #276]	; (a16c <_printf_i+0x228>)
    a058:	9303      	str	r3, [sp, #12]
    a05a:	6863      	ldr	r3, [r4, #4]
    a05c:	60a3      	str	r3, [r4, #8]
    a05e:	2b00      	cmp	r3, #0
    a060:	db03      	blt.n	a06a <_printf_i+0x126>
    a062:	2204      	movs	r2, #4
    a064:	6821      	ldr	r1, [r4, #0]
    a066:	4391      	bics	r1, r2
    a068:	6021      	str	r1, [r4, #0]
    a06a:	2d00      	cmp	r5, #0
    a06c:	d102      	bne.n	a074 <_printf_i+0x130>
    a06e:	9e04      	ldr	r6, [sp, #16]
    a070:	2b00      	cmp	r3, #0
    a072:	d00e      	beq.n	a092 <_printf_i+0x14e>
    a074:	9e04      	ldr	r6, [sp, #16]
    a076:	1c28      	adds	r0, r5, #0
    a078:	1c39      	adds	r1, r7, #0
    a07a:	f7fc fda1 	bl	6bc0 <__aeabi_uidivmod>
    a07e:	9b03      	ldr	r3, [sp, #12]
    a080:	3e01      	subs	r6, #1
    a082:	5c5b      	ldrb	r3, [r3, r1]
    a084:	1c28      	adds	r0, r5, #0
    a086:	7033      	strb	r3, [r6, #0]
    a088:	1c39      	adds	r1, r7, #0
    a08a:	f7fc fd13 	bl	6ab4 <__aeabi_uidiv>
    a08e:	1e05      	subs	r5, r0, #0
    a090:	d1f1      	bne.n	a076 <_printf_i+0x132>
    a092:	2f08      	cmp	r7, #8
    a094:	d109      	bne.n	a0aa <_printf_i+0x166>
    a096:	6823      	ldr	r3, [r4, #0]
    a098:	07db      	lsls	r3, r3, #31
    a09a:	d506      	bpl.n	a0aa <_printf_i+0x166>
    a09c:	6863      	ldr	r3, [r4, #4]
    a09e:	6922      	ldr	r2, [r4, #16]
    a0a0:	4293      	cmp	r3, r2
    a0a2:	dc02      	bgt.n	a0aa <_printf_i+0x166>
    a0a4:	2330      	movs	r3, #48	; 0x30
    a0a6:	3e01      	subs	r6, #1
    a0a8:	7033      	strb	r3, [r6, #0]
    a0aa:	9b04      	ldr	r3, [sp, #16]
    a0ac:	1b9b      	subs	r3, r3, r6
    a0ae:	6123      	str	r3, [r4, #16]
    a0b0:	e02b      	b.n	a10a <_printf_i+0x1c6>
    a0b2:	6809      	ldr	r1, [r1, #0]
    a0b4:	681a      	ldr	r2, [r3, #0]
    a0b6:	0608      	lsls	r0, r1, #24
    a0b8:	d407      	bmi.n	a0ca <_printf_i+0x186>
    a0ba:	0649      	lsls	r1, r1, #25
    a0bc:	d505      	bpl.n	a0ca <_printf_i+0x186>
    a0be:	1d11      	adds	r1, r2, #4
    a0c0:	6019      	str	r1, [r3, #0]
    a0c2:	6813      	ldr	r3, [r2, #0]
    a0c4:	8aa2      	ldrh	r2, [r4, #20]
    a0c6:	801a      	strh	r2, [r3, #0]
    a0c8:	e004      	b.n	a0d4 <_printf_i+0x190>
    a0ca:	1d11      	adds	r1, r2, #4
    a0cc:	6019      	str	r1, [r3, #0]
    a0ce:	6813      	ldr	r3, [r2, #0]
    a0d0:	6962      	ldr	r2, [r4, #20]
    a0d2:	601a      	str	r2, [r3, #0]
    a0d4:	2300      	movs	r3, #0
    a0d6:	9e04      	ldr	r6, [sp, #16]
    a0d8:	6123      	str	r3, [r4, #16]
    a0da:	e016      	b.n	a10a <_printf_i+0x1c6>
    a0dc:	681a      	ldr	r2, [r3, #0]
    a0de:	1d11      	adds	r1, r2, #4
    a0e0:	6019      	str	r1, [r3, #0]
    a0e2:	6816      	ldr	r6, [r2, #0]
    a0e4:	2100      	movs	r1, #0
    a0e6:	1c30      	adds	r0, r6, #0
    a0e8:	6862      	ldr	r2, [r4, #4]
    a0ea:	f7ff f9e9 	bl	94c0 <memchr>
    a0ee:	2800      	cmp	r0, #0
    a0f0:	d001      	beq.n	a0f6 <_printf_i+0x1b2>
    a0f2:	1b80      	subs	r0, r0, r6
    a0f4:	6060      	str	r0, [r4, #4]
    a0f6:	6863      	ldr	r3, [r4, #4]
    a0f8:	e003      	b.n	a102 <_printf_i+0x1be>
    a0fa:	1c26      	adds	r6, r4, #0
    a0fc:	3642      	adds	r6, #66	; 0x42
    a0fe:	7032      	strb	r2, [r6, #0]
    a100:	2301      	movs	r3, #1
    a102:	6123      	str	r3, [r4, #16]
    a104:	2300      	movs	r3, #0
    a106:	9a04      	ldr	r2, [sp, #16]
    a108:	7013      	strb	r3, [r2, #0]
    a10a:	9b07      	ldr	r3, [sp, #28]
    a10c:	9805      	ldr	r0, [sp, #20]
    a10e:	9300      	str	r3, [sp, #0]
    a110:	1c21      	adds	r1, r4, #0
    a112:	9b06      	ldr	r3, [sp, #24]
    a114:	aa09      	add	r2, sp, #36	; 0x24
    a116:	f7ff fea7 	bl	9e68 <_printf_common>
    a11a:	1c43      	adds	r3, r0, #1
    a11c:	d102      	bne.n	a124 <_printf_i+0x1e0>
    a11e:	2001      	movs	r0, #1
    a120:	4240      	negs	r0, r0
    a122:	e021      	b.n	a168 <_printf_i+0x224>
    a124:	6923      	ldr	r3, [r4, #16]
    a126:	9805      	ldr	r0, [sp, #20]
    a128:	9906      	ldr	r1, [sp, #24]
    a12a:	1c32      	adds	r2, r6, #0
    a12c:	9d07      	ldr	r5, [sp, #28]
    a12e:	47a8      	blx	r5
    a130:	1c43      	adds	r3, r0, #1
    a132:	d0f4      	beq.n	a11e <_printf_i+0x1da>
    a134:	6823      	ldr	r3, [r4, #0]
    a136:	079b      	lsls	r3, r3, #30
    a138:	d405      	bmi.n	a146 <_printf_i+0x202>
    a13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a13c:	68e0      	ldr	r0, [r4, #12]
    a13e:	4298      	cmp	r0, r3
    a140:	da12      	bge.n	a168 <_printf_i+0x224>
    a142:	1c18      	adds	r0, r3, #0
    a144:	e010      	b.n	a168 <_printf_i+0x224>
    a146:	2500      	movs	r5, #0
    a148:	68e3      	ldr	r3, [r4, #12]
    a14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a14c:	1a9b      	subs	r3, r3, r2
    a14e:	429d      	cmp	r5, r3
    a150:	daf3      	bge.n	a13a <_printf_i+0x1f6>
    a152:	1c22      	adds	r2, r4, #0
    a154:	2301      	movs	r3, #1
    a156:	9805      	ldr	r0, [sp, #20]
    a158:	9906      	ldr	r1, [sp, #24]
    a15a:	3219      	adds	r2, #25
    a15c:	9e07      	ldr	r6, [sp, #28]
    a15e:	47b0      	blx	r6
    a160:	1c43      	adds	r3, r0, #1
    a162:	d0dc      	beq.n	a11e <_printf_i+0x1da>
    a164:	3501      	adds	r5, #1
    a166:	e7ef      	b.n	a148 <_printf_i+0x204>
    a168:	b00b      	add	sp, #44	; 0x2c
    a16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a16c:	0000f339 	.word	0x0000f339
    a170:	0000f34a 	.word	0x0000f34a

0000a174 <_scanf_float>:
    a174:	b5f0      	push	{r4, r5, r6, r7, lr}
    a176:	1c15      	adds	r5, r2, #0
    a178:	2200      	movs	r2, #0
    a17a:	b08b      	sub	sp, #44	; 0x2c
    a17c:	9306      	str	r3, [sp, #24]
    a17e:	688b      	ldr	r3, [r1, #8]
    a180:	9205      	str	r2, [sp, #20]
    a182:	325d      	adds	r2, #93	; 0x5d
    a184:	1c0e      	adds	r6, r1, #0
    a186:	32ff      	adds	r2, #255	; 0xff
    a188:	1e59      	subs	r1, r3, #1
    a18a:	9002      	str	r0, [sp, #8]
    a18c:	4291      	cmp	r1, r2
    a18e:	d905      	bls.n	a19c <_scanf_float+0x28>
    a190:	3b5e      	subs	r3, #94	; 0x5e
    a192:	3bff      	subs	r3, #255	; 0xff
    a194:	9305      	str	r3, [sp, #20]
    a196:	235e      	movs	r3, #94	; 0x5e
    a198:	33ff      	adds	r3, #255	; 0xff
    a19a:	60b3      	str	r3, [r6, #8]
    a19c:	23f0      	movs	r3, #240	; 0xf0
    a19e:	6832      	ldr	r2, [r6, #0]
    a1a0:	00db      	lsls	r3, r3, #3
    a1a2:	4313      	orrs	r3, r2
    a1a4:	6033      	str	r3, [r6, #0]
    a1a6:	1c33      	adds	r3, r6, #0
    a1a8:	2400      	movs	r4, #0
    a1aa:	331c      	adds	r3, #28
    a1ac:	1c1f      	adds	r7, r3, #0
    a1ae:	9304      	str	r3, [sp, #16]
    a1b0:	9403      	str	r4, [sp, #12]
    a1b2:	9409      	str	r4, [sp, #36]	; 0x24
    a1b4:	9408      	str	r4, [sp, #32]
    a1b6:	9400      	str	r4, [sp, #0]
    a1b8:	9407      	str	r4, [sp, #28]
    a1ba:	68b2      	ldr	r2, [r6, #8]
    a1bc:	2a00      	cmp	r2, #0
    a1be:	d100      	bne.n	a1c2 <_scanf_float+0x4e>
    a1c0:	e0e1      	b.n	a386 <_scanf_float+0x212>
    a1c2:	682b      	ldr	r3, [r5, #0]
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	2b49      	cmp	r3, #73	; 0x49
    a1c8:	d077      	beq.n	a2ba <_scanf_float+0x146>
    a1ca:	d818      	bhi.n	a1fe <_scanf_float+0x8a>
    a1cc:	2b39      	cmp	r3, #57	; 0x39
    a1ce:	d80d      	bhi.n	a1ec <_scanf_float+0x78>
    a1d0:	2b31      	cmp	r3, #49	; 0x31
    a1d2:	d242      	bcs.n	a25a <_scanf_float+0xe6>
    a1d4:	2b2d      	cmp	r3, #45	; 0x2d
    a1d6:	d049      	beq.n	a26c <_scanf_float+0xf8>
    a1d8:	d802      	bhi.n	a1e0 <_scanf_float+0x6c>
    a1da:	2b2b      	cmp	r3, #43	; 0x2b
    a1dc:	d046      	beq.n	a26c <_scanf_float+0xf8>
    a1de:	e0d2      	b.n	a386 <_scanf_float+0x212>
    a1e0:	2b2e      	cmp	r3, #46	; 0x2e
    a1e2:	d100      	bne.n	a1e6 <_scanf_float+0x72>
    a1e4:	e08d      	b.n	a302 <_scanf_float+0x18e>
    a1e6:	2b30      	cmp	r3, #48	; 0x30
    a1e8:	d025      	beq.n	a236 <_scanf_float+0xc2>
    a1ea:	e0cc      	b.n	a386 <_scanf_float+0x212>
    a1ec:	2b45      	cmp	r3, #69	; 0x45
    a1ee:	d100      	bne.n	a1f2 <_scanf_float+0x7e>
    a1f0:	e090      	b.n	a314 <_scanf_float+0x1a0>
    a1f2:	2b46      	cmp	r3, #70	; 0x46
    a1f4:	d079      	beq.n	a2ea <_scanf_float+0x176>
    a1f6:	2b41      	cmp	r3, #65	; 0x41
    a1f8:	d000      	beq.n	a1fc <_scanf_float+0x88>
    a1fa:	e0c4      	b.n	a386 <_scanf_float+0x212>
    a1fc:	e058      	b.n	a2b0 <_scanf_float+0x13c>
    a1fe:	2b65      	cmp	r3, #101	; 0x65
    a200:	d100      	bne.n	a204 <_scanf_float+0x90>
    a202:	e087      	b.n	a314 <_scanf_float+0x1a0>
    a204:	d80a      	bhi.n	a21c <_scanf_float+0xa8>
    a206:	2b54      	cmp	r3, #84	; 0x54
    a208:	d073      	beq.n	a2f2 <_scanf_float+0x17e>
    a20a:	d802      	bhi.n	a212 <_scanf_float+0x9e>
    a20c:	2b4e      	cmp	r3, #78	; 0x4e
    a20e:	d035      	beq.n	a27c <_scanf_float+0x108>
    a210:	e0b9      	b.n	a386 <_scanf_float+0x212>
    a212:	2b59      	cmp	r3, #89	; 0x59
    a214:	d071      	beq.n	a2fa <_scanf_float+0x186>
    a216:	2b61      	cmp	r3, #97	; 0x61
    a218:	d04a      	beq.n	a2b0 <_scanf_float+0x13c>
    a21a:	e0b4      	b.n	a386 <_scanf_float+0x212>
    a21c:	2b6e      	cmp	r3, #110	; 0x6e
    a21e:	d02d      	beq.n	a27c <_scanf_float+0x108>
    a220:	d804      	bhi.n	a22c <_scanf_float+0xb8>
    a222:	2b66      	cmp	r3, #102	; 0x66
    a224:	d061      	beq.n	a2ea <_scanf_float+0x176>
    a226:	2b69      	cmp	r3, #105	; 0x69
    a228:	d047      	beq.n	a2ba <_scanf_float+0x146>
    a22a:	e0ac      	b.n	a386 <_scanf_float+0x212>
    a22c:	2b74      	cmp	r3, #116	; 0x74
    a22e:	d060      	beq.n	a2f2 <_scanf_float+0x17e>
    a230:	2b79      	cmp	r3, #121	; 0x79
    a232:	d062      	beq.n	a2fa <_scanf_float+0x186>
    a234:	e0a7      	b.n	a386 <_scanf_float+0x212>
    a236:	6831      	ldr	r1, [r6, #0]
    a238:	05c8      	lsls	r0, r1, #23
    a23a:	d50e      	bpl.n	a25a <_scanf_float+0xe6>
    a23c:	2380      	movs	r3, #128	; 0x80
    a23e:	4399      	bics	r1, r3
    a240:	9b00      	ldr	r3, [sp, #0]
    a242:	6031      	str	r1, [r6, #0]
    a244:	3301      	adds	r3, #1
    a246:	9300      	str	r3, [sp, #0]
    a248:	9b05      	ldr	r3, [sp, #20]
    a24a:	2b00      	cmp	r3, #0
    a24c:	d100      	bne.n	a250 <_scanf_float+0xdc>
    a24e:	e082      	b.n	a356 <_scanf_float+0x1e2>
    a250:	3b01      	subs	r3, #1
    a252:	3201      	adds	r2, #1
    a254:	9305      	str	r3, [sp, #20]
    a256:	60b2      	str	r2, [r6, #8]
    a258:	e07d      	b.n	a356 <_scanf_float+0x1e2>
    a25a:	9a03      	ldr	r2, [sp, #12]
    a25c:	1912      	adds	r2, r2, r4
    a25e:	2a00      	cmp	r2, #0
    a260:	d000      	beq.n	a264 <_scanf_float+0xf0>
    a262:	e090      	b.n	a386 <_scanf_float+0x212>
    a264:	4ab3      	ldr	r2, [pc, #716]	; (a534 <_scanf_float+0x3c0>)
    a266:	6831      	ldr	r1, [r6, #0]
    a268:	400a      	ands	r2, r1
    a26a:	e005      	b.n	a278 <_scanf_float+0x104>
    a26c:	2180      	movs	r1, #128	; 0x80
    a26e:	6832      	ldr	r2, [r6, #0]
    a270:	420a      	tst	r2, r1
    a272:	d100      	bne.n	a276 <_scanf_float+0x102>
    a274:	e087      	b.n	a386 <_scanf_float+0x212>
    a276:	438a      	bics	r2, r1
    a278:	6032      	str	r2, [r6, #0]
    a27a:	e06a      	b.n	a352 <_scanf_float+0x1de>
    a27c:	9a03      	ldr	r2, [sp, #12]
    a27e:	2a00      	cmp	r2, #0
    a280:	d10e      	bne.n	a2a0 <_scanf_float+0x12c>
    a282:	9a00      	ldr	r2, [sp, #0]
    a284:	2a00      	cmp	r2, #0
    a286:	d10e      	bne.n	a2a6 <_scanf_float+0x132>
    a288:	6831      	ldr	r1, [r6, #0]
    a28a:	22e0      	movs	r2, #224	; 0xe0
    a28c:	1c08      	adds	r0, r1, #0
    a28e:	00d2      	lsls	r2, r2, #3
    a290:	4010      	ands	r0, r2
    a292:	4290      	cmp	r0, r2
    a294:	d107      	bne.n	a2a6 <_scanf_float+0x132>
    a296:	4aa8      	ldr	r2, [pc, #672]	; (a538 <_scanf_float+0x3c4>)
    a298:	400a      	ands	r2, r1
    a29a:	6032      	str	r2, [r6, #0]
    a29c:	2201      	movs	r2, #1
    a29e:	e057      	b.n	a350 <_scanf_float+0x1dc>
    a2a0:	9a03      	ldr	r2, [sp, #12]
    a2a2:	2a02      	cmp	r2, #2
    a2a4:	d053      	beq.n	a34e <_scanf_float+0x1da>
    a2a6:	2c01      	cmp	r4, #1
    a2a8:	d01c      	beq.n	a2e4 <_scanf_float+0x170>
    a2aa:	2c04      	cmp	r4, #4
    a2ac:	d01a      	beq.n	a2e4 <_scanf_float+0x170>
    a2ae:	e06a      	b.n	a386 <_scanf_float+0x212>
    a2b0:	9a03      	ldr	r2, [sp, #12]
    a2b2:	2a01      	cmp	r2, #1
    a2b4:	d167      	bne.n	a386 <_scanf_float+0x212>
    a2b6:	2202      	movs	r2, #2
    a2b8:	e04a      	b.n	a350 <_scanf_float+0x1dc>
    a2ba:	2c00      	cmp	r4, #0
    a2bc:	d10e      	bne.n	a2dc <_scanf_float+0x168>
    a2be:	9a00      	ldr	r2, [sp, #0]
    a2c0:	2a00      	cmp	r2, #0
    a2c2:	d163      	bne.n	a38c <_scanf_float+0x218>
    a2c4:	6831      	ldr	r1, [r6, #0]
    a2c6:	22e0      	movs	r2, #224	; 0xe0
    a2c8:	1c08      	adds	r0, r1, #0
    a2ca:	00d2      	lsls	r2, r2, #3
    a2cc:	4010      	ands	r0, r2
    a2ce:	4290      	cmp	r0, r2
    a2d0:	d160      	bne.n	a394 <_scanf_float+0x220>
    a2d2:	4a99      	ldr	r2, [pc, #612]	; (a538 <_scanf_float+0x3c4>)
    a2d4:	3401      	adds	r4, #1
    a2d6:	400a      	ands	r2, r1
    a2d8:	6032      	str	r2, [r6, #0]
    a2da:	e03a      	b.n	a352 <_scanf_float+0x1de>
    a2dc:	21fd      	movs	r1, #253	; 0xfd
    a2de:	1ee2      	subs	r2, r4, #3
    a2e0:	420a      	tst	r2, r1
    a2e2:	d150      	bne.n	a386 <_scanf_float+0x212>
    a2e4:	3401      	adds	r4, #1
    a2e6:	b2e4      	uxtb	r4, r4
    a2e8:	e033      	b.n	a352 <_scanf_float+0x1de>
    a2ea:	2c02      	cmp	r4, #2
    a2ec:	d14b      	bne.n	a386 <_scanf_float+0x212>
    a2ee:	2403      	movs	r4, #3
    a2f0:	e02f      	b.n	a352 <_scanf_float+0x1de>
    a2f2:	2c06      	cmp	r4, #6
    a2f4:	d147      	bne.n	a386 <_scanf_float+0x212>
    a2f6:	2407      	movs	r4, #7
    a2f8:	e02b      	b.n	a352 <_scanf_float+0x1de>
    a2fa:	2c07      	cmp	r4, #7
    a2fc:	d143      	bne.n	a386 <_scanf_float+0x212>
    a2fe:	2408      	movs	r4, #8
    a300:	e027      	b.n	a352 <_scanf_float+0x1de>
    a302:	6831      	ldr	r1, [r6, #0]
    a304:	058a      	lsls	r2, r1, #22
    a306:	d53e      	bpl.n	a386 <_scanf_float+0x212>
    a308:	4a8c      	ldr	r2, [pc, #560]	; (a53c <_scanf_float+0x3c8>)
    a30a:	400a      	ands	r2, r1
    a30c:	6032      	str	r2, [r6, #0]
    a30e:	9a00      	ldr	r2, [sp, #0]
    a310:	9207      	str	r2, [sp, #28]
    a312:	e01e      	b.n	a352 <_scanf_float+0x1de>
    a314:	22a0      	movs	r2, #160	; 0xa0
    a316:	2080      	movs	r0, #128	; 0x80
    a318:	6831      	ldr	r1, [r6, #0]
    a31a:	00d2      	lsls	r2, r2, #3
    a31c:	400a      	ands	r2, r1
    a31e:	00c0      	lsls	r0, r0, #3
    a320:	4282      	cmp	r2, r0
    a322:	d004      	beq.n	a32e <_scanf_float+0x1ba>
    a324:	4201      	tst	r1, r0
    a326:	d02e      	beq.n	a386 <_scanf_float+0x212>
    a328:	9a00      	ldr	r2, [sp, #0]
    a32a:	2a00      	cmp	r2, #0
    a32c:	d032      	beq.n	a394 <_scanf_float+0x220>
    a32e:	058a      	lsls	r2, r1, #22
    a330:	d404      	bmi.n	a33c <_scanf_float+0x1c8>
    a332:	9a00      	ldr	r2, [sp, #0]
    a334:	9807      	ldr	r0, [sp, #28]
    a336:	9709      	str	r7, [sp, #36]	; 0x24
    a338:	1a12      	subs	r2, r2, r0
    a33a:	9208      	str	r2, [sp, #32]
    a33c:	4a7e      	ldr	r2, [pc, #504]	; (a538 <_scanf_float+0x3c4>)
    a33e:	400a      	ands	r2, r1
    a340:	21c0      	movs	r1, #192	; 0xc0
    a342:	0049      	lsls	r1, r1, #1
    a344:	430a      	orrs	r2, r1
    a346:	6032      	str	r2, [r6, #0]
    a348:	2200      	movs	r2, #0
    a34a:	9200      	str	r2, [sp, #0]
    a34c:	e001      	b.n	a352 <_scanf_float+0x1de>
    a34e:	2203      	movs	r2, #3
    a350:	9203      	str	r2, [sp, #12]
    a352:	703b      	strb	r3, [r7, #0]
    a354:	3701      	adds	r7, #1
    a356:	68b3      	ldr	r3, [r6, #8]
    a358:	3b01      	subs	r3, #1
    a35a:	60b3      	str	r3, [r6, #8]
    a35c:	6933      	ldr	r3, [r6, #16]
    a35e:	3301      	adds	r3, #1
    a360:	6133      	str	r3, [r6, #16]
    a362:	686b      	ldr	r3, [r5, #4]
    a364:	3b01      	subs	r3, #1
    a366:	606b      	str	r3, [r5, #4]
    a368:	2b00      	cmp	r3, #0
    a36a:	dd03      	ble.n	a374 <_scanf_float+0x200>
    a36c:	682b      	ldr	r3, [r5, #0]
    a36e:	3301      	adds	r3, #1
    a370:	602b      	str	r3, [r5, #0]
    a372:	e722      	b.n	a1ba <_scanf_float+0x46>
    a374:	23c0      	movs	r3, #192	; 0xc0
    a376:	005b      	lsls	r3, r3, #1
    a378:	58f3      	ldr	r3, [r6, r3]
    a37a:	9802      	ldr	r0, [sp, #8]
    a37c:	1c29      	adds	r1, r5, #0
    a37e:	4798      	blx	r3
    a380:	2800      	cmp	r0, #0
    a382:	d100      	bne.n	a386 <_scanf_float+0x212>
    a384:	e719      	b.n	a1ba <_scanf_float+0x46>
    a386:	9b00      	ldr	r3, [sp, #0]
    a388:	2b00      	cmp	r3, #0
    a38a:	d003      	beq.n	a394 <_scanf_float+0x220>
    a38c:	6832      	ldr	r2, [r6, #0]
    a38e:	4b6c      	ldr	r3, [pc, #432]	; (a540 <_scanf_float+0x3cc>)
    a390:	4013      	ands	r3, r2
    a392:	6033      	str	r3, [r6, #0]
    a394:	9b03      	ldr	r3, [sp, #12]
    a396:	3b01      	subs	r3, #1
    a398:	2b01      	cmp	r3, #1
    a39a:	d810      	bhi.n	a3be <_scanf_float+0x24a>
    a39c:	9b04      	ldr	r3, [sp, #16]
    a39e:	429f      	cmp	r7, r3
    a3a0:	d90b      	bls.n	a3ba <_scanf_float+0x246>
    a3a2:	23be      	movs	r3, #190	; 0xbe
    a3a4:	3f01      	subs	r7, #1
    a3a6:	005b      	lsls	r3, r3, #1
    a3a8:	58f3      	ldr	r3, [r6, r3]
    a3aa:	7839      	ldrb	r1, [r7, #0]
    a3ac:	9802      	ldr	r0, [sp, #8]
    a3ae:	1c2a      	adds	r2, r5, #0
    a3b0:	4798      	blx	r3
    a3b2:	6933      	ldr	r3, [r6, #16]
    a3b4:	3b01      	subs	r3, #1
    a3b6:	6133      	str	r3, [r6, #16]
    a3b8:	e7f0      	b.n	a39c <_scanf_float+0x228>
    a3ba:	2401      	movs	r4, #1
    a3bc:	e0b7      	b.n	a52e <_scanf_float+0x3ba>
    a3be:	1e63      	subs	r3, r4, #1
    a3c0:	2b06      	cmp	r3, #6
    a3c2:	d82a      	bhi.n	a41a <_scanf_float+0x2a6>
    a3c4:	2c02      	cmp	r4, #2
    a3c6:	d919      	bls.n	a3fc <_scanf_float+0x288>
    a3c8:	9405      	str	r4, [sp, #20]
    a3ca:	9703      	str	r7, [sp, #12]
    a3cc:	9b05      	ldr	r3, [sp, #20]
    a3ce:	3b01      	subs	r3, #1
    a3d0:	b2db      	uxtb	r3, r3
    a3d2:	9305      	str	r3, [sp, #20]
    a3d4:	2b02      	cmp	r3, #2
    a3d6:	d00d      	beq.n	a3f4 <_scanf_float+0x280>
    a3d8:	9b03      	ldr	r3, [sp, #12]
    a3da:	9802      	ldr	r0, [sp, #8]
    a3dc:	3b01      	subs	r3, #1
    a3de:	9303      	str	r3, [sp, #12]
    a3e0:	7819      	ldrb	r1, [r3, #0]
    a3e2:	23be      	movs	r3, #190	; 0xbe
    a3e4:	005b      	lsls	r3, r3, #1
    a3e6:	58f3      	ldr	r3, [r6, r3]
    a3e8:	1c2a      	adds	r2, r5, #0
    a3ea:	4798      	blx	r3
    a3ec:	6933      	ldr	r3, [r6, #16]
    a3ee:	3b01      	subs	r3, #1
    a3f0:	6133      	str	r3, [r6, #16]
    a3f2:	e7eb      	b.n	a3cc <_scanf_float+0x258>
    a3f4:	3c03      	subs	r4, #3
    a3f6:	b2e4      	uxtb	r4, r4
    a3f8:	1b3f      	subs	r7, r7, r4
    a3fa:	e00e      	b.n	a41a <_scanf_float+0x2a6>
    a3fc:	9b04      	ldr	r3, [sp, #16]
    a3fe:	429f      	cmp	r7, r3
    a400:	d9db      	bls.n	a3ba <_scanf_float+0x246>
    a402:	23be      	movs	r3, #190	; 0xbe
    a404:	3f01      	subs	r7, #1
    a406:	005b      	lsls	r3, r3, #1
    a408:	58f3      	ldr	r3, [r6, r3]
    a40a:	7839      	ldrb	r1, [r7, #0]
    a40c:	9802      	ldr	r0, [sp, #8]
    a40e:	1c2a      	adds	r2, r5, #0
    a410:	4798      	blx	r3
    a412:	6933      	ldr	r3, [r6, #16]
    a414:	3b01      	subs	r3, #1
    a416:	6133      	str	r3, [r6, #16]
    a418:	e7f0      	b.n	a3fc <_scanf_float+0x288>
    a41a:	6833      	ldr	r3, [r6, #0]
    a41c:	05da      	lsls	r2, r3, #23
    a41e:	d52b      	bpl.n	a478 <_scanf_float+0x304>
    a420:	055b      	lsls	r3, r3, #21
    a422:	d50e      	bpl.n	a442 <_scanf_float+0x2ce>
    a424:	9b04      	ldr	r3, [sp, #16]
    a426:	429f      	cmp	r7, r3
    a428:	d9c7      	bls.n	a3ba <_scanf_float+0x246>
    a42a:	23be      	movs	r3, #190	; 0xbe
    a42c:	3f01      	subs	r7, #1
    a42e:	005b      	lsls	r3, r3, #1
    a430:	58f3      	ldr	r3, [r6, r3]
    a432:	7839      	ldrb	r1, [r7, #0]
    a434:	9802      	ldr	r0, [sp, #8]
    a436:	1c2a      	adds	r2, r5, #0
    a438:	4798      	blx	r3
    a43a:	6933      	ldr	r3, [r6, #16]
    a43c:	3b01      	subs	r3, #1
    a43e:	6133      	str	r3, [r6, #16]
    a440:	e7f0      	b.n	a424 <_scanf_float+0x2b0>
    a442:	6933      	ldr	r3, [r6, #16]
    a444:	1e7c      	subs	r4, r7, #1
    a446:	7821      	ldrb	r1, [r4, #0]
    a448:	3b01      	subs	r3, #1
    a44a:	6133      	str	r3, [r6, #16]
    a44c:	2965      	cmp	r1, #101	; 0x65
    a44e:	d00c      	beq.n	a46a <_scanf_float+0x2f6>
    a450:	2945      	cmp	r1, #69	; 0x45
    a452:	d00a      	beq.n	a46a <_scanf_float+0x2f6>
    a454:	23be      	movs	r3, #190	; 0xbe
    a456:	005b      	lsls	r3, r3, #1
    a458:	58f3      	ldr	r3, [r6, r3]
    a45a:	9802      	ldr	r0, [sp, #8]
    a45c:	1c2a      	adds	r2, r5, #0
    a45e:	4798      	blx	r3
    a460:	6933      	ldr	r3, [r6, #16]
    a462:	1ebc      	subs	r4, r7, #2
    a464:	3b01      	subs	r3, #1
    a466:	7821      	ldrb	r1, [r4, #0]
    a468:	6133      	str	r3, [r6, #16]
    a46a:	23be      	movs	r3, #190	; 0xbe
    a46c:	005b      	lsls	r3, r3, #1
    a46e:	58f3      	ldr	r3, [r6, r3]
    a470:	9802      	ldr	r0, [sp, #8]
    a472:	1c2a      	adds	r2, r5, #0
    a474:	4798      	blx	r3
    a476:	1c27      	adds	r7, r4, #0
    a478:	2410      	movs	r4, #16
    a47a:	6833      	ldr	r3, [r6, #0]
    a47c:	401c      	ands	r4, r3
    a47e:	d155      	bne.n	a52c <_scanf_float+0x3b8>
    a480:	23c0      	movs	r3, #192	; 0xc0
    a482:	703c      	strb	r4, [r7, #0]
    a484:	6832      	ldr	r2, [r6, #0]
    a486:	00db      	lsls	r3, r3, #3
    a488:	4013      	ands	r3, r2
    a48a:	2280      	movs	r2, #128	; 0x80
    a48c:	00d2      	lsls	r2, r2, #3
    a48e:	4293      	cmp	r3, r2
    a490:	d106      	bne.n	a4a0 <_scanf_float+0x32c>
    a492:	9a07      	ldr	r2, [sp, #28]
    a494:	9b00      	ldr	r3, [sp, #0]
    a496:	1a9b      	subs	r3, r3, r2
    a498:	425a      	negs	r2, r3
    a49a:	2b00      	cmp	r3, #0
    a49c:	d10d      	bne.n	a4ba <_scanf_float+0x346>
    a49e:	e018      	b.n	a4d2 <_scanf_float+0x35e>
    a4a0:	9b08      	ldr	r3, [sp, #32]
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d015      	beq.n	a4d2 <_scanf_float+0x35e>
    a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a4a8:	1c22      	adds	r2, r4, #0
    a4aa:	1c59      	adds	r1, r3, #1
    a4ac:	9802      	ldr	r0, [sp, #8]
    a4ae:	230a      	movs	r3, #10
    a4b0:	f001 fb1e 	bl	baf0 <_strtol_r>
    a4b4:	9b08      	ldr	r3, [sp, #32]
    a4b6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    a4b8:	1ac2      	subs	r2, r0, r3
    a4ba:	1c33      	adds	r3, r6, #0
    a4bc:	3370      	adds	r3, #112	; 0x70
    a4be:	33ff      	adds	r3, #255	; 0xff
    a4c0:	429f      	cmp	r7, r3
    a4c2:	d302      	bcc.n	a4ca <_scanf_float+0x356>
    a4c4:	1c37      	adds	r7, r6, #0
    a4c6:	376f      	adds	r7, #111	; 0x6f
    a4c8:	37ff      	adds	r7, #255	; 0xff
    a4ca:	1c38      	adds	r0, r7, #0
    a4cc:	491d      	ldr	r1, [pc, #116]	; (a544 <_scanf_float+0x3d0>)
    a4ce:	f000 fbf9 	bl	acc4 <siprintf>
    a4d2:	2200      	movs	r2, #0
    a4d4:	9802      	ldr	r0, [sp, #8]
    a4d6:	9904      	ldr	r1, [sp, #16]
    a4d8:	f000 fcf0 	bl	aebc <_strtod_r>
    a4dc:	9b06      	ldr	r3, [sp, #24]
    a4de:	6832      	ldr	r2, [r6, #0]
    a4e0:	9000      	str	r0, [sp, #0]
    a4e2:	9101      	str	r1, [sp, #4]
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	0791      	lsls	r1, r2, #30
    a4e8:	d401      	bmi.n	a4ee <_scanf_float+0x37a>
    a4ea:	0752      	lsls	r2, r2, #29
    a4ec:	d508      	bpl.n	a500 <_scanf_float+0x38c>
    a4ee:	9906      	ldr	r1, [sp, #24]
    a4f0:	1d1a      	adds	r2, r3, #4
    a4f2:	600a      	str	r2, [r1, #0]
    a4f4:	681b      	ldr	r3, [r3, #0]
    a4f6:	9900      	ldr	r1, [sp, #0]
    a4f8:	9a01      	ldr	r2, [sp, #4]
    a4fa:	6019      	str	r1, [r3, #0]
    a4fc:	605a      	str	r2, [r3, #4]
    a4fe:	e011      	b.n	a524 <_scanf_float+0x3b0>
    a500:	9906      	ldr	r1, [sp, #24]
    a502:	1d1a      	adds	r2, r3, #4
    a504:	600a      	str	r2, [r1, #0]
    a506:	9800      	ldr	r0, [sp, #0]
    a508:	9901      	ldr	r1, [sp, #4]
    a50a:	681d      	ldr	r5, [r3, #0]
    a50c:	f000 fa90 	bl	aa30 <__fpclassifyd>
    a510:	2800      	cmp	r0, #0
    a512:	d102      	bne.n	a51a <_scanf_float+0x3a6>
    a514:	f000 fb88 	bl	ac28 <nanf>
    a518:	e003      	b.n	a522 <_scanf_float+0x3ae>
    a51a:	9800      	ldr	r0, [sp, #0]
    a51c:	9901      	ldr	r1, [sp, #4]
    a51e:	f7fe faef 	bl	8b00 <__aeabi_d2f>
    a522:	6028      	str	r0, [r5, #0]
    a524:	68f3      	ldr	r3, [r6, #12]
    a526:	3301      	adds	r3, #1
    a528:	60f3      	str	r3, [r6, #12]
    a52a:	e000      	b.n	a52e <_scanf_float+0x3ba>
    a52c:	2400      	movs	r4, #0
    a52e:	1c20      	adds	r0, r4, #0
    a530:	b00b      	add	sp, #44	; 0x2c
    a532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a534:	fffffe7f 	.word	0xfffffe7f
    a538:	fffff87f 	.word	0xfffff87f
    a53c:	fffffd7f 	.word	0xfffffd7f
    a540:	fffffeff 	.word	0xfffffeff
    a544:	0000f35b 	.word	0x0000f35b

0000a548 <_scanf_chars>:
    a548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a54a:	1c15      	adds	r5, r2, #0
    a54c:	688a      	ldr	r2, [r1, #8]
    a54e:	9001      	str	r0, [sp, #4]
    a550:	1c0c      	adds	r4, r1, #0
    a552:	2a00      	cmp	r2, #0
    a554:	d106      	bne.n	a564 <_scanf_chars+0x1c>
    a556:	698a      	ldr	r2, [r1, #24]
    a558:	1e51      	subs	r1, r2, #1
    a55a:	418a      	sbcs	r2, r1
    a55c:	2101      	movs	r1, #1
    a55e:	4252      	negs	r2, r2
    a560:	430a      	orrs	r2, r1
    a562:	60a2      	str	r2, [r4, #8]
    a564:	6822      	ldr	r2, [r4, #0]
    a566:	06d2      	lsls	r2, r2, #27
    a568:	d403      	bmi.n	a572 <_scanf_chars+0x2a>
    a56a:	681a      	ldr	r2, [r3, #0]
    a56c:	1d11      	adds	r1, r2, #4
    a56e:	6019      	str	r1, [r3, #0]
    a570:	6817      	ldr	r7, [r2, #0]
    a572:	2600      	movs	r6, #0
    a574:	69a0      	ldr	r0, [r4, #24]
    a576:	2800      	cmp	r0, #0
    a578:	d11d      	bne.n	a5b6 <_scanf_chars+0x6e>
    a57a:	6823      	ldr	r3, [r4, #0]
    a57c:	3601      	adds	r6, #1
    a57e:	06db      	lsls	r3, r3, #27
    a580:	d403      	bmi.n	a58a <_scanf_chars+0x42>
    a582:	682b      	ldr	r3, [r5, #0]
    a584:	781b      	ldrb	r3, [r3, #0]
    a586:	703b      	strb	r3, [r7, #0]
    a588:	3701      	adds	r7, #1
    a58a:	682a      	ldr	r2, [r5, #0]
    a58c:	686b      	ldr	r3, [r5, #4]
    a58e:	3201      	adds	r2, #1
    a590:	602a      	str	r2, [r5, #0]
    a592:	68a2      	ldr	r2, [r4, #8]
    a594:	3b01      	subs	r3, #1
    a596:	3a01      	subs	r2, #1
    a598:	606b      	str	r3, [r5, #4]
    a59a:	60a2      	str	r2, [r4, #8]
    a59c:	2a00      	cmp	r2, #0
    a59e:	d01f      	beq.n	a5e0 <_scanf_chars+0x98>
    a5a0:	2b00      	cmp	r3, #0
    a5a2:	dce7      	bgt.n	a574 <_scanf_chars+0x2c>
    a5a4:	23c0      	movs	r3, #192	; 0xc0
    a5a6:	005b      	lsls	r3, r3, #1
    a5a8:	58e3      	ldr	r3, [r4, r3]
    a5aa:	9801      	ldr	r0, [sp, #4]
    a5ac:	1c29      	adds	r1, r5, #0
    a5ae:	4798      	blx	r3
    a5b0:	2800      	cmp	r0, #0
    a5b2:	d0df      	beq.n	a574 <_scanf_chars+0x2c>
    a5b4:	e014      	b.n	a5e0 <_scanf_chars+0x98>
    a5b6:	2801      	cmp	r0, #1
    a5b8:	d108      	bne.n	a5cc <_scanf_chars+0x84>
    a5ba:	682b      	ldr	r3, [r5, #0]
    a5bc:	6962      	ldr	r2, [r4, #20]
    a5be:	781b      	ldrb	r3, [r3, #0]
    a5c0:	5cd3      	ldrb	r3, [r2, r3]
    a5c2:	2b00      	cmp	r3, #0
    a5c4:	d1d9      	bne.n	a57a <_scanf_chars+0x32>
    a5c6:	2e00      	cmp	r6, #0
    a5c8:	d019      	beq.n	a5fe <_scanf_chars+0xb6>
    a5ca:	e009      	b.n	a5e0 <_scanf_chars+0x98>
    a5cc:	2802      	cmp	r0, #2
    a5ce:	d107      	bne.n	a5e0 <_scanf_chars+0x98>
    a5d0:	682b      	ldr	r3, [r5, #0]
    a5d2:	4a0b      	ldr	r2, [pc, #44]	; (a600 <_scanf_chars+0xb8>)
    a5d4:	781b      	ldrb	r3, [r3, #0]
    a5d6:	6812      	ldr	r2, [r2, #0]
    a5d8:	18d3      	adds	r3, r2, r3
    a5da:	785b      	ldrb	r3, [r3, #1]
    a5dc:	071b      	lsls	r3, r3, #28
    a5de:	d5cc      	bpl.n	a57a <_scanf_chars+0x32>
    a5e0:	2310      	movs	r3, #16
    a5e2:	6822      	ldr	r2, [r4, #0]
    a5e4:	4013      	ands	r3, r2
    a5e6:	d106      	bne.n	a5f6 <_scanf_chars+0xae>
    a5e8:	68e2      	ldr	r2, [r4, #12]
    a5ea:	3201      	adds	r2, #1
    a5ec:	60e2      	str	r2, [r4, #12]
    a5ee:	69a2      	ldr	r2, [r4, #24]
    a5f0:	2a00      	cmp	r2, #0
    a5f2:	d000      	beq.n	a5f6 <_scanf_chars+0xae>
    a5f4:	703b      	strb	r3, [r7, #0]
    a5f6:	2000      	movs	r0, #0
    a5f8:	6923      	ldr	r3, [r4, #16]
    a5fa:	199e      	adds	r6, r3, r6
    a5fc:	6126      	str	r6, [r4, #16]
    a5fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a600:	20000138 	.word	0x20000138

0000a604 <_scanf_i>:
    a604:	b5f0      	push	{r4, r5, r6, r7, lr}
    a606:	1c0c      	adds	r4, r1, #0
    a608:	b08b      	sub	sp, #44	; 0x2c
    a60a:	9301      	str	r3, [sp, #4]
    a60c:	4b74      	ldr	r3, [pc, #464]	; (a7e0 <_scanf_i+0x1dc>)
    a60e:	9004      	str	r0, [sp, #16]
    a610:	1c16      	adds	r6, r2, #0
    a612:	aa07      	add	r2, sp, #28
    a614:	cb23      	ldmia	r3!, {r0, r1, r5}
    a616:	c223      	stmia	r2!, {r0, r1, r5}
    a618:	4b72      	ldr	r3, [pc, #456]	; (a7e4 <_scanf_i+0x1e0>)
    a61a:	9305      	str	r3, [sp, #20]
    a61c:	69a3      	ldr	r3, [r4, #24]
    a61e:	2b03      	cmp	r3, #3
    a620:	d001      	beq.n	a626 <_scanf_i+0x22>
    a622:	4b71      	ldr	r3, [pc, #452]	; (a7e8 <_scanf_i+0x1e4>)
    a624:	9305      	str	r3, [sp, #20]
    a626:	2200      	movs	r2, #0
    a628:	68a3      	ldr	r3, [r4, #8]
    a62a:	9203      	str	r2, [sp, #12]
    a62c:	325d      	adds	r2, #93	; 0x5d
    a62e:	1e59      	subs	r1, r3, #1
    a630:	32ff      	adds	r2, #255	; 0xff
    a632:	4291      	cmp	r1, r2
    a634:	d905      	bls.n	a642 <_scanf_i+0x3e>
    a636:	3b5e      	subs	r3, #94	; 0x5e
    a638:	3bff      	subs	r3, #255	; 0xff
    a63a:	9303      	str	r3, [sp, #12]
    a63c:	235e      	movs	r3, #94	; 0x5e
    a63e:	33ff      	adds	r3, #255	; 0xff
    a640:	60a3      	str	r3, [r4, #8]
    a642:	1c23      	adds	r3, r4, #0
    a644:	331c      	adds	r3, #28
    a646:	9300      	str	r3, [sp, #0]
    a648:	23d0      	movs	r3, #208	; 0xd0
    a64a:	2700      	movs	r7, #0
    a64c:	6822      	ldr	r2, [r4, #0]
    a64e:	011b      	lsls	r3, r3, #4
    a650:	4313      	orrs	r3, r2
    a652:	6023      	str	r3, [r4, #0]
    a654:	9b00      	ldr	r3, [sp, #0]
    a656:	9302      	str	r3, [sp, #8]
    a658:	6832      	ldr	r2, [r6, #0]
    a65a:	00bb      	lsls	r3, r7, #2
    a65c:	7811      	ldrb	r1, [r2, #0]
    a65e:	aa07      	add	r2, sp, #28
    a660:	5898      	ldr	r0, [r3, r2]
    a662:	2202      	movs	r2, #2
    a664:	f7fe ff2c 	bl	94c0 <memchr>
    a668:	2800      	cmp	r0, #0
    a66a:	d039      	beq.n	a6e0 <_scanf_i+0xdc>
    a66c:	2f01      	cmp	r7, #1
    a66e:	d10d      	bne.n	a68c <_scanf_i+0x88>
    a670:	6863      	ldr	r3, [r4, #4]
    a672:	2b00      	cmp	r3, #0
    a674:	d106      	bne.n	a684 <_scanf_i+0x80>
    a676:	3308      	adds	r3, #8
    a678:	6822      	ldr	r2, [r4, #0]
    a67a:	6063      	str	r3, [r4, #4]
    a67c:	33f9      	adds	r3, #249	; 0xf9
    a67e:	33ff      	adds	r3, #255	; 0xff
    a680:	4313      	orrs	r3, r2
    a682:	6023      	str	r3, [r4, #0]
    a684:	4b59      	ldr	r3, [pc, #356]	; (a7ec <_scanf_i+0x1e8>)
    a686:	6822      	ldr	r2, [r4, #0]
    a688:	4013      	ands	r3, r2
    a68a:	e00d      	b.n	a6a8 <_scanf_i+0xa4>
    a68c:	2f02      	cmp	r7, #2
    a68e:	d10c      	bne.n	a6aa <_scanf_i+0xa6>
    a690:	22c0      	movs	r2, #192	; 0xc0
    a692:	2180      	movs	r1, #128	; 0x80
    a694:	6823      	ldr	r3, [r4, #0]
    a696:	00d2      	lsls	r2, r2, #3
    a698:	401a      	ands	r2, r3
    a69a:	0089      	lsls	r1, r1, #2
    a69c:	428a      	cmp	r2, r1
    a69e:	d122      	bne.n	a6e6 <_scanf_i+0xe2>
    a6a0:	2210      	movs	r2, #16
    a6a2:	6062      	str	r2, [r4, #4]
    a6a4:	32f0      	adds	r2, #240	; 0xf0
    a6a6:	4313      	orrs	r3, r2
    a6a8:	6023      	str	r3, [r4, #0]
    a6aa:	68a3      	ldr	r3, [r4, #8]
    a6ac:	1e5a      	subs	r2, r3, #1
    a6ae:	60a2      	str	r2, [r4, #8]
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d015      	beq.n	a6e0 <_scanf_i+0xdc>
    a6b4:	9b02      	ldr	r3, [sp, #8]
    a6b6:	1c5d      	adds	r5, r3, #1
    a6b8:	6833      	ldr	r3, [r6, #0]
    a6ba:	1c5a      	adds	r2, r3, #1
    a6bc:	6032      	str	r2, [r6, #0]
    a6be:	781b      	ldrb	r3, [r3, #0]
    a6c0:	9a02      	ldr	r2, [sp, #8]
    a6c2:	9502      	str	r5, [sp, #8]
    a6c4:	7013      	strb	r3, [r2, #0]
    a6c6:	6873      	ldr	r3, [r6, #4]
    a6c8:	3b01      	subs	r3, #1
    a6ca:	6073      	str	r3, [r6, #4]
    a6cc:	2b00      	cmp	r3, #0
    a6ce:	dc07      	bgt.n	a6e0 <_scanf_i+0xdc>
    a6d0:	23c0      	movs	r3, #192	; 0xc0
    a6d2:	005b      	lsls	r3, r3, #1
    a6d4:	58e3      	ldr	r3, [r4, r3]
    a6d6:	9804      	ldr	r0, [sp, #16]
    a6d8:	1c31      	adds	r1, r6, #0
    a6da:	4798      	blx	r3
    a6dc:	2800      	cmp	r0, #0
    a6de:	d144      	bne.n	a76a <_scanf_i+0x166>
    a6e0:	3701      	adds	r7, #1
    a6e2:	2f03      	cmp	r7, #3
    a6e4:	d1b8      	bne.n	a658 <_scanf_i+0x54>
    a6e6:	6863      	ldr	r3, [r4, #4]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d101      	bne.n	a6f0 <_scanf_i+0xec>
    a6ec:	330a      	adds	r3, #10
    a6ee:	6063      	str	r3, [r4, #4]
    a6f0:	2110      	movs	r1, #16
    a6f2:	2700      	movs	r7, #0
    a6f4:	6863      	ldr	r3, [r4, #4]
    a6f6:	6960      	ldr	r0, [r4, #20]
    a6f8:	1ac9      	subs	r1, r1, r3
    a6fa:	4b3d      	ldr	r3, [pc, #244]	; (a7f0 <_scanf_i+0x1ec>)
    a6fc:	18c9      	adds	r1, r1, r3
    a6fe:	f000 f9d1 	bl	aaa4 <__sccl>
    a702:	9d02      	ldr	r5, [sp, #8]
    a704:	68a3      	ldr	r3, [r4, #8]
    a706:	2b00      	cmp	r3, #0
    a708:	d030      	beq.n	a76c <_scanf_i+0x168>
    a70a:	6832      	ldr	r2, [r6, #0]
    a70c:	6960      	ldr	r0, [r4, #20]
    a70e:	7811      	ldrb	r1, [r2, #0]
    a710:	5c40      	ldrb	r0, [r0, r1]
    a712:	2800      	cmp	r0, #0
    a714:	d02a      	beq.n	a76c <_scanf_i+0x168>
    a716:	2930      	cmp	r1, #48	; 0x30
    a718:	d10b      	bne.n	a732 <_scanf_i+0x12e>
    a71a:	6821      	ldr	r1, [r4, #0]
    a71c:	0509      	lsls	r1, r1, #20
    a71e:	d508      	bpl.n	a732 <_scanf_i+0x12e>
    a720:	9a03      	ldr	r2, [sp, #12]
    a722:	3701      	adds	r7, #1
    a724:	2a00      	cmp	r2, #0
    a726:	d00b      	beq.n	a740 <_scanf_i+0x13c>
    a728:	3a01      	subs	r2, #1
    a72a:	3301      	adds	r3, #1
    a72c:	9203      	str	r2, [sp, #12]
    a72e:	60a3      	str	r3, [r4, #8]
    a730:	e006      	b.n	a740 <_scanf_i+0x13c>
    a732:	6821      	ldr	r1, [r4, #0]
    a734:	4b2f      	ldr	r3, [pc, #188]	; (a7f4 <_scanf_i+0x1f0>)
    a736:	400b      	ands	r3, r1
    a738:	6023      	str	r3, [r4, #0]
    a73a:	7813      	ldrb	r3, [r2, #0]
    a73c:	702b      	strb	r3, [r5, #0]
    a73e:	3501      	adds	r5, #1
    a740:	6873      	ldr	r3, [r6, #4]
    a742:	3b01      	subs	r3, #1
    a744:	6073      	str	r3, [r6, #4]
    a746:	2b00      	cmp	r3, #0
    a748:	dd03      	ble.n	a752 <_scanf_i+0x14e>
    a74a:	6833      	ldr	r3, [r6, #0]
    a74c:	3301      	adds	r3, #1
    a74e:	6033      	str	r3, [r6, #0]
    a750:	e007      	b.n	a762 <_scanf_i+0x15e>
    a752:	23c0      	movs	r3, #192	; 0xc0
    a754:	005b      	lsls	r3, r3, #1
    a756:	58e3      	ldr	r3, [r4, r3]
    a758:	9804      	ldr	r0, [sp, #16]
    a75a:	1c31      	adds	r1, r6, #0
    a75c:	4798      	blx	r3
    a75e:	2800      	cmp	r0, #0
    a760:	d104      	bne.n	a76c <_scanf_i+0x168>
    a762:	68a3      	ldr	r3, [r4, #8]
    a764:	3b01      	subs	r3, #1
    a766:	60a3      	str	r3, [r4, #8]
    a768:	e7cc      	b.n	a704 <_scanf_i+0x100>
    a76a:	2700      	movs	r7, #0
    a76c:	6823      	ldr	r3, [r4, #0]
    a76e:	05db      	lsls	r3, r3, #23
    a770:	d50e      	bpl.n	a790 <_scanf_i+0x18c>
    a772:	9b00      	ldr	r3, [sp, #0]
    a774:	429d      	cmp	r5, r3
    a776:	d907      	bls.n	a788 <_scanf_i+0x184>
    a778:	23be      	movs	r3, #190	; 0xbe
    a77a:	3d01      	subs	r5, #1
    a77c:	005b      	lsls	r3, r3, #1
    a77e:	7829      	ldrb	r1, [r5, #0]
    a780:	58e3      	ldr	r3, [r4, r3]
    a782:	9804      	ldr	r0, [sp, #16]
    a784:	1c32      	adds	r2, r6, #0
    a786:	4798      	blx	r3
    a788:	9b00      	ldr	r3, [sp, #0]
    a78a:	2001      	movs	r0, #1
    a78c:	429d      	cmp	r5, r3
    a78e:	d025      	beq.n	a7dc <_scanf_i+0x1d8>
    a790:	2210      	movs	r2, #16
    a792:	6823      	ldr	r3, [r4, #0]
    a794:	401a      	ands	r2, r3
    a796:	d11a      	bne.n	a7ce <_scanf_i+0x1ca>
    a798:	702a      	strb	r2, [r5, #0]
    a79a:	6863      	ldr	r3, [r4, #4]
    a79c:	9804      	ldr	r0, [sp, #16]
    a79e:	9900      	ldr	r1, [sp, #0]
    a7a0:	9e05      	ldr	r6, [sp, #20]
    a7a2:	47b0      	blx	r6
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	6822      	ldr	r2, [r4, #0]
    a7a8:	681b      	ldr	r3, [r3, #0]
    a7aa:	0691      	lsls	r1, r2, #26
    a7ac:	d407      	bmi.n	a7be <_scanf_i+0x1ba>
    a7ae:	07d1      	lsls	r1, r2, #31
    a7b0:	d505      	bpl.n	a7be <_scanf_i+0x1ba>
    a7b2:	9901      	ldr	r1, [sp, #4]
    a7b4:	1d1a      	adds	r2, r3, #4
    a7b6:	600a      	str	r2, [r1, #0]
    a7b8:	681b      	ldr	r3, [r3, #0]
    a7ba:	8018      	strh	r0, [r3, #0]
    a7bc:	e004      	b.n	a7c8 <_scanf_i+0x1c4>
    a7be:	9901      	ldr	r1, [sp, #4]
    a7c0:	1d1a      	adds	r2, r3, #4
    a7c2:	600a      	str	r2, [r1, #0]
    a7c4:	681b      	ldr	r3, [r3, #0]
    a7c6:	6018      	str	r0, [r3, #0]
    a7c8:	68e3      	ldr	r3, [r4, #12]
    a7ca:	3301      	adds	r3, #1
    a7cc:	60e3      	str	r3, [r4, #12]
    a7ce:	2000      	movs	r0, #0
    a7d0:	9b00      	ldr	r3, [sp, #0]
    a7d2:	1aed      	subs	r5, r5, r3
    a7d4:	6923      	ldr	r3, [r4, #16]
    a7d6:	19ed      	adds	r5, r5, r7
    a7d8:	195d      	adds	r5, r3, r5
    a7da:	6125      	str	r5, [r4, #16]
    a7dc:	b00b      	add	sp, #44	; 0x2c
    a7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7e0:	0000f360 	.word	0x0000f360
    a7e4:	0000baf1 	.word	0x0000baf1
    a7e8:	0000bc11 	.word	0x0000bc11
    a7ec:	fffffaff 	.word	0xfffffaff
    a7f0:	0000f36c 	.word	0x0000f36c
    a7f4:	fffff6ff 	.word	0xfffff6ff

0000a7f8 <_open_r>:
    a7f8:	b538      	push	{r3, r4, r5, lr}
    a7fa:	1c05      	adds	r5, r0, #0
    a7fc:	2000      	movs	r0, #0
    a7fe:	4c07      	ldr	r4, [pc, #28]	; (a81c <_open_r+0x24>)
    a800:	6020      	str	r0, [r4, #0]
    a802:	1c08      	adds	r0, r1, #0
    a804:	1c11      	adds	r1, r2, #0
    a806:	1c1a      	adds	r2, r3, #0
    a808:	f7f9 fac0 	bl	3d8c <_open>
    a80c:	1c43      	adds	r3, r0, #1
    a80e:	d103      	bne.n	a818 <_open_r+0x20>
    a810:	6823      	ldr	r3, [r4, #0]
    a812:	2b00      	cmp	r3, #0
    a814:	d000      	beq.n	a818 <_open_r+0x20>
    a816:	602b      	str	r3, [r5, #0]
    a818:	bd38      	pop	{r3, r4, r5, pc}
    a81a:	46c0      	nop			; (mov r8, r8)
    a81c:	2000445c 	.word	0x2000445c

0000a820 <_putc_r>:
    a820:	b570      	push	{r4, r5, r6, lr}
    a822:	1c05      	adds	r5, r0, #0
    a824:	1c0e      	adds	r6, r1, #0
    a826:	1c14      	adds	r4, r2, #0
    a828:	2800      	cmp	r0, #0
    a82a:	d004      	beq.n	a836 <_putc_r+0x16>
    a82c:	6983      	ldr	r3, [r0, #24]
    a82e:	2b00      	cmp	r3, #0
    a830:	d101      	bne.n	a836 <_putc_r+0x16>
    a832:	f7fe fbeb 	bl	900c <__sinit>
    a836:	4b15      	ldr	r3, [pc, #84]	; (a88c <_putc_r+0x6c>)
    a838:	429c      	cmp	r4, r3
    a83a:	d101      	bne.n	a840 <_putc_r+0x20>
    a83c:	686c      	ldr	r4, [r5, #4]
    a83e:	e008      	b.n	a852 <_putc_r+0x32>
    a840:	4b13      	ldr	r3, [pc, #76]	; (a890 <_putc_r+0x70>)
    a842:	429c      	cmp	r4, r3
    a844:	d101      	bne.n	a84a <_putc_r+0x2a>
    a846:	68ac      	ldr	r4, [r5, #8]
    a848:	e003      	b.n	a852 <_putc_r+0x32>
    a84a:	4b12      	ldr	r3, [pc, #72]	; (a894 <_putc_r+0x74>)
    a84c:	429c      	cmp	r4, r3
    a84e:	d100      	bne.n	a852 <_putc_r+0x32>
    a850:	68ec      	ldr	r4, [r5, #12]
    a852:	68a3      	ldr	r3, [r4, #8]
    a854:	3b01      	subs	r3, #1
    a856:	60a3      	str	r3, [r4, #8]
    a858:	2b00      	cmp	r3, #0
    a85a:	da10      	bge.n	a87e <_putc_r+0x5e>
    a85c:	69a2      	ldr	r2, [r4, #24]
    a85e:	4293      	cmp	r3, r2
    a860:	db07      	blt.n	a872 <_putc_r+0x52>
    a862:	6823      	ldr	r3, [r4, #0]
    a864:	701e      	strb	r6, [r3, #0]
    a866:	6823      	ldr	r3, [r4, #0]
    a868:	7819      	ldrb	r1, [r3, #0]
    a86a:	290a      	cmp	r1, #10
    a86c:	d10a      	bne.n	a884 <_putc_r+0x64>
    a86e:	1c28      	adds	r0, r5, #0
    a870:	e001      	b.n	a876 <_putc_r+0x56>
    a872:	1c28      	adds	r0, r5, #0
    a874:	1c31      	adds	r1, r6, #0
    a876:	1c22      	adds	r2, r4, #0
    a878:	f001 fa8a 	bl	bd90 <__swbuf_r>
    a87c:	e005      	b.n	a88a <_putc_r+0x6a>
    a87e:	6823      	ldr	r3, [r4, #0]
    a880:	701e      	strb	r6, [r3, #0]
    a882:	6823      	ldr	r3, [r4, #0]
    a884:	1c5a      	adds	r2, r3, #1
    a886:	6022      	str	r2, [r4, #0]
    a888:	7818      	ldrb	r0, [r3, #0]
    a88a:	bd70      	pop	{r4, r5, r6, pc}
    a88c:	0000f2b0 	.word	0x0000f2b0
    a890:	0000f2d0 	.word	0x0000f2d0
    a894:	0000f2f0 	.word	0x0000f2f0

0000a898 <lflush>:
    a898:	2209      	movs	r2, #9
    a89a:	b508      	push	{r3, lr}
    a89c:	8981      	ldrh	r1, [r0, #12]
    a89e:	1c03      	adds	r3, r0, #0
    a8a0:	400a      	ands	r2, r1
    a8a2:	2000      	movs	r0, #0
    a8a4:	2a09      	cmp	r2, #9
    a8a6:	d102      	bne.n	a8ae <lflush+0x16>
    a8a8:	1c18      	adds	r0, r3, #0
    a8aa:	f7fe fb21 	bl	8ef0 <fflush>
    a8ae:	bd08      	pop	{r3, pc}

0000a8b0 <__srefill_r>:
    a8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8b2:	1c05      	adds	r5, r0, #0
    a8b4:	1c0c      	adds	r4, r1, #0
    a8b6:	2800      	cmp	r0, #0
    a8b8:	d004      	beq.n	a8c4 <__srefill_r+0x14>
    a8ba:	6983      	ldr	r3, [r0, #24]
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d101      	bne.n	a8c4 <__srefill_r+0x14>
    a8c0:	f7fe fba4 	bl	900c <__sinit>
    a8c4:	4b3d      	ldr	r3, [pc, #244]	; (a9bc <__srefill_r+0x10c>)
    a8c6:	429c      	cmp	r4, r3
    a8c8:	d101      	bne.n	a8ce <__srefill_r+0x1e>
    a8ca:	686c      	ldr	r4, [r5, #4]
    a8cc:	e008      	b.n	a8e0 <__srefill_r+0x30>
    a8ce:	4b3c      	ldr	r3, [pc, #240]	; (a9c0 <__srefill_r+0x110>)
    a8d0:	429c      	cmp	r4, r3
    a8d2:	d101      	bne.n	a8d8 <__srefill_r+0x28>
    a8d4:	68ac      	ldr	r4, [r5, #8]
    a8d6:	e003      	b.n	a8e0 <__srefill_r+0x30>
    a8d8:	4b3a      	ldr	r3, [pc, #232]	; (a9c4 <__srefill_r+0x114>)
    a8da:	429c      	cmp	r4, r3
    a8dc:	d100      	bne.n	a8e0 <__srefill_r+0x30>
    a8de:	68ec      	ldr	r4, [r5, #12]
    a8e0:	2300      	movs	r3, #0
    a8e2:	89a2      	ldrh	r2, [r4, #12]
    a8e4:	6063      	str	r3, [r4, #4]
    a8e6:	b293      	uxth	r3, r2
    a8e8:	0699      	lsls	r1, r3, #26
    a8ea:	d463      	bmi.n	a9b4 <__srefill_r+0x104>
    a8ec:	0759      	lsls	r1, r3, #29
    a8ee:	d41a      	bmi.n	a926 <__srefill_r+0x76>
    a8f0:	06d9      	lsls	r1, r3, #27
    a8f2:	d405      	bmi.n	a900 <__srefill_r+0x50>
    a8f4:	2309      	movs	r3, #9
    a8f6:	602b      	str	r3, [r5, #0]
    a8f8:	3337      	adds	r3, #55	; 0x37
    a8fa:	431a      	orrs	r2, r3
    a8fc:	81a2      	strh	r2, [r4, #12]
    a8fe:	e059      	b.n	a9b4 <__srefill_r+0x104>
    a900:	2608      	movs	r6, #8
    a902:	4233      	tst	r3, r6
    a904:	d00a      	beq.n	a91c <__srefill_r+0x6c>
    a906:	1c28      	adds	r0, r5, #0
    a908:	1c21      	adds	r1, r4, #0
    a90a:	f7fe fac5 	bl	8e98 <_fflush_r>
    a90e:	2800      	cmp	r0, #0
    a910:	d150      	bne.n	a9b4 <__srefill_r+0x104>
    a912:	89a3      	ldrh	r3, [r4, #12]
    a914:	60a0      	str	r0, [r4, #8]
    a916:	43b3      	bics	r3, r6
    a918:	81a3      	strh	r3, [r4, #12]
    a91a:	61a0      	str	r0, [r4, #24]
    a91c:	2204      	movs	r2, #4
    a91e:	89a3      	ldrh	r3, [r4, #12]
    a920:	4313      	orrs	r3, r2
    a922:	81a3      	strh	r3, [r4, #12]
    a924:	e012      	b.n	a94c <__srefill_r+0x9c>
    a926:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a928:	2900      	cmp	r1, #0
    a92a:	d00f      	beq.n	a94c <__srefill_r+0x9c>
    a92c:	1c23      	adds	r3, r4, #0
    a92e:	3344      	adds	r3, #68	; 0x44
    a930:	4299      	cmp	r1, r3
    a932:	d002      	beq.n	a93a <__srefill_r+0x8a>
    a934:	1c28      	adds	r0, r5, #0
    a936:	f7fe fddf 	bl	94f8 <_free_r>
    a93a:	2000      	movs	r0, #0
    a93c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a93e:	6360      	str	r0, [r4, #52]	; 0x34
    a940:	6063      	str	r3, [r4, #4]
    a942:	4283      	cmp	r3, r0
    a944:	d002      	beq.n	a94c <__srefill_r+0x9c>
    a946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    a948:	6023      	str	r3, [r4, #0]
    a94a:	e035      	b.n	a9b8 <__srefill_r+0x108>
    a94c:	6923      	ldr	r3, [r4, #16]
    a94e:	2b00      	cmp	r3, #0
    a950:	d103      	bne.n	a95a <__srefill_r+0xaa>
    a952:	1c28      	adds	r0, r5, #0
    a954:	1c21      	adds	r1, r4, #0
    a956:	f7fe fd47 	bl	93e8 <__smakebuf_r>
    a95a:	89a7      	ldrh	r7, [r4, #12]
    a95c:	b2be      	uxth	r6, r7
    a95e:	07b3      	lsls	r3, r6, #30
    a960:	d00f      	beq.n	a982 <__srefill_r+0xd2>
    a962:	2301      	movs	r3, #1
    a964:	81a3      	strh	r3, [r4, #12]
    a966:	4b18      	ldr	r3, [pc, #96]	; (a9c8 <__srefill_r+0x118>)
    a968:	4918      	ldr	r1, [pc, #96]	; (a9cc <__srefill_r+0x11c>)
    a96a:	6818      	ldr	r0, [r3, #0]
    a96c:	f7fe fcd8 	bl	9320 <_fwalk>
    a970:	2309      	movs	r3, #9
    a972:	81a7      	strh	r7, [r4, #12]
    a974:	4033      	ands	r3, r6
    a976:	2b09      	cmp	r3, #9
    a978:	d103      	bne.n	a982 <__srefill_r+0xd2>
    a97a:	1c28      	adds	r0, r5, #0
    a97c:	1c21      	adds	r1, r4, #0
    a97e:	f7fe fa01 	bl	8d84 <__sflush_r>
    a982:	6923      	ldr	r3, [r4, #16]
    a984:	1c28      	adds	r0, r5, #0
    a986:	1c1a      	adds	r2, r3, #0
    a988:	6023      	str	r3, [r4, #0]
    a98a:	6a21      	ldr	r1, [r4, #32]
    a98c:	6963      	ldr	r3, [r4, #20]
    a98e:	6a65      	ldr	r5, [r4, #36]	; 0x24
    a990:	47a8      	blx	r5
    a992:	1c02      	adds	r2, r0, #0
    a994:	6060      	str	r0, [r4, #4]
    a996:	2000      	movs	r0, #0
    a998:	4282      	cmp	r2, r0
    a99a:	dc0d      	bgt.n	a9b8 <__srefill_r+0x108>
    a99c:	89a3      	ldrh	r3, [r4, #12]
    a99e:	4282      	cmp	r2, r0
    a9a0:	d104      	bne.n	a9ac <__srefill_r+0xfc>
    a9a2:	2220      	movs	r2, #32
    a9a4:	4313      	orrs	r3, r2
    a9a6:	81a3      	strh	r3, [r4, #12]
    a9a8:	3801      	subs	r0, #1
    a9aa:	e005      	b.n	a9b8 <__srefill_r+0x108>
    a9ac:	2240      	movs	r2, #64	; 0x40
    a9ae:	4313      	orrs	r3, r2
    a9b0:	6060      	str	r0, [r4, #4]
    a9b2:	81a3      	strh	r3, [r4, #12]
    a9b4:	2001      	movs	r0, #1
    a9b6:	4240      	negs	r0, r0
    a9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9ba:	46c0      	nop			; (mov r8, r8)
    a9bc:	0000f2b0 	.word	0x0000f2b0
    a9c0:	0000f2d0 	.word	0x0000f2d0
    a9c4:	0000f2f0 	.word	0x0000f2f0
    a9c8:	0000f314 	.word	0x0000f314
    a9cc:	0000a899 	.word	0x0000a899

0000a9d0 <__srget_r>:
    a9d0:	b538      	push	{r3, r4, r5, lr}
    a9d2:	1c05      	adds	r5, r0, #0
    a9d4:	1c0c      	adds	r4, r1, #0
    a9d6:	2800      	cmp	r0, #0
    a9d8:	d004      	beq.n	a9e4 <__srget_r+0x14>
    a9da:	6983      	ldr	r3, [r0, #24]
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d101      	bne.n	a9e4 <__srget_r+0x14>
    a9e0:	f7fe fb14 	bl	900c <__sinit>
    a9e4:	4b0f      	ldr	r3, [pc, #60]	; (aa24 <__srget_r+0x54>)
    a9e6:	429c      	cmp	r4, r3
    a9e8:	d101      	bne.n	a9ee <__srget_r+0x1e>
    a9ea:	686c      	ldr	r4, [r5, #4]
    a9ec:	e008      	b.n	aa00 <__srget_r+0x30>
    a9ee:	4b0e      	ldr	r3, [pc, #56]	; (aa28 <__srget_r+0x58>)
    a9f0:	429c      	cmp	r4, r3
    a9f2:	d101      	bne.n	a9f8 <__srget_r+0x28>
    a9f4:	68ac      	ldr	r4, [r5, #8]
    a9f6:	e003      	b.n	aa00 <__srget_r+0x30>
    a9f8:	4b0c      	ldr	r3, [pc, #48]	; (aa2c <__srget_r+0x5c>)
    a9fa:	429c      	cmp	r4, r3
    a9fc:	d100      	bne.n	aa00 <__srget_r+0x30>
    a9fe:	68ec      	ldr	r4, [r5, #12]
    aa00:	1c28      	adds	r0, r5, #0
    aa02:	1c21      	adds	r1, r4, #0
    aa04:	f7ff ff54 	bl	a8b0 <__srefill_r>
    aa08:	2800      	cmp	r0, #0
    aa0a:	d107      	bne.n	aa1c <__srget_r+0x4c>
    aa0c:	6863      	ldr	r3, [r4, #4]
    aa0e:	3b01      	subs	r3, #1
    aa10:	6063      	str	r3, [r4, #4]
    aa12:	6823      	ldr	r3, [r4, #0]
    aa14:	1c5a      	adds	r2, r3, #1
    aa16:	6022      	str	r2, [r4, #0]
    aa18:	7818      	ldrb	r0, [r3, #0]
    aa1a:	e001      	b.n	aa20 <__srget_r+0x50>
    aa1c:	2001      	movs	r0, #1
    aa1e:	4240      	negs	r0, r0
    aa20:	bd38      	pop	{r3, r4, r5, pc}
    aa22:	46c0      	nop			; (mov r8, r8)
    aa24:	0000f2b0 	.word	0x0000f2b0
    aa28:	0000f2d0 	.word	0x0000f2d0
    aa2c:	0000f2f0 	.word	0x0000f2f0

0000aa30 <__fpclassifyd>:
    aa30:	b530      	push	{r4, r5, lr}
    aa32:	1c0c      	adds	r4, r1, #0
    aa34:	2302      	movs	r3, #2
    aa36:	4304      	orrs	r4, r0
    aa38:	d017      	beq.n	aa6a <__fpclassifyd+0x3a>
    aa3a:	2480      	movs	r4, #128	; 0x80
    aa3c:	0624      	lsls	r4, r4, #24
    aa3e:	42a1      	cmp	r1, r4
    aa40:	d101      	bne.n	aa46 <__fpclassifyd+0x16>
    aa42:	2800      	cmp	r0, #0
    aa44:	d011      	beq.n	aa6a <__fpclassifyd+0x3a>
    aa46:	4b0a      	ldr	r3, [pc, #40]	; (aa70 <__fpclassifyd+0x40>)
    aa48:	0049      	lsls	r1, r1, #1
    aa4a:	0849      	lsrs	r1, r1, #1
    aa4c:	4a09      	ldr	r2, [pc, #36]	; (aa74 <__fpclassifyd+0x44>)
    aa4e:	18cc      	adds	r4, r1, r3
    aa50:	2304      	movs	r3, #4
    aa52:	4294      	cmp	r4, r2
    aa54:	d909      	bls.n	aa6a <__fpclassifyd+0x3a>
    aa56:	4a08      	ldr	r2, [pc, #32]	; (aa78 <__fpclassifyd+0x48>)
    aa58:	3b01      	subs	r3, #1
    aa5a:	4291      	cmp	r1, r2
    aa5c:	d905      	bls.n	aa6a <__fpclassifyd+0x3a>
    aa5e:	4a07      	ldr	r2, [pc, #28]	; (aa7c <__fpclassifyd+0x4c>)
    aa60:	2300      	movs	r3, #0
    aa62:	4291      	cmp	r1, r2
    aa64:	d101      	bne.n	aa6a <__fpclassifyd+0x3a>
    aa66:	4243      	negs	r3, r0
    aa68:	4143      	adcs	r3, r0
    aa6a:	1c18      	adds	r0, r3, #0
    aa6c:	bd30      	pop	{r4, r5, pc}
    aa6e:	46c0      	nop			; (mov r8, r8)
    aa70:	fff00000 	.word	0xfff00000
    aa74:	7fdfffff 	.word	0x7fdfffff
    aa78:	000fffff 	.word	0x000fffff
    aa7c:	7ff00000 	.word	0x7ff00000

0000aa80 <_sbrk_r>:
    aa80:	b538      	push	{r3, r4, r5, lr}
    aa82:	2300      	movs	r3, #0
    aa84:	4c06      	ldr	r4, [pc, #24]	; (aaa0 <_sbrk_r+0x20>)
    aa86:	1c05      	adds	r5, r0, #0
    aa88:	1c08      	adds	r0, r1, #0
    aa8a:	6023      	str	r3, [r4, #0]
    aa8c:	f7f9 faa6 	bl	3fdc <_sbrk>
    aa90:	1c43      	adds	r3, r0, #1
    aa92:	d103      	bne.n	aa9c <_sbrk_r+0x1c>
    aa94:	6823      	ldr	r3, [r4, #0]
    aa96:	2b00      	cmp	r3, #0
    aa98:	d000      	beq.n	aa9c <_sbrk_r+0x1c>
    aa9a:	602b      	str	r3, [r5, #0]
    aa9c:	bd38      	pop	{r3, r4, r5, pc}
    aa9e:	46c0      	nop			; (mov r8, r8)
    aaa0:	2000445c 	.word	0x2000445c

0000aaa4 <__sccl>:
    aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaa6:	780a      	ldrb	r2, [r1, #0]
    aaa8:	2a5e      	cmp	r2, #94	; 0x5e
    aaaa:	d002      	beq.n	aab2 <__sccl+0xe>
    aaac:	1c4b      	adds	r3, r1, #1
    aaae:	2400      	movs	r4, #0
    aab0:	e002      	b.n	aab8 <__sccl+0x14>
    aab2:	2401      	movs	r4, #1
    aab4:	784a      	ldrb	r2, [r1, #1]
    aab6:	1c8b      	adds	r3, r1, #2
    aab8:	1c01      	adds	r1, r0, #0
    aaba:	1c45      	adds	r5, r0, #1
    aabc:	35ff      	adds	r5, #255	; 0xff
    aabe:	700c      	strb	r4, [r1, #0]
    aac0:	3101      	adds	r1, #1
    aac2:	42a9      	cmp	r1, r5
    aac4:	d1fb      	bne.n	aabe <__sccl+0x1a>
    aac6:	2a00      	cmp	r2, #0
    aac8:	d101      	bne.n	aace <__sccl+0x2a>
    aaca:	1e58      	subs	r0, r3, #1
    aacc:	e01c      	b.n	ab08 <__sccl+0x64>
    aace:	2101      	movs	r1, #1
    aad0:	1b0c      	subs	r4, r1, r4
    aad2:	b2e7      	uxtb	r7, r4
    aad4:	5487      	strb	r7, [r0, r2]
    aad6:	7819      	ldrb	r1, [r3, #0]
    aad8:	1c5e      	adds	r6, r3, #1
    aada:	292d      	cmp	r1, #45	; 0x2d
    aadc:	d006      	beq.n	aaec <__sccl+0x48>
    aade:	295d      	cmp	r1, #93	; 0x5d
    aae0:	d00f      	beq.n	ab02 <__sccl+0x5e>
    aae2:	2900      	cmp	r1, #0
    aae4:	d00f      	beq.n	ab06 <__sccl+0x62>
    aae6:	1c0a      	adds	r2, r1, #0
    aae8:	1c33      	adds	r3, r6, #0
    aaea:	e7f2      	b.n	aad2 <__sccl+0x2e>
    aaec:	785d      	ldrb	r5, [r3, #1]
    aaee:	2d5d      	cmp	r5, #93	; 0x5d
    aaf0:	d0f9      	beq.n	aae6 <__sccl+0x42>
    aaf2:	4295      	cmp	r5, r2
    aaf4:	dbf7      	blt.n	aae6 <__sccl+0x42>
    aaf6:	3302      	adds	r3, #2
    aaf8:	3201      	adds	r2, #1
    aafa:	5487      	strb	r7, [r0, r2]
    aafc:	42aa      	cmp	r2, r5
    aafe:	dbfb      	blt.n	aaf8 <__sccl+0x54>
    ab00:	e7e9      	b.n	aad6 <__sccl+0x32>
    ab02:	1c30      	adds	r0, r6, #0
    ab04:	e000      	b.n	ab08 <__sccl+0x64>
    ab06:	1c18      	adds	r0, r3, #0
    ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ab0a <setbuf>:
    ab0a:	b508      	push	{r3, lr}
    ab0c:	424a      	negs	r2, r1
    ab0e:	414a      	adcs	r2, r1
    ab10:	2380      	movs	r3, #128	; 0x80
    ab12:	0052      	lsls	r2, r2, #1
    ab14:	00db      	lsls	r3, r3, #3
    ab16:	f000 f801 	bl	ab1c <setvbuf>
    ab1a:	bd08      	pop	{r3, pc}

0000ab1c <setvbuf>:
    ab1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ab1e:	1c1e      	adds	r6, r3, #0
    ab20:	4b3c      	ldr	r3, [pc, #240]	; (ac14 <setvbuf+0xf8>)
    ab22:	1c04      	adds	r4, r0, #0
    ab24:	681d      	ldr	r5, [r3, #0]
    ab26:	1c0f      	adds	r7, r1, #0
    ab28:	9201      	str	r2, [sp, #4]
    ab2a:	2d00      	cmp	r5, #0
    ab2c:	d005      	beq.n	ab3a <setvbuf+0x1e>
    ab2e:	69ab      	ldr	r3, [r5, #24]
    ab30:	2b00      	cmp	r3, #0
    ab32:	d102      	bne.n	ab3a <setvbuf+0x1e>
    ab34:	1c28      	adds	r0, r5, #0
    ab36:	f7fe fa69 	bl	900c <__sinit>
    ab3a:	4b37      	ldr	r3, [pc, #220]	; (ac18 <setvbuf+0xfc>)
    ab3c:	429c      	cmp	r4, r3
    ab3e:	d101      	bne.n	ab44 <setvbuf+0x28>
    ab40:	686c      	ldr	r4, [r5, #4]
    ab42:	e008      	b.n	ab56 <setvbuf+0x3a>
    ab44:	4b35      	ldr	r3, [pc, #212]	; (ac1c <setvbuf+0x100>)
    ab46:	429c      	cmp	r4, r3
    ab48:	d101      	bne.n	ab4e <setvbuf+0x32>
    ab4a:	68ac      	ldr	r4, [r5, #8]
    ab4c:	e003      	b.n	ab56 <setvbuf+0x3a>
    ab4e:	4b34      	ldr	r3, [pc, #208]	; (ac20 <setvbuf+0x104>)
    ab50:	429c      	cmp	r4, r3
    ab52:	d100      	bne.n	ab56 <setvbuf+0x3a>
    ab54:	68ec      	ldr	r4, [r5, #12]
    ab56:	9b01      	ldr	r3, [sp, #4]
    ab58:	2b02      	cmp	r3, #2
    ab5a:	d858      	bhi.n	ac0e <setvbuf+0xf2>
    ab5c:	2e00      	cmp	r6, #0
    ab5e:	db56      	blt.n	ac0e <setvbuf+0xf2>
    ab60:	1c28      	adds	r0, r5, #0
    ab62:	1c21      	adds	r1, r4, #0
    ab64:	f7fe f998 	bl	8e98 <_fflush_r>
    ab68:	2300      	movs	r3, #0
    ab6a:	6063      	str	r3, [r4, #4]
    ab6c:	61a3      	str	r3, [r4, #24]
    ab6e:	89a3      	ldrh	r3, [r4, #12]
    ab70:	061b      	lsls	r3, r3, #24
    ab72:	d503      	bpl.n	ab7c <setvbuf+0x60>
    ab74:	1c28      	adds	r0, r5, #0
    ab76:	6921      	ldr	r1, [r4, #16]
    ab78:	f7fe fcbe 	bl	94f8 <_free_r>
    ab7c:	2283      	movs	r2, #131	; 0x83
    ab7e:	89a3      	ldrh	r3, [r4, #12]
    ab80:	4393      	bics	r3, r2
    ab82:	81a3      	strh	r3, [r4, #12]
    ab84:	9b01      	ldr	r3, [sp, #4]
    ab86:	2b02      	cmp	r3, #2
    ab88:	d013      	beq.n	abb2 <setvbuf+0x96>
    ab8a:	2f00      	cmp	r7, #0
    ab8c:	d125      	bne.n	abda <setvbuf+0xbe>
    ab8e:	2e00      	cmp	r6, #0
    ab90:	d101      	bne.n	ab96 <setvbuf+0x7a>
    ab92:	2680      	movs	r6, #128	; 0x80
    ab94:	00f6      	lsls	r6, r6, #3
    ab96:	1c30      	adds	r0, r6, #0
    ab98:	f7fe fc7e 	bl	9498 <malloc>
    ab9c:	1e07      	subs	r7, r0, #0
    ab9e:	d118      	bne.n	abd2 <setvbuf+0xb6>
    aba0:	2080      	movs	r0, #128	; 0x80
    aba2:	00c0      	lsls	r0, r0, #3
    aba4:	f7fe fc78 	bl	9498 <malloc>
    aba8:	1e07      	subs	r7, r0, #0
    abaa:	d110      	bne.n	abce <setvbuf+0xb2>
    abac:	2001      	movs	r0, #1
    abae:	4240      	negs	r0, r0
    abb0:	e000      	b.n	abb4 <setvbuf+0x98>
    abb2:	2000      	movs	r0, #0
    abb4:	2202      	movs	r2, #2
    abb6:	89a3      	ldrh	r3, [r4, #12]
    abb8:	4313      	orrs	r3, r2
    abba:	81a3      	strh	r3, [r4, #12]
    abbc:	2300      	movs	r3, #0
    abbe:	60a3      	str	r3, [r4, #8]
    abc0:	1c23      	adds	r3, r4, #0
    abc2:	3347      	adds	r3, #71	; 0x47
    abc4:	6023      	str	r3, [r4, #0]
    abc6:	6123      	str	r3, [r4, #16]
    abc8:	2301      	movs	r3, #1
    abca:	6163      	str	r3, [r4, #20]
    abcc:	e021      	b.n	ac12 <setvbuf+0xf6>
    abce:	2680      	movs	r6, #128	; 0x80
    abd0:	00f6      	lsls	r6, r6, #3
    abd2:	2280      	movs	r2, #128	; 0x80
    abd4:	89a3      	ldrh	r3, [r4, #12]
    abd6:	4313      	orrs	r3, r2
    abd8:	81a3      	strh	r3, [r4, #12]
    abda:	9b01      	ldr	r3, [sp, #4]
    abdc:	2b01      	cmp	r3, #1
    abde:	d105      	bne.n	abec <setvbuf+0xd0>
    abe0:	89a3      	ldrh	r3, [r4, #12]
    abe2:	9a01      	ldr	r2, [sp, #4]
    abe4:	431a      	orrs	r2, r3
    abe6:	4273      	negs	r3, r6
    abe8:	81a2      	strh	r2, [r4, #12]
    abea:	61a3      	str	r3, [r4, #24]
    abec:	4b0d      	ldr	r3, [pc, #52]	; (ac24 <setvbuf+0x108>)
    abee:	2000      	movs	r0, #0
    abf0:	62ab      	str	r3, [r5, #40]	; 0x28
    abf2:	89a2      	ldrh	r2, [r4, #12]
    abf4:	6027      	str	r7, [r4, #0]
    abf6:	6127      	str	r7, [r4, #16]
    abf8:	6166      	str	r6, [r4, #20]
    abfa:	0713      	lsls	r3, r2, #28
    abfc:	d509      	bpl.n	ac12 <setvbuf+0xf6>
    abfe:	2303      	movs	r3, #3
    ac00:	401a      	ands	r2, r3
    ac02:	4253      	negs	r3, r2
    ac04:	4153      	adcs	r3, r2
    ac06:	425b      	negs	r3, r3
    ac08:	401e      	ands	r6, r3
    ac0a:	60a6      	str	r6, [r4, #8]
    ac0c:	e001      	b.n	ac12 <setvbuf+0xf6>
    ac0e:	2001      	movs	r0, #1
    ac10:	4240      	negs	r0, r0
    ac12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ac14:	20000134 	.word	0x20000134
    ac18:	0000f2b0 	.word	0x0000f2b0
    ac1c:	0000f2d0 	.word	0x0000f2d0
    ac20:	0000f2f0 	.word	0x0000f2f0
    ac24:	00008f89 	.word	0x00008f89

0000ac28 <nanf>:
    ac28:	4800      	ldr	r0, [pc, #0]	; (ac2c <nanf+0x4>)
    ac2a:	4770      	bx	lr
    ac2c:	7fc00000 	.word	0x7fc00000

0000ac30 <_raise_r>:
    ac30:	b538      	push	{r3, r4, r5, lr}
    ac32:	291f      	cmp	r1, #31
    ac34:	d904      	bls.n	ac40 <_raise_r+0x10>
    ac36:	2316      	movs	r3, #22
    ac38:	6003      	str	r3, [r0, #0]
    ac3a:	2001      	movs	r0, #1
    ac3c:	4240      	negs	r0, r0
    ac3e:	e020      	b.n	ac82 <_raise_r+0x52>
    ac40:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ac42:	1c0d      	adds	r5, r1, #0
    ac44:	1c04      	adds	r4, r0, #0
    ac46:	2a00      	cmp	r2, #0
    ac48:	d004      	beq.n	ac54 <_raise_r+0x24>
    ac4a:	008b      	lsls	r3, r1, #2
    ac4c:	18d2      	adds	r2, r2, r3
    ac4e:	6813      	ldr	r3, [r2, #0]
    ac50:	2b00      	cmp	r3, #0
    ac52:	d108      	bne.n	ac66 <_raise_r+0x36>
    ac54:	1c20      	adds	r0, r4, #0
    ac56:	f000 f831 	bl	acbc <_getpid_r>
    ac5a:	1c2a      	adds	r2, r5, #0
    ac5c:	1c01      	adds	r1, r0, #0
    ac5e:	1c20      	adds	r0, r4, #0
    ac60:	f000 f81a 	bl	ac98 <_kill_r>
    ac64:	e00d      	b.n	ac82 <_raise_r+0x52>
    ac66:	2000      	movs	r0, #0
    ac68:	2b01      	cmp	r3, #1
    ac6a:	d00a      	beq.n	ac82 <_raise_r+0x52>
    ac6c:	1c59      	adds	r1, r3, #1
    ac6e:	d103      	bne.n	ac78 <_raise_r+0x48>
    ac70:	3317      	adds	r3, #23
    ac72:	6023      	str	r3, [r4, #0]
    ac74:	3001      	adds	r0, #1
    ac76:	e004      	b.n	ac82 <_raise_r+0x52>
    ac78:	2400      	movs	r4, #0
    ac7a:	1c28      	adds	r0, r5, #0
    ac7c:	6014      	str	r4, [r2, #0]
    ac7e:	4798      	blx	r3
    ac80:	1c20      	adds	r0, r4, #0
    ac82:	bd38      	pop	{r3, r4, r5, pc}

0000ac84 <raise>:
    ac84:	b508      	push	{r3, lr}
    ac86:	4b03      	ldr	r3, [pc, #12]	; (ac94 <raise+0x10>)
    ac88:	1c01      	adds	r1, r0, #0
    ac8a:	6818      	ldr	r0, [r3, #0]
    ac8c:	f7ff ffd0 	bl	ac30 <_raise_r>
    ac90:	bd08      	pop	{r3, pc}
    ac92:	46c0      	nop			; (mov r8, r8)
    ac94:	20000134 	.word	0x20000134

0000ac98 <_kill_r>:
    ac98:	b538      	push	{r3, r4, r5, lr}
    ac9a:	2300      	movs	r3, #0
    ac9c:	4c06      	ldr	r4, [pc, #24]	; (acb8 <_kill_r+0x20>)
    ac9e:	1c05      	adds	r5, r0, #0
    aca0:	1c08      	adds	r0, r1, #0
    aca2:	1c11      	adds	r1, r2, #0
    aca4:	6023      	str	r3, [r4, #0]
    aca6:	f003 fb17 	bl	e2d8 <_kill>
    acaa:	1c43      	adds	r3, r0, #1
    acac:	d103      	bne.n	acb6 <_kill_r+0x1e>
    acae:	6823      	ldr	r3, [r4, #0]
    acb0:	2b00      	cmp	r3, #0
    acb2:	d000      	beq.n	acb6 <_kill_r+0x1e>
    acb4:	602b      	str	r3, [r5, #0]
    acb6:	bd38      	pop	{r3, r4, r5, pc}
    acb8:	2000445c 	.word	0x2000445c

0000acbc <_getpid_r>:
    acbc:	b508      	push	{r3, lr}
    acbe:	f003 fb03 	bl	e2c8 <_getpid>
    acc2:	bd08      	pop	{r3, pc}

0000acc4 <siprintf>:
    acc4:	b40e      	push	{r1, r2, r3}
    acc6:	b510      	push	{r4, lr}
    acc8:	b09d      	sub	sp, #116	; 0x74
    acca:	a902      	add	r1, sp, #8
    accc:	9002      	str	r0, [sp, #8]
    acce:	6108      	str	r0, [r1, #16]
    acd0:	480b      	ldr	r0, [pc, #44]	; (ad00 <siprintf+0x3c>)
    acd2:	2482      	movs	r4, #130	; 0x82
    acd4:	6088      	str	r0, [r1, #8]
    acd6:	6148      	str	r0, [r1, #20]
    acd8:	2001      	movs	r0, #1
    acda:	4240      	negs	r0, r0
    acdc:	ab1f      	add	r3, sp, #124	; 0x7c
    acde:	81c8      	strh	r0, [r1, #14]
    ace0:	4808      	ldr	r0, [pc, #32]	; (ad04 <siprintf+0x40>)
    ace2:	cb04      	ldmia	r3!, {r2}
    ace4:	00a4      	lsls	r4, r4, #2
    ace6:	6800      	ldr	r0, [r0, #0]
    ace8:	9301      	str	r3, [sp, #4]
    acea:	818c      	strh	r4, [r1, #12]
    acec:	f003 f802 	bl	dcf4 <_svfiprintf_r>
    acf0:	2300      	movs	r3, #0
    acf2:	9a02      	ldr	r2, [sp, #8]
    acf4:	7013      	strb	r3, [r2, #0]
    acf6:	b01d      	add	sp, #116	; 0x74
    acf8:	bc10      	pop	{r4}
    acfa:	bc08      	pop	{r3}
    acfc:	b003      	add	sp, #12
    acfe:	4718      	bx	r3
    ad00:	7fffffff 	.word	0x7fffffff
    ad04:	20000134 	.word	0x20000134

0000ad08 <siscanf>:
    ad08:	b40e      	push	{r1, r2, r3}
    ad0a:	2381      	movs	r3, #129	; 0x81
    ad0c:	b570      	push	{r4, r5, r6, lr}
    ad0e:	b09d      	sub	sp, #116	; 0x74
    ad10:	ac02      	add	r4, sp, #8
    ad12:	ad21      	add	r5, sp, #132	; 0x84
    ad14:	009b      	lsls	r3, r3, #2
    ad16:	cd40      	ldmia	r5!, {r6}
    ad18:	81a3      	strh	r3, [r4, #12]
    ad1a:	9002      	str	r0, [sp, #8]
    ad1c:	9006      	str	r0, [sp, #24]
    ad1e:	f000 f873 	bl	ae08 <strlen>
    ad22:	4b0b      	ldr	r3, [pc, #44]	; (ad50 <siscanf+0x48>)
    ad24:	6060      	str	r0, [r4, #4]
    ad26:	6263      	str	r3, [r4, #36]	; 0x24
    ad28:	2300      	movs	r3, #0
    ad2a:	6363      	str	r3, [r4, #52]	; 0x34
    ad2c:	64a3      	str	r3, [r4, #72]	; 0x48
    ad2e:	3b01      	subs	r3, #1
    ad30:	81e3      	strh	r3, [r4, #14]
    ad32:	4b08      	ldr	r3, [pc, #32]	; (ad54 <siscanf+0x4c>)
    ad34:	6160      	str	r0, [r4, #20]
    ad36:	1c21      	adds	r1, r4, #0
    ad38:	6818      	ldr	r0, [r3, #0]
    ad3a:	1c32      	adds	r2, r6, #0
    ad3c:	1c2b      	adds	r3, r5, #0
    ad3e:	9501      	str	r5, [sp, #4]
    ad40:	f003 f92a 	bl	df98 <__ssvfiscanf_r>
    ad44:	b01d      	add	sp, #116	; 0x74
    ad46:	bc70      	pop	{r4, r5, r6}
    ad48:	bc08      	pop	{r3}
    ad4a:	b003      	add	sp, #12
    ad4c:	4718      	bx	r3
    ad4e:	46c0      	nop			; (mov r8, r8)
    ad50:	0000ad81 	.word	0x0000ad81
    ad54:	20000134 	.word	0x20000134

0000ad58 <__sread>:
    ad58:	b538      	push	{r3, r4, r5, lr}
    ad5a:	1c0c      	adds	r4, r1, #0
    ad5c:	250e      	movs	r5, #14
    ad5e:	5f49      	ldrsh	r1, [r1, r5]
    ad60:	f003 fa92 	bl	e288 <_read_r>
    ad64:	2800      	cmp	r0, #0
    ad66:	db03      	blt.n	ad70 <__sread+0x18>
    ad68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ad6a:	181b      	adds	r3, r3, r0
    ad6c:	6563      	str	r3, [r4, #84]	; 0x54
    ad6e:	e003      	b.n	ad78 <__sread+0x20>
    ad70:	89a2      	ldrh	r2, [r4, #12]
    ad72:	4b02      	ldr	r3, [pc, #8]	; (ad7c <__sread+0x24>)
    ad74:	4013      	ands	r3, r2
    ad76:	81a3      	strh	r3, [r4, #12]
    ad78:	bd38      	pop	{r3, r4, r5, pc}
    ad7a:	46c0      	nop			; (mov r8, r8)
    ad7c:	ffffefff 	.word	0xffffefff

0000ad80 <__seofread>:
    ad80:	2000      	movs	r0, #0
    ad82:	4770      	bx	lr

0000ad84 <__swrite>:
    ad84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad86:	1c1e      	adds	r6, r3, #0
    ad88:	898b      	ldrh	r3, [r1, #12]
    ad8a:	1c05      	adds	r5, r0, #0
    ad8c:	1c0c      	adds	r4, r1, #0
    ad8e:	1c17      	adds	r7, r2, #0
    ad90:	05db      	lsls	r3, r3, #23
    ad92:	d505      	bpl.n	ada0 <__swrite+0x1c>
    ad94:	230e      	movs	r3, #14
    ad96:	5ec9      	ldrsh	r1, [r1, r3]
    ad98:	2200      	movs	r2, #0
    ad9a:	2302      	movs	r3, #2
    ad9c:	f002 faea 	bl	d374 <_lseek_r>
    ada0:	89a2      	ldrh	r2, [r4, #12]
    ada2:	4b05      	ldr	r3, [pc, #20]	; (adb8 <__swrite+0x34>)
    ada4:	1c28      	adds	r0, r5, #0
    ada6:	4013      	ands	r3, r2
    ada8:	81a3      	strh	r3, [r4, #12]
    adaa:	1c3a      	adds	r2, r7, #0
    adac:	230e      	movs	r3, #14
    adae:	5ee1      	ldrsh	r1, [r4, r3]
    adb0:	1c33      	adds	r3, r6, #0
    adb2:	f001 f845 	bl	be40 <_write_r>
    adb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adb8:	ffffefff 	.word	0xffffefff

0000adbc <__sseek>:
    adbc:	b538      	push	{r3, r4, r5, lr}
    adbe:	1c0c      	adds	r4, r1, #0
    adc0:	250e      	movs	r5, #14
    adc2:	5f49      	ldrsh	r1, [r1, r5]
    adc4:	f002 fad6 	bl	d374 <_lseek_r>
    adc8:	89a3      	ldrh	r3, [r4, #12]
    adca:	1c42      	adds	r2, r0, #1
    adcc:	d103      	bne.n	add6 <__sseek+0x1a>
    adce:	4a05      	ldr	r2, [pc, #20]	; (ade4 <__sseek+0x28>)
    add0:	4013      	ands	r3, r2
    add2:	81a3      	strh	r3, [r4, #12]
    add4:	e004      	b.n	ade0 <__sseek+0x24>
    add6:	2280      	movs	r2, #128	; 0x80
    add8:	0152      	lsls	r2, r2, #5
    adda:	4313      	orrs	r3, r2
    addc:	81a3      	strh	r3, [r4, #12]
    adde:	6560      	str	r0, [r4, #84]	; 0x54
    ade0:	bd38      	pop	{r3, r4, r5, pc}
    ade2:	46c0      	nop			; (mov r8, r8)
    ade4:	ffffefff 	.word	0xffffefff

0000ade8 <__sclose>:
    ade8:	b508      	push	{r3, lr}
    adea:	230e      	movs	r3, #14
    adec:	5ec9      	ldrsh	r1, [r1, r3]
    adee:	f001 f8af 	bl	bf50 <_close_r>
    adf2:	bd08      	pop	{r3, pc}

0000adf4 <strcmp>:
    adf4:	7802      	ldrb	r2, [r0, #0]
    adf6:	780b      	ldrb	r3, [r1, #0]
    adf8:	2a00      	cmp	r2, #0
    adfa:	d003      	beq.n	ae04 <strcmp+0x10>
    adfc:	3001      	adds	r0, #1
    adfe:	3101      	adds	r1, #1
    ae00:	429a      	cmp	r2, r3
    ae02:	d0f7      	beq.n	adf4 <strcmp>
    ae04:	1ad0      	subs	r0, r2, r3
    ae06:	4770      	bx	lr

0000ae08 <strlen>:
    ae08:	2300      	movs	r3, #0
    ae0a:	5cc2      	ldrb	r2, [r0, r3]
    ae0c:	3301      	adds	r3, #1
    ae0e:	2a00      	cmp	r2, #0
    ae10:	d1fb      	bne.n	ae0a <strlen+0x2>
    ae12:	1e58      	subs	r0, r3, #1
    ae14:	4770      	bx	lr

0000ae16 <strncmp>:
    ae16:	2300      	movs	r3, #0
    ae18:	b530      	push	{r4, r5, lr}
    ae1a:	429a      	cmp	r2, r3
    ae1c:	d00d      	beq.n	ae3a <strncmp+0x24>
    ae1e:	3a01      	subs	r2, #1
    ae20:	5cc4      	ldrb	r4, [r0, r3]
    ae22:	5ccd      	ldrb	r5, [r1, r3]
    ae24:	42ac      	cmp	r4, r5
    ae26:	d102      	bne.n	ae2e <strncmp+0x18>
    ae28:	4293      	cmp	r3, r2
    ae2a:	d102      	bne.n	ae32 <strncmp+0x1c>
    ae2c:	1c25      	adds	r5, r4, #0
    ae2e:	1b63      	subs	r3, r4, r5
    ae30:	e003      	b.n	ae3a <strncmp+0x24>
    ae32:	3301      	adds	r3, #1
    ae34:	2c00      	cmp	r4, #0
    ae36:	d1f3      	bne.n	ae20 <strncmp+0xa>
    ae38:	e7f8      	b.n	ae2c <strncmp+0x16>
    ae3a:	1c18      	adds	r0, r3, #0
    ae3c:	bd30      	pop	{r4, r5, pc}

0000ae3e <strncpy>:
    ae3e:	1c03      	adds	r3, r0, #0
    ae40:	b530      	push	{r4, r5, lr}
    ae42:	2a00      	cmp	r2, #0
    ae44:	d007      	beq.n	ae56 <strncpy+0x18>
    ae46:	780c      	ldrb	r4, [r1, #0]
    ae48:	3301      	adds	r3, #1
    ae4a:	1e5d      	subs	r5, r3, #1
    ae4c:	3a01      	subs	r2, #1
    ae4e:	702c      	strb	r4, [r5, #0]
    ae50:	3101      	adds	r1, #1
    ae52:	2c00      	cmp	r4, #0
    ae54:	d1f5      	bne.n	ae42 <strncpy+0x4>
    ae56:	189a      	adds	r2, r3, r2
    ae58:	4293      	cmp	r3, r2
    ae5a:	d003      	beq.n	ae64 <strncpy+0x26>
    ae5c:	2100      	movs	r1, #0
    ae5e:	7019      	strb	r1, [r3, #0]
    ae60:	3301      	adds	r3, #1
    ae62:	e7f9      	b.n	ae58 <strncpy+0x1a>
    ae64:	bd30      	pop	{r4, r5, pc}

0000ae66 <match>:
    ae66:	b530      	push	{r4, r5, lr}
    ae68:	6803      	ldr	r3, [r0, #0]
    ae6a:	780c      	ldrb	r4, [r1, #0]
    ae6c:	3301      	adds	r3, #1
    ae6e:	2c00      	cmp	r4, #0
    ae70:	d00a      	beq.n	ae88 <match+0x22>
    ae72:	781a      	ldrb	r2, [r3, #0]
    ae74:	1c15      	adds	r5, r2, #0
    ae76:	3d41      	subs	r5, #65	; 0x41
    ae78:	2d19      	cmp	r5, #25
    ae7a:	d800      	bhi.n	ae7e <match+0x18>
    ae7c:	3220      	adds	r2, #32
    ae7e:	3101      	adds	r1, #1
    ae80:	42a2      	cmp	r2, r4
    ae82:	d0f2      	beq.n	ae6a <match+0x4>
    ae84:	2000      	movs	r0, #0
    ae86:	e001      	b.n	ae8c <match+0x26>
    ae88:	6003      	str	r3, [r0, #0]
    ae8a:	2001      	movs	r0, #1
    ae8c:	bd30      	pop	{r4, r5, pc}
	...

0000ae90 <sulp>:
    ae90:	b570      	push	{r4, r5, r6, lr}
    ae92:	1c16      	adds	r6, r2, #0
    ae94:	1c0d      	adds	r5, r1, #0
    ae96:	f002 fd6d 	bl	d974 <__ulp>
    ae9a:	2e00      	cmp	r6, #0
    ae9c:	d00b      	beq.n	aeb6 <sulp+0x26>
    ae9e:	226b      	movs	r2, #107	; 0x6b
    aea0:	006b      	lsls	r3, r5, #1
    aea2:	0d5b      	lsrs	r3, r3, #21
    aea4:	1ad3      	subs	r3, r2, r3
    aea6:	2b00      	cmp	r3, #0
    aea8:	dd05      	ble.n	aeb6 <sulp+0x26>
    aeaa:	4d03      	ldr	r5, [pc, #12]	; (aeb8 <sulp+0x28>)
    aeac:	051c      	lsls	r4, r3, #20
    aeae:	2200      	movs	r2, #0
    aeb0:	1963      	adds	r3, r4, r5
    aeb2:	f7fc ff6d 	bl	7d90 <__aeabi_dmul>
    aeb6:	bd70      	pop	{r4, r5, r6, pc}
    aeb8:	3ff00000 	.word	0x3ff00000

0000aebc <_strtod_r>:
    aebc:	2300      	movs	r3, #0
    aebe:	b5f0      	push	{r4, r5, r6, r7, lr}
    aec0:	b0a3      	sub	sp, #140	; 0x8c
    aec2:	931e      	str	r3, [sp, #120]	; 0x78
    aec4:	2600      	movs	r6, #0
    aec6:	2700      	movs	r7, #0
    aec8:	1c0b      	adds	r3, r1, #0
    aeca:	9003      	str	r0, [sp, #12]
    aecc:	9106      	str	r1, [sp, #24]
    aece:	9219      	str	r2, [sp, #100]	; 0x64
    aed0:	931d      	str	r3, [sp, #116]	; 0x74
    aed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    aed4:	781a      	ldrb	r2, [r3, #0]
    aed6:	2a0d      	cmp	r2, #13
    aed8:	d805      	bhi.n	aee6 <_strtod_r+0x2a>
    aeda:	2a09      	cmp	r2, #9
    aedc:	d214      	bcs.n	af08 <_strtod_r+0x4c>
    aede:	2a00      	cmp	r2, #0
    aee0:	d100      	bne.n	aee4 <_strtod_r+0x28>
    aee2:	e1c3      	b.n	b26c <_strtod_r+0x3b0>
    aee4:	e012      	b.n	af0c <_strtod_r+0x50>
    aee6:	2a2b      	cmp	r2, #43	; 0x2b
    aee8:	d006      	beq.n	aef8 <_strtod_r+0x3c>
    aeea:	2a2d      	cmp	r2, #45	; 0x2d
    aeec:	d002      	beq.n	aef4 <_strtod_r+0x38>
    aeee:	2a20      	cmp	r2, #32
    aef0:	d10c      	bne.n	af0c <_strtod_r+0x50>
    aef2:	e009      	b.n	af08 <_strtod_r+0x4c>
    aef4:	2201      	movs	r2, #1
    aef6:	e000      	b.n	aefa <_strtod_r+0x3e>
    aef8:	2200      	movs	r2, #0
    aefa:	920d      	str	r2, [sp, #52]	; 0x34
    aefc:	1c5a      	adds	r2, r3, #1
    aefe:	921d      	str	r2, [sp, #116]	; 0x74
    af00:	785b      	ldrb	r3, [r3, #1]
    af02:	2b00      	cmp	r3, #0
    af04:	d104      	bne.n	af10 <_strtod_r+0x54>
    af06:	e1b1      	b.n	b26c <_strtod_r+0x3b0>
    af08:	3301      	adds	r3, #1
    af0a:	e7e1      	b.n	aed0 <_strtod_r+0x14>
    af0c:	2300      	movs	r3, #0
    af0e:	930d      	str	r3, [sp, #52]	; 0x34
    af10:	2200      	movs	r2, #0
    af12:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    af14:	920a      	str	r2, [sp, #40]	; 0x28
    af16:	782b      	ldrb	r3, [r5, #0]
    af18:	2b30      	cmp	r3, #48	; 0x30
    af1a:	d15d      	bne.n	afd8 <_strtod_r+0x11c>
    af1c:	786b      	ldrb	r3, [r5, #1]
    af1e:	2b58      	cmp	r3, #88	; 0x58
    af20:	d001      	beq.n	af26 <_strtod_r+0x6a>
    af22:	2b78      	cmp	r3, #120	; 0x78
    af24:	d14c      	bne.n	afc0 <_strtod_r+0x104>
    af26:	ab1e      	add	r3, sp, #120	; 0x78
    af28:	9300      	str	r3, [sp, #0]
    af2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af2c:	9803      	ldr	r0, [sp, #12]
    af2e:	9301      	str	r3, [sp, #4]
    af30:	a91d      	add	r1, sp, #116	; 0x74
    af32:	4ac2      	ldr	r2, [pc, #776]	; (b23c <_strtod_r+0x380>)
    af34:	ab1f      	add	r3, sp, #124	; 0x7c
    af36:	f001 ff38 	bl	cdaa <__gethex>
    af3a:	2407      	movs	r4, #7
    af3c:	9004      	str	r0, [sp, #16]
    af3e:	4004      	ands	r4, r0
    af40:	d101      	bne.n	af46 <_strtod_r+0x8a>
    af42:	f000 fda7 	bl	ba94 <_strtod_r+0xbd8>
    af46:	2c06      	cmp	r4, #6
    af48:	d105      	bne.n	af56 <_strtod_r+0x9a>
    af4a:	2300      	movs	r3, #0
    af4c:	3501      	adds	r5, #1
    af4e:	951d      	str	r5, [sp, #116]	; 0x74
    af50:	930d      	str	r3, [sp, #52]	; 0x34
    af52:	f000 fd9f 	bl	ba94 <_strtod_r+0xbd8>
    af56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    af58:	2a00      	cmp	r2, #0
    af5a:	d007      	beq.n	af6c <_strtod_r+0xb0>
    af5c:	a820      	add	r0, sp, #128	; 0x80
    af5e:	2135      	movs	r1, #53	; 0x35
    af60:	f002 fdfc 	bl	db5c <__copybits>
    af64:	9803      	ldr	r0, [sp, #12]
    af66:	991e      	ldr	r1, [sp, #120]	; 0x78
    af68:	f002 fa64 	bl	d434 <_Bfree>
    af6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    af6e:	2c06      	cmp	r4, #6
    af70:	d81c      	bhi.n	afac <_strtod_r+0xf0>
    af72:	1c20      	adds	r0, r4, #0
    af74:	f003 f9b8 	bl	e2e8 <__gnu_thumb1_case_uqi>
    af78:	14070a04 	.word	0x14070a04
    af7c:	0a17      	.short	0x0a17
    af7e:	04          	.byte	0x04
    af7f:	00          	.byte	0x00
    af80:	2700      	movs	r7, #0
    af82:	1c3e      	adds	r6, r7, #0
    af84:	e012      	b.n	afac <_strtod_r+0xf0>
    af86:	9e20      	ldr	r6, [sp, #128]	; 0x80
    af88:	9f21      	ldr	r7, [sp, #132]	; 0x84
    af8a:	e00f      	b.n	afac <_strtod_r+0xf0>
    af8c:	4aac      	ldr	r2, [pc, #688]	; (b240 <_strtod_r+0x384>)
    af8e:	9921      	ldr	r1, [sp, #132]	; 0x84
    af90:	189b      	adds	r3, r3, r2
    af92:	4aac      	ldr	r2, [pc, #688]	; (b244 <_strtod_r+0x388>)
    af94:	051b      	lsls	r3, r3, #20
    af96:	400a      	ands	r2, r1
    af98:	4313      	orrs	r3, r2
    af9a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    af9c:	1c1f      	adds	r7, r3, #0
    af9e:	e005      	b.n	afac <_strtod_r+0xf0>
    afa0:	4fa9      	ldr	r7, [pc, #676]	; (b248 <_strtod_r+0x38c>)
    afa2:	2600      	movs	r6, #0
    afa4:	e002      	b.n	afac <_strtod_r+0xf0>
    afa6:	2601      	movs	r6, #1
    afa8:	4fa8      	ldr	r7, [pc, #672]	; (b24c <_strtod_r+0x390>)
    afaa:	4276      	negs	r6, r6
    afac:	9b04      	ldr	r3, [sp, #16]
    afae:	071b      	lsls	r3, r3, #28
    afb0:	d401      	bmi.n	afb6 <_strtod_r+0xfa>
    afb2:	f000 fd6f 	bl	ba94 <_strtod_r+0xbd8>
    afb6:	2380      	movs	r3, #128	; 0x80
    afb8:	061b      	lsls	r3, r3, #24
    afba:	431f      	orrs	r7, r3
    afbc:	f000 fd6a 	bl	ba94 <_strtod_r+0xbd8>
    afc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    afc2:	1c5a      	adds	r2, r3, #1
    afc4:	921d      	str	r2, [sp, #116]	; 0x74
    afc6:	785b      	ldrb	r3, [r3, #1]
    afc8:	2b30      	cmp	r3, #48	; 0x30
    afca:	d0f9      	beq.n	afc0 <_strtod_r+0x104>
    afcc:	2b00      	cmp	r3, #0
    afce:	d101      	bne.n	afd4 <_strtod_r+0x118>
    afd0:	f000 fd60 	bl	ba94 <_strtod_r+0xbd8>
    afd4:	2301      	movs	r3, #1
    afd6:	930a      	str	r3, [sp, #40]	; 0x28
    afd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    afda:	930c      	str	r3, [sp, #48]	; 0x30
    afdc:	2300      	movs	r3, #0
    afde:	9305      	str	r3, [sp, #20]
    afe0:	9307      	str	r3, [sp, #28]
    afe2:	9304      	str	r3, [sp, #16]
    afe4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    afe6:	7823      	ldrb	r3, [r4, #0]
    afe8:	1c1a      	adds	r2, r3, #0
    afea:	3a30      	subs	r2, #48	; 0x30
    afec:	9308      	str	r3, [sp, #32]
    afee:	b2d3      	uxtb	r3, r2
    aff0:	2b09      	cmp	r3, #9
    aff2:	d812      	bhi.n	b01a <_strtod_r+0x15e>
    aff4:	9904      	ldr	r1, [sp, #16]
    aff6:	230a      	movs	r3, #10
    aff8:	2908      	cmp	r1, #8
    affa:	dc04      	bgt.n	b006 <_strtod_r+0x14a>
    affc:	9907      	ldr	r1, [sp, #28]
    affe:	434b      	muls	r3, r1
    b000:	18d3      	adds	r3, r2, r3
    b002:	9307      	str	r3, [sp, #28]
    b004:	e003      	b.n	b00e <_strtod_r+0x152>
    b006:	9905      	ldr	r1, [sp, #20]
    b008:	434b      	muls	r3, r1
    b00a:	18d3      	adds	r3, r2, r3
    b00c:	9305      	str	r3, [sp, #20]
    b00e:	9b04      	ldr	r3, [sp, #16]
    b010:	3401      	adds	r4, #1
    b012:	3301      	adds	r3, #1
    b014:	9304      	str	r3, [sp, #16]
    b016:	941d      	str	r4, [sp, #116]	; 0x74
    b018:	e7e4      	b.n	afe4 <_strtod_r+0x128>
    b01a:	9803      	ldr	r0, [sp, #12]
    b01c:	f002 f9a6 	bl	d36c <_localeconv_r>
    b020:	6805      	ldr	r5, [r0, #0]
    b022:	9803      	ldr	r0, [sp, #12]
    b024:	f002 f9a2 	bl	d36c <_localeconv_r>
    b028:	6800      	ldr	r0, [r0, #0]
    b02a:	f7ff feed 	bl	ae08 <strlen>
    b02e:	1c29      	adds	r1, r5, #0
    b030:	1c02      	adds	r2, r0, #0
    b032:	1c20      	adds	r0, r4, #0
    b034:	f7ff feef 	bl	ae16 <strncmp>
    b038:	1e05      	subs	r5, r0, #0
    b03a:	d005      	beq.n	b048 <_strtod_r+0x18c>
    b03c:	2000      	movs	r0, #0
    b03e:	9b08      	ldr	r3, [sp, #32]
    b040:	9c04      	ldr	r4, [sp, #16]
    b042:	1c01      	adds	r1, r0, #0
    b044:	9008      	str	r0, [sp, #32]
    b046:	e05a      	b.n	b0fe <_strtod_r+0x242>
    b048:	9803      	ldr	r0, [sp, #12]
    b04a:	f002 f98f 	bl	d36c <_localeconv_r>
    b04e:	6800      	ldr	r0, [r0, #0]
    b050:	f7ff feda 	bl	ae08 <strlen>
    b054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b056:	9a04      	ldr	r2, [sp, #16]
    b058:	1818      	adds	r0, r3, r0
    b05a:	901d      	str	r0, [sp, #116]	; 0x74
    b05c:	7803      	ldrb	r3, [r0, #0]
    b05e:	1e10      	subs	r0, r2, #0
    b060:	d141      	bne.n	b0e6 <_strtod_r+0x22a>
    b062:	2b30      	cmp	r3, #48	; 0x30
    b064:	d105      	bne.n	b072 <_strtod_r+0x1b6>
    b066:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b068:	3001      	adds	r0, #1
    b06a:	1c5a      	adds	r2, r3, #1
    b06c:	921d      	str	r2, [sp, #116]	; 0x74
    b06e:	785b      	ldrb	r3, [r3, #1]
    b070:	e7f7      	b.n	b062 <_strtod_r+0x1a6>
    b072:	1c1a      	adds	r2, r3, #0
    b074:	3a31      	subs	r2, #49	; 0x31
    b076:	2a08      	cmp	r2, #8
    b078:	d83d      	bhi.n	b0f6 <_strtod_r+0x23a>
    b07a:	1c01      	adds	r1, r0, #0
    b07c:	2000      	movs	r0, #0
    b07e:	1c04      	adds	r4, r0, #0
    b080:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    b082:	920c      	str	r2, [sp, #48]	; 0x30
    b084:	3b30      	subs	r3, #48	; 0x30
    b086:	1c42      	adds	r2, r0, #1
    b088:	2b00      	cmp	r3, #0
    b08a:	d026      	beq.n	b0da <_strtod_r+0x21e>
    b08c:	1889      	adds	r1, r1, r2
    b08e:	1c22      	adds	r2, r4, #0
    b090:	1900      	adds	r0, r0, r4
    b092:	4282      	cmp	r2, r0
    b094:	d00f      	beq.n	b0b6 <_strtod_r+0x1fa>
    b096:	3201      	adds	r2, #1
    b098:	1e54      	subs	r4, r2, #1
    b09a:	2c08      	cmp	r4, #8
    b09c:	dc04      	bgt.n	b0a8 <_strtod_r+0x1ec>
    b09e:	240a      	movs	r4, #10
    b0a0:	9d07      	ldr	r5, [sp, #28]
    b0a2:	4365      	muls	r5, r4
    b0a4:	9507      	str	r5, [sp, #28]
    b0a6:	e7f4      	b.n	b092 <_strtod_r+0x1d6>
    b0a8:	2a10      	cmp	r2, #16
    b0aa:	dcf2      	bgt.n	b092 <_strtod_r+0x1d6>
    b0ac:	240a      	movs	r4, #10
    b0ae:	9d05      	ldr	r5, [sp, #20]
    b0b0:	4365      	muls	r5, r4
    b0b2:	9505      	str	r5, [sp, #20]
    b0b4:	e7ed      	b.n	b092 <_strtod_r+0x1d6>
    b0b6:	1c54      	adds	r4, r2, #1
    b0b8:	2a08      	cmp	r2, #8
    b0ba:	dc06      	bgt.n	b0ca <_strtod_r+0x20e>
    b0bc:	220a      	movs	r2, #10
    b0be:	9807      	ldr	r0, [sp, #28]
    b0c0:	4342      	muls	r2, r0
    b0c2:	18d3      	adds	r3, r2, r3
    b0c4:	9307      	str	r3, [sp, #28]
    b0c6:	2200      	movs	r2, #0
    b0c8:	e007      	b.n	b0da <_strtod_r+0x21e>
    b0ca:	2200      	movs	r2, #0
    b0cc:	2c10      	cmp	r4, #16
    b0ce:	dc04      	bgt.n	b0da <_strtod_r+0x21e>
    b0d0:	200a      	movs	r0, #10
    b0d2:	9d05      	ldr	r5, [sp, #20]
    b0d4:	4368      	muls	r0, r5
    b0d6:	18c3      	adds	r3, r0, r3
    b0d8:	9305      	str	r3, [sp, #20]
    b0da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b0dc:	1c58      	adds	r0, r3, #1
    b0de:	901d      	str	r0, [sp, #116]	; 0x74
    b0e0:	785b      	ldrb	r3, [r3, #1]
    b0e2:	1c10      	adds	r0, r2, #0
    b0e4:	e002      	b.n	b0ec <_strtod_r+0x230>
    b0e6:	1c28      	adds	r0, r5, #0
    b0e8:	1c29      	adds	r1, r5, #0
    b0ea:	9c04      	ldr	r4, [sp, #16]
    b0ec:	1c1a      	adds	r2, r3, #0
    b0ee:	3a30      	subs	r2, #48	; 0x30
    b0f0:	2a09      	cmp	r2, #9
    b0f2:	d9c7      	bls.n	b084 <_strtod_r+0x1c8>
    b0f4:	e001      	b.n	b0fa <_strtod_r+0x23e>
    b0f6:	2400      	movs	r4, #0
    b0f8:	1c21      	adds	r1, r4, #0
    b0fa:	2201      	movs	r2, #1
    b0fc:	9208      	str	r2, [sp, #32]
    b0fe:	2220      	movs	r2, #32
    b100:	1c1d      	adds	r5, r3, #0
    b102:	4395      	bics	r5, r2
    b104:	2200      	movs	r2, #0
    b106:	2d45      	cmp	r5, #69	; 0x45
    b108:	d157      	bne.n	b1ba <_strtod_r+0x2fe>
    b10a:	1c23      	adds	r3, r4, #0
    b10c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    b10e:	4303      	orrs	r3, r0
    b110:	432b      	orrs	r3, r5
    b112:	4293      	cmp	r3, r2
    b114:	d100      	bne.n	b118 <_strtod_r+0x25c>
    b116:	e0a9      	b.n	b26c <_strtod_r+0x3b0>
    b118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b11a:	9306      	str	r3, [sp, #24]
    b11c:	3301      	adds	r3, #1
    b11e:	931d      	str	r3, [sp, #116]	; 0x74
    b120:	9b06      	ldr	r3, [sp, #24]
    b122:	785b      	ldrb	r3, [r3, #1]
    b124:	2b2b      	cmp	r3, #43	; 0x2b
    b126:	d006      	beq.n	b136 <_strtod_r+0x27a>
    b128:	2b2d      	cmp	r3, #45	; 0x2d
    b12a:	d001      	beq.n	b130 <_strtod_r+0x274>
    b12c:	9209      	str	r2, [sp, #36]	; 0x24
    b12e:	e008      	b.n	b142 <_strtod_r+0x286>
    b130:	2301      	movs	r3, #1
    b132:	9309      	str	r3, [sp, #36]	; 0x24
    b134:	e000      	b.n	b138 <_strtod_r+0x27c>
    b136:	9209      	str	r2, [sp, #36]	; 0x24
    b138:	9b06      	ldr	r3, [sp, #24]
    b13a:	3302      	adds	r3, #2
    b13c:	931d      	str	r3, [sp, #116]	; 0x74
    b13e:	9b06      	ldr	r3, [sp, #24]
    b140:	789b      	ldrb	r3, [r3, #2]
    b142:	1c1a      	adds	r2, r3, #0
    b144:	3a30      	subs	r2, #48	; 0x30
    b146:	2a09      	cmp	r2, #9
    b148:	d834      	bhi.n	b1b4 <_strtod_r+0x2f8>
    b14a:	2b30      	cmp	r3, #48	; 0x30
    b14c:	d104      	bne.n	b158 <_strtod_r+0x29c>
    b14e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b150:	1c5a      	adds	r2, r3, #1
    b152:	921d      	str	r2, [sp, #116]	; 0x74
    b154:	785b      	ldrb	r3, [r3, #1]
    b156:	e7f8      	b.n	b14a <_strtod_r+0x28e>
    b158:	2531      	movs	r5, #49	; 0x31
    b15a:	426d      	negs	r5, r5
    b15c:	46ac      	mov	ip, r5
    b15e:	449c      	add	ip, r3
    b160:	4665      	mov	r5, ip
    b162:	2200      	movs	r2, #0
    b164:	2d08      	cmp	r5, #8
    b166:	d828      	bhi.n	b1ba <_strtod_r+0x2fe>
    b168:	3b30      	subs	r3, #48	; 0x30
    b16a:	930b      	str	r3, [sp, #44]	; 0x2c
    b16c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b16e:	930e      	str	r3, [sp, #56]	; 0x38
    b170:	2530      	movs	r5, #48	; 0x30
    b172:	426d      	negs	r5, r5
    b174:	46ac      	mov	ip, r5
    b176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b178:	1c5a      	adds	r2, r3, #1
    b17a:	921d      	str	r2, [sp, #116]	; 0x74
    b17c:	785b      	ldrb	r3, [r3, #1]
    b17e:	449c      	add	ip, r3
    b180:	4665      	mov	r5, ip
    b182:	2d09      	cmp	r5, #9
    b184:	d806      	bhi.n	b194 <_strtod_r+0x2d8>
    b186:	220a      	movs	r2, #10
    b188:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    b18a:	436a      	muls	r2, r5
    b18c:	18d3      	adds	r3, r2, r3
    b18e:	3b30      	subs	r3, #48	; 0x30
    b190:	930b      	str	r3, [sp, #44]	; 0x2c
    b192:	e7ed      	b.n	b170 <_strtod_r+0x2b4>
    b194:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b196:	1b52      	subs	r2, r2, r5
    b198:	1e15      	subs	r5, r2, #0
    b19a:	4a2d      	ldr	r2, [pc, #180]	; (b250 <_strtod_r+0x394>)
    b19c:	4694      	mov	ip, r2
    b19e:	2d08      	cmp	r5, #8
    b1a0:	dc03      	bgt.n	b1aa <_strtod_r+0x2ee>
    b1a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b1a4:	4562      	cmp	r2, ip
    b1a6:	dd00      	ble.n	b1aa <_strtod_r+0x2ee>
    b1a8:	4662      	mov	r2, ip
    b1aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
    b1ac:	2d00      	cmp	r5, #0
    b1ae:	d004      	beq.n	b1ba <_strtod_r+0x2fe>
    b1b0:	4252      	negs	r2, r2
    b1b2:	e002      	b.n	b1ba <_strtod_r+0x2fe>
    b1b4:	9a06      	ldr	r2, [sp, #24]
    b1b6:	921d      	str	r2, [sp, #116]	; 0x74
    b1b8:	2200      	movs	r2, #0
    b1ba:	2c00      	cmp	r4, #0
    b1bc:	d161      	bne.n	b282 <_strtod_r+0x3c6>
    b1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1c0:	4310      	orrs	r0, r2
    b1c2:	d001      	beq.n	b1c8 <_strtod_r+0x30c>
    b1c4:	f000 fc66 	bl	ba94 <_strtod_r+0xbd8>
    b1c8:	9a08      	ldr	r2, [sp, #32]
    b1ca:	2a00      	cmp	r2, #0
    b1cc:	d14e      	bne.n	b26c <_strtod_r+0x3b0>
    b1ce:	2b4e      	cmp	r3, #78	; 0x4e
    b1d0:	d01c      	beq.n	b20c <_strtod_r+0x350>
    b1d2:	dc02      	bgt.n	b1da <_strtod_r+0x31e>
    b1d4:	2b49      	cmp	r3, #73	; 0x49
    b1d6:	d005      	beq.n	b1e4 <_strtod_r+0x328>
    b1d8:	e048      	b.n	b26c <_strtod_r+0x3b0>
    b1da:	2b69      	cmp	r3, #105	; 0x69
    b1dc:	d002      	beq.n	b1e4 <_strtod_r+0x328>
    b1de:	2b6e      	cmp	r3, #110	; 0x6e
    b1e0:	d014      	beq.n	b20c <_strtod_r+0x350>
    b1e2:	e043      	b.n	b26c <_strtod_r+0x3b0>
    b1e4:	a81d      	add	r0, sp, #116	; 0x74
    b1e6:	491b      	ldr	r1, [pc, #108]	; (b254 <_strtod_r+0x398>)
    b1e8:	f7ff fe3d 	bl	ae66 <match>
    b1ec:	2800      	cmp	r0, #0
    b1ee:	d03d      	beq.n	b26c <_strtod_r+0x3b0>
    b1f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b1f2:	a81d      	add	r0, sp, #116	; 0x74
    b1f4:	3b01      	subs	r3, #1
    b1f6:	4918      	ldr	r1, [pc, #96]	; (b258 <_strtod_r+0x39c>)
    b1f8:	931d      	str	r3, [sp, #116]	; 0x74
    b1fa:	f7ff fe34 	bl	ae66 <match>
    b1fe:	2800      	cmp	r0, #0
    b200:	d102      	bne.n	b208 <_strtod_r+0x34c>
    b202:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b204:	3301      	adds	r3, #1
    b206:	931d      	str	r3, [sp, #116]	; 0x74
    b208:	4f0f      	ldr	r7, [pc, #60]	; (b248 <_strtod_r+0x38c>)
    b20a:	e02c      	b.n	b266 <_strtod_r+0x3aa>
    b20c:	a81d      	add	r0, sp, #116	; 0x74
    b20e:	4913      	ldr	r1, [pc, #76]	; (b25c <_strtod_r+0x3a0>)
    b210:	f7ff fe29 	bl	ae66 <match>
    b214:	2800      	cmp	r0, #0
    b216:	d029      	beq.n	b26c <_strtod_r+0x3b0>
    b218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b21a:	781b      	ldrb	r3, [r3, #0]
    b21c:	2b28      	cmp	r3, #40	; 0x28
    b21e:	d121      	bne.n	b264 <_strtod_r+0x3a8>
    b220:	a81d      	add	r0, sp, #116	; 0x74
    b222:	490f      	ldr	r1, [pc, #60]	; (b260 <_strtod_r+0x3a4>)
    b224:	aa20      	add	r2, sp, #128	; 0x80
    b226:	f001 fff6 	bl	d216 <__hexnan>
    b22a:	2805      	cmp	r0, #5
    b22c:	d11a      	bne.n	b264 <_strtod_r+0x3a8>
    b22e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b230:	4a05      	ldr	r2, [pc, #20]	; (b248 <_strtod_r+0x38c>)
    b232:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b234:	431a      	orrs	r2, r3
    b236:	1c17      	adds	r7, r2, #0
    b238:	f000 fc2c 	bl	ba94 <_strtod_r+0xbd8>
    b23c:	0000f3c8 	.word	0x0000f3c8
    b240:	00000433 	.word	0x00000433
    b244:	ffefffff 	.word	0xffefffff
    b248:	7ff00000 	.word	0x7ff00000
    b24c:	7fffffff 	.word	0x7fffffff
    b250:	00004e1f 	.word	0x00004e1f
    b254:	0000f32e 	.word	0x0000f32e
    b258:	0000f4e0 	.word	0x0000f4e0
    b25c:	0000f336 	.word	0x0000f336
    b260:	0000f388 	.word	0x0000f388
    b264:	4f92      	ldr	r7, [pc, #584]	; (b4b0 <_strtod_r+0x5f4>)
    b266:	2600      	movs	r6, #0
    b268:	f000 fc14 	bl	ba94 <_strtod_r+0xbd8>
    b26c:	9b06      	ldr	r3, [sp, #24]
    b26e:	931d      	str	r3, [sp, #116]	; 0x74
    b270:	2300      	movs	r3, #0
    b272:	930d      	str	r3, [sp, #52]	; 0x34
    b274:	9b19      	ldr	r3, [sp, #100]	; 0x64
    b276:	2b00      	cmp	r3, #0
    b278:	d001      	beq.n	b27e <_strtod_r+0x3c2>
    b27a:	f000 fc0e 	bl	ba9a <_strtod_r+0xbde>
    b27e:	f000 fc17 	bl	bab0 <_strtod_r+0xbf4>
    b282:	1a53      	subs	r3, r2, r1
    b284:	9309      	str	r3, [sp, #36]	; 0x24
    b286:	9b04      	ldr	r3, [sp, #16]
    b288:	2b00      	cmp	r3, #0
    b28a:	d100      	bne.n	b28e <_strtod_r+0x3d2>
    b28c:	9404      	str	r4, [sp, #16]
    b28e:	1e25      	subs	r5, r4, #0
    b290:	2d10      	cmp	r5, #16
    b292:	dd00      	ble.n	b296 <_strtod_r+0x3da>
    b294:	2510      	movs	r5, #16
    b296:	9807      	ldr	r0, [sp, #28]
    b298:	f7fd fc00 	bl	8a9c <__aeabi_ui2d>
    b29c:	1c06      	adds	r6, r0, #0
    b29e:	1c0f      	adds	r7, r1, #0
    b2a0:	2d09      	cmp	r5, #9
    b2a2:	dd15      	ble.n	b2d0 <_strtod_r+0x414>
    b2a4:	1c2b      	adds	r3, r5, #0
    b2a6:	4a83      	ldr	r2, [pc, #524]	; (b4b4 <_strtod_r+0x5f8>)
    b2a8:	3b09      	subs	r3, #9
    b2aa:	00db      	lsls	r3, r3, #3
    b2ac:	18d3      	adds	r3, r2, r3
    b2ae:	681a      	ldr	r2, [r3, #0]
    b2b0:	685b      	ldr	r3, [r3, #4]
    b2b2:	f7fc fd6d 	bl	7d90 <__aeabi_dmul>
    b2b6:	1c06      	adds	r6, r0, #0
    b2b8:	9805      	ldr	r0, [sp, #20]
    b2ba:	1c0f      	adds	r7, r1, #0
    b2bc:	f7fd fbee 	bl	8a9c <__aeabi_ui2d>
    b2c0:	1c02      	adds	r2, r0, #0
    b2c2:	1c0b      	adds	r3, r1, #0
    b2c4:	1c30      	adds	r0, r6, #0
    b2c6:	1c39      	adds	r1, r7, #0
    b2c8:	f7fb fdfc 	bl	6ec4 <__aeabi_dadd>
    b2cc:	1c06      	adds	r6, r0, #0
    b2ce:	1c0f      	adds	r7, r1, #0
    b2d0:	2c0f      	cmp	r4, #15
    b2d2:	dc37      	bgt.n	b344 <_strtod_r+0x488>
    b2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2d6:	2b00      	cmp	r3, #0
    b2d8:	d100      	bne.n	b2dc <_strtod_r+0x420>
    b2da:	e3db      	b.n	ba94 <_strtod_r+0xbd8>
    b2dc:	dd24      	ble.n	b328 <_strtod_r+0x46c>
    b2de:	2b16      	cmp	r3, #22
    b2e0:	dc07      	bgt.n	b2f2 <_strtod_r+0x436>
    b2e2:	4974      	ldr	r1, [pc, #464]	; (b4b4 <_strtod_r+0x5f8>)
    b2e4:	00da      	lsls	r2, r3, #3
    b2e6:	188a      	adds	r2, r1, r2
    b2e8:	6810      	ldr	r0, [r2, #0]
    b2ea:	6851      	ldr	r1, [r2, #4]
    b2ec:	1c3b      	adds	r3, r7, #0
    b2ee:	1c32      	adds	r2, r6, #0
    b2f0:	e015      	b.n	b31e <_strtod_r+0x462>
    b2f2:	2325      	movs	r3, #37	; 0x25
    b2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b2f6:	1b1b      	subs	r3, r3, r4
    b2f8:	429a      	cmp	r2, r3
    b2fa:	dc23      	bgt.n	b344 <_strtod_r+0x488>
    b2fc:	220f      	movs	r2, #15
    b2fe:	4d6d      	ldr	r5, [pc, #436]	; (b4b4 <_strtod_r+0x5f8>)
    b300:	1b14      	subs	r4, r2, r4
    b302:	00e3      	lsls	r3, r4, #3
    b304:	18eb      	adds	r3, r5, r3
    b306:	6818      	ldr	r0, [r3, #0]
    b308:	6859      	ldr	r1, [r3, #4]
    b30a:	1c32      	adds	r2, r6, #0
    b30c:	1c3b      	adds	r3, r7, #0
    b30e:	f7fc fd3f 	bl	7d90 <__aeabi_dmul>
    b312:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b314:	1b1c      	subs	r4, r3, r4
    b316:	00e4      	lsls	r4, r4, #3
    b318:	192d      	adds	r5, r5, r4
    b31a:	682a      	ldr	r2, [r5, #0]
    b31c:	686b      	ldr	r3, [r5, #4]
    b31e:	f7fc fd37 	bl	7d90 <__aeabi_dmul>
    b322:	1c06      	adds	r6, r0, #0
    b324:	1c0f      	adds	r7, r1, #0
    b326:	e3b5      	b.n	ba94 <_strtod_r+0xbd8>
    b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b32a:	3316      	adds	r3, #22
    b32c:	db0a      	blt.n	b344 <_strtod_r+0x488>
    b32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b330:	1c30      	adds	r0, r6, #0
    b332:	00da      	lsls	r2, r3, #3
    b334:	4b5f      	ldr	r3, [pc, #380]	; (b4b4 <_strtod_r+0x5f8>)
    b336:	1c39      	adds	r1, r7, #0
    b338:	1a9a      	subs	r2, r3, r2
    b33a:	6853      	ldr	r3, [r2, #4]
    b33c:	6812      	ldr	r2, [r2, #0]
    b33e:	f7fc f8e9 	bl	7514 <__aeabi_ddiv>
    b342:	e7ee      	b.n	b322 <_strtod_r+0x466>
    b344:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b346:	1b65      	subs	r5, r4, r5
    b348:	195d      	adds	r5, r3, r5
    b34a:	2d00      	cmp	r5, #0
    b34c:	dd59      	ble.n	b402 <_strtod_r+0x546>
    b34e:	230f      	movs	r3, #15
    b350:	402b      	ands	r3, r5
    b352:	d00a      	beq.n	b36a <_strtod_r+0x4ae>
    b354:	4a57      	ldr	r2, [pc, #348]	; (b4b4 <_strtod_r+0x5f8>)
    b356:	00db      	lsls	r3, r3, #3
    b358:	18d3      	adds	r3, r2, r3
    b35a:	6818      	ldr	r0, [r3, #0]
    b35c:	6859      	ldr	r1, [r3, #4]
    b35e:	1c32      	adds	r2, r6, #0
    b360:	1c3b      	adds	r3, r7, #0
    b362:	f7fc fd15 	bl	7d90 <__aeabi_dmul>
    b366:	1c06      	adds	r6, r0, #0
    b368:	1c0f      	adds	r7, r1, #0
    b36a:	230f      	movs	r3, #15
    b36c:	439d      	bics	r5, r3
    b36e:	d100      	bne.n	b372 <_strtod_r+0x4b6>
    b370:	e0b0      	b.n	b4d4 <_strtod_r+0x618>
    b372:	3326      	adds	r3, #38	; 0x26
    b374:	33ff      	adds	r3, #255	; 0xff
    b376:	429d      	cmp	r5, r3
    b378:	dd0e      	ble.n	b398 <_strtod_r+0x4dc>
    b37a:	2300      	movs	r3, #0
    b37c:	9304      	str	r3, [sp, #16]
    b37e:	9305      	str	r3, [sp, #20]
    b380:	930b      	str	r3, [sp, #44]	; 0x2c
    b382:	9308      	str	r3, [sp, #32]
    b384:	2322      	movs	r3, #34	; 0x22
    b386:	2600      	movs	r6, #0
    b388:	9a03      	ldr	r2, [sp, #12]
    b38a:	4f4b      	ldr	r7, [pc, #300]	; (b4b8 <_strtod_r+0x5fc>)
    b38c:	6013      	str	r3, [r2, #0]
    b38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b390:	42b3      	cmp	r3, r6
    b392:	d000      	beq.n	b396 <_strtod_r+0x4da>
    b394:	e36a      	b.n	ba6c <_strtod_r+0xbb0>
    b396:	e37d      	b.n	ba94 <_strtod_r+0xbd8>
    b398:	2300      	movs	r3, #0
    b39a:	1c30      	adds	r0, r6, #0
    b39c:	1c39      	adds	r1, r7, #0
    b39e:	112d      	asrs	r5, r5, #4
    b3a0:	9305      	str	r3, [sp, #20]
    b3a2:	2d01      	cmp	r5, #1
    b3a4:	dd0e      	ble.n	b3c4 <_strtod_r+0x508>
    b3a6:	07eb      	lsls	r3, r5, #31
    b3a8:	d507      	bpl.n	b3ba <_strtod_r+0x4fe>
    b3aa:	9b05      	ldr	r3, [sp, #20]
    b3ac:	00da      	lsls	r2, r3, #3
    b3ae:	4b43      	ldr	r3, [pc, #268]	; (b4bc <_strtod_r+0x600>)
    b3b0:	18d3      	adds	r3, r2, r3
    b3b2:	681a      	ldr	r2, [r3, #0]
    b3b4:	685b      	ldr	r3, [r3, #4]
    b3b6:	f7fc fceb 	bl	7d90 <__aeabi_dmul>
    b3ba:	9b05      	ldr	r3, [sp, #20]
    b3bc:	106d      	asrs	r5, r5, #1
    b3be:	3301      	adds	r3, #1
    b3c0:	9305      	str	r3, [sp, #20]
    b3c2:	e7ee      	b.n	b3a2 <_strtod_r+0x4e6>
    b3c4:	1c06      	adds	r6, r0, #0
    b3c6:	4b3e      	ldr	r3, [pc, #248]	; (b4c0 <_strtod_r+0x604>)
    b3c8:	18cf      	adds	r7, r1, r3
    b3ca:	9b05      	ldr	r3, [sp, #20]
    b3cc:	00da      	lsls	r2, r3, #3
    b3ce:	4b3b      	ldr	r3, [pc, #236]	; (b4bc <_strtod_r+0x600>)
    b3d0:	189b      	adds	r3, r3, r2
    b3d2:	6818      	ldr	r0, [r3, #0]
    b3d4:	6859      	ldr	r1, [r3, #4]
    b3d6:	1c32      	adds	r2, r6, #0
    b3d8:	1c3b      	adds	r3, r7, #0
    b3da:	f7fc fcd9 	bl	7d90 <__aeabi_dmul>
    b3de:	4b36      	ldr	r3, [pc, #216]	; (b4b8 <_strtod_r+0x5fc>)
    b3e0:	1c0f      	adds	r7, r1, #0
    b3e2:	400b      	ands	r3, r1
    b3e4:	4937      	ldr	r1, [pc, #220]	; (b4c4 <_strtod_r+0x608>)
    b3e6:	1c06      	adds	r6, r0, #0
    b3e8:	428b      	cmp	r3, r1
    b3ea:	d8c6      	bhi.n	b37a <_strtod_r+0x4be>
    b3ec:	4936      	ldr	r1, [pc, #216]	; (b4c8 <_strtod_r+0x60c>)
    b3ee:	428b      	cmp	r3, r1
    b3f0:	d903      	bls.n	b3fa <_strtod_r+0x53e>
    b3f2:	2601      	movs	r6, #1
    b3f4:	4f35      	ldr	r7, [pc, #212]	; (b4cc <_strtod_r+0x610>)
    b3f6:	4276      	negs	r6, r6
    b3f8:	e06c      	b.n	b4d4 <_strtod_r+0x618>
    b3fa:	23d4      	movs	r3, #212	; 0xd4
    b3fc:	049b      	lsls	r3, r3, #18
    b3fe:	18ff      	adds	r7, r7, r3
    b400:	e068      	b.n	b4d4 <_strtod_r+0x618>
    b402:	2d00      	cmp	r5, #0
    b404:	d066      	beq.n	b4d4 <_strtod_r+0x618>
    b406:	230f      	movs	r3, #15
    b408:	426d      	negs	r5, r5
    b40a:	402b      	ands	r3, r5
    b40c:	d00a      	beq.n	b424 <_strtod_r+0x568>
    b40e:	4a29      	ldr	r2, [pc, #164]	; (b4b4 <_strtod_r+0x5f8>)
    b410:	00db      	lsls	r3, r3, #3
    b412:	18d3      	adds	r3, r2, r3
    b414:	1c30      	adds	r0, r6, #0
    b416:	681a      	ldr	r2, [r3, #0]
    b418:	685b      	ldr	r3, [r3, #4]
    b41a:	1c39      	adds	r1, r7, #0
    b41c:	f7fc f87a 	bl	7514 <__aeabi_ddiv>
    b420:	1c06      	adds	r6, r0, #0
    b422:	1c0f      	adds	r7, r1, #0
    b424:	112d      	asrs	r5, r5, #4
    b426:	d055      	beq.n	b4d4 <_strtod_r+0x618>
    b428:	2d1f      	cmp	r5, #31
    b42a:	dd05      	ble.n	b438 <_strtod_r+0x57c>
    b42c:	2300      	movs	r3, #0
    b42e:	9304      	str	r3, [sp, #16]
    b430:	9305      	str	r3, [sp, #20]
    b432:	930b      	str	r3, [sp, #44]	; 0x2c
    b434:	9308      	str	r3, [sp, #32]
    b436:	e118      	b.n	b66a <_strtod_r+0x7ae>
    b438:	2300      	movs	r3, #0
    b43a:	9306      	str	r3, [sp, #24]
    b43c:	06eb      	lsls	r3, r5, #27
    b43e:	d501      	bpl.n	b444 <_strtod_r+0x588>
    b440:	236a      	movs	r3, #106	; 0x6a
    b442:	9306      	str	r3, [sp, #24]
    b444:	1c39      	adds	r1, r7, #0
    b446:	1c30      	adds	r0, r6, #0
    b448:	4e21      	ldr	r6, [pc, #132]	; (b4d0 <_strtod_r+0x614>)
    b44a:	2d00      	cmp	r5, #0
    b44c:	dd08      	ble.n	b460 <_strtod_r+0x5a4>
    b44e:	07eb      	lsls	r3, r5, #31
    b450:	d503      	bpl.n	b45a <_strtod_r+0x59e>
    b452:	6832      	ldr	r2, [r6, #0]
    b454:	6873      	ldr	r3, [r6, #4]
    b456:	f7fc fc9b 	bl	7d90 <__aeabi_dmul>
    b45a:	106d      	asrs	r5, r5, #1
    b45c:	3608      	adds	r6, #8
    b45e:	e7f4      	b.n	b44a <_strtod_r+0x58e>
    b460:	9b06      	ldr	r3, [sp, #24]
    b462:	1c06      	adds	r6, r0, #0
    b464:	1c0f      	adds	r7, r1, #0
    b466:	2b00      	cmp	r3, #0
    b468:	d019      	beq.n	b49e <_strtod_r+0x5e2>
    b46a:	226b      	movs	r2, #107	; 0x6b
    b46c:	004b      	lsls	r3, r1, #1
    b46e:	0d5b      	lsrs	r3, r3, #21
    b470:	1c08      	adds	r0, r1, #0
    b472:	1ad3      	subs	r3, r2, r3
    b474:	2b00      	cmp	r3, #0
    b476:	dd12      	ble.n	b49e <_strtod_r+0x5e2>
    b478:	2b1f      	cmp	r3, #31
    b47a:	dd0c      	ble.n	b496 <_strtod_r+0x5da>
    b47c:	2600      	movs	r6, #0
    b47e:	2b34      	cmp	r3, #52	; 0x34
    b480:	dd02      	ble.n	b488 <_strtod_r+0x5cc>
    b482:	27dc      	movs	r7, #220	; 0xdc
    b484:	04bf      	lsls	r7, r7, #18
    b486:	e00a      	b.n	b49e <_strtod_r+0x5e2>
    b488:	2201      	movs	r2, #1
    b48a:	3b20      	subs	r3, #32
    b48c:	4252      	negs	r2, r2
    b48e:	409a      	lsls	r2, r3
    b490:	4010      	ands	r0, r2
    b492:	1c07      	adds	r7, r0, #0
    b494:	e003      	b.n	b49e <_strtod_r+0x5e2>
    b496:	2201      	movs	r2, #1
    b498:	4252      	negs	r2, r2
    b49a:	409a      	lsls	r2, r3
    b49c:	4016      	ands	r6, r2
    b49e:	1c30      	adds	r0, r6, #0
    b4a0:	1c39      	adds	r1, r7, #0
    b4a2:	2200      	movs	r2, #0
    b4a4:	2300      	movs	r3, #0
    b4a6:	f7fb fc97 	bl	6dd8 <__aeabi_dcmpeq>
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d1be      	bne.n	b42c <_strtod_r+0x570>
    b4ae:	e013      	b.n	b4d8 <_strtod_r+0x61c>
    b4b0:	fff80000 	.word	0xfff80000
    b4b4:	0000f4f8 	.word	0x0000f4f8
    b4b8:	7ff00000 	.word	0x7ff00000
    b4bc:	0000f5c0 	.word	0x0000f5c0
    b4c0:	fcb00000 	.word	0xfcb00000
    b4c4:	7ca00000 	.word	0x7ca00000
    b4c8:	7c900000 	.word	0x7c900000
    b4cc:	7fefffff 	.word	0x7fefffff
    b4d0:	0000f3a0 	.word	0x0000f3a0
    b4d4:	2300      	movs	r3, #0
    b4d6:	9306      	str	r3, [sp, #24]
    b4d8:	9b07      	ldr	r3, [sp, #28]
    b4da:	9803      	ldr	r0, [sp, #12]
    b4dc:	9300      	str	r3, [sp, #0]
    b4de:	990c      	ldr	r1, [sp, #48]	; 0x30
    b4e0:	9a04      	ldr	r2, [sp, #16]
    b4e2:	1c23      	adds	r3, r4, #0
    b4e4:	f001 fffb 	bl	d4de <__s2b>
    b4e8:	900b      	str	r0, [sp, #44]	; 0x2c
    b4ea:	2800      	cmp	r0, #0
    b4ec:	d100      	bne.n	b4f0 <_strtod_r+0x634>
    b4ee:	e744      	b.n	b37a <_strtod_r+0x4be>
    b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b4f4:	425b      	negs	r3, r3
    b4f6:	17d2      	asrs	r2, r2, #31
    b4f8:	4013      	ands	r3, r2
    b4fa:	9313      	str	r3, [sp, #76]	; 0x4c
    b4fc:	2300      	movs	r3, #0
    b4fe:	9304      	str	r3, [sp, #16]
    b500:	9305      	str	r3, [sp, #20]
    b502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b504:	9803      	ldr	r0, [sp, #12]
    b506:	6859      	ldr	r1, [r3, #4]
    b508:	f001 ff5c 	bl	d3c4 <_Balloc>
    b50c:	9008      	str	r0, [sp, #32]
    b50e:	2800      	cmp	r0, #0
    b510:	d100      	bne.n	b514 <_strtod_r+0x658>
    b512:	e737      	b.n	b384 <_strtod_r+0x4c8>
    b514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b516:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b518:	691b      	ldr	r3, [r3, #16]
    b51a:	310c      	adds	r1, #12
    b51c:	1c9a      	adds	r2, r3, #2
    b51e:	0092      	lsls	r2, r2, #2
    b520:	300c      	adds	r0, #12
    b522:	9307      	str	r3, [sp, #28]
    b524:	f7fd ffd7 	bl	94d6 <memcpy>
    b528:	ab1f      	add	r3, sp, #124	; 0x7c
    b52a:	9300      	str	r3, [sp, #0]
    b52c:	ab20      	add	r3, sp, #128	; 0x80
    b52e:	9301      	str	r3, [sp, #4]
    b530:	9803      	ldr	r0, [sp, #12]
    b532:	1c32      	adds	r2, r6, #0
    b534:	1c3b      	adds	r3, r7, #0
    b536:	960e      	str	r6, [sp, #56]	; 0x38
    b538:	970f      	str	r7, [sp, #60]	; 0x3c
    b53a:	f002 fa91 	bl	da60 <__d2b>
    b53e:	901e      	str	r0, [sp, #120]	; 0x78
    b540:	2800      	cmp	r0, #0
    b542:	d100      	bne.n	b546 <_strtod_r+0x68a>
    b544:	e71e      	b.n	b384 <_strtod_r+0x4c8>
    b546:	9803      	ldr	r0, [sp, #12]
    b548:	2101      	movs	r1, #1
    b54a:	f002 f852 	bl	d5f2 <__i2b>
    b54e:	9005      	str	r0, [sp, #20]
    b550:	2800      	cmp	r0, #0
    b552:	d100      	bne.n	b556 <_strtod_r+0x69a>
    b554:	e716      	b.n	b384 <_strtod_r+0x4c8>
    b556:	2300      	movs	r3, #0
    b558:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b55a:	930a      	str	r3, [sp, #40]	; 0x28
    b55c:	4293      	cmp	r3, r2
    b55e:	da00      	bge.n	b562 <_strtod_r+0x6a6>
    b560:	920a      	str	r2, [sp, #40]	; 0x28
    b562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b564:	2b00      	cmp	r3, #0
    b566:	da00      	bge.n	b56a <_strtod_r+0x6ae>
    b568:	e089      	b.n	b67e <_strtod_r+0x7c2>
    b56a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b56c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b56e:	18d5      	adds	r5, r2, r3
    b570:	9a06      	ldr	r2, [sp, #24]
    b572:	9920      	ldr	r1, [sp, #128]	; 0x80
    b574:	1a9b      	subs	r3, r3, r2
    b576:	2236      	movs	r2, #54	; 0x36
    b578:	185b      	adds	r3, r3, r1
    b57a:	1a52      	subs	r2, r2, r1
    b57c:	49c8      	ldr	r1, [pc, #800]	; (b8a0 <_strtod_r+0x9e4>)
    b57e:	2001      	movs	r0, #1
    b580:	428b      	cmp	r3, r1
    b582:	db00      	blt.n	b586 <_strtod_r+0x6ca>
    b584:	e085      	b.n	b692 <_strtod_r+0x7d6>
    b586:	1ac9      	subs	r1, r1, r3
    b588:	1a52      	subs	r2, r2, r1
    b58a:	291f      	cmp	r1, #31
    b58c:	dc7b      	bgt.n	b686 <_strtod_r+0x7ca>
    b58e:	4088      	lsls	r0, r1
    b590:	2300      	movs	r3, #0
    b592:	9018      	str	r0, [sp, #96]	; 0x60
    b594:	9312      	str	r3, [sp, #72]	; 0x48
    b596:	18ab      	adds	r3, r5, r2
    b598:	9307      	str	r3, [sp, #28]
    b59a:	9b06      	ldr	r3, [sp, #24]
    b59c:	18a4      	adds	r4, r4, r2
    b59e:	18e4      	adds	r4, r4, r3
    b5a0:	9b07      	ldr	r3, [sp, #28]
    b5a2:	42ab      	cmp	r3, r5
    b5a4:	dd00      	ble.n	b5a8 <_strtod_r+0x6ec>
    b5a6:	1c2b      	adds	r3, r5, #0
    b5a8:	42a3      	cmp	r3, r4
    b5aa:	dd00      	ble.n	b5ae <_strtod_r+0x6f2>
    b5ac:	1c23      	adds	r3, r4, #0
    b5ae:	2b00      	cmp	r3, #0
    b5b0:	dd04      	ble.n	b5bc <_strtod_r+0x700>
    b5b2:	9a07      	ldr	r2, [sp, #28]
    b5b4:	1ae4      	subs	r4, r4, r3
    b5b6:	1ad2      	subs	r2, r2, r3
    b5b8:	9207      	str	r2, [sp, #28]
    b5ba:	1aed      	subs	r5, r5, r3
    b5bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d16b      	bne.n	b69a <_strtod_r+0x7de>
    b5c2:	9b07      	ldr	r3, [sp, #28]
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	dd00      	ble.n	b5ca <_strtod_r+0x70e>
    b5c8:	e080      	b.n	b6cc <_strtod_r+0x810>
    b5ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	d000      	beq.n	b5d2 <_strtod_r+0x716>
    b5d0:	e086      	b.n	b6e0 <_strtod_r+0x824>
    b5d2:	2c00      	cmp	r4, #0
    b5d4:	dd00      	ble.n	b5d8 <_strtod_r+0x71c>
    b5d6:	e08d      	b.n	b6f4 <_strtod_r+0x838>
    b5d8:	2d00      	cmp	r5, #0
    b5da:	dd00      	ble.n	b5de <_strtod_r+0x722>
    b5dc:	e094      	b.n	b708 <_strtod_r+0x84c>
    b5de:	9803      	ldr	r0, [sp, #12]
    b5e0:	991e      	ldr	r1, [sp, #120]	; 0x78
    b5e2:	9a08      	ldr	r2, [sp, #32]
    b5e4:	f002 f95b 	bl	d89e <__mdiff>
    b5e8:	9004      	str	r0, [sp, #16]
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d100      	bne.n	b5f0 <_strtod_r+0x734>
    b5ee:	e6c9      	b.n	b384 <_strtod_r+0x4c8>
    b5f0:	2200      	movs	r2, #0
    b5f2:	68c3      	ldr	r3, [r0, #12]
    b5f4:	9905      	ldr	r1, [sp, #20]
    b5f6:	60c2      	str	r2, [r0, #12]
    b5f8:	930c      	str	r3, [sp, #48]	; 0x30
    b5fa:	f002 f935 	bl	d868 <__mcmp>
    b5fe:	2800      	cmp	r0, #0
    b600:	db00      	blt.n	b604 <_strtod_r+0x748>
    b602:	e091      	b.n	b728 <_strtod_r+0x86c>
    b604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b606:	2b00      	cmp	r3, #0
    b608:	d000      	beq.n	b60c <_strtod_r+0x750>
    b60a:	e21a      	b.n	ba42 <_strtod_r+0xb86>
    b60c:	2e00      	cmp	r6, #0
    b60e:	d000      	beq.n	b612 <_strtod_r+0x756>
    b610:	e217      	b.n	ba42 <_strtod_r+0xb86>
    b612:	033b      	lsls	r3, r7, #12
    b614:	d000      	beq.n	b618 <_strtod_r+0x75c>
    b616:	e214      	b.n	ba42 <_strtod_r+0xb86>
    b618:	22d6      	movs	r2, #214	; 0xd6
    b61a:	4ba2      	ldr	r3, [pc, #648]	; (b8a4 <_strtod_r+0x9e8>)
    b61c:	04d2      	lsls	r2, r2, #19
    b61e:	403b      	ands	r3, r7
    b620:	4293      	cmp	r3, r2
    b622:	d800      	bhi.n	b626 <_strtod_r+0x76a>
    b624:	e20d      	b.n	ba42 <_strtod_r+0xb86>
    b626:	9b04      	ldr	r3, [sp, #16]
    b628:	695b      	ldr	r3, [r3, #20]
    b62a:	9307      	str	r3, [sp, #28]
    b62c:	2b00      	cmp	r3, #0
    b62e:	d075      	beq.n	b71c <_strtod_r+0x860>
    b630:	9904      	ldr	r1, [sp, #16]
    b632:	9803      	ldr	r0, [sp, #12]
    b634:	2201      	movs	r2, #1
    b636:	f002 f8c5 	bl	d7c4 <__lshift>
    b63a:	9905      	ldr	r1, [sp, #20]
    b63c:	9004      	str	r0, [sp, #16]
    b63e:	f002 f913 	bl	d868 <__mcmp>
    b642:	2800      	cmp	r0, #0
    b644:	dc00      	bgt.n	b648 <_strtod_r+0x78c>
    b646:	e1fc      	b.n	ba42 <_strtod_r+0xb86>
    b648:	9a06      	ldr	r2, [sp, #24]
    b64a:	4b96      	ldr	r3, [pc, #600]	; (b8a4 <_strtod_r+0x9e8>)
    b64c:	2a00      	cmp	r2, #0
    b64e:	d100      	bne.n	b652 <_strtod_r+0x796>
    b650:	e09a      	b.n	b788 <_strtod_r+0x8cc>
    b652:	1c1a      	adds	r2, r3, #0
    b654:	21d6      	movs	r1, #214	; 0xd6
    b656:	403a      	ands	r2, r7
    b658:	04c9      	lsls	r1, r1, #19
    b65a:	428a      	cmp	r2, r1
    b65c:	dd00      	ble.n	b660 <_strtod_r+0x7a4>
    b65e:	e093      	b.n	b788 <_strtod_r+0x8cc>
    b660:	23dc      	movs	r3, #220	; 0xdc
    b662:	049b      	lsls	r3, r3, #18
    b664:	429a      	cmp	r2, r3
    b666:	dd00      	ble.n	b66a <_strtod_r+0x7ae>
    b668:	e1ee      	b.n	ba48 <_strtod_r+0xb8c>
    b66a:	2322      	movs	r3, #34	; 0x22
    b66c:	9a03      	ldr	r2, [sp, #12]
    b66e:	2600      	movs	r6, #0
    b670:	6013      	str	r3, [r2, #0]
    b672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b674:	2700      	movs	r7, #0
    b676:	2b00      	cmp	r3, #0
    b678:	d000      	beq.n	b67c <_strtod_r+0x7c0>
    b67a:	e1f7      	b.n	ba6c <_strtod_r+0xbb0>
    b67c:	e20a      	b.n	ba94 <_strtod_r+0xbd8>
    b67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b680:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    b682:	1ad4      	subs	r4, r2, r3
    b684:	e774      	b.n	b570 <_strtod_r+0x6b4>
    b686:	4988      	ldr	r1, [pc, #544]	; (b8a8 <_strtod_r+0x9ec>)
    b688:	1acb      	subs	r3, r1, r3
    b68a:	1c01      	adds	r1, r0, #0
    b68c:	4099      	lsls	r1, r3
    b68e:	9112      	str	r1, [sp, #72]	; 0x48
    b690:	e001      	b.n	b696 <_strtod_r+0x7da>
    b692:	2300      	movs	r3, #0
    b694:	9312      	str	r3, [sp, #72]	; 0x48
    b696:	9018      	str	r0, [sp, #96]	; 0x60
    b698:	e77d      	b.n	b596 <_strtod_r+0x6da>
    b69a:	1c1a      	adds	r2, r3, #0
    b69c:	9803      	ldr	r0, [sp, #12]
    b69e:	9905      	ldr	r1, [sp, #20]
    b6a0:	f002 f83e 	bl	d720 <__pow5mult>
    b6a4:	9005      	str	r0, [sp, #20]
    b6a6:	1e03      	subs	r3, r0, #0
    b6a8:	d100      	bne.n	b6ac <_strtod_r+0x7f0>
    b6aa:	e66b      	b.n	b384 <_strtod_r+0x4c8>
    b6ac:	9803      	ldr	r0, [sp, #12]
    b6ae:	1c19      	adds	r1, r3, #0
    b6b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    b6b2:	f001 ffa7 	bl	d604 <__multiply>
    b6b6:	900c      	str	r0, [sp, #48]	; 0x30
    b6b8:	2800      	cmp	r0, #0
    b6ba:	d100      	bne.n	b6be <_strtod_r+0x802>
    b6bc:	e662      	b.n	b384 <_strtod_r+0x4c8>
    b6be:	9803      	ldr	r0, [sp, #12]
    b6c0:	991e      	ldr	r1, [sp, #120]	; 0x78
    b6c2:	f001 feb7 	bl	d434 <_Bfree>
    b6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b6c8:	931e      	str	r3, [sp, #120]	; 0x78
    b6ca:	e77a      	b.n	b5c2 <_strtod_r+0x706>
    b6cc:	9803      	ldr	r0, [sp, #12]
    b6ce:	991e      	ldr	r1, [sp, #120]	; 0x78
    b6d0:	9a07      	ldr	r2, [sp, #28]
    b6d2:	f002 f877 	bl	d7c4 <__lshift>
    b6d6:	901e      	str	r0, [sp, #120]	; 0x78
    b6d8:	2800      	cmp	r0, #0
    b6da:	d000      	beq.n	b6de <_strtod_r+0x822>
    b6dc:	e775      	b.n	b5ca <_strtod_r+0x70e>
    b6de:	e651      	b.n	b384 <_strtod_r+0x4c8>
    b6e0:	9803      	ldr	r0, [sp, #12]
    b6e2:	9908      	ldr	r1, [sp, #32]
    b6e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b6e6:	f002 f81b 	bl	d720 <__pow5mult>
    b6ea:	9008      	str	r0, [sp, #32]
    b6ec:	2800      	cmp	r0, #0
    b6ee:	d000      	beq.n	b6f2 <_strtod_r+0x836>
    b6f0:	e76f      	b.n	b5d2 <_strtod_r+0x716>
    b6f2:	e647      	b.n	b384 <_strtod_r+0x4c8>
    b6f4:	9803      	ldr	r0, [sp, #12]
    b6f6:	9908      	ldr	r1, [sp, #32]
    b6f8:	1c22      	adds	r2, r4, #0
    b6fa:	f002 f863 	bl	d7c4 <__lshift>
    b6fe:	9008      	str	r0, [sp, #32]
    b700:	2800      	cmp	r0, #0
    b702:	d000      	beq.n	b706 <_strtod_r+0x84a>
    b704:	e768      	b.n	b5d8 <_strtod_r+0x71c>
    b706:	e63d      	b.n	b384 <_strtod_r+0x4c8>
    b708:	9803      	ldr	r0, [sp, #12]
    b70a:	9905      	ldr	r1, [sp, #20]
    b70c:	1c2a      	adds	r2, r5, #0
    b70e:	f002 f859 	bl	d7c4 <__lshift>
    b712:	9005      	str	r0, [sp, #20]
    b714:	2800      	cmp	r0, #0
    b716:	d000      	beq.n	b71a <_strtod_r+0x85e>
    b718:	e761      	b.n	b5de <_strtod_r+0x722>
    b71a:	e633      	b.n	b384 <_strtod_r+0x4c8>
    b71c:	9b04      	ldr	r3, [sp, #16]
    b71e:	691b      	ldr	r3, [r3, #16]
    b720:	9307      	str	r3, [sp, #28]
    b722:	2b01      	cmp	r3, #1
    b724:	dc84      	bgt.n	b630 <_strtod_r+0x774>
    b726:	e18c      	b.n	ba42 <_strtod_r+0xb86>
    b728:	2800      	cmp	r0, #0
    b72a:	d164      	bne.n	b7f6 <_strtod_r+0x93a>
    b72c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b72e:	033b      	lsls	r3, r7, #12
    b730:	2a00      	cmp	r2, #0
    b732:	d024      	beq.n	b77e <_strtod_r+0x8c2>
    b734:	4a5d      	ldr	r2, [pc, #372]	; (b8ac <_strtod_r+0x9f0>)
    b736:	1c39      	adds	r1, r7, #0
    b738:	0b1b      	lsrs	r3, r3, #12
    b73a:	4293      	cmp	r3, r2
    b73c:	d12d      	bne.n	b79a <_strtod_r+0x8de>
    b73e:	9a06      	ldr	r2, [sp, #24]
    b740:	3801      	subs	r0, #1
    b742:	1c34      	adds	r4, r6, #0
    b744:	1c03      	adds	r3, r0, #0
    b746:	2a00      	cmp	r2, #0
    b748:	d00a      	beq.n	b760 <_strtod_r+0x8a4>
    b74a:	25d4      	movs	r5, #212	; 0xd4
    b74c:	4a55      	ldr	r2, [pc, #340]	; (b8a4 <_strtod_r+0x9e8>)
    b74e:	04ed      	lsls	r5, r5, #19
    b750:	403a      	ands	r2, r7
    b752:	42aa      	cmp	r2, r5
    b754:	d804      	bhi.n	b760 <_strtod_r+0x8a4>
    b756:	336c      	adds	r3, #108	; 0x6c
    b758:	0d12      	lsrs	r2, r2, #20
    b75a:	1a9a      	subs	r2, r3, r2
    b75c:	1c03      	adds	r3, r0, #0
    b75e:	4093      	lsls	r3, r2
    b760:	429c      	cmp	r4, r3
    b762:	d11a      	bne.n	b79a <_strtod_r+0x8de>
    b764:	4b52      	ldr	r3, [pc, #328]	; (b8b0 <_strtod_r+0x9f4>)
    b766:	4299      	cmp	r1, r3
    b768:	d102      	bne.n	b770 <_strtod_r+0x8b4>
    b76a:	1c63      	adds	r3, r4, #1
    b76c:	d100      	bne.n	b770 <_strtod_r+0x8b4>
    b76e:	e609      	b.n	b384 <_strtod_r+0x4c8>
    b770:	4b4c      	ldr	r3, [pc, #304]	; (b8a4 <_strtod_r+0x9e8>)
    b772:	2600      	movs	r6, #0
    b774:	4019      	ands	r1, r3
    b776:	2380      	movs	r3, #128	; 0x80
    b778:	035b      	lsls	r3, r3, #13
    b77a:	18cf      	adds	r7, r1, r3
    b77c:	e161      	b.n	ba42 <_strtod_r+0xb86>
    b77e:	2b00      	cmp	r3, #0
    b780:	d10b      	bne.n	b79a <_strtod_r+0x8de>
    b782:	2e00      	cmp	r6, #0
    b784:	d109      	bne.n	b79a <_strtod_r+0x8de>
    b786:	e75f      	b.n	b648 <_strtod_r+0x78c>
    b788:	2601      	movs	r6, #1
    b78a:	4a4a      	ldr	r2, [pc, #296]	; (b8b4 <_strtod_r+0x9f8>)
    b78c:	403b      	ands	r3, r7
    b78e:	189b      	adds	r3, r3, r2
    b790:	4a46      	ldr	r2, [pc, #280]	; (b8ac <_strtod_r+0x9f0>)
    b792:	4276      	negs	r6, r6
    b794:	431a      	orrs	r2, r3
    b796:	1c17      	adds	r7, r2, #0
    b798:	e153      	b.n	ba42 <_strtod_r+0xb86>
    b79a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b79c:	2b00      	cmp	r3, #0
    b79e:	d003      	beq.n	b7a8 <_strtod_r+0x8ec>
    b7a0:	423b      	tst	r3, r7
    b7a2:	d100      	bne.n	b7a6 <_strtod_r+0x8ea>
    b7a4:	e14d      	b.n	ba42 <_strtod_r+0xb86>
    b7a6:	e003      	b.n	b7b0 <_strtod_r+0x8f4>
    b7a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    b7aa:	4233      	tst	r3, r6
    b7ac:	d100      	bne.n	b7b0 <_strtod_r+0x8f4>
    b7ae:	e148      	b.n	ba42 <_strtod_r+0xb86>
    b7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7b2:	1c30      	adds	r0, r6, #0
    b7b4:	1c39      	adds	r1, r7, #0
    b7b6:	9a06      	ldr	r2, [sp, #24]
    b7b8:	2b00      	cmp	r3, #0
    b7ba:	d00a      	beq.n	b7d2 <_strtod_r+0x916>
    b7bc:	f7ff fb68 	bl	ae90 <sulp>
    b7c0:	1c02      	adds	r2, r0, #0
    b7c2:	1c0b      	adds	r3, r1, #0
    b7c4:	980e      	ldr	r0, [sp, #56]	; 0x38
    b7c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7c8:	f7fb fb7c 	bl	6ec4 <__aeabi_dadd>
    b7cc:	1c06      	adds	r6, r0, #0
    b7ce:	1c0f      	adds	r7, r1, #0
    b7d0:	e137      	b.n	ba42 <_strtod_r+0xb86>
    b7d2:	f7ff fb5d 	bl	ae90 <sulp>
    b7d6:	1c02      	adds	r2, r0, #0
    b7d8:	1c0b      	adds	r3, r1, #0
    b7da:	980e      	ldr	r0, [sp, #56]	; 0x38
    b7dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7de:	f7fc fd71 	bl	82c4 <__aeabi_dsub>
    b7e2:	2200      	movs	r2, #0
    b7e4:	2300      	movs	r3, #0
    b7e6:	1c06      	adds	r6, r0, #0
    b7e8:	1c0f      	adds	r7, r1, #0
    b7ea:	f7fb faf5 	bl	6dd8 <__aeabi_dcmpeq>
    b7ee:	2800      	cmp	r0, #0
    b7f0:	d000      	beq.n	b7f4 <_strtod_r+0x938>
    b7f2:	e73a      	b.n	b66a <_strtod_r+0x7ae>
    b7f4:	e125      	b.n	ba42 <_strtod_r+0xb86>
    b7f6:	9804      	ldr	r0, [sp, #16]
    b7f8:	9905      	ldr	r1, [sp, #20]
    b7fa:	f002 f985 	bl	db08 <__ratio>
    b7fe:	2380      	movs	r3, #128	; 0x80
    b800:	2200      	movs	r2, #0
    b802:	05db      	lsls	r3, r3, #23
    b804:	1c04      	adds	r4, r0, #0
    b806:	1c0d      	adds	r5, r1, #0
    b808:	f7fb faf6 	bl	6df8 <__aeabi_dcmple>
    b80c:	2800      	cmp	r0, #0
    b80e:	d036      	beq.n	b87e <_strtod_r+0x9c2>
    b810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b812:	2b00      	cmp	r3, #0
    b814:	d002      	beq.n	b81c <_strtod_r+0x960>
    b816:	2400      	movs	r4, #0
    b818:	4d27      	ldr	r5, [pc, #156]	; (b8b8 <_strtod_r+0x9fc>)
    b81a:	e00b      	b.n	b834 <_strtod_r+0x978>
    b81c:	2e00      	cmp	r6, #0
    b81e:	d102      	bne.n	b826 <_strtod_r+0x96a>
    b820:	033b      	lsls	r3, r7, #12
    b822:	d105      	bne.n	b830 <_strtod_r+0x974>
    b824:	e00b      	b.n	b83e <_strtod_r+0x982>
    b826:	2e01      	cmp	r6, #1
    b828:	d102      	bne.n	b830 <_strtod_r+0x974>
    b82a:	2f00      	cmp	r7, #0
    b82c:	d100      	bne.n	b830 <_strtod_r+0x974>
    b82e:	e71c      	b.n	b66a <_strtod_r+0x7ae>
    b830:	2400      	movs	r4, #0
    b832:	4d22      	ldr	r5, [pc, #136]	; (b8bc <_strtod_r+0xa00>)
    b834:	2300      	movs	r3, #0
    b836:	9307      	str	r3, [sp, #28]
    b838:	4b1f      	ldr	r3, [pc, #124]	; (b8b8 <_strtod_r+0x9fc>)
    b83a:	930a      	str	r3, [sp, #40]	; 0x28
    b83c:	e048      	b.n	b8d0 <_strtod_r+0xa14>
    b83e:	1c20      	adds	r0, r4, #0
    b840:	1c29      	adds	r1, r5, #0
    b842:	2200      	movs	r2, #0
    b844:	4b1c      	ldr	r3, [pc, #112]	; (b8b8 <_strtod_r+0x9fc>)
    b846:	f7fb facd 	bl	6de4 <__aeabi_dcmplt>
    b84a:	2800      	cmp	r0, #0
    b84c:	d108      	bne.n	b860 <_strtod_r+0x9a4>
    b84e:	1c20      	adds	r0, r4, #0
    b850:	1c29      	adds	r1, r5, #0
    b852:	2200      	movs	r2, #0
    b854:	4b1a      	ldr	r3, [pc, #104]	; (b8c0 <_strtod_r+0xa04>)
    b856:	f7fc fa9b 	bl	7d90 <__aeabi_dmul>
    b85a:	9007      	str	r0, [sp, #28]
    b85c:	910a      	str	r1, [sp, #40]	; 0x28
    b85e:	e003      	b.n	b868 <_strtod_r+0x9ac>
    b860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b862:	9307      	str	r3, [sp, #28]
    b864:	4b16      	ldr	r3, [pc, #88]	; (b8c0 <_strtod_r+0xa04>)
    b866:	930a      	str	r3, [sp, #40]	; 0x28
    b868:	2280      	movs	r2, #128	; 0x80
    b86a:	0612      	lsls	r2, r2, #24
    b86c:	4694      	mov	ip, r2
    b86e:	9b07      	ldr	r3, [sp, #28]
    b870:	931a      	str	r3, [sp, #104]	; 0x68
    b872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b874:	4463      	add	r3, ip
    b876:	931b      	str	r3, [sp, #108]	; 0x6c
    b878:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    b87a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
    b87c:	e028      	b.n	b8d0 <_strtod_r+0xa14>
    b87e:	4b10      	ldr	r3, [pc, #64]	; (b8c0 <_strtod_r+0xa04>)
    b880:	1c20      	adds	r0, r4, #0
    b882:	1c29      	adds	r1, r5, #0
    b884:	2200      	movs	r2, #0
    b886:	f7fc fa83 	bl	7d90 <__aeabi_dmul>
    b88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b88c:	9007      	str	r0, [sp, #28]
    b88e:	910a      	str	r1, [sp, #40]	; 0x28
    b890:	2b00      	cmp	r3, #0
    b892:	d117      	bne.n	b8c4 <_strtod_r+0xa08>
    b894:	2380      	movs	r3, #128	; 0x80
    b896:	061b      	lsls	r3, r3, #24
    b898:	18cb      	adds	r3, r1, r3
    b89a:	9014      	str	r0, [sp, #80]	; 0x50
    b89c:	9315      	str	r3, [sp, #84]	; 0x54
    b89e:	e015      	b.n	b8cc <_strtod_r+0xa10>
    b8a0:	fffffc03 	.word	0xfffffc03
    b8a4:	7ff00000 	.word	0x7ff00000
    b8a8:	fffffbe3 	.word	0xfffffbe3
    b8ac:	000fffff 	.word	0x000fffff
    b8b0:	7fefffff 	.word	0x7fefffff
    b8b4:	fff00000 	.word	0xfff00000
    b8b8:	3ff00000 	.word	0x3ff00000
    b8bc:	bff00000 	.word	0xbff00000
    b8c0:	3fe00000 	.word	0x3fe00000
    b8c4:	9a07      	ldr	r2, [sp, #28]
    b8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b8c8:	9214      	str	r2, [sp, #80]	; 0x50
    b8ca:	9315      	str	r3, [sp, #84]	; 0x54
    b8cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b8ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
    b8d0:	4b7a      	ldr	r3, [pc, #488]	; (babc <_strtod_r+0xc00>)
    b8d2:	403b      	ands	r3, r7
    b8d4:	9312      	str	r3, [sp, #72]	; 0x48
    b8d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b8d8:	4b79      	ldr	r3, [pc, #484]	; (bac0 <_strtod_r+0xc04>)
    b8da:	429a      	cmp	r2, r3
    b8dc:	d12b      	bne.n	b936 <_strtod_r+0xa7a>
    b8de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b8e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b8e2:	9210      	str	r2, [sp, #64]	; 0x40
    b8e4:	9311      	str	r3, [sp, #68]	; 0x44
    b8e6:	4b77      	ldr	r3, [pc, #476]	; (bac4 <_strtod_r+0xc08>)
    b8e8:	1c30      	adds	r0, r6, #0
    b8ea:	18ff      	adds	r7, r7, r3
    b8ec:	1c39      	adds	r1, r7, #0
    b8ee:	f002 f841 	bl	d974 <__ulp>
    b8f2:	1c02      	adds	r2, r0, #0
    b8f4:	1c0b      	adds	r3, r1, #0
    b8f6:	1c20      	adds	r0, r4, #0
    b8f8:	1c29      	adds	r1, r5, #0
    b8fa:	f7fc fa49 	bl	7d90 <__aeabi_dmul>
    b8fe:	1c02      	adds	r2, r0, #0
    b900:	1c0b      	adds	r3, r1, #0
    b902:	1c30      	adds	r0, r6, #0
    b904:	1c39      	adds	r1, r7, #0
    b906:	f7fb fadd 	bl	6ec4 <__aeabi_dadd>
    b90a:	4b6c      	ldr	r3, [pc, #432]	; (babc <_strtod_r+0xc00>)
    b90c:	4a6e      	ldr	r2, [pc, #440]	; (bac8 <_strtod_r+0xc0c>)
    b90e:	1c06      	adds	r6, r0, #0
    b910:	400b      	ands	r3, r1
    b912:	4293      	cmp	r3, r2
    b914:	d90b      	bls.n	b92e <_strtod_r+0xa72>
    b916:	4b6d      	ldr	r3, [pc, #436]	; (bacc <_strtod_r+0xc10>)
    b918:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b91a:	429a      	cmp	r2, r3
    b91c:	d103      	bne.n	b926 <_strtod_r+0xa6a>
    b91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b920:	3301      	adds	r3, #1
    b922:	d100      	bne.n	b926 <_strtod_r+0xa6a>
    b924:	e52e      	b.n	b384 <_strtod_r+0x4c8>
    b926:	2601      	movs	r6, #1
    b928:	4f68      	ldr	r7, [pc, #416]	; (bacc <_strtod_r+0xc10>)
    b92a:	4276      	negs	r6, r6
    b92c:	e078      	b.n	ba20 <_strtod_r+0xb64>
    b92e:	23d4      	movs	r3, #212	; 0xd4
    b930:	049b      	lsls	r3, r3, #18
    b932:	18cf      	adds	r7, r1, r3
    b934:	e040      	b.n	b9b8 <_strtod_r+0xafc>
    b936:	9b06      	ldr	r3, [sp, #24]
    b938:	2b00      	cmp	r3, #0
    b93a:	d02b      	beq.n	b994 <_strtod_r+0xad8>
    b93c:	23d4      	movs	r3, #212	; 0xd4
    b93e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b940:	04db      	lsls	r3, r3, #19
    b942:	429a      	cmp	r2, r3
    b944:	d826      	bhi.n	b994 <_strtod_r+0xad8>
    b946:	9807      	ldr	r0, [sp, #28]
    b948:	990a      	ldr	r1, [sp, #40]	; 0x28
    b94a:	4a61      	ldr	r2, [pc, #388]	; (bad0 <_strtod_r+0xc14>)
    b94c:	4b61      	ldr	r3, [pc, #388]	; (bad4 <_strtod_r+0xc18>)
    b94e:	f7fb fa53 	bl	6df8 <__aeabi_dcmple>
    b952:	2800      	cmp	r0, #0
    b954:	d019      	beq.n	b98a <_strtod_r+0xace>
    b956:	9807      	ldr	r0, [sp, #28]
    b958:	990a      	ldr	r1, [sp, #40]	; 0x28
    b95a:	f7fb fa95 	bl	6e88 <__aeabi_d2uiz>
    b95e:	2800      	cmp	r0, #0
    b960:	d100      	bne.n	b964 <_strtod_r+0xaa8>
    b962:	3001      	adds	r0, #1
    b964:	f7fd f89a 	bl	8a9c <__aeabi_ui2d>
    b968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b96a:	9007      	str	r0, [sp, #28]
    b96c:	910a      	str	r1, [sp, #40]	; 0x28
    b96e:	2b00      	cmp	r3, #0
    b970:	d105      	bne.n	b97e <_strtod_r+0xac2>
    b972:	2380      	movs	r3, #128	; 0x80
    b974:	061b      	lsls	r3, r3, #24
    b976:	18cb      	adds	r3, r1, r3
    b978:	9016      	str	r0, [sp, #88]	; 0x58
    b97a:	9317      	str	r3, [sp, #92]	; 0x5c
    b97c:	e003      	b.n	b986 <_strtod_r+0xaca>
    b97e:	9a07      	ldr	r2, [sp, #28]
    b980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b982:	9216      	str	r2, [sp, #88]	; 0x58
    b984:	9317      	str	r3, [sp, #92]	; 0x5c
    b986:	9c16      	ldr	r4, [sp, #88]	; 0x58
    b988:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    b98a:	23d6      	movs	r3, #214	; 0xd6
    b98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b98e:	04db      	lsls	r3, r3, #19
    b990:	18eb      	adds	r3, r5, r3
    b992:	1a9d      	subs	r5, r3, r2
    b994:	980e      	ldr	r0, [sp, #56]	; 0x38
    b996:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b998:	f001 ffec 	bl	d974 <__ulp>
    b99c:	1c02      	adds	r2, r0, #0
    b99e:	1c0b      	adds	r3, r1, #0
    b9a0:	1c20      	adds	r0, r4, #0
    b9a2:	1c29      	adds	r1, r5, #0
    b9a4:	f7fc f9f4 	bl	7d90 <__aeabi_dmul>
    b9a8:	1c02      	adds	r2, r0, #0
    b9aa:	1c0b      	adds	r3, r1, #0
    b9ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    b9ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b9b0:	f7fb fa88 	bl	6ec4 <__aeabi_dadd>
    b9b4:	1c06      	adds	r6, r0, #0
    b9b6:	1c0f      	adds	r7, r1, #0
    b9b8:	9b06      	ldr	r3, [sp, #24]
    b9ba:	970e      	str	r7, [sp, #56]	; 0x38
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d12f      	bne.n	ba20 <_strtod_r+0xb64>
    b9c0:	4b3e      	ldr	r3, [pc, #248]	; (babc <_strtod_r+0xc00>)
    b9c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b9c4:	403b      	ands	r3, r7
    b9c6:	429a      	cmp	r2, r3
    b9c8:	d12a      	bne.n	ba20 <_strtod_r+0xb64>
    b9ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9cc:	9807      	ldr	r0, [sp, #28]
    b9ce:	f7fc fff3 	bl	89b8 <__aeabi_d2iz>
    b9d2:	f7fd f827 	bl	8a24 <__aeabi_i2d>
    b9d6:	1c0b      	adds	r3, r1, #0
    b9d8:	1c02      	adds	r2, r0, #0
    b9da:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9dc:	9807      	ldr	r0, [sp, #28]
    b9de:	f7fc fc71 	bl	82c4 <__aeabi_dsub>
    b9e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b9e4:	1c04      	adds	r4, r0, #0
    b9e6:	1c0d      	adds	r5, r1, #0
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d104      	bne.n	b9f6 <_strtod_r+0xb3a>
    b9ec:	2e00      	cmp	r6, #0
    b9ee:	d102      	bne.n	b9f6 <_strtod_r+0xb3a>
    b9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b9f2:	031b      	lsls	r3, r3, #12
    b9f4:	d00e      	beq.n	ba14 <_strtod_r+0xb58>
    b9f6:	1c20      	adds	r0, r4, #0
    b9f8:	1c29      	adds	r1, r5, #0
    b9fa:	4a37      	ldr	r2, [pc, #220]	; (bad8 <_strtod_r+0xc1c>)
    b9fc:	4b37      	ldr	r3, [pc, #220]	; (badc <_strtod_r+0xc20>)
    b9fe:	f7fb f9f1 	bl	6de4 <__aeabi_dcmplt>
    ba02:	2800      	cmp	r0, #0
    ba04:	d132      	bne.n	ba6c <_strtod_r+0xbb0>
    ba06:	1c20      	adds	r0, r4, #0
    ba08:	1c29      	adds	r1, r5, #0
    ba0a:	4a35      	ldr	r2, [pc, #212]	; (bae0 <_strtod_r+0xc24>)
    ba0c:	4b35      	ldr	r3, [pc, #212]	; (bae4 <_strtod_r+0xc28>)
    ba0e:	f7fb f9fd 	bl	6e0c <__aeabi_dcmpgt>
    ba12:	e003      	b.n	ba1c <_strtod_r+0xb60>
    ba14:	4a30      	ldr	r2, [pc, #192]	; (bad8 <_strtod_r+0xc1c>)
    ba16:	4b34      	ldr	r3, [pc, #208]	; (bae8 <_strtod_r+0xc2c>)
    ba18:	f7fb f9e4 	bl	6de4 <__aeabi_dcmplt>
    ba1c:	2800      	cmp	r0, #0
    ba1e:	d125      	bne.n	ba6c <_strtod_r+0xbb0>
    ba20:	9803      	ldr	r0, [sp, #12]
    ba22:	991e      	ldr	r1, [sp, #120]	; 0x78
    ba24:	f001 fd06 	bl	d434 <_Bfree>
    ba28:	9803      	ldr	r0, [sp, #12]
    ba2a:	9908      	ldr	r1, [sp, #32]
    ba2c:	f001 fd02 	bl	d434 <_Bfree>
    ba30:	9803      	ldr	r0, [sp, #12]
    ba32:	9905      	ldr	r1, [sp, #20]
    ba34:	f001 fcfe 	bl	d434 <_Bfree>
    ba38:	9803      	ldr	r0, [sp, #12]
    ba3a:	9904      	ldr	r1, [sp, #16]
    ba3c:	f001 fcfa 	bl	d434 <_Bfree>
    ba40:	e55f      	b.n	b502 <_strtod_r+0x646>
    ba42:	9b06      	ldr	r3, [sp, #24]
    ba44:	2b00      	cmp	r3, #0
    ba46:	d011      	beq.n	ba6c <_strtod_r+0xbb0>
    ba48:	4b28      	ldr	r3, [pc, #160]	; (baec <_strtod_r+0xc30>)
    ba4a:	1c30      	adds	r0, r6, #0
    ba4c:	9311      	str	r3, [sp, #68]	; 0x44
    ba4e:	2300      	movs	r3, #0
    ba50:	9310      	str	r3, [sp, #64]	; 0x40
    ba52:	1c39      	adds	r1, r7, #0
    ba54:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ba56:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ba58:	f7fc f99a 	bl	7d90 <__aeabi_dmul>
    ba5c:	1c06      	adds	r6, r0, #0
    ba5e:	1e0f      	subs	r7, r1, #0
    ba60:	d104      	bne.n	ba6c <_strtod_r+0xbb0>
    ba62:	2800      	cmp	r0, #0
    ba64:	d102      	bne.n	ba6c <_strtod_r+0xbb0>
    ba66:	2322      	movs	r3, #34	; 0x22
    ba68:	9a03      	ldr	r2, [sp, #12]
    ba6a:	6013      	str	r3, [r2, #0]
    ba6c:	9803      	ldr	r0, [sp, #12]
    ba6e:	991e      	ldr	r1, [sp, #120]	; 0x78
    ba70:	f001 fce0 	bl	d434 <_Bfree>
    ba74:	9803      	ldr	r0, [sp, #12]
    ba76:	9908      	ldr	r1, [sp, #32]
    ba78:	f001 fcdc 	bl	d434 <_Bfree>
    ba7c:	9803      	ldr	r0, [sp, #12]
    ba7e:	9905      	ldr	r1, [sp, #20]
    ba80:	f001 fcd8 	bl	d434 <_Bfree>
    ba84:	9803      	ldr	r0, [sp, #12]
    ba86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ba88:	f001 fcd4 	bl	d434 <_Bfree>
    ba8c:	9803      	ldr	r0, [sp, #12]
    ba8e:	9904      	ldr	r1, [sp, #16]
    ba90:	f001 fcd0 	bl	d434 <_Bfree>
    ba94:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba96:	2b00      	cmp	r3, #0
    ba98:	d002      	beq.n	baa0 <_strtod_r+0xbe4>
    ba9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ba9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ba9e:	601a      	str	r2, [r3, #0]
    baa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    baa2:	2b00      	cmp	r3, #0
    baa4:	d004      	beq.n	bab0 <_strtod_r+0xbf4>
    baa6:	2380      	movs	r3, #128	; 0x80
    baa8:	061b      	lsls	r3, r3, #24
    baaa:	1c32      	adds	r2, r6, #0
    baac:	18fb      	adds	r3, r7, r3
    baae:	e001      	b.n	bab4 <_strtod_r+0xbf8>
    bab0:	1c32      	adds	r2, r6, #0
    bab2:	1c3b      	adds	r3, r7, #0
    bab4:	1c10      	adds	r0, r2, #0
    bab6:	1c19      	adds	r1, r3, #0
    bab8:	b023      	add	sp, #140	; 0x8c
    baba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    babc:	7ff00000 	.word	0x7ff00000
    bac0:	7fe00000 	.word	0x7fe00000
    bac4:	fcb00000 	.word	0xfcb00000
    bac8:	7c9fffff 	.word	0x7c9fffff
    bacc:	7fefffff 	.word	0x7fefffff
    bad0:	ffc00000 	.word	0xffc00000
    bad4:	41dfffff 	.word	0x41dfffff
    bad8:	94a03595 	.word	0x94a03595
    badc:	3fdfffff 	.word	0x3fdfffff
    bae0:	35afe535 	.word	0x35afe535
    bae4:	3fe00000 	.word	0x3fe00000
    bae8:	3fcfffff 	.word	0x3fcfffff
    baec:	39500000 	.word	0x39500000

0000baf0 <_strtol_r>:
    baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    baf2:	1c1e      	adds	r6, r3, #0
    baf4:	4b44      	ldr	r3, [pc, #272]	; (bc08 <_strtol_r+0x118>)
    baf6:	b087      	sub	sp, #28
    baf8:	681b      	ldr	r3, [r3, #0]
    bafa:	9005      	str	r0, [sp, #20]
    bafc:	9302      	str	r3, [sp, #8]
    bafe:	1c0b      	adds	r3, r1, #0
    bb00:	9103      	str	r1, [sp, #12]
    bb02:	9201      	str	r2, [sp, #4]
    bb04:	781c      	ldrb	r4, [r3, #0]
    bb06:	9a02      	ldr	r2, [sp, #8]
    bb08:	1c5d      	adds	r5, r3, #1
    bb0a:	1912      	adds	r2, r2, r4
    bb0c:	7850      	ldrb	r0, [r2, #1]
    bb0e:	2208      	movs	r2, #8
    bb10:	4010      	ands	r0, r2
    bb12:	d001      	beq.n	bb18 <_strtol_r+0x28>
    bb14:	1c2b      	adds	r3, r5, #0
    bb16:	e7f5      	b.n	bb04 <_strtol_r+0x14>
    bb18:	2c2d      	cmp	r4, #45	; 0x2d
    bb1a:	d104      	bne.n	bb26 <_strtol_r+0x36>
    bb1c:	1c9d      	adds	r5, r3, #2
    bb1e:	785c      	ldrb	r4, [r3, #1]
    bb20:	2301      	movs	r3, #1
    bb22:	9300      	str	r3, [sp, #0]
    bb24:	e004      	b.n	bb30 <_strtol_r+0x40>
    bb26:	9000      	str	r0, [sp, #0]
    bb28:	2c2b      	cmp	r4, #43	; 0x2b
    bb2a:	d101      	bne.n	bb30 <_strtol_r+0x40>
    bb2c:	785c      	ldrb	r4, [r3, #1]
    bb2e:	1c9d      	adds	r5, r3, #2
    bb30:	2e00      	cmp	r6, #0
    bb32:	d002      	beq.n	bb3a <_strtol_r+0x4a>
    bb34:	2e10      	cmp	r6, #16
    bb36:	d10a      	bne.n	bb4e <_strtol_r+0x5e>
    bb38:	e060      	b.n	bbfc <_strtol_r+0x10c>
    bb3a:	2c30      	cmp	r4, #48	; 0x30
    bb3c:	d15c      	bne.n	bbf8 <_strtol_r+0x108>
    bb3e:	2220      	movs	r2, #32
    bb40:	782b      	ldrb	r3, [r5, #0]
    bb42:	4393      	bics	r3, r2
    bb44:	2b58      	cmp	r3, #88	; 0x58
    bb46:	d152      	bne.n	bbee <_strtol_r+0xfe>
    bb48:	2610      	movs	r6, #16
    bb4a:	786c      	ldrb	r4, [r5, #1]
    bb4c:	3502      	adds	r5, #2
    bb4e:	9f00      	ldr	r7, [sp, #0]
    bb50:	1c31      	adds	r1, r6, #0
    bb52:	1e7b      	subs	r3, r7, #1
    bb54:	419f      	sbcs	r7, r3
    bb56:	4b2d      	ldr	r3, [pc, #180]	; (bc0c <_strtol_r+0x11c>)
    bb58:	18ff      	adds	r7, r7, r3
    bb5a:	1c38      	adds	r0, r7, #0
    bb5c:	f7fb f830 	bl	6bc0 <__aeabi_uidivmod>
    bb60:	1c38      	adds	r0, r7, #0
    bb62:	9104      	str	r1, [sp, #16]
    bb64:	1c31      	adds	r1, r6, #0
    bb66:	f7fa ffa5 	bl	6ab4 <__aeabi_uidiv>
    bb6a:	2200      	movs	r2, #0
    bb6c:	1c07      	adds	r7, r0, #0
    bb6e:	1c13      	adds	r3, r2, #0
    bb70:	9902      	ldr	r1, [sp, #8]
    bb72:	1909      	adds	r1, r1, r4
    bb74:	7849      	ldrb	r1, [r1, #1]
    bb76:	0748      	lsls	r0, r1, #29
    bb78:	d501      	bpl.n	bb7e <_strtol_r+0x8e>
    bb7a:	3c30      	subs	r4, #48	; 0x30
    bb7c:	e007      	b.n	bb8e <_strtol_r+0x9e>
    bb7e:	2003      	movs	r0, #3
    bb80:	4008      	ands	r0, r1
    bb82:	d017      	beq.n	bbb4 <_strtol_r+0xc4>
    bb84:	2137      	movs	r1, #55	; 0x37
    bb86:	2801      	cmp	r0, #1
    bb88:	d000      	beq.n	bb8c <_strtol_r+0x9c>
    bb8a:	3120      	adds	r1, #32
    bb8c:	1a64      	subs	r4, r4, r1
    bb8e:	42b4      	cmp	r4, r6
    bb90:	da10      	bge.n	bbb4 <_strtol_r+0xc4>
    bb92:	1c51      	adds	r1, r2, #1
    bb94:	d00b      	beq.n	bbae <_strtol_r+0xbe>
    bb96:	42bb      	cmp	r3, r7
    bb98:	d807      	bhi.n	bbaa <_strtol_r+0xba>
    bb9a:	d102      	bne.n	bba2 <_strtol_r+0xb2>
    bb9c:	9a04      	ldr	r2, [sp, #16]
    bb9e:	4294      	cmp	r4, r2
    bba0:	dc03      	bgt.n	bbaa <_strtol_r+0xba>
    bba2:	4373      	muls	r3, r6
    bba4:	2201      	movs	r2, #1
    bba6:	18e3      	adds	r3, r4, r3
    bba8:	e001      	b.n	bbae <_strtol_r+0xbe>
    bbaa:	2201      	movs	r2, #1
    bbac:	4252      	negs	r2, r2
    bbae:	782c      	ldrb	r4, [r5, #0]
    bbb0:	3501      	adds	r5, #1
    bbb2:	e7dd      	b.n	bb70 <_strtol_r+0x80>
    bbb4:	1c18      	adds	r0, r3, #0
    bbb6:	1c51      	adds	r1, r2, #1
    bbb8:	d10b      	bne.n	bbd2 <_strtol_r+0xe2>
    bbba:	9800      	ldr	r0, [sp, #0]
    bbbc:	9a05      	ldr	r2, [sp, #20]
    bbbe:	1e43      	subs	r3, r0, #1
    bbc0:	4198      	sbcs	r0, r3
    bbc2:	4b12      	ldr	r3, [pc, #72]	; (bc0c <_strtol_r+0x11c>)
    bbc4:	18c0      	adds	r0, r0, r3
    bbc6:	2322      	movs	r3, #34	; 0x22
    bbc8:	6013      	str	r3, [r2, #0]
    bbca:	9b01      	ldr	r3, [sp, #4]
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d10a      	bne.n	bbe6 <_strtol_r+0xf6>
    bbd0:	e017      	b.n	bc02 <_strtol_r+0x112>
    bbd2:	9900      	ldr	r1, [sp, #0]
    bbd4:	2900      	cmp	r1, #0
    bbd6:	d000      	beq.n	bbda <_strtol_r+0xea>
    bbd8:	4258      	negs	r0, r3
    bbda:	9b01      	ldr	r3, [sp, #4]
    bbdc:	2b00      	cmp	r3, #0
    bbde:	d010      	beq.n	bc02 <_strtol_r+0x112>
    bbe0:	9b03      	ldr	r3, [sp, #12]
    bbe2:	2a00      	cmp	r2, #0
    bbe4:	d000      	beq.n	bbe8 <_strtol_r+0xf8>
    bbe6:	1e6b      	subs	r3, r5, #1
    bbe8:	9a01      	ldr	r2, [sp, #4]
    bbea:	6013      	str	r3, [r2, #0]
    bbec:	e009      	b.n	bc02 <_strtol_r+0x112>
    bbee:	2430      	movs	r4, #48	; 0x30
    bbf0:	2e00      	cmp	r6, #0
    bbf2:	d1ac      	bne.n	bb4e <_strtol_r+0x5e>
    bbf4:	2608      	movs	r6, #8
    bbf6:	e7aa      	b.n	bb4e <_strtol_r+0x5e>
    bbf8:	260a      	movs	r6, #10
    bbfa:	e7a8      	b.n	bb4e <_strtol_r+0x5e>
    bbfc:	2c30      	cmp	r4, #48	; 0x30
    bbfe:	d1a6      	bne.n	bb4e <_strtol_r+0x5e>
    bc00:	e79d      	b.n	bb3e <_strtol_r+0x4e>
    bc02:	b007      	add	sp, #28
    bc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc06:	46c0      	nop			; (mov r8, r8)
    bc08:	20000138 	.word	0x20000138
    bc0c:	7fffffff 	.word	0x7fffffff

0000bc10 <_strtoul_r>:
    bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc12:	1c1e      	adds	r6, r3, #0
    bc14:	4b3e      	ldr	r3, [pc, #248]	; (bd10 <_strtoul_r+0x100>)
    bc16:	b087      	sub	sp, #28
    bc18:	681b      	ldr	r3, [r3, #0]
    bc1a:	1c17      	adds	r7, r2, #0
    bc1c:	9302      	str	r3, [sp, #8]
    bc1e:	1c0b      	adds	r3, r1, #0
    bc20:	9005      	str	r0, [sp, #20]
    bc22:	9104      	str	r1, [sp, #16]
    bc24:	781c      	ldrb	r4, [r3, #0]
    bc26:	9a02      	ldr	r2, [sp, #8]
    bc28:	1c5d      	adds	r5, r3, #1
    bc2a:	1912      	adds	r2, r2, r4
    bc2c:	7851      	ldrb	r1, [r2, #1]
    bc2e:	2208      	movs	r2, #8
    bc30:	400a      	ands	r2, r1
    bc32:	d001      	beq.n	bc38 <_strtoul_r+0x28>
    bc34:	1c2b      	adds	r3, r5, #0
    bc36:	e7f5      	b.n	bc24 <_strtoul_r+0x14>
    bc38:	2c2d      	cmp	r4, #45	; 0x2d
    bc3a:	d104      	bne.n	bc46 <_strtoul_r+0x36>
    bc3c:	1c9d      	adds	r5, r3, #2
    bc3e:	785c      	ldrb	r4, [r3, #1]
    bc40:	2301      	movs	r3, #1
    bc42:	9301      	str	r3, [sp, #4]
    bc44:	e004      	b.n	bc50 <_strtoul_r+0x40>
    bc46:	9201      	str	r2, [sp, #4]
    bc48:	2c2b      	cmp	r4, #43	; 0x2b
    bc4a:	d101      	bne.n	bc50 <_strtoul_r+0x40>
    bc4c:	785c      	ldrb	r4, [r3, #1]
    bc4e:	1c9d      	adds	r5, r3, #2
    bc50:	2e00      	cmp	r6, #0
    bc52:	d002      	beq.n	bc5a <_strtoul_r+0x4a>
    bc54:	2e10      	cmp	r6, #16
    bc56:	d10a      	bne.n	bc6e <_strtoul_r+0x5e>
    bc58:	e054      	b.n	bd04 <_strtoul_r+0xf4>
    bc5a:	2c30      	cmp	r4, #48	; 0x30
    bc5c:	d150      	bne.n	bd00 <_strtoul_r+0xf0>
    bc5e:	2220      	movs	r2, #32
    bc60:	782b      	ldrb	r3, [r5, #0]
    bc62:	4393      	bics	r3, r2
    bc64:	2b58      	cmp	r3, #88	; 0x58
    bc66:	d146      	bne.n	bcf6 <_strtoul_r+0xe6>
    bc68:	2610      	movs	r6, #16
    bc6a:	786c      	ldrb	r4, [r5, #1]
    bc6c:	3502      	adds	r5, #2
    bc6e:	2001      	movs	r0, #1
    bc70:	1c31      	adds	r1, r6, #0
    bc72:	4240      	negs	r0, r0
    bc74:	f7fa ff1e 	bl	6ab4 <__aeabi_uidiv>
    bc78:	9003      	str	r0, [sp, #12]
    bc7a:	2001      	movs	r0, #1
    bc7c:	1c31      	adds	r1, r6, #0
    bc7e:	4240      	negs	r0, r0
    bc80:	f7fa ff9e 	bl	6bc0 <__aeabi_uidivmod>
    bc84:	2200      	movs	r2, #0
    bc86:	468c      	mov	ip, r1
    bc88:	1c13      	adds	r3, r2, #0
    bc8a:	9902      	ldr	r1, [sp, #8]
    bc8c:	1909      	adds	r1, r1, r4
    bc8e:	7849      	ldrb	r1, [r1, #1]
    bc90:	0748      	lsls	r0, r1, #29
    bc92:	d501      	bpl.n	bc98 <_strtoul_r+0x88>
    bc94:	3c30      	subs	r4, #48	; 0x30
    bc96:	e007      	b.n	bca8 <_strtoul_r+0x98>
    bc98:	2003      	movs	r0, #3
    bc9a:	4008      	ands	r0, r1
    bc9c:	d017      	beq.n	bcce <_strtoul_r+0xbe>
    bc9e:	2137      	movs	r1, #55	; 0x37
    bca0:	2801      	cmp	r0, #1
    bca2:	d000      	beq.n	bca6 <_strtoul_r+0x96>
    bca4:	3120      	adds	r1, #32
    bca6:	1a64      	subs	r4, r4, r1
    bca8:	42b4      	cmp	r4, r6
    bcaa:	da10      	bge.n	bcce <_strtoul_r+0xbe>
    bcac:	1c51      	adds	r1, r2, #1
    bcae:	d00b      	beq.n	bcc8 <_strtoul_r+0xb8>
    bcb0:	9a03      	ldr	r2, [sp, #12]
    bcb2:	4293      	cmp	r3, r2
    bcb4:	d806      	bhi.n	bcc4 <_strtoul_r+0xb4>
    bcb6:	d101      	bne.n	bcbc <_strtoul_r+0xac>
    bcb8:	4564      	cmp	r4, ip
    bcba:	dc03      	bgt.n	bcc4 <_strtoul_r+0xb4>
    bcbc:	4373      	muls	r3, r6
    bcbe:	2201      	movs	r2, #1
    bcc0:	18e3      	adds	r3, r4, r3
    bcc2:	e001      	b.n	bcc8 <_strtoul_r+0xb8>
    bcc4:	2201      	movs	r2, #1
    bcc6:	4252      	negs	r2, r2
    bcc8:	782c      	ldrb	r4, [r5, #0]
    bcca:	3501      	adds	r5, #1
    bccc:	e7dd      	b.n	bc8a <_strtoul_r+0x7a>
    bcce:	1c18      	adds	r0, r3, #0
    bcd0:	1c51      	adds	r1, r2, #1
    bcd2:	d104      	bne.n	bcde <_strtoul_r+0xce>
    bcd4:	2322      	movs	r3, #34	; 0x22
    bcd6:	9905      	ldr	r1, [sp, #20]
    bcd8:	1c10      	adds	r0, r2, #0
    bcda:	600b      	str	r3, [r1, #0]
    bcdc:	e003      	b.n	bce6 <_strtoul_r+0xd6>
    bcde:	9901      	ldr	r1, [sp, #4]
    bce0:	2900      	cmp	r1, #0
    bce2:	d000      	beq.n	bce6 <_strtoul_r+0xd6>
    bce4:	4258      	negs	r0, r3
    bce6:	2f00      	cmp	r7, #0
    bce8:	d00f      	beq.n	bd0a <_strtoul_r+0xfa>
    bcea:	9b04      	ldr	r3, [sp, #16]
    bcec:	2a00      	cmp	r2, #0
    bcee:	d000      	beq.n	bcf2 <_strtoul_r+0xe2>
    bcf0:	1e6b      	subs	r3, r5, #1
    bcf2:	603b      	str	r3, [r7, #0]
    bcf4:	e009      	b.n	bd0a <_strtoul_r+0xfa>
    bcf6:	2430      	movs	r4, #48	; 0x30
    bcf8:	2e00      	cmp	r6, #0
    bcfa:	d1b8      	bne.n	bc6e <_strtoul_r+0x5e>
    bcfc:	2608      	movs	r6, #8
    bcfe:	e7b6      	b.n	bc6e <_strtoul_r+0x5e>
    bd00:	260a      	movs	r6, #10
    bd02:	e7b4      	b.n	bc6e <_strtoul_r+0x5e>
    bd04:	2c30      	cmp	r4, #48	; 0x30
    bd06:	d1b2      	bne.n	bc6e <_strtoul_r+0x5e>
    bd08:	e7a9      	b.n	bc5e <_strtoul_r+0x4e>
    bd0a:	b007      	add	sp, #28
    bd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd0e:	46c0      	nop			; (mov r8, r8)
    bd10:	20000138 	.word	0x20000138

0000bd14 <__submore>:
    bd14:	1c0b      	adds	r3, r1, #0
    bd16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd18:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    bd1a:	3344      	adds	r3, #68	; 0x44
    bd1c:	1c0c      	adds	r4, r1, #0
    bd1e:	429d      	cmp	r5, r3
    bd20:	d11b      	bne.n	bd5a <__submore+0x46>
    bd22:	2680      	movs	r6, #128	; 0x80
    bd24:	00f6      	lsls	r6, r6, #3
    bd26:	1c31      	adds	r1, r6, #0
    bd28:	f7fd fc2c 	bl	9584 <_malloc_r>
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d102      	bne.n	bd36 <__submore+0x22>
    bd30:	2001      	movs	r0, #1
    bd32:	4240      	negs	r0, r0
    bd34:	e025      	b.n	bd82 <__submore+0x6e>
    bd36:	1c23      	adds	r3, r4, #0
    bd38:	6360      	str	r0, [r4, #52]	; 0x34
    bd3a:	63a6      	str	r6, [r4, #56]	; 0x38
    bd3c:	3346      	adds	r3, #70	; 0x46
    bd3e:	781a      	ldrb	r2, [r3, #0]
    bd40:	4b10      	ldr	r3, [pc, #64]	; (bd84 <__submore+0x70>)
    bd42:	54c2      	strb	r2, [r0, r3]
    bd44:	1c23      	adds	r3, r4, #0
    bd46:	3345      	adds	r3, #69	; 0x45
    bd48:	781a      	ldrb	r2, [r3, #0]
    bd4a:	4b0f      	ldr	r3, [pc, #60]	; (bd88 <__submore+0x74>)
    bd4c:	54c2      	strb	r2, [r0, r3]
    bd4e:	782a      	ldrb	r2, [r5, #0]
    bd50:	4b0e      	ldr	r3, [pc, #56]	; (bd8c <__submore+0x78>)
    bd52:	54c2      	strb	r2, [r0, r3]
    bd54:	18c0      	adds	r0, r0, r3
    bd56:	6020      	str	r0, [r4, #0]
    bd58:	e012      	b.n	bd80 <__submore+0x6c>
    bd5a:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    bd5c:	1c29      	adds	r1, r5, #0
    bd5e:	0073      	lsls	r3, r6, #1
    bd60:	1c1a      	adds	r2, r3, #0
    bd62:	9301      	str	r3, [sp, #4]
    bd64:	f001 ff3f 	bl	dbe6 <_realloc_r>
    bd68:	1e05      	subs	r5, r0, #0
    bd6a:	d0e1      	beq.n	bd30 <__submore+0x1c>
    bd6c:	1987      	adds	r7, r0, r6
    bd6e:	1c38      	adds	r0, r7, #0
    bd70:	1c29      	adds	r1, r5, #0
    bd72:	1c32      	adds	r2, r6, #0
    bd74:	f7fd fbaf 	bl	94d6 <memcpy>
    bd78:	9b01      	ldr	r3, [sp, #4]
    bd7a:	6027      	str	r7, [r4, #0]
    bd7c:	6365      	str	r5, [r4, #52]	; 0x34
    bd7e:	63a3      	str	r3, [r4, #56]	; 0x38
    bd80:	2000      	movs	r0, #0
    bd82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bd84:	000003ff 	.word	0x000003ff
    bd88:	000003fe 	.word	0x000003fe
    bd8c:	000003fd 	.word	0x000003fd

0000bd90 <__swbuf_r>:
    bd90:	b570      	push	{r4, r5, r6, lr}
    bd92:	1c05      	adds	r5, r0, #0
    bd94:	1c0e      	adds	r6, r1, #0
    bd96:	1c14      	adds	r4, r2, #0
    bd98:	2800      	cmp	r0, #0
    bd9a:	d004      	beq.n	bda6 <__swbuf_r+0x16>
    bd9c:	6983      	ldr	r3, [r0, #24]
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d101      	bne.n	bda6 <__swbuf_r+0x16>
    bda2:	f7fd f933 	bl	900c <__sinit>
    bda6:	4b23      	ldr	r3, [pc, #140]	; (be34 <__swbuf_r+0xa4>)
    bda8:	429c      	cmp	r4, r3
    bdaa:	d101      	bne.n	bdb0 <__swbuf_r+0x20>
    bdac:	686c      	ldr	r4, [r5, #4]
    bdae:	e008      	b.n	bdc2 <__swbuf_r+0x32>
    bdb0:	4b21      	ldr	r3, [pc, #132]	; (be38 <__swbuf_r+0xa8>)
    bdb2:	429c      	cmp	r4, r3
    bdb4:	d101      	bne.n	bdba <__swbuf_r+0x2a>
    bdb6:	68ac      	ldr	r4, [r5, #8]
    bdb8:	e003      	b.n	bdc2 <__swbuf_r+0x32>
    bdba:	4b20      	ldr	r3, [pc, #128]	; (be3c <__swbuf_r+0xac>)
    bdbc:	429c      	cmp	r4, r3
    bdbe:	d100      	bne.n	bdc2 <__swbuf_r+0x32>
    bdc0:	68ec      	ldr	r4, [r5, #12]
    bdc2:	69a3      	ldr	r3, [r4, #24]
    bdc4:	60a3      	str	r3, [r4, #8]
    bdc6:	89a3      	ldrh	r3, [r4, #12]
    bdc8:	071b      	lsls	r3, r3, #28
    bdca:	d50a      	bpl.n	bde2 <__swbuf_r+0x52>
    bdcc:	6923      	ldr	r3, [r4, #16]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d007      	beq.n	bde2 <__swbuf_r+0x52>
    bdd2:	6823      	ldr	r3, [r4, #0]
    bdd4:	6922      	ldr	r2, [r4, #16]
    bdd6:	b2f6      	uxtb	r6, r6
    bdd8:	1a98      	subs	r0, r3, r2
    bdda:	6963      	ldr	r3, [r4, #20]
    bddc:	4298      	cmp	r0, r3
    bdde:	db0f      	blt.n	be00 <__swbuf_r+0x70>
    bde0:	e008      	b.n	bdf4 <__swbuf_r+0x64>
    bde2:	1c28      	adds	r0, r5, #0
    bde4:	1c21      	adds	r1, r4, #0
    bde6:	f000 f83f 	bl	be68 <__swsetup_r>
    bdea:	2800      	cmp	r0, #0
    bdec:	d0f1      	beq.n	bdd2 <__swbuf_r+0x42>
    bdee:	2001      	movs	r0, #1
    bdf0:	4240      	negs	r0, r0
    bdf2:	e01d      	b.n	be30 <__swbuf_r+0xa0>
    bdf4:	1c28      	adds	r0, r5, #0
    bdf6:	1c21      	adds	r1, r4, #0
    bdf8:	f7fd f84e 	bl	8e98 <_fflush_r>
    bdfc:	2800      	cmp	r0, #0
    bdfe:	d1f6      	bne.n	bdee <__swbuf_r+0x5e>
    be00:	68a3      	ldr	r3, [r4, #8]
    be02:	3001      	adds	r0, #1
    be04:	3b01      	subs	r3, #1
    be06:	60a3      	str	r3, [r4, #8]
    be08:	6823      	ldr	r3, [r4, #0]
    be0a:	1c5a      	adds	r2, r3, #1
    be0c:	6022      	str	r2, [r4, #0]
    be0e:	701e      	strb	r6, [r3, #0]
    be10:	6963      	ldr	r3, [r4, #20]
    be12:	4298      	cmp	r0, r3
    be14:	d005      	beq.n	be22 <__swbuf_r+0x92>
    be16:	89a3      	ldrh	r3, [r4, #12]
    be18:	1c30      	adds	r0, r6, #0
    be1a:	07db      	lsls	r3, r3, #31
    be1c:	d508      	bpl.n	be30 <__swbuf_r+0xa0>
    be1e:	2e0a      	cmp	r6, #10
    be20:	d106      	bne.n	be30 <__swbuf_r+0xa0>
    be22:	1c28      	adds	r0, r5, #0
    be24:	1c21      	adds	r1, r4, #0
    be26:	f7fd f837 	bl	8e98 <_fflush_r>
    be2a:	2800      	cmp	r0, #0
    be2c:	d1df      	bne.n	bdee <__swbuf_r+0x5e>
    be2e:	1c30      	adds	r0, r6, #0
    be30:	bd70      	pop	{r4, r5, r6, pc}
    be32:	46c0      	nop			; (mov r8, r8)
    be34:	0000f2b0 	.word	0x0000f2b0
    be38:	0000f2d0 	.word	0x0000f2d0
    be3c:	0000f2f0 	.word	0x0000f2f0

0000be40 <_write_r>:
    be40:	b538      	push	{r3, r4, r5, lr}
    be42:	1c05      	adds	r5, r0, #0
    be44:	2000      	movs	r0, #0
    be46:	4c07      	ldr	r4, [pc, #28]	; (be64 <_write_r+0x24>)
    be48:	6020      	str	r0, [r4, #0]
    be4a:	1c08      	adds	r0, r1, #0
    be4c:	1c11      	adds	r1, r2, #0
    be4e:	1c1a      	adds	r2, r3, #0
    be50:	f7f8 f82e 	bl	3eb0 <_write>
    be54:	1c43      	adds	r3, r0, #1
    be56:	d103      	bne.n	be60 <_write_r+0x20>
    be58:	6823      	ldr	r3, [r4, #0]
    be5a:	2b00      	cmp	r3, #0
    be5c:	d000      	beq.n	be60 <_write_r+0x20>
    be5e:	602b      	str	r3, [r5, #0]
    be60:	bd38      	pop	{r3, r4, r5, pc}
    be62:	46c0      	nop			; (mov r8, r8)
    be64:	2000445c 	.word	0x2000445c

0000be68 <__swsetup_r>:
    be68:	4b35      	ldr	r3, [pc, #212]	; (bf40 <__swsetup_r+0xd8>)
    be6a:	b570      	push	{r4, r5, r6, lr}
    be6c:	681d      	ldr	r5, [r3, #0]
    be6e:	1c06      	adds	r6, r0, #0
    be70:	1c0c      	adds	r4, r1, #0
    be72:	2d00      	cmp	r5, #0
    be74:	d005      	beq.n	be82 <__swsetup_r+0x1a>
    be76:	69ab      	ldr	r3, [r5, #24]
    be78:	2b00      	cmp	r3, #0
    be7a:	d102      	bne.n	be82 <__swsetup_r+0x1a>
    be7c:	1c28      	adds	r0, r5, #0
    be7e:	f7fd f8c5 	bl	900c <__sinit>
    be82:	4b30      	ldr	r3, [pc, #192]	; (bf44 <__swsetup_r+0xdc>)
    be84:	429c      	cmp	r4, r3
    be86:	d101      	bne.n	be8c <__swsetup_r+0x24>
    be88:	686c      	ldr	r4, [r5, #4]
    be8a:	e008      	b.n	be9e <__swsetup_r+0x36>
    be8c:	4b2e      	ldr	r3, [pc, #184]	; (bf48 <__swsetup_r+0xe0>)
    be8e:	429c      	cmp	r4, r3
    be90:	d101      	bne.n	be96 <__swsetup_r+0x2e>
    be92:	68ac      	ldr	r4, [r5, #8]
    be94:	e003      	b.n	be9e <__swsetup_r+0x36>
    be96:	4b2d      	ldr	r3, [pc, #180]	; (bf4c <__swsetup_r+0xe4>)
    be98:	429c      	cmp	r4, r3
    be9a:	d100      	bne.n	be9e <__swsetup_r+0x36>
    be9c:	68ec      	ldr	r4, [r5, #12]
    be9e:	89a3      	ldrh	r3, [r4, #12]
    bea0:	b29a      	uxth	r2, r3
    bea2:	0711      	lsls	r1, r2, #28
    bea4:	d423      	bmi.n	beee <__swsetup_r+0x86>
    bea6:	06d1      	lsls	r1, r2, #27
    bea8:	d407      	bmi.n	beba <__swsetup_r+0x52>
    beaa:	2209      	movs	r2, #9
    beac:	2001      	movs	r0, #1
    beae:	6032      	str	r2, [r6, #0]
    beb0:	3237      	adds	r2, #55	; 0x37
    beb2:	4313      	orrs	r3, r2
    beb4:	81a3      	strh	r3, [r4, #12]
    beb6:	4240      	negs	r0, r0
    beb8:	e040      	b.n	bf3c <__swsetup_r+0xd4>
    beba:	0753      	lsls	r3, r2, #29
    bebc:	d513      	bpl.n	bee6 <__swsetup_r+0x7e>
    bebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bec0:	2900      	cmp	r1, #0
    bec2:	d008      	beq.n	bed6 <__swsetup_r+0x6e>
    bec4:	1c23      	adds	r3, r4, #0
    bec6:	3344      	adds	r3, #68	; 0x44
    bec8:	4299      	cmp	r1, r3
    beca:	d002      	beq.n	bed2 <__swsetup_r+0x6a>
    becc:	1c30      	adds	r0, r6, #0
    bece:	f7fd fb13 	bl	94f8 <_free_r>
    bed2:	2300      	movs	r3, #0
    bed4:	6363      	str	r3, [r4, #52]	; 0x34
    bed6:	2224      	movs	r2, #36	; 0x24
    bed8:	89a3      	ldrh	r3, [r4, #12]
    beda:	4393      	bics	r3, r2
    bedc:	81a3      	strh	r3, [r4, #12]
    bede:	2300      	movs	r3, #0
    bee0:	6063      	str	r3, [r4, #4]
    bee2:	6923      	ldr	r3, [r4, #16]
    bee4:	6023      	str	r3, [r4, #0]
    bee6:	2208      	movs	r2, #8
    bee8:	89a3      	ldrh	r3, [r4, #12]
    beea:	4313      	orrs	r3, r2
    beec:	81a3      	strh	r3, [r4, #12]
    beee:	6923      	ldr	r3, [r4, #16]
    bef0:	2b00      	cmp	r3, #0
    bef2:	d10b      	bne.n	bf0c <__swsetup_r+0xa4>
    bef4:	23a0      	movs	r3, #160	; 0xa0
    bef6:	89a2      	ldrh	r2, [r4, #12]
    bef8:	009b      	lsls	r3, r3, #2
    befa:	4013      	ands	r3, r2
    befc:	2280      	movs	r2, #128	; 0x80
    befe:	0092      	lsls	r2, r2, #2
    bf00:	4293      	cmp	r3, r2
    bf02:	d003      	beq.n	bf0c <__swsetup_r+0xa4>
    bf04:	1c30      	adds	r0, r6, #0
    bf06:	1c21      	adds	r1, r4, #0
    bf08:	f7fd fa6e 	bl	93e8 <__smakebuf_r>
    bf0c:	2301      	movs	r3, #1
    bf0e:	89a2      	ldrh	r2, [r4, #12]
    bf10:	4013      	ands	r3, r2
    bf12:	d005      	beq.n	bf20 <__swsetup_r+0xb8>
    bf14:	2300      	movs	r3, #0
    bf16:	60a3      	str	r3, [r4, #8]
    bf18:	6963      	ldr	r3, [r4, #20]
    bf1a:	425b      	negs	r3, r3
    bf1c:	61a3      	str	r3, [r4, #24]
    bf1e:	e003      	b.n	bf28 <__swsetup_r+0xc0>
    bf20:	0791      	lsls	r1, r2, #30
    bf22:	d400      	bmi.n	bf26 <__swsetup_r+0xbe>
    bf24:	6963      	ldr	r3, [r4, #20]
    bf26:	60a3      	str	r3, [r4, #8]
    bf28:	2000      	movs	r0, #0
    bf2a:	6923      	ldr	r3, [r4, #16]
    bf2c:	4283      	cmp	r3, r0
    bf2e:	d105      	bne.n	bf3c <__swsetup_r+0xd4>
    bf30:	0613      	lsls	r3, r2, #24
    bf32:	d503      	bpl.n	bf3c <__swsetup_r+0xd4>
    bf34:	2340      	movs	r3, #64	; 0x40
    bf36:	431a      	orrs	r2, r3
    bf38:	81a2      	strh	r2, [r4, #12]
    bf3a:	3801      	subs	r0, #1
    bf3c:	bd70      	pop	{r4, r5, r6, pc}
    bf3e:	46c0      	nop			; (mov r8, r8)
    bf40:	20000134 	.word	0x20000134
    bf44:	0000f2b0 	.word	0x0000f2b0
    bf48:	0000f2d0 	.word	0x0000f2d0
    bf4c:	0000f2f0 	.word	0x0000f2f0

0000bf50 <_close_r>:
    bf50:	b538      	push	{r3, r4, r5, lr}
    bf52:	2300      	movs	r3, #0
    bf54:	4c06      	ldr	r4, [pc, #24]	; (bf70 <_close_r+0x20>)
    bf56:	1c05      	adds	r5, r0, #0
    bf58:	1c08      	adds	r0, r1, #0
    bf5a:	6023      	str	r3, [r4, #0]
    bf5c:	f7f7 ff92 	bl	3e84 <_close>
    bf60:	1c43      	adds	r3, r0, #1
    bf62:	d103      	bne.n	bf6c <_close_r+0x1c>
    bf64:	6823      	ldr	r3, [r4, #0]
    bf66:	2b00      	cmp	r3, #0
    bf68:	d000      	beq.n	bf6c <_close_r+0x1c>
    bf6a:	602b      	str	r3, [r5, #0]
    bf6c:	bd38      	pop	{r3, r4, r5, pc}
    bf6e:	46c0      	nop			; (mov r8, r8)
    bf70:	2000445c 	.word	0x2000445c

0000bf74 <quorem>:
    bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf76:	6903      	ldr	r3, [r0, #16]
    bf78:	690c      	ldr	r4, [r1, #16]
    bf7a:	b089      	sub	sp, #36	; 0x24
    bf7c:	2600      	movs	r6, #0
    bf7e:	42a3      	cmp	r3, r4
    bf80:	db7c      	blt.n	c07c <quorem+0x108>
    bf82:	1c0b      	adds	r3, r1, #0
    bf84:	3c01      	subs	r4, #1
    bf86:	3314      	adds	r3, #20
    bf88:	00a5      	lsls	r5, r4, #2
    bf8a:	9303      	str	r3, [sp, #12]
    bf8c:	195b      	adds	r3, r3, r5
    bf8e:	9304      	str	r3, [sp, #16]
    bf90:	1c03      	adds	r3, r0, #0
    bf92:	3314      	adds	r3, #20
    bf94:	9301      	str	r3, [sp, #4]
    bf96:	195d      	adds	r5, r3, r5
    bf98:	9b04      	ldr	r3, [sp, #16]
    bf9a:	9107      	str	r1, [sp, #28]
    bf9c:	681b      	ldr	r3, [r3, #0]
    bf9e:	9002      	str	r0, [sp, #8]
    bfa0:	1c59      	adds	r1, r3, #1
    bfa2:	6828      	ldr	r0, [r5, #0]
    bfa4:	9305      	str	r3, [sp, #20]
    bfa6:	f7fa fd85 	bl	6ab4 <__aeabi_uidiv>
    bfaa:	1e07      	subs	r7, r0, #0
    bfac:	42b7      	cmp	r7, r6
    bfae:	d035      	beq.n	c01c <quorem+0xa8>
    bfb0:	9b03      	ldr	r3, [sp, #12]
    bfb2:	9801      	ldr	r0, [sp, #4]
    bfb4:	469c      	mov	ip, r3
    bfb6:	9605      	str	r6, [sp, #20]
    bfb8:	4663      	mov	r3, ip
    bfba:	cb04      	ldmia	r3!, {r2}
    bfbc:	b291      	uxth	r1, r2
    bfbe:	4379      	muls	r1, r7
    bfc0:	0c12      	lsrs	r2, r2, #16
    bfc2:	437a      	muls	r2, r7
    bfc4:	1871      	adds	r1, r6, r1
    bfc6:	0c0e      	lsrs	r6, r1, #16
    bfc8:	469c      	mov	ip, r3
    bfca:	18b3      	adds	r3, r6, r2
    bfcc:	9306      	str	r3, [sp, #24]
    bfce:	8802      	ldrh	r2, [r0, #0]
    bfd0:	0c1e      	lsrs	r6, r3, #16
    bfd2:	9b05      	ldr	r3, [sp, #20]
    bfd4:	b289      	uxth	r1, r1
    bfd6:	18d2      	adds	r2, r2, r3
    bfd8:	6803      	ldr	r3, [r0, #0]
    bfda:	1a52      	subs	r2, r2, r1
    bfdc:	0c19      	lsrs	r1, r3, #16
    bfde:	466b      	mov	r3, sp
    bfe0:	8b1b      	ldrh	r3, [r3, #24]
    bfe2:	1acb      	subs	r3, r1, r3
    bfe4:	1411      	asrs	r1, r2, #16
    bfe6:	185b      	adds	r3, r3, r1
    bfe8:	1419      	asrs	r1, r3, #16
    bfea:	b292      	uxth	r2, r2
    bfec:	041b      	lsls	r3, r3, #16
    bfee:	431a      	orrs	r2, r3
    bff0:	9b04      	ldr	r3, [sp, #16]
    bff2:	9105      	str	r1, [sp, #20]
    bff4:	c004      	stmia	r0!, {r2}
    bff6:	4563      	cmp	r3, ip
    bff8:	d2de      	bcs.n	bfb8 <quorem+0x44>
    bffa:	682b      	ldr	r3, [r5, #0]
    bffc:	2b00      	cmp	r3, #0
    bffe:	d10d      	bne.n	c01c <quorem+0xa8>
    c000:	1c23      	adds	r3, r4, #0
    c002:	9a01      	ldr	r2, [sp, #4]
    c004:	3d04      	subs	r5, #4
    c006:	4295      	cmp	r5, r2
    c008:	d803      	bhi.n	c012 <quorem+0x9e>
    c00a:	9a02      	ldr	r2, [sp, #8]
    c00c:	1c1c      	adds	r4, r3, #0
    c00e:	6113      	str	r3, [r2, #16]
    c010:	e004      	b.n	c01c <quorem+0xa8>
    c012:	682a      	ldr	r2, [r5, #0]
    c014:	2a00      	cmp	r2, #0
    c016:	d1f8      	bne.n	c00a <quorem+0x96>
    c018:	3b01      	subs	r3, #1
    c01a:	e7f2      	b.n	c002 <quorem+0x8e>
    c01c:	9802      	ldr	r0, [sp, #8]
    c01e:	9907      	ldr	r1, [sp, #28]
    c020:	f001 fc22 	bl	d868 <__mcmp>
    c024:	2800      	cmp	r0, #0
    c026:	db28      	blt.n	c07a <quorem+0x106>
    c028:	2000      	movs	r0, #0
    c02a:	9901      	ldr	r1, [sp, #4]
    c02c:	9a03      	ldr	r2, [sp, #12]
    c02e:	3701      	adds	r7, #1
    c030:	ca20      	ldmia	r2!, {r5}
    c032:	880b      	ldrh	r3, [r1, #0]
    c034:	1818      	adds	r0, r3, r0
    c036:	b2ab      	uxth	r3, r5
    c038:	1ac3      	subs	r3, r0, r3
    c03a:	6808      	ldr	r0, [r1, #0]
    c03c:	0c2d      	lsrs	r5, r5, #16
    c03e:	0c00      	lsrs	r0, r0, #16
    c040:	1b45      	subs	r5, r0, r5
    c042:	141e      	asrs	r6, r3, #16
    c044:	19ad      	adds	r5, r5, r6
    c046:	1428      	asrs	r0, r5, #16
    c048:	b29b      	uxth	r3, r3
    c04a:	042d      	lsls	r5, r5, #16
    c04c:	432b      	orrs	r3, r5
    c04e:	c108      	stmia	r1!, {r3}
    c050:	9b04      	ldr	r3, [sp, #16]
    c052:	4293      	cmp	r3, r2
    c054:	d2ec      	bcs.n	c030 <quorem+0xbc>
    c056:	9a01      	ldr	r2, [sp, #4]
    c058:	00a3      	lsls	r3, r4, #2
    c05a:	18d3      	adds	r3, r2, r3
    c05c:	681a      	ldr	r2, [r3, #0]
    c05e:	2a00      	cmp	r2, #0
    c060:	d10b      	bne.n	c07a <quorem+0x106>
    c062:	9a01      	ldr	r2, [sp, #4]
    c064:	3b04      	subs	r3, #4
    c066:	4293      	cmp	r3, r2
    c068:	d802      	bhi.n	c070 <quorem+0xfc>
    c06a:	9b02      	ldr	r3, [sp, #8]
    c06c:	611c      	str	r4, [r3, #16]
    c06e:	e004      	b.n	c07a <quorem+0x106>
    c070:	681a      	ldr	r2, [r3, #0]
    c072:	2a00      	cmp	r2, #0
    c074:	d1f9      	bne.n	c06a <quorem+0xf6>
    c076:	3c01      	subs	r4, #1
    c078:	e7f3      	b.n	c062 <quorem+0xee>
    c07a:	1c3e      	adds	r6, r7, #0
    c07c:	1c30      	adds	r0, r6, #0
    c07e:	b009      	add	sp, #36	; 0x24
    c080:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000c084 <_dtoa_r>:
    c084:	b5f0      	push	{r4, r5, r6, r7, lr}
    c086:	1c16      	adds	r6, r2, #0
    c088:	1c1f      	adds	r7, r3, #0
    c08a:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c08c:	b09b      	sub	sp, #108	; 0x6c
    c08e:	9008      	str	r0, [sp, #32]
    c090:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    c092:	9606      	str	r6, [sp, #24]
    c094:	9707      	str	r7, [sp, #28]
    c096:	2c00      	cmp	r4, #0
    c098:	d108      	bne.n	c0ac <_dtoa_r+0x28>
    c09a:	2010      	movs	r0, #16
    c09c:	f7fd f9fc 	bl	9498 <malloc>
    c0a0:	9b08      	ldr	r3, [sp, #32]
    c0a2:	6258      	str	r0, [r3, #36]	; 0x24
    c0a4:	6044      	str	r4, [r0, #4]
    c0a6:	6084      	str	r4, [r0, #8]
    c0a8:	6004      	str	r4, [r0, #0]
    c0aa:	60c4      	str	r4, [r0, #12]
    c0ac:	9b08      	ldr	r3, [sp, #32]
    c0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c0b0:	6819      	ldr	r1, [r3, #0]
    c0b2:	2900      	cmp	r1, #0
    c0b4:	d00b      	beq.n	c0ce <_dtoa_r+0x4a>
    c0b6:	685a      	ldr	r2, [r3, #4]
    c0b8:	2301      	movs	r3, #1
    c0ba:	4093      	lsls	r3, r2
    c0bc:	604a      	str	r2, [r1, #4]
    c0be:	608b      	str	r3, [r1, #8]
    c0c0:	9808      	ldr	r0, [sp, #32]
    c0c2:	f001 f9b7 	bl	d434 <_Bfree>
    c0c6:	2200      	movs	r2, #0
    c0c8:	9b08      	ldr	r3, [sp, #32]
    c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c0cc:	601a      	str	r2, [r3, #0]
    c0ce:	9b07      	ldr	r3, [sp, #28]
    c0d0:	2b00      	cmp	r3, #0
    c0d2:	da05      	bge.n	c0e0 <_dtoa_r+0x5c>
    c0d4:	2301      	movs	r3, #1
    c0d6:	602b      	str	r3, [r5, #0]
    c0d8:	007b      	lsls	r3, r7, #1
    c0da:	085b      	lsrs	r3, r3, #1
    c0dc:	9307      	str	r3, [sp, #28]
    c0de:	e001      	b.n	c0e4 <_dtoa_r+0x60>
    c0e0:	2300      	movs	r3, #0
    c0e2:	602b      	str	r3, [r5, #0]
    c0e4:	9c07      	ldr	r4, [sp, #28]
    c0e6:	4bc6      	ldr	r3, [pc, #792]	; (c400 <_dtoa_r+0x37c>)
    c0e8:	1c22      	adds	r2, r4, #0
    c0ea:	9317      	str	r3, [sp, #92]	; 0x5c
    c0ec:	401a      	ands	r2, r3
    c0ee:	429a      	cmp	r2, r3
    c0f0:	d119      	bne.n	c126 <_dtoa_r+0xa2>
    c0f2:	4bc4      	ldr	r3, [pc, #784]	; (c404 <_dtoa_r+0x380>)
    c0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c0f6:	6013      	str	r3, [r2, #0]
    c0f8:	9a06      	ldr	r2, [sp, #24]
    c0fa:	4bc3      	ldr	r3, [pc, #780]	; (c408 <_dtoa_r+0x384>)
    c0fc:	2a00      	cmp	r2, #0
    c0fe:	d102      	bne.n	c106 <_dtoa_r+0x82>
    c100:	0324      	lsls	r4, r4, #12
    c102:	d100      	bne.n	c106 <_dtoa_r+0x82>
    c104:	4bc1      	ldr	r3, [pc, #772]	; (c40c <_dtoa_r+0x388>)
    c106:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c108:	1c18      	adds	r0, r3, #0
    c10a:	2a00      	cmp	r2, #0
    c10c:	d101      	bne.n	c112 <_dtoa_r+0x8e>
    c10e:	f000 fdb6 	bl	cc7e <_dtoa_r+0xbfa>
    c112:	78d9      	ldrb	r1, [r3, #3]
    c114:	1cda      	adds	r2, r3, #3
    c116:	2900      	cmp	r1, #0
    c118:	d000      	beq.n	c11c <_dtoa_r+0x98>
    c11a:	3205      	adds	r2, #5
    c11c:	9924      	ldr	r1, [sp, #144]	; 0x90
    c11e:	1c18      	adds	r0, r3, #0
    c120:	600a      	str	r2, [r1, #0]
    c122:	f000 fdac 	bl	cc7e <_dtoa_r+0xbfa>
    c126:	9e06      	ldr	r6, [sp, #24]
    c128:	9f07      	ldr	r7, [sp, #28]
    c12a:	2200      	movs	r2, #0
    c12c:	1c30      	adds	r0, r6, #0
    c12e:	1c39      	adds	r1, r7, #0
    c130:	2300      	movs	r3, #0
    c132:	f7fa fe51 	bl	6dd8 <__aeabi_dcmpeq>
    c136:	1e05      	subs	r5, r0, #0
    c138:	d00e      	beq.n	c158 <_dtoa_r+0xd4>
    c13a:	2301      	movs	r3, #1
    c13c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c13e:	6013      	str	r3, [r2, #0]
    c140:	4bb3      	ldr	r3, [pc, #716]	; (c410 <_dtoa_r+0x38c>)
    c142:	9a24      	ldr	r2, [sp, #144]	; 0x90
    c144:	1c18      	adds	r0, r3, #0
    c146:	2a00      	cmp	r2, #0
    c148:	d101      	bne.n	c14e <_dtoa_r+0xca>
    c14a:	f000 fd98 	bl	cc7e <_dtoa_r+0xbfa>
    c14e:	4ab1      	ldr	r2, [pc, #708]	; (c414 <_dtoa_r+0x390>)
    c150:	9924      	ldr	r1, [sp, #144]	; 0x90
    c152:	600a      	str	r2, [r1, #0]
    c154:	f000 fd93 	bl	cc7e <_dtoa_r+0xbfa>
    c158:	ab19      	add	r3, sp, #100	; 0x64
    c15a:	9300      	str	r3, [sp, #0]
    c15c:	ab18      	add	r3, sp, #96	; 0x60
    c15e:	9301      	str	r3, [sp, #4]
    c160:	9808      	ldr	r0, [sp, #32]
    c162:	1c32      	adds	r2, r6, #0
    c164:	1c3b      	adds	r3, r7, #0
    c166:	f001 fc7b 	bl	da60 <__d2b>
    c16a:	0061      	lsls	r1, r4, #1
    c16c:	900a      	str	r0, [sp, #40]	; 0x28
    c16e:	0d49      	lsrs	r1, r1, #21
    c170:	d009      	beq.n	c186 <_dtoa_r+0x102>
    c172:	0338      	lsls	r0, r7, #12
    c174:	4ca8      	ldr	r4, [pc, #672]	; (c418 <_dtoa_r+0x394>)
    c176:	0b00      	lsrs	r0, r0, #12
    c178:	4304      	orrs	r4, r0
    c17a:	48a8      	ldr	r0, [pc, #672]	; (c41c <_dtoa_r+0x398>)
    c17c:	1c32      	adds	r2, r6, #0
    c17e:	1c23      	adds	r3, r4, #0
    c180:	180e      	adds	r6, r1, r0
    c182:	9516      	str	r5, [sp, #88]	; 0x58
    c184:	e01c      	b.n	c1c0 <_dtoa_r+0x13c>
    c186:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c188:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c18a:	189e      	adds	r6, r3, r2
    c18c:	4ba4      	ldr	r3, [pc, #656]	; (c420 <_dtoa_r+0x39c>)
    c18e:	429e      	cmp	r6, r3
    c190:	db09      	blt.n	c1a6 <_dtoa_r+0x122>
    c192:	4ba4      	ldr	r3, [pc, #656]	; (c424 <_dtoa_r+0x3a0>)
    c194:	18f0      	adds	r0, r6, r3
    c196:	9b06      	ldr	r3, [sp, #24]
    c198:	40c3      	lsrs	r3, r0
    c19a:	1c18      	adds	r0, r3, #0
    c19c:	4ba2      	ldr	r3, [pc, #648]	; (c428 <_dtoa_r+0x3a4>)
    c19e:	1b9b      	subs	r3, r3, r6
    c1a0:	409c      	lsls	r4, r3
    c1a2:	4320      	orrs	r0, r4
    c1a4:	e004      	b.n	c1b0 <_dtoa_r+0x12c>
    c1a6:	48a1      	ldr	r0, [pc, #644]	; (c42c <_dtoa_r+0x3a8>)
    c1a8:	9b06      	ldr	r3, [sp, #24]
    c1aa:	1b80      	subs	r0, r0, r6
    c1ac:	4083      	lsls	r3, r0
    c1ae:	1c18      	adds	r0, r3, #0
    c1b0:	f7fc fc74 	bl	8a9c <__aeabi_ui2d>
    c1b4:	4c9e      	ldr	r4, [pc, #632]	; (c430 <_dtoa_r+0x3ac>)
    c1b6:	1c02      	adds	r2, r0, #0
    c1b8:	190b      	adds	r3, r1, r4
    c1ba:	2101      	movs	r1, #1
    c1bc:	3e01      	subs	r6, #1
    c1be:	9116      	str	r1, [sp, #88]	; 0x58
    c1c0:	1c10      	adds	r0, r2, #0
    c1c2:	1c19      	adds	r1, r3, #0
    c1c4:	2200      	movs	r2, #0
    c1c6:	4b9b      	ldr	r3, [pc, #620]	; (c434 <_dtoa_r+0x3b0>)
    c1c8:	f7fc f87c 	bl	82c4 <__aeabi_dsub>
    c1cc:	4a9a      	ldr	r2, [pc, #616]	; (c438 <_dtoa_r+0x3b4>)
    c1ce:	4b9b      	ldr	r3, [pc, #620]	; (c43c <_dtoa_r+0x3b8>)
    c1d0:	f7fb fdde 	bl	7d90 <__aeabi_dmul>
    c1d4:	4a9a      	ldr	r2, [pc, #616]	; (c440 <_dtoa_r+0x3bc>)
    c1d6:	4b9b      	ldr	r3, [pc, #620]	; (c444 <_dtoa_r+0x3c0>)
    c1d8:	f7fa fe74 	bl	6ec4 <__aeabi_dadd>
    c1dc:	1c04      	adds	r4, r0, #0
    c1de:	1c30      	adds	r0, r6, #0
    c1e0:	1c0d      	adds	r5, r1, #0
    c1e2:	f7fc fc1f 	bl	8a24 <__aeabi_i2d>
    c1e6:	4a98      	ldr	r2, [pc, #608]	; (c448 <_dtoa_r+0x3c4>)
    c1e8:	4b98      	ldr	r3, [pc, #608]	; (c44c <_dtoa_r+0x3c8>)
    c1ea:	f7fb fdd1 	bl	7d90 <__aeabi_dmul>
    c1ee:	1c02      	adds	r2, r0, #0
    c1f0:	1c0b      	adds	r3, r1, #0
    c1f2:	1c20      	adds	r0, r4, #0
    c1f4:	1c29      	adds	r1, r5, #0
    c1f6:	f7fa fe65 	bl	6ec4 <__aeabi_dadd>
    c1fa:	1c04      	adds	r4, r0, #0
    c1fc:	1c0d      	adds	r5, r1, #0
    c1fe:	f7fc fbdb 	bl	89b8 <__aeabi_d2iz>
    c202:	1c29      	adds	r1, r5, #0
    c204:	9003      	str	r0, [sp, #12]
    c206:	2200      	movs	r2, #0
    c208:	1c20      	adds	r0, r4, #0
    c20a:	2300      	movs	r3, #0
    c20c:	f7fa fdea 	bl	6de4 <__aeabi_dcmplt>
    c210:	2800      	cmp	r0, #0
    c212:	d00d      	beq.n	c230 <_dtoa_r+0x1ac>
    c214:	9803      	ldr	r0, [sp, #12]
    c216:	f7fc fc05 	bl	8a24 <__aeabi_i2d>
    c21a:	1c02      	adds	r2, r0, #0
    c21c:	1c0b      	adds	r3, r1, #0
    c21e:	1c20      	adds	r0, r4, #0
    c220:	1c29      	adds	r1, r5, #0
    c222:	f7fa fdd9 	bl	6dd8 <__aeabi_dcmpeq>
    c226:	4243      	negs	r3, r0
    c228:	4143      	adcs	r3, r0
    c22a:	9a03      	ldr	r2, [sp, #12]
    c22c:	1ad3      	subs	r3, r2, r3
    c22e:	9303      	str	r3, [sp, #12]
    c230:	2301      	movs	r3, #1
    c232:	9313      	str	r3, [sp, #76]	; 0x4c
    c234:	9b03      	ldr	r3, [sp, #12]
    c236:	2b16      	cmp	r3, #22
    c238:	d811      	bhi.n	c25e <_dtoa_r+0x1da>
    c23a:	4a85      	ldr	r2, [pc, #532]	; (c450 <_dtoa_r+0x3cc>)
    c23c:	00db      	lsls	r3, r3, #3
    c23e:	18d3      	adds	r3, r2, r3
    c240:	6818      	ldr	r0, [r3, #0]
    c242:	6859      	ldr	r1, [r3, #4]
    c244:	9a06      	ldr	r2, [sp, #24]
    c246:	9b07      	ldr	r3, [sp, #28]
    c248:	f7fa fde0 	bl	6e0c <__aeabi_dcmpgt>
    c24c:	2800      	cmp	r0, #0
    c24e:	d005      	beq.n	c25c <_dtoa_r+0x1d8>
    c250:	9b03      	ldr	r3, [sp, #12]
    c252:	3b01      	subs	r3, #1
    c254:	9303      	str	r3, [sp, #12]
    c256:	2300      	movs	r3, #0
    c258:	9313      	str	r3, [sp, #76]	; 0x4c
    c25a:	e000      	b.n	c25e <_dtoa_r+0x1da>
    c25c:	9013      	str	r0, [sp, #76]	; 0x4c
    c25e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c260:	1b9e      	subs	r6, r3, r6
    c262:	2300      	movs	r3, #0
    c264:	930d      	str	r3, [sp, #52]	; 0x34
    c266:	3e01      	subs	r6, #1
    c268:	960e      	str	r6, [sp, #56]	; 0x38
    c26a:	d504      	bpl.n	c276 <_dtoa_r+0x1f2>
    c26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c26e:	425b      	negs	r3, r3
    c270:	930d      	str	r3, [sp, #52]	; 0x34
    c272:	2300      	movs	r3, #0
    c274:	930e      	str	r3, [sp, #56]	; 0x38
    c276:	9b03      	ldr	r3, [sp, #12]
    c278:	2b00      	cmp	r3, #0
    c27a:	db08      	blt.n	c28e <_dtoa_r+0x20a>
    c27c:	9a03      	ldr	r2, [sp, #12]
    c27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c280:	4694      	mov	ip, r2
    c282:	4463      	add	r3, ip
    c284:	930e      	str	r3, [sp, #56]	; 0x38
    c286:	2300      	movs	r3, #0
    c288:	9212      	str	r2, [sp, #72]	; 0x48
    c28a:	930f      	str	r3, [sp, #60]	; 0x3c
    c28c:	e007      	b.n	c29e <_dtoa_r+0x21a>
    c28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c290:	9a03      	ldr	r2, [sp, #12]
    c292:	1a9b      	subs	r3, r3, r2
    c294:	930d      	str	r3, [sp, #52]	; 0x34
    c296:	4253      	negs	r3, r2
    c298:	930f      	str	r3, [sp, #60]	; 0x3c
    c29a:	2300      	movs	r3, #0
    c29c:	9312      	str	r3, [sp, #72]	; 0x48
    c29e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c2a0:	2501      	movs	r5, #1
    c2a2:	2b09      	cmp	r3, #9
    c2a4:	d827      	bhi.n	c2f6 <_dtoa_r+0x272>
    c2a6:	2b05      	cmp	r3, #5
    c2a8:	dd02      	ble.n	c2b0 <_dtoa_r+0x22c>
    c2aa:	2500      	movs	r5, #0
    c2ac:	3b04      	subs	r3, #4
    c2ae:	9320      	str	r3, [sp, #128]	; 0x80
    c2b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c2b2:	1e98      	subs	r0, r3, #2
    c2b4:	2803      	cmp	r0, #3
    c2b6:	d823      	bhi.n	c300 <_dtoa_r+0x27c>
    c2b8:	f002 f816 	bl	e2e8 <__gnu_thumb1_case_uqi>
    c2bc:	10040e02 	.word	0x10040e02
    c2c0:	2300      	movs	r3, #0
    c2c2:	e000      	b.n	c2c6 <_dtoa_r+0x242>
    c2c4:	2301      	movs	r3, #1
    c2c6:	9310      	str	r3, [sp, #64]	; 0x40
    c2c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	dc21      	bgt.n	c312 <_dtoa_r+0x28e>
    c2ce:	2301      	movs	r3, #1
    c2d0:	930b      	str	r3, [sp, #44]	; 0x2c
    c2d2:	9309      	str	r3, [sp, #36]	; 0x24
    c2d4:	1c1a      	adds	r2, r3, #0
    c2d6:	e01a      	b.n	c30e <_dtoa_r+0x28a>
    c2d8:	2300      	movs	r3, #0
    c2da:	e000      	b.n	c2de <_dtoa_r+0x25a>
    c2dc:	2301      	movs	r3, #1
    c2de:	9a03      	ldr	r2, [sp, #12]
    c2e0:	9310      	str	r3, [sp, #64]	; 0x40
    c2e2:	4694      	mov	ip, r2
    c2e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c2e6:	4463      	add	r3, ip
    c2e8:	930b      	str	r3, [sp, #44]	; 0x2c
    c2ea:	3301      	adds	r3, #1
    c2ec:	9309      	str	r3, [sp, #36]	; 0x24
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	dc12      	bgt.n	c318 <_dtoa_r+0x294>
    c2f2:	2301      	movs	r3, #1
    c2f4:	e010      	b.n	c318 <_dtoa_r+0x294>
    c2f6:	2300      	movs	r3, #0
    c2f8:	9510      	str	r5, [sp, #64]	; 0x40
    c2fa:	9320      	str	r3, [sp, #128]	; 0x80
    c2fc:	3b01      	subs	r3, #1
    c2fe:	e002      	b.n	c306 <_dtoa_r+0x282>
    c300:	2301      	movs	r3, #1
    c302:	9310      	str	r3, [sp, #64]	; 0x40
    c304:	3b02      	subs	r3, #2
    c306:	2200      	movs	r2, #0
    c308:	930b      	str	r3, [sp, #44]	; 0x2c
    c30a:	9309      	str	r3, [sp, #36]	; 0x24
    c30c:	3313      	adds	r3, #19
    c30e:	9221      	str	r2, [sp, #132]	; 0x84
    c310:	e002      	b.n	c318 <_dtoa_r+0x294>
    c312:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c314:	930b      	str	r3, [sp, #44]	; 0x2c
    c316:	9309      	str	r3, [sp, #36]	; 0x24
    c318:	9a08      	ldr	r2, [sp, #32]
    c31a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    c31c:	2200      	movs	r2, #0
    c31e:	6062      	str	r2, [r4, #4]
    c320:	3204      	adds	r2, #4
    c322:	1c11      	adds	r1, r2, #0
    c324:	3114      	adds	r1, #20
    c326:	4299      	cmp	r1, r3
    c328:	d804      	bhi.n	c334 <_dtoa_r+0x2b0>
    c32a:	6861      	ldr	r1, [r4, #4]
    c32c:	0052      	lsls	r2, r2, #1
    c32e:	3101      	adds	r1, #1
    c330:	6061      	str	r1, [r4, #4]
    c332:	e7f6      	b.n	c322 <_dtoa_r+0x29e>
    c334:	9808      	ldr	r0, [sp, #32]
    c336:	6861      	ldr	r1, [r4, #4]
    c338:	f001 f844 	bl	d3c4 <_Balloc>
    c33c:	9b08      	ldr	r3, [sp, #32]
    c33e:	6020      	str	r0, [r4, #0]
    c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c342:	681b      	ldr	r3, [r3, #0]
    c344:	930c      	str	r3, [sp, #48]	; 0x30
    c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c348:	2b0e      	cmp	r3, #14
    c34a:	d900      	bls.n	c34e <_dtoa_r+0x2ca>
    c34c:	e188      	b.n	c660 <_dtoa_r+0x5dc>
    c34e:	2d00      	cmp	r5, #0
    c350:	d100      	bne.n	c354 <_dtoa_r+0x2d0>
    c352:	e185      	b.n	c660 <_dtoa_r+0x5dc>
    c354:	9b06      	ldr	r3, [sp, #24]
    c356:	9c07      	ldr	r4, [sp, #28]
    c358:	9314      	str	r3, [sp, #80]	; 0x50
    c35a:	9415      	str	r4, [sp, #84]	; 0x54
    c35c:	9b03      	ldr	r3, [sp, #12]
    c35e:	2b00      	cmp	r3, #0
    c360:	dd30      	ble.n	c3c4 <_dtoa_r+0x340>
    c362:	220f      	movs	r2, #15
    c364:	493a      	ldr	r1, [pc, #232]	; (c450 <_dtoa_r+0x3cc>)
    c366:	4013      	ands	r3, r2
    c368:	00db      	lsls	r3, r3, #3
    c36a:	18cb      	adds	r3, r1, r3
    c36c:	685c      	ldr	r4, [r3, #4]
    c36e:	681b      	ldr	r3, [r3, #0]
    c370:	9304      	str	r3, [sp, #16]
    c372:	9405      	str	r4, [sp, #20]
    c374:	9b03      	ldr	r3, [sp, #12]
    c376:	2702      	movs	r7, #2
    c378:	111d      	asrs	r5, r3, #4
    c37a:	06eb      	lsls	r3, r5, #27
    c37c:	d50a      	bpl.n	c394 <_dtoa_r+0x310>
    c37e:	9814      	ldr	r0, [sp, #80]	; 0x50
    c380:	9915      	ldr	r1, [sp, #84]	; 0x54
    c382:	4b34      	ldr	r3, [pc, #208]	; (c454 <_dtoa_r+0x3d0>)
    c384:	4015      	ands	r5, r2
    c386:	6a1a      	ldr	r2, [r3, #32]
    c388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c38a:	f7fb f8c3 	bl	7514 <__aeabi_ddiv>
    c38e:	9006      	str	r0, [sp, #24]
    c390:	9107      	str	r1, [sp, #28]
    c392:	3701      	adds	r7, #1
    c394:	4c2f      	ldr	r4, [pc, #188]	; (c454 <_dtoa_r+0x3d0>)
    c396:	2d00      	cmp	r5, #0
    c398:	d00d      	beq.n	c3b6 <_dtoa_r+0x332>
    c39a:	07eb      	lsls	r3, r5, #31
    c39c:	d508      	bpl.n	c3b0 <_dtoa_r+0x32c>
    c39e:	9804      	ldr	r0, [sp, #16]
    c3a0:	9905      	ldr	r1, [sp, #20]
    c3a2:	6822      	ldr	r2, [r4, #0]
    c3a4:	6863      	ldr	r3, [r4, #4]
    c3a6:	f7fb fcf3 	bl	7d90 <__aeabi_dmul>
    c3aa:	9004      	str	r0, [sp, #16]
    c3ac:	9105      	str	r1, [sp, #20]
    c3ae:	3701      	adds	r7, #1
    c3b0:	106d      	asrs	r5, r5, #1
    c3b2:	3408      	adds	r4, #8
    c3b4:	e7ef      	b.n	c396 <_dtoa_r+0x312>
    c3b6:	9806      	ldr	r0, [sp, #24]
    c3b8:	9907      	ldr	r1, [sp, #28]
    c3ba:	9a04      	ldr	r2, [sp, #16]
    c3bc:	9b05      	ldr	r3, [sp, #20]
    c3be:	f7fb f8a9 	bl	7514 <__aeabi_ddiv>
    c3c2:	e049      	b.n	c458 <_dtoa_r+0x3d4>
    c3c4:	9b03      	ldr	r3, [sp, #12]
    c3c6:	2702      	movs	r7, #2
    c3c8:	425d      	negs	r5, r3
    c3ca:	2d00      	cmp	r5, #0
    c3cc:	d046      	beq.n	c45c <_dtoa_r+0x3d8>
    c3ce:	9814      	ldr	r0, [sp, #80]	; 0x50
    c3d0:	9915      	ldr	r1, [sp, #84]	; 0x54
    c3d2:	230f      	movs	r3, #15
    c3d4:	4a1e      	ldr	r2, [pc, #120]	; (c450 <_dtoa_r+0x3cc>)
    c3d6:	402b      	ands	r3, r5
    c3d8:	00db      	lsls	r3, r3, #3
    c3da:	18d3      	adds	r3, r2, r3
    c3dc:	681a      	ldr	r2, [r3, #0]
    c3de:	685b      	ldr	r3, [r3, #4]
    c3e0:	f7fb fcd6 	bl	7d90 <__aeabi_dmul>
    c3e4:	4c1b      	ldr	r4, [pc, #108]	; (c454 <_dtoa_r+0x3d0>)
    c3e6:	112d      	asrs	r5, r5, #4
    c3e8:	2d00      	cmp	r5, #0
    c3ea:	d035      	beq.n	c458 <_dtoa_r+0x3d4>
    c3ec:	07eb      	lsls	r3, r5, #31
    c3ee:	d504      	bpl.n	c3fa <_dtoa_r+0x376>
    c3f0:	6822      	ldr	r2, [r4, #0]
    c3f2:	6863      	ldr	r3, [r4, #4]
    c3f4:	3701      	adds	r7, #1
    c3f6:	f7fb fccb 	bl	7d90 <__aeabi_dmul>
    c3fa:	106d      	asrs	r5, r5, #1
    c3fc:	3408      	adds	r4, #8
    c3fe:	e7f3      	b.n	c3e8 <_dtoa_r+0x364>
    c400:	7ff00000 	.word	0x7ff00000
    c404:	0000270f 	.word	0x0000270f
    c408:	0000f4e6 	.word	0x0000f4e6
    c40c:	0000f4dd 	.word	0x0000f4dd
    c410:	0000f382 	.word	0x0000f382
    c414:	0000f383 	.word	0x0000f383
    c418:	3ff00000 	.word	0x3ff00000
    c41c:	fffffc01 	.word	0xfffffc01
    c420:	fffffbef 	.word	0xfffffbef
    c424:	00000412 	.word	0x00000412
    c428:	fffffc0e 	.word	0xfffffc0e
    c42c:	fffffbee 	.word	0xfffffbee
    c430:	fe100000 	.word	0xfe100000
    c434:	3ff80000 	.word	0x3ff80000
    c438:	636f4361 	.word	0x636f4361
    c43c:	3fd287a7 	.word	0x3fd287a7
    c440:	8b60c8b3 	.word	0x8b60c8b3
    c444:	3fc68a28 	.word	0x3fc68a28
    c448:	509f79fb 	.word	0x509f79fb
    c44c:	3fd34413 	.word	0x3fd34413
    c450:	0000f4f8 	.word	0x0000f4f8
    c454:	0000f5c0 	.word	0x0000f5c0
    c458:	9006      	str	r0, [sp, #24]
    c45a:	9107      	str	r1, [sp, #28]
    c45c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c45e:	2b00      	cmp	r3, #0
    c460:	d01e      	beq.n	c4a0 <_dtoa_r+0x41c>
    c462:	9c06      	ldr	r4, [sp, #24]
    c464:	9d07      	ldr	r5, [sp, #28]
    c466:	2200      	movs	r2, #0
    c468:	1c20      	adds	r0, r4, #0
    c46a:	1c29      	adds	r1, r5, #0
    c46c:	4bce      	ldr	r3, [pc, #824]	; (c7a8 <_dtoa_r+0x724>)
    c46e:	f7fa fcb9 	bl	6de4 <__aeabi_dcmplt>
    c472:	2800      	cmp	r0, #0
    c474:	d014      	beq.n	c4a0 <_dtoa_r+0x41c>
    c476:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c478:	2b00      	cmp	r3, #0
    c47a:	d011      	beq.n	c4a0 <_dtoa_r+0x41c>
    c47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c47e:	2b00      	cmp	r3, #0
    c480:	dc00      	bgt.n	c484 <_dtoa_r+0x400>
    c482:	e0e9      	b.n	c658 <_dtoa_r+0x5d4>
    c484:	9b03      	ldr	r3, [sp, #12]
    c486:	1c29      	adds	r1, r5, #0
    c488:	3b01      	subs	r3, #1
    c48a:	9311      	str	r3, [sp, #68]	; 0x44
    c48c:	1c20      	adds	r0, r4, #0
    c48e:	2200      	movs	r2, #0
    c490:	4bc6      	ldr	r3, [pc, #792]	; (c7ac <_dtoa_r+0x728>)
    c492:	f7fb fc7d 	bl	7d90 <__aeabi_dmul>
    c496:	3701      	adds	r7, #1
    c498:	9006      	str	r0, [sp, #24]
    c49a:	9107      	str	r1, [sp, #28]
    c49c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    c49e:	e002      	b.n	c4a6 <_dtoa_r+0x422>
    c4a0:	9b03      	ldr	r3, [sp, #12]
    c4a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c4a4:	9311      	str	r3, [sp, #68]	; 0x44
    c4a6:	1c38      	adds	r0, r7, #0
    c4a8:	9b06      	ldr	r3, [sp, #24]
    c4aa:	9c07      	ldr	r4, [sp, #28]
    c4ac:	9304      	str	r3, [sp, #16]
    c4ae:	9405      	str	r4, [sp, #20]
    c4b0:	f7fc fab8 	bl	8a24 <__aeabi_i2d>
    c4b4:	9a04      	ldr	r2, [sp, #16]
    c4b6:	9b05      	ldr	r3, [sp, #20]
    c4b8:	f7fb fc6a 	bl	7d90 <__aeabi_dmul>
    c4bc:	2200      	movs	r2, #0
    c4be:	4bbc      	ldr	r3, [pc, #752]	; (c7b0 <_dtoa_r+0x72c>)
    c4c0:	f7fa fd00 	bl	6ec4 <__aeabi_dadd>
    c4c4:	9006      	str	r0, [sp, #24]
    c4c6:	9107      	str	r1, [sp, #28]
    c4c8:	9e06      	ldr	r6, [sp, #24]
    c4ca:	9f07      	ldr	r7, [sp, #28]
    c4cc:	9b07      	ldr	r3, [sp, #28]
    c4ce:	4ab9      	ldr	r2, [pc, #740]	; (c7b4 <_dtoa_r+0x730>)
    c4d0:	189c      	adds	r4, r3, r2
    c4d2:	2d00      	cmp	r5, #0
    c4d4:	d11c      	bne.n	c510 <_dtoa_r+0x48c>
    c4d6:	9804      	ldr	r0, [sp, #16]
    c4d8:	9905      	ldr	r1, [sp, #20]
    c4da:	2200      	movs	r2, #0
    c4dc:	4bb6      	ldr	r3, [pc, #728]	; (c7b8 <_dtoa_r+0x734>)
    c4de:	f7fb fef1 	bl	82c4 <__aeabi_dsub>
    c4e2:	1c32      	adds	r2, r6, #0
    c4e4:	1c23      	adds	r3, r4, #0
    c4e6:	9004      	str	r0, [sp, #16]
    c4e8:	9105      	str	r1, [sp, #20]
    c4ea:	f7fa fc8f 	bl	6e0c <__aeabi_dcmpgt>
    c4ee:	2800      	cmp	r0, #0
    c4f0:	d000      	beq.n	c4f4 <_dtoa_r+0x470>
    c4f2:	e263      	b.n	c9bc <_dtoa_r+0x938>
    c4f4:	9804      	ldr	r0, [sp, #16]
    c4f6:	9905      	ldr	r1, [sp, #20]
    c4f8:	1c32      	adds	r2, r6, #0
    c4fa:	4eb0      	ldr	r6, [pc, #704]	; (c7bc <_dtoa_r+0x738>)
    c4fc:	9c07      	ldr	r4, [sp, #28]
    c4fe:	46b4      	mov	ip, r6
    c500:	4464      	add	r4, ip
    c502:	1c23      	adds	r3, r4, #0
    c504:	f7fa fc6e 	bl	6de4 <__aeabi_dcmplt>
    c508:	2800      	cmp	r0, #0
    c50a:	d000      	beq.n	c50e <_dtoa_r+0x48a>
    c50c:	e24c      	b.n	c9a8 <_dtoa_r+0x924>
    c50e:	e0a3      	b.n	c658 <_dtoa_r+0x5d4>
    c510:	4aab      	ldr	r2, [pc, #684]	; (c7c0 <_dtoa_r+0x73c>)
    c512:	1e6b      	subs	r3, r5, #1
    c514:	9910      	ldr	r1, [sp, #64]	; 0x40
    c516:	00db      	lsls	r3, r3, #3
    c518:	18d3      	adds	r3, r2, r3
    c51a:	2900      	cmp	r1, #0
    c51c:	d04e      	beq.n	c5bc <_dtoa_r+0x538>
    c51e:	681a      	ldr	r2, [r3, #0]
    c520:	685b      	ldr	r3, [r3, #4]
    c522:	2000      	movs	r0, #0
    c524:	49a7      	ldr	r1, [pc, #668]	; (c7c4 <_dtoa_r+0x740>)
    c526:	f7fa fff5 	bl	7514 <__aeabi_ddiv>
    c52a:	1c32      	adds	r2, r6, #0
    c52c:	1c23      	adds	r3, r4, #0
    c52e:	f7fb fec9 	bl	82c4 <__aeabi_dsub>
    c532:	9e04      	ldr	r6, [sp, #16]
    c534:	9f05      	ldr	r7, [sp, #20]
    c536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c538:	9006      	str	r0, [sp, #24]
    c53a:	9107      	str	r1, [sp, #28]
    c53c:	9304      	str	r3, [sp, #16]
    c53e:	1c39      	adds	r1, r7, #0
    c540:	1c30      	adds	r0, r6, #0
    c542:	f7fc fa39 	bl	89b8 <__aeabi_d2iz>
    c546:	1c04      	adds	r4, r0, #0
    c548:	f7fc fa6c 	bl	8a24 <__aeabi_i2d>
    c54c:	1c02      	adds	r2, r0, #0
    c54e:	1c0b      	adds	r3, r1, #0
    c550:	1c30      	adds	r0, r6, #0
    c552:	1c39      	adds	r1, r7, #0
    c554:	f7fb feb6 	bl	82c4 <__aeabi_dsub>
    c558:	9b04      	ldr	r3, [sp, #16]
    c55a:	3430      	adds	r4, #48	; 0x30
    c55c:	3301      	adds	r3, #1
    c55e:	9304      	str	r3, [sp, #16]
    c560:	3b01      	subs	r3, #1
    c562:	701c      	strb	r4, [r3, #0]
    c564:	9a06      	ldr	r2, [sp, #24]
    c566:	9b07      	ldr	r3, [sp, #28]
    c568:	1c06      	adds	r6, r0, #0
    c56a:	1c0f      	adds	r7, r1, #0
    c56c:	f7fa fc3a 	bl	6de4 <__aeabi_dcmplt>
    c570:	2800      	cmp	r0, #0
    c572:	d000      	beq.n	c576 <_dtoa_r+0x4f2>
    c574:	e361      	b.n	cc3a <_dtoa_r+0xbb6>
    c576:	1c32      	adds	r2, r6, #0
    c578:	1c3b      	adds	r3, r7, #0
    c57a:	2000      	movs	r0, #0
    c57c:	498a      	ldr	r1, [pc, #552]	; (c7a8 <_dtoa_r+0x724>)
    c57e:	f7fb fea1 	bl	82c4 <__aeabi_dsub>
    c582:	9a06      	ldr	r2, [sp, #24]
    c584:	9b07      	ldr	r3, [sp, #28]
    c586:	f7fa fc2d 	bl	6de4 <__aeabi_dcmplt>
    c58a:	2800      	cmp	r0, #0
    c58c:	d000      	beq.n	c590 <_dtoa_r+0x50c>
    c58e:	e0cd      	b.n	c72c <_dtoa_r+0x6a8>
    c590:	9b04      	ldr	r3, [sp, #16]
    c592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c594:	1a9b      	subs	r3, r3, r2
    c596:	42ab      	cmp	r3, r5
    c598:	da5e      	bge.n	c658 <_dtoa_r+0x5d4>
    c59a:	9806      	ldr	r0, [sp, #24]
    c59c:	9907      	ldr	r1, [sp, #28]
    c59e:	2200      	movs	r2, #0
    c5a0:	4b82      	ldr	r3, [pc, #520]	; (c7ac <_dtoa_r+0x728>)
    c5a2:	f7fb fbf5 	bl	7d90 <__aeabi_dmul>
    c5a6:	2200      	movs	r2, #0
    c5a8:	9006      	str	r0, [sp, #24]
    c5aa:	9107      	str	r1, [sp, #28]
    c5ac:	4b7f      	ldr	r3, [pc, #508]	; (c7ac <_dtoa_r+0x728>)
    c5ae:	1c30      	adds	r0, r6, #0
    c5b0:	1c39      	adds	r1, r7, #0
    c5b2:	f7fb fbed 	bl	7d90 <__aeabi_dmul>
    c5b6:	1c06      	adds	r6, r0, #0
    c5b8:	1c0f      	adds	r7, r1, #0
    c5ba:	e7c0      	b.n	c53e <_dtoa_r+0x4ba>
    c5bc:	6818      	ldr	r0, [r3, #0]
    c5be:	6859      	ldr	r1, [r3, #4]
    c5c0:	1c32      	adds	r2, r6, #0
    c5c2:	1c23      	adds	r3, r4, #0
    c5c4:	f7fb fbe4 	bl	7d90 <__aeabi_dmul>
    c5c8:	9e04      	ldr	r6, [sp, #16]
    c5ca:	9f05      	ldr	r7, [sp, #20]
    c5cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c5ce:	9006      	str	r0, [sp, #24]
    c5d0:	9107      	str	r1, [sp, #28]
    c5d2:	1963      	adds	r3, r4, r5
    c5d4:	9304      	str	r3, [sp, #16]
    c5d6:	1c39      	adds	r1, r7, #0
    c5d8:	1c30      	adds	r0, r6, #0
    c5da:	f7fc f9ed 	bl	89b8 <__aeabi_d2iz>
    c5de:	1c05      	adds	r5, r0, #0
    c5e0:	f7fc fa20 	bl	8a24 <__aeabi_i2d>
    c5e4:	1c0b      	adds	r3, r1, #0
    c5e6:	1c02      	adds	r2, r0, #0
    c5e8:	1c39      	adds	r1, r7, #0
    c5ea:	1c30      	adds	r0, r6, #0
    c5ec:	f7fb fe6a 	bl	82c4 <__aeabi_dsub>
    c5f0:	3530      	adds	r5, #48	; 0x30
    c5f2:	9b04      	ldr	r3, [sp, #16]
    c5f4:	7025      	strb	r5, [r4, #0]
    c5f6:	3401      	adds	r4, #1
    c5f8:	1c06      	adds	r6, r0, #0
    c5fa:	1c0f      	adds	r7, r1, #0
    c5fc:	42a3      	cmp	r3, r4
    c5fe:	d124      	bne.n	c64a <_dtoa_r+0x5c6>
    c600:	2200      	movs	r2, #0
    c602:	9806      	ldr	r0, [sp, #24]
    c604:	9907      	ldr	r1, [sp, #28]
    c606:	4b6f      	ldr	r3, [pc, #444]	; (c7c4 <_dtoa_r+0x740>)
    c608:	f7fa fc5c 	bl	6ec4 <__aeabi_dadd>
    c60c:	1c02      	adds	r2, r0, #0
    c60e:	1c0b      	adds	r3, r1, #0
    c610:	1c30      	adds	r0, r6, #0
    c612:	1c39      	adds	r1, r7, #0
    c614:	f7fa fbfa 	bl	6e0c <__aeabi_dcmpgt>
    c618:	2800      	cmp	r0, #0
    c61a:	d000      	beq.n	c61e <_dtoa_r+0x59a>
    c61c:	e086      	b.n	c72c <_dtoa_r+0x6a8>
    c61e:	9a06      	ldr	r2, [sp, #24]
    c620:	9b07      	ldr	r3, [sp, #28]
    c622:	2000      	movs	r0, #0
    c624:	4967      	ldr	r1, [pc, #412]	; (c7c4 <_dtoa_r+0x740>)
    c626:	f7fb fe4d 	bl	82c4 <__aeabi_dsub>
    c62a:	1c02      	adds	r2, r0, #0
    c62c:	1c0b      	adds	r3, r1, #0
    c62e:	1c30      	adds	r0, r6, #0
    c630:	1c39      	adds	r1, r7, #0
    c632:	f7fa fbd7 	bl	6de4 <__aeabi_dcmplt>
    c636:	2800      	cmp	r0, #0
    c638:	d00e      	beq.n	c658 <_dtoa_r+0x5d4>
    c63a:	9b04      	ldr	r3, [sp, #16]
    c63c:	3b01      	subs	r3, #1
    c63e:	781a      	ldrb	r2, [r3, #0]
    c640:	2a30      	cmp	r2, #48	; 0x30
    c642:	d000      	beq.n	c646 <_dtoa_r+0x5c2>
    c644:	e2f9      	b.n	cc3a <_dtoa_r+0xbb6>
    c646:	9304      	str	r3, [sp, #16]
    c648:	e7f7      	b.n	c63a <_dtoa_r+0x5b6>
    c64a:	2200      	movs	r2, #0
    c64c:	4b57      	ldr	r3, [pc, #348]	; (c7ac <_dtoa_r+0x728>)
    c64e:	f7fb fb9f 	bl	7d90 <__aeabi_dmul>
    c652:	1c06      	adds	r6, r0, #0
    c654:	1c0f      	adds	r7, r1, #0
    c656:	e7be      	b.n	c5d6 <_dtoa_r+0x552>
    c658:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c65a:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c65c:	9306      	str	r3, [sp, #24]
    c65e:	9407      	str	r4, [sp, #28]
    c660:	9b19      	ldr	r3, [sp, #100]	; 0x64
    c662:	2b00      	cmp	r3, #0
    c664:	da00      	bge.n	c668 <_dtoa_r+0x5e4>
    c666:	e086      	b.n	c776 <_dtoa_r+0x6f2>
    c668:	9a03      	ldr	r2, [sp, #12]
    c66a:	2a0e      	cmp	r2, #14
    c66c:	dd00      	ble.n	c670 <_dtoa_r+0x5ec>
    c66e:	e082      	b.n	c776 <_dtoa_r+0x6f2>
    c670:	00d3      	lsls	r3, r2, #3
    c672:	4a53      	ldr	r2, [pc, #332]	; (c7c0 <_dtoa_r+0x73c>)
    c674:	18d3      	adds	r3, r2, r3
    c676:	681e      	ldr	r6, [r3, #0]
    c678:	685f      	ldr	r7, [r3, #4]
    c67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c67c:	2b00      	cmp	r3, #0
    c67e:	da14      	bge.n	c6aa <_dtoa_r+0x626>
    c680:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c682:	2b00      	cmp	r3, #0
    c684:	dc11      	bgt.n	c6aa <_dtoa_r+0x626>
    c686:	d000      	beq.n	c68a <_dtoa_r+0x606>
    c688:	e190      	b.n	c9ac <_dtoa_r+0x928>
    c68a:	1c30      	adds	r0, r6, #0
    c68c:	1c39      	adds	r1, r7, #0
    c68e:	2200      	movs	r2, #0
    c690:	4b49      	ldr	r3, [pc, #292]	; (c7b8 <_dtoa_r+0x734>)
    c692:	f7fb fb7d 	bl	7d90 <__aeabi_dmul>
    c696:	9a06      	ldr	r2, [sp, #24]
    c698:	9b07      	ldr	r3, [sp, #28]
    c69a:	f7fa fbc1 	bl	6e20 <__aeabi_dcmpge>
    c69e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c6a0:	1c3e      	adds	r6, r7, #0
    c6a2:	2800      	cmp	r0, #0
    c6a4:	d000      	beq.n	c6a8 <_dtoa_r+0x624>
    c6a6:	e183      	b.n	c9b0 <_dtoa_r+0x92c>
    c6a8:	e18c      	b.n	c9c4 <_dtoa_r+0x940>
    c6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6ac:	9c06      	ldr	r4, [sp, #24]
    c6ae:	9d07      	ldr	r5, [sp, #28]
    c6b0:	9304      	str	r3, [sp, #16]
    c6b2:	1c32      	adds	r2, r6, #0
    c6b4:	1c3b      	adds	r3, r7, #0
    c6b6:	1c20      	adds	r0, r4, #0
    c6b8:	1c29      	adds	r1, r5, #0
    c6ba:	f7fa ff2b 	bl	7514 <__aeabi_ddiv>
    c6be:	f7fc f97b 	bl	89b8 <__aeabi_d2iz>
    c6c2:	9006      	str	r0, [sp, #24]
    c6c4:	f7fc f9ae 	bl	8a24 <__aeabi_i2d>
    c6c8:	1c32      	adds	r2, r6, #0
    c6ca:	1c3b      	adds	r3, r7, #0
    c6cc:	f7fb fb60 	bl	7d90 <__aeabi_dmul>
    c6d0:	1c02      	adds	r2, r0, #0
    c6d2:	1c0b      	adds	r3, r1, #0
    c6d4:	1c20      	adds	r0, r4, #0
    c6d6:	1c29      	adds	r1, r5, #0
    c6d8:	f7fb fdf4 	bl	82c4 <__aeabi_dsub>
    c6dc:	1c0b      	adds	r3, r1, #0
    c6de:	9904      	ldr	r1, [sp, #16]
    c6e0:	1c02      	adds	r2, r0, #0
    c6e2:	9806      	ldr	r0, [sp, #24]
    c6e4:	3101      	adds	r1, #1
    c6e6:	9104      	str	r1, [sp, #16]
    c6e8:	3030      	adds	r0, #48	; 0x30
    c6ea:	3901      	subs	r1, #1
    c6ec:	7008      	strb	r0, [r1, #0]
    c6ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    c6f0:	9904      	ldr	r1, [sp, #16]
    c6f2:	1a09      	subs	r1, r1, r0
    c6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6f6:	4281      	cmp	r1, r0
    c6f8:	d12e      	bne.n	c758 <_dtoa_r+0x6d4>
    c6fa:	1c10      	adds	r0, r2, #0
    c6fc:	1c19      	adds	r1, r3, #0
    c6fe:	f7fa fbe1 	bl	6ec4 <__aeabi_dadd>
    c702:	1c32      	adds	r2, r6, #0
    c704:	1c3b      	adds	r3, r7, #0
    c706:	1c04      	adds	r4, r0, #0
    c708:	1c0d      	adds	r5, r1, #0
    c70a:	f7fa fb7f 	bl	6e0c <__aeabi_dcmpgt>
    c70e:	2800      	cmp	r0, #0
    c710:	d110      	bne.n	c734 <_dtoa_r+0x6b0>
    c712:	1c20      	adds	r0, r4, #0
    c714:	1c29      	adds	r1, r5, #0
    c716:	1c32      	adds	r2, r6, #0
    c718:	1c3b      	adds	r3, r7, #0
    c71a:	f7fa fb5d 	bl	6dd8 <__aeabi_dcmpeq>
    c71e:	2800      	cmp	r0, #0
    c720:	d100      	bne.n	c724 <_dtoa_r+0x6a0>
    c722:	e28c      	b.n	cc3e <_dtoa_r+0xbba>
    c724:	9b06      	ldr	r3, [sp, #24]
    c726:	07db      	lsls	r3, r3, #31
    c728:	d404      	bmi.n	c734 <_dtoa_r+0x6b0>
    c72a:	e288      	b.n	cc3e <_dtoa_r+0xbba>
    c72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c72e:	9303      	str	r3, [sp, #12]
    c730:	e000      	b.n	c734 <_dtoa_r+0x6b0>
    c732:	9304      	str	r3, [sp, #16]
    c734:	9b04      	ldr	r3, [sp, #16]
    c736:	3b01      	subs	r3, #1
    c738:	781a      	ldrb	r2, [r3, #0]
    c73a:	2a39      	cmp	r2, #57	; 0x39
    c73c:	d108      	bne.n	c750 <_dtoa_r+0x6cc>
    c73e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c740:	4293      	cmp	r3, r2
    c742:	d1f6      	bne.n	c732 <_dtoa_r+0x6ae>
    c744:	9b03      	ldr	r3, [sp, #12]
    c746:	3301      	adds	r3, #1
    c748:	9303      	str	r3, [sp, #12]
    c74a:	2330      	movs	r3, #48	; 0x30
    c74c:	7013      	strb	r3, [r2, #0]
    c74e:	1c13      	adds	r3, r2, #0
    c750:	781a      	ldrb	r2, [r3, #0]
    c752:	3201      	adds	r2, #1
    c754:	701a      	strb	r2, [r3, #0]
    c756:	e272      	b.n	cc3e <_dtoa_r+0xbba>
    c758:	1c10      	adds	r0, r2, #0
    c75a:	1c19      	adds	r1, r3, #0
    c75c:	2200      	movs	r2, #0
    c75e:	4b13      	ldr	r3, [pc, #76]	; (c7ac <_dtoa_r+0x728>)
    c760:	f7fb fb16 	bl	7d90 <__aeabi_dmul>
    c764:	2200      	movs	r2, #0
    c766:	2300      	movs	r3, #0
    c768:	1c04      	adds	r4, r0, #0
    c76a:	1c0d      	adds	r5, r1, #0
    c76c:	f7fa fb34 	bl	6dd8 <__aeabi_dcmpeq>
    c770:	2800      	cmp	r0, #0
    c772:	d09e      	beq.n	c6b2 <_dtoa_r+0x62e>
    c774:	e263      	b.n	cc3e <_dtoa_r+0xbba>
    c776:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c778:	2a00      	cmp	r2, #0
    c77a:	d044      	beq.n	c806 <_dtoa_r+0x782>
    c77c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c77e:	2a01      	cmp	r2, #1
    c780:	dc0b      	bgt.n	c79a <_dtoa_r+0x716>
    c782:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c784:	2a00      	cmp	r2, #0
    c786:	d002      	beq.n	c78e <_dtoa_r+0x70a>
    c788:	4a0f      	ldr	r2, [pc, #60]	; (c7c8 <_dtoa_r+0x744>)
    c78a:	189b      	adds	r3, r3, r2
    c78c:	e002      	b.n	c794 <_dtoa_r+0x710>
    c78e:	2336      	movs	r3, #54	; 0x36
    c790:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c792:	1a9b      	subs	r3, r3, r2
    c794:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    c796:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c798:	e029      	b.n	c7ee <_dtoa_r+0x76a>
    c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c79c:	1e5d      	subs	r5, r3, #1
    c79e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7a0:	42ab      	cmp	r3, r5
    c7a2:	db13      	blt.n	c7cc <_dtoa_r+0x748>
    c7a4:	1b5d      	subs	r5, r3, r5
    c7a6:	e018      	b.n	c7da <_dtoa_r+0x756>
    c7a8:	3ff00000 	.word	0x3ff00000
    c7ac:	40240000 	.word	0x40240000
    c7b0:	401c0000 	.word	0x401c0000
    c7b4:	fcc00000 	.word	0xfcc00000
    c7b8:	40140000 	.word	0x40140000
    c7bc:	7cc00000 	.word	0x7cc00000
    c7c0:	0000f4f8 	.word	0x0000f4f8
    c7c4:	3fe00000 	.word	0x3fe00000
    c7c8:	00000433 	.word	0x00000433
    c7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c7ce:	950f      	str	r5, [sp, #60]	; 0x3c
    c7d0:	1aea      	subs	r2, r5, r3
    c7d2:	2500      	movs	r5, #0
    c7d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c7d6:	189b      	adds	r3, r3, r2
    c7d8:	9312      	str	r3, [sp, #72]	; 0x48
    c7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7dc:	2b00      	cmp	r3, #0
    c7de:	da04      	bge.n	c7ea <_dtoa_r+0x766>
    c7e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c7e4:	1a9c      	subs	r4, r3, r2
    c7e6:	2300      	movs	r3, #0
    c7e8:	e001      	b.n	c7ee <_dtoa_r+0x76a>
    c7ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c7f0:	9808      	ldr	r0, [sp, #32]
    c7f2:	18d2      	adds	r2, r2, r3
    c7f4:	920d      	str	r2, [sp, #52]	; 0x34
    c7f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c7f8:	2101      	movs	r1, #1
    c7fa:	18d3      	adds	r3, r2, r3
    c7fc:	930e      	str	r3, [sp, #56]	; 0x38
    c7fe:	f000 fef8 	bl	d5f2 <__i2b>
    c802:	1c06      	adds	r6, r0, #0
    c804:	e002      	b.n	c80c <_dtoa_r+0x788>
    c806:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    c808:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c80a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    c80c:	2c00      	cmp	r4, #0
    c80e:	d00c      	beq.n	c82a <_dtoa_r+0x7a6>
    c810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c812:	2b00      	cmp	r3, #0
    c814:	dd09      	ble.n	c82a <_dtoa_r+0x7a6>
    c816:	42a3      	cmp	r3, r4
    c818:	dd00      	ble.n	c81c <_dtoa_r+0x798>
    c81a:	1c23      	adds	r3, r4, #0
    c81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c81e:	1ae4      	subs	r4, r4, r3
    c820:	1ad2      	subs	r2, r2, r3
    c822:	920d      	str	r2, [sp, #52]	; 0x34
    c824:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c826:	1ad3      	subs	r3, r2, r3
    c828:	930e      	str	r3, [sp, #56]	; 0x38
    c82a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c82c:	2b00      	cmp	r3, #0
    c82e:	dd21      	ble.n	c874 <_dtoa_r+0x7f0>
    c830:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c832:	2b00      	cmp	r3, #0
    c834:	d018      	beq.n	c868 <_dtoa_r+0x7e4>
    c836:	2d00      	cmp	r5, #0
    c838:	dd10      	ble.n	c85c <_dtoa_r+0x7d8>
    c83a:	1c31      	adds	r1, r6, #0
    c83c:	1c2a      	adds	r2, r5, #0
    c83e:	9808      	ldr	r0, [sp, #32]
    c840:	f000 ff6e 	bl	d720 <__pow5mult>
    c844:	1c06      	adds	r6, r0, #0
    c846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c848:	1c31      	adds	r1, r6, #0
    c84a:	9808      	ldr	r0, [sp, #32]
    c84c:	f000 feda 	bl	d604 <__multiply>
    c850:	1c07      	adds	r7, r0, #0
    c852:	990a      	ldr	r1, [sp, #40]	; 0x28
    c854:	9808      	ldr	r0, [sp, #32]
    c856:	f000 fded 	bl	d434 <_Bfree>
    c85a:	970a      	str	r7, [sp, #40]	; 0x28
    c85c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c85e:	1b5a      	subs	r2, r3, r5
    c860:	d008      	beq.n	c874 <_dtoa_r+0x7f0>
    c862:	9808      	ldr	r0, [sp, #32]
    c864:	990a      	ldr	r1, [sp, #40]	; 0x28
    c866:	e002      	b.n	c86e <_dtoa_r+0x7ea>
    c868:	9808      	ldr	r0, [sp, #32]
    c86a:	990a      	ldr	r1, [sp, #40]	; 0x28
    c86c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c86e:	f000 ff57 	bl	d720 <__pow5mult>
    c872:	900a      	str	r0, [sp, #40]	; 0x28
    c874:	9808      	ldr	r0, [sp, #32]
    c876:	2101      	movs	r1, #1
    c878:	f000 febb 	bl	d5f2 <__i2b>
    c87c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c87e:	1c07      	adds	r7, r0, #0
    c880:	2b00      	cmp	r3, #0
    c882:	dd0a      	ble.n	c89a <_dtoa_r+0x816>
    c884:	1c39      	adds	r1, r7, #0
    c886:	1c1a      	adds	r2, r3, #0
    c888:	9808      	ldr	r0, [sp, #32]
    c88a:	f000 ff49 	bl	d720 <__pow5mult>
    c88e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c890:	1c07      	adds	r7, r0, #0
    c892:	2500      	movs	r5, #0
    c894:	2b01      	cmp	r3, #1
    c896:	dc1b      	bgt.n	c8d0 <_dtoa_r+0x84c>
    c898:	e003      	b.n	c8a2 <_dtoa_r+0x81e>
    c89a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c89c:	2500      	movs	r5, #0
    c89e:	2b01      	cmp	r3, #1
    c8a0:	dc12      	bgt.n	c8c8 <_dtoa_r+0x844>
    c8a2:	2500      	movs	r5, #0
    c8a4:	9b06      	ldr	r3, [sp, #24]
    c8a6:	42ab      	cmp	r3, r5
    c8a8:	d10e      	bne.n	c8c8 <_dtoa_r+0x844>
    c8aa:	9b07      	ldr	r3, [sp, #28]
    c8ac:	031b      	lsls	r3, r3, #12
    c8ae:	42ab      	cmp	r3, r5
    c8b0:	d10a      	bne.n	c8c8 <_dtoa_r+0x844>
    c8b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c8b4:	9a07      	ldr	r2, [sp, #28]
    c8b6:	4213      	tst	r3, r2
    c8b8:	d006      	beq.n	c8c8 <_dtoa_r+0x844>
    c8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c8bc:	3501      	adds	r5, #1
    c8be:	3301      	adds	r3, #1
    c8c0:	930d      	str	r3, [sp, #52]	; 0x34
    c8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8c4:	3301      	adds	r3, #1
    c8c6:	930e      	str	r3, [sp, #56]	; 0x38
    c8c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8ca:	2001      	movs	r0, #1
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d008      	beq.n	c8e2 <_dtoa_r+0x85e>
    c8d0:	693b      	ldr	r3, [r7, #16]
    c8d2:	3303      	adds	r3, #3
    c8d4:	009b      	lsls	r3, r3, #2
    c8d6:	18fb      	adds	r3, r7, r3
    c8d8:	6858      	ldr	r0, [r3, #4]
    c8da:	f000 fe40 	bl	d55e <__hi0bits>
    c8de:	2320      	movs	r3, #32
    c8e0:	1a18      	subs	r0, r3, r0
    c8e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8e4:	18c0      	adds	r0, r0, r3
    c8e6:	231f      	movs	r3, #31
    c8e8:	4018      	ands	r0, r3
    c8ea:	d009      	beq.n	c900 <_dtoa_r+0x87c>
    c8ec:	3301      	adds	r3, #1
    c8ee:	1a1b      	subs	r3, r3, r0
    c8f0:	2b04      	cmp	r3, #4
    c8f2:	dd02      	ble.n	c8fa <_dtoa_r+0x876>
    c8f4:	231c      	movs	r3, #28
    c8f6:	1a18      	subs	r0, r3, r0
    c8f8:	e003      	b.n	c902 <_dtoa_r+0x87e>
    c8fa:	2b04      	cmp	r3, #4
    c8fc:	d008      	beq.n	c910 <_dtoa_r+0x88c>
    c8fe:	1c18      	adds	r0, r3, #0
    c900:	301c      	adds	r0, #28
    c902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c904:	1824      	adds	r4, r4, r0
    c906:	181b      	adds	r3, r3, r0
    c908:	930d      	str	r3, [sp, #52]	; 0x34
    c90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c90c:	181b      	adds	r3, r3, r0
    c90e:	930e      	str	r3, [sp, #56]	; 0x38
    c910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c912:	2b00      	cmp	r3, #0
    c914:	dd05      	ble.n	c922 <_dtoa_r+0x89e>
    c916:	9808      	ldr	r0, [sp, #32]
    c918:	990a      	ldr	r1, [sp, #40]	; 0x28
    c91a:	1c1a      	adds	r2, r3, #0
    c91c:	f000 ff52 	bl	d7c4 <__lshift>
    c920:	900a      	str	r0, [sp, #40]	; 0x28
    c922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c924:	2b00      	cmp	r3, #0
    c926:	dd05      	ble.n	c934 <_dtoa_r+0x8b0>
    c928:	1c39      	adds	r1, r7, #0
    c92a:	9808      	ldr	r0, [sp, #32]
    c92c:	1c1a      	adds	r2, r3, #0
    c92e:	f000 ff49 	bl	d7c4 <__lshift>
    c932:	1c07      	adds	r7, r0, #0
    c934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c936:	2b00      	cmp	r3, #0
    c938:	d01e      	beq.n	c978 <_dtoa_r+0x8f4>
    c93a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c93c:	1c39      	adds	r1, r7, #0
    c93e:	f000 ff93 	bl	d868 <__mcmp>
    c942:	2800      	cmp	r0, #0
    c944:	da18      	bge.n	c978 <_dtoa_r+0x8f4>
    c946:	9b03      	ldr	r3, [sp, #12]
    c948:	9808      	ldr	r0, [sp, #32]
    c94a:	3b01      	subs	r3, #1
    c94c:	9303      	str	r3, [sp, #12]
    c94e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c950:	2300      	movs	r3, #0
    c952:	220a      	movs	r2, #10
    c954:	f000 fd87 	bl	d466 <__multadd>
    c958:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c95a:	900a      	str	r0, [sp, #40]	; 0x28
    c95c:	2b00      	cmp	r3, #0
    c95e:	d100      	bne.n	c962 <_dtoa_r+0x8de>
    c960:	e17f      	b.n	cc62 <_dtoa_r+0xbde>
    c962:	1c31      	adds	r1, r6, #0
    c964:	2300      	movs	r3, #0
    c966:	9808      	ldr	r0, [sp, #32]
    c968:	220a      	movs	r2, #10
    c96a:	f000 fd7c 	bl	d466 <__multadd>
    c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c970:	1c06      	adds	r6, r0, #0
    c972:	2b00      	cmp	r3, #0
    c974:	dc3c      	bgt.n	c9f0 <_dtoa_r+0x96c>
    c976:	e17d      	b.n	cc74 <_dtoa_r+0xbf0>
    c978:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c97a:	2b00      	cmp	r3, #0
    c97c:	dc2e      	bgt.n	c9dc <_dtoa_r+0x958>
    c97e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c980:	2b02      	cmp	r3, #2
    c982:	dd2b      	ble.n	c9dc <_dtoa_r+0x958>
    c984:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c986:	930b      	str	r3, [sp, #44]	; 0x2c
    c988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c98a:	2b00      	cmp	r3, #0
    c98c:	d110      	bne.n	c9b0 <_dtoa_r+0x92c>
    c98e:	1c39      	adds	r1, r7, #0
    c990:	9808      	ldr	r0, [sp, #32]
    c992:	2205      	movs	r2, #5
    c994:	f000 fd67 	bl	d466 <__multadd>
    c998:	1c07      	adds	r7, r0, #0
    c99a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c99c:	1c39      	adds	r1, r7, #0
    c99e:	f000 ff63 	bl	d868 <__mcmp>
    c9a2:	2800      	cmp	r0, #0
    c9a4:	dc0e      	bgt.n	c9c4 <_dtoa_r+0x940>
    c9a6:	e003      	b.n	c9b0 <_dtoa_r+0x92c>
    c9a8:	1c2f      	adds	r7, r5, #0
    c9aa:	e000      	b.n	c9ae <_dtoa_r+0x92a>
    c9ac:	2700      	movs	r7, #0
    c9ae:	1c3e      	adds	r6, r7, #0
    c9b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c9b2:	43db      	mvns	r3, r3
    c9b4:	9303      	str	r3, [sp, #12]
    c9b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9b8:	9304      	str	r3, [sp, #16]
    c9ba:	e00c      	b.n	c9d6 <_dtoa_r+0x952>
    c9bc:	1c2f      	adds	r7, r5, #0
    c9be:	1c2e      	adds	r6, r5, #0
    c9c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9c2:	9303      	str	r3, [sp, #12]
    c9c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c9c8:	3301      	adds	r3, #1
    c9ca:	9304      	str	r3, [sp, #16]
    c9cc:	2331      	movs	r3, #49	; 0x31
    c9ce:	7013      	strb	r3, [r2, #0]
    c9d0:	9b03      	ldr	r3, [sp, #12]
    c9d2:	3301      	adds	r3, #1
    c9d4:	9303      	str	r3, [sp, #12]
    c9d6:	9609      	str	r6, [sp, #36]	; 0x24
    c9d8:	2600      	movs	r6, #0
    c9da:	e11a      	b.n	cc12 <_dtoa_r+0xb8e>
    c9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d104      	bne.n	c9ec <_dtoa_r+0x968>
    c9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9e4:	930b      	str	r3, [sp, #44]	; 0x2c
    c9e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    c9e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c9ea:	e0d0      	b.n	cb8e <_dtoa_r+0xb0a>
    c9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c9ee:	930b      	str	r3, [sp, #44]	; 0x2c
    c9f0:	2c00      	cmp	r4, #0
    c9f2:	dd05      	ble.n	ca00 <_dtoa_r+0x97c>
    c9f4:	1c31      	adds	r1, r6, #0
    c9f6:	9808      	ldr	r0, [sp, #32]
    c9f8:	1c22      	adds	r2, r4, #0
    c9fa:	f000 fee3 	bl	d7c4 <__lshift>
    c9fe:	1c06      	adds	r6, r0, #0
    ca00:	9609      	str	r6, [sp, #36]	; 0x24
    ca02:	2d00      	cmp	r5, #0
    ca04:	d012      	beq.n	ca2c <_dtoa_r+0x9a8>
    ca06:	6871      	ldr	r1, [r6, #4]
    ca08:	9808      	ldr	r0, [sp, #32]
    ca0a:	f000 fcdb 	bl	d3c4 <_Balloc>
    ca0e:	1c31      	adds	r1, r6, #0
    ca10:	1c04      	adds	r4, r0, #0
    ca12:	6933      	ldr	r3, [r6, #16]
    ca14:	310c      	adds	r1, #12
    ca16:	1c9a      	adds	r2, r3, #2
    ca18:	0092      	lsls	r2, r2, #2
    ca1a:	300c      	adds	r0, #12
    ca1c:	f7fc fd5b 	bl	94d6 <memcpy>
    ca20:	9808      	ldr	r0, [sp, #32]
    ca22:	1c21      	adds	r1, r4, #0
    ca24:	2201      	movs	r2, #1
    ca26:	f000 fecd 	bl	d7c4 <__lshift>
    ca2a:	9009      	str	r0, [sp, #36]	; 0x24
    ca2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ca30:	930e      	str	r3, [sp, #56]	; 0x38
    ca32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ca36:	3b01      	subs	r3, #1
    ca38:	18d3      	adds	r3, r2, r3
    ca3a:	9310      	str	r3, [sp, #64]	; 0x40
    ca3c:	1c39      	adds	r1, r7, #0
    ca3e:	1c20      	adds	r0, r4, #0
    ca40:	f7ff fa98 	bl	bf74 <quorem>
    ca44:	1c03      	adds	r3, r0, #0
    ca46:	900f      	str	r0, [sp, #60]	; 0x3c
    ca48:	3330      	adds	r3, #48	; 0x30
    ca4a:	1c31      	adds	r1, r6, #0
    ca4c:	1c20      	adds	r0, r4, #0
    ca4e:	930d      	str	r3, [sp, #52]	; 0x34
    ca50:	f000 ff0a 	bl	d868 <__mcmp>
    ca54:	1c39      	adds	r1, r7, #0
    ca56:	900b      	str	r0, [sp, #44]	; 0x2c
    ca58:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca5a:	9808      	ldr	r0, [sp, #32]
    ca5c:	f000 ff1f 	bl	d89e <__mdiff>
    ca60:	2301      	movs	r3, #1
    ca62:	9304      	str	r3, [sp, #16]
    ca64:	68c3      	ldr	r3, [r0, #12]
    ca66:	1c05      	adds	r5, r0, #0
    ca68:	2b00      	cmp	r3, #0
    ca6a:	d104      	bne.n	ca76 <_dtoa_r+0x9f2>
    ca6c:	1c20      	adds	r0, r4, #0
    ca6e:	1c29      	adds	r1, r5, #0
    ca70:	f000 fefa 	bl	d868 <__mcmp>
    ca74:	9004      	str	r0, [sp, #16]
    ca76:	9808      	ldr	r0, [sp, #32]
    ca78:	1c29      	adds	r1, r5, #0
    ca7a:	f000 fcdb 	bl	d434 <_Bfree>
    ca7e:	9b04      	ldr	r3, [sp, #16]
    ca80:	9a20      	ldr	r2, [sp, #128]	; 0x80
    ca82:	4313      	orrs	r3, r2
    ca84:	d110      	bne.n	caa8 <_dtoa_r+0xa24>
    ca86:	9a06      	ldr	r2, [sp, #24]
    ca88:	3301      	adds	r3, #1
    ca8a:	4213      	tst	r3, r2
    ca8c:	d10c      	bne.n	caa8 <_dtoa_r+0xa24>
    ca8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ca90:	940a      	str	r4, [sp, #40]	; 0x28
    ca92:	2839      	cmp	r0, #57	; 0x39
    ca94:	d03d      	beq.n	cb12 <_dtoa_r+0xa8e>
    ca96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca98:	2b00      	cmp	r3, #0
    ca9a:	dd01      	ble.n	caa0 <_dtoa_r+0xa1c>
    ca9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ca9e:	3031      	adds	r0, #49	; 0x31
    caa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    caa2:	3301      	adds	r3, #1
    caa4:	9304      	str	r3, [sp, #16]
    caa6:	e03e      	b.n	cb26 <_dtoa_r+0xaa2>
    caa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caaa:	2b00      	cmp	r3, #0
    caac:	da05      	bge.n	caba <_dtoa_r+0xa36>
    caae:	9b04      	ldr	r3, [sp, #16]
    cab0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cab2:	940a      	str	r4, [sp, #40]	; 0x28
    cab4:	2b00      	cmp	r3, #0
    cab6:	dc09      	bgt.n	cacc <_dtoa_r+0xa48>
    cab8:	e01c      	b.n	caf4 <_dtoa_r+0xa70>
    caba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cabc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cabe:	431d      	orrs	r5, r3
    cac0:	d11e      	bne.n	cb00 <_dtoa_r+0xa7c>
    cac2:	2301      	movs	r3, #1
    cac4:	9a06      	ldr	r2, [sp, #24]
    cac6:	4213      	tst	r3, r2
    cac8:	d11a      	bne.n	cb00 <_dtoa_r+0xa7c>
    caca:	e7f0      	b.n	caae <_dtoa_r+0xa2a>
    cacc:	1c21      	adds	r1, r4, #0
    cace:	9808      	ldr	r0, [sp, #32]
    cad0:	2201      	movs	r2, #1
    cad2:	f000 fe77 	bl	d7c4 <__lshift>
    cad6:	1c39      	adds	r1, r7, #0
    cad8:	900a      	str	r0, [sp, #40]	; 0x28
    cada:	f000 fec5 	bl	d868 <__mcmp>
    cade:	2800      	cmp	r0, #0
    cae0:	dc03      	bgt.n	caea <_dtoa_r+0xa66>
    cae2:	d107      	bne.n	caf4 <_dtoa_r+0xa70>
    cae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cae6:	07db      	lsls	r3, r3, #31
    cae8:	d504      	bpl.n	caf4 <_dtoa_r+0xa70>
    caea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    caec:	2b39      	cmp	r3, #57	; 0x39
    caee:	d010      	beq.n	cb12 <_dtoa_r+0xa8e>
    caf0:	1c1d      	adds	r5, r3, #0
    caf2:	3501      	adds	r5, #1
    caf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    caf6:	3301      	adds	r3, #1
    caf8:	9304      	str	r3, [sp, #16]
    cafa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cafc:	701d      	strb	r5, [r3, #0]
    cafe:	e088      	b.n	cc12 <_dtoa_r+0xb8e>
    cb00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb02:	1c5d      	adds	r5, r3, #1
    cb04:	9b04      	ldr	r3, [sp, #16]
    cb06:	2b00      	cmp	r3, #0
    cb08:	dd10      	ble.n	cb2c <_dtoa_r+0xaa8>
    cb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb0c:	940a      	str	r4, [sp, #40]	; 0x28
    cb0e:	2b39      	cmp	r3, #57	; 0x39
    cb10:	d106      	bne.n	cb20 <_dtoa_r+0xa9c>
    cb12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cb16:	3301      	adds	r3, #1
    cb18:	9304      	str	r3, [sp, #16]
    cb1a:	2339      	movs	r3, #57	; 0x39
    cb1c:	7013      	strb	r3, [r2, #0]
    cb1e:	e060      	b.n	cbe2 <_dtoa_r+0xb5e>
    cb20:	980d      	ldr	r0, [sp, #52]	; 0x34
    cb22:	9504      	str	r5, [sp, #16]
    cb24:	3001      	adds	r0, #1
    cb26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb28:	7018      	strb	r0, [r3, #0]
    cb2a:	e072      	b.n	cc12 <_dtoa_r+0xb8e>
    cb2c:	466a      	mov	r2, sp
    cb2e:	2134      	movs	r1, #52	; 0x34
    cb30:	1852      	adds	r2, r2, r1
    cb32:	7812      	ldrb	r2, [r2, #0]
    cb34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb36:	9504      	str	r5, [sp, #16]
    cb38:	701a      	strb	r2, [r3, #0]
    cb3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cb3c:	4293      	cmp	r3, r2
    cb3e:	d03f      	beq.n	cbc0 <_dtoa_r+0xb3c>
    cb40:	1c21      	adds	r1, r4, #0
    cb42:	220a      	movs	r2, #10
    cb44:	2300      	movs	r3, #0
    cb46:	9808      	ldr	r0, [sp, #32]
    cb48:	f000 fc8d 	bl	d466 <__multadd>
    cb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb4e:	1c04      	adds	r4, r0, #0
    cb50:	1c31      	adds	r1, r6, #0
    cb52:	9808      	ldr	r0, [sp, #32]
    cb54:	220a      	movs	r2, #10
    cb56:	429e      	cmp	r6, r3
    cb58:	d105      	bne.n	cb66 <_dtoa_r+0xae2>
    cb5a:	2300      	movs	r3, #0
    cb5c:	f000 fc83 	bl	d466 <__multadd>
    cb60:	1c06      	adds	r6, r0, #0
    cb62:	9009      	str	r0, [sp, #36]	; 0x24
    cb64:	e00a      	b.n	cb7c <_dtoa_r+0xaf8>
    cb66:	2300      	movs	r3, #0
    cb68:	f000 fc7d 	bl	d466 <__multadd>
    cb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    cb6e:	1c06      	adds	r6, r0, #0
    cb70:	220a      	movs	r2, #10
    cb72:	9808      	ldr	r0, [sp, #32]
    cb74:	2300      	movs	r3, #0
    cb76:	f000 fc76 	bl	d466 <__multadd>
    cb7a:	9009      	str	r0, [sp, #36]	; 0x24
    cb7c:	950e      	str	r5, [sp, #56]	; 0x38
    cb7e:	e75d      	b.n	ca3c <_dtoa_r+0x9b8>
    cb80:	1c21      	adds	r1, r4, #0
    cb82:	9808      	ldr	r0, [sp, #32]
    cb84:	220a      	movs	r2, #10
    cb86:	2300      	movs	r3, #0
    cb88:	f000 fc6d 	bl	d466 <__multadd>
    cb8c:	1c04      	adds	r4, r0, #0
    cb8e:	1c20      	adds	r0, r4, #0
    cb90:	1c39      	adds	r1, r7, #0
    cb92:	f7ff f9ef 	bl	bf74 <quorem>
    cb96:	2234      	movs	r2, #52	; 0x34
    cb98:	466b      	mov	r3, sp
    cb9a:	3030      	adds	r0, #48	; 0x30
    cb9c:	189b      	adds	r3, r3, r2
    cb9e:	900d      	str	r0, [sp, #52]	; 0x34
    cba0:	781b      	ldrb	r3, [r3, #0]
    cba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cba4:	702b      	strb	r3, [r5, #0]
    cba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cba8:	3501      	adds	r5, #1
    cbaa:	1aeb      	subs	r3, r5, r3
    cbac:	4293      	cmp	r3, r2
    cbae:	dbe7      	blt.n	cb80 <_dtoa_r+0xafc>
    cbb0:	1e13      	subs	r3, r2, #0
    cbb2:	dc00      	bgt.n	cbb6 <_dtoa_r+0xb32>
    cbb4:	2301      	movs	r3, #1
    cbb6:	9609      	str	r6, [sp, #36]	; 0x24
    cbb8:	2600      	movs	r6, #0
    cbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbbc:	18d3      	adds	r3, r2, r3
    cbbe:	9304      	str	r3, [sp, #16]
    cbc0:	1c21      	adds	r1, r4, #0
    cbc2:	9808      	ldr	r0, [sp, #32]
    cbc4:	2201      	movs	r2, #1
    cbc6:	f000 fdfd 	bl	d7c4 <__lshift>
    cbca:	1c39      	adds	r1, r7, #0
    cbcc:	900a      	str	r0, [sp, #40]	; 0x28
    cbce:	f000 fe4b 	bl	d868 <__mcmp>
    cbd2:	2800      	cmp	r0, #0
    cbd4:	dc05      	bgt.n	cbe2 <_dtoa_r+0xb5e>
    cbd6:	d115      	bne.n	cc04 <_dtoa_r+0xb80>
    cbd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbda:	07db      	lsls	r3, r3, #31
    cbdc:	d401      	bmi.n	cbe2 <_dtoa_r+0xb5e>
    cbde:	e011      	b.n	cc04 <_dtoa_r+0xb80>
    cbe0:	9304      	str	r3, [sp, #16]
    cbe2:	9b04      	ldr	r3, [sp, #16]
    cbe4:	3b01      	subs	r3, #1
    cbe6:	781a      	ldrb	r2, [r3, #0]
    cbe8:	2a39      	cmp	r2, #57	; 0x39
    cbea:	d108      	bne.n	cbfe <_dtoa_r+0xb7a>
    cbec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbee:	4293      	cmp	r3, r2
    cbf0:	d1f6      	bne.n	cbe0 <_dtoa_r+0xb5c>
    cbf2:	9b03      	ldr	r3, [sp, #12]
    cbf4:	3301      	adds	r3, #1
    cbf6:	9303      	str	r3, [sp, #12]
    cbf8:	2331      	movs	r3, #49	; 0x31
    cbfa:	7013      	strb	r3, [r2, #0]
    cbfc:	e009      	b.n	cc12 <_dtoa_r+0xb8e>
    cbfe:	3201      	adds	r2, #1
    cc00:	701a      	strb	r2, [r3, #0]
    cc02:	e006      	b.n	cc12 <_dtoa_r+0xb8e>
    cc04:	9b04      	ldr	r3, [sp, #16]
    cc06:	3b01      	subs	r3, #1
    cc08:	781a      	ldrb	r2, [r3, #0]
    cc0a:	2a30      	cmp	r2, #48	; 0x30
    cc0c:	d101      	bne.n	cc12 <_dtoa_r+0xb8e>
    cc0e:	9304      	str	r3, [sp, #16]
    cc10:	e7f8      	b.n	cc04 <_dtoa_r+0xb80>
    cc12:	9808      	ldr	r0, [sp, #32]
    cc14:	1c39      	adds	r1, r7, #0
    cc16:	f000 fc0d 	bl	d434 <_Bfree>
    cc1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d00e      	beq.n	cc3e <_dtoa_r+0xbba>
    cc20:	2e00      	cmp	r6, #0
    cc22:	d005      	beq.n	cc30 <_dtoa_r+0xbac>
    cc24:	429e      	cmp	r6, r3
    cc26:	d003      	beq.n	cc30 <_dtoa_r+0xbac>
    cc28:	9808      	ldr	r0, [sp, #32]
    cc2a:	1c31      	adds	r1, r6, #0
    cc2c:	f000 fc02 	bl	d434 <_Bfree>
    cc30:	9808      	ldr	r0, [sp, #32]
    cc32:	9909      	ldr	r1, [sp, #36]	; 0x24
    cc34:	f000 fbfe 	bl	d434 <_Bfree>
    cc38:	e001      	b.n	cc3e <_dtoa_r+0xbba>
    cc3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc3c:	9303      	str	r3, [sp, #12]
    cc3e:	9808      	ldr	r0, [sp, #32]
    cc40:	990a      	ldr	r1, [sp, #40]	; 0x28
    cc42:	f000 fbf7 	bl	d434 <_Bfree>
    cc46:	2300      	movs	r3, #0
    cc48:	9a04      	ldr	r2, [sp, #16]
    cc4a:	980c      	ldr	r0, [sp, #48]	; 0x30
    cc4c:	7013      	strb	r3, [r2, #0]
    cc4e:	9b03      	ldr	r3, [sp, #12]
    cc50:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cc52:	3301      	adds	r3, #1
    cc54:	6013      	str	r3, [r2, #0]
    cc56:	9b24      	ldr	r3, [sp, #144]	; 0x90
    cc58:	2b00      	cmp	r3, #0
    cc5a:	d010      	beq.n	cc7e <_dtoa_r+0xbfa>
    cc5c:	9a04      	ldr	r2, [sp, #16]
    cc5e:	601a      	str	r2, [r3, #0]
    cc60:	e00d      	b.n	cc7e <_dtoa_r+0xbfa>
    cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc64:	2b00      	cmp	r3, #0
    cc66:	dd00      	ble.n	cc6a <_dtoa_r+0xbe6>
    cc68:	e6bd      	b.n	c9e6 <_dtoa_r+0x962>
    cc6a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cc6c:	2b02      	cmp	r3, #2
    cc6e:	dd00      	ble.n	cc72 <_dtoa_r+0xbee>
    cc70:	e68a      	b.n	c988 <_dtoa_r+0x904>
    cc72:	e6b8      	b.n	c9e6 <_dtoa_r+0x962>
    cc74:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cc76:	2b02      	cmp	r3, #2
    cc78:	dd00      	ble.n	cc7c <_dtoa_r+0xbf8>
    cc7a:	e685      	b.n	c988 <_dtoa_r+0x904>
    cc7c:	e6b8      	b.n	c9f0 <_dtoa_r+0x96c>
    cc7e:	b01b      	add	sp, #108	; 0x6c
    cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc82:	46c0      	nop			; (mov r8, r8)

0000cc84 <__sflags>:
    cc84:	780b      	ldrb	r3, [r1, #0]
    cc86:	b530      	push	{r4, r5, lr}
    cc88:	2b72      	cmp	r3, #114	; 0x72
    cc8a:	d00e      	beq.n	ccaa <__sflags+0x26>
    cc8c:	2b77      	cmp	r3, #119	; 0x77
    cc8e:	d007      	beq.n	cca0 <__sflags+0x1c>
    cc90:	2b61      	cmp	r3, #97	; 0x61
    cc92:	d10e      	bne.n	ccb2 <__sflags+0x2e>
    cc94:	2582      	movs	r5, #130	; 0x82
    cc96:	2084      	movs	r0, #132	; 0x84
    cc98:	00ad      	lsls	r5, r5, #2
    cc9a:	2301      	movs	r3, #1
    cc9c:	0040      	lsls	r0, r0, #1
    cc9e:	e01b      	b.n	ccd8 <__sflags+0x54>
    cca0:	25c0      	movs	r5, #192	; 0xc0
    cca2:	2301      	movs	r3, #1
    cca4:	00ed      	lsls	r5, r5, #3
    cca6:	2008      	movs	r0, #8
    cca8:	e016      	b.n	ccd8 <__sflags+0x54>
    ccaa:	2500      	movs	r5, #0
    ccac:	2004      	movs	r0, #4
    ccae:	1c2b      	adds	r3, r5, #0
    ccb0:	e012      	b.n	ccd8 <__sflags+0x54>
    ccb2:	2316      	movs	r3, #22
    ccb4:	6003      	str	r3, [r0, #0]
    ccb6:	2000      	movs	r0, #0
    ccb8:	e01b      	b.n	ccf2 <__sflags+0x6e>
    ccba:	2c62      	cmp	r4, #98	; 0x62
    ccbc:	d011      	beq.n	cce2 <__sflags+0x5e>
    ccbe:	2c78      	cmp	r4, #120	; 0x78
    ccc0:	d012      	beq.n	cce8 <__sflags+0x64>
    ccc2:	2c2b      	cmp	r4, #43	; 0x2b
    ccc4:	d108      	bne.n	ccd8 <__sflags+0x54>
    ccc6:	3c0f      	subs	r4, #15
    ccc8:	43a0      	bics	r0, r4
    ccca:	3c0c      	subs	r4, #12
    cccc:	4320      	orrs	r0, r4
    ccce:	3c0d      	subs	r4, #13
    ccd0:	43a3      	bics	r3, r4
    ccd2:	1c1c      	adds	r4, r3, #0
    ccd4:	2302      	movs	r3, #2
    ccd6:	4323      	orrs	r3, r4
    ccd8:	3101      	adds	r1, #1
    ccda:	780c      	ldrb	r4, [r1, #0]
    ccdc:	2c00      	cmp	r4, #0
    ccde:	d1ec      	bne.n	ccba <__sflags+0x36>
    cce0:	e005      	b.n	ccee <__sflags+0x6a>
    cce2:	2480      	movs	r4, #128	; 0x80
    cce4:	0264      	lsls	r4, r4, #9
    cce6:	e7f6      	b.n	ccd6 <__sflags+0x52>
    cce8:	2480      	movs	r4, #128	; 0x80
    ccea:	0124      	lsls	r4, r4, #4
    ccec:	e7f3      	b.n	ccd6 <__sflags+0x52>
    ccee:	432b      	orrs	r3, r5
    ccf0:	6013      	str	r3, [r2, #0]
    ccf2:	bd30      	pop	{r4, r5, pc}

0000ccf4 <_fstat_r>:
    ccf4:	b538      	push	{r3, r4, r5, lr}
    ccf6:	2300      	movs	r3, #0
    ccf8:	4c06      	ldr	r4, [pc, #24]	; (cd14 <_fstat_r+0x20>)
    ccfa:	1c05      	adds	r5, r0, #0
    ccfc:	1c08      	adds	r0, r1, #0
    ccfe:	1c11      	adds	r1, r2, #0
    cd00:	6023      	str	r3, [r4, #0]
    cd02:	f7f7 f94d 	bl	3fa0 <_fstat>
    cd06:	1c43      	adds	r3, r0, #1
    cd08:	d103      	bne.n	cd12 <_fstat_r+0x1e>
    cd0a:	6823      	ldr	r3, [r4, #0]
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d000      	beq.n	cd12 <_fstat_r+0x1e>
    cd10:	602b      	str	r3, [r5, #0]
    cd12:	bd38      	pop	{r3, r4, r5, pc}
    cd14:	2000445c 	.word	0x2000445c

0000cd18 <rshift>:
    cd18:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd1a:	1c06      	adds	r6, r0, #0
    cd1c:	6905      	ldr	r5, [r0, #16]
    cd1e:	3614      	adds	r6, #20
    cd20:	114a      	asrs	r2, r1, #5
    cd22:	1c34      	adds	r4, r6, #0
    cd24:	42aa      	cmp	r2, r5
    cd26:	da25      	bge.n	cd74 <rshift+0x5c>
    cd28:	231f      	movs	r3, #31
    cd2a:	00ad      	lsls	r5, r5, #2
    cd2c:	0092      	lsls	r2, r2, #2
    cd2e:	4019      	ands	r1, r3
    cd30:	1975      	adds	r5, r6, r5
    cd32:	18b2      	adds	r2, r6, r2
    cd34:	1c33      	adds	r3, r6, #0
    cd36:	2900      	cmp	r1, #0
    cd38:	d016      	beq.n	cd68 <rshift+0x50>
    cd3a:	1c13      	adds	r3, r2, #0
    cd3c:	cb04      	ldmia	r3!, {r2}
    cd3e:	2720      	movs	r7, #32
    cd40:	40ca      	lsrs	r2, r1
    cd42:	46b4      	mov	ip, r6
    cd44:	1a7f      	subs	r7, r7, r1
    cd46:	4664      	mov	r4, ip
    cd48:	42ab      	cmp	r3, r5
    cd4a:	d208      	bcs.n	cd5e <rshift+0x46>
    cd4c:	681c      	ldr	r4, [r3, #0]
    cd4e:	40bc      	lsls	r4, r7
    cd50:	4322      	orrs	r2, r4
    cd52:	4664      	mov	r4, ip
    cd54:	c404      	stmia	r4!, {r2}
    cd56:	cb04      	ldmia	r3!, {r2}
    cd58:	46a4      	mov	ip, r4
    cd5a:	40ca      	lsrs	r2, r1
    cd5c:	e7f3      	b.n	cd46 <rshift+0x2e>
    cd5e:	6022      	str	r2, [r4, #0]
    cd60:	2a00      	cmp	r2, #0
    cd62:	d007      	beq.n	cd74 <rshift+0x5c>
    cd64:	3404      	adds	r4, #4
    cd66:	e005      	b.n	cd74 <rshift+0x5c>
    cd68:	1c1c      	adds	r4, r3, #0
    cd6a:	42aa      	cmp	r2, r5
    cd6c:	d202      	bcs.n	cd74 <rshift+0x5c>
    cd6e:	ca02      	ldmia	r2!, {r1}
    cd70:	c302      	stmia	r3!, {r1}
    cd72:	e7f9      	b.n	cd68 <rshift+0x50>
    cd74:	1ba3      	subs	r3, r4, r6
    cd76:	109b      	asrs	r3, r3, #2
    cd78:	6103      	str	r3, [r0, #16]
    cd7a:	d100      	bne.n	cd7e <rshift+0x66>
    cd7c:	6143      	str	r3, [r0, #20]
    cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cd80 <__hexdig_fun>:
    cd80:	1c03      	adds	r3, r0, #0
    cd82:	3b30      	subs	r3, #48	; 0x30
    cd84:	2b09      	cmp	r3, #9
    cd86:	d801      	bhi.n	cd8c <__hexdig_fun+0xc>
    cd88:	3820      	subs	r0, #32
    cd8a:	e00b      	b.n	cda4 <__hexdig_fun+0x24>
    cd8c:	1c03      	adds	r3, r0, #0
    cd8e:	3b61      	subs	r3, #97	; 0x61
    cd90:	2b05      	cmp	r3, #5
    cd92:	d801      	bhi.n	cd98 <__hexdig_fun+0x18>
    cd94:	3847      	subs	r0, #71	; 0x47
    cd96:	e005      	b.n	cda4 <__hexdig_fun+0x24>
    cd98:	1c02      	adds	r2, r0, #0
    cd9a:	3a41      	subs	r2, #65	; 0x41
    cd9c:	2300      	movs	r3, #0
    cd9e:	2a05      	cmp	r2, #5
    cda0:	d801      	bhi.n	cda6 <__hexdig_fun+0x26>
    cda2:	3827      	subs	r0, #39	; 0x27
    cda4:	b2c3      	uxtb	r3, r0
    cda6:	1c18      	adds	r0, r3, #0
    cda8:	4770      	bx	lr

0000cdaa <__gethex>:
    cdaa:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdac:	b08d      	sub	sp, #52	; 0x34
    cdae:	9109      	str	r1, [sp, #36]	; 0x24
    cdb0:	9202      	str	r2, [sp, #8]
    cdb2:	930a      	str	r3, [sp, #40]	; 0x28
    cdb4:	9005      	str	r0, [sp, #20]
    cdb6:	f000 fad9 	bl	d36c <_localeconv_r>
    cdba:	6803      	ldr	r3, [r0, #0]
    cdbc:	1c18      	adds	r0, r3, #0
    cdbe:	9307      	str	r3, [sp, #28]
    cdc0:	f7fe f822 	bl	ae08 <strlen>
    cdc4:	9b07      	ldr	r3, [sp, #28]
    cdc6:	9004      	str	r0, [sp, #16]
    cdc8:	181b      	adds	r3, r3, r0
    cdca:	3b01      	subs	r3, #1
    cdcc:	781b      	ldrb	r3, [r3, #0]
    cdce:	930b      	str	r3, [sp, #44]	; 0x2c
    cdd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cdd2:	6819      	ldr	r1, [r3, #0]
    cdd4:	1c8a      	adds	r2, r1, #2
    cdd6:	9201      	str	r2, [sp, #4]
    cdd8:	9801      	ldr	r0, [sp, #4]
    cdda:	1a53      	subs	r3, r2, r1
    cddc:	7800      	ldrb	r0, [r0, #0]
    cdde:	3b02      	subs	r3, #2
    cde0:	3201      	adds	r2, #1
    cde2:	2830      	cmp	r0, #48	; 0x30
    cde4:	d0f7      	beq.n	cdd6 <__gethex+0x2c>
    cde6:	9308      	str	r3, [sp, #32]
    cde8:	f7ff ffca 	bl	cd80 <__hexdig_fun>
    cdec:	1e06      	subs	r6, r0, #0
    cdee:	d120      	bne.n	ce32 <__gethex+0x88>
    cdf0:	9801      	ldr	r0, [sp, #4]
    cdf2:	9907      	ldr	r1, [sp, #28]
    cdf4:	9a04      	ldr	r2, [sp, #16]
    cdf6:	f7fe f80e 	bl	ae16 <strncmp>
    cdfa:	2800      	cmp	r0, #0
    cdfc:	d13c      	bne.n	ce78 <__gethex+0xce>
    cdfe:	9b01      	ldr	r3, [sp, #4]
    ce00:	9a04      	ldr	r2, [sp, #16]
    ce02:	189c      	adds	r4, r3, r2
    ce04:	7820      	ldrb	r0, [r4, #0]
    ce06:	f7ff ffbb 	bl	cd80 <__hexdig_fun>
    ce0a:	2800      	cmp	r0, #0
    ce0c:	d037      	beq.n	ce7e <__gethex+0xd4>
    ce0e:	9401      	str	r4, [sp, #4]
    ce10:	9b01      	ldr	r3, [sp, #4]
    ce12:	7818      	ldrb	r0, [r3, #0]
    ce14:	2830      	cmp	r0, #48	; 0x30
    ce16:	d103      	bne.n	ce20 <__gethex+0x76>
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	3301      	adds	r3, #1
    ce1c:	9301      	str	r3, [sp, #4]
    ce1e:	e7f7      	b.n	ce10 <__gethex+0x66>
    ce20:	f7ff ffae 	bl	cd80 <__hexdig_fun>
    ce24:	4243      	negs	r3, r0
    ce26:	4143      	adcs	r3, r0
    ce28:	9303      	str	r3, [sp, #12]
    ce2a:	2301      	movs	r3, #1
    ce2c:	1c26      	adds	r6, r4, #0
    ce2e:	9308      	str	r3, [sp, #32]
    ce30:	e002      	b.n	ce38 <__gethex+0x8e>
    ce32:	2300      	movs	r3, #0
    ce34:	1c1e      	adds	r6, r3, #0
    ce36:	9303      	str	r3, [sp, #12]
    ce38:	9c01      	ldr	r4, [sp, #4]
    ce3a:	7820      	ldrb	r0, [r4, #0]
    ce3c:	f7ff ffa0 	bl	cd80 <__hexdig_fun>
    ce40:	2800      	cmp	r0, #0
    ce42:	d001      	beq.n	ce48 <__gethex+0x9e>
    ce44:	3401      	adds	r4, #1
    ce46:	e7f8      	b.n	ce3a <__gethex+0x90>
    ce48:	1c20      	adds	r0, r4, #0
    ce4a:	9907      	ldr	r1, [sp, #28]
    ce4c:	9a04      	ldr	r2, [sp, #16]
    ce4e:	f7fd ffe2 	bl	ae16 <strncmp>
    ce52:	2800      	cmp	r0, #0
    ce54:	d10b      	bne.n	ce6e <__gethex+0xc4>
    ce56:	2e00      	cmp	r6, #0
    ce58:	d10b      	bne.n	ce72 <__gethex+0xc8>
    ce5a:	9b04      	ldr	r3, [sp, #16]
    ce5c:	18e6      	adds	r6, r4, r3
    ce5e:	1c34      	adds	r4, r6, #0
    ce60:	7820      	ldrb	r0, [r4, #0]
    ce62:	f7ff ff8d 	bl	cd80 <__hexdig_fun>
    ce66:	2800      	cmp	r0, #0
    ce68:	d001      	beq.n	ce6e <__gethex+0xc4>
    ce6a:	3401      	adds	r4, #1
    ce6c:	e7f8      	b.n	ce60 <__gethex+0xb6>
    ce6e:	1e37      	subs	r7, r6, #0
    ce70:	d008      	beq.n	ce84 <__gethex+0xda>
    ce72:	1b36      	subs	r6, r6, r4
    ce74:	00b7      	lsls	r7, r6, #2
    ce76:	e005      	b.n	ce84 <__gethex+0xda>
    ce78:	9c01      	ldr	r4, [sp, #4]
    ce7a:	1c37      	adds	r7, r6, #0
    ce7c:	e000      	b.n	ce80 <__gethex+0xd6>
    ce7e:	1c07      	adds	r7, r0, #0
    ce80:	2301      	movs	r3, #1
    ce82:	9303      	str	r3, [sp, #12]
    ce84:	7823      	ldrb	r3, [r4, #0]
    ce86:	2b50      	cmp	r3, #80	; 0x50
    ce88:	d001      	beq.n	ce8e <__gethex+0xe4>
    ce8a:	2b70      	cmp	r3, #112	; 0x70
    ce8c:	d128      	bne.n	cee0 <__gethex+0x136>
    ce8e:	7863      	ldrb	r3, [r4, #1]
    ce90:	2b2b      	cmp	r3, #43	; 0x2b
    ce92:	d007      	beq.n	cea4 <__gethex+0xfa>
    ce94:	2b2d      	cmp	r3, #45	; 0x2d
    ce96:	d003      	beq.n	cea0 <__gethex+0xf6>
    ce98:	2300      	movs	r3, #0
    ce9a:	1c65      	adds	r5, r4, #1
    ce9c:	9306      	str	r3, [sp, #24]
    ce9e:	e004      	b.n	ceaa <__gethex+0x100>
    cea0:	2301      	movs	r3, #1
    cea2:	e000      	b.n	cea6 <__gethex+0xfc>
    cea4:	2300      	movs	r3, #0
    cea6:	9306      	str	r3, [sp, #24]
    cea8:	1ca5      	adds	r5, r4, #2
    ceaa:	7828      	ldrb	r0, [r5, #0]
    ceac:	f7ff ff68 	bl	cd80 <__hexdig_fun>
    ceb0:	1e43      	subs	r3, r0, #1
    ceb2:	b2db      	uxtb	r3, r3
    ceb4:	2b18      	cmp	r3, #24
    ceb6:	d813      	bhi.n	cee0 <__gethex+0x136>
    ceb8:	3810      	subs	r0, #16
    ceba:	3501      	adds	r5, #1
    cebc:	1c06      	adds	r6, r0, #0
    cebe:	7828      	ldrb	r0, [r5, #0]
    cec0:	f7ff ff5e 	bl	cd80 <__hexdig_fun>
    cec4:	1e43      	subs	r3, r0, #1
    cec6:	b2db      	uxtb	r3, r3
    cec8:	2b18      	cmp	r3, #24
    ceca:	d803      	bhi.n	ced4 <__gethex+0x12a>
    cecc:	230a      	movs	r3, #10
    cece:	435e      	muls	r6, r3
    ced0:	1830      	adds	r0, r6, r0
    ced2:	e7f1      	b.n	ceb8 <__gethex+0x10e>
    ced4:	9b06      	ldr	r3, [sp, #24]
    ced6:	2b00      	cmp	r3, #0
    ced8:	d000      	beq.n	cedc <__gethex+0x132>
    ceda:	4276      	negs	r6, r6
    cedc:	19bf      	adds	r7, r7, r6
    cede:	e000      	b.n	cee2 <__gethex+0x138>
    cee0:	1c25      	adds	r5, r4, #0
    cee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cee4:	601d      	str	r5, [r3, #0]
    cee6:	9b03      	ldr	r3, [sp, #12]
    cee8:	2b00      	cmp	r3, #0
    ceea:	d006      	beq.n	cefa <__gethex+0x150>
    ceec:	2000      	movs	r0, #0
    ceee:	9b08      	ldr	r3, [sp, #32]
    cef0:	4283      	cmp	r3, r0
    cef2:	d000      	beq.n	cef6 <__gethex+0x14c>
    cef4:	e17b      	b.n	d1ee <__gethex+0x444>
    cef6:	3006      	adds	r0, #6
    cef8:	e179      	b.n	d1ee <__gethex+0x444>
    cefa:	9b01      	ldr	r3, [sp, #4]
    cefc:	9903      	ldr	r1, [sp, #12]
    cefe:	1ae3      	subs	r3, r4, r3
    cf00:	3b01      	subs	r3, #1
    cf02:	2b07      	cmp	r3, #7
    cf04:	dd02      	ble.n	cf0c <__gethex+0x162>
    cf06:	3101      	adds	r1, #1
    cf08:	105b      	asrs	r3, r3, #1
    cf0a:	e7fa      	b.n	cf02 <__gethex+0x158>
    cf0c:	9805      	ldr	r0, [sp, #20]
    cf0e:	f000 fa59 	bl	d3c4 <_Balloc>
    cf12:	1c03      	adds	r3, r0, #0
    cf14:	2600      	movs	r6, #0
    cf16:	1c05      	adds	r5, r0, #0
    cf18:	3314      	adds	r3, #20
    cf1a:	9303      	str	r3, [sp, #12]
    cf1c:	9308      	str	r3, [sp, #32]
    cf1e:	9606      	str	r6, [sp, #24]
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	429c      	cmp	r4, r3
    cf24:	d92a      	bls.n	cf7c <__gethex+0x1d2>
    cf26:	1e63      	subs	r3, r4, #1
    cf28:	9309      	str	r3, [sp, #36]	; 0x24
    cf2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf2c:	781b      	ldrb	r3, [r3, #0]
    cf2e:	4293      	cmp	r3, r2
    cf30:	d009      	beq.n	cf46 <__gethex+0x19c>
    cf32:	9b06      	ldr	r3, [sp, #24]
    cf34:	2b20      	cmp	r3, #32
    cf36:	d114      	bne.n	cf62 <__gethex+0x1b8>
    cf38:	9b08      	ldr	r3, [sp, #32]
    cf3a:	601e      	str	r6, [r3, #0]
    cf3c:	2600      	movs	r6, #0
    cf3e:	3304      	adds	r3, #4
    cf40:	9308      	str	r3, [sp, #32]
    cf42:	9606      	str	r6, [sp, #24]
    cf44:	e00d      	b.n	cf62 <__gethex+0x1b8>
    cf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf48:	9a04      	ldr	r2, [sp, #16]
    cf4a:	1a9c      	subs	r4, r3, r2
    cf4c:	9b01      	ldr	r3, [sp, #4]
    cf4e:	3401      	adds	r4, #1
    cf50:	429c      	cmp	r4, r3
    cf52:	d3ee      	bcc.n	cf32 <__gethex+0x188>
    cf54:	1c20      	adds	r0, r4, #0
    cf56:	9907      	ldr	r1, [sp, #28]
    cf58:	f7fd ff5d 	bl	ae16 <strncmp>
    cf5c:	2800      	cmp	r0, #0
    cf5e:	d0df      	beq.n	cf20 <__gethex+0x176>
    cf60:	e7e7      	b.n	cf32 <__gethex+0x188>
    cf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf64:	7818      	ldrb	r0, [r3, #0]
    cf66:	f7ff ff0b 	bl	cd80 <__hexdig_fun>
    cf6a:	230f      	movs	r3, #15
    cf6c:	4018      	ands	r0, r3
    cf6e:	9b06      	ldr	r3, [sp, #24]
    cf70:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cf72:	4098      	lsls	r0, r3
    cf74:	3304      	adds	r3, #4
    cf76:	4306      	orrs	r6, r0
    cf78:	9306      	str	r3, [sp, #24]
    cf7a:	e7d1      	b.n	cf20 <__gethex+0x176>
    cf7c:	9c08      	ldr	r4, [sp, #32]
    cf7e:	9b03      	ldr	r3, [sp, #12]
    cf80:	c440      	stmia	r4!, {r6}
    cf82:	1ae4      	subs	r4, r4, r3
    cf84:	10a4      	asrs	r4, r4, #2
    cf86:	612c      	str	r4, [r5, #16]
    cf88:	1c30      	adds	r0, r6, #0
    cf8a:	f000 fae8 	bl	d55e <__hi0bits>
    cf8e:	9b02      	ldr	r3, [sp, #8]
    cf90:	0164      	lsls	r4, r4, #5
    cf92:	681b      	ldr	r3, [r3, #0]
    cf94:	1a26      	subs	r6, r4, r0
    cf96:	9301      	str	r3, [sp, #4]
    cf98:	429e      	cmp	r6, r3
    cf9a:	dd25      	ble.n	cfe8 <__gethex+0x23e>
    cf9c:	1af6      	subs	r6, r6, r3
    cf9e:	1c28      	adds	r0, r5, #0
    cfa0:	1c31      	adds	r1, r6, #0
    cfa2:	f000 fdf1 	bl	db88 <__any_on>
    cfa6:	2400      	movs	r4, #0
    cfa8:	42a0      	cmp	r0, r4
    cfaa:	d017      	beq.n	cfdc <__gethex+0x232>
    cfac:	231f      	movs	r3, #31
    cfae:	3401      	adds	r4, #1
    cfb0:	1c20      	adds	r0, r4, #0
    cfb2:	1e72      	subs	r2, r6, #1
    cfb4:	4013      	ands	r3, r2
    cfb6:	4098      	lsls	r0, r3
    cfb8:	1c03      	adds	r3, r0, #0
    cfba:	1151      	asrs	r1, r2, #5
    cfbc:	9803      	ldr	r0, [sp, #12]
    cfbe:	0089      	lsls	r1, r1, #2
    cfc0:	5809      	ldr	r1, [r1, r0]
    cfc2:	4219      	tst	r1, r3
    cfc4:	d00a      	beq.n	cfdc <__gethex+0x232>
    cfc6:	42a2      	cmp	r2, r4
    cfc8:	dc01      	bgt.n	cfce <__gethex+0x224>
    cfca:	2402      	movs	r4, #2
    cfcc:	e006      	b.n	cfdc <__gethex+0x232>
    cfce:	1eb1      	subs	r1, r6, #2
    cfd0:	1c28      	adds	r0, r5, #0
    cfd2:	f000 fdd9 	bl	db88 <__any_on>
    cfd6:	2800      	cmp	r0, #0
    cfd8:	d0f7      	beq.n	cfca <__gethex+0x220>
    cfda:	2403      	movs	r4, #3
    cfdc:	1c28      	adds	r0, r5, #0
    cfde:	1c31      	adds	r1, r6, #0
    cfe0:	f7ff fe9a 	bl	cd18 <rshift>
    cfe4:	19bf      	adds	r7, r7, r6
    cfe6:	e00e      	b.n	d006 <__gethex+0x25c>
    cfe8:	9b01      	ldr	r3, [sp, #4]
    cfea:	2400      	movs	r4, #0
    cfec:	429e      	cmp	r6, r3
    cfee:	da0a      	bge.n	d006 <__gethex+0x25c>
    cff0:	1b9e      	subs	r6, r3, r6
    cff2:	1c29      	adds	r1, r5, #0
    cff4:	9805      	ldr	r0, [sp, #20]
    cff6:	1c32      	adds	r2, r6, #0
    cff8:	f000 fbe4 	bl	d7c4 <__lshift>
    cffc:	1c03      	adds	r3, r0, #0
    cffe:	1c05      	adds	r5, r0, #0
    d000:	3314      	adds	r3, #20
    d002:	1bbf      	subs	r7, r7, r6
    d004:	9303      	str	r3, [sp, #12]
    d006:	9b02      	ldr	r3, [sp, #8]
    d008:	689b      	ldr	r3, [r3, #8]
    d00a:	9304      	str	r3, [sp, #16]
    d00c:	429f      	cmp	r7, r3
    d00e:	dd08      	ble.n	d022 <__gethex+0x278>
    d010:	9805      	ldr	r0, [sp, #20]
    d012:	1c29      	adds	r1, r5, #0
    d014:	f000 fa0e 	bl	d434 <_Bfree>
    d018:	2300      	movs	r3, #0
    d01a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d01c:	20a3      	movs	r0, #163	; 0xa3
    d01e:	6013      	str	r3, [r2, #0]
    d020:	e0e5      	b.n	d1ee <__gethex+0x444>
    d022:	9b02      	ldr	r3, [sp, #8]
    d024:	685e      	ldr	r6, [r3, #4]
    d026:	42b7      	cmp	r7, r6
    d028:	da5a      	bge.n	d0e0 <__gethex+0x336>
    d02a:	9b01      	ldr	r3, [sp, #4]
    d02c:	1bf6      	subs	r6, r6, r7
    d02e:	429e      	cmp	r6, r3
    d030:	db32      	blt.n	d098 <__gethex+0x2ee>
    d032:	9b02      	ldr	r3, [sp, #8]
    d034:	68db      	ldr	r3, [r3, #12]
    d036:	2b02      	cmp	r3, #2
    d038:	d01e      	beq.n	d078 <__gethex+0x2ce>
    d03a:	2b03      	cmp	r3, #3
    d03c:	d020      	beq.n	d080 <__gethex+0x2d6>
    d03e:	2b01      	cmp	r3, #1
    d040:	d121      	bne.n	d086 <__gethex+0x2dc>
    d042:	9b01      	ldr	r3, [sp, #4]
    d044:	429e      	cmp	r6, r3
    d046:	d11e      	bne.n	d086 <__gethex+0x2dc>
    d048:	2b01      	cmp	r3, #1
    d04a:	dc0d      	bgt.n	d068 <__gethex+0x2be>
    d04c:	9b02      	ldr	r3, [sp, #8]
    d04e:	2062      	movs	r0, #98	; 0x62
    d050:	685b      	ldr	r3, [r3, #4]
    d052:	9301      	str	r3, [sp, #4]
    d054:	9a01      	ldr	r2, [sp, #4]
    d056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d058:	601a      	str	r2, [r3, #0]
    d05a:	2301      	movs	r3, #1
    d05c:	9a03      	ldr	r2, [sp, #12]
    d05e:	612b      	str	r3, [r5, #16]
    d060:	6013      	str	r3, [r2, #0]
    d062:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d064:	601d      	str	r5, [r3, #0]
    d066:	e0c2      	b.n	d1ee <__gethex+0x444>
    d068:	9901      	ldr	r1, [sp, #4]
    d06a:	1c28      	adds	r0, r5, #0
    d06c:	3901      	subs	r1, #1
    d06e:	f000 fd8b 	bl	db88 <__any_on>
    d072:	2800      	cmp	r0, #0
    d074:	d1ea      	bne.n	d04c <__gethex+0x2a2>
    d076:	e006      	b.n	d086 <__gethex+0x2dc>
    d078:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d07a:	2b00      	cmp	r3, #0
    d07c:	d0e6      	beq.n	d04c <__gethex+0x2a2>
    d07e:	e002      	b.n	d086 <__gethex+0x2dc>
    d080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d082:	2b00      	cmp	r3, #0
    d084:	d1e2      	bne.n	d04c <__gethex+0x2a2>
    d086:	9805      	ldr	r0, [sp, #20]
    d088:	1c29      	adds	r1, r5, #0
    d08a:	f000 f9d3 	bl	d434 <_Bfree>
    d08e:	2300      	movs	r3, #0
    d090:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d092:	2050      	movs	r0, #80	; 0x50
    d094:	6013      	str	r3, [r2, #0]
    d096:	e0aa      	b.n	d1ee <__gethex+0x444>
    d098:	1e77      	subs	r7, r6, #1
    d09a:	2c00      	cmp	r4, #0
    d09c:	d107      	bne.n	d0ae <__gethex+0x304>
    d09e:	2f00      	cmp	r7, #0
    d0a0:	dd06      	ble.n	d0b0 <__gethex+0x306>
    d0a2:	1c28      	adds	r0, r5, #0
    d0a4:	1c39      	adds	r1, r7, #0
    d0a6:	f000 fd6f 	bl	db88 <__any_on>
    d0aa:	1c04      	adds	r4, r0, #0
    d0ac:	e000      	b.n	d0b0 <__gethex+0x306>
    d0ae:	2401      	movs	r4, #1
    d0b0:	231f      	movs	r3, #31
    d0b2:	117a      	asrs	r2, r7, #5
    d0b4:	401f      	ands	r7, r3
    d0b6:	3b1e      	subs	r3, #30
    d0b8:	40bb      	lsls	r3, r7
    d0ba:	1c1f      	adds	r7, r3, #0
    d0bc:	9b03      	ldr	r3, [sp, #12]
    d0be:	0092      	lsls	r2, r2, #2
    d0c0:	58d3      	ldr	r3, [r2, r3]
    d0c2:	423b      	tst	r3, r7
    d0c4:	d001      	beq.n	d0ca <__gethex+0x320>
    d0c6:	2302      	movs	r3, #2
    d0c8:	431c      	orrs	r4, r3
    d0ca:	9b01      	ldr	r3, [sp, #4]
    d0cc:	1c31      	adds	r1, r6, #0
    d0ce:	1b9b      	subs	r3, r3, r6
    d0d0:	1c28      	adds	r0, r5, #0
    d0d2:	9301      	str	r3, [sp, #4]
    d0d4:	f7ff fe20 	bl	cd18 <rshift>
    d0d8:	9b02      	ldr	r3, [sp, #8]
    d0da:	2602      	movs	r6, #2
    d0dc:	685f      	ldr	r7, [r3, #4]
    d0de:	e000      	b.n	d0e2 <__gethex+0x338>
    d0e0:	2601      	movs	r6, #1
    d0e2:	2c00      	cmp	r4, #0
    d0e4:	d07e      	beq.n	d1e4 <__gethex+0x43a>
    d0e6:	9b02      	ldr	r3, [sp, #8]
    d0e8:	68db      	ldr	r3, [r3, #12]
    d0ea:	2b02      	cmp	r3, #2
    d0ec:	d00b      	beq.n	d106 <__gethex+0x35c>
    d0ee:	2b03      	cmp	r3, #3
    d0f0:	d00d      	beq.n	d10e <__gethex+0x364>
    d0f2:	2b01      	cmp	r3, #1
    d0f4:	d174      	bne.n	d1e0 <__gethex+0x436>
    d0f6:	07a2      	lsls	r2, r4, #30
    d0f8:	d572      	bpl.n	d1e0 <__gethex+0x436>
    d0fa:	9a03      	ldr	r2, [sp, #12]
    d0fc:	6812      	ldr	r2, [r2, #0]
    d0fe:	4314      	orrs	r4, r2
    d100:	421c      	tst	r4, r3
    d102:	d107      	bne.n	d114 <__gethex+0x36a>
    d104:	e06c      	b.n	d1e0 <__gethex+0x436>
    d106:	2301      	movs	r3, #1
    d108:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d10a:	1a9b      	subs	r3, r3, r2
    d10c:	9313      	str	r3, [sp, #76]	; 0x4c
    d10e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d110:	2b00      	cmp	r3, #0
    d112:	d065      	beq.n	d1e0 <__gethex+0x436>
    d114:	692c      	ldr	r4, [r5, #16]
    d116:	00a3      	lsls	r3, r4, #2
    d118:	9303      	str	r3, [sp, #12]
    d11a:	1c2b      	adds	r3, r5, #0
    d11c:	9a03      	ldr	r2, [sp, #12]
    d11e:	3314      	adds	r3, #20
    d120:	1899      	adds	r1, r3, r2
    d122:	681a      	ldr	r2, [r3, #0]
    d124:	1c50      	adds	r0, r2, #1
    d126:	d002      	beq.n	d12e <__gethex+0x384>
    d128:	3201      	adds	r2, #1
    d12a:	601a      	str	r2, [r3, #0]
    d12c:	e021      	b.n	d172 <__gethex+0x3c8>
    d12e:	2200      	movs	r2, #0
    d130:	c304      	stmia	r3!, {r2}
    d132:	4299      	cmp	r1, r3
    d134:	d8f5      	bhi.n	d122 <__gethex+0x378>
    d136:	68ab      	ldr	r3, [r5, #8]
    d138:	429c      	cmp	r4, r3
    d13a:	db12      	blt.n	d162 <__gethex+0x3b8>
    d13c:	686b      	ldr	r3, [r5, #4]
    d13e:	9805      	ldr	r0, [sp, #20]
    d140:	1c59      	adds	r1, r3, #1
    d142:	f000 f93f 	bl	d3c4 <_Balloc>
    d146:	1c29      	adds	r1, r5, #0
    d148:	692b      	ldr	r3, [r5, #16]
    d14a:	9004      	str	r0, [sp, #16]
    d14c:	1c9a      	adds	r2, r3, #2
    d14e:	310c      	adds	r1, #12
    d150:	0092      	lsls	r2, r2, #2
    d152:	300c      	adds	r0, #12
    d154:	f7fc f9bf 	bl	94d6 <memcpy>
    d158:	1c29      	adds	r1, r5, #0
    d15a:	9805      	ldr	r0, [sp, #20]
    d15c:	f000 f96a 	bl	d434 <_Bfree>
    d160:	9d04      	ldr	r5, [sp, #16]
    d162:	692b      	ldr	r3, [r5, #16]
    d164:	1c5a      	adds	r2, r3, #1
    d166:	612a      	str	r2, [r5, #16]
    d168:	2201      	movs	r2, #1
    d16a:	3304      	adds	r3, #4
    d16c:	009b      	lsls	r3, r3, #2
    d16e:	18eb      	adds	r3, r5, r3
    d170:	605a      	str	r2, [r3, #4]
    d172:	1c2b      	adds	r3, r5, #0
    d174:	3314      	adds	r3, #20
    d176:	2e02      	cmp	r6, #2
    d178:	d111      	bne.n	d19e <__gethex+0x3f4>
    d17a:	9a02      	ldr	r2, [sp, #8]
    d17c:	9901      	ldr	r1, [sp, #4]
    d17e:	6812      	ldr	r2, [r2, #0]
    d180:	3a01      	subs	r2, #1
    d182:	4291      	cmp	r1, r2
    d184:	d12a      	bne.n	d1dc <__gethex+0x432>
    d186:	114a      	asrs	r2, r1, #5
    d188:	211f      	movs	r1, #31
    d18a:	9801      	ldr	r0, [sp, #4]
    d18c:	0092      	lsls	r2, r2, #2
    d18e:	4001      	ands	r1, r0
    d190:	2001      	movs	r0, #1
    d192:	1c04      	adds	r4, r0, #0
    d194:	408c      	lsls	r4, r1
    d196:	58d3      	ldr	r3, [r2, r3]
    d198:	4223      	tst	r3, r4
    d19a:	d01f      	beq.n	d1dc <__gethex+0x432>
    d19c:	e00c      	b.n	d1b8 <__gethex+0x40e>
    d19e:	692a      	ldr	r2, [r5, #16]
    d1a0:	42a2      	cmp	r2, r4
    d1a2:	dd0b      	ble.n	d1bc <__gethex+0x412>
    d1a4:	1c28      	adds	r0, r5, #0
    d1a6:	2101      	movs	r1, #1
    d1a8:	f7ff fdb6 	bl	cd18 <rshift>
    d1ac:	9b02      	ldr	r3, [sp, #8]
    d1ae:	3701      	adds	r7, #1
    d1b0:	689b      	ldr	r3, [r3, #8]
    d1b2:	429f      	cmp	r7, r3
    d1b4:	dd00      	ble.n	d1b8 <__gethex+0x40e>
    d1b6:	e72b      	b.n	d010 <__gethex+0x266>
    d1b8:	2601      	movs	r6, #1
    d1ba:	e00f      	b.n	d1dc <__gethex+0x432>
    d1bc:	241f      	movs	r4, #31
    d1be:	9a01      	ldr	r2, [sp, #4]
    d1c0:	2601      	movs	r6, #1
    d1c2:	4022      	ands	r2, r4
    d1c4:	1e14      	subs	r4, r2, #0
    d1c6:	d009      	beq.n	d1dc <__gethex+0x432>
    d1c8:	9a03      	ldr	r2, [sp, #12]
    d1ca:	189b      	adds	r3, r3, r2
    d1cc:	3b04      	subs	r3, #4
    d1ce:	6818      	ldr	r0, [r3, #0]
    d1d0:	f000 f9c5 	bl	d55e <__hi0bits>
    d1d4:	2120      	movs	r1, #32
    d1d6:	1b0c      	subs	r4, r1, r4
    d1d8:	42a0      	cmp	r0, r4
    d1da:	dbe3      	blt.n	d1a4 <__gethex+0x3fa>
    d1dc:	2320      	movs	r3, #32
    d1de:	e000      	b.n	d1e2 <__gethex+0x438>
    d1e0:	2310      	movs	r3, #16
    d1e2:	431e      	orrs	r6, r3
    d1e4:	1c30      	adds	r0, r6, #0
    d1e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d1e8:	601d      	str	r5, [r3, #0]
    d1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d1ec:	601f      	str	r7, [r3, #0]
    d1ee:	b00d      	add	sp, #52	; 0x34
    d1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d1f2 <L_shift>:
    d1f2:	2308      	movs	r3, #8
    d1f4:	b570      	push	{r4, r5, r6, lr}
    d1f6:	2520      	movs	r5, #32
    d1f8:	1a9a      	subs	r2, r3, r2
    d1fa:	0092      	lsls	r2, r2, #2
    d1fc:	1aad      	subs	r5, r5, r2
    d1fe:	6843      	ldr	r3, [r0, #4]
    d200:	6806      	ldr	r6, [r0, #0]
    d202:	1c1c      	adds	r4, r3, #0
    d204:	40ac      	lsls	r4, r5
    d206:	40d3      	lsrs	r3, r2
    d208:	4334      	orrs	r4, r6
    d20a:	6004      	str	r4, [r0, #0]
    d20c:	6043      	str	r3, [r0, #4]
    d20e:	3004      	adds	r0, #4
    d210:	4288      	cmp	r0, r1
    d212:	d3f4      	bcc.n	d1fe <L_shift+0xc>
    d214:	bd70      	pop	{r4, r5, r6, pc}

0000d216 <__hexnan>:
    d216:	b5f0      	push	{r4, r5, r6, r7, lr}
    d218:	b089      	sub	sp, #36	; 0x24
    d21a:	9200      	str	r2, [sp, #0]
    d21c:	680a      	ldr	r2, [r1, #0]
    d21e:	9900      	ldr	r1, [sp, #0]
    d220:	1153      	asrs	r3, r2, #5
    d222:	009b      	lsls	r3, r3, #2
    d224:	18cb      	adds	r3, r1, r3
    d226:	9302      	str	r3, [sp, #8]
    d228:	231f      	movs	r3, #31
    d22a:	401a      	ands	r2, r3
    d22c:	9007      	str	r0, [sp, #28]
    d22e:	9205      	str	r2, [sp, #20]
    d230:	d002      	beq.n	d238 <__hexnan+0x22>
    d232:	9b02      	ldr	r3, [sp, #8]
    d234:	3304      	adds	r3, #4
    d236:	9302      	str	r3, [sp, #8]
    d238:	9b02      	ldr	r3, [sp, #8]
    d23a:	2500      	movs	r5, #0
    d23c:	1f1e      	subs	r6, r3, #4
    d23e:	1c37      	adds	r7, r6, #0
    d240:	1c34      	adds	r4, r6, #0
    d242:	9b07      	ldr	r3, [sp, #28]
    d244:	6035      	str	r5, [r6, #0]
    d246:	681b      	ldr	r3, [r3, #0]
    d248:	9506      	str	r5, [sp, #24]
    d24a:	9303      	str	r3, [sp, #12]
    d24c:	9501      	str	r5, [sp, #4]
    d24e:	9b03      	ldr	r3, [sp, #12]
    d250:	3301      	adds	r3, #1
    d252:	9303      	str	r3, [sp, #12]
    d254:	781b      	ldrb	r3, [r3, #0]
    d256:	9304      	str	r3, [sp, #16]
    d258:	2b00      	cmp	r3, #0
    d25a:	d03b      	beq.n	d2d4 <__hexnan+0xbe>
    d25c:	9804      	ldr	r0, [sp, #16]
    d25e:	f7ff fd8f 	bl	cd80 <__hexdig_fun>
    d262:	2800      	cmp	r0, #0
    d264:	d122      	bne.n	d2ac <__hexnan+0x96>
    d266:	9b04      	ldr	r3, [sp, #16]
    d268:	2b20      	cmp	r3, #32
    d26a:	d817      	bhi.n	d29c <__hexnan+0x86>
    d26c:	9b06      	ldr	r3, [sp, #24]
    d26e:	9a01      	ldr	r2, [sp, #4]
    d270:	4293      	cmp	r3, r2
    d272:	daec      	bge.n	d24e <__hexnan+0x38>
    d274:	42bc      	cmp	r4, r7
    d276:	d206      	bcs.n	d286 <__hexnan+0x70>
    d278:	2d07      	cmp	r5, #7
    d27a:	dc04      	bgt.n	d286 <__hexnan+0x70>
    d27c:	1c20      	adds	r0, r4, #0
    d27e:	1c39      	adds	r1, r7, #0
    d280:	1c2a      	adds	r2, r5, #0
    d282:	f7ff ffb6 	bl	d1f2 <L_shift>
    d286:	9b00      	ldr	r3, [sp, #0]
    d288:	2508      	movs	r5, #8
    d28a:	429c      	cmp	r4, r3
    d28c:	d9df      	bls.n	d24e <__hexnan+0x38>
    d28e:	2500      	movs	r5, #0
    d290:	9b01      	ldr	r3, [sp, #4]
    d292:	1f27      	subs	r7, r4, #4
    d294:	603d      	str	r5, [r7, #0]
    d296:	9306      	str	r3, [sp, #24]
    d298:	1c3c      	adds	r4, r7, #0
    d29a:	e7d8      	b.n	d24e <__hexnan+0x38>
    d29c:	9b04      	ldr	r3, [sp, #16]
    d29e:	2b29      	cmp	r3, #41	; 0x29
    d2a0:	d14c      	bne.n	d33c <__hexnan+0x126>
    d2a2:	9b03      	ldr	r3, [sp, #12]
    d2a4:	9a07      	ldr	r2, [sp, #28]
    d2a6:	3301      	adds	r3, #1
    d2a8:	6013      	str	r3, [r2, #0]
    d2aa:	e013      	b.n	d2d4 <__hexnan+0xbe>
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	3501      	adds	r5, #1
    d2b0:	3301      	adds	r3, #1
    d2b2:	9301      	str	r3, [sp, #4]
    d2b4:	2d08      	cmp	r5, #8
    d2b6:	dd06      	ble.n	d2c6 <__hexnan+0xb0>
    d2b8:	9b00      	ldr	r3, [sp, #0]
    d2ba:	429c      	cmp	r4, r3
    d2bc:	d9c7      	bls.n	d24e <__hexnan+0x38>
    d2be:	2300      	movs	r3, #0
    d2c0:	2501      	movs	r5, #1
    d2c2:	3c04      	subs	r4, #4
    d2c4:	6023      	str	r3, [r4, #0]
    d2c6:	6823      	ldr	r3, [r4, #0]
    d2c8:	011a      	lsls	r2, r3, #4
    d2ca:	230f      	movs	r3, #15
    d2cc:	4018      	ands	r0, r3
    d2ce:	4310      	orrs	r0, r2
    d2d0:	6020      	str	r0, [r4, #0]
    d2d2:	e7bc      	b.n	d24e <__hexnan+0x38>
    d2d4:	9b01      	ldr	r3, [sp, #4]
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d030      	beq.n	d33c <__hexnan+0x126>
    d2da:	42bc      	cmp	r4, r7
    d2dc:	d206      	bcs.n	d2ec <__hexnan+0xd6>
    d2de:	2d07      	cmp	r5, #7
    d2e0:	dc04      	bgt.n	d2ec <__hexnan+0xd6>
    d2e2:	1c20      	adds	r0, r4, #0
    d2e4:	1c39      	adds	r1, r7, #0
    d2e6:	1c2a      	adds	r2, r5, #0
    d2e8:	f7ff ff83 	bl	d1f2 <L_shift>
    d2ec:	9b00      	ldr	r3, [sp, #0]
    d2ee:	429c      	cmp	r4, r3
    d2f0:	d90a      	bls.n	d308 <__hexnan+0xf2>
    d2f2:	3304      	adds	r3, #4
    d2f4:	cc02      	ldmia	r4!, {r1}
    d2f6:	1f1a      	subs	r2, r3, #4
    d2f8:	6011      	str	r1, [r2, #0]
    d2fa:	42a6      	cmp	r6, r4
    d2fc:	d2f9      	bcs.n	d2f2 <__hexnan+0xdc>
    d2fe:	2200      	movs	r2, #0
    d300:	c304      	stmia	r3!, {r2}
    d302:	429e      	cmp	r6, r3
    d304:	d2fb      	bcs.n	d2fe <__hexnan+0xe8>
    d306:	e00e      	b.n	d326 <__hexnan+0x110>
    d308:	9b05      	ldr	r3, [sp, #20]
    d30a:	2b00      	cmp	r3, #0
    d30c:	d00b      	beq.n	d326 <__hexnan+0x110>
    d30e:	2220      	movs	r2, #32
    d310:	9905      	ldr	r1, [sp, #20]
    d312:	9b02      	ldr	r3, [sp, #8]
    d314:	1a52      	subs	r2, r2, r1
    d316:	2101      	movs	r1, #1
    d318:	4249      	negs	r1, r1
    d31a:	40d1      	lsrs	r1, r2
    d31c:	1c0a      	adds	r2, r1, #0
    d31e:	3b04      	subs	r3, #4
    d320:	6819      	ldr	r1, [r3, #0]
    d322:	400a      	ands	r2, r1
    d324:	601a      	str	r2, [r3, #0]
    d326:	6833      	ldr	r3, [r6, #0]
    d328:	2b00      	cmp	r3, #0
    d32a:	d109      	bne.n	d340 <__hexnan+0x12a>
    d32c:	9b00      	ldr	r3, [sp, #0]
    d32e:	429e      	cmp	r6, r3
    d330:	d102      	bne.n	d338 <__hexnan+0x122>
    d332:	2301      	movs	r3, #1
    d334:	6033      	str	r3, [r6, #0]
    d336:	e003      	b.n	d340 <__hexnan+0x12a>
    d338:	3e04      	subs	r6, #4
    d33a:	e7f4      	b.n	d326 <__hexnan+0x110>
    d33c:	2004      	movs	r0, #4
    d33e:	e000      	b.n	d342 <__hexnan+0x12c>
    d340:	2005      	movs	r0, #5
    d342:	b009      	add	sp, #36	; 0x24
    d344:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000d348 <_isatty_r>:
    d348:	b538      	push	{r3, r4, r5, lr}
    d34a:	2300      	movs	r3, #0
    d34c:	4c06      	ldr	r4, [pc, #24]	; (d368 <_isatty_r+0x20>)
    d34e:	1c05      	adds	r5, r0, #0
    d350:	1c08      	adds	r0, r1, #0
    d352:	6023      	str	r3, [r4, #0]
    d354:	f7f6 fdfc 	bl	3f50 <_isatty>
    d358:	1c43      	adds	r3, r0, #1
    d35a:	d103      	bne.n	d364 <_isatty_r+0x1c>
    d35c:	6823      	ldr	r3, [r4, #0]
    d35e:	2b00      	cmp	r3, #0
    d360:	d000      	beq.n	d364 <_isatty_r+0x1c>
    d362:	602b      	str	r3, [r5, #0]
    d364:	bd38      	pop	{r3, r4, r5, pc}
    d366:	46c0      	nop			; (mov r8, r8)
    d368:	2000445c 	.word	0x2000445c

0000d36c <_localeconv_r>:
    d36c:	4800      	ldr	r0, [pc, #0]	; (d370 <_localeconv_r+0x4>)
    d36e:	4770      	bx	lr
    d370:	2000013c 	.word	0x2000013c

0000d374 <_lseek_r>:
    d374:	b538      	push	{r3, r4, r5, lr}
    d376:	1c05      	adds	r5, r0, #0
    d378:	2000      	movs	r0, #0
    d37a:	4c07      	ldr	r4, [pc, #28]	; (d398 <_lseek_r+0x24>)
    d37c:	6020      	str	r0, [r4, #0]
    d37e:	1c08      	adds	r0, r1, #0
    d380:	1c11      	adds	r1, r2, #0
    d382:	1c1a      	adds	r2, r3, #0
    d384:	f7f6 fdf8 	bl	3f78 <_lseek>
    d388:	1c43      	adds	r3, r0, #1
    d38a:	d103      	bne.n	d394 <_lseek_r+0x20>
    d38c:	6823      	ldr	r3, [r4, #0]
    d38e:	2b00      	cmp	r3, #0
    d390:	d000      	beq.n	d394 <_lseek_r+0x20>
    d392:	602b      	str	r3, [r5, #0]
    d394:	bd38      	pop	{r3, r4, r5, pc}
    d396:	46c0      	nop			; (mov r8, r8)
    d398:	2000445c 	.word	0x2000445c

0000d39c <memmove>:
    d39c:	b510      	push	{r4, lr}
    d39e:	4281      	cmp	r1, r0
    d3a0:	d208      	bcs.n	d3b4 <memmove+0x18>
    d3a2:	188b      	adds	r3, r1, r2
    d3a4:	4298      	cmp	r0, r3
    d3a6:	d205      	bcs.n	d3b4 <memmove+0x18>
    d3a8:	1a9b      	subs	r3, r3, r2
    d3aa:	3a01      	subs	r2, #1
    d3ac:	d309      	bcc.n	d3c2 <memmove+0x26>
    d3ae:	5c99      	ldrb	r1, [r3, r2]
    d3b0:	5481      	strb	r1, [r0, r2]
    d3b2:	e7fa      	b.n	d3aa <memmove+0xe>
    d3b4:	2300      	movs	r3, #0
    d3b6:	4293      	cmp	r3, r2
    d3b8:	d003      	beq.n	d3c2 <memmove+0x26>
    d3ba:	5ccc      	ldrb	r4, [r1, r3]
    d3bc:	54c4      	strb	r4, [r0, r3]
    d3be:	3301      	adds	r3, #1
    d3c0:	e7f9      	b.n	d3b6 <memmove+0x1a>
    d3c2:	bd10      	pop	{r4, pc}

0000d3c4 <_Balloc>:
    d3c4:	b570      	push	{r4, r5, r6, lr}
    d3c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
    d3c8:	1c04      	adds	r4, r0, #0
    d3ca:	1c0d      	adds	r5, r1, #0
    d3cc:	2e00      	cmp	r6, #0
    d3ce:	d107      	bne.n	d3e0 <_Balloc+0x1c>
    d3d0:	2010      	movs	r0, #16
    d3d2:	f7fc f861 	bl	9498 <malloc>
    d3d6:	6260      	str	r0, [r4, #36]	; 0x24
    d3d8:	6046      	str	r6, [r0, #4]
    d3da:	6086      	str	r6, [r0, #8]
    d3dc:	6006      	str	r6, [r0, #0]
    d3de:	60c6      	str	r6, [r0, #12]
    d3e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d3e2:	68f3      	ldr	r3, [r6, #12]
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	d009      	beq.n	d3fc <_Balloc+0x38>
    d3e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    d3ea:	00ab      	lsls	r3, r5, #2
    d3ec:	68d2      	ldr	r2, [r2, #12]
    d3ee:	18d3      	adds	r3, r2, r3
    d3f0:	6818      	ldr	r0, [r3, #0]
    d3f2:	2800      	cmp	r0, #0
    d3f4:	d00e      	beq.n	d414 <_Balloc+0x50>
    d3f6:	6802      	ldr	r2, [r0, #0]
    d3f8:	601a      	str	r2, [r3, #0]
    d3fa:	e017      	b.n	d42c <_Balloc+0x68>
    d3fc:	1c20      	adds	r0, r4, #0
    d3fe:	2104      	movs	r1, #4
    d400:	2221      	movs	r2, #33	; 0x21
    d402:	f000 fbe2 	bl	dbca <_calloc_r>
    d406:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d408:	60f0      	str	r0, [r6, #12]
    d40a:	68db      	ldr	r3, [r3, #12]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d1eb      	bne.n	d3e8 <_Balloc+0x24>
    d410:	2000      	movs	r0, #0
    d412:	e00e      	b.n	d432 <_Balloc+0x6e>
    d414:	2101      	movs	r1, #1
    d416:	1c0e      	adds	r6, r1, #0
    d418:	40ae      	lsls	r6, r5
    d41a:	1d72      	adds	r2, r6, #5
    d41c:	0092      	lsls	r2, r2, #2
    d41e:	1c20      	adds	r0, r4, #0
    d420:	f000 fbd3 	bl	dbca <_calloc_r>
    d424:	2800      	cmp	r0, #0
    d426:	d0f3      	beq.n	d410 <_Balloc+0x4c>
    d428:	6045      	str	r5, [r0, #4]
    d42a:	6086      	str	r6, [r0, #8]
    d42c:	2300      	movs	r3, #0
    d42e:	6103      	str	r3, [r0, #16]
    d430:	60c3      	str	r3, [r0, #12]
    d432:	bd70      	pop	{r4, r5, r6, pc}

0000d434 <_Bfree>:
    d434:	b570      	push	{r4, r5, r6, lr}
    d436:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d438:	1c06      	adds	r6, r0, #0
    d43a:	1c0c      	adds	r4, r1, #0
    d43c:	2d00      	cmp	r5, #0
    d43e:	d107      	bne.n	d450 <_Bfree+0x1c>
    d440:	2010      	movs	r0, #16
    d442:	f7fc f829 	bl	9498 <malloc>
    d446:	6270      	str	r0, [r6, #36]	; 0x24
    d448:	6045      	str	r5, [r0, #4]
    d44a:	6085      	str	r5, [r0, #8]
    d44c:	6005      	str	r5, [r0, #0]
    d44e:	60c5      	str	r5, [r0, #12]
    d450:	2c00      	cmp	r4, #0
    d452:	d007      	beq.n	d464 <_Bfree+0x30>
    d454:	6a72      	ldr	r2, [r6, #36]	; 0x24
    d456:	6863      	ldr	r3, [r4, #4]
    d458:	68d2      	ldr	r2, [r2, #12]
    d45a:	009b      	lsls	r3, r3, #2
    d45c:	18d3      	adds	r3, r2, r3
    d45e:	681a      	ldr	r2, [r3, #0]
    d460:	6022      	str	r2, [r4, #0]
    d462:	601c      	str	r4, [r3, #0]
    d464:	bd70      	pop	{r4, r5, r6, pc}

0000d466 <__multadd>:
    d466:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d468:	1c1e      	adds	r6, r3, #0
    d46a:	2314      	movs	r3, #20
    d46c:	469c      	mov	ip, r3
    d46e:	1c07      	adds	r7, r0, #0
    d470:	1c0c      	adds	r4, r1, #0
    d472:	2000      	movs	r0, #0
    d474:	690d      	ldr	r5, [r1, #16]
    d476:	448c      	add	ip, r1
    d478:	4663      	mov	r3, ip
    d47a:	8819      	ldrh	r1, [r3, #0]
    d47c:	681b      	ldr	r3, [r3, #0]
    d47e:	4351      	muls	r1, r2
    d480:	0c1b      	lsrs	r3, r3, #16
    d482:	4353      	muls	r3, r2
    d484:	1989      	adds	r1, r1, r6
    d486:	0c0e      	lsrs	r6, r1, #16
    d488:	18f3      	adds	r3, r6, r3
    d48a:	b289      	uxth	r1, r1
    d48c:	0c1e      	lsrs	r6, r3, #16
    d48e:	041b      	lsls	r3, r3, #16
    d490:	185b      	adds	r3, r3, r1
    d492:	4661      	mov	r1, ip
    d494:	3001      	adds	r0, #1
    d496:	c108      	stmia	r1!, {r3}
    d498:	468c      	mov	ip, r1
    d49a:	42a8      	cmp	r0, r5
    d49c:	dbec      	blt.n	d478 <__multadd+0x12>
    d49e:	2e00      	cmp	r6, #0
    d4a0:	d01b      	beq.n	d4da <__multadd+0x74>
    d4a2:	68a3      	ldr	r3, [r4, #8]
    d4a4:	429d      	cmp	r5, r3
    d4a6:	db12      	blt.n	d4ce <__multadd+0x68>
    d4a8:	6863      	ldr	r3, [r4, #4]
    d4aa:	1c38      	adds	r0, r7, #0
    d4ac:	1c59      	adds	r1, r3, #1
    d4ae:	f7ff ff89 	bl	d3c4 <_Balloc>
    d4b2:	1c21      	adds	r1, r4, #0
    d4b4:	6923      	ldr	r3, [r4, #16]
    d4b6:	9001      	str	r0, [sp, #4]
    d4b8:	1c9a      	adds	r2, r3, #2
    d4ba:	310c      	adds	r1, #12
    d4bc:	0092      	lsls	r2, r2, #2
    d4be:	300c      	adds	r0, #12
    d4c0:	f7fc f809 	bl	94d6 <memcpy>
    d4c4:	1c21      	adds	r1, r4, #0
    d4c6:	1c38      	adds	r0, r7, #0
    d4c8:	f7ff ffb4 	bl	d434 <_Bfree>
    d4cc:	9c01      	ldr	r4, [sp, #4]
    d4ce:	1d2b      	adds	r3, r5, #4
    d4d0:	009b      	lsls	r3, r3, #2
    d4d2:	18e3      	adds	r3, r4, r3
    d4d4:	3501      	adds	r5, #1
    d4d6:	605e      	str	r6, [r3, #4]
    d4d8:	6125      	str	r5, [r4, #16]
    d4da:	1c20      	adds	r0, r4, #0
    d4dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d4de <__s2b>:
    d4de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d4e0:	1c06      	adds	r6, r0, #0
    d4e2:	1c18      	adds	r0, r3, #0
    d4e4:	1c0c      	adds	r4, r1, #0
    d4e6:	3008      	adds	r0, #8
    d4e8:	2109      	movs	r1, #9
    d4ea:	9301      	str	r3, [sp, #4]
    d4ec:	1c15      	adds	r5, r2, #0
    d4ee:	f7f9 fb71 	bl	6bd4 <__aeabi_idiv>
    d4f2:	2301      	movs	r3, #1
    d4f4:	2100      	movs	r1, #0
    d4f6:	4298      	cmp	r0, r3
    d4f8:	dd02      	ble.n	d500 <__s2b+0x22>
    d4fa:	005b      	lsls	r3, r3, #1
    d4fc:	3101      	adds	r1, #1
    d4fe:	e7fa      	b.n	d4f6 <__s2b+0x18>
    d500:	1c30      	adds	r0, r6, #0
    d502:	f7ff ff5f 	bl	d3c4 <_Balloc>
    d506:	9b08      	ldr	r3, [sp, #32]
    d508:	1c01      	adds	r1, r0, #0
    d50a:	6143      	str	r3, [r0, #20]
    d50c:	2301      	movs	r3, #1
    d50e:	6103      	str	r3, [r0, #16]
    d510:	2d09      	cmp	r5, #9
    d512:	dd12      	ble.n	d53a <__s2b+0x5c>
    d514:	1c23      	adds	r3, r4, #0
    d516:	3309      	adds	r3, #9
    d518:	1c1f      	adds	r7, r3, #0
    d51a:	9300      	str	r3, [sp, #0]
    d51c:	1964      	adds	r4, r4, r5
    d51e:	783b      	ldrb	r3, [r7, #0]
    d520:	1c30      	adds	r0, r6, #0
    d522:	3b30      	subs	r3, #48	; 0x30
    d524:	220a      	movs	r2, #10
    d526:	f7ff ff9e 	bl	d466 <__multadd>
    d52a:	3701      	adds	r7, #1
    d52c:	1c01      	adds	r1, r0, #0
    d52e:	42a7      	cmp	r7, r4
    d530:	d1f5      	bne.n	d51e <__s2b+0x40>
    d532:	9b00      	ldr	r3, [sp, #0]
    d534:	195c      	adds	r4, r3, r5
    d536:	3c08      	subs	r4, #8
    d538:	e001      	b.n	d53e <__s2b+0x60>
    d53a:	2509      	movs	r5, #9
    d53c:	340a      	adds	r4, #10
    d53e:	1c2f      	adds	r7, r5, #0
    d540:	9b01      	ldr	r3, [sp, #4]
    d542:	429f      	cmp	r7, r3
    d544:	da09      	bge.n	d55a <__s2b+0x7c>
    d546:	1b63      	subs	r3, r4, r5
    d548:	5ddb      	ldrb	r3, [r3, r7]
    d54a:	1c30      	adds	r0, r6, #0
    d54c:	3b30      	subs	r3, #48	; 0x30
    d54e:	220a      	movs	r2, #10
    d550:	f7ff ff89 	bl	d466 <__multadd>
    d554:	3701      	adds	r7, #1
    d556:	1c01      	adds	r1, r0, #0
    d558:	e7f2      	b.n	d540 <__s2b+0x62>
    d55a:	1c08      	adds	r0, r1, #0
    d55c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d55e <__hi0bits>:
    d55e:	2200      	movs	r2, #0
    d560:	1c03      	adds	r3, r0, #0
    d562:	0c01      	lsrs	r1, r0, #16
    d564:	4291      	cmp	r1, r2
    d566:	d101      	bne.n	d56c <__hi0bits+0xe>
    d568:	0403      	lsls	r3, r0, #16
    d56a:	3210      	adds	r2, #16
    d56c:	0e19      	lsrs	r1, r3, #24
    d56e:	d101      	bne.n	d574 <__hi0bits+0x16>
    d570:	3208      	adds	r2, #8
    d572:	021b      	lsls	r3, r3, #8
    d574:	0f19      	lsrs	r1, r3, #28
    d576:	d101      	bne.n	d57c <__hi0bits+0x1e>
    d578:	3204      	adds	r2, #4
    d57a:	011b      	lsls	r3, r3, #4
    d57c:	0f99      	lsrs	r1, r3, #30
    d57e:	d101      	bne.n	d584 <__hi0bits+0x26>
    d580:	3202      	adds	r2, #2
    d582:	009b      	lsls	r3, r3, #2
    d584:	1c10      	adds	r0, r2, #0
    d586:	2b00      	cmp	r3, #0
    d588:	db03      	blt.n	d592 <__hi0bits+0x34>
    d58a:	2020      	movs	r0, #32
    d58c:	005b      	lsls	r3, r3, #1
    d58e:	d500      	bpl.n	d592 <__hi0bits+0x34>
    d590:	1c50      	adds	r0, r2, #1
    d592:	4770      	bx	lr

0000d594 <__lo0bits>:
    d594:	2207      	movs	r2, #7
    d596:	6803      	ldr	r3, [r0, #0]
    d598:	b510      	push	{r4, lr}
    d59a:	1c01      	adds	r1, r0, #0
    d59c:	401a      	ands	r2, r3
    d59e:	d00c      	beq.n	d5ba <__lo0bits+0x26>
    d5a0:	2401      	movs	r4, #1
    d5a2:	2000      	movs	r0, #0
    d5a4:	4223      	tst	r3, r4
    d5a6:	d123      	bne.n	d5f0 <__lo0bits+0x5c>
    d5a8:	2202      	movs	r2, #2
    d5aa:	4213      	tst	r3, r2
    d5ac:	d003      	beq.n	d5b6 <__lo0bits+0x22>
    d5ae:	40e3      	lsrs	r3, r4
    d5b0:	1c20      	adds	r0, r4, #0
    d5b2:	600b      	str	r3, [r1, #0]
    d5b4:	e01c      	b.n	d5f0 <__lo0bits+0x5c>
    d5b6:	089b      	lsrs	r3, r3, #2
    d5b8:	e018      	b.n	d5ec <__lo0bits+0x58>
    d5ba:	b298      	uxth	r0, r3
    d5bc:	2800      	cmp	r0, #0
    d5be:	d101      	bne.n	d5c4 <__lo0bits+0x30>
    d5c0:	2210      	movs	r2, #16
    d5c2:	0c1b      	lsrs	r3, r3, #16
    d5c4:	b2d8      	uxtb	r0, r3
    d5c6:	2800      	cmp	r0, #0
    d5c8:	d101      	bne.n	d5ce <__lo0bits+0x3a>
    d5ca:	3208      	adds	r2, #8
    d5cc:	0a1b      	lsrs	r3, r3, #8
    d5ce:	0718      	lsls	r0, r3, #28
    d5d0:	d101      	bne.n	d5d6 <__lo0bits+0x42>
    d5d2:	3204      	adds	r2, #4
    d5d4:	091b      	lsrs	r3, r3, #4
    d5d6:	0798      	lsls	r0, r3, #30
    d5d8:	d101      	bne.n	d5de <__lo0bits+0x4a>
    d5da:	3202      	adds	r2, #2
    d5dc:	089b      	lsrs	r3, r3, #2
    d5de:	07d8      	lsls	r0, r3, #31
    d5e0:	d404      	bmi.n	d5ec <__lo0bits+0x58>
    d5e2:	085b      	lsrs	r3, r3, #1
    d5e4:	2020      	movs	r0, #32
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d002      	beq.n	d5f0 <__lo0bits+0x5c>
    d5ea:	3201      	adds	r2, #1
    d5ec:	1c10      	adds	r0, r2, #0
    d5ee:	600b      	str	r3, [r1, #0]
    d5f0:	bd10      	pop	{r4, pc}

0000d5f2 <__i2b>:
    d5f2:	b510      	push	{r4, lr}
    d5f4:	1c0c      	adds	r4, r1, #0
    d5f6:	2101      	movs	r1, #1
    d5f8:	f7ff fee4 	bl	d3c4 <_Balloc>
    d5fc:	2301      	movs	r3, #1
    d5fe:	6144      	str	r4, [r0, #20]
    d600:	6103      	str	r3, [r0, #16]
    d602:	bd10      	pop	{r4, pc}

0000d604 <__multiply>:
    d604:	b5f0      	push	{r4, r5, r6, r7, lr}
    d606:	690b      	ldr	r3, [r1, #16]
    d608:	1c14      	adds	r4, r2, #0
    d60a:	6912      	ldr	r2, [r2, #16]
    d60c:	b089      	sub	sp, #36	; 0x24
    d60e:	1c0d      	adds	r5, r1, #0
    d610:	4293      	cmp	r3, r2
    d612:	da01      	bge.n	d618 <__multiply+0x14>
    d614:	1c25      	adds	r5, r4, #0
    d616:	1c0c      	adds	r4, r1, #0
    d618:	692f      	ldr	r7, [r5, #16]
    d61a:	6926      	ldr	r6, [r4, #16]
    d61c:	68aa      	ldr	r2, [r5, #8]
    d61e:	19bb      	adds	r3, r7, r6
    d620:	6869      	ldr	r1, [r5, #4]
    d622:	9300      	str	r3, [sp, #0]
    d624:	4293      	cmp	r3, r2
    d626:	dd00      	ble.n	d62a <__multiply+0x26>
    d628:	3101      	adds	r1, #1
    d62a:	f7ff fecb 	bl	d3c4 <_Balloc>
    d62e:	1c01      	adds	r1, r0, #0
    d630:	9b00      	ldr	r3, [sp, #0]
    d632:	3114      	adds	r1, #20
    d634:	4684      	mov	ip, r0
    d636:	0098      	lsls	r0, r3, #2
    d638:	1c0b      	adds	r3, r1, #0
    d63a:	1808      	adds	r0, r1, r0
    d63c:	4283      	cmp	r3, r0
    d63e:	d202      	bcs.n	d646 <__multiply+0x42>
    d640:	2200      	movs	r2, #0
    d642:	c304      	stmia	r3!, {r2}
    d644:	e7fa      	b.n	d63c <__multiply+0x38>
    d646:	3514      	adds	r5, #20
    d648:	00bf      	lsls	r7, r7, #2
    d64a:	19eb      	adds	r3, r5, r7
    d64c:	3414      	adds	r4, #20
    d64e:	00b6      	lsls	r6, r6, #2
    d650:	9304      	str	r3, [sp, #16]
    d652:	19a3      	adds	r3, r4, r6
    d654:	9502      	str	r5, [sp, #8]
    d656:	9306      	str	r3, [sp, #24]
    d658:	9b06      	ldr	r3, [sp, #24]
    d65a:	429c      	cmp	r4, r3
    d65c:	d256      	bcs.n	d70c <__multiply+0x108>
    d65e:	8823      	ldrh	r3, [r4, #0]
    d660:	9303      	str	r3, [sp, #12]
    d662:	2b00      	cmp	r3, #0
    d664:	d022      	beq.n	d6ac <__multiply+0xa8>
    d666:	1c0e      	adds	r6, r1, #0
    d668:	2700      	movs	r7, #0
    d66a:	9b02      	ldr	r3, [sp, #8]
    d66c:	9301      	str	r3, [sp, #4]
    d66e:	9b01      	ldr	r3, [sp, #4]
    d670:	9d03      	ldr	r5, [sp, #12]
    d672:	cb04      	ldmia	r3!, {r2}
    d674:	9605      	str	r6, [sp, #20]
    d676:	9301      	str	r3, [sp, #4]
    d678:	8833      	ldrh	r3, [r6, #0]
    d67a:	9307      	str	r3, [sp, #28]
    d67c:	b293      	uxth	r3, r2
    d67e:	436b      	muls	r3, r5
    d680:	9d07      	ldr	r5, [sp, #28]
    d682:	0c12      	lsrs	r2, r2, #16
    d684:	18eb      	adds	r3, r5, r3
    d686:	6835      	ldr	r5, [r6, #0]
    d688:	19db      	adds	r3, r3, r7
    d68a:	0c2f      	lsrs	r7, r5, #16
    d68c:	9d03      	ldr	r5, [sp, #12]
    d68e:	436a      	muls	r2, r5
    d690:	18ba      	adds	r2, r7, r2
    d692:	0c1f      	lsrs	r7, r3, #16
    d694:	19d2      	adds	r2, r2, r7
    d696:	0c17      	lsrs	r7, r2, #16
    d698:	b29b      	uxth	r3, r3
    d69a:	0412      	lsls	r2, r2, #16
    d69c:	4313      	orrs	r3, r2
    d69e:	c608      	stmia	r6!, {r3}
    d6a0:	9a01      	ldr	r2, [sp, #4]
    d6a2:	9b04      	ldr	r3, [sp, #16]
    d6a4:	429a      	cmp	r2, r3
    d6a6:	d3e2      	bcc.n	d66e <__multiply+0x6a>
    d6a8:	9b05      	ldr	r3, [sp, #20]
    d6aa:	605f      	str	r7, [r3, #4]
    d6ac:	6823      	ldr	r3, [r4, #0]
    d6ae:	0c1b      	lsrs	r3, r3, #16
    d6b0:	9301      	str	r3, [sp, #4]
    d6b2:	d021      	beq.n	d6f8 <__multiply+0xf4>
    d6b4:	2200      	movs	r2, #0
    d6b6:	1c0d      	adds	r5, r1, #0
    d6b8:	680b      	ldr	r3, [r1, #0]
    d6ba:	9f02      	ldr	r7, [sp, #8]
    d6bc:	9203      	str	r2, [sp, #12]
    d6be:	883e      	ldrh	r6, [r7, #0]
    d6c0:	9a01      	ldr	r2, [sp, #4]
    d6c2:	b29b      	uxth	r3, r3
    d6c4:	4356      	muls	r6, r2
    d6c6:	682a      	ldr	r2, [r5, #0]
    d6c8:	9505      	str	r5, [sp, #20]
    d6ca:	0c12      	lsrs	r2, r2, #16
    d6cc:	18b2      	adds	r2, r6, r2
    d6ce:	9e03      	ldr	r6, [sp, #12]
    d6d0:	1992      	adds	r2, r2, r6
    d6d2:	0416      	lsls	r6, r2, #16
    d6d4:	4333      	orrs	r3, r6
    d6d6:	602b      	str	r3, [r5, #0]
    d6d8:	cf08      	ldmia	r7!, {r3}
    d6da:	9e01      	ldr	r6, [sp, #4]
    d6dc:	0c1b      	lsrs	r3, r3, #16
    d6de:	4373      	muls	r3, r6
    d6e0:	88ae      	ldrh	r6, [r5, #4]
    d6e2:	0c12      	lsrs	r2, r2, #16
    d6e4:	199b      	adds	r3, r3, r6
    d6e6:	189b      	adds	r3, r3, r2
    d6e8:	0c1a      	lsrs	r2, r3, #16
    d6ea:	9203      	str	r2, [sp, #12]
    d6ec:	9a04      	ldr	r2, [sp, #16]
    d6ee:	3504      	adds	r5, #4
    d6f0:	42ba      	cmp	r2, r7
    d6f2:	d8e4      	bhi.n	d6be <__multiply+0xba>
    d6f4:	9a05      	ldr	r2, [sp, #20]
    d6f6:	6053      	str	r3, [r2, #4]
    d6f8:	3404      	adds	r4, #4
    d6fa:	3104      	adds	r1, #4
    d6fc:	e7ac      	b.n	d658 <__multiply+0x54>
    d6fe:	3804      	subs	r0, #4
    d700:	6803      	ldr	r3, [r0, #0]
    d702:	2b00      	cmp	r3, #0
    d704:	d105      	bne.n	d712 <__multiply+0x10e>
    d706:	9b00      	ldr	r3, [sp, #0]
    d708:	3b01      	subs	r3, #1
    d70a:	9300      	str	r3, [sp, #0]
    d70c:	9b00      	ldr	r3, [sp, #0]
    d70e:	2b00      	cmp	r3, #0
    d710:	dcf5      	bgt.n	d6fe <__multiply+0xfa>
    d712:	4663      	mov	r3, ip
    d714:	4660      	mov	r0, ip
    d716:	9a00      	ldr	r2, [sp, #0]
    d718:	611a      	str	r2, [r3, #16]
    d71a:	b009      	add	sp, #36	; 0x24
    d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000d720 <__pow5mult>:
    d720:	2303      	movs	r3, #3
    d722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d724:	4013      	ands	r3, r2
    d726:	1c05      	adds	r5, r0, #0
    d728:	1c0e      	adds	r6, r1, #0
    d72a:	1c14      	adds	r4, r2, #0
    d72c:	2b00      	cmp	r3, #0
    d72e:	d007      	beq.n	d740 <__pow5mult+0x20>
    d730:	4a22      	ldr	r2, [pc, #136]	; (d7bc <__pow5mult+0x9c>)
    d732:	3b01      	subs	r3, #1
    d734:	009b      	lsls	r3, r3, #2
    d736:	589a      	ldr	r2, [r3, r2]
    d738:	2300      	movs	r3, #0
    d73a:	f7ff fe94 	bl	d466 <__multadd>
    d73e:	1c06      	adds	r6, r0, #0
    d740:	10a3      	asrs	r3, r4, #2
    d742:	9301      	str	r3, [sp, #4]
    d744:	d037      	beq.n	d7b6 <__pow5mult+0x96>
    d746:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    d748:	2c00      	cmp	r4, #0
    d74a:	d107      	bne.n	d75c <__pow5mult+0x3c>
    d74c:	2010      	movs	r0, #16
    d74e:	f7fb fea3 	bl	9498 <malloc>
    d752:	6268      	str	r0, [r5, #36]	; 0x24
    d754:	6044      	str	r4, [r0, #4]
    d756:	6084      	str	r4, [r0, #8]
    d758:	6004      	str	r4, [r0, #0]
    d75a:	60c4      	str	r4, [r0, #12]
    d75c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    d75e:	68bc      	ldr	r4, [r7, #8]
    d760:	2c00      	cmp	r4, #0
    d762:	d110      	bne.n	d786 <__pow5mult+0x66>
    d764:	1c28      	adds	r0, r5, #0
    d766:	4916      	ldr	r1, [pc, #88]	; (d7c0 <__pow5mult+0xa0>)
    d768:	f7ff ff43 	bl	d5f2 <__i2b>
    d76c:	2300      	movs	r3, #0
    d76e:	60b8      	str	r0, [r7, #8]
    d770:	1c04      	adds	r4, r0, #0
    d772:	6003      	str	r3, [r0, #0]
    d774:	e007      	b.n	d786 <__pow5mult+0x66>
    d776:	9b01      	ldr	r3, [sp, #4]
    d778:	105b      	asrs	r3, r3, #1
    d77a:	9301      	str	r3, [sp, #4]
    d77c:	d01b      	beq.n	d7b6 <__pow5mult+0x96>
    d77e:	6820      	ldr	r0, [r4, #0]
    d780:	2800      	cmp	r0, #0
    d782:	d00f      	beq.n	d7a4 <__pow5mult+0x84>
    d784:	1c04      	adds	r4, r0, #0
    d786:	9b01      	ldr	r3, [sp, #4]
    d788:	07db      	lsls	r3, r3, #31
    d78a:	d5f4      	bpl.n	d776 <__pow5mult+0x56>
    d78c:	1c31      	adds	r1, r6, #0
    d78e:	1c22      	adds	r2, r4, #0
    d790:	1c28      	adds	r0, r5, #0
    d792:	f7ff ff37 	bl	d604 <__multiply>
    d796:	1c07      	adds	r7, r0, #0
    d798:	1c31      	adds	r1, r6, #0
    d79a:	1c28      	adds	r0, r5, #0
    d79c:	f7ff fe4a 	bl	d434 <_Bfree>
    d7a0:	1c3e      	adds	r6, r7, #0
    d7a2:	e7e8      	b.n	d776 <__pow5mult+0x56>
    d7a4:	1c28      	adds	r0, r5, #0
    d7a6:	1c21      	adds	r1, r4, #0
    d7a8:	1c22      	adds	r2, r4, #0
    d7aa:	f7ff ff2b 	bl	d604 <__multiply>
    d7ae:	2300      	movs	r3, #0
    d7b0:	6020      	str	r0, [r4, #0]
    d7b2:	6003      	str	r3, [r0, #0]
    d7b4:	e7e6      	b.n	d784 <__pow5mult+0x64>
    d7b6:	1c30      	adds	r0, r6, #0
    d7b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d7ba:	46c0      	nop			; (mov r8, r8)
    d7bc:	0000f5e8 	.word	0x0000f5e8
    d7c0:	00000271 	.word	0x00000271

0000d7c4 <__lshift>:
    d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7c6:	1c0c      	adds	r4, r1, #0
    d7c8:	1c17      	adds	r7, r2, #0
    d7ca:	6923      	ldr	r3, [r4, #16]
    d7cc:	1155      	asrs	r5, r2, #5
    d7ce:	b085      	sub	sp, #20
    d7d0:	18eb      	adds	r3, r5, r3
    d7d2:	9301      	str	r3, [sp, #4]
    d7d4:	3301      	adds	r3, #1
    d7d6:	9300      	str	r3, [sp, #0]
    d7d8:	6849      	ldr	r1, [r1, #4]
    d7da:	68a3      	ldr	r3, [r4, #8]
    d7dc:	9002      	str	r0, [sp, #8]
    d7de:	9a00      	ldr	r2, [sp, #0]
    d7e0:	429a      	cmp	r2, r3
    d7e2:	dd02      	ble.n	d7ea <__lshift+0x26>
    d7e4:	3101      	adds	r1, #1
    d7e6:	005b      	lsls	r3, r3, #1
    d7e8:	e7f9      	b.n	d7de <__lshift+0x1a>
    d7ea:	9802      	ldr	r0, [sp, #8]
    d7ec:	f7ff fdea 	bl	d3c4 <_Balloc>
    d7f0:	1c02      	adds	r2, r0, #0
    d7f2:	1c06      	adds	r6, r0, #0
    d7f4:	2300      	movs	r3, #0
    d7f6:	3214      	adds	r2, #20
    d7f8:	42ab      	cmp	r3, r5
    d7fa:	da04      	bge.n	d806 <__lshift+0x42>
    d7fc:	2000      	movs	r0, #0
    d7fe:	0099      	lsls	r1, r3, #2
    d800:	5050      	str	r0, [r2, r1]
    d802:	3301      	adds	r3, #1
    d804:	e7f8      	b.n	d7f8 <__lshift+0x34>
    d806:	43eb      	mvns	r3, r5
    d808:	17db      	asrs	r3, r3, #31
    d80a:	401d      	ands	r5, r3
    d80c:	1c23      	adds	r3, r4, #0
    d80e:	00ad      	lsls	r5, r5, #2
    d810:	1955      	adds	r5, r2, r5
    d812:	6922      	ldr	r2, [r4, #16]
    d814:	3314      	adds	r3, #20
    d816:	0092      	lsls	r2, r2, #2
    d818:	189a      	adds	r2, r3, r2
    d81a:	4694      	mov	ip, r2
    d81c:	221f      	movs	r2, #31
    d81e:	4017      	ands	r7, r2
    d820:	d014      	beq.n	d84c <__lshift+0x88>
    d822:	3201      	adds	r2, #1
    d824:	1bd2      	subs	r2, r2, r7
    d826:	9203      	str	r2, [sp, #12]
    d828:	2200      	movs	r2, #0
    d82a:	6819      	ldr	r1, [r3, #0]
    d82c:	1c28      	adds	r0, r5, #0
    d82e:	40b9      	lsls	r1, r7
    d830:	430a      	orrs	r2, r1
    d832:	c504      	stmia	r5!, {r2}
    d834:	cb04      	ldmia	r3!, {r2}
    d836:	9903      	ldr	r1, [sp, #12]
    d838:	40ca      	lsrs	r2, r1
    d83a:	459c      	cmp	ip, r3
    d83c:	d8f5      	bhi.n	d82a <__lshift+0x66>
    d83e:	6042      	str	r2, [r0, #4]
    d840:	2a00      	cmp	r2, #0
    d842:	d007      	beq.n	d854 <__lshift+0x90>
    d844:	9b01      	ldr	r3, [sp, #4]
    d846:	3302      	adds	r3, #2
    d848:	9300      	str	r3, [sp, #0]
    d84a:	e003      	b.n	d854 <__lshift+0x90>
    d84c:	cb04      	ldmia	r3!, {r2}
    d84e:	c504      	stmia	r5!, {r2}
    d850:	459c      	cmp	ip, r3
    d852:	d8fb      	bhi.n	d84c <__lshift+0x88>
    d854:	9b00      	ldr	r3, [sp, #0]
    d856:	9802      	ldr	r0, [sp, #8]
    d858:	3b01      	subs	r3, #1
    d85a:	6133      	str	r3, [r6, #16]
    d85c:	1c21      	adds	r1, r4, #0
    d85e:	f7ff fde9 	bl	d434 <_Bfree>
    d862:	1c30      	adds	r0, r6, #0
    d864:	b005      	add	sp, #20
    d866:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d868 <__mcmp>:
    d868:	6903      	ldr	r3, [r0, #16]
    d86a:	690a      	ldr	r2, [r1, #16]
    d86c:	b510      	push	{r4, lr}
    d86e:	1a9b      	subs	r3, r3, r2
    d870:	1c04      	adds	r4, r0, #0
    d872:	1e18      	subs	r0, r3, #0
    d874:	d112      	bne.n	d89c <__mcmp+0x34>
    d876:	0093      	lsls	r3, r2, #2
    d878:	3414      	adds	r4, #20
    d87a:	3114      	adds	r1, #20
    d87c:	18e2      	adds	r2, r4, r3
    d87e:	18c9      	adds	r1, r1, r3
    d880:	3a04      	subs	r2, #4
    d882:	3904      	subs	r1, #4
    d884:	6813      	ldr	r3, [r2, #0]
    d886:	6808      	ldr	r0, [r1, #0]
    d888:	4283      	cmp	r3, r0
    d88a:	d004      	beq.n	d896 <__mcmp+0x2e>
    d88c:	4283      	cmp	r3, r0
    d88e:	419b      	sbcs	r3, r3
    d890:	2001      	movs	r0, #1
    d892:	4318      	orrs	r0, r3
    d894:	e002      	b.n	d89c <__mcmp+0x34>
    d896:	42a2      	cmp	r2, r4
    d898:	d8f2      	bhi.n	d880 <__mcmp+0x18>
    d89a:	2000      	movs	r0, #0
    d89c:	bd10      	pop	{r4, pc}

0000d89e <__mdiff>:
    d89e:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8a0:	1c07      	adds	r7, r0, #0
    d8a2:	b085      	sub	sp, #20
    d8a4:	1c08      	adds	r0, r1, #0
    d8a6:	1c0c      	adds	r4, r1, #0
    d8a8:	1c11      	adds	r1, r2, #0
    d8aa:	1c15      	adds	r5, r2, #0
    d8ac:	f7ff ffdc 	bl	d868 <__mcmp>
    d8b0:	1e06      	subs	r6, r0, #0
    d8b2:	d107      	bne.n	d8c4 <__mdiff+0x26>
    d8b4:	1c38      	adds	r0, r7, #0
    d8b6:	1c31      	adds	r1, r6, #0
    d8b8:	f7ff fd84 	bl	d3c4 <_Balloc>
    d8bc:	2301      	movs	r3, #1
    d8be:	6146      	str	r6, [r0, #20]
    d8c0:	6103      	str	r3, [r0, #16]
    d8c2:	e055      	b.n	d970 <__mdiff+0xd2>
    d8c4:	2300      	movs	r3, #0
    d8c6:	9301      	str	r3, [sp, #4]
    d8c8:	4298      	cmp	r0, r3
    d8ca:	da04      	bge.n	d8d6 <__mdiff+0x38>
    d8cc:	1c23      	adds	r3, r4, #0
    d8ce:	1c2c      	adds	r4, r5, #0
    d8d0:	1c1d      	adds	r5, r3, #0
    d8d2:	2301      	movs	r3, #1
    d8d4:	9301      	str	r3, [sp, #4]
    d8d6:	1c38      	adds	r0, r7, #0
    d8d8:	6861      	ldr	r1, [r4, #4]
    d8da:	f7ff fd73 	bl	d3c4 <_Balloc>
    d8de:	9b01      	ldr	r3, [sp, #4]
    d8e0:	6926      	ldr	r6, [r4, #16]
    d8e2:	1c2f      	adds	r7, r5, #0
    d8e4:	60c3      	str	r3, [r0, #12]
    d8e6:	3414      	adds	r4, #20
    d8e8:	00b3      	lsls	r3, r6, #2
    d8ea:	18e3      	adds	r3, r4, r3
    d8ec:	1c02      	adds	r2, r0, #0
    d8ee:	9302      	str	r3, [sp, #8]
    d8f0:	692b      	ldr	r3, [r5, #16]
    d8f2:	2500      	movs	r5, #0
    d8f4:	3714      	adds	r7, #20
    d8f6:	009b      	lsls	r3, r3, #2
    d8f8:	18fb      	adds	r3, r7, r3
    d8fa:	9303      	str	r3, [sp, #12]
    d8fc:	3214      	adds	r2, #20
    d8fe:	cc08      	ldmia	r4!, {r3}
    d900:	4669      	mov	r1, sp
    d902:	469c      	mov	ip, r3
    d904:	cf08      	ldmia	r7!, {r3}
    d906:	3204      	adds	r2, #4
    d908:	9300      	str	r3, [sp, #0]
    d90a:	4663      	mov	r3, ip
    d90c:	808b      	strh	r3, [r1, #4]
    d90e:	888b      	ldrh	r3, [r1, #4]
    d910:	195d      	adds	r5, r3, r5
    d912:	9b00      	ldr	r3, [sp, #0]
    d914:	b29b      	uxth	r3, r3
    d916:	1aeb      	subs	r3, r5, r3
    d918:	4665      	mov	r5, ip
    d91a:	9301      	str	r3, [sp, #4]
    d91c:	9b00      	ldr	r3, [sp, #0]
    d91e:	0c2d      	lsrs	r5, r5, #16
    d920:	0c19      	lsrs	r1, r3, #16
    d922:	9b01      	ldr	r3, [sp, #4]
    d924:	1a69      	subs	r1, r5, r1
    d926:	141d      	asrs	r5, r3, #16
    d928:	1f13      	subs	r3, r2, #4
    d92a:	469c      	mov	ip, r3
    d92c:	466b      	mov	r3, sp
    d92e:	1949      	adds	r1, r1, r5
    d930:	889b      	ldrh	r3, [r3, #4]
    d932:	140d      	asrs	r5, r1, #16
    d934:	0409      	lsls	r1, r1, #16
    d936:	430b      	orrs	r3, r1
    d938:	4661      	mov	r1, ip
    d93a:	600b      	str	r3, [r1, #0]
    d93c:	9b03      	ldr	r3, [sp, #12]
    d93e:	429f      	cmp	r7, r3
    d940:	d3dd      	bcc.n	d8fe <__mdiff+0x60>
    d942:	9902      	ldr	r1, [sp, #8]
    d944:	1c13      	adds	r3, r2, #0
    d946:	428c      	cmp	r4, r1
    d948:	d20b      	bcs.n	d962 <__mdiff+0xc4>
    d94a:	cc08      	ldmia	r4!, {r3}
    d94c:	b299      	uxth	r1, r3
    d94e:	1949      	adds	r1, r1, r5
    d950:	140d      	asrs	r5, r1, #16
    d952:	0c1b      	lsrs	r3, r3, #16
    d954:	18eb      	adds	r3, r5, r3
    d956:	141d      	asrs	r5, r3, #16
    d958:	b289      	uxth	r1, r1
    d95a:	041b      	lsls	r3, r3, #16
    d95c:	430b      	orrs	r3, r1
    d95e:	c208      	stmia	r2!, {r3}
    d960:	e7ef      	b.n	d942 <__mdiff+0xa4>
    d962:	3b04      	subs	r3, #4
    d964:	681a      	ldr	r2, [r3, #0]
    d966:	2a00      	cmp	r2, #0
    d968:	d101      	bne.n	d96e <__mdiff+0xd0>
    d96a:	3e01      	subs	r6, #1
    d96c:	e7f9      	b.n	d962 <__mdiff+0xc4>
    d96e:	6106      	str	r6, [r0, #16]
    d970:	b005      	add	sp, #20
    d972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d974 <__ulp>:
    d974:	4b0f      	ldr	r3, [pc, #60]	; (d9b4 <__ulp+0x40>)
    d976:	b510      	push	{r4, lr}
    d978:	4019      	ands	r1, r3
    d97a:	4b0f      	ldr	r3, [pc, #60]	; (d9b8 <__ulp+0x44>)
    d97c:	18c9      	adds	r1, r1, r3
    d97e:	2900      	cmp	r1, #0
    d980:	dd02      	ble.n	d988 <__ulp+0x14>
    d982:	2200      	movs	r2, #0
    d984:	1c0b      	adds	r3, r1, #0
    d986:	e011      	b.n	d9ac <__ulp+0x38>
    d988:	4249      	negs	r1, r1
    d98a:	1509      	asrs	r1, r1, #20
    d98c:	2200      	movs	r2, #0
    d98e:	2300      	movs	r3, #0
    d990:	2913      	cmp	r1, #19
    d992:	dc04      	bgt.n	d99e <__ulp+0x2a>
    d994:	2080      	movs	r0, #128	; 0x80
    d996:	0300      	lsls	r0, r0, #12
    d998:	4108      	asrs	r0, r1
    d99a:	1c03      	adds	r3, r0, #0
    d99c:	e006      	b.n	d9ac <__ulp+0x38>
    d99e:	2001      	movs	r0, #1
    d9a0:	2932      	cmp	r1, #50	; 0x32
    d9a2:	dc02      	bgt.n	d9aa <__ulp+0x36>
    d9a4:	2433      	movs	r4, #51	; 0x33
    d9a6:	1a61      	subs	r1, r4, r1
    d9a8:	4088      	lsls	r0, r1
    d9aa:	1c02      	adds	r2, r0, #0
    d9ac:	1c10      	adds	r0, r2, #0
    d9ae:	1c19      	adds	r1, r3, #0
    d9b0:	bd10      	pop	{r4, pc}
    d9b2:	46c0      	nop			; (mov r8, r8)
    d9b4:	7ff00000 	.word	0x7ff00000
    d9b8:	fcc00000 	.word	0xfcc00000

0000d9bc <__b2d>:
    d9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d9be:	1c06      	adds	r6, r0, #0
    d9c0:	6903      	ldr	r3, [r0, #16]
    d9c2:	3614      	adds	r6, #20
    d9c4:	009b      	lsls	r3, r3, #2
    d9c6:	18f3      	adds	r3, r6, r3
    d9c8:	1f1d      	subs	r5, r3, #4
    d9ca:	682c      	ldr	r4, [r5, #0]
    d9cc:	1c0f      	adds	r7, r1, #0
    d9ce:	1c20      	adds	r0, r4, #0
    d9d0:	9301      	str	r3, [sp, #4]
    d9d2:	f7ff fdc4 	bl	d55e <__hi0bits>
    d9d6:	2320      	movs	r3, #32
    d9d8:	1a1b      	subs	r3, r3, r0
    d9da:	603b      	str	r3, [r7, #0]
    d9dc:	491f      	ldr	r1, [pc, #124]	; (da5c <__b2d+0xa0>)
    d9de:	280a      	cmp	r0, #10
    d9e0:	dc13      	bgt.n	da0a <__b2d+0x4e>
    d9e2:	230b      	movs	r3, #11
    d9e4:	1c27      	adds	r7, r4, #0
    d9e6:	1a1b      	subs	r3, r3, r0
    d9e8:	40df      	lsrs	r7, r3
    d9ea:	4339      	orrs	r1, r7
    d9ec:	469c      	mov	ip, r3
    d9ee:	1c0b      	adds	r3, r1, #0
    d9f0:	2100      	movs	r1, #0
    d9f2:	42b5      	cmp	r5, r6
    d9f4:	d902      	bls.n	d9fc <__b2d+0x40>
    d9f6:	9901      	ldr	r1, [sp, #4]
    d9f8:	3908      	subs	r1, #8
    d9fa:	6809      	ldr	r1, [r1, #0]
    d9fc:	4665      	mov	r5, ip
    d9fe:	3015      	adds	r0, #21
    da00:	40e9      	lsrs	r1, r5
    da02:	4084      	lsls	r4, r0
    da04:	4321      	orrs	r1, r4
    da06:	1c0a      	adds	r2, r1, #0
    da08:	e024      	b.n	da54 <__b2d+0x98>
    da0a:	2700      	movs	r7, #0
    da0c:	42b5      	cmp	r5, r6
    da0e:	d902      	bls.n	da16 <__b2d+0x5a>
    da10:	9d01      	ldr	r5, [sp, #4]
    da12:	3d08      	subs	r5, #8
    da14:	682f      	ldr	r7, [r5, #0]
    da16:	230b      	movs	r3, #11
    da18:	425b      	negs	r3, r3
    da1a:	469c      	mov	ip, r3
    da1c:	4484      	add	ip, r0
    da1e:	4663      	mov	r3, ip
    da20:	2b00      	cmp	r3, #0
    da22:	d014      	beq.n	da4e <__b2d+0x92>
    da24:	232b      	movs	r3, #43	; 0x2b
    da26:	1a18      	subs	r0, r3, r0
    da28:	4663      	mov	r3, ip
    da2a:	409c      	lsls	r4, r3
    da2c:	4321      	orrs	r1, r4
    da2e:	1c3c      	adds	r4, r7, #0
    da30:	40c4      	lsrs	r4, r0
    da32:	4321      	orrs	r1, r4
    da34:	1c0b      	adds	r3, r1, #0
    da36:	2400      	movs	r4, #0
    da38:	42b5      	cmp	r5, r6
    da3a:	d901      	bls.n	da40 <__b2d+0x84>
    da3c:	3d04      	subs	r5, #4
    da3e:	682c      	ldr	r4, [r5, #0]
    da40:	40c4      	lsrs	r4, r0
    da42:	4661      	mov	r1, ip
    da44:	1c20      	adds	r0, r4, #0
    da46:	408f      	lsls	r7, r1
    da48:	4338      	orrs	r0, r7
    da4a:	1c02      	adds	r2, r0, #0
    da4c:	e002      	b.n	da54 <__b2d+0x98>
    da4e:	4321      	orrs	r1, r4
    da50:	1c0b      	adds	r3, r1, #0
    da52:	1c3a      	adds	r2, r7, #0
    da54:	1c10      	adds	r0, r2, #0
    da56:	1c19      	adds	r1, r3, #0
    da58:	b003      	add	sp, #12
    da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da5c:	3ff00000 	.word	0x3ff00000

0000da60 <__d2b>:
    da60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    da62:	1c1d      	adds	r5, r3, #0
    da64:	2101      	movs	r1, #1
    da66:	9f08      	ldr	r7, [sp, #32]
    da68:	1c14      	adds	r4, r2, #0
    da6a:	f7ff fcab 	bl	d3c4 <_Balloc>
    da6e:	032b      	lsls	r3, r5, #12
    da70:	006d      	lsls	r5, r5, #1
    da72:	1c06      	adds	r6, r0, #0
    da74:	0b1b      	lsrs	r3, r3, #12
    da76:	0d6d      	lsrs	r5, r5, #21
    da78:	d002      	beq.n	da80 <__d2b+0x20>
    da7a:	2280      	movs	r2, #128	; 0x80
    da7c:	0352      	lsls	r2, r2, #13
    da7e:	4313      	orrs	r3, r2
    da80:	9301      	str	r3, [sp, #4]
    da82:	2c00      	cmp	r4, #0
    da84:	d018      	beq.n	dab8 <__d2b+0x58>
    da86:	4668      	mov	r0, sp
    da88:	9400      	str	r4, [sp, #0]
    da8a:	f7ff fd83 	bl	d594 <__lo0bits>
    da8e:	9c00      	ldr	r4, [sp, #0]
    da90:	2800      	cmp	r0, #0
    da92:	d009      	beq.n	daa8 <__d2b+0x48>
    da94:	2320      	movs	r3, #32
    da96:	9a01      	ldr	r2, [sp, #4]
    da98:	1a19      	subs	r1, r3, r0
    da9a:	1c13      	adds	r3, r2, #0
    da9c:	408b      	lsls	r3, r1
    da9e:	40c2      	lsrs	r2, r0
    daa0:	4323      	orrs	r3, r4
    daa2:	6173      	str	r3, [r6, #20]
    daa4:	9201      	str	r2, [sp, #4]
    daa6:	e000      	b.n	daaa <__d2b+0x4a>
    daa8:	6174      	str	r4, [r6, #20]
    daaa:	9c01      	ldr	r4, [sp, #4]
    daac:	61b4      	str	r4, [r6, #24]
    daae:	1e63      	subs	r3, r4, #1
    dab0:	419c      	sbcs	r4, r3
    dab2:	3401      	adds	r4, #1
    dab4:	6134      	str	r4, [r6, #16]
    dab6:	e007      	b.n	dac8 <__d2b+0x68>
    dab8:	a801      	add	r0, sp, #4
    daba:	f7ff fd6b 	bl	d594 <__lo0bits>
    dabe:	2401      	movs	r4, #1
    dac0:	9b01      	ldr	r3, [sp, #4]
    dac2:	6134      	str	r4, [r6, #16]
    dac4:	6173      	str	r3, [r6, #20]
    dac6:	3020      	adds	r0, #32
    dac8:	2d00      	cmp	r5, #0
    daca:	d006      	beq.n	dada <__d2b+0x7a>
    dacc:	4b0b      	ldr	r3, [pc, #44]	; (dafc <__d2b+0x9c>)
    dace:	18ed      	adds	r5, r5, r3
    dad0:	2335      	movs	r3, #53	; 0x35
    dad2:	182d      	adds	r5, r5, r0
    dad4:	603d      	str	r5, [r7, #0]
    dad6:	1a18      	subs	r0, r3, r0
    dad8:	e00b      	b.n	daf2 <__d2b+0x92>
    dada:	4b09      	ldr	r3, [pc, #36]	; (db00 <__d2b+0xa0>)
    dadc:	18c0      	adds	r0, r0, r3
    dade:	4b09      	ldr	r3, [pc, #36]	; (db04 <__d2b+0xa4>)
    dae0:	6038      	str	r0, [r7, #0]
    dae2:	18e3      	adds	r3, r4, r3
    dae4:	009b      	lsls	r3, r3, #2
    dae6:	18f3      	adds	r3, r6, r3
    dae8:	6958      	ldr	r0, [r3, #20]
    daea:	f7ff fd38 	bl	d55e <__hi0bits>
    daee:	0164      	lsls	r4, r4, #5
    daf0:	1a20      	subs	r0, r4, r0
    daf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    daf4:	6018      	str	r0, [r3, #0]
    daf6:	1c30      	adds	r0, r6, #0
    daf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    dafa:	46c0      	nop			; (mov r8, r8)
    dafc:	fffffbcd 	.word	0xfffffbcd
    db00:	fffffbce 	.word	0xfffffbce
    db04:	3fffffff 	.word	0x3fffffff

0000db08 <__ratio>:
    db08:	b5f0      	push	{r4, r5, r6, r7, lr}
    db0a:	b087      	sub	sp, #28
    db0c:	1c0e      	adds	r6, r1, #0
    db0e:	a904      	add	r1, sp, #16
    db10:	1c07      	adds	r7, r0, #0
    db12:	f7ff ff53 	bl	d9bc <__b2d>
    db16:	1c04      	adds	r4, r0, #0
    db18:	1c0d      	adds	r5, r1, #0
    db1a:	1c30      	adds	r0, r6, #0
    db1c:	a905      	add	r1, sp, #20
    db1e:	9400      	str	r4, [sp, #0]
    db20:	9501      	str	r5, [sp, #4]
    db22:	f7ff ff4b 	bl	d9bc <__b2d>
    db26:	9b04      	ldr	r3, [sp, #16]
    db28:	9a05      	ldr	r2, [sp, #20]
    db2a:	693f      	ldr	r7, [r7, #16]
    db2c:	1a9a      	subs	r2, r3, r2
    db2e:	6933      	ldr	r3, [r6, #16]
    db30:	9002      	str	r0, [sp, #8]
    db32:	9103      	str	r1, [sp, #12]
    db34:	1afb      	subs	r3, r7, r3
    db36:	015b      	lsls	r3, r3, #5
    db38:	18d3      	adds	r3, r2, r3
    db3a:	2b00      	cmp	r3, #0
    db3c:	dd03      	ble.n	db46 <__ratio+0x3e>
    db3e:	051b      	lsls	r3, r3, #20
    db40:	195b      	adds	r3, r3, r5
    db42:	9301      	str	r3, [sp, #4]
    db44:	e002      	b.n	db4c <__ratio+0x44>
    db46:	051b      	lsls	r3, r3, #20
    db48:	1acb      	subs	r3, r1, r3
    db4a:	9303      	str	r3, [sp, #12]
    db4c:	9800      	ldr	r0, [sp, #0]
    db4e:	9901      	ldr	r1, [sp, #4]
    db50:	9a02      	ldr	r2, [sp, #8]
    db52:	9b03      	ldr	r3, [sp, #12]
    db54:	f7f9 fcde 	bl	7514 <__aeabi_ddiv>
    db58:	b007      	add	sp, #28
    db5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000db5c <__copybits>:
    db5c:	1c13      	adds	r3, r2, #0
    db5e:	3901      	subs	r1, #1
    db60:	b510      	push	{r4, lr}
    db62:	1149      	asrs	r1, r1, #5
    db64:	6912      	ldr	r2, [r2, #16]
    db66:	3101      	adds	r1, #1
    db68:	0089      	lsls	r1, r1, #2
    db6a:	3314      	adds	r3, #20
    db6c:	0092      	lsls	r2, r2, #2
    db6e:	1841      	adds	r1, r0, r1
    db70:	189a      	adds	r2, r3, r2
    db72:	4293      	cmp	r3, r2
    db74:	d202      	bcs.n	db7c <__copybits+0x20>
    db76:	cb10      	ldmia	r3!, {r4}
    db78:	c010      	stmia	r0!, {r4}
    db7a:	e7fa      	b.n	db72 <__copybits+0x16>
    db7c:	4288      	cmp	r0, r1
    db7e:	d202      	bcs.n	db86 <__copybits+0x2a>
    db80:	2300      	movs	r3, #0
    db82:	c008      	stmia	r0!, {r3}
    db84:	e7fa      	b.n	db7c <__copybits+0x20>
    db86:	bd10      	pop	{r4, pc}

0000db88 <__any_on>:
    db88:	b530      	push	{r4, r5, lr}
    db8a:	1c04      	adds	r4, r0, #0
    db8c:	6902      	ldr	r2, [r0, #16]
    db8e:	3414      	adds	r4, #20
    db90:	114b      	asrs	r3, r1, #5
    db92:	4293      	cmp	r3, r2
    db94:	dc0c      	bgt.n	dbb0 <__any_on+0x28>
    db96:	da0c      	bge.n	dbb2 <__any_on+0x2a>
    db98:	221f      	movs	r2, #31
    db9a:	4011      	ands	r1, r2
    db9c:	d009      	beq.n	dbb2 <__any_on+0x2a>
    db9e:	009a      	lsls	r2, r3, #2
    dba0:	5915      	ldr	r5, [r2, r4]
    dba2:	2001      	movs	r0, #1
    dba4:	1c2a      	adds	r2, r5, #0
    dba6:	40ca      	lsrs	r2, r1
    dba8:	408a      	lsls	r2, r1
    dbaa:	42aa      	cmp	r2, r5
    dbac:	d10c      	bne.n	dbc8 <__any_on+0x40>
    dbae:	e000      	b.n	dbb2 <__any_on+0x2a>
    dbb0:	1c13      	adds	r3, r2, #0
    dbb2:	009b      	lsls	r3, r3, #2
    dbb4:	18e3      	adds	r3, r4, r3
    dbb6:	42a3      	cmp	r3, r4
    dbb8:	d905      	bls.n	dbc6 <__any_on+0x3e>
    dbba:	3b04      	subs	r3, #4
    dbbc:	681a      	ldr	r2, [r3, #0]
    dbbe:	2a00      	cmp	r2, #0
    dbc0:	d0f9      	beq.n	dbb6 <__any_on+0x2e>
    dbc2:	2001      	movs	r0, #1
    dbc4:	e000      	b.n	dbc8 <__any_on+0x40>
    dbc6:	2000      	movs	r0, #0
    dbc8:	bd30      	pop	{r4, r5, pc}

0000dbca <_calloc_r>:
    dbca:	434a      	muls	r2, r1
    dbcc:	b538      	push	{r3, r4, r5, lr}
    dbce:	1c11      	adds	r1, r2, #0
    dbd0:	1c14      	adds	r4, r2, #0
    dbd2:	f7fb fcd7 	bl	9584 <_malloc_r>
    dbd6:	1e05      	subs	r5, r0, #0
    dbd8:	d003      	beq.n	dbe2 <_calloc_r+0x18>
    dbda:	2100      	movs	r1, #0
    dbdc:	1c22      	adds	r2, r4, #0
    dbde:	f7fb fc83 	bl	94e8 <memset>
    dbe2:	1c28      	adds	r0, r5, #0
    dbe4:	bd38      	pop	{r3, r4, r5, pc}

0000dbe6 <_realloc_r>:
    dbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbe8:	1c06      	adds	r6, r0, #0
    dbea:	1c0c      	adds	r4, r1, #0
    dbec:	1c15      	adds	r5, r2, #0
    dbee:	2900      	cmp	r1, #0
    dbf0:	d104      	bne.n	dbfc <_realloc_r+0x16>
    dbf2:	1c11      	adds	r1, r2, #0
    dbf4:	f7fb fcc6 	bl	9584 <_malloc_r>
    dbf8:	1c04      	adds	r4, r0, #0
    dbfa:	e018      	b.n	dc2e <_realloc_r+0x48>
    dbfc:	2a00      	cmp	r2, #0
    dbfe:	d103      	bne.n	dc08 <_realloc_r+0x22>
    dc00:	f7fb fc7a 	bl	94f8 <_free_r>
    dc04:	1c2c      	adds	r4, r5, #0
    dc06:	e012      	b.n	dc2e <_realloc_r+0x48>
    dc08:	f000 fb52 	bl	e2b0 <_malloc_usable_size_r>
    dc0c:	42a8      	cmp	r0, r5
    dc0e:	d20e      	bcs.n	dc2e <_realloc_r+0x48>
    dc10:	1c30      	adds	r0, r6, #0
    dc12:	1c29      	adds	r1, r5, #0
    dc14:	f7fb fcb6 	bl	9584 <_malloc_r>
    dc18:	1e07      	subs	r7, r0, #0
    dc1a:	d007      	beq.n	dc2c <_realloc_r+0x46>
    dc1c:	1c21      	adds	r1, r4, #0
    dc1e:	1c2a      	adds	r2, r5, #0
    dc20:	f7fb fc59 	bl	94d6 <memcpy>
    dc24:	1c30      	adds	r0, r6, #0
    dc26:	1c21      	adds	r1, r4, #0
    dc28:	f7fb fc66 	bl	94f8 <_free_r>
    dc2c:	1c3c      	adds	r4, r7, #0
    dc2e:	1c20      	adds	r0, r4, #0
    dc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000dc34 <__ssputs_r>:
    dc34:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc36:	688e      	ldr	r6, [r1, #8]
    dc38:	b085      	sub	sp, #20
    dc3a:	1c07      	adds	r7, r0, #0
    dc3c:	1c0c      	adds	r4, r1, #0
    dc3e:	9203      	str	r2, [sp, #12]
    dc40:	9301      	str	r3, [sp, #4]
    dc42:	42b3      	cmp	r3, r6
    dc44:	d345      	bcc.n	dcd2 <__ssputs_r+0x9e>
    dc46:	2390      	movs	r3, #144	; 0x90
    dc48:	898a      	ldrh	r2, [r1, #12]
    dc4a:	00db      	lsls	r3, r3, #3
    dc4c:	421a      	tst	r2, r3
    dc4e:	d03d      	beq.n	dccc <__ssputs_r+0x98>
    dc50:	2503      	movs	r5, #3
    dc52:	6909      	ldr	r1, [r1, #16]
    dc54:	6823      	ldr	r3, [r4, #0]
    dc56:	9801      	ldr	r0, [sp, #4]
    dc58:	1a5b      	subs	r3, r3, r1
    dc5a:	9302      	str	r3, [sp, #8]
    dc5c:	6963      	ldr	r3, [r4, #20]
    dc5e:	435d      	muls	r5, r3
    dc60:	0feb      	lsrs	r3, r5, #31
    dc62:	195d      	adds	r5, r3, r5
    dc64:	9b02      	ldr	r3, [sp, #8]
    dc66:	106d      	asrs	r5, r5, #1
    dc68:	3301      	adds	r3, #1
    dc6a:	181b      	adds	r3, r3, r0
    dc6c:	429d      	cmp	r5, r3
    dc6e:	d200      	bcs.n	dc72 <__ssputs_r+0x3e>
    dc70:	1c1d      	adds	r5, r3, #0
    dc72:	1c38      	adds	r0, r7, #0
    dc74:	0553      	lsls	r3, r2, #21
    dc76:	d50f      	bpl.n	dc98 <__ssputs_r+0x64>
    dc78:	1c29      	adds	r1, r5, #0
    dc7a:	f7fb fc83 	bl	9584 <_malloc_r>
    dc7e:	1e06      	subs	r6, r0, #0
    dc80:	d013      	beq.n	dcaa <__ssputs_r+0x76>
    dc82:	9a02      	ldr	r2, [sp, #8]
    dc84:	6921      	ldr	r1, [r4, #16]
    dc86:	f7fb fc26 	bl	94d6 <memcpy>
    dc8a:	89a2      	ldrh	r2, [r4, #12]
    dc8c:	4b18      	ldr	r3, [pc, #96]	; (dcf0 <__ssputs_r+0xbc>)
    dc8e:	4013      	ands	r3, r2
    dc90:	2280      	movs	r2, #128	; 0x80
    dc92:	4313      	orrs	r3, r2
    dc94:	81a3      	strh	r3, [r4, #12]
    dc96:	e011      	b.n	dcbc <__ssputs_r+0x88>
    dc98:	1c2a      	adds	r2, r5, #0
    dc9a:	f7ff ffa4 	bl	dbe6 <_realloc_r>
    dc9e:	1e06      	subs	r6, r0, #0
    dca0:	d10c      	bne.n	dcbc <__ssputs_r+0x88>
    dca2:	1c38      	adds	r0, r7, #0
    dca4:	6921      	ldr	r1, [r4, #16]
    dca6:	f7fb fc27 	bl	94f8 <_free_r>
    dcaa:	230c      	movs	r3, #12
    dcac:	2240      	movs	r2, #64	; 0x40
    dcae:	2001      	movs	r0, #1
    dcb0:	603b      	str	r3, [r7, #0]
    dcb2:	89a3      	ldrh	r3, [r4, #12]
    dcb4:	4240      	negs	r0, r0
    dcb6:	4313      	orrs	r3, r2
    dcb8:	81a3      	strh	r3, [r4, #12]
    dcba:	e017      	b.n	dcec <__ssputs_r+0xb8>
    dcbc:	9b02      	ldr	r3, [sp, #8]
    dcbe:	6126      	str	r6, [r4, #16]
    dcc0:	18f6      	adds	r6, r6, r3
    dcc2:	6026      	str	r6, [r4, #0]
    dcc4:	6165      	str	r5, [r4, #20]
    dcc6:	9e01      	ldr	r6, [sp, #4]
    dcc8:	1aed      	subs	r5, r5, r3
    dcca:	60a5      	str	r5, [r4, #8]
    dccc:	9b01      	ldr	r3, [sp, #4]
    dcce:	42b3      	cmp	r3, r6
    dcd0:	d200      	bcs.n	dcd4 <__ssputs_r+0xa0>
    dcd2:	9e01      	ldr	r6, [sp, #4]
    dcd4:	1c32      	adds	r2, r6, #0
    dcd6:	6820      	ldr	r0, [r4, #0]
    dcd8:	9903      	ldr	r1, [sp, #12]
    dcda:	f7ff fb5f 	bl	d39c <memmove>
    dcde:	2000      	movs	r0, #0
    dce0:	68a3      	ldr	r3, [r4, #8]
    dce2:	1b9b      	subs	r3, r3, r6
    dce4:	60a3      	str	r3, [r4, #8]
    dce6:	6823      	ldr	r3, [r4, #0]
    dce8:	199e      	adds	r6, r3, r6
    dcea:	6026      	str	r6, [r4, #0]
    dcec:	b005      	add	sp, #20
    dcee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcf0:	fffffb7f 	.word	0xfffffb7f

0000dcf4 <_svfiprintf_r>:
    dcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcf6:	b09f      	sub	sp, #124	; 0x7c
    dcf8:	9002      	str	r0, [sp, #8]
    dcfa:	9305      	str	r3, [sp, #20]
    dcfc:	898b      	ldrh	r3, [r1, #12]
    dcfe:	1c0e      	adds	r6, r1, #0
    dd00:	1c17      	adds	r7, r2, #0
    dd02:	061b      	lsls	r3, r3, #24
    dd04:	d510      	bpl.n	dd28 <_svfiprintf_r+0x34>
    dd06:	690b      	ldr	r3, [r1, #16]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d10d      	bne.n	dd28 <_svfiprintf_r+0x34>
    dd0c:	2140      	movs	r1, #64	; 0x40
    dd0e:	f7fb fc39 	bl	9584 <_malloc_r>
    dd12:	6030      	str	r0, [r6, #0]
    dd14:	6130      	str	r0, [r6, #16]
    dd16:	2800      	cmp	r0, #0
    dd18:	d104      	bne.n	dd24 <_svfiprintf_r+0x30>
    dd1a:	230c      	movs	r3, #12
    dd1c:	9a02      	ldr	r2, [sp, #8]
    dd1e:	3801      	subs	r0, #1
    dd20:	6013      	str	r3, [r2, #0]
    dd22:	e0d0      	b.n	dec6 <_svfiprintf_r+0x1d2>
    dd24:	2340      	movs	r3, #64	; 0x40
    dd26:	6173      	str	r3, [r6, #20]
    dd28:	2300      	movs	r3, #0
    dd2a:	ad06      	add	r5, sp, #24
    dd2c:	616b      	str	r3, [r5, #20]
    dd2e:	3320      	adds	r3, #32
    dd30:	766b      	strb	r3, [r5, #25]
    dd32:	3310      	adds	r3, #16
    dd34:	76ab      	strb	r3, [r5, #26]
    dd36:	1c3c      	adds	r4, r7, #0
    dd38:	7823      	ldrb	r3, [r4, #0]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d103      	bne.n	dd46 <_svfiprintf_r+0x52>
    dd3e:	1be3      	subs	r3, r4, r7
    dd40:	9304      	str	r3, [sp, #16]
    dd42:	d012      	beq.n	dd6a <_svfiprintf_r+0x76>
    dd44:	e003      	b.n	dd4e <_svfiprintf_r+0x5a>
    dd46:	2b25      	cmp	r3, #37	; 0x25
    dd48:	d0f9      	beq.n	dd3e <_svfiprintf_r+0x4a>
    dd4a:	3401      	adds	r4, #1
    dd4c:	e7f4      	b.n	dd38 <_svfiprintf_r+0x44>
    dd4e:	9b04      	ldr	r3, [sp, #16]
    dd50:	9802      	ldr	r0, [sp, #8]
    dd52:	1c31      	adds	r1, r6, #0
    dd54:	1c3a      	adds	r2, r7, #0
    dd56:	f7ff ff6d 	bl	dc34 <__ssputs_r>
    dd5a:	1c43      	adds	r3, r0, #1
    dd5c:	d100      	bne.n	dd60 <_svfiprintf_r+0x6c>
    dd5e:	e0ac      	b.n	deba <_svfiprintf_r+0x1c6>
    dd60:	696a      	ldr	r2, [r5, #20]
    dd62:	9b04      	ldr	r3, [sp, #16]
    dd64:	4694      	mov	ip, r2
    dd66:	4463      	add	r3, ip
    dd68:	616b      	str	r3, [r5, #20]
    dd6a:	7823      	ldrb	r3, [r4, #0]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	d100      	bne.n	dd72 <_svfiprintf_r+0x7e>
    dd70:	e0a3      	b.n	deba <_svfiprintf_r+0x1c6>
    dd72:	2201      	movs	r2, #1
    dd74:	2300      	movs	r3, #0
    dd76:	4252      	negs	r2, r2
    dd78:	606a      	str	r2, [r5, #4]
    dd7a:	a902      	add	r1, sp, #8
    dd7c:	3254      	adds	r2, #84	; 0x54
    dd7e:	1852      	adds	r2, r2, r1
    dd80:	3401      	adds	r4, #1
    dd82:	602b      	str	r3, [r5, #0]
    dd84:	60eb      	str	r3, [r5, #12]
    dd86:	60ab      	str	r3, [r5, #8]
    dd88:	7013      	strb	r3, [r2, #0]
    dd8a:	65ab      	str	r3, [r5, #88]	; 0x58
    dd8c:	4f4f      	ldr	r7, [pc, #316]	; (decc <_svfiprintf_r+0x1d8>)
    dd8e:	7821      	ldrb	r1, [r4, #0]
    dd90:	1c38      	adds	r0, r7, #0
    dd92:	2205      	movs	r2, #5
    dd94:	f7fb fb94 	bl	94c0 <memchr>
    dd98:	2800      	cmp	r0, #0
    dd9a:	d008      	beq.n	ddae <_svfiprintf_r+0xba>
    dd9c:	1bc0      	subs	r0, r0, r7
    dd9e:	2701      	movs	r7, #1
    dda0:	4087      	lsls	r7, r0
    dda2:	1c38      	adds	r0, r7, #0
    dda4:	682b      	ldr	r3, [r5, #0]
    dda6:	3401      	adds	r4, #1
    dda8:	4318      	orrs	r0, r3
    ddaa:	6028      	str	r0, [r5, #0]
    ddac:	e7ee      	b.n	dd8c <_svfiprintf_r+0x98>
    ddae:	682b      	ldr	r3, [r5, #0]
    ddb0:	06da      	lsls	r2, r3, #27
    ddb2:	d504      	bpl.n	ddbe <_svfiprintf_r+0xca>
    ddb4:	2253      	movs	r2, #83	; 0x53
    ddb6:	2120      	movs	r1, #32
    ddb8:	a802      	add	r0, sp, #8
    ddba:	1812      	adds	r2, r2, r0
    ddbc:	7011      	strb	r1, [r2, #0]
    ddbe:	071a      	lsls	r2, r3, #28
    ddc0:	d504      	bpl.n	ddcc <_svfiprintf_r+0xd8>
    ddc2:	2253      	movs	r2, #83	; 0x53
    ddc4:	212b      	movs	r1, #43	; 0x2b
    ddc6:	a802      	add	r0, sp, #8
    ddc8:	1812      	adds	r2, r2, r0
    ddca:	7011      	strb	r1, [r2, #0]
    ddcc:	7822      	ldrb	r2, [r4, #0]
    ddce:	2a2a      	cmp	r2, #42	; 0x2a
    ddd0:	d001      	beq.n	ddd6 <_svfiprintf_r+0xe2>
    ddd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ddd4:	e00e      	b.n	ddf4 <_svfiprintf_r+0x100>
    ddd6:	9a05      	ldr	r2, [sp, #20]
    ddd8:	1d11      	adds	r1, r2, #4
    ddda:	6812      	ldr	r2, [r2, #0]
    dddc:	9105      	str	r1, [sp, #20]
    ddde:	2a00      	cmp	r2, #0
    dde0:	db01      	blt.n	dde6 <_svfiprintf_r+0xf2>
    dde2:	9209      	str	r2, [sp, #36]	; 0x24
    dde4:	e004      	b.n	ddf0 <_svfiprintf_r+0xfc>
    dde6:	4252      	negs	r2, r2
    dde8:	60ea      	str	r2, [r5, #12]
    ddea:	2202      	movs	r2, #2
    ddec:	4313      	orrs	r3, r2
    ddee:	602b      	str	r3, [r5, #0]
    ddf0:	3401      	adds	r4, #1
    ddf2:	e009      	b.n	de08 <_svfiprintf_r+0x114>
    ddf4:	7822      	ldrb	r2, [r4, #0]
    ddf6:	3a30      	subs	r2, #48	; 0x30
    ddf8:	2a09      	cmp	r2, #9
    ddfa:	d804      	bhi.n	de06 <_svfiprintf_r+0x112>
    ddfc:	210a      	movs	r1, #10
    ddfe:	434b      	muls	r3, r1
    de00:	3401      	adds	r4, #1
    de02:	189b      	adds	r3, r3, r2
    de04:	e7f6      	b.n	ddf4 <_svfiprintf_r+0x100>
    de06:	9309      	str	r3, [sp, #36]	; 0x24
    de08:	7823      	ldrb	r3, [r4, #0]
    de0a:	2b2e      	cmp	r3, #46	; 0x2e
    de0c:	d118      	bne.n	de40 <_svfiprintf_r+0x14c>
    de0e:	7863      	ldrb	r3, [r4, #1]
    de10:	2b2a      	cmp	r3, #42	; 0x2a
    de12:	d109      	bne.n	de28 <_svfiprintf_r+0x134>
    de14:	9b05      	ldr	r3, [sp, #20]
    de16:	3402      	adds	r4, #2
    de18:	1d1a      	adds	r2, r3, #4
    de1a:	681b      	ldr	r3, [r3, #0]
    de1c:	9205      	str	r2, [sp, #20]
    de1e:	2b00      	cmp	r3, #0
    de20:	da0d      	bge.n	de3e <_svfiprintf_r+0x14a>
    de22:	2301      	movs	r3, #1
    de24:	425b      	negs	r3, r3
    de26:	e00a      	b.n	de3e <_svfiprintf_r+0x14a>
    de28:	2300      	movs	r3, #0
    de2a:	3401      	adds	r4, #1
    de2c:	7822      	ldrb	r2, [r4, #0]
    de2e:	3a30      	subs	r2, #48	; 0x30
    de30:	2a09      	cmp	r2, #9
    de32:	d804      	bhi.n	de3e <_svfiprintf_r+0x14a>
    de34:	210a      	movs	r1, #10
    de36:	434b      	muls	r3, r1
    de38:	3401      	adds	r4, #1
    de3a:	189b      	adds	r3, r3, r2
    de3c:	e7f6      	b.n	de2c <_svfiprintf_r+0x138>
    de3e:	9307      	str	r3, [sp, #28]
    de40:	4f23      	ldr	r7, [pc, #140]	; (ded0 <_svfiprintf_r+0x1dc>)
    de42:	7821      	ldrb	r1, [r4, #0]
    de44:	1c38      	adds	r0, r7, #0
    de46:	2203      	movs	r2, #3
    de48:	f7fb fb3a 	bl	94c0 <memchr>
    de4c:	2800      	cmp	r0, #0
    de4e:	d007      	beq.n	de60 <_svfiprintf_r+0x16c>
    de50:	1bc0      	subs	r0, r0, r7
    de52:	2740      	movs	r7, #64	; 0x40
    de54:	4087      	lsls	r7, r0
    de56:	1c38      	adds	r0, r7, #0
    de58:	682b      	ldr	r3, [r5, #0]
    de5a:	3401      	adds	r4, #1
    de5c:	4318      	orrs	r0, r3
    de5e:	6028      	str	r0, [r5, #0]
    de60:	7821      	ldrb	r1, [r4, #0]
    de62:	481c      	ldr	r0, [pc, #112]	; (ded4 <_svfiprintf_r+0x1e0>)
    de64:	2206      	movs	r2, #6
    de66:	1c67      	adds	r7, r4, #1
    de68:	7629      	strb	r1, [r5, #24]
    de6a:	f7fb fb29 	bl	94c0 <memchr>
    de6e:	2800      	cmp	r0, #0
    de70:	d012      	beq.n	de98 <_svfiprintf_r+0x1a4>
    de72:	4b19      	ldr	r3, [pc, #100]	; (ded8 <_svfiprintf_r+0x1e4>)
    de74:	2b00      	cmp	r3, #0
    de76:	d106      	bne.n	de86 <_svfiprintf_r+0x192>
    de78:	2207      	movs	r2, #7
    de7a:	9b05      	ldr	r3, [sp, #20]
    de7c:	3307      	adds	r3, #7
    de7e:	4393      	bics	r3, r2
    de80:	3308      	adds	r3, #8
    de82:	9305      	str	r3, [sp, #20]
    de84:	e014      	b.n	deb0 <_svfiprintf_r+0x1bc>
    de86:	ab05      	add	r3, sp, #20
    de88:	9300      	str	r3, [sp, #0]
    de8a:	9802      	ldr	r0, [sp, #8]
    de8c:	1c29      	adds	r1, r5, #0
    de8e:	1c32      	adds	r2, r6, #0
    de90:	4b12      	ldr	r3, [pc, #72]	; (dedc <_svfiprintf_r+0x1e8>)
    de92:	f7fb fdab 	bl	99ec <_printf_float>
    de96:	e007      	b.n	dea8 <_svfiprintf_r+0x1b4>
    de98:	ab05      	add	r3, sp, #20
    de9a:	9300      	str	r3, [sp, #0]
    de9c:	9802      	ldr	r0, [sp, #8]
    de9e:	1c29      	adds	r1, r5, #0
    dea0:	1c32      	adds	r2, r6, #0
    dea2:	4b0e      	ldr	r3, [pc, #56]	; (dedc <_svfiprintf_r+0x1e8>)
    dea4:	f7fc f84e 	bl	9f44 <_printf_i>
    dea8:	9003      	str	r0, [sp, #12]
    deaa:	9b03      	ldr	r3, [sp, #12]
    deac:	3301      	adds	r3, #1
    deae:	d004      	beq.n	deba <_svfiprintf_r+0x1c6>
    deb0:	696b      	ldr	r3, [r5, #20]
    deb2:	9a03      	ldr	r2, [sp, #12]
    deb4:	189b      	adds	r3, r3, r2
    deb6:	616b      	str	r3, [r5, #20]
    deb8:	e73d      	b.n	dd36 <_svfiprintf_r+0x42>
    deba:	89b3      	ldrh	r3, [r6, #12]
    debc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    debe:	065b      	lsls	r3, r3, #25
    dec0:	d501      	bpl.n	dec6 <_svfiprintf_r+0x1d2>
    dec2:	2001      	movs	r0, #1
    dec4:	4240      	negs	r0, r0
    dec6:	b01f      	add	sp, #124	; 0x7c
    dec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    deca:	46c0      	nop			; (mov r8, r8)
    decc:	0000f318 	.word	0x0000f318
    ded0:	0000f31e 	.word	0x0000f31e
    ded4:	0000f322 	.word	0x0000f322
    ded8:	000099ed 	.word	0x000099ed
    dedc:	0000dc35 	.word	0x0000dc35

0000dee0 <_sungetc_r>:
    dee0:	b538      	push	{r3, r4, r5, lr}
    dee2:	1c14      	adds	r4, r2, #0
    dee4:	1c4b      	adds	r3, r1, #1
    dee6:	d102      	bne.n	deee <_sungetc_r+0xe>
    dee8:	2001      	movs	r0, #1
    deea:	4240      	negs	r0, r0
    deec:	e034      	b.n	df58 <_sungetc_r+0x78>
    deee:	8993      	ldrh	r3, [r2, #12]
    def0:	2220      	movs	r2, #32
    def2:	4393      	bics	r3, r2
    def4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    def6:	81a3      	strh	r3, [r4, #12]
    def8:	b2cd      	uxtb	r5, r1
    defa:	6863      	ldr	r3, [r4, #4]
    defc:	2a00      	cmp	r2, #0
    defe:	d00f      	beq.n	df20 <_sungetc_r+0x40>
    df00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    df02:	4293      	cmp	r3, r2
    df04:	da06      	bge.n	df14 <_sungetc_r+0x34>
    df06:	6823      	ldr	r3, [r4, #0]
    df08:	3b01      	subs	r3, #1
    df0a:	6023      	str	r3, [r4, #0]
    df0c:	701d      	strb	r5, [r3, #0]
    df0e:	6863      	ldr	r3, [r4, #4]
    df10:	3301      	adds	r3, #1
    df12:	e01f      	b.n	df54 <_sungetc_r+0x74>
    df14:	1c21      	adds	r1, r4, #0
    df16:	f7fd fefd 	bl	bd14 <__submore>
    df1a:	2800      	cmp	r0, #0
    df1c:	d0f3      	beq.n	df06 <_sungetc_r+0x26>
    df1e:	e7e3      	b.n	dee8 <_sungetc_r+0x8>
    df20:	6921      	ldr	r1, [r4, #16]
    df22:	6822      	ldr	r2, [r4, #0]
    df24:	2900      	cmp	r1, #0
    df26:	d009      	beq.n	df3c <_sungetc_r+0x5c>
    df28:	428a      	cmp	r2, r1
    df2a:	d907      	bls.n	df3c <_sungetc_r+0x5c>
    df2c:	1e51      	subs	r1, r2, #1
    df2e:	7808      	ldrb	r0, [r1, #0]
    df30:	42a8      	cmp	r0, r5
    df32:	d103      	bne.n	df3c <_sungetc_r+0x5c>
    df34:	3301      	adds	r3, #1
    df36:	6021      	str	r1, [r4, #0]
    df38:	6063      	str	r3, [r4, #4]
    df3a:	e00d      	b.n	df58 <_sungetc_r+0x78>
    df3c:	6423      	str	r3, [r4, #64]	; 0x40
    df3e:	1c23      	adds	r3, r4, #0
    df40:	3344      	adds	r3, #68	; 0x44
    df42:	6363      	str	r3, [r4, #52]	; 0x34
    df44:	2303      	movs	r3, #3
    df46:	63a3      	str	r3, [r4, #56]	; 0x38
    df48:	1c23      	adds	r3, r4, #0
    df4a:	3346      	adds	r3, #70	; 0x46
    df4c:	63e2      	str	r2, [r4, #60]	; 0x3c
    df4e:	701d      	strb	r5, [r3, #0]
    df50:	6023      	str	r3, [r4, #0]
    df52:	2301      	movs	r3, #1
    df54:	1c28      	adds	r0, r5, #0
    df56:	6063      	str	r3, [r4, #4]
    df58:	bd38      	pop	{r3, r4, r5, pc}

0000df5a <__ssrefill_r>:
    df5a:	b510      	push	{r4, lr}
    df5c:	1c0c      	adds	r4, r1, #0
    df5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    df60:	2900      	cmp	r1, #0
    df62:	d00e      	beq.n	df82 <__ssrefill_r+0x28>
    df64:	1c23      	adds	r3, r4, #0
    df66:	3344      	adds	r3, #68	; 0x44
    df68:	4299      	cmp	r1, r3
    df6a:	d001      	beq.n	df70 <__ssrefill_r+0x16>
    df6c:	f7fb fac4 	bl	94f8 <_free_r>
    df70:	2000      	movs	r0, #0
    df72:	6c23      	ldr	r3, [r4, #64]	; 0x40
    df74:	6360      	str	r0, [r4, #52]	; 0x34
    df76:	6063      	str	r3, [r4, #4]
    df78:	4283      	cmp	r3, r0
    df7a:	d002      	beq.n	df82 <__ssrefill_r+0x28>
    df7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    df7e:	6023      	str	r3, [r4, #0]
    df80:	e009      	b.n	df96 <__ssrefill_r+0x3c>
    df82:	6923      	ldr	r3, [r4, #16]
    df84:	2220      	movs	r2, #32
    df86:	6023      	str	r3, [r4, #0]
    df88:	2300      	movs	r3, #0
    df8a:	2001      	movs	r0, #1
    df8c:	6063      	str	r3, [r4, #4]
    df8e:	89a3      	ldrh	r3, [r4, #12]
    df90:	4240      	negs	r0, r0
    df92:	4313      	orrs	r3, r2
    df94:	81a3      	strh	r3, [r4, #12]
    df96:	bd10      	pop	{r4, pc}

0000df98 <__ssvfiscanf_r>:
    df98:	b5f0      	push	{r4, r5, r6, r7, lr}
    df9a:	4cb5      	ldr	r4, [pc, #724]	; (e270 <__ssvfiscanf_r+0x2d8>)
    df9c:	1c07      	adds	r7, r0, #0
    df9e:	44a5      	add	sp, r4
    dfa0:	9303      	str	r3, [sp, #12]
    dfa2:	2300      	movs	r3, #0
    dfa4:	2086      	movs	r0, #134	; 0x86
    dfa6:	9348      	str	r3, [sp, #288]	; 0x120
    dfa8:	9349      	str	r3, [sp, #292]	; 0x124
    dfaa:	ab05      	add	r3, sp, #20
    dfac:	934a      	str	r3, [sp, #296]	; 0x128
    dfae:	23be      	movs	r3, #190	; 0xbe
    dfb0:	0040      	lsls	r0, r0, #1
    dfb2:	1c0d      	adds	r5, r1, #0
    dfb4:	9201      	str	r2, [sp, #4]
    dfb6:	a902      	add	r1, sp, #8
    dfb8:	4aae      	ldr	r2, [pc, #696]	; (e274 <__ssvfiscanf_r+0x2dc>)
    dfba:	005b      	lsls	r3, r3, #1
    dfbc:	1809      	adds	r1, r1, r0
    dfbe:	50ca      	str	r2, [r1, r3]
    dfc0:	4aad      	ldr	r2, [pc, #692]	; (e278 <__ssvfiscanf_r+0x2e0>)
    dfc2:	a902      	add	r1, sp, #8
    dfc4:	3304      	adds	r3, #4
    dfc6:	1809      	adds	r1, r1, r0
    dfc8:	50ca      	str	r2, [r1, r3]
    dfca:	9b01      	ldr	r3, [sp, #4]
    dfcc:	781c      	ldrb	r4, [r3, #0]
    dfce:	2c00      	cmp	r4, #0
    dfd0:	d100      	bne.n	dfd4 <__ssvfiscanf_r+0x3c>
    dfd2:	e144      	b.n	e25e <__ssvfiscanf_r+0x2c6>
    dfd4:	4ea9      	ldr	r6, [pc, #676]	; (e27c <__ssvfiscanf_r+0x2e4>)
    dfd6:	6833      	ldr	r3, [r6, #0]
    dfd8:	191b      	adds	r3, r3, r4
    dfda:	785a      	ldrb	r2, [r3, #1]
    dfdc:	2308      	movs	r3, #8
    dfde:	4013      	ands	r3, r2
    dfe0:	d023      	beq.n	e02a <__ssvfiscanf_r+0x92>
    dfe2:	686b      	ldr	r3, [r5, #4]
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	dd10      	ble.n	e00a <__ssvfiscanf_r+0x72>
    dfe8:	682b      	ldr	r3, [r5, #0]
    dfea:	6831      	ldr	r1, [r6, #0]
    dfec:	781a      	ldrb	r2, [r3, #0]
    dfee:	188a      	adds	r2, r1, r2
    dff0:	7852      	ldrb	r2, [r2, #1]
    dff2:	0712      	lsls	r2, r2, #28
    dff4:	d515      	bpl.n	e022 <__ssvfiscanf_r+0x8a>
    dff6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    dff8:	3301      	adds	r3, #1
    dffa:	9202      	str	r2, [sp, #8]
    dffc:	3201      	adds	r2, #1
    dffe:	9249      	str	r2, [sp, #292]	; 0x124
    e000:	686a      	ldr	r2, [r5, #4]
    e002:	602b      	str	r3, [r5, #0]
    e004:	3a01      	subs	r2, #1
    e006:	606a      	str	r2, [r5, #4]
    e008:	e7eb      	b.n	dfe2 <__ssvfiscanf_r+0x4a>
    e00a:	2186      	movs	r1, #134	; 0x86
    e00c:	23c0      	movs	r3, #192	; 0xc0
    e00e:	0049      	lsls	r1, r1, #1
    e010:	aa02      	add	r2, sp, #8
    e012:	1852      	adds	r2, r2, r1
    e014:	005b      	lsls	r3, r3, #1
    e016:	58d3      	ldr	r3, [r2, r3]
    e018:	1c38      	adds	r0, r7, #0
    e01a:	1c29      	adds	r1, r5, #0
    e01c:	4798      	blx	r3
    e01e:	2800      	cmp	r0, #0
    e020:	d0e2      	beq.n	dfe8 <__ssvfiscanf_r+0x50>
    e022:	9e01      	ldr	r6, [sp, #4]
    e024:	3601      	adds	r6, #1
    e026:	9601      	str	r6, [sp, #4]
    e028:	e7cf      	b.n	dfca <__ssvfiscanf_r+0x32>
    e02a:	9a01      	ldr	r2, [sp, #4]
    e02c:	1c56      	adds	r6, r2, #1
    e02e:	2c25      	cmp	r4, #37	; 0x25
    e030:	d14f      	bne.n	e0d2 <__ssvfiscanf_r+0x13a>
    e032:	9347      	str	r3, [sp, #284]	; 0x11c
    e034:	9345      	str	r3, [sp, #276]	; 0x114
    e036:	7853      	ldrb	r3, [r2, #1]
    e038:	2b2a      	cmp	r3, #42	; 0x2a
    e03a:	d102      	bne.n	e042 <__ssvfiscanf_r+0xaa>
    e03c:	3b1a      	subs	r3, #26
    e03e:	9345      	str	r3, [sp, #276]	; 0x114
    e040:	3601      	adds	r6, #1
    e042:	1c34      	adds	r4, r6, #0
    e044:	7821      	ldrb	r1, [r4, #0]
    e046:	1c0b      	adds	r3, r1, #0
    e048:	3b30      	subs	r3, #48	; 0x30
    e04a:	2b09      	cmp	r3, #9
    e04c:	d809      	bhi.n	e062 <__ssvfiscanf_r+0xca>
    e04e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    e050:	3401      	adds	r4, #1
    e052:	9301      	str	r3, [sp, #4]
    e054:	230a      	movs	r3, #10
    e056:	9a01      	ldr	r2, [sp, #4]
    e058:	4353      	muls	r3, r2
    e05a:	3b30      	subs	r3, #48	; 0x30
    e05c:	1859      	adds	r1, r3, r1
    e05e:	9147      	str	r1, [sp, #284]	; 0x11c
    e060:	e7f0      	b.n	e044 <__ssvfiscanf_r+0xac>
    e062:	4e87      	ldr	r6, [pc, #540]	; (e280 <__ssvfiscanf_r+0x2e8>)
    e064:	2203      	movs	r2, #3
    e066:	1c30      	adds	r0, r6, #0
    e068:	f7fb fa2a 	bl	94c0 <memchr>
    e06c:	2800      	cmp	r0, #0
    e06e:	d008      	beq.n	e082 <__ssvfiscanf_r+0xea>
    e070:	1b80      	subs	r0, r0, r6
    e072:	2601      	movs	r6, #1
    e074:	4086      	lsls	r6, r0
    e076:	1c30      	adds	r0, r6, #0
    e078:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e07a:	3401      	adds	r4, #1
    e07c:	4318      	orrs	r0, r3
    e07e:	9301      	str	r3, [sp, #4]
    e080:	9045      	str	r0, [sp, #276]	; 0x114
    e082:	1c66      	adds	r6, r4, #1
    e084:	7824      	ldrb	r4, [r4, #0]
    e086:	2c67      	cmp	r4, #103	; 0x67
    e088:	d810      	bhi.n	e0ac <__ssvfiscanf_r+0x114>
    e08a:	2c65      	cmp	r4, #101	; 0x65
    e08c:	d300      	bcc.n	e090 <__ssvfiscanf_r+0xf8>
    e08e:	e084      	b.n	e19a <__ssvfiscanf_r+0x202>
    e090:	2c5b      	cmp	r4, #91	; 0x5b
    e092:	d05a      	beq.n	e14a <__ssvfiscanf_r+0x1b2>
    e094:	d805      	bhi.n	e0a2 <__ssvfiscanf_r+0x10a>
    e096:	2c00      	cmp	r4, #0
    e098:	d100      	bne.n	e09c <__ssvfiscanf_r+0x104>
    e09a:	e0e2      	b.n	e262 <__ssvfiscanf_r+0x2ca>
    e09c:	2c25      	cmp	r4, #37	; 0x25
    e09e:	d018      	beq.n	e0d2 <__ssvfiscanf_r+0x13a>
    e0a0:	e07d      	b.n	e19e <__ssvfiscanf_r+0x206>
    e0a2:	2c63      	cmp	r4, #99	; 0x63
    e0a4:	d05f      	beq.n	e166 <__ssvfiscanf_r+0x1ce>
    e0a6:	2c64      	cmp	r4, #100	; 0x64
    e0a8:	d046      	beq.n	e138 <__ssvfiscanf_r+0x1a0>
    e0aa:	e078      	b.n	e19e <__ssvfiscanf_r+0x206>
    e0ac:	2c70      	cmp	r4, #112	; 0x70
    e0ae:	d034      	beq.n	e11a <__ssvfiscanf_r+0x182>
    e0b0:	d807      	bhi.n	e0c2 <__ssvfiscanf_r+0x12a>
    e0b2:	2c6e      	cmp	r4, #110	; 0x6e
    e0b4:	d05f      	beq.n	e176 <__ssvfiscanf_r+0x1de>
    e0b6:	d841      	bhi.n	e13c <__ssvfiscanf_r+0x1a4>
    e0b8:	2c69      	cmp	r4, #105	; 0x69
    e0ba:	d170      	bne.n	e19e <__ssvfiscanf_r+0x206>
    e0bc:	2300      	movs	r3, #0
    e0be:	9346      	str	r3, [sp, #280]	; 0x118
    e0c0:	e041      	b.n	e146 <__ssvfiscanf_r+0x1ae>
    e0c2:	2c75      	cmp	r4, #117	; 0x75
    e0c4:	d038      	beq.n	e138 <__ssvfiscanf_r+0x1a0>
    e0c6:	2c78      	cmp	r4, #120	; 0x78
    e0c8:	d02d      	beq.n	e126 <__ssvfiscanf_r+0x18e>
    e0ca:	2c73      	cmp	r4, #115	; 0x73
    e0cc:	d167      	bne.n	e19e <__ssvfiscanf_r+0x206>
    e0ce:	2302      	movs	r3, #2
    e0d0:	e047      	b.n	e162 <__ssvfiscanf_r+0x1ca>
    e0d2:	686b      	ldr	r3, [r5, #4]
    e0d4:	2b00      	cmp	r3, #0
    e0d6:	dd0e      	ble.n	e0f6 <__ssvfiscanf_r+0x15e>
    e0d8:	682b      	ldr	r3, [r5, #0]
    e0da:	781a      	ldrb	r2, [r3, #0]
    e0dc:	42a2      	cmp	r2, r4
    e0de:	d000      	beq.n	e0e2 <__ssvfiscanf_r+0x14a>
    e0e0:	e0bd      	b.n	e25e <__ssvfiscanf_r+0x2c6>
    e0e2:	3301      	adds	r3, #1
    e0e4:	686a      	ldr	r2, [r5, #4]
    e0e6:	602b      	str	r3, [r5, #0]
    e0e8:	9b49      	ldr	r3, [sp, #292]	; 0x124
    e0ea:	3a01      	subs	r2, #1
    e0ec:	9301      	str	r3, [sp, #4]
    e0ee:	3301      	adds	r3, #1
    e0f0:	606a      	str	r2, [r5, #4]
    e0f2:	9349      	str	r3, [sp, #292]	; 0x124
    e0f4:	e797      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e0f6:	2186      	movs	r1, #134	; 0x86
    e0f8:	23c0      	movs	r3, #192	; 0xc0
    e0fa:	0049      	lsls	r1, r1, #1
    e0fc:	aa02      	add	r2, sp, #8
    e0fe:	1852      	adds	r2, r2, r1
    e100:	005b      	lsls	r3, r3, #1
    e102:	58d3      	ldr	r3, [r2, r3]
    e104:	1c38      	adds	r0, r7, #0
    e106:	1c29      	adds	r1, r5, #0
    e108:	4798      	blx	r3
    e10a:	2800      	cmp	r0, #0
    e10c:	d0e4      	beq.n	e0d8 <__ssvfiscanf_r+0x140>
    e10e:	9848      	ldr	r0, [sp, #288]	; 0x120
    e110:	2800      	cmp	r0, #0
    e112:	d000      	beq.n	e116 <__ssvfiscanf_r+0x17e>
    e114:	e09f      	b.n	e256 <__ssvfiscanf_r+0x2be>
    e116:	3801      	subs	r0, #1
    e118:	e0a5      	b.n	e266 <__ssvfiscanf_r+0x2ce>
    e11a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e11c:	9301      	str	r3, [sp, #4]
    e11e:	2320      	movs	r3, #32
    e120:	9a01      	ldr	r2, [sp, #4]
    e122:	4313      	orrs	r3, r2
    e124:	9345      	str	r3, [sp, #276]	; 0x114
    e126:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e128:	9301      	str	r3, [sp, #4]
    e12a:	2380      	movs	r3, #128	; 0x80
    e12c:	9a01      	ldr	r2, [sp, #4]
    e12e:	009b      	lsls	r3, r3, #2
    e130:	4313      	orrs	r3, r2
    e132:	9345      	str	r3, [sp, #276]	; 0x114
    e134:	2310      	movs	r3, #16
    e136:	e002      	b.n	e13e <__ssvfiscanf_r+0x1a6>
    e138:	230a      	movs	r3, #10
    e13a:	e000      	b.n	e13e <__ssvfiscanf_r+0x1a6>
    e13c:	2308      	movs	r3, #8
    e13e:	9346      	str	r3, [sp, #280]	; 0x118
    e140:	2304      	movs	r3, #4
    e142:	2c6e      	cmp	r4, #110	; 0x6e
    e144:	dc0d      	bgt.n	e162 <__ssvfiscanf_r+0x1ca>
    e146:	2303      	movs	r3, #3
    e148:	e00b      	b.n	e162 <__ssvfiscanf_r+0x1ca>
    e14a:	1c31      	adds	r1, r6, #0
    e14c:	a805      	add	r0, sp, #20
    e14e:	f7fc fca9 	bl	aaa4 <__sccl>
    e152:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e154:	1c06      	adds	r6, r0, #0
    e156:	9301      	str	r3, [sp, #4]
    e158:	2340      	movs	r3, #64	; 0x40
    e15a:	9a01      	ldr	r2, [sp, #4]
    e15c:	4313      	orrs	r3, r2
    e15e:	9345      	str	r3, [sp, #276]	; 0x114
    e160:	2301      	movs	r3, #1
    e162:	934b      	str	r3, [sp, #300]	; 0x12c
    e164:	e01f      	b.n	e1a6 <__ssvfiscanf_r+0x20e>
    e166:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e168:	9301      	str	r3, [sp, #4]
    e16a:	2340      	movs	r3, #64	; 0x40
    e16c:	9a01      	ldr	r2, [sp, #4]
    e16e:	4313      	orrs	r3, r2
    e170:	9345      	str	r3, [sp, #276]	; 0x114
    e172:	2300      	movs	r3, #0
    e174:	e7f5      	b.n	e162 <__ssvfiscanf_r+0x1ca>
    e176:	9945      	ldr	r1, [sp, #276]	; 0x114
    e178:	06cb      	lsls	r3, r1, #27
    e17a:	d500      	bpl.n	e17e <__ssvfiscanf_r+0x1e6>
    e17c:	e753      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e17e:	9b03      	ldr	r3, [sp, #12]
    e180:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e182:	07c8      	lsls	r0, r1, #31
    e184:	d504      	bpl.n	e190 <__ssvfiscanf_r+0x1f8>
    e186:	1d19      	adds	r1, r3, #4
    e188:	9103      	str	r1, [sp, #12]
    e18a:	681b      	ldr	r3, [r3, #0]
    e18c:	801a      	strh	r2, [r3, #0]
    e18e:	e74a      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e190:	1d19      	adds	r1, r3, #4
    e192:	9103      	str	r1, [sp, #12]
    e194:	681b      	ldr	r3, [r3, #0]
    e196:	601a      	str	r2, [r3, #0]
    e198:	e745      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e19a:	2305      	movs	r3, #5
    e19c:	e7e1      	b.n	e162 <__ssvfiscanf_r+0x1ca>
    e19e:	2303      	movs	r3, #3
    e1a0:	934b      	str	r3, [sp, #300]	; 0x12c
    e1a2:	3307      	adds	r3, #7
    e1a4:	9346      	str	r3, [sp, #280]	; 0x118
    e1a6:	686b      	ldr	r3, [r5, #4]
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	dd04      	ble.n	e1b6 <__ssvfiscanf_r+0x21e>
    e1ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
    e1ae:	9301      	str	r3, [sp, #4]
    e1b0:	065b      	lsls	r3, r3, #25
    e1b2:	d518      	bpl.n	e1e6 <__ssvfiscanf_r+0x24e>
    e1b4:	e01f      	b.n	e1f6 <__ssvfiscanf_r+0x25e>
    e1b6:	2186      	movs	r1, #134	; 0x86
    e1b8:	23c0      	movs	r3, #192	; 0xc0
    e1ba:	0049      	lsls	r1, r1, #1
    e1bc:	aa02      	add	r2, sp, #8
    e1be:	1852      	adds	r2, r2, r1
    e1c0:	005b      	lsls	r3, r3, #1
    e1c2:	58d3      	ldr	r3, [r2, r3]
    e1c4:	1c38      	adds	r0, r7, #0
    e1c6:	1c29      	adds	r1, r5, #0
    e1c8:	4798      	blx	r3
    e1ca:	2800      	cmp	r0, #0
    e1cc:	d0ee      	beq.n	e1ac <__ssvfiscanf_r+0x214>
    e1ce:	e79e      	b.n	e10e <__ssvfiscanf_r+0x176>
    e1d0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    e1d2:	9201      	str	r2, [sp, #4]
    e1d4:	3201      	adds	r2, #1
    e1d6:	9249      	str	r2, [sp, #292]	; 0x124
    e1d8:	686a      	ldr	r2, [r5, #4]
    e1da:	3a01      	subs	r2, #1
    e1dc:	606a      	str	r2, [r5, #4]
    e1de:	2a00      	cmp	r2, #0
    e1e0:	dd13      	ble.n	e20a <__ssvfiscanf_r+0x272>
    e1e2:	3301      	adds	r3, #1
    e1e4:	602b      	str	r3, [r5, #0]
    e1e6:	682b      	ldr	r3, [r5, #0]
    e1e8:	4924      	ldr	r1, [pc, #144]	; (e27c <__ssvfiscanf_r+0x2e4>)
    e1ea:	781a      	ldrb	r2, [r3, #0]
    e1ec:	6809      	ldr	r1, [r1, #0]
    e1ee:	188a      	adds	r2, r1, r2
    e1f0:	7852      	ldrb	r2, [r2, #1]
    e1f2:	0712      	lsls	r2, r2, #28
    e1f4:	d4ec      	bmi.n	e1d0 <__ssvfiscanf_r+0x238>
    e1f6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    e1f8:	2b02      	cmp	r3, #2
    e1fa:	dc13      	bgt.n	e224 <__ssvfiscanf_r+0x28c>
    e1fc:	1c38      	adds	r0, r7, #0
    e1fe:	a945      	add	r1, sp, #276	; 0x114
    e200:	1c2a      	adds	r2, r5, #0
    e202:	ab03      	add	r3, sp, #12
    e204:	f7fc f9a0 	bl	a548 <_scanf_chars>
    e208:	e01f      	b.n	e24a <__ssvfiscanf_r+0x2b2>
    e20a:	2186      	movs	r1, #134	; 0x86
    e20c:	23c0      	movs	r3, #192	; 0xc0
    e20e:	0049      	lsls	r1, r1, #1
    e210:	aa02      	add	r2, sp, #8
    e212:	1852      	adds	r2, r2, r1
    e214:	005b      	lsls	r3, r3, #1
    e216:	58d3      	ldr	r3, [r2, r3]
    e218:	1c38      	adds	r0, r7, #0
    e21a:	1c29      	adds	r1, r5, #0
    e21c:	4798      	blx	r3
    e21e:	2800      	cmp	r0, #0
    e220:	d0e1      	beq.n	e1e6 <__ssvfiscanf_r+0x24e>
    e222:	e774      	b.n	e10e <__ssvfiscanf_r+0x176>
    e224:	2b04      	cmp	r3, #4
    e226:	dc06      	bgt.n	e236 <__ssvfiscanf_r+0x29e>
    e228:	1c38      	adds	r0, r7, #0
    e22a:	a945      	add	r1, sp, #276	; 0x114
    e22c:	1c2a      	adds	r2, r5, #0
    e22e:	ab03      	add	r3, sp, #12
    e230:	f7fc f9e8 	bl	a604 <_scanf_i>
    e234:	e009      	b.n	e24a <__ssvfiscanf_r+0x2b2>
    e236:	4b13      	ldr	r3, [pc, #76]	; (e284 <__ssvfiscanf_r+0x2ec>)
    e238:	2b00      	cmp	r3, #0
    e23a:	d100      	bne.n	e23e <__ssvfiscanf_r+0x2a6>
    e23c:	e6f3      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e23e:	1c38      	adds	r0, r7, #0
    e240:	a945      	add	r1, sp, #276	; 0x114
    e242:	1c2a      	adds	r2, r5, #0
    e244:	ab03      	add	r3, sp, #12
    e246:	f7fb ff95 	bl	a174 <_scanf_float>
    e24a:	2801      	cmp	r0, #1
    e24c:	d007      	beq.n	e25e <__ssvfiscanf_r+0x2c6>
    e24e:	2802      	cmp	r0, #2
    e250:	d000      	beq.n	e254 <__ssvfiscanf_r+0x2bc>
    e252:	e6e8      	b.n	e026 <__ssvfiscanf_r+0x8e>
    e254:	e75b      	b.n	e10e <__ssvfiscanf_r+0x176>
    e256:	89ab      	ldrh	r3, [r5, #12]
    e258:	065b      	lsls	r3, r3, #25
    e25a:	d504      	bpl.n	e266 <__ssvfiscanf_r+0x2ce>
    e25c:	e001      	b.n	e262 <__ssvfiscanf_r+0x2ca>
    e25e:	9848      	ldr	r0, [sp, #288]	; 0x120
    e260:	e001      	b.n	e266 <__ssvfiscanf_r+0x2ce>
    e262:	2001      	movs	r0, #1
    e264:	4240      	negs	r0, r0
    e266:	23a7      	movs	r3, #167	; 0xa7
    e268:	009b      	lsls	r3, r3, #2
    e26a:	449d      	add	sp, r3
    e26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e26e:	46c0      	nop			; (mov r8, r8)
    e270:	fffffd64 	.word	0xfffffd64
    e274:	0000dee1 	.word	0x0000dee1
    e278:	0000df5b 	.word	0x0000df5b
    e27c:	20000138 	.word	0x20000138
    e280:	0000f31e 	.word	0x0000f31e
    e284:	0000a175 	.word	0x0000a175

0000e288 <_read_r>:
    e288:	b538      	push	{r3, r4, r5, lr}
    e28a:	1c05      	adds	r5, r0, #0
    e28c:	2000      	movs	r0, #0
    e28e:	4c07      	ldr	r4, [pc, #28]	; (e2ac <_read_r+0x24>)
    e290:	6020      	str	r0, [r4, #0]
    e292:	1c08      	adds	r0, r1, #0
    e294:	1c11      	adds	r1, r2, #0
    e296:	1c1a      	adds	r2, r3, #0
    e298:	f7f5 fe36 	bl	3f08 <_read>
    e29c:	1c43      	adds	r3, r0, #1
    e29e:	d103      	bne.n	e2a8 <_read_r+0x20>
    e2a0:	6823      	ldr	r3, [r4, #0]
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d000      	beq.n	e2a8 <_read_r+0x20>
    e2a6:	602b      	str	r3, [r5, #0]
    e2a8:	bd38      	pop	{r3, r4, r5, pc}
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	2000445c 	.word	0x2000445c

0000e2b0 <_malloc_usable_size_r>:
    e2b0:	1f0b      	subs	r3, r1, #4
    e2b2:	681a      	ldr	r2, [r3, #0]
    e2b4:	1f10      	subs	r0, r2, #4
    e2b6:	2a00      	cmp	r2, #0
    e2b8:	da04      	bge.n	e2c4 <_malloc_usable_size_r+0x14>
    e2ba:	1889      	adds	r1, r1, r2
    e2bc:	3904      	subs	r1, #4
    e2be:	680b      	ldr	r3, [r1, #0]
    e2c0:	18d0      	adds	r0, r2, r3
    e2c2:	3804      	subs	r0, #4
    e2c4:	4770      	bx	lr
	...

0000e2c8 <_getpid>:
    e2c8:	2258      	movs	r2, #88	; 0x58
    e2ca:	2001      	movs	r0, #1
    e2cc:	4b01      	ldr	r3, [pc, #4]	; (e2d4 <_getpid+0xc>)
    e2ce:	4240      	negs	r0, r0
    e2d0:	601a      	str	r2, [r3, #0]
    e2d2:	4770      	bx	lr
    e2d4:	2000445c 	.word	0x2000445c

0000e2d8 <_kill>:
    e2d8:	2258      	movs	r2, #88	; 0x58
    e2da:	2001      	movs	r0, #1
    e2dc:	4b01      	ldr	r3, [pc, #4]	; (e2e4 <_kill+0xc>)
    e2de:	4240      	negs	r0, r0
    e2e0:	601a      	str	r2, [r3, #0]
    e2e2:	4770      	bx	lr
    e2e4:	2000445c 	.word	0x2000445c

0000e2e8 <__gnu_thumb1_case_uqi>:
    e2e8:	b402      	push	{r1}
    e2ea:	4671      	mov	r1, lr
    e2ec:	0849      	lsrs	r1, r1, #1
    e2ee:	0049      	lsls	r1, r1, #1
    e2f0:	5c09      	ldrb	r1, [r1, r0]
    e2f2:	0049      	lsls	r1, r1, #1
    e2f4:	448e      	add	lr, r1
    e2f6:	bc02      	pop	{r1}
    e2f8:	4770      	bx	lr
    e2fa:	46c0      	nop			; (mov r8, r8)
    e2fc:	0000018e 	.word	0x0000018e
    e300:	0000018e 	.word	0x0000018e
    e304:	0000017c 	.word	0x0000017c
    e308:	0000017c 	.word	0x0000017c
    e30c:	0000018e 	.word	0x0000018e
    e310:	0000018e 	.word	0x0000018e
    e314:	0000018e 	.word	0x0000018e
    e318:	0000018e 	.word	0x0000018e
    e31c:	0000018e 	.word	0x0000018e
    e320:	0000018e 	.word	0x0000018e
    e324:	0000018e 	.word	0x0000018e
    e328:	0000018e 	.word	0x0000018e
    e32c:	0000018e 	.word	0x0000018e
    e330:	0000018e 	.word	0x0000018e
    e334:	0000018e 	.word	0x0000018e
    e338:	0000018e 	.word	0x0000018e
    e33c:	0000017c 	.word	0x0000017c
    e340:	0000017c 	.word	0x0000017c
    e344:	0000018e 	.word	0x0000018e
    e348:	0000017c 	.word	0x0000017c
    e34c:	666e6f63 	.word	0x666e6f63
    e350:	48206769 	.word	0x48206769
    e354:	0d20494d 	.word	0x0d20494d
    e358:	0000000a 	.word	0x0000000a
    e35c:	2d6a626f 	.word	0x2d6a626f
    e360:	6e69703e 	.word	0x6e69703e
    e364:	203d2120 	.word	0x203d2120
    e368:	6e695028 	.word	0x6e695028
    e36c:	656d614e 	.word	0x656d614e
    e370:	00434e29 	.word	0x00434e29
    e374:	2e2f2e2e 	.word	0x2e2f2e2e
    e378:	65626d2f 	.word	0x65626d2f
    e37c:	41542f64 	.word	0x41542f64
    e380:	54454752 	.word	0x54454752
    e384:	4d41535f 	.word	0x4d41535f
    e388:	47313252 	.word	0x47313252
    e38c:	2f413831 	.word	0x2f413831
    e390:	47524154 	.word	0x47524154
    e394:	415f5445 	.word	0x415f5445
    e398:	6c656d74 	.word	0x6c656d74
    e39c:	5241542f 	.word	0x5241542f
    e3a0:	5f544547 	.word	0x5f544547
    e3a4:	5f4d4153 	.word	0x5f4d4153
    e3a8:	74726f43 	.word	0x74726f43
    e3ac:	304d7865 	.word	0x304d7865
    e3b0:	70672f50 	.word	0x70672f50
    e3b4:	6f5f6f69 	.word	0x6f5f6f69
    e3b8:	63656a62 	.word	0x63656a62
    e3bc:	00682e74 	.word	0x00682e74
    e3c0:	65746e69 	.word	0x65746e69
    e3c4:	6c616e72 	.word	0x6c616e72
    e3c8:	6f6c6320 	.word	0x6f6c6320
    e3cc:	63206b63 	.word	0x63206b63
    e3d0:	69666e6f 	.word	0x69666e6f
    e3d4:	000a0d67 	.word	0x000a0d67
    e3d8:	666e6f63 	.word	0x666e6f63
    e3dc:	70206669 	.word	0x70206669
    e3e0:	0a0d7370 	.word	0x0a0d7370
    e3e4:	00000000 	.word	0x00000000
    e3e8:	666f5309 	.word	0x666f5309
    e3ec:	72617774 	.word	0x72617774
    e3f0:	6f432065 	.word	0x6f432065
    e3f4:	63657272 	.word	0x63657272
    e3f8:	6e6f6974 	.word	0x6e6f6974
    e3fc:	00000020 	.word	0x00000020
    e400:	70750909 	.word	0x70750909
    e404:	65746164 	.word	0x65746164
    e408:	6d697420 	.word	0x6d697420
    e40c:	6f632065 	.word	0x6f632065
    e410:	203a7272 	.word	0x203a7272
    e414:	25286425 	.word	0x25286425
    e418:	73202964 	.word	0x73202964
    e41c:	206e6769 	.word	0x206e6769
    e420:	6425203a 	.word	0x6425203a
    e424:	74697720 	.word	0x74697720
    e428:	64252068 	.word	0x64252068
    e42c:	6d617320 	.word	0x6d617320
    e430:	00656c70 	.word	0x00656c70
    e434:	646e6509 	.word	0x646e6509
    e438:	666f5320 	.word	0x666f5320
    e43c:	72617774 	.word	0x72617774
    e440:	6f632065 	.word	0x6f632065
    e444:	63657272 	.word	0x63657272
    e448:	6e6f6974 	.word	0x6e6f6974
    e44c:	00000000 	.word	0x00000000
    e450:	72614809 	.word	0x72614809
    e454:	72617764 	.word	0x72617764
    e458:	6f632065 	.word	0x6f632065
    e45c:	63657272 	.word	0x63657272
    e460:	6e6f6974 	.word	0x6e6f6974
    e464:	00000000 	.word	0x00000000
    e468:	62460909 	.word	0x62460909
    e46c:	3a747365 	.word	0x3a747365
    e470:	20752520 	.word	0x20752520
    e474:	202c7a48 	.word	0x202c7a48
    e478:	65737546 	.word	0x65737546
    e47c:	7525203d 	.word	0x7525203d
    e480:	207a4820 	.word	0x207a4820
    e484:	6e756f63 	.word	0x6e756f63
    e488:	64253d74 	.word	0x64253d74
    e48c:	00000000 	.word	0x00000000
    e490:	646e6509 	.word	0x646e6509
    e494:	726f6320 	.word	0x726f6320
    e498:	74636572 	.word	0x74636572
    e49c:	006e6f69 	.word	0x006e6f69
    e4a0:	20756c25 	.word	0x20756c25
    e4a4:	75252c73 	.word	0x75252c73
    e4a8:	00000a0d 	.word	0x00000a0d
    e4ac:	756c252d 	.word	0x756c252d
    e4b0:	252c7320 	.word	0x252c7320
    e4b4:	000a0d75 	.word	0x000a0d75
    e4b8:	70750909 	.word	0x70750909
    e4bc:	65746164 	.word	0x65746164
    e4c0:	6f6c6320 	.word	0x6f6c6320
    e4c4:	6f206b63 	.word	0x6f206b63
    e4c8:	65736666 	.word	0x65736666
    e4cc:	2b203a74 	.word	0x2b203a74
    e4d0:	73756c25 	.word	0x73756c25
    e4d4:	646c252c 	.word	0x646c252c
    e4d8:	6c252b5b 	.word	0x6c252b5b
    e4dc:	252c7375 	.word	0x252c7375
    e4e0:	6d20756c 	.word	0x6d20756c
    e4e4:	257e2c73 	.word	0x257e2c73
    e4e8:	7520756c 	.word	0x7520756c
    e4ec:	74095d73 	.word	0x74095d73
    e4f0:	6c25203a 	.word	0x6c25203a
    e4f4:	6c252c75 	.word	0x6c252c75
    e4f8:	00000075 	.word	0x00000075
    e4fc:	70750909 	.word	0x70750909
    e500:	65746164 	.word	0x65746164
    e504:	6f6c6320 	.word	0x6f6c6320
    e508:	6f206b63 	.word	0x6f206b63
    e50c:	65736666 	.word	0x65736666
    e510:	2d203a74 	.word	0x2d203a74
    e514:	73756c25 	.word	0x73756c25
    e518:	646c252c 	.word	0x646c252c
    e51c:	6c252d5b 	.word	0x6c252d5b
    e520:	252c7375 	.word	0x252c7375
    e524:	736d756c 	.word	0x736d756c
    e528:	6c257e2c 	.word	0x6c257e2c
    e52c:	73752075 	.word	0x73752075
    e530:	3a74095d 	.word	0x3a74095d
    e534:	756c2520 	.word	0x756c2520
    e538:	756c252c 	.word	0x756c252c
    e53c:	00000000 	.word	0x00000000
    e540:	6b636170 	.word	0x6b636170
    e544:	69537465 	.word	0x69537465
    e548:	253a657a 	.word	0x253a657a
    e54c:	000a0d64 	.word	0x000a0d64
    e550:	25202b74 	.word	0x25202b74
    e554:	78253a64 	.word	0x78253a64
    e558:	00000a0d 	.word	0x00000a0d
    e55c:	6c656409 	.word	0x6c656409
    e560:	72207961 	.word	0x72207961
    e564:	65757165 	.word	0x65757165
    e568:	72207473 	.word	0x72207473
    e56c:	69656365 	.word	0x69656365
    e570:	00006576 	.word	0x00006576
    e574:	72724509 	.word	0x72724509
    e578:	20727565 	.word	0x20727565
    e57c:	65707974 	.word	0x65707974
    e580:	6b6e7520 	.word	0x6b6e7520
    e584:	00776f6e 	.word	0x00776f6e
    e588:	6e6f7277 	.word	0x6e6f7277
    e58c:	79742067 	.word	0x79742067
    e590:	00006570 	.word	0x00006570
    e594:	6f727265 	.word	0x6f727265
    e598:	52432072 	.word	0x52432072
    e59c:	21212143 	.word	0x21212143
    e5a0:	21212121 	.word	0x21212121
    e5a4:	21212121 	.word	0x21212121
    e5a8:	21212121 	.word	0x21212121
    e5ac:	21212121 	.word	0x21212121
    e5b0:	21212121 	.word	0x21212121
    e5b4:	21212121 	.word	0x21212121
    e5b8:	00000a0d 	.word	0x00000a0d
    e5bc:	676e656c 	.word	0x676e656c
    e5c0:	25206874 	.word	0x25206874
    e5c4:	000a0d64 	.word	0x000a0d64
    e5c8:	66667562 	.word	0x66667562
    e5cc:	25207265 	.word	0x25207265
    e5d0:	25203a64 	.word	0x25203a64
    e5d4:	000a0d78 	.word	0x000a0d78
    e5d8:	6e797309 	.word	0x6e797309
    e5dc:	65732063 	.word	0x65732063
    e5e0:	0000646e 	.word	0x0000646e
    e5e4:	6c656409 	.word	0x6c656409
    e5e8:	72207961 	.word	0x72207961
    e5ec:	6f707365 	.word	0x6f707365
    e5f0:	2065736e 	.word	0x2065736e
    e5f4:	646e6573 	.word	0x646e6573
    e5f8:	64692820 	.word	0x64692820
    e5fc:	6425203a 	.word	0x6425203a
    e600:	00000029 	.word	0x00000029
    e604:	54494d48 	.word	0x54494d48
    e608:	006b7361 	.word	0x006b7361
    e60c:	72616d53 	.word	0x72616d53
    e610:	74654d74 	.word	0x74654d74
    e614:	61547265 	.word	0x61547265
    e618:	00006b73 	.word	0x00006b73
    e61c:	656d6974 	.word	0x656d6974
    e620:	00000000 	.word	0x00000000
    e624:	454c4449 	.word	0x454c4449
    e628:	00000000 	.word	0x00000000
    e62c:	0a0d0a0d 	.word	0x0a0d0a0d
    e630:	2a2a2a2a 	.word	0x2a2a2a2a
    e634:	2a2a2a2a 	.word	0x2a2a2a2a
    e638:	2a2a2a2a 	.word	0x2a2a2a2a
    e63c:	2a2a2a2a 	.word	0x2a2a2a2a
    e640:	2a2a2a2a 	.word	0x2a2a2a2a
    e644:	2a2a2a2a 	.word	0x2a2a2a2a
    e648:	2a2a2a2a 	.word	0x2a2a2a2a
    e64c:	2a2a2a2a 	.word	0x2a2a2a2a
    e650:	2a2a2a2a 	.word	0x2a2a2a2a
    e654:	2a2a2a2a 	.word	0x2a2a2a2a
    e658:	2a2a2a2a 	.word	0x2a2a2a2a
    e65c:	2a2a2a2a 	.word	0x2a2a2a2a
    e660:	2a2a2a2a 	.word	0x2a2a2a2a
    e664:	2a2a2a2a 	.word	0x2a2a2a2a
    e668:	2a2a2a2a 	.word	0x2a2a2a2a
    e66c:	2a2a2a2a 	.word	0x2a2a2a2a
    e670:	2a2a2a2a 	.word	0x2a2a2a2a
    e674:	0a0d2a2a 	.word	0x0a0d2a2a
    e678:	00000000 	.word	0x00000000
    e67c:	6b636974 	.word	0x6b636974
    e680:	6d697420 	.word	0x6d697420
    e684:	25203a65 	.word	0x25203a65
    e688:	6d20756c 	.word	0x6d20756c
    e68c:	000a0d73 	.word	0x000a0d73
    e690:	7473614d 	.word	0x7473614d
    e694:	63207265 	.word	0x63207265
    e698:	6b636f6c 	.word	0x6b636f6c
    e69c:	00000a0d 	.word	0x00000a0d
    e6a0:	20646e65 	.word	0x20646e65
    e6a4:	666e6f63 	.word	0x666e6f63
    e6a8:	61206769 	.word	0x61206769
    e6ac:	696c7070 	.word	0x696c7070
    e6b0:	69746163 	.word	0x69746163
    e6b4:	62206e6f 	.word	0x62206e6f
    e6b8:	6e696765 	.word	0x6e696765
    e6bc:	00000a0d 	.word	0x00000a0d
    e6c0:	2a2a0a0d 	.word	0x2a2a0a0d
    e6c4:	2a2a2a2a 	.word	0x2a2a2a2a
    e6c8:	2a2a2a2a 	.word	0x2a2a2a2a
    e6cc:	2a2a2a2a 	.word	0x2a2a2a2a
    e6d0:	2a2a2a2a 	.word	0x2a2a2a2a
    e6d4:	2a2a2a2a 	.word	0x2a2a2a2a
    e6d8:	2a2a2a2a 	.word	0x2a2a2a2a
    e6dc:	2a2a2a2a 	.word	0x2a2a2a2a
    e6e0:	2a2a2a2a 	.word	0x2a2a2a2a
    e6e4:	2a2a2a2a 	.word	0x2a2a2a2a
    e6e8:	2a2a2a2a 	.word	0x2a2a2a2a
    e6ec:	2a2a2a2a 	.word	0x2a2a2a2a
    e6f0:	2a2a2a2a 	.word	0x2a2a2a2a
    e6f4:	2a2a2a2a 	.word	0x2a2a2a2a
    e6f8:	2a2a2a2a 	.word	0x2a2a2a2a
    e6fc:	2a2a2a2a 	.word	0x2a2a2a2a
    e700:	2a2a2a2a 	.word	0x2a2a2a2a
    e704:	2a2a2a2a 	.word	0x2a2a2a2a
    e708:	0a0d0a0d 	.word	0x0a0d0a0d
    e70c:	00000000 	.word	0x00000000
    e710:	70617274 	.word	0x70617274
    e714:	21212121 	.word	0x21212121
    e718:	21212121 	.word	0x21212121
    e71c:	21212121 	.word	0x21212121
    e720:	21212121 	.word	0x21212121
    e724:	21212121 	.word	0x21212121
    e728:	21212121 	.word	0x21212121
    e72c:	21212121 	.word	0x21212121
    e730:	21212121 	.word	0x21212121
    e734:	21212121 	.word	0x21212121
    e738:	21212121 	.word	0x21212121
    e73c:	0a0d2121 	.word	0x0a0d2121
    e740:	00000000 	.word	0x00000000
    e744:	000030c0 	.word	0x000030c0
    e748:	000030e0 	.word	0x000030e0
    e74c:	000030d0 	.word	0x000030d0
    e750:	00003100 	.word	0x00003100
    e754:	000030f0 	.word	0x000030f0
    e758:	00003110 	.word	0x00003110
    e75c:	00003306 	.word	0x00003306
    e760:	000033ce 	.word	0x000033ce
    e764:	00003328 	.word	0x00003328
    e768:	0000336e 	.word	0x0000336e
    e76c:	00003350 	.word	0x00003350
    e770:	00003378 	.word	0x00003378
    e774:	0000338c 	.word	0x0000338c
    e778:	000033a0 	.word	0x000033a0
    e77c:	000033c0 	.word	0x000033c0

0000e780 <_ZZN8cMxRadio15radio_set_paramE17radio_attribute_t13radio_param_tE8pwrtable>:
    e780:	0f0f0f0f 0e0e0e0f 0c0c0d0d 08090a0b     ................
    e790:	02040607 00000000                       ........

0000e798 <_ZTV12ChannelRadio>:
	...
    e7a0:	00003705 00003721 0000373d 00003689     .7..!7..=7...6..
    e7b0:	00003685 000037ed 00003779 000036c1     .6...7..y7...6..
    e7c0:	000036d5 000036ed                       .6...6..

0000e7c8 <_ZTV13ChannelSerial>:
	...
    e7d0:	00003961 00003995 000039b1 000039c1     a9...9...9...9..
    e7e0:	000039d1 00000052                       .9..R...

0000e7e8 <_ZTV5Relay>:
	...
    e7f0:	00003a49 00003c09 00003a4d 00003a3d     I:...<..M:..=:..
    e800:	00003a41 00003a45                       A:..E:..

0000e808 <_ZTV20RelayBufferedTaskCLP>:
	...
    e810:	00003c19 00003c1d 00003b09 00003a3d     .<...<...;..=:..
    e820:	00003a41 00003a45 00003aad 00003b01     A:..E:...:...;..

0000e830 <_ZTV13RelayBuffered>:
	...
    e838:	00003c05 00003c2d 00003a69 00003a3d     .<..-<..i:..=:..
    e848:	00003a41 00003a45 00003aad 00003b01     A:..E:...:...;..

0000e858 <__stdin_name>:
    e858:	6474732f 00006e69                       /stdin..

0000e860 <__stderr_name>:
    e860:	6474732f 00727265                       /stderr.

0000e868 <__stdout_name>:
    e868:	6474732f 0074756f                       /stdout.

0000e870 <_ZTVN4mbed10FileHandleE>:
	...
    e878:	00003fc1 00003fc1 00003fc1 00003fc1     .?...?...?...?..
    e888:	00003fc1 00003fc1 00003d15 00000000     .?...?...=......
    e898:	00000000 0070253a 65637845 6f697470     ....:%p.Exceptio
    e8a8:	0000006e                                n...

0000e8ac <CSWTCH.41>:
    e8ac:	00100000 00200000 00300000 006a626f     ...... ...0.obj.
    e8bc:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    e8cc:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    e8dc:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    e8ec:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    e8fc:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    e90c:	6f435f4d 78657472 5c50304d 69726573     M_CortexM0P\seri
    e91c:	615f6c61 632e6970 00000000 75616228     al_api.c....(bau
    e92c:	74617264 3d3d2065 30313120 7c7c2029     drate == 110) ||
    e93c:	61622820 61726475 3d206574 3531203d      (baudrate == 15
    e94c:	7c202930 6228207c 72647561 20657461     0) || (baudrate 
    e95c:	33203d3d 20293030 28207c7c 64756162     == 300) || (baud
    e96c:	65746172 203d3d20 30303231 7c7c2029     rate == 1200) ||
    e97c:	61622820 61726475 3d206574 3432203d      (baudrate == 24
    e98c:	20293030 28207c7c 64756162 65746172     00) || (baudrate
    e99c:	203d3d20 30303834 7c7c2029 61622820      == 4800) || (ba
    e9ac:	61726475 3d206574 3639203d 20293030     udrate == 9600) 
    e9bc:	28207c7c 64756162 65746172 203d3d20     || (baudrate == 
    e9cc:	30323931 7c202930 6228207c 72647561     19200) || (baudr
    e9dc:	20657461 33203d3d 30303438 7c7c2029     ate == 38400) ||
    e9ec:	61622820 61726475 3d206574 3735203d      (baudrate == 57
    e9fc:	29303036 207c7c20 75616228 74617264     600) || (baudrat
    ea0c:	3d3d2065 35313120 29303032 207c7c20     e == 115200) || 
    ea1c:	75616228 74617264 3d3d2065 30333220     (baudrate == 230
    ea2c:	29303034 207c7c20 75616228 74617264     400) || (baudrat
    ea3c:	3d3d2065 30363420 29303038 207c7c20     e == 460800) || 
    ea4c:	75616228 74617264 3d3d2065 31323920     (baudrate == 921
    ea5c:	29303036 00000000 6f747328 69625f70     600)....(stop_bi
    ea6c:	3d207374 2931203d 207c7c20 6f747328     ts == 1) || (sto
    ea7c:	69625f70 3d207374 2932203d 00000000     p_bits == 2)....
    ea8c:	72617028 20797469 50203d3d 74697261     (parity == Parit
    ea9c:	6e6f4e79 7c202965 7028207c 74697261     yNone) || (parit
    eaac:	3d3d2079 72615020 4f797469 20296464     y == ParityOdd) 
    eabc:	28207c7c 69726170 3d207974 6150203d     || (parity == Pa
    eacc:	79746972 6e657645 00000029 74616428     rityEven)...(dat
    eadc:	69625f61 3d207374 2935203d 207c7c20     a_bits == 5) || 
    eaec:	74616428 69625f61 3d207374 2936203d     (data_bits == 6)
    eafc:	207c7c20 74616428 69625f61 3d207374      || (data_bits =
    eb0c:	2937203d 207c7c20 74616428 69625f61     = 7) || (data_bi
    eb1c:	3d207374 2938203d 00000000 21207874     ts == 8)....tx !
    eb2c:	7628203d 2a64696f 00003029 74646977     = (void*)0..widt
    eb3c:	3d3d2068 00003820 21207872 7628203d     h == 8..rx != (v
    eb4c:	2a64696f 00003029 00000000              oid*)0......

0000eb58 <_ZTVN4mbed3SPIE>:
	...
    eb60:	000050c1 00004f51 00004f81 00000000     .P..QO...O......

0000eb70 <_ZTVN4mbed6SerialE>:
	...
    eb78:	000004d5 000005e1 000050d5 000050ed     .........P...P..
    eb88:	ffffff24 00000000 00005265 00005261     $.......eR..aR..
    eb98:	00005291 000052c1 000052bd 000052c5     .R...R...R...R..
    eba8:	000052c9 000004fd 00000615 000050f5     .R...........P..
    ebb8:	000050dd ffffff20 00000000 0000050d     .P.. ...........
    ebc8:	00000625 00000000                       %.......

0000ebd0 <_ZTVN4mbed10SerialBaseE>:
	...
    ebd8:	000004d1 0000051d                       ........

0000ebe0 <_ZTVN4mbed6StreamE>:
	...
    ebe8:	00005265 00005261 00005291 000052c1     eR..aR...R...R..
    ebf8:	000052bd 000052c5 000052c9 00000000     .R...R...R......
    ec08:	00000000 00003fc1 00003fc1 fffffffc     .....?...?......
	...
    ec24:	00002b77 6465626d 73736120 61747265     w+..mbed asserta
    ec34:	6e6f6974 69616620 3a64656c 2c732520     tion failed: %s,
    ec44:	6c696620 25203a65 6c202c73 20656e69      file: %s, line 
    ec54:	0a206425 00000000 4a5c3a43 696b6e65     %d .....C:\Jenki
    ec64:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    ec74:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    ec84:	622e5c79 646c6975 65626d5c 41545c64     y\.build\mbed\TA
    ec94:	54454752 4d41535f 47313252 5c413831     RGET_SAMR21G18A\
    eca4:	47524154 415f5445 6c656d74 5241545c     TARGET_Atmel\TAR
    ecb4:	5f544547 5f4d4153 74726f43 304d7865     GET_SAM_CortexM0
    ecc4:	70672f50 6f5f6f69 63656a62 00682e74     P/gpio_object.h.
    ecd4:	6c756f63 6f6e2064 69702074 74756f6e     could not pinout
    ece4:	00000000 6d6e6970 6d207061 6d2d7369     ....pinmap mis-m
    ecf4:	68637461 00000000 6d6e6970 6e207061     atch....pinmap n
    ed04:	6620746f 646e756f 726f6620 72657020     ot found for per
    ed14:	65687069 006c6172 6d6e6970 6e207061     ipheral.pinmap n
    ed24:	6620746f 646e756f 726f6620 6e756620     ot found for fun
    ed34:	6f697463 0000006e                       ction...

0000ed3c <PinMap_SERCOM_PADEx>:
    ed3c:	00000008 00000002 00000003 00000009     ................
    ed4c:	00000012 00000003 00000010 00000003     ................
    ed5c:	00000003 00000011 00000013 00000003     ................
    ed6c:	00000012 00000023 00000003 00000013     ....#...........
    ed7c:	00000033 00000003 00000016 00000005     3...............
    ed8c:	00000003 00000017 00000015 00000003     ................
    ed9c:	00000018 00000025 00000003 00000019     ....%...........
    edac:	00000035 00000003 000000ff ffffffff     5...............
    edbc:	ffffffff                                ....

0000edc0 <PinMap_SERCOM_PAD>:
    edc0:	00000000 00000001 00000003 00000001     ................
    edd0:	00000011 00000003 00000004 00000000     ................
    ede0:	00000003 00000005 00000010 00000003     ................
    edf0:	00000006 00000020 00000003 00000007     .... ...........
    ee00:	00000030 00000003 00000008 00000000     0...............
    ee10:	00000002 00000009 00000010 00000002     ................
    ee20:	0000000c 00000002 00000002 0000000d     ................
    ee30:	00000012 00000002 0000000e 00000022     ............"...
    ee40:	00000002 0000000f 00000032 00000002     ........2.......
    ee50:	00000010 00000001 00000002 00000011     ................
    ee60:	00000011 00000002 00000012 00000021     ............!...
    ee70:	00000002 00000013 00000031 00000002     ........1.......
    ee80:	00000016 00000003 00000002 00000017     ................
    ee90:	00000013 00000002 00000018 00000023     ............#...
    eea0:	00000002 00000019 00000033 00000002     ........3.......
    eeb0:	0000001b 00000003 00000005 0000001c     ................
    eec0:	00000013 00000005 0000001e 00000021     ............!...
    eed0:	00000003 0000001f 00000031 00000003     ........1.......
    eee0:	00000022 00000005 00000003 00000023     "...........#...
    eef0:	00000015 00000003 00000036 00000025     ........6...%...
    ef00:	00000003 00000037 00000035 00000003     ....7...5.......
    ef10:	0000003e 00000024 00000005 0000003f     >...$.......?...
    ef20:	00000014 00000005 00000052 00000034     ........R...4...
    ef30:	00000005 00000053 00000004 00000005     ....S...........
    ef40:	000000ff ffffffff ffffffff 42000800     ...............B
    ef50:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    ef60:	42001c00 00005700 00005718 00005718     ...B.W...W...W..
    ef70:	000056c6 000056c6 000056cc 000056d2     .V...V...V...V..
    ef80:	000056e2 00005706 000057bc 000057ca     .V...W...W...W..
    ef90:	000057ca 0000574e 00005752 00005760     .W..NW..RW..`W..
    efa0:	0000576e 0000577c 000057ac 206e6970     nW..|W...W..pin 
    efb0:	28203d21 4e6e6950 29656d61 0000434e     != (PinName)NC..
    efc0:	4a5c3a43 696b6e65 775c736e 736b726f     C:\Jenkins\works
    efd0:	65636170 65626d5c 2d322d64 6c697562     pace\mbed-2-buil
    efe0:	696c2d64 72617262 61685c79 61745c6c     d-library\hal\ta
    eff0:	74656772 61685c73 41545c6c 54454752     rgets\hal\TARGET
    f000:	6d74415f 545c6c65 45475241 41535f54     _Atmel\TARGET_SA
    f010:	6f435f4d 78657472 5c50304d 6f697067     M_CortexM0P\gpio
    f020:	6970615f 0000632e 4a5c3a43 696b6e65     _api.c..C:\Jenki
    f030:	775c736e 736b726f 65636170 65626d5c     ns\workspace\mbe
    f040:	2d322d64 6c697562 696c2d64 72617262     d-2-build-librar
    f050:	61685c79 61745c6c 74656772 61685c73     y\hal\targets\ha
    f060:	41545c6c 54454752 6d74415f 545c6c65     l\TARGET_Atmel\T
    f070:	45475241 41535f54 6f435f4d 78657472     ARGET_SAM_Cortex
    f080:	5c50304d 6d6e6970 632e7061 00000000     M0P\pinmap.c....
    f090:	74726f70 00000000 42000800 42000c00     port.......B...B
    f0a0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    f0b0:	6c637963 705f7365 755f7265 203e2073     cycles_per_us > 
    f0c0:	00000030 4a5c3a43 696b6e65 775c736e     0...C:\Jenkins\w
    f0d0:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f0e0:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f0f0:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f100:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f110:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f120:	745f7375 656b6369 00632e72 75646f6d     us_ticker.c.modu
    f130:	0000656c                                le..

0000f134 <tc_interrupt_vectors.12802>:
    f134:	00141312 4a5c3a43 696b6e65 775c736e     ....C:\Jenkins\w
    f144:	736b726f 65636170 65626d5c 2d322d64     orkspace\mbed-2-
    f154:	6c697562 696c2d64 72617262 61685c79     build-library\ha
    f164:	61745c6c 74656772 61685c73 41545c6c     l\targets\hal\TA
    f174:	54454752 6d74415f 545c6c65 45475241     RGET_Atmel\TARGE
    f184:	41535f54 6f435f4d 78657472 5c50304d     T_SAM_CortexM0P\
    f194:	5f697073 2e697061 00000063 6b6c6373     spi_api.c...sclk
    f1a4:	203d2120 0000434e 00000000               != NC......

0000f1b0 <_ZTVN4mbed8FileBaseE>:
	...
    f1b8:	000064b1 000064e5                       .d...d..

0000f1c0 <_ZTVN4mbed8FileLikeE>:
	...
    f1c8:	00003fc1 00003fc1 00003fc1 00003fc1     .?...?...?...?..
    f1d8:	00003fc1 00003fc1 00003d15 00000000     .?...?...=......
    f1e8:	00000000 fffffffc 00000000 00000000     ................
    f1f8:	00000000                                ....

0000f1fc <us_interface>:
    f1fc:	00005dd5 00005de9 00005e71 00005e95     .]...]..q^...^..
    f20c:	00005e09                                .^..

0000f210 <us_data>:
    f210:	0000f1fc 20004394 42002c00 42003000     .....C. .,.B.0.B
    f220:	42003400 001c1c1b 10000800 00002000     .4.B......... ..
    f230:	000076e8 000075d6 000076bc 000075c2     .v...u...v...u..
    f240:	000076bc 000076c6 000076bc 000075c2     .v...v...v...u..
    f250:	000075d6 000075d6 000076c6 000075c2     .u...u...v...u..
    f260:	000075cc 000075cc 000075cc 0000792e     .u...u...u...y..
    f270:	00007f7c 00007f5a 00007f5a 00007f4e     |...Z...Z...N...
    f280:	00007e42 00007e42 00007f42 00007f4e     B~..B~..B...N...
    f290:	00007e42 00007f42 00007e42 00007f4e     B~..B...B~..N...
    f2a0:	00007e46 00007e46 00007e46 0000815c     F~..F~..F~..\...

0000f2b0 <__sf_fake_stdin>:
	...

0000f2d0 <__sf_fake_stdout>:
	...

0000f2f0 <__sf_fake_stderr>:
	...
    f310:	00000043                                C...

0000f314 <_global_impure_ptr>:
    f314:	200000d4 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    f324:	47464567 464e4900 666e6900 4e414e00     gEFG.INF.inf.NAN
    f334:	6e616e00 32313000 36353433 41393837     .nan.0123456789A
    f344:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    f354:	64636261 65006665 00646c25 0000f37e     abcdef.e%ld.~...
    f364:	0000f381 0000f384 61462d41 3938662d     ........A-Fa-f89
    f374:	33323130 37363534 2d2b005d 00303000     01234567].+-.00.
    f384:	00005878                                xX..

0000f388 <fpinan.5315>:
    f388:	00000034 fffffbce 000003cb 00000001     4...............
	...

0000f3a0 <tinytens>:
    f3a0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    f3b0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    f3c0:	64ac6f43 11680628                       Co.d(.h.

0000f3c8 <fpi.5279>:
    f3c8:	00000035 fffffbce 000003cb 00000001     5...............
    f3d8:	00000000                                ....

0000f3dc <_ctype_>:
    f3dc:	20202000 20202020 28282020 20282828     .         ((((( 
    f3ec:	20202020 20202020 20202020 20202020                     
    f3fc:	10108820 10101010 10101010 10101010      ...............
    f40c:	04040410 04040404 10040404 10101010     ................
    f41c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    f42c:	01010101 01010101 01010101 10101010     ................
    f43c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    f44c:	02020202 02020202 02020202 10101010     ................
    f45c:	00000020 00000000 00000000 00000000      ...............
	...
    f4dc:	666e4900 74696e69 614e0079 4f50004e     .Infinity.NaN.PO
    f4ec:	00584953 0000002e 00000000              SIX.........

0000f4f8 <__mprec_tens>:
    f4f8:	00000000 3ff00000 00000000 40240000     .......?......$@
    f508:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    f518:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    f528:	00000000 412e8480 00000000 416312d0     .......A......cA
    f538:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    f548:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    f558:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    f568:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    f578:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    f588:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    f598:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    f5a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    f5b8:	79d99db4 44ea7843                       ...yCx.D

0000f5c0 <__mprec_bigtens>:
    f5c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    f5d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    f5e0:	7f73bf3c 75154fdd                       <.s..O.u

0000f5e8 <p05.5314>:
    f5e8:	00000005 00000019 0000007d              ........}...

0000f5f4 <_init>:
    f5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5f6:	46c0      	nop			; (mov r8, r8)
    f5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f5fa:	bc08      	pop	{r3}
    f5fc:	469e      	mov	lr, r3
    f5fe:	4770      	bx	lr

0000f600 <__init_array_start>:
    f600:	000000dd 	.word	0x000000dd
    f604:	00000635 	.word	0x00000635
    f608:	00000b31 	.word	0x00000b31

0000f60c <_fini>:
    f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f60e:	46c0      	nop			; (mov r8, r8)
    f610:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f612:	bc08      	pop	{r3}
    f614:	469e      	mov	lr, r3
    f616:	4770      	bx	lr

0000f618 <__fini_array_start>:
    f618:	000000b5 	.word	0x000000b5
